
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c40c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  0800c5f0  0800c5f0  0001c5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da78  0800da78  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800da78  0800da78  0001da78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da80  0800da80  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da80  0800da80  0001da80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da84  0800da84  0001da84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800da88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200001f0  0800dc78  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800dc78  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019585  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003505  00000000  00000000  000397e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100b  00000000  00000000  0003e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021989  00000000  00000000  0003f1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a84  00000000  00000000  00060b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce4fc  00000000  00000000  0007a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007178  00000000  00000000  00148ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014fc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c5d4 	.word	0x0800c5d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c5d4 	.word	0x0800c5d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <delay_us>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

__STATIC_INLINE void delay_us(uint32_t us)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <delay_us+0x3c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <delay_us+0x40>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <delay_us+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8001062:	bf00      	nop
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <delay_us+0x44>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8fa      	bhi.n	8001064 <delay_us+0x24>
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000008 	.word	0x20000008
 8001080:	431bde83 	.word	0x431bde83
 8001084:	e0001000 	.word	0xe0001000

08001088 <_enable_slave>:

static bool _debug = 0;

/*============================ Private ============================*/

static inline void _enable_slave(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f002 fbd1 	bl	800383c <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <_disable_slave>:

static inline void _disable_slave(){
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f002 fbc6 	bl	800383c <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_read_register>:

static uint8_t _read_register(uint8_t ADNS_REG_addr){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  _enable_slave();
 80010be:	f7ff ffe3 	bl	8001088 <_enable_slave>

  ADNS_REG_addr &= 0x7f;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);// send adress of the register, with MSBit = 0 to indicate it's a read
 80010cc:	1df9      	adds	r1, r7, #7
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <_read_register+0x58>)
 80010d4:	f003 fee7 	bl	8004ea6 <HAL_SPI_Transmit>

  delay_us(100); // tSRAD
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f7ff ffb1 	bl	8001040 <delay_us>

  uint8_t data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&hspi1, &data, 1, 100);// read data
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <_read_register+0x58>)
 80010ec:	f004 f849 	bl	8005182 <HAL_SPI_Receive>

  delay_us(1); // tSCLK-_ncs for read operation is 120ns
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ffa5 	bl	8001040 <delay_us>
  _disable_slave();
 80010f6:	f7ff ffd2 	bl	800109e <_disable_slave>
  delay_us(19); //  tSRW/tSRR (=20us) minus tSCLK-_ncs
 80010fa:	2013      	movs	r0, #19
 80010fc:	f7ff ffa0 	bl	8001040 <delay_us>

  return data;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000488 	.word	0x20000488

08001110 <_write_register>:

static void _write_register(uint8_t ADNS_REG_addr, uint8_t data){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	_enable_slave();
 8001120:	f7ff ffb2 	bl	8001088 <_enable_slave>

	ADNS_REG_addr |= 0x80;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112a:	b2db      	uxtb	r3, r3
 800112c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);//send adress of the register, with MSBit = 1 to indicate it's a write
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	2364      	movs	r3, #100	; 0x64
 8001132:	2201      	movs	r2, #1
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <_write_register+0x50>)
 8001136:	f003 feb6 	bl	8004ea6 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &data, 1, 100);//send data
 800113a:	1db9      	adds	r1, r7, #6
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <_write_register+0x50>)
 8001142:	f003 feb0 	bl	8004ea6 <HAL_SPI_Transmit>

    delay_us(20); // tSCLK-_ncs for write operation
 8001146:	2014      	movs	r0, #20
 8001148:	f7ff ff7a 	bl	8001040 <delay_us>
    _disable_slave();
 800114c:	f7ff ffa7 	bl	800109e <_disable_slave>
    delay_us(100); // tSWW/tSWR (=120us) minus tSCLK-_ncs. Could be shortened, but is looks like a safe lower bound
 8001150:	2064      	movs	r0, #100	; 0x64
 8001152:	f7ff ff75 	bl	8001040 <delay_us>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000488 	.word	0x20000488

08001164 <_upload_firmware>:

static void _upload_firmware(){// send the firmware to the chip, cf p.18 of the datasheet
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  if (_debug) printf("Uploading optical sensors's firmware... \n");
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <_upload_firmware+0x8c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <_upload_firmware+0x14>
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <_upload_firmware+0x90>)
 8001174:	f006 fb80 	bl	8007878 <puts>

  _write_register(ADNS_REG_Configuration_IV, 0x02); // set the configuration_IV register in 3k firmware mode   bit 1 = 1 for 3k mode, other bits are reserved
 8001178:	2102      	movs	r1, #2
 800117a:	2039      	movs	r0, #57	; 0x39
 800117c:	f7ff ffc8 	bl	8001110 <_write_register>

  _write_register(ADNS_REG_SROM_Enable, 0x1d);// write 0x1d in SROM_enable reg for initializing
 8001180:	211d      	movs	r1, #29
 8001182:	2013      	movs	r0, #19
 8001184:	f7ff ffc4 	bl	8001110 <_write_register>

  HAL_Delay(10);// wait for more than one frame period assuming that the frame rate is as low as 100fps... even if it should never be that low
 8001188:	200a      	movs	r0, #10
 800118a:	f001 fecf 	bl	8002f2c <HAL_Delay>

  _write_register(ADNS_REG_SROM_Enable, 0x18); // write 0x18 to SROM_enable to start SROM download
 800118e:	2118      	movs	r1, #24
 8001190:	2013      	movs	r0, #19
 8001192:	f7ff ffbd 	bl	8001110 <_write_register>

  // write the SROM file (=firmware data)
  _enable_slave();
 8001196:	f7ff ff77 	bl	8001088 <_enable_slave>

  uint8_t buffer = ADNS_REG_SROM_Load_Burst | 0x80;
 800119a:	23e2      	movs	r3, #226	; 0xe2
 800119c:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 800119e:	1cf9      	adds	r1, r7, #3
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2201      	movs	r2, #1
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <_upload_firmware+0x94>)
 80011a6:	f003 fe7e 	bl	8004ea6 <HAL_SPI_Transmit>

  delay_us(15);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f7ff ff48 	bl	8001040 <delay_us>

  // send all uint8_ts of the firmware (on ne peut pas utiliser la fonction transmit directement, car il faut respecter le délais de 15us)
  uint8_t c;
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	e010      	b.n	80011d8 <_upload_firmware+0x74>
    c = _adns_firmware_data[i];
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <_upload_firmware+0x98>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	70bb      	strb	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, &c, 1, 100);
 80011c0:	1cb9      	adds	r1, r7, #2
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	2201      	movs	r2, #1
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <_upload_firmware+0x94>)
 80011c8:	f003 fe6d 	bl	8004ea6 <HAL_SPI_Transmit>
    delay_us(15);
 80011cc:	200f      	movs	r0, #15
 80011ce:	f7ff ff37 	bl	8001040 <delay_us>
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f640 32fd 	movw	r2, #3069	; 0xbfd
 80011de:	4293      	cmp	r3, r2
 80011e0:	dde9      	ble.n	80011b6 <_upload_firmware+0x52>
  }

  _disable_slave();
 80011e2:	f7ff ff5c 	bl	800109e <_disable_slave>
  }
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000230 	.word	0x20000230
 80011f4:	0800c5f0 	.word	0x0800c5f0
 80011f8:	20000488 	.word	0x20000488
 80011fc:	0800c970 	.word	0x0800c970

08001200 <_display_registers>:

static void _display_registers(void){ // display basic information of the module (primarely to check communication)
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08f      	sub	sp, #60	; 0x3c
 8001204:	af00      	add	r7, sp, #0
	int oreg[7] = {0x00,0x3F,0x2A,0x02};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	232a      	movs	r3, #42	; 0x2a
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	char* oregname[] = {"Product_ID","Inverse_Product_ID","SROM_Version","Motion"};
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <_display_registers+0xc0>)
 8001228:	f107 0408 	add.w	r4, r7, #8
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t regres;

	_enable_slave();
 8001232:	f7ff ff29 	bl	8001088 <_enable_slave>

	printf("ADNS9800 Registers : \n");
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <_display_registers+0xc4>)
 8001238:	f006 fb1e 	bl	8007878 <puts>
	for(int i=0; i<4; i++){
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
 8001240:	e034      	b.n	80012ac <_display_registers+0xac>
		uint8_t buffer = oreg[i];
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	443b      	add	r3, r7
 800124a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	71bb      	strb	r3, [r7, #6]
		HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 8001252:	1db9      	adds	r1, r7, #6
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2201      	movs	r2, #1
 8001258:	481b      	ldr	r0, [pc, #108]	; (80012c8 <_display_registers+0xc8>)
 800125a:	f003 fe24 	bl	8004ea6 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f001 fe64 	bl	8002f2c <HAL_Delay>

		printf(oregname[i]);
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3338      	adds	r3, #56	; 0x38
 800126a:	443b      	add	r3, r7
 800126c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001270:	4618      	mov	r0, r3
 8001272:	f006 fa93 	bl	800779c <iprintf>
		printf(" (at adress 0x%02X) :", oreg[i]);
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	3338      	adds	r3, #56	; 0x38
 800127c:	443b      	add	r3, r7
 800127e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001282:	4619      	mov	r1, r3
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <_display_registers+0xcc>)
 8001286:	f006 fa89 	bl	800779c <iprintf>

		HAL_SPI_Receive(&hspi1, &regres, 1, 100);
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2201      	movs	r2, #1
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <_display_registers+0xc8>)
 8001292:	f003 ff76 	bl	8005182 <HAL_SPI_Receive>
		printf(" 0x%02X \n",regres);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <_display_registers+0xd0>)
 800129c:	f006 fa7e 	bl	800779c <iprintf>

		HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f001 fe43 	bl	8002f2c <HAL_Delay>
	for(int i=0; i<4; i++){
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	3301      	adds	r3, #1
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	ddc7      	ble.n	8001242 <_display_registers+0x42>
	}
	_disable_slave();
 80012b2:	f7ff fef4 	bl	800109e <_disable_slave>
}
 80012b6:	bf00      	nop
 80012b8:	373c      	adds	r7, #60	; 0x3c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800c690 	.word	0x0800c690
 80012c4:	0800c61c 	.word	0x0800c61c
 80012c8:	20000488 	.word	0x20000488
 80012cc:	0800c634 	.word	0x0800c634
 80012d0:	0800c64c 	.word	0x0800c64c

080012d4 <_convert_from_comp>:

static long _convert_from_comp(long b){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  //Convert from 2's complement
  if(b & 0x8000){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <_convert_from_comp+0x1e>
    b = -1 * ((b ^ 0xffff) + 1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 80012ec:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 80012f0:	607b      	str	r3, [r7, #4]
    }
  return b;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_update_pointer>:

static void _update_pointer(void){
 8001300:	b598      	push	{r3, r4, r7, lr}
 8001302:	af00      	add	r7, sp, #0
	_enable_slave();
 8001304:	f7ff fec0 	bl	8001088 <_enable_slave>
	raw_data[0] = (_read_register(ADNS_REG_delta_x_L) | (_read_register(ADNS_REG_delta_x_H) << 8));
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff fed3 	bl	80010b4 <_read_register>
 800130e:	4603      	mov	r3, r0
 8001310:	461c      	mov	r4, r3
 8001312:	2004      	movs	r0, #4
 8001314:	f7ff fece 	bl	80010b4 <_read_register>
 8001318:	4603      	mov	r3, r0
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4323      	orrs	r3, r4
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <_update_pointer+0x44>)
 8001320:	6013      	str	r3, [r2, #0]
	raw_data[1] = (_read_register(ADNS_REG_delta_y_L) | (_read_register(ADNS_REG_delta_y_H) << 8));
 8001322:	2005      	movs	r0, #5
 8001324:	f7ff fec6 	bl	80010b4 <_read_register>
 8001328:	4603      	mov	r3, r0
 800132a:	461c      	mov	r4, r3
 800132c:	2006      	movs	r0, #6
 800132e:	f7ff fec1 	bl	80010b4 <_read_register>
 8001332:	4603      	mov	r3, r0
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4323      	orrs	r3, r4
 8001338:	4a02      	ldr	r2, [pc, #8]	; (8001344 <_update_pointer+0x44>)
 800133a:	6053      	str	r3, [r2, #4]
	_disable_slave();
 800133c:	f7ff feaf 	bl	800109e <_disable_slave>
}
 8001340:	bf00      	nop
 8001342:	bd98      	pop	{r3, r4, r7, pc}
 8001344:	2000020c 	.word	0x2000020c

08001348 <adnsInit>:
/*============================ Public ============================*/

void adnsInit(){ // see datasheet page 20
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	//SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
	_disable_slave(); // ensure that the serial port is reset
 800134e:	f7ff fea6 	bl	800109e <_disable_slave>
	_enable_slave(); // ensure that the serial port is reset
 8001352:	f7ff fe99 	bl	8001088 <_enable_slave>
	_disable_slave(); // ensure that the serial port is reset
 8001356:	f7ff fea2 	bl	800109e <_disable_slave>
	_write_register(ADNS_REG_Power_Up_Reset, 0x5a); // force reset
 800135a:	215a      	movs	r1, #90	; 0x5a
 800135c:	203a      	movs	r0, #58	; 0x3a
 800135e:	f7ff fed7 	bl	8001110 <_write_register>
	HAL_Delay(50); // wait for it to reboot
 8001362:	2032      	movs	r0, #50	; 0x32
 8001364:	f001 fde2 	bl	8002f2c <HAL_Delay>
	// read registers 0x02 to 0x06 (and discard the data)
	_read_register(ADNS_REG_Motion);
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff fea3 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_L);
 800136e:	2003      	movs	r0, #3
 8001370:	f7ff fea0 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_H);
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff fe9d 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_L);
 800137a:	2005      	movs	r0, #5
 800137c:	f7ff fe9a 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_H);
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff fe97 	bl	80010b4 <_read_register>
	// upload the firmware
	_upload_firmware();
 8001386:	f7ff feed 	bl	8001164 <_upload_firmware>
	HAL_Delay(10);
 800138a:	200a      	movs	r0, #10
 800138c:	f001 fdce 	bl	8002f2c <HAL_Delay>
	// enable laser(bit 0 = 0b), in normal mode (bits 3,2,1 = 000b)
	// reading the actual value of the register is important because the real
	// default value is different from what is said in the datasheet, and if you
	// change the reserved bytess (like by writing 0x00...) it would not work.
	uint8_t laser_ctrl0 = _read_register(ADNS_REG_LASER_CTRL0);
 8001390:	2020      	movs	r0, #32
 8001392:	f7ff fe8f 	bl	80010b4 <_read_register>
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	_write_register(ADNS_REG_LASER_CTRL0, laser_ctrl0 & 0xf0 );
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f023 030f 	bic.w	r3, r3, #15
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4619      	mov	r1, r3
 80013a4:	2020      	movs	r0, #32
 80013a6:	f7ff feb3 	bl	8001110 <_write_register>

	HAL_Delay(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f001 fdbe 	bl	8002f2c <HAL_Delay>

	if (_debug) printf("Optical chip started up \n");
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <adnsInit+0xc0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <adnsInit+0x76>
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <adnsInit+0xc4>)
 80013ba:	f006 fa5d 	bl	8007878 <puts>

	if (_debug) _display_registers();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <adnsInit+0xc0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <adnsInit+0x82>
 80013c6:	f7ff ff1b 	bl	8001200 <_display_registers>
	if (_debug) printf("coef is set to %.4f dots per millimeter \n", _units_per_millimeter);
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <adnsInit+0xc0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <adnsInit+0x9e>
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <adnsInit+0xc8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8de 	bl	8000598 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <adnsInit+0xcc>)
 80013e2:	f006 f9db 	bl	800779c <iprintf>
	HAL_Delay(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f001 fda0 	bl	8002f2c <HAL_Delay>

	_disable_slave();
 80013ec:	f7ff fe57 	bl	800109e <_disable_slave>

	if(_debug) printf("ADNS9800 initialization done \n");
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <adnsInit+0xc0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <adnsInit+0xb6>
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <adnsInit+0xd0>)
 80013fa:	f006 fa3d 	bl	8007878 <puts>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000230 	.word	0x20000230
 800140c:	0800c6a0 	.word	0x0800c6a0
 8001410:	20000000 	.word	0x20000000
 8001414:	0800c6bc 	.word	0x0800c6bc
 8001418:	0800c6e8 	.word	0x0800c6e8

0800141c <adnsUpdate>:

bool adnsUpdate(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	//SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));

	_update_pointer();
 8001420:	f7ff ff6e 	bl	8001300 <_update_pointer>

	raw_delta[0] = _convert_from_comp(raw_data[0]);
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <adnsUpdate+0x94>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff53 	bl	80012d4 <_convert_from_comp>
 800142e:	4603      	mov	r3, r0
 8001430:	4a20      	ldr	r2, [pc, #128]	; (80014b4 <adnsUpdate+0x98>)
 8001432:	6013      	str	r3, [r2, #0]
	raw_delta[1] = - _convert_from_comp(raw_data[1]);
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <adnsUpdate+0x94>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff4b 	bl	80012d4 <_convert_from_comp>
 800143e:	4603      	mov	r3, r0
 8001440:	425b      	negs	r3, r3
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <adnsUpdate+0x98>)
 8001444:	6053      	str	r3, [r2, #4]

	if (raw_delta[0] == 0 && raw_delta[1] == 0) return 0;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <adnsUpdate+0x98>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <adnsUpdate+0x3e>
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <adnsUpdate+0x98>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <adnsUpdate+0x3e>
 8001456:	2300      	movs	r3, #0
 8001458:	e028      	b.n	80014ac <adnsUpdate+0x90>

	mm_delta[0] = raw_delta[0] / _units_per_millimeter;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <adnsUpdate+0x98>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <adnsUpdate+0x9c>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001470:	ee16 0a90 	vmov	r0, s13
 8001474:	f7ff f890 	bl	8000598 <__aeabi_f2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	490f      	ldr	r1, [pc, #60]	; (80014bc <adnsUpdate+0xa0>)
 800147e:	e9c1 2300 	strd	r2, r3, [r1]
	mm_delta[1] = raw_delta[1] / _units_per_millimeter;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <adnsUpdate+0x98>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <adnsUpdate+0x9c>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001498:	ee16 0a90 	vmov	r0, s13
 800149c:	f7ff f87c 	bl	8000598 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4905      	ldr	r1, [pc, #20]	; (80014bc <adnsUpdate+0xa0>)
 80014a6:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return 1;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000020c 	.word	0x2000020c
 80014b4:	20000214 	.word	0x20000214
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000220 	.word	0x20000220

080014c0 <adnsX>:
void adnsSetDebugReports(bool state){
	printf("Reports for the ADNS 9800 are now set to %d \n", state);
	_debug = state;
}

double adnsX(void){
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	return mm_delta[0];
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <adnsX+0x20>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ce:	eeb0 0a47 	vmov.f32	s0, s14
 80014d2:	eef0 0a67 	vmov.f32	s1, s15
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000220 	.word	0x20000220

080014e4 <adnsY>:

double adnsY(void){
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return mm_delta[1];
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <adnsY+0x20>)
 80014ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80014f2:	eeb0 0a47 	vmov.f32	s0, s14
 80014f6:	eef0 0a67 	vmov.f32	s1, s15
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000220 	.word	0x20000220

08001508 <print_header>:
int16_t angular_velocity_Q1 = 10;
int16_t gravity_Q1 = 8;

/*============================ Debug ============================*/

void print_header(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
		//Print the four byte header
		printf("Header:");
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <print_header+0x50>)
 8001510:	f006 f944 	bl	800779c <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 8001514:	2300      	movs	r3, #0
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	e014      	b.n	8001544 <print_header+0x3c>
		{
			printf(" ");
 800151a:	2020      	movs	r0, #32
 800151c:	f006 f950 	bl	80077c0 <putchar>
			if (shtpHeader[x] < 0x10)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <print_header+0x54>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	d802      	bhi.n	8001530 <print_header+0x28>
				printf("0");
 800152a:	2030      	movs	r0, #48	; 0x30
 800152c:	f006 f948 	bl	80077c0 <putchar>
			printf("%01X",shtpHeader[x]);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <print_header+0x54>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	4619      	mov	r1, r3
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <print_header+0x58>)
 800153a:	f006 f92f 	bl	800779c <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3301      	adds	r3, #1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d9e7      	bls.n	800151a <print_header+0x12>
		}
		printf("\n");
 800154a:	200a      	movs	r0, #10
 800154c:	f006 f938 	bl	80077c0 <putchar>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800c738 	.word	0x0800c738
 800155c:	20000234 	.word	0x20000234
 8001560:	0800c740 	.word	0x0800c740

08001564 <print_packet>:
void print_packet(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
 800156a:	4b43      	ldr	r3, [pc, #268]	; (8001678 <print_packet+0x114>)
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <print_packet+0x114>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21b      	sxth	r3, r3
 800157c:	80fb      	strh	r3, [r7, #6]

	//Print the four byte header
	print_header();
 800157e:	f7ff ffc3 	bl	8001508 <print_header>

	uint16_t printLength = packetLength - 4;
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	3b04      	subs	r3, #4
 8001586:	80bb      	strh	r3, [r7, #4]
	if (printLength > 40){printLength = 40; printf("(Shortened) ");} //Artificial limit. We don't want the phone book.
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	2b28      	cmp	r3, #40	; 0x28
 800158c:	d904      	bls.n	8001598 <print_packet+0x34>
 800158e:	2328      	movs	r3, #40	; 0x28
 8001590:	80bb      	strh	r3, [r7, #4]
 8001592:	483a      	ldr	r0, [pc, #232]	; (800167c <print_packet+0x118>)
 8001594:	f006 f902 	bl	800779c <iprintf>

	if (packetLength & 1 << 15){
 8001598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da06      	bge.n	80015ae <print_packet+0x4a>
			printf("[Continued] ");
 80015a0:	4837      	ldr	r0, [pc, #220]	; (8001680 <print_packet+0x11c>)
 80015a2:	f006 f8fb 	bl	800779c <iprintf>
			packetLength &= ~(1 << 15);
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015ac:	80fb      	strh	r3, [r7, #6]
		}
	printf("Body:");
 80015ae:	4835      	ldr	r0, [pc, #212]	; (8001684 <print_packet+0x120>)
 80015b0:	f006 f8f4 	bl	800779c <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	e014      	b.n	80015e4 <print_packet+0x80>
	{
		printf(" ");
 80015ba:	2020      	movs	r0, #32
 80015bc:	f006 f900 	bl	80077c0 <putchar>
		if (shtpData[x] < 0x10)
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <print_packet+0x124>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	d802      	bhi.n	80015d0 <print_packet+0x6c>
			printf("0");
 80015ca:	2030      	movs	r0, #48	; 0x30
 80015cc:	f006 f8f8 	bl	80077c0 <putchar>
		printf("%01X",shtpData[x]);
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <print_packet+0x124>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	4619      	mov	r1, r3
 80015d8:	482c      	ldr	r0, [pc, #176]	; (800168c <print_packet+0x128>)
 80015da:	f006 f8df 	bl	800779c <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	3301      	adds	r3, #1
 80015e2:	70fb      	strb	r3, [r7, #3]
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	88ba      	ldrh	r2, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8e5      	bhi.n	80015ba <print_packet+0x56>
	}

	printf("\n");
 80015ee:	200a      	movs	r0, #10
 80015f0:	f006 f8e6 	bl	80077c0 <putchar>

	printf("Length: %u ", packetLength);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4825      	ldr	r0, [pc, #148]	; (8001690 <print_packet+0x12c>)
 80015fa:	f006 f8cf 	bl	800779c <iprintf>

	printf("Channel: ");
 80015fe:	4825      	ldr	r0, [pc, #148]	; (8001694 <print_packet+0x130>)
 8001600:	f006 f8cc 	bl	800779c <iprintf>
	switch (shtpHeader[2]){
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <print_packet+0x114>)
 8001606:	789b      	ldrb	r3, [r3, #2]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d827      	bhi.n	800165c <print_packet+0xf8>
 800160c:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <print_packet+0xb0>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	0800162d 	.word	0x0800162d
 8001618:	08001635 	.word	0x08001635
 800161c:	0800163d 	.word	0x0800163d
 8001620:	08001645 	.word	0x08001645
 8001624:	0800164d 	.word	0x0800164d
 8001628:	08001655 	.word	0x08001655
		case 0: printf("Command"); break;
 800162c:	481a      	ldr	r0, [pc, #104]	; (8001698 <print_packet+0x134>)
 800162e:	f006 f8b5 	bl	800779c <iprintf>
 8001632:	e01a      	b.n	800166a <print_packet+0x106>
		case 1: printf("Executable"); break;
 8001634:	4819      	ldr	r0, [pc, #100]	; (800169c <print_packet+0x138>)
 8001636:	f006 f8b1 	bl	800779c <iprintf>
 800163a:	e016      	b.n	800166a <print_packet+0x106>
		case 2: printf("Control"); break;
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <print_packet+0x13c>)
 800163e:	f006 f8ad 	bl	800779c <iprintf>
 8001642:	e012      	b.n	800166a <print_packet+0x106>
		case 3: printf("Sensor-report"); break;
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <print_packet+0x140>)
 8001646:	f006 f8a9 	bl	800779c <iprintf>
 800164a:	e00e      	b.n	800166a <print_packet+0x106>
		case 4: printf("Wake-report"); break;
 800164c:	4816      	ldr	r0, [pc, #88]	; (80016a8 <print_packet+0x144>)
 800164e:	f006 f8a5 	bl	800779c <iprintf>
 8001652:	e00a      	b.n	800166a <print_packet+0x106>
		case 5: printf("Gyro-vector"); break;
 8001654:	4815      	ldr	r0, [pc, #84]	; (80016ac <print_packet+0x148>)
 8001656:	f006 f8a1 	bl	800779c <iprintf>
 800165a:	e006      	b.n	800166a <print_packet+0x106>
		default: printf("Raw header : %hu", shtpHeader[2]); break;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <print_packet+0x114>)
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	4619      	mov	r1, r3
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <print_packet+0x14c>)
 8001664:	f006 f89a 	bl	800779c <iprintf>
 8001668:	bf00      	nop
	}
	printf("\n");
 800166a:	200a      	movs	r0, #10
 800166c:	f006 f8a8 	bl	80077c0 <putchar>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000234 	.word	0x20000234
 800167c:	0800c748 	.word	0x0800c748
 8001680:	0800c758 	.word	0x0800c758
 8001684:	0800c768 	.word	0x0800c768
 8001688:	20000238 	.word	0x20000238
 800168c:	0800c740 	.word	0x0800c740
 8001690:	0800c770 	.word	0x0800c770
 8001694:	0800c77c 	.word	0x0800c77c
 8001698:	0800c788 	.word	0x0800c788
 800169c:	0800c790 	.word	0x0800c790
 80016a0:	0800c79c 	.word	0x0800c79c
 80016a4:	0800c7a4 	.word	0x0800c7a4
 80016a8:	0800c7b4 	.word	0x0800c7b4
 80016ac:	0800c7c0 	.word	0x0800c7c0
 80016b0:	0800c7cc 	.word	0x0800c7cc

080016b4 <_enable_slave>:

/*============================ Hardware abstraction ============================*/

static inline void _enable_slave(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2110      	movs	r1, #16
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f002 f8bc 	bl	800383c <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_disable_slave>:
static inline void _disable_slave(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2110      	movs	r1, #16
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f002 f8b2 	bl	800383c <HAL_GPIO_WritePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <_reset_slave_blocking>:
static inline void _reset_slave_blocking(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2101      	movs	r1, #1
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f002 f8a8 	bl	800383c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016ec:	200a      	movs	r0, #10
 80016ee:	f001 fc1d 	bl	8002f2c <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f002 f89f 	bl	800383c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016fe:	200a      	movs	r0, #10
 8001700:	f001 fc14 	bl	8002f2c <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2101      	movs	r1, #1
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f002 f896 	bl	800383c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001710:	200a      	movs	r0, #10
 8001712:	f001 fc0b 	bl	8002f2c <HAL_Delay>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}

0800171a <_sensor_awaiting>:
static inline bool _sensor_awaiting(){
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin);
 800171e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f002 f871 	bl	800380c <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}

0800173a <_wait_for_int_blocking_timeout>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
static bool _wait_for_int_blocking_timeout(uint16_t timeout){
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	80fb      	strh	r3, [r7, #6]
	for (uint16_t counter = 0; counter < timeout; counter++){
 8001744:	2300      	movs	r3, #0
 8001746:	81fb      	strh	r3, [r7, #14]
 8001748:	e010      	b.n	800176c <_wait_for_int_blocking_timeout+0x32>
		if (!HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin))
 800174a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001752:	f002 f85b 	bl	800380c <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <_wait_for_int_blocking_timeout+0x26>
			return (true);
 800175c:	2301      	movs	r3, #1
 800175e:	e00a      	b.n	8001776 <_wait_for_int_blocking_timeout+0x3c>
		HAL_Delay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f001 fbe3 	bl	8002f2c <HAL_Delay>
	for (uint16_t counter = 0; counter < timeout; counter++){
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	3301      	adds	r3, #1
 800176a:	81fb      	strh	r3, [r7, #14]
 800176c:	89fa      	ldrh	r2, [r7, #14]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	429a      	cmp	r2, r3
 8001772:	d3ea      	bcc.n	800174a <_wait_for_int_blocking_timeout+0x10>
	}
	return (false);
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_wait_for_int_blocking>:
static bool _wait_for_int_blocking(){
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
	return _wait_for_int_blocking_timeout(BNO_STANDARD_INT_TIMEOUT);
 8001782:	20fa      	movs	r0, #250	; 0xfa
 8001784:	f7ff ffd9 	bl	800173a <_wait_for_int_blocking_timeout>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <_receive_packet>:

/*============================ Low Level ============================*/

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool _receive_packet(void){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 8001796:	f7ff ffc0 	bl	800171a <_sensor_awaiting>
 800179a:	4603      	mov	r3, r0
 800179c:	f083 0301 	eor.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_receive_packet+0x1a>
		return (false); //Data is not available
 80017a6:	2300      	movs	r3, #0
 80017a8:	e043      	b.n	8001832 <_receive_packet+0xa2>

	//Get first four bytes to find out how much data we need to read
	_enable_slave();
 80017aa:	f7ff ff83 	bl	80016b4 <_enable_slave>

	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(&hspi1, shtpHeader, 4, 500);
 80017ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b2:	2204      	movs	r2, #4
 80017b4:	4921      	ldr	r1, [pc, #132]	; (800183c <_receive_packet+0xac>)
 80017b6:	4822      	ldr	r0, [pc, #136]	; (8001840 <_receive_packet+0xb0>)
 80017b8:	f003 fce3 	bl	8005182 <HAL_SPI_Receive>
	shtpHeader[2] : channelNumber;
	shtpHeader[3] : sequenceNumber;
	*/

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = (((uint16_t)shtpHeader[1]/*MSB*/) << 8) | ((uint16_t)shtpHeader[0]/*LSB*/);
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <_receive_packet+0xac>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <_receive_packet+0xac>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017d6:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit

	if (dataLength == 0){
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <_receive_packet+0x66>
		//Packet is empty
		if (_debug) printf("Packet empty !");
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <_receive_packet+0xb4>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <_receive_packet+0x5e>
 80017e8:	4817      	ldr	r0, [pc, #92]	; (8001848 <_receive_packet+0xb8>)
 80017ea:	f005 ffd7 	bl	800779c <iprintf>
		_disable_slave();
 80017ee:	f7ff ff6b 	bl	80016c8 <_disable_slave>
		return (false); //All done
 80017f2:	2300      	movs	r3, #0
 80017f4:	e01d      	b.n	8001832 <_receive_packet+0xa2>
	}

	dataLength -= 4; //Remove the header bytes from the data count
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	3b04      	subs	r3, #4
 80017fa:	80fb      	strh	r3, [r7, #6]
	//Read incoming data into the shtpData array

	if (dataLength > BNO_MAX_PACKET_SIZE)  dataLength = BNO_MAX_PACKET_SIZE;
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001802:	d902      	bls.n	800180a <_receive_packet+0x7a>
 8001804:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001808:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1,shtpData, dataLength, 500);
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <_receive_packet+0xbc>)
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <_receive_packet+0xb0>)
 8001814:	f003 fcb5 	bl	8005182 <HAL_SPI_Receive>

	_disable_slave(); //Release BNO080
 8001818:	f7ff ff56 	bl	80016c8 <_disable_slave>

	if(_debug == 2){printf("New packet retrieved :\n");print_packet();}
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <_receive_packet+0xb4>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d104      	bne.n	8001830 <_receive_packet+0xa0>
 8001826:	480a      	ldr	r0, [pc, #40]	; (8001850 <_receive_packet+0xc0>)
 8001828:	f006 f826 	bl	8007878 <puts>
 800182c:	f7ff fe9a 	bl	8001564 <print_packet>
		has_reset = 0;
		printf("Sensor is back up and running \n");
	}
	*/

	return (true); //We're done!
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000234 	.word	0x20000234
 8001840:	20000488 	.word	0x20000488
 8001844:	20000004 	.word	0x20000004
 8001848:	0800c7e0 	.word	0x0800c7e0
 800184c:	20000238 	.word	0x20000238
 8001850:	0800c7f0 	.word	0x0800c7f0

08001854 <_send_packet>:
static bool _send_packet(uint8_t channelNumber, uint8_t dataLength){
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	460a      	mov	r2, r1
 800185e:	71fb      	strb	r3, [r7, #7]
 8001860:	4613      	mov	r3, r2
 8001862:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	3304      	adds	r3, #4
 8001868:	73fb      	strb	r3, [r7, #15]

	//Wait for BNO080 to indicate it is available for communication
	if (_wait_for_int_blocking() == false)
 800186a:	f7ff ff88 	bl	800177e <_wait_for_int_blocking>
 800186e:	4603      	mov	r3, r0
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <_send_packet+0x2a>
		return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e025      	b.n	80018ca <_send_packet+0x76>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode 3
	_enable_slave();
 800187e:	f7ff ff19 	bl	80016b4 <_enable_slave>

	//Send the 4 byte packet header
	uint8_t header_buffer[4];
	header_buffer[0] = (packetLength & 0xFF); //Packet length LSB // uhhhhhh & 0xFF ?
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	723b      	strb	r3, [r7, #8]
	header_buffer[1] = (packetLength >> 8); //Packet length MSB
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	121b      	asrs	r3, r3, #8
 800188a:	b2db      	uxtb	r3, r3
 800188c:	727b      	strb	r3, [r7, #9]
	header_buffer[2] = channelNumber;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	72bb      	strb	r3, [r7, #10]
	header_buffer[3] = (sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <_send_packet+0x80>)
 8001896:	5cd2      	ldrb	r2, [r2, r3]
 8001898:	1c51      	adds	r1, r2, #1
 800189a:	b2c8      	uxtb	r0, r1
 800189c:	490d      	ldr	r1, [pc, #52]	; (80018d4 <_send_packet+0x80>)
 800189e:	54c8      	strb	r0, [r1, r3]
 80018a0:	4613      	mov	r3, r2
 80018a2:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi1, header_buffer, 4, 500);
 80018a4:	f107 0108 	add.w	r1, r7, #8
 80018a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ac:	2204      	movs	r2, #4
 80018ae:	480a      	ldr	r0, [pc, #40]	; (80018d8 <_send_packet+0x84>)
 80018b0:	f003 faf9 	bl	8004ea6 <HAL_SPI_Transmit>

	//Send the user's data packet
	HAL_SPI_Transmit(&hspi1, shtpData, dataLength, 500);
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <_send_packet+0x88>)
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <_send_packet+0x84>)
 80018c0:	f003 faf1 	bl	8004ea6 <HAL_SPI_Transmit>

	_disable_slave();
 80018c4:	f7ff ff00 	bl	80016c8 <_disable_slave>

	return (true);
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000364 	.word	0x20000364
 80018d8:	20000488 	.word	0x20000488
 80018dc:	20000238 	.word	0x20000238

080018e0 <_set_feature_command>:

static void _set_feature_command(uint8_t reportID, uint16_t millisBetweenReports, uint32_t specificConfig){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	603a      	str	r2, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	460b      	mov	r3, r1
 80018ee:	80bb      	strh	r3, [r7, #4]

	long microsBetweenReports = (long)millisBetweenReports * 1000L;
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]

	shtpData[0] = BNO_SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <_set_feature_command+0xb0>)
 80018fe:	22fd      	movs	r2, #253	; 0xfd
 8001900:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <_set_feature_command+0xb0>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <_set_feature_command+0xb0>)
 800190a:	2200      	movs	r2, #0
 800190c:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <_set_feature_command+0xb0>)
 8001910:	2200      	movs	r2, #0
 8001912:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <_set_feature_command+0xb0>)
 8001916:	2200      	movs	r2, #0
 8001918:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <_set_feature_command+0xb0>)
 8001920:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	121b      	asrs	r3, r3, #8
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <_set_feature_command+0xb0>)
 800192a:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	141b      	asrs	r3, r3, #16
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <_set_feature_command+0xb0>)
 8001934:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	0e1b      	lsrs	r3, r3, #24
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <_set_feature_command+0xb0>)
 800193e:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <_set_feature_command+0xb0>)
 8001942:	2200      	movs	r2, #0
 8001944:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <_set_feature_command+0xb0>)
 8001948:	2200      	movs	r2, #0
 800194a:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <_set_feature_command+0xb0>)
 800194e:	2200      	movs	r2, #0
 8001950:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <_set_feature_command+0xb0>)
 8001954:	2200      	movs	r2, #0
 8001956:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <_set_feature_command+0xb0>)
 800195e:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <_set_feature_command+0xb0>)
 8001968:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <_set_feature_command+0xb0>)
 8001972:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	0e1b      	lsrs	r3, r3, #24
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <_set_feature_command+0xb0>)
 800197c:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	_send_packet(CHANNEL_CONTROL, 17);
 800197e:	2302      	movs	r3, #2
 8001980:	2111      	movs	r1, #17
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff66 	bl	8001854 <_send_packet>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000238 	.word	0x20000238
 8001994:	00000000 	.word	0x00000000

08001998 <_quaternion_to_float>:

static float _quaternion_to_float(int16_t fixedPointValue, uint8_t qPoint){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	80fb      	strh	r3, [r7, #6]
 80019a4:	4613      	mov	r3, r2
 80019a6:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	425b      	negs	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdd9 	bl	8000574 <__aeabi_i2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b11 	vmov	d1, r2, r3
 80019ca:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001a08 <_quaternion_to_float+0x70>
 80019ce:	f009 fc31 	bl	800b234 <pow>
 80019d2:	ec55 4b10 	vmov	r4, r5, d0
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fe30 	bl	8000648 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f922 	bl	8000c38 <__aeabi_d2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	ee07 3a90 	vmov	s15, r3
}
 80019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40000000 	.word	0x40000000

08001a10 <_parse_input_report>:
//shtpData[4:5]: i/accel x/gyro x/etc
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
static uint16_t _parse_input_report(void){
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001a16:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <_parse_input_report+0x288>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <_parse_input_report+0x288>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	81fb      	strh	r3, [r7, #14]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a2e:	81fb      	strh	r3, [r7, #14]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	3b04      	subs	r3, #4
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	81fb      	strh	r3, [r7, #14]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001a38:	4b98      	ldr	r3, [pc, #608]	; (8001c9c <_parse_input_report+0x28c>)
 8001a3a:	791b      	ldrb	r3, [r3, #4]
 8001a3c:	061a      	lsls	r2, r3, #24
 8001a3e:	4b97      	ldr	r3, [pc, #604]	; (8001c9c <_parse_input_report+0x28c>)
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4b95      	ldr	r3, [pc, #596]	; (8001c9c <_parse_input_report+0x28c>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <_parse_input_report+0x28c>)
 8001a50:	7852      	ldrb	r2, [r2, #1]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	4a92      	ldr	r2, [pc, #584]	; (8001ca0 <_parse_input_report+0x290>)
 8001a56:	6013      	str	r3, [r2, #0]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
 8001a58:	4b8f      	ldr	r3, [pc, #572]	; (8001c98 <_parse_input_report+0x288>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d155      	bne.n	8001b0e <_parse_input_report+0xfe>
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <_parse_input_report+0x28c>)
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <_parse_input_report+0x28c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b8b      	ldr	r3, [pc, #556]	; (8001ca4 <_parse_input_report+0x294>)
 8001a78:	801a      	strh	r2, [r3, #0]
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <_parse_input_report+0x28c>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b86      	ldr	r3, [pc, #536]	; (8001c9c <_parse_input_report+0x28c>)
 8001a84:	789b      	ldrb	r3, [r3, #2]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b86      	ldr	r3, [pc, #536]	; (8001ca8 <_parse_input_report+0x298>)
 8001a90:	801a      	strh	r2, [r3, #0]
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <_parse_input_report+0x28c>)
 8001a94:	795b      	ldrb	r3, [r3, #5]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <_parse_input_report+0x28c>)
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b81      	ldr	r3, [pc, #516]	; (8001cac <_parse_input_report+0x29c>)
 8001aa8:	801a      	strh	r2, [r3, #0]
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <_parse_input_report+0x28c>)
 8001aac:	79db      	ldrb	r3, [r3, #7]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	; (8001c9c <_parse_input_report+0x28c>)
 8001ab4:	799b      	ldrb	r3, [r3, #6]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <_parse_input_report+0x2a0>)
 8001ac0:	801a      	strh	r2, [r3, #0]
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <_parse_input_report+0x28c>)
 8001ac4:	7a5b      	ldrb	r3, [r3, #9]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b74      	ldr	r3, [pc, #464]	; (8001c9c <_parse_input_report+0x28c>)
 8001acc:	7a1b      	ldrb	r3, [r3, #8]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b77      	ldr	r3, [pc, #476]	; (8001cb4 <_parse_input_report+0x2a4>)
 8001ad8:	801a      	strh	r2, [r3, #0]
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <_parse_input_report+0x28c>)
 8001adc:	7adb      	ldrb	r3, [r3, #11]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <_parse_input_report+0x28c>)
 8001ae4:	7a9b      	ldrb	r3, [r3, #10]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <_parse_input_report+0x2a8>)
 8001af0:	801a      	strh	r2, [r3, #0]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
 8001af2:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <_parse_input_report+0x28c>)
 8001af4:	7b5b      	ldrb	r3, [r3, #13]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <_parse_input_report+0x28c>)
 8001afc:	7b1b      	ldrb	r3, [r3, #12]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <_parse_input_report+0x2ac>)
 8001b08:	801a      	strh	r2, [r3, #0]

		return BNO_REPORTID_GYRO_INTEGRATED_ROTATION_VECTOR;
 8001b0a:	232a      	movs	r3, #42	; 0x2a
 8001b0c:	e198      	b.n	8001e40 <_parse_input_report+0x430>
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <_parse_input_report+0x28c>)
 8001b10:	79db      	ldrb	r3, [r3, #7]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	737b      	strb	r3, [r7, #13]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b18:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <_parse_input_report+0x28c>)
 8001b1a:	7a9b      	ldrb	r3, [r3, #10]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <_parse_input_report+0x28c>)
 8001b22:	7a5b      	ldrb	r3, [r3, #9]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	817b      	strh	r3, [r7, #10]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <_parse_input_report+0x28c>)
 8001b2e:	7b1b      	ldrb	r3, [r3, #12]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <_parse_input_report+0x28c>)
 8001b36:	7adb      	ldrb	r3, [r3, #11]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	813b      	strh	r3, [r7, #8]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <_parse_input_report+0x28c>)
 8001b42:	7b9b      	ldrb	r3, [r3, #14]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <_parse_input_report+0x28c>)
 8001b4a:	7b5b      	ldrb	r3, [r3, #13]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	80fb      	strh	r3, [r7, #6]
	uint16_t data4 = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001b58:	2300      	movs	r3, #0
 8001b5a:	82bb      	strh	r3, [r7, #20]
	uint16_t data6 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	827b      	strh	r3, [r7, #18]

	if (dataLength - 5 > 9){
 8001b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b64:	2b0e      	cmp	r3, #14
 8001b66:	dd09      	ble.n	8001b7c <_parse_input_report+0x16c>
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <_parse_input_report+0x28c>)
 8001b6a:	7c1b      	ldrb	r3, [r3, #16]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <_parse_input_report+0x28c>)
 8001b72:	7bdb      	ldrb	r3, [r3, #15]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11){
 8001b7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	dd09      	ble.n	8001b98 <_parse_input_report+0x188>
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <_parse_input_report+0x28c>)
 8001b86:	7c9b      	ldrb	r3, [r3, #18]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <_parse_input_report+0x28c>)
 8001b8e:	7c5b      	ldrb	r3, [r3, #17]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	82bb      	strh	r3, [r7, #20]
	}
	if (dataLength - 5 > 13){
 8001b98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	dd09      	ble.n	8001bb4 <_parse_input_report+0x1a4>
		data6 = (uint16_t)shtpData[5 + 15] << 8 | shtpData[5 + 14];
 8001ba0:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <_parse_input_report+0x28c>)
 8001ba2:	7d1b      	ldrb	r3, [r3, #20]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <_parse_input_report+0x28c>)
 8001baa:	7cdb      	ldrb	r3, [r3, #19]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	827b      	strh	r3, [r7, #18]
	}

	//Store these generic values to their proper global variable
	switch (shtpData[5]){
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <_parse_input_report+0x28c>)
 8001bb6:	795b      	ldrb	r3, [r3, #5]
 8001bb8:	2b29      	cmp	r3, #41	; 0x29
 8001bba:	dc5b      	bgt.n	8001c74 <_parse_input_report+0x264>
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f340 8139 	ble.w	8001e34 <_parse_input_report+0x424>
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	2b28      	cmp	r3, #40	; 0x28
 8001bc6:	f200 8135 	bhi.w	8001e34 <_parse_input_report+0x424>
 8001bca:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <_parse_input_report+0x1c0>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001c7d 	.word	0x08001c7d
 8001bd4:	08001ced 	.word	0x08001ced
 8001bd8:	08001d37 	.word	0x08001d37
 8001bdc:	08001cd1 	.word	0x08001cd1
 8001be0:	08001d53 	.word	0x08001d53
 8001be4:	08001e19 	.word	0x08001e19
 8001be8:	08001d09 	.word	0x08001d09
 8001bec:	08001d53 	.word	0x08001d53
 8001bf0:	08001e35 	.word	0x08001e35
 8001bf4:	08001e35 	.word	0x08001e35
 8001bf8:	08001e35 	.word	0x08001e35
 8001bfc:	08001e35 	.word	0x08001e35
 8001c00:	08001e35 	.word	0x08001e35
 8001c04:	08001e35 	.word	0x08001e35
 8001c08:	08001e35 	.word	0x08001e35
 8001c0c:	08001d7b 	.word	0x08001d7b
 8001c10:	08001d85 	.word	0x08001d85
 8001c14:	08001e35 	.word	0x08001e35
 8001c18:	08001d8d 	.word	0x08001d8d
 8001c1c:	08001dc7 	.word	0x08001dc7
 8001c20:	08001ddb 	.word	0x08001ddb
 8001c24:	08001def 	.word	0x08001def
 8001c28:	08001e35 	.word	0x08001e35
 8001c2c:	08001e35 	.word	0x08001e35
 8001c30:	08001e35 	.word	0x08001e35
 8001c34:	08001e35 	.word	0x08001e35
 8001c38:	08001e35 	.word	0x08001e35
 8001c3c:	08001e35 	.word	0x08001e35
 8001c40:	08001e35 	.word	0x08001e35
 8001c44:	08001d97 	.word	0x08001d97
 8001c48:	08001e35 	.word	0x08001e35
 8001c4c:	08001e35 	.word	0x08001e35
 8001c50:	08001e35 	.word	0x08001e35
 8001c54:	08001e35 	.word	0x08001e35
 8001c58:	08001e35 	.word	0x08001e35
 8001c5c:	08001e35 	.word	0x08001e35
 8001c60:	08001e35 	.word	0x08001e35
 8001c64:	08001e35 	.word	0x08001e35
 8001c68:	08001e35 	.word	0x08001e35
 8001c6c:	08001d53 	.word	0x08001d53
 8001c70:	08001d53 	.word	0x08001d53
 8001c74:	2bf1      	cmp	r3, #241	; 0xf1
 8001c76:	f000 80c4 	beq.w	8001e02 <_parse_input_report+0x3f2>
 8001c7a:	e0db      	b.n	8001e34 <_parse_input_report+0x424>
	case (BNO_REPORTID_ACCELEROMETER):
		accelAccuracy = status;
 8001c7c:	7b7b      	ldrb	r3, [r7, #13]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <_parse_input_report+0x2b0>)
 8001c82:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <_parse_input_report+0x2b4>)
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <_parse_input_report+0x2b8>)
 8001c8c:	893b      	ldrh	r3, [r7, #8]
 8001c8e:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <_parse_input_report+0x2bc>)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	8013      	strh	r3, [r2, #0]
		break;
 8001c96:	e0d0      	b.n	8001e3a <_parse_input_report+0x42a>
 8001c98:	20000234 	.word	0x20000234
 8001c9c:	20000238 	.word	0x20000238
 8001ca0:	200003b8 	.word	0x200003b8
 8001ca4:	20000398 	.word	0x20000398
 8001ca8:	2000039a 	.word	0x2000039a
 8001cac:	2000039c 	.word	0x2000039c
 8001cb0:	2000039e 	.word	0x2000039e
 8001cb4:	200003a4 	.word	0x200003a4
 8001cb8:	200003a6 	.word	0x200003a6
 8001cbc:	200003a8 	.word	0x200003a8
 8001cc0:	20000370 	.word	0x20000370
 8001cc4:	2000036a 	.word	0x2000036a
 8001cc8:	2000036c 	.word	0x2000036c
 8001ccc:	2000036e 	.word	0x2000036e
	case (BNO_REPORTID_LINEAR_ACCELERATION):
		accelLinAccuracy = status;
 8001cd0:	7b7b      	ldrb	r3, [r7, #13]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <_parse_input_report+0x43c>)
 8001cd6:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <_parse_input_report+0x440>)
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001cde:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <_parse_input_report+0x444>)
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <_parse_input_report+0x448>)
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	8013      	strh	r3, [r2, #0]
		break;
 8001cea:	e0a6      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_GYROSCOPE):
		gyroAccuracy = status;
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <_parse_input_report+0x44c>)
 8001cf2:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001cf4:	4a5a      	ldr	r2, [pc, #360]	; (8001e60 <_parse_input_report+0x450>)
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <_parse_input_report+0x454>)
 8001cfc:	893b      	ldrh	r3, [r7, #8]
 8001cfe:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001d00:	4a59      	ldr	r2, [pc, #356]	; (8001e68 <_parse_input_report+0x458>)
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	8013      	strh	r3, [r2, #0]
		break;
 8001d06:	e098      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_UNCALIBRATED_GYRO):
		UncalibGyroAccuracy = status;
 8001d08:	7b7b      	ldrb	r3, [r7, #13]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <_parse_input_report+0x45c>)
 8001d0e:	801a      	strh	r2, [r3, #0]
		rawUncalibGyroX = data1;
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <_parse_input_report+0x460>)
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	8013      	strh	r3, [r2, #0]
		rawUncalibGyroY = data2;
 8001d16:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <_parse_input_report+0x464>)
 8001d18:	893b      	ldrh	r3, [r7, #8]
 8001d1a:	8013      	strh	r3, [r2, #0]
		rawUncalibGyroZ = data3;
 8001d1c:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <_parse_input_report+0x468>)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	8013      	strh	r3, [r2, #0]
		rawBiasX  = data4;
 8001d22:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <_parse_input_report+0x46c>)
 8001d24:	8afb      	ldrh	r3, [r7, #22]
 8001d26:	8013      	strh	r3, [r2, #0]
		rawBiasY  = data5;
 8001d28:	4a55      	ldr	r2, [pc, #340]	; (8001e80 <_parse_input_report+0x470>)
 8001d2a:	8abb      	ldrh	r3, [r7, #20]
 8001d2c:	8013      	strh	r3, [r2, #0]
		rawBiasZ  = data6;
 8001d2e:	4a55      	ldr	r2, [pc, #340]	; (8001e84 <_parse_input_report+0x474>)
 8001d30:	8a7b      	ldrh	r3, [r7, #18]
 8001d32:	8013      	strh	r3, [r2, #0]
		break;
 8001d34:	e081      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_MAGNETIC_FIELD):
		magAccuracy = status;
 8001d36:	7b7b      	ldrb	r3, [r7, #13]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <_parse_input_report+0x478>)
 8001d3c:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001d3e:	4a53      	ldr	r2, [pc, #332]	; (8001e8c <_parse_input_report+0x47c>)
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <_parse_input_report+0x480>)
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <_parse_input_report+0x484>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	8013      	strh	r3, [r2, #0]
		break;
 8001d50:	e073      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_AR_VR_STABILIZED_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR):
	case (BNO_REPORTID_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_ROTATION_VECTOR):
		quatAccuracy = status;
 8001d52:	7b7b      	ldrb	r3, [r7, #13]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <_parse_input_report+0x488>)
 8001d58:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d5a:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <_parse_input_report+0x48c>)
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <_parse_input_report+0x490>)
 8001d62:	893b      	ldrh	r3, [r7, #8]
 8001d64:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d66:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <_parse_input_report+0x494>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <_parse_input_report+0x498>)
 8001d6e:	8afb      	ldrh	r3, [r7, #22]
 8001d70:	8013      	strh	r3, [r2, #0]
		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
 8001d72:	4a4e      	ldr	r2, [pc, #312]	; (8001eac <_parse_input_report+0x49c>)
 8001d74:	8abb      	ldrh	r3, [r7, #20]
 8001d76:	8013      	strh	r3, [r2, #0]
		break;
 8001d78:	e05f      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_TAP_DETECTOR):
		tapDetector = shtpData[5 + 4]; //Byte 4 only
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001d7c:	7a5a      	ldrb	r2, [r3, #9]
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <_parse_input_report+0x4a4>)
 8001d80:	701a      	strb	r2, [r3, #0]
		break;
 8001d82:	e05a      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_STEP_COUNTER):
		stepCount = data3; //Bytes 8/9
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <_parse_input_report+0x4a8>)
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	8013      	strh	r3, [r2, #0]
		break;
 8001d8a:	e056      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_STABILITY_CLASSIFIER):
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001d8e:	7a5a      	ldrb	r2, [r3, #9]
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <_parse_input_report+0x4ac>)
 8001d92:	701a      	strb	r2, [r3, #0]
		break;
 8001d94:	e051      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER):
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001d98:	7a9a      	ldrb	r2, [r3, #10]
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <_parse_input_report+0x4b0>)
 8001d9c:	701a      	strb	r2, [r3, #0]

		//Load activity classification confidences into the array
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001d9e:	2300      	movs	r3, #0
 8001da0:	747b      	strb	r3, [r7, #17]
 8001da2:	e00c      	b.n	8001dbe <_parse_input_report+0x3ae>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001da4:	7c7b      	ldrb	r3, [r7, #17]
 8001da6:	f103 020b 	add.w	r2, r3, #11
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <_parse_input_report+0x4b4>)
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	7c7b      	ldrb	r3, [r7, #17]
 8001db0:	440b      	add	r3, r1
 8001db2:	493f      	ldr	r1, [pc, #252]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001db4:	5c8a      	ldrb	r2, [r1, r2]
 8001db6:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001db8:	7c7b      	ldrb	r3, [r7, #17]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	747b      	strb	r3, [r7, #17]
 8001dbe:	7c7b      	ldrb	r3, [r7, #17]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d9ef      	bls.n	8001da4 <_parse_input_report+0x394>
		break;
 8001dc4:	e039      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_RAW_ACCELEROMETER):
		memsRawAccelX = data1;
 8001dc6:	4a40      	ldr	r2, [pc, #256]	; (8001ec8 <_parse_input_report+0x4b8>)
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001dcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <_parse_input_report+0x4bc>)
 8001dce:	893b      	ldrh	r3, [r7, #8]
 8001dd0:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <_parse_input_report+0x4c0>)
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	8013      	strh	r3, [r2, #0]
		break;
 8001dd8:	e02f      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_RAW_GYROSCOPE):
		memsRawGyroX = data1;
 8001dda:	4a3e      	ldr	r2, [pc, #248]	; (8001ed4 <_parse_input_report+0x4c4>)
 8001ddc:	897b      	ldrh	r3, [r7, #10]
 8001dde:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001de0:	4a3d      	ldr	r2, [pc, #244]	; (8001ed8 <_parse_input_report+0x4c8>)
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001de6:	4a3d      	ldr	r2, [pc, #244]	; (8001edc <_parse_input_report+0x4cc>)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	8013      	strh	r3, [r2, #0]
		break;
 8001dec:	e025      	b.n	8001e3a <_parse_input_report+0x42a>
	case (BNO_REPORTID_RAW_MAGNETOMETER):
		memsRawMagX = data1;
 8001dee:	4a3c      	ldr	r2, [pc, #240]	; (8001ee0 <_parse_input_report+0x4d0>)
 8001df0:	897b      	ldrh	r3, [r7, #10]
 8001df2:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001df4:	4a3b      	ldr	r2, [pc, #236]	; (8001ee4 <_parse_input_report+0x4d4>)
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	; (8001ee8 <_parse_input_report+0x4d8>)
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	8013      	strh	r3, [r2, #0]
		break;
 8001e00:	e01b      	b.n	8001e3a <_parse_input_report+0x42a>
		/*
		if (_printDebug == true){
			_debugPort->println(F("!"));
		}*/
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001e04:	79db      	ldrb	r3, [r3, #7]
 8001e06:	717b      	strb	r3, [r7, #5]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001e08:	797b      	ldrb	r3, [r7, #5]
 8001e0a:	2b07      	cmp	r3, #7
 8001e0c:	d114      	bne.n	8001e38 <_parse_input_report+0x428>
			/*if (_printDebug == true){
				_debugPort->println(F("ME Cal report found!"));
			}*/
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001e10:	7a9a      	ldrb	r2, [r3, #10]
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <_parse_input_report+0x4dc>)
 8001e14:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e16:	e00f      	b.n	8001e38 <_parse_input_report+0x428>
	case(BNO_REPORTID_GRAVITY):
		gravityAccuracy = status;
 8001e18:	7b7b      	ldrb	r3, [r7, #13]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <_parse_input_report+0x4e0>)
 8001e1e:	801a      	strh	r2, [r3, #0]
		gravityX = data1;
 8001e20:	4a34      	ldr	r2, [pc, #208]	; (8001ef4 <_parse_input_report+0x4e4>)
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	8013      	strh	r3, [r2, #0]
		gravityY = data2;
 8001e26:	4a34      	ldr	r2, [pc, #208]	; (8001ef8 <_parse_input_report+0x4e8>)
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	8013      	strh	r3, [r2, #0]
		gravityZ = data3;
 8001e2c:	4a33      	ldr	r2, [pc, #204]	; (8001efc <_parse_input_report+0x4ec>)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	8013      	strh	r3, [r2, #0]
		break;
 8001e32:	e002      	b.n	8001e3a <_parse_input_report+0x42a>
	default :
		return 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e003      	b.n	8001e40 <_parse_input_report+0x430>
		break;
 8001e38:	bf00      	nop
	}
	//TODO additional feature reports may be strung together. Parse them all.

	return shtpData[5];
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <_parse_input_report+0x4a0>)
 8001e3c:	795b      	ldrb	r3, [r3, #5]
 8001e3e:	b29b      	uxth	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000378 	.word	0x20000378
 8001e50:	20000372 	.word	0x20000372
 8001e54:	20000374 	.word	0x20000374
 8001e58:	20000376 	.word	0x20000376
 8001e5c:	20000380 	.word	0x20000380
 8001e60:	2000037a 	.word	0x2000037a
 8001e64:	2000037c 	.word	0x2000037c
 8001e68:	2000037e 	.word	0x2000037e
 8001e6c:	2000038e 	.word	0x2000038e
 8001e70:	20000382 	.word	0x20000382
 8001e74:	20000384 	.word	0x20000384
 8001e78:	20000386 	.word	0x20000386
 8001e7c:	20000388 	.word	0x20000388
 8001e80:	2000038a 	.word	0x2000038a
 8001e84:	2000038c 	.word	0x2000038c
 8001e88:	20000396 	.word	0x20000396
 8001e8c:	20000390 	.word	0x20000390
 8001e90:	20000392 	.word	0x20000392
 8001e94:	20000394 	.word	0x20000394
 8001e98:	200003a2 	.word	0x200003a2
 8001e9c:	20000398 	.word	0x20000398
 8001ea0:	2000039a 	.word	0x2000039a
 8001ea4:	2000039c 	.word	0x2000039c
 8001ea8:	2000039e 	.word	0x2000039e
 8001eac:	200003a0 	.word	0x200003a0
 8001eb0:	20000238 	.word	0x20000238
 8001eb4:	200003b2 	.word	0x200003b2
 8001eb8:	200003b4 	.word	0x200003b4
 8001ebc:	200003bc 	.word	0x200003bc
 8001ec0:	200003bd 	.word	0x200003bd
 8001ec4:	200003c0 	.word	0x200003c0
 8001ec8:	200003c6 	.word	0x200003c6
 8001ecc:	200003c8 	.word	0x200003c8
 8001ed0:	200003ca 	.word	0x200003ca
 8001ed4:	200003cc 	.word	0x200003cc
 8001ed8:	200003ce 	.word	0x200003ce
 8001edc:	200003d0 	.word	0x200003d0
 8001ee0:	200003d2 	.word	0x200003d2
 8001ee4:	200003d4 	.word	0x200003d4
 8001ee8:	200003d6 	.word	0x200003d6
 8001eec:	200003c4 	.word	0x200003c4
 8001ef0:	200003b0 	.word	0x200003b0
 8001ef4:	200003aa 	.word	0x200003aa
 8001ef8:	200003ac 	.word	0x200003ac
 8001efc:	200003ae 	.word	0x200003ae

08001f00 <_parse_command_report>:
//shtpData[5 + 4]: R4
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
static uint16_t _parse_command_report(void){
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
	if (shtpData[0] == BNO_SHTP_REPORT_COMMAND_RESPONSE){
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <_parse_command_report+0x38>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2bf1      	cmp	r3, #241	; 0xf1
 8001f0c:	d10d      	bne.n	8001f2a <_parse_command_report+0x2a>
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <_parse_command_report+0x38>)
 8001f10:	789b      	ldrb	r3, [r3, #2]
 8001f12:	71fb      	strb	r3, [r7, #7]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b07      	cmp	r3, #7
 8001f18:	d103      	bne.n	8001f22 <_parse_command_report+0x22>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_parse_command_report+0x38>)
 8001f1c:	795a      	ldrb	r2, [r3, #5]
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_parse_command_report+0x3c>)
 8001f20:	701a      	strb	r2, [r3, #0]
		}
		return shtpData[0];
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <_parse_command_report+0x38>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	e000      	b.n	8001f2c <_parse_command_report+0x2c>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
	return 0;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000238 	.word	0x20000238
 8001f3c:	200003c4 	.word	0x200003c4

08001f40 <bno_setup>:
/*============================ High Level ============================*/

bool bno_setup(void){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
	_disable_slave();
 8001f46:	f7ff fbbf 	bl	80016c8 <_disable_slave>
	_reset_slave_blocking();
 8001f4a:	f7ff fbc7 	bl	80016dc <_reset_slave_blocking>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	_wait_for_int_blocking(); //Wait for assertion of INT before reading advert message.
 8001f4e:	f7ff fc16 	bl	800177e <_wait_for_int_blocking>
	_receive_packet();
 8001f52:	f7ff fc1d 	bl	8001790 <_receive_packet>
	_wait_for_int_blocking(); //Advert message is too long to be handled at once, repeat
 8001f56:	f7ff fc12 	bl	800177e <_wait_for_int_blocking>
	_receive_packet();
 8001f5a:	f7ff fc19 	bl	8001790 <_receive_packet>
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	_wait_for_int_blocking(); //Wait for assertion of INT before reading Init response
 8001f5e:	f7ff fc0e 	bl	800177e <_wait_for_int_blocking>
	_receive_packet();
 8001f62:	f7ff fc15 	bl	8001790 <_receive_packet>

	//Check communication with device
	shtpData[0] = BNO_SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <bno_setup+0x108>)
 8001f68:	22f9      	movs	r2, #249	; 0xf9
 8001f6a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <bno_setup+0x108>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	if(!_send_packet(CHANNEL_CONTROL, 2)){
 8001f72:	2302      	movs	r3, #2
 8001f74:	2102      	movs	r1, #2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc6c 	bl	8001854 <_send_packet>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <bno_setup+0x52>
		printf("Send command to the BNO085 failed");
 8001f88:	4830      	ldr	r0, [pc, #192]	; (800204c <bno_setup+0x10c>)
 8001f8a:	f005 fc07 	bl	800779c <iprintf>
		return false;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e056      	b.n	8002040 <bno_setup+0x100>
	}

	//Now we wait for response
	_wait_for_int_blocking();
 8001f92:	f7ff fbf4 	bl	800177e <_wait_for_int_blocking>
	_receive_packet();
 8001f96:	f7ff fbfb 	bl	8001790 <_receive_packet>
	if (shtpData[0] == BNO_SHTP_REPORT_PRODUCT_ID_RESPONSE){
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <bno_setup+0x108>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2bf8      	cmp	r3, #248	; 0xf8
 8001fa0:	d14d      	bne.n	800203e <bno_setup+0xfe>
		if (_debug){
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <bno_setup+0x110>)
 8001fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d046      	beq.n	800203a <bno_setup+0xfa>
			printf("Reset has occured (as expected at startup): %d\n", shtpData[1]);
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <bno_setup+0x108>)
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4828      	ldr	r0, [pc, #160]	; (8002054 <bno_setup+0x114>)
 8001fb4:	f005 fbf2 	bl	800779c <iprintf>
			printf("SW Version Major: 0x%04X", shtpData[2]);
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <bno_setup+0x108>)
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4826      	ldr	r0, [pc, #152]	; (8002058 <bno_setup+0x118>)
 8001fc0:	f005 fbec 	bl	800779c <iprintf>
			printf(" SW Version Minor: 0x%04X \n", shtpData[3]);
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <bno_setup+0x108>)
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4824      	ldr	r0, [pc, #144]	; (800205c <bno_setup+0x11c>)
 8001fcc:	f005 fbe6 	bl	800779c <iprintf>
			uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <bno_setup+0x108>)
 8001fd2:	79db      	ldrb	r3, [r3, #7]
 8001fd4:	061a      	lsls	r2, r3, #24
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <bno_setup+0x108>)
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <bno_setup+0x108>)
 8001fe0:	795b      	ldrb	r3, [r3, #5]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <bno_setup+0x108>)
 8001fe8:	7912      	ldrb	r2, [r2, #4]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
			printf("SW Part Number: %ld \n",SW_Part_Number);
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	481b      	ldr	r0, [pc, #108]	; (8002060 <bno_setup+0x120>)
 8001ff2:	f005 fbd3 	bl	800779c <iprintf>
			uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <bno_setup+0x108>)
 8001ff8:	7adb      	ldrb	r3, [r3, #11]
 8001ffa:	061a      	lsls	r2, r3, #24
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <bno_setup+0x108>)
 8001ffe:	7a9b      	ldrb	r3, [r3, #10]
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <bno_setup+0x108>)
 8002006:	7a5b      	ldrb	r3, [r3, #9]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4313      	orrs	r3, r2
 800200c:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <bno_setup+0x108>)
 800200e:	7a12      	ldrb	r2, [r2, #8]
 8002010:	4313      	orrs	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
			printf("SW Build Number: %ld \n", SW_Build_Number);
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <bno_setup+0x124>)
 8002018:	f005 fbc0 	bl	800779c <iprintf>
			uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <bno_setup+0x108>)
 800201e:	7b5b      	ldrb	r3, [r3, #13]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	b21a      	sxth	r2, r3
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <bno_setup+0x108>)
 8002026:	7b1b      	ldrb	r3, [r3, #12]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	80fb      	strh	r3, [r7, #6]
			printf("SW Version Patch: %d \n",SW_Version_Patch);
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <bno_setup+0x128>)
 8002036:	f005 fbb1 	bl	800779c <iprintf>
		}
		return (true);
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <bno_setup+0x100>
	}
	return (false); //Something went wrong
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000238 	.word	0x20000238
 800204c:	0800c808 	.word	0x0800c808
 8002050:	20000004 	.word	0x20000004
 8002054:	0800c82c 	.word	0x0800c82c
 8002058:	0800c85c 	.word	0x0800c85c
 800205c:	0800c878 	.word	0x0800c878
 8002060:	0800c894 	.word	0x0800c894
 8002064:	0800c8ac 	.word	0x0800c8ac
 8002068:	0800c8c4 	.word	0x0800c8c4

0800206c <bno_enable_rotation_vector>:

void bno_enable_rotation_vector(uint16_t millisBetweenReports){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
	_set_feature_command(BNO_REPORTID_ROTATION_VECTOR, millisBetweenReports, 0);
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	2005      	movs	r0, #5
 800207e:	f7ff fc2f 	bl	80018e0 <_set_feature_command>
	//HAL_Delay(100);
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <bno_get_readings>:

uint16_t bno_get_readings(void){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
/* handled by _receive_packet
	if (!_sensor_awaiting())
		return (0); //Data is not available
*/
	//printf("%d",shtpHeader[2]);
	if (_receive_packet() == true){
 8002090:	f7ff fb7e 	bl	8001790 <_receive_packet>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01e      	beq.n	80020d8 <bno_get_readings+0x4c>
		//Check to see if this packet is a sensor reporting its data to us
		//if (shtpHeader[2] != 0) printf("channel %d \n",shtpHeader[2] );
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == BNO_SHTP_REPORT_BASE_TIMESTAMP){
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <bno_get_readings+0x54>)
 800209c:	789b      	ldrb	r3, [r3, #2]
 800209e:	2203      	movs	r2, #3
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d107      	bne.n	80020b4 <bno_get_readings+0x28>
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <bno_get_readings+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2bfb      	cmp	r3, #251	; 0xfb
 80020aa:	d103      	bne.n	80020b4 <bno_get_readings+0x28>
			return _parse_input_report(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80020ac:	f7ff fcb0 	bl	8001a10 <_parse_input_report>
 80020b0:	4603      	mov	r3, r0
 80020b2:	e012      	b.n	80020da <bno_get_readings+0x4e>
		} else if (shtpHeader[2] == CHANNEL_CONTROL){
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <bno_get_readings+0x54>)
 80020b6:	789b      	ldrb	r3, [r3, #2]
 80020b8:	2202      	movs	r2, #2
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d103      	bne.n	80020c6 <bno_get_readings+0x3a>
			return _parse_command_report(); //This will update responses to commands, calibrationStatus, etc.
 80020be:	f7ff ff1f 	bl	8001f00 <_parse_command_report>
 80020c2:	4603      	mov	r3, r0
 80020c4:	e009      	b.n	80020da <bno_get_readings+0x4e>
		} else if (shtpHeader[2] == CHANNEL_GYRO){
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <bno_get_readings+0x54>)
 80020c8:	789b      	ldrb	r3, [r3, #2]
 80020ca:	2205      	movs	r2, #5
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d103      	bne.n	80020d8 <bno_get_readings+0x4c>
			return _parse_input_report();
 80020d0:	f7ff fc9e 	bl	8001a10 <_parse_input_report>
 80020d4:	4603      	mov	r3, r0
 80020d6:	e000      	b.n	80020da <bno_get_readings+0x4e>
		}
	}
	return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000234 	.word	0x20000234
 80020e4:	20000238 	.word	0x20000238

080020e8 <bno_get_yaw>:

float bno_get_yaw(void){
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
	 // get quaternion arguments
	float dqw = _quaternion_to_float(rawQuatReal, rotationVector_Q1);
 80020ee:	4b69      	ldr	r3, [pc, #420]	; (8002294 <bno_get_yaw+0x1ac>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4a68      	ldr	r2, [pc, #416]	; (8002298 <bno_get_yaw+0x1b0>)
 80020f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fc4a 	bl	8001998 <_quaternion_to_float>
 8002104:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float dqx = _quaternion_to_float(rawQuatI, rotationVector_Q1);
 8002108:	4b64      	ldr	r3, [pc, #400]	; (800229c <bno_get_yaw+0x1b4>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b21b      	sxth	r3, r3
 800210e:	4a62      	ldr	r2, [pc, #392]	; (8002298 <bno_get_yaw+0x1b0>)
 8002110:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc3d 	bl	8001998 <_quaternion_to_float>
 800211e:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqy = _quaternion_to_float(rawQuatJ, rotationVector_Q1);
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <bno_get_yaw+0x1b8>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b21b      	sxth	r3, r3
 8002128:	4a5b      	ldr	r2, [pc, #364]	; (8002298 <bno_get_yaw+0x1b0>)
 800212a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fc30 	bl	8001998 <_quaternion_to_float>
 8002138:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqz = _quaternion_to_float(rawQuatK, rotationVector_Q1);
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <bno_get_yaw+0x1bc>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b21b      	sxth	r3, r3
 8002142:	4a55      	ldr	r2, [pc, #340]	; (8002298 <bno_get_yaw+0x1b0>)
 8002144:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fc23 	bl	8001998 <_quaternion_to_float>
 8002152:	ed87 0a06 	vstr	s0, [r7, #24]

	//printf("%d %d %d %d \n", rawQuatReal,rawQuatI,rawQuatJ,rawQuatK);

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8002156:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800215a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800215e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002162:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216a:	edd7 7a07 	vldr	s15, [r7, #28]
 800216e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002176:	edd7 7a06 	vldr	s15, [r7, #24]
 800217a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	ee17 0a90 	vmov	r0, s15
 8002186:	f7fe fa07 	bl	8000598 <__aeabi_f2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ec43 2b10 	vmov	d0, r2, r3
 8002192:	f009 f8bf 	bl	800b314 <sqrt>
 8002196:	ec53 2b10 	vmov	r2, r3, d0
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe fd4b 	bl	8000c38 <__aeabi_d2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	617b      	str	r3, [r7, #20]
	dqw = dqw/norm;
 80021a6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80021aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dqx = dqx/norm;
 80021b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80021ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80021be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c2:	edc7 7a08 	vstr	s15, [r7, #32]
	dqy = dqy/norm;
 80021c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80021ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d2:	edc7 7a07 	vstr	s15, [r7, #28]
	dqz = dqz/norm;
 80021d6:	edd7 6a06 	vldr	s13, [r7, #24]
 80021da:	ed97 7a05 	vldr	s14, [r7, #20]
 80021de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e2:	edc7 7a06 	vstr	s15, [r7, #24]

	float ysqr = dqy * dqy;
 80021e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ee:	edc7 7a04 	vstr	s15, [r7, #16]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 80021f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80021fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fe:	edd7 6a08 	vldr	s13, [r7, #32]
 8002202:	edd7 7a07 	vldr	s15, [r7, #28]
 8002206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002212:	edc7 7a03 	vstr	s15, [r7, #12]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8002216:	edd7 7a06 	vldr	s15, [r7, #24]
 800221a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800221e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f9b5 	bl	8000598 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	f7fe f853 	bl	80002dc <__adddf3>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	f04f 0000 	mov.w	r0, #0
 800223e:	491a      	ldr	r1, [pc, #104]	; (80022a8 <bno_get_yaw+0x1c0>)
 8002240:	f7fe f84a 	bl	80002d8 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fcf4 	bl	8000c38 <__aeabi_d2f>
 8002250:	4603      	mov	r3, r0
 8002252:	60bb      	str	r3, [r7, #8]
	float yaw = atan2(t3, t4);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7fe f99f 	bl	8000598 <__aeabi_f2d>
 800225a:	4604      	mov	r4, r0
 800225c:	460d      	mov	r5, r1
 800225e:	68b8      	ldr	r0, [r7, #8]
 8002260:	f7fe f99a 	bl	8000598 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	ec43 2b11 	vmov	d1, r2, r3
 800226c:	ec45 4b10 	vmov	d0, r4, r5
 8002270:	f008 ffde 	bl	800b230 <atan2>
 8002274:	ec53 2b10 	vmov	r2, r3, d0
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fcdc 	bl	8000c38 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	607b      	str	r3, [r7, #4]

	return (yaw);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	ee07 3a90 	vmov	s15, r3
}
 800228a:	eeb0 0a67 	vmov.f32	s0, s15
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bdb0      	pop	{r4, r5, r7, pc}
 8002294:	2000039e 	.word	0x2000039e
 8002298:	20000006 	.word	0x20000006
 800229c:	20000398 	.word	0x20000398
 80022a0:	2000039a 	.word	0x2000039a
 80022a4:	2000039c 	.word	0x2000039c
 80022a8:	3ff00000 	.word	0x3ff00000

080022ac <DWT_Init>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <DWT_Init+0x28>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <DWT_Init+0x28>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <DWT_Init+0x2c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <DWT_Init+0x2c>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000edf0 	.word	0xe000edf0
 80022d8:	e0001000 	.word	0xe0001000

080022dc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022e6:	1df9      	adds	r1, r7, #7
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ec:	2201      	movs	r2, #1
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <__io_putchar+0x24>)
 80022f0:	f003 fc96 	bl	8005c20 <HAL_UART_Transmit>
	return ch;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200004ec 	.word	0x200004ec

08002304 <main>:
  * @retval int
  */
int bno_setup_done = 0;

int main(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230a:	f000 fd9e 	bl	8002e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230e:	f000 f88b 	bl	8002428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002312:	f000 fa0f 	bl	8002734 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8002316:	f000 f8d5 	bl	80024c4 <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 800231a:	f000 f9e3 	bl	80026e4 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800231e:	f000 f917 	bl	8002550 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002322:	f000 f955 	bl	80025d0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002326:	f000 f991 	bl	800264c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 800232a:	f7ff ffbf 	bl	80022ac <DWT_Init>
  printf("=== HAL init done, proceeding ... ===\n");
 800232e:	4838      	ldr	r0, [pc, #224]	; (8002410 <main+0x10c>)
 8002330:	f005 faa2 	bl	8007878 <puts>
  HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f001 fa7d 	bl	800383c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	2110      	movs	r1, #16
 8002346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234a:	f001 fa77 	bl	800383c <HAL_GPIO_WritePin>

  //adnsEnableDebugReports();
  adnsInit();
 800234e:	f7fe fffb 	bl	8001348 <adnsInit>

  if(!bno_setup()) printf("=== Could NOT initialize the BNO085 ! ===\n");
 8002352:	f7ff fdf5 	bl	8001f40 <bno_setup>
 8002356:	4603      	mov	r3, r0
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <main+0x64>
 8002362:	482c      	ldr	r0, [pc, #176]	; (8002414 <main+0x110>)
 8002364:	f005 fa88 	bl	8007878 <puts>
  bno_enable_rotation_vector(30);
 8002368:	201e      	movs	r0, #30
 800236a:	f7ff fe7f 	bl	800206c <bno_enable_rotation_vector>
  setup();
 800236e:	f000 fa87 	bl	8002880 <setup>
  printf("=== User init done, proceeding ... ===\n");
 8002372:	4829      	ldr	r0, [pc, #164]	; (8002418 <main+0x114>)
 8002374:	f005 fa80 	bl	8007878 <puts>
  bno_setup_done = 1;
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <main+0x118>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
  double x = 0, y = 0;
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8002396:	f000 fa7a 	bl	800288e <loop>
	  HAL_Delay(15);
 800239a:	200f      	movs	r0, #15
 800239c:	f000 fdc6 	bl	8002f2c <HAL_Delay>
	  if(bno_get_readings()) printf("yaw %.4f \n",bno_get_yaw());
 80023a0:	f7ff fe74 	bl	800208c <bno_get_readings>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <main+0xbe>
 80023aa:	f7ff fe9d 	bl	80020e8 <bno_get_yaw>
 80023ae:	ee10 3a10 	vmov	r3, s0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8f0 	bl	8000598 <__aeabi_f2d>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4818      	ldr	r0, [pc, #96]	; (8002420 <main+0x11c>)
 80023be:	f005 f9ed 	bl	800779c <iprintf>

	  if(adnsUpdate()){ x += adnsX(); y += adnsY(); printf("%.2f %.2f \n",x,y);}
 80023c2:	f7ff f82b 	bl	800141c <adnsUpdate>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0e4      	beq.n	8002396 <main+0x92>
 80023cc:	f7ff f878 	bl	80014c0 <adnsX>
 80023d0:	ec53 2b10 	vmov	r2, r3, d0
 80023d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023d8:	f7fd ff80 	bl	80002dc <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80023e4:	f7ff f87e 	bl	80014e4 <adnsY>
 80023e8:	ec53 2b10 	vmov	r2, r3, d0
 80023ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023f0:	f7fd ff74 	bl	80002dc <__adddf3>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9c7 2300 	strd	r2, r3, [r7]
 80023fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002400:	e9cd 2300 	strd	r2, r3, [sp]
 8002404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002408:	4806      	ldr	r0, [pc, #24]	; (8002424 <main+0x120>)
 800240a:	f005 f9c7 	bl	800779c <iprintf>
	  loop();
 800240e:	e7c2      	b.n	8002396 <main+0x92>
 8002410:	0800c8dc 	.word	0x0800c8dc
 8002414:	0800c904 	.word	0x0800c904
 8002418:	0800c930 	.word	0x0800c930
 800241c:	20000870 	.word	0x20000870
 8002420:	0800c958 	.word	0x0800c958
 8002424:	0800c964 	.word	0x0800c964

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 0318 	add.w	r3, r7, #24
 8002432:	2238      	movs	r2, #56	; 0x38
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f005 fb1e 	bl	8007a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800244a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800244e:	f001 fc5b 	bl	8003d08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002452:	2322      	movs	r3, #34	; 0x22
 8002454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800245c:	2340      	movs	r3, #64	; 0x40
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002460:	2301      	movs	r3, #1
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002464:	2302      	movs	r3, #2
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002468:	2302      	movs	r3, #2
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800246c:	2301      	movs	r3, #1
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002470:	230c      	movs	r3, #12
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002474:	2302      	movs	r3, #2
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002478:	2302      	movs	r3, #2
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800247c:	2304      	movs	r3, #4
 800247e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	4618      	mov	r0, r3
 8002486:	f001 fcf3 	bl	8003e70 <HAL_RCC_OscConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002490:	f000 f9f1 	bl	8002876 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002494:	230f      	movs	r3, #15
 8002496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002498:	2303      	movs	r3, #3
 800249a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fff7 	bl	80044a0 <HAL_RCC_ClockConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024b8:	f000 f9dd 	bl	8002876 <Error_Handler>
  }
}
 80024bc:	bf00      	nop
 80024be:	3750      	adds	r7, #80	; 0x50
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024ca:	4a20      	ldr	r2, [pc, #128]	; (800254c <MX_FDCAN2_Init+0x88>)
 80024cc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024f4:	2210      	movs	r2, #16
 80024f6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <MX_FDCAN2_Init+0x84>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002500:	2202      	movs	r2, #2
 8002502:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002506:	2202      	movs	r2, #2
 8002508:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <MX_FDCAN2_Init+0x84>)
 800250c:	2201      	movs	r2, #1
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002512:	2201      	movs	r2, #1
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002518:	2201      	movs	r2, #1
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <MX_FDCAN2_Init+0x84>)
 800251e:	2201      	movs	r2, #1
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002524:	2200      	movs	r2, #0
 8002526:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <MX_FDCAN2_Init+0x84>)
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002530:	2200      	movs	r2, #0
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002534:	4804      	ldr	r0, [pc, #16]	; (8002548 <MX_FDCAN2_Init+0x84>)
 8002536:	f000 fe2b 	bl	8003190 <HAL_FDCAN_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002540:	f000 f999 	bl	8002876 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200003d8 	.word	0x200003d8
 800254c:	40006800 	.word	0x40006800

08002550 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <MX_I2C2_Init+0x78>)
 8002558:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_I2C2_Init+0x74>)
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <MX_I2C2_Init+0x7c>)
 800255e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002568:	2201      	movs	r2, #1
 800256a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_I2C2_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_I2C2_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_I2C2_Init+0x74>)
 8002586:	2200      	movs	r2, #0
 8002588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <MX_I2C2_Init+0x74>)
 800258c:	f001 f986 	bl	800389c <HAL_I2C_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002596:	f000 f96e 	bl	8002876 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800259a:	2100      	movs	r1, #0
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <MX_I2C2_Init+0x74>)
 800259e:	f001 fa0c 	bl	80039ba <HAL_I2CEx_ConfigAnalogFilter>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025a8:	f000 f965 	bl	8002876 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025ac:	2100      	movs	r1, #0
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_I2C2_Init+0x74>)
 80025b0:	f001 fa4e 	bl	8003a50 <HAL_I2CEx_ConfigDigitalFilter>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80025ba:	f000 f95c 	bl	8002876 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000043c 	.word	0x2000043c
 80025c8:	40005800 	.word	0x40005800
 80025cc:	2010091a 	.word	0x2010091a

080025d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_SPI1_Init+0x74>)
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <MX_SPI1_Init+0x78>)
 80025d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_SPI1_Init+0x74>)
 80025dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_SPI1_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_SPI1_Init+0x74>)
 80025ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_SPI1_Init+0x74>)
 80025f2:	2202      	movs	r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_SPI1_Init+0x74>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_SPI1_Init+0x74>)
 80025fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002602:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_SPI1_Init+0x74>)
 8002606:	2218      	movs	r2, #24
 8002608:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_SPI1_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_SPI1_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_SPI1_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_SPI1_Init+0x74>)
 800261e:	2207      	movs	r2, #7
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_SPI1_Init+0x74>)
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_SPI1_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_SPI1_Init+0x74>)
 8002630:	f002 fb8e 	bl	8004d50 <HAL_SPI_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800263a:	f000 f91c 	bl	8002876 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000488 	.word	0x20000488
 8002648:	40013000 	.word	0x40013000

0800264c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002652:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <MX_USART2_UART_Init+0x94>)
 8002654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_USART2_UART_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <MX_USART2_UART_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_USART2_UART_Init+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <MX_USART2_UART_Init+0x90>)
 8002696:	f003 fa73 	bl	8005b80 <HAL_UART_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026a0:	f000 f8e9 	bl	8002876 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <MX_USART2_UART_Init+0x90>)
 80026a8:	f004 f83a 	bl	8006720 <HAL_UARTEx_SetTxFifoThreshold>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80026b2:	f000 f8e0 	bl	8002876 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <MX_USART2_UART_Init+0x90>)
 80026ba:	f004 f86f 	bl	800679c <HAL_UARTEx_SetRxFifoThreshold>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026c4:	f000 f8d7 	bl	8002876 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <MX_USART2_UART_Init+0x90>)
 80026ca:	f003 fff0 	bl	80066ae <HAL_UARTEx_DisableFifoMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80026d4:	f000 f8cf 	bl	8002876 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200004ec 	.word	0x200004ec
 80026e0:	40004400 	.word	0x40004400

080026e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <MX_USB_PCD_Init+0x48>)
 80026ea:	4a11      	ldr	r2, [pc, #68]	; (8002730 <MX_USB_PCD_Init+0x4c>)
 80026ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_USB_PCD_Init+0x48>)
 80026f0:	2208      	movs	r2, #8
 80026f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <MX_USB_PCD_Init+0x48>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_USB_PCD_Init+0x48>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_USB_PCD_Init+0x48>)
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_USB_PCD_Init+0x48>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <MX_USB_PCD_Init+0x48>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_USB_PCD_Init+0x48>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_USB_PCD_Init+0x48>)
 800271a:	f001 f9e5 	bl	8003ae8 <HAL_PCD_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002724:	f000 f8a7 	bl	8002876 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000057c 	.word	0x2000057c
 8002730:	40005c00 	.word	0x40005c00

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <MX_GPIO_Init+0x124>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4a42      	ldr	r2, [pc, #264]	; (8002858 <MX_GPIO_Init+0x124>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <MX_GPIO_Init+0x124>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <MX_GPIO_Init+0x124>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <MX_GPIO_Init+0x124>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <MX_GPIO_Init+0x124>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	f240 4111 	movw	r1, #1041	; 0x411
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f001 f85a 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8002788:	2200      	movs	r2, #0
 800278a:	2110      	movs	r1, #16
 800278c:	4833      	ldr	r0, [pc, #204]	; (800285c <MX_GPIO_Init+0x128>)
 800278e:	f001 f855 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_IMU_Pin */
  GPIO_InitStruct.Pin = RST_IMU_Pin;
 8002792:	2301      	movs	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_IMU_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ac:	f000 feac 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_INT_Pin */
  GPIO_InitStruct.Pin = AU_INT_Pin;
 80027b0:	2302      	movs	r3, #2
 80027b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ba:	2302      	movs	r3, #2
 80027bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_INT_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4619      	mov	r1, r3
 80027c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c8:	f000 fe9e 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_ADNS_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_ADNS_Pin;
 80027cc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80027d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	4619      	mov	r1, r3
 80027e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e8:	f000 fe8e 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ANDS_Pin */
  GPIO_InitStruct.Pin = INT_ANDS_Pin;
 80027ec:	2301      	movs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ANDS_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	4816      	ldr	r0, [pc, #88]	; (800285c <MX_GPIO_Init+0x128>)
 8002802:	f000 fe81 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 8002806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800280a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800280c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002812:	2301      	movs	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002820:	f000 fe72 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8002824:	2310      	movs	r3, #16
 8002826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4619      	mov	r1, r3
 800283a:	4808      	ldr	r0, [pc, #32]	; (800285c <MX_GPIO_Init+0x128>)
 800283c:	f000 fe64 	bl	8003508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	2028      	movs	r0, #40	; 0x28
 8002846:	f000 fc6e 	bl	8003126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800284a:	2028      	movs	r0, #40	; 0x28
 800284c:	f000 fc85 	bl	800315a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002850:	bf00      	nop
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	48000400 	.word	0x48000400

08002860 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
	/*if(bno_setup_done){
		printf("%d ",_receive_packet());
	}
	*/
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800287a:	b672      	cpsid	i
}
 800287c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287e:	e7fe      	b.n	800287e <Error_Handler+0x8>

08002880 <setup>:
void setup(void){
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <loop>:

void loop(void){
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_MspInit+0x44>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_MspInit+0x44>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6613      	str	r3, [r2, #96]	; 0x60
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_MspInit+0x44>)
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_MspInit+0x44>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_MspInit+0x44>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_MspInit+0x44>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80028d2:	f001 fabd 	bl	8003e50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b09e      	sub	sp, #120	; 0x78
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2250      	movs	r2, #80	; 0x50
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f005 f8b7 	bl	8007a78 <memset>
  if(hfdcan->Instance==FDCAN2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_FDCAN_MspInit+0xa8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d137      	bne.n	8002984 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002918:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4618      	mov	r0, r3
 8002926:	f001 ffd7 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002930:	f7ff ffa1 	bl	8002876 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_FDCAN_MspInit+0xac>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a15      	ldr	r2, [pc, #84]	; (8002990 <HAL_FDCAN_MspInit+0xac>)
 800293a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_FDCAN_MspInit+0xac>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_FDCAN_MspInit+0xac>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <HAL_FDCAN_MspInit+0xac>)
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_FDCAN_MspInit+0xac>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8002964:	2360      	movs	r3, #96	; 0x60
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002974:	2309      	movs	r3, #9
 8002976:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800297c:	4619      	mov	r1, r3
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <HAL_FDCAN_MspInit+0xb0>)
 8002980:	f000 fdc2 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002984:	bf00      	nop
 8002986:	3778      	adds	r7, #120	; 0x78
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40006800 	.word	0x40006800
 8002990:	40021000 	.word	0x40021000
 8002994:	48000400 	.word	0x48000400

08002998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b09e      	sub	sp, #120	; 0x78
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2250      	movs	r2, #80	; 0x50
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f005 f85d 	bl	8007a78 <memset>
  if(hi2c->Instance==I2C2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <HAL_I2C_MspInit+0xa8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d137      	bne.n	8002a38 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 ff7f 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80029e0:	f7ff ff49 	bl	8002876 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_I2C_MspInit+0xac>)
 80029e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_I2C_MspInit+0xac>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_I2C_MspInit+0xac>)
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a00:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a02:	2312      	movs	r3, #18
 8002a04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a16:	4619      	mov	r1, r3
 8002a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1c:	f000 fd74 	bl	8003508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_I2C_MspInit+0xac>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_I2C_MspInit+0xac>)
 8002a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_I2C_MspInit+0xac>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a38:	bf00      	nop
 8002a3a:	3778      	adds	r7, #120	; 0x78
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40005800 	.word	0x40005800
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_SPI_MspInit+0x7c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d128      	bne.n	8002abc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_SPI_MspInit+0x80>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_SPI_MspInit+0x80>)
 8002a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a74:	6613      	str	r3, [r2, #96]	; 0x60
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_SPI_MspInit+0x80>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_SPI_MspInit+0x80>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_SPI_MspInit+0x80>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_SPI_MspInit+0x80>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a9a:	23e0      	movs	r3, #224	; 0xe0
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aaa:	2305      	movs	r3, #5
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab8:	f000 fd26 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002abc:	bf00      	nop
 8002abe:	3728      	adds	r7, #40	; 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40013000 	.word	0x40013000
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b09e      	sub	sp, #120	; 0x78
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2250      	movs	r2, #80	; 0x50
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 ffc3 	bl	8007a78 <memset>
  if(huart->Instance==USART2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <HAL_UART_MspInit+0xa8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d136      	bne.n	8002b6a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002afc:	2302      	movs	r3, #2
 8002afe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 fee5 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b14:	f7ff feaf 	bl	8002876 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_UART_MspInit+0xac>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_UART_MspInit+0xac>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_UART_MspInit+0xac>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_UART_MspInit+0xac>)
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b34:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_UART_MspInit+0xac>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_UART_MspInit+0xac>)
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b48:	230c      	movs	r3, #12
 8002b4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b60:	4619      	mov	r1, r3
 8002b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b66:	f000 fccf 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3778      	adds	r7, #120	; 0x78
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b098      	sub	sp, #96	; 0x60
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	2250      	movs	r2, #80	; 0x50
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 ff73 	bl	8007a78 <memset>
  if(hpcd->Instance==USB)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_PCD_MspInit+0x60>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d11a      	bne.n	8002bd2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba6:	f107 0310 	add.w	r3, r7, #16
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fe94 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002bb6:	f7ff fe5e 	bl	8002876 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_PCD_MspInit+0x64>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_PCD_MspInit+0x64>)
 8002bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_PCD_MspInit+0x64>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002bd2:	bf00      	nop
 8002bd4:	3760      	adds	r7, #96	; 0x60
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40005c00 	.word	0x40005c00
 8002be0:	40021000 	.word	0x40021000

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <NMI_Handler+0x4>

08002bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <HardFault_Handler+0x4>

08002bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler+0x4>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c30:	f000 f95e 	bl	8002ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IMU_Pin);
 8002c3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c40:	f000 fe14 	bl	800386c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return 1;
 8002c4c:	2301      	movs	r3, #1
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_kill>:

int _kill(int pid, int sig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c62:	f004 ff5b 	bl	8007b1c <__errno>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2216      	movs	r2, #22
 8002c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_exit>:

void _exit (int status)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ffe7 	bl	8002c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c8a:	e7fe      	b.n	8002c8a <_exit+0x12>

08002c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e00a      	b.n	8002cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c9e:	f3af 8000 	nop.w
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	60ba      	str	r2, [r7, #8]
 8002caa:	b2ca      	uxtb	r2, r1
 8002cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbf0      	blt.n	8002c9e <_read+0x12>
  }

  return len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e009      	b.n	8002cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fafb 	bl	80022dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbf1      	blt.n	8002cd8 <_write+0x12>
  }
  return len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_close>:

int _close(int file)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d26:	605a      	str	r2, [r3, #4]
  return 0;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_isatty>:

int _isatty(int file)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f004 fec0 	bl	8007b1c <__errno>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	220c      	movs	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2001c000 	.word	0x2001c000
 8002dc8:	00000400 	.word	0x00000400
 8002dcc:	20000874 	.word	0x20000874
 8002dd0:	200009c8 	.word	0x200009c8

08002dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <SystemInit+0x20>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <SystemInit+0x20>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfe:	490e      	ldr	r1, [pc, #56]	; (8002e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <LoopForever+0xe>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e14:	4c0b      	ldr	r4, [pc, #44]	; (8002e44 <LoopForever+0x16>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e22:	f7ff ffd7 	bl	8002dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e26:	f004 fe7f 	bl	8007b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e2a:	f7ff fa6b 	bl	8002304 <main>

08002e2e <LoopForever>:

LoopForever:
    b LoopForever
 8002e2e:	e7fe      	b.n	8002e2e <LoopForever>
  ldr   r0, =_estack
 8002e30:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e38:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002e3c:	0800da88 	.word	0x0800da88
  ldr r2, =_sbss
 8002e40:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002e44:	200009c8 	.word	0x200009c8

08002e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e48:	e7fe      	b.n	8002e48 <ADC1_2_IRQHandler>

08002e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 f95b 	bl	8003110 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e5a:	200f      	movs	r0, #15
 8002e5c:	f000 f80e 	bl	8002e7c <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	e001      	b.n	8002e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e6c:	f7ff fd16 	bl	800289c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e70:	79fb      	ldrb	r3, [r7, #7]

}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_InitTick+0x68>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d022      	beq.n	8002ed6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_InitTick+0x6c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_InitTick+0x68>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f966 	bl	8003176 <HAL_SYSTICK_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10f      	bne.n	8002ed0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d809      	bhi.n	8002eca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	f000 f932 	bl	8003126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_InitTick+0x70>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e007      	b.n	8002eda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e004      	b.n	8002eda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e001      	b.n	8002eda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000010 	.word	0x20000010
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	2000000c 	.word	0x2000000c

08002ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_IncTick+0x1c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_IncTick+0x20>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <HAL_IncTick+0x1c>)
 8002f00:	6013      	str	r3, [r2, #0]
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20000878 	.word	0x20000878
 8002f10:	20000010 	.word	0x20000010

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000878 	.word	0x20000878

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d004      	beq.n	8002f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_Delay+0x40>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f50:	bf00      	nop
 8002f52:	f7ff ffdf 	bl	8002f14 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d8f7      	bhi.n	8002f52 <HAL_Delay+0x26>
  {
  }
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000010 	.word	0x20000010

08002f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db0b      	blt.n	8002ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4907      	ldr	r1, [pc, #28]	; (800300c <__NVIC_EnableIRQ+0x38>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030dc:	d301      	bcc.n	80030e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030de:	2301      	movs	r3, #1
 80030e0:	e00f      	b.n	8003102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <SysTick_Config+0x40>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ea:	210f      	movs	r1, #15
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	f7ff ff8e 	bl	8003010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <SysTick_Config+0x40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <SysTick_Config+0x40>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ff29 	bl	8002f70 <__NVIC_SetPriorityGrouping>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff40 	bl	8002fb8 <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff90 	bl	8003064 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5f 	bl	8003010 <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff33 	bl	8002fd4 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa4 	bl	80030cc <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e147      	b.n	8003432 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fb94 	bl	80028e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0210 	bic.w	r2, r2, #16
 80031ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031cc:	f7ff fea2 	bl	8002f14 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031d2:	e012      	b.n	80031fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031d4:	f7ff fe9e 	bl	8002f14 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b0a      	cmp	r3, #10
 80031e0:	d90b      	bls.n	80031fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2203      	movs	r2, #3
 80031f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e11b      	b.n	8003432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b08      	cmp	r3, #8
 8003206:	d0e5      	beq.n	80031d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003218:	f7ff fe7c 	bl	8002f14 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800321e:	e012      	b.n	8003246 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003220:	f7ff fe78 	bl	8002f14 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b0a      	cmp	r3, #10
 800322c:	d90b      	bls.n	8003246 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2203      	movs	r2, #3
 800323e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0f5      	b.n	8003432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0e5      	beq.n	8003220 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0202 	orr.w	r2, r2, #2
 8003262:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a74      	ldr	r2, [pc, #464]	; (800343c <HAL_FDCAN_Init+0x2ac>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d103      	bne.n	8003276 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800326e:	4a74      	ldr	r2, [pc, #464]	; (8003440 <HAL_FDCAN_Init+0x2b0>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7c1b      	ldrb	r3, [r3, #16]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328c:	619a      	str	r2, [r3, #24]
 800328e:	e007      	b.n	80032a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7c5b      	ldrb	r3, [r3, #17]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b6:	619a      	str	r2, [r3, #24]
 80032b8:	e007      	b.n	80032ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7c9b      	ldrb	r3, [r3, #18]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e0:	619a      	str	r2, [r3, #24]
 80032e2:	e007      	b.n	80032f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003318:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d108      	bne.n	8003344 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0204 	orr.w	r2, r2, #4
 8003340:	619a      	str	r2, [r3, #24]
 8003342:	e02c      	b.n	800339e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d028      	beq.n	800339e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d01c      	beq.n	800338e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003362:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0210 	orr.w	r2, r2, #16
 8003372:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d110      	bne.n	800339e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0220 	orr.w	r2, r2, #32
 800338a:	619a      	str	r2, [r3, #24]
 800338c:	e007      	b.n	800339e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0220 	orr.w	r2, r2, #32
 800339c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	3b01      	subs	r3, #1
 80033c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d2:	d115      	bne.n	8003400 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	3b01      	subs	r3, #1
 80033e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	3b01      	subs	r3, #1
 80033ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f814 	bl	8003444 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40006400 	.word	0x40006400
 8003440:	40006500 	.word	0x40006500

08003444 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800344c:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800344e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d103      	bne.n	8003462 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003460:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003470:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	041a      	lsls	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003496:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	061a      	lsls	r2, r3, #24
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e005      	b.n	80034e4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3304      	adds	r3, #4
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d3f3      	bcc.n	80034d8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	4000a400 	.word	0x4000a400
 8003504:	40006800 	.word	0x40006800

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003516:	e15a      	b.n	80037ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 814c 	beq.w	80037c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d005      	beq.n	8003548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003544:	2b02      	cmp	r3, #2
 8003546:	d130      	bne.n	80035aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357e:	2201      	movs	r2, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0201 	and.w	r2, r3, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d017      	beq.n	80035e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d123      	bne.n	800363a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	6939      	ldr	r1, [r7, #16]
 8003636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a6 	beq.w	80037c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367c:	4b5b      	ldr	r3, [pc, #364]	; (80037ec <HAL_GPIO_Init+0x2e4>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	4a5a      	ldr	r2, [pc, #360]	; (80037ec <HAL_GPIO_Init+0x2e4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6613      	str	r3, [r2, #96]	; 0x60
 8003688:	4b58      	ldr	r3, [pc, #352]	; (80037ec <HAL_GPIO_Init+0x2e4>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003694:	4a56      	ldr	r2, [pc, #344]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	3302      	adds	r3, #2
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036be:	d01f      	beq.n	8003700 <HAL_GPIO_Init+0x1f8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_GPIO_Init+0x2ec>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d019      	beq.n	80036fc <HAL_GPIO_Init+0x1f4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_GPIO_Init+0x2f0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_GPIO_Init+0x1f0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a4a      	ldr	r2, [pc, #296]	; (80037fc <HAL_GPIO_Init+0x2f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_Init+0x1ec>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a49      	ldr	r2, [pc, #292]	; (8003800 <HAL_GPIO_Init+0x2f8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x1e8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a48      	ldr	r2, [pc, #288]	; (8003804 <HAL_GPIO_Init+0x2fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_Init+0x1e4>
 80036e8:	2305      	movs	r3, #5
 80036ea:	e00a      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036ec:	2306      	movs	r3, #6
 80036ee:	e008      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e006      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036f4:	2303      	movs	r3, #3
 80036f6:	e004      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e002      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 8003700:	2300      	movs	r3, #0
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	f002 0203 	and.w	r2, r2, #3
 8003708:	0092      	lsls	r2, r2, #2
 800370a:	4093      	lsls	r3, r2
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003712:	4937      	ldr	r1, [pc, #220]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3302      	adds	r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003744:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800374a:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_GPIO_Init+0x300>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_GPIO_Init+0x300>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_GPIO_Init+0x300>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_GPIO_Init+0x300>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3301      	adds	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f ae9d 	bne.w	8003518 <HAL_GPIO_Init+0x10>
  }
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40010000 	.word	0x40010000
 80037f4:	48000400 	.word	0x48000400
 80037f8:	48000800 	.word	0x48000800
 80037fc:	48000c00 	.word	0x48000c00
 8003800:	48001000 	.word	0x48001000
 8003804:	48001400 	.word	0x48001400
 8003808:	40010400 	.word	0x40010400

0800380c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e001      	b.n	800382e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
 8003848:	4613      	mov	r3, r2
 800384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800384c:	787b      	ldrb	r3, [r7, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003858:	e002      	b.n	8003860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003882:	4a05      	ldr	r2, [pc, #20]	; (8003898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ffe8 	bl	8002860 <HAL_GPIO_EXTI_Callback>
  }
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e081      	b.n	80039b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff f868 	bl	8002998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e006      	b.n	8003924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d104      	bne.n	8003936 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69d9      	ldr	r1, [r3, #28]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d138      	bne.n	8003a42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039da:	2302      	movs	r3, #2
 80039dc:	e032      	b.n	8003a44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2224      	movs	r2, #36	; 0x24
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d139      	bne.n	8003ada <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e033      	b.n	8003adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	b08b      	sub	sp, #44	; 0x2c
 8003aec:	af06      	add	r7, sp, #24
 8003aee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0d7      	b.n	8003caa <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff f834 	bl	8002b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 fec7 	bl	80068b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	e04c      	b.n	8003bc6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	b298      	uxth	r0, r3
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3336      	adds	r3, #54	; 0x36
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3303      	adds	r3, #3
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	440b      	add	r3, r1
 8003b92:	3338      	adds	r3, #56	; 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	333c      	adds	r3, #60	; 0x3c
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	440b      	add	r3, r1
 8003bba:	3340      	adds	r3, #64	; 0x40
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3ad      	bcc.n	8003b2c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e044      	b.n	8003c60 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3b5      	bcc.n	8003bd6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	687e      	ldr	r6, [r7, #4]
 8003c72:	466d      	mov	r5, sp
 8003c74:	f106 0410 	add.w	r4, r6, #16
 8003c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	602b      	str	r3, [r5, #0]
 8003c80:	1d33      	adds	r3, r6, #4
 8003c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f002 fe30 	bl	80068ea <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f805 	bl	8003cb2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cb2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d141      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d16:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d131      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3c:	4a41      	ldr	r2, [pc, #260]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d44:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2232      	movs	r2, #50	; 0x32
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	0c9b      	lsrs	r3, r3, #18
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5a:	e002      	b.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d102      	bne.n	8003d76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f2      	bne.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d76:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d82:	d158      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e057      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d98:	e04d      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d141      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d131      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2232      	movs	r2, #50	; 0x32
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	0c9b      	lsrs	r3, r3, #18
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de6:	e002      	b.n	8003dee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d102      	bne.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f2      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d112      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e011      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e24:	e007      	b.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40007000 	.word	0x40007000
 8003e48:	20000008 	.word	0x20000008
 8003e4c:	431bde83 	.word	0x431bde83

08003e50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e5e:	6093      	str	r3, [r2, #8]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40007000 	.word	0x40007000

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e306      	b.n	8004490 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d075      	beq.n	8003f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8e:	4b97      	ldr	r3, [pc, #604]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e98:	4b94      	ldr	r3, [pc, #592]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_OscConfig+0x3e>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x44>
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	4b8d      	ldr	r3, [pc, #564]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05b      	beq.n	8003f78 <HAL_RCC_OscConfig+0x108>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d157      	bne.n	8003f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e2e1      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x74>
 8003ed6:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a84      	ldr	r2, [pc, #528]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x98>
 8003eee:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7e      	ldr	r2, [pc, #504]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b7c      	ldr	r3, [pc, #496]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7b      	ldr	r2, [pc, #492]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e00b      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a77      	ldr	r2, [pc, #476]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b75      	ldr	r3, [pc, #468]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a74      	ldr	r2, [pc, #464]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe fff4 	bl	8002f14 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fe fff0 	bl	8002f14 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	; 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e2a6      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f42:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0xc0>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe ffe0 	bl	8002f14 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fe ffdc 	bl	8002f14 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e292      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6a:	4b60      	ldr	r3, [pc, #384]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0xe8>
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x136>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_OscConfig+0x13c>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11f      	bne.n	8003fec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fac:	4b4f      	ldr	r3, [pc, #316]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x154>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e265      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b49      	ldr	r3, [pc, #292]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	4946      	ldr	r1, [pc, #280]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fd8:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <HAL_RCC_OscConfig+0x280>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe ff4d 	bl	8002e7c <HAL_InitTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d043      	beq.n	8004070 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e251      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d023      	beq.n	800403c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe ff88 	bl	8002f14 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004008:	f7fe ff84 	bl	8002f14 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e23a      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401a:	4b34      	ldr	r3, [pc, #208]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	061b      	lsls	r3, r3, #24
 8004034:	492d      	ldr	r1, [pc, #180]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
 800403a:	e01a      	b.n	8004072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe ff64 	bl	8002f14 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004050:	f7fe ff60 	bl	8002f14 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e216      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x1e0>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d041      	beq.n	8004102 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fe ff3d 	bl	8002f14 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409e:	f7fe ff39 	bl	8002f14 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e1ef      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ef      	beq.n	800409e <HAL_RCC_OscConfig+0x22e>
 80040be:	e020      	b.n	8004102 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fe ff20 	bl	8002f14 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d6:	e00d      	b.n	80040f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fe ff1c 	bl	8002f14 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d906      	bls.n	80040f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1d2      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f4:	4b8c      	ldr	r3, [pc, #560]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ea      	bne.n	80040d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a6 	beq.w	800425c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004114:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_OscConfig+0x2b4>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2b6>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	4a7e      	ldr	r2, [pc, #504]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6593      	str	r3, [r2, #88]	; 0x58
 8004136:	4b7c      	ldr	r3, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b79      	ldr	r3, [pc, #484]	; (800432c <HAL_RCC_OscConfig+0x4bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x4bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x4bc>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fe fed9 	bl	8002f14 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fe fed5 	bl	8002f14 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e18b      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004178:	4b6c      	ldr	r3, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x4bc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d108      	bne.n	800419e <HAL_RCC_OscConfig+0x32e>
 800418c:	4b66      	ldr	r3, [pc, #408]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	4a65      	ldr	r2, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800419c:	e024      	b.n	80041e8 <HAL_RCC_OscConfig+0x378>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d110      	bne.n	80041c8 <HAL_RCC_OscConfig+0x358>
 80041a6:	4b60      	ldr	r3, [pc, #384]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	4a5e      	ldr	r2, [pc, #376]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b6:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	4a5a      	ldr	r2, [pc, #360]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c6:	e00f      	b.n	80041e8 <HAL_RCC_OscConfig+0x378>
 80041c8:	4b57      	ldr	r3, [pc, #348]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a56      	ldr	r2, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d016      	beq.n	800421e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe fe90 	bl	8002f14 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe fe8c 	bl	8002f14 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e140      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420e:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ed      	beq.n	80041f8 <HAL_RCC_OscConfig+0x388>
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe fe79 	bl	8002f14 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe fe75 	bl	8002f14 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e129      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800423c:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ed      	bne.n	8004226 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b35      	ldr	r3, [pc, #212]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	4a34      	ldr	r2, [pc, #208]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d03c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01c      	beq.n	80042aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004270:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004276:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fe fe48 	bl	8002f14 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004288:	f7fe fe44 	bl	8002f14 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0fa      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800429a:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ef      	beq.n	8004288 <HAL_RCC_OscConfig+0x418>
 80042a8:	e01b      	b.n	80042e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042aa:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe fe2b 	bl	8002f14 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c2:	f7fe fe27 	bl	8002f14 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0dd      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ef      	bne.n	80042c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80d1 	beq.w	800448e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ec:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	f000 808b 	beq.w	8004410 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d15e      	bne.n	80043c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800430c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fe fe01 	bl	8002f14 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	e00c      	b.n	8004330 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fe fdfd 	bl	8002f14 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d905      	bls.n	8004330 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0b3      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
 8004328:	40021000 	.word	0x40021000
 800432c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004330:	4b59      	ldr	r3, [pc, #356]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ec      	bne.n	8004316 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433c:	4b56      	ldr	r3, [pc, #344]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4b56      	ldr	r3, [pc, #344]	; (800449c <HAL_RCC_OscConfig+0x62c>)
 8004342:	4013      	ands	r3, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6a11      	ldr	r1, [r2, #32]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800434c:	3a01      	subs	r2, #1
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004356:	0212      	lsls	r2, r2, #8
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0552      	lsls	r2, r2, #21
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0652      	lsls	r2, r2, #25
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004376:	06d2      	lsls	r2, r2, #27
 8004378:	430a      	orrs	r2, r1
 800437a:	4947      	ldr	r1, [pc, #284]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004380:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a44      	ldr	r2, [pc, #272]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b42      	ldr	r3, [pc, #264]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a41      	ldr	r2, [pc, #260]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe fdbc 	bl	8002f14 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fdb8 	bl	8002f14 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e06e      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x530>
 80043be:	e066      	b.n	800448e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b35      	ldr	r3, [pc, #212]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a34      	ldr	r2, [pc, #208]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043cc:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a31      	ldr	r2, [pc, #196]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043d8:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fd94 	bl	8002f14 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe fd90 	bl	8002f14 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e046      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004402:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x580>
 800440e:	e03e      	b.n	800448e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e039      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800441c:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0203 	and.w	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	429a      	cmp	r2, r3
 800442e:	d12c      	bne.n	800448a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	3b01      	subs	r3, #1
 800443c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d123      	bne.n	800448a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d11b      	bne.n	800448a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d113      	bne.n	800448a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	3b01      	subs	r3, #1
 8004470:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d109      	bne.n	800448a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	3b01      	subs	r3, #1
 8004484:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	019f800c 	.word	0x019f800c

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e11e      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b91      	ldr	r3, [pc, #580]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b8e      	ldr	r3, [pc, #568]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	498c      	ldr	r1, [pc, #560]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b8a      	ldr	r3, [pc, #552]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e106      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d073      	beq.n	80045dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d129      	bne.n	8004550 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fc:	4b81      	ldr	r3, [pc, #516]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0f4      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800450c:	f000 f99e 	bl	800484c <RCC_GetSysClockFreqFromPLLSource>
 8004510:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4a7c      	ldr	r2, [pc, #496]	; (8004708 <HAL_RCC_ClockConfig+0x268>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d93f      	bls.n	800459a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800451a:	4b7a      	ldr	r3, [pc, #488]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800452e:	2b00      	cmp	r3, #0
 8004530:	d033      	beq.n	800459a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004536:	2b00      	cmp	r3, #0
 8004538:	d12f      	bne.n	800459a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800453a:	4b72      	ldr	r3, [pc, #456]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004542:	4a70      	ldr	r2, [pc, #448]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e024      	b.n	800459a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d107      	bne.n	8004568 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004558:	4b6a      	ldr	r3, [pc, #424]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0c6      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004568:	4b66      	ldr	r3, [pc, #408]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0be      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004578:	f000 f8ce 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 800457c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4a61      	ldr	r2, [pc, #388]	; (8004708 <HAL_RCC_ClockConfig+0x268>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d909      	bls.n	800459a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004586:	4b5f      	ldr	r3, [pc, #380]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458e:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004594:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4957      	ldr	r1, [pc, #348]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ac:	f7fe fcb2 	bl	8002f14 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fe fcae 	bl	8002f14 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e095      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b4e      	ldr	r3, [pc, #312]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d023      	beq.n	8004630 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f4:	4b43      	ldr	r3, [pc, #268]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a42      	ldr	r2, [pc, #264]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800460c:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004614:	4a3b      	ldr	r2, [pc, #236]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800461a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800461c:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4936      	ldr	r1, [pc, #216]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
 800462e:	e008      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d105      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004636:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a32      	ldr	r2, [pc, #200]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800463c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004640:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004642:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d21d      	bcs.n	800468c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004650:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 020f 	bic.w	r2, r3, #15
 8004658:	4929      	ldr	r1, [pc, #164]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004660:	f7fe fc58 	bl	8002f14 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fe fc54 	bl	8002f14 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e03b      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d1ed      	bne.n	8004668 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4917      	ldr	r1, [pc, #92]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	490f      	ldr	r1, [pc, #60]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ca:	f000 f825 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	490c      	ldr	r1, [pc, #48]	; (800470c <HAL_RCC_ClockConfig+0x26c>)
 80046dc:	5ccb      	ldrb	r3, [r1, r3]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <HAL_RCC_ClockConfig+0x270>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_RCC_ClockConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe fbc4 	bl	8002e7c <HAL_InitTick>
 80046f4:	4603      	mov	r3, r0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	04c4b400 	.word	0x04c4b400
 800470c:	0800d570 	.word	0x0800d570
 8004710:	20000008 	.word	0x20000008
 8004714:	2000000c 	.word	0x2000000c

08004718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800471e:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d102      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e047      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d102      	bne.n	8004742 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800473c:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e03e      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d136      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3301      	adds	r3, #1
 8004764:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004776:	68d2      	ldr	r2, [r2, #12]
 8004778:	0a12      	lsrs	r2, r2, #8
 800477a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004790:	68d2      	ldr	r2, [r2, #12]
 8004792:	0a12      	lsrs	r2, r2, #8
 8004794:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
      break;
 800479e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	0e5b      	lsrs	r3, r3, #25
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	3301      	adds	r3, #1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	e001      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047c0:	693b      	ldr	r3, [r7, #16]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	007a1200 	.word	0x007a1200

080047dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000008 	.word	0x20000008

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047f8:	f7ff fff0 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4904      	ldr	r1, [pc, #16]	; (800481c <HAL_RCC_GetPCLK1Freq+0x28>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	0800d580 	.word	0x0800d580

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004824:	f7ff ffda 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0adb      	lsrs	r3, r3, #11
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4904      	ldr	r1, [pc, #16]	; (8004848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	0800d580 	.word	0x0800d580

0800484c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d10c      	bne.n	800488a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004870:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	4a14      	ldr	r2, [pc, #80]	; (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487a:	68d2      	ldr	r2, [r2, #12]
 800487c:	0a12      	lsrs	r2, r2, #8
 800487e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	617b      	str	r3, [r7, #20]
    break;
 8004888:	e00c      	b.n	80048a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488a:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004894:	68d2      	ldr	r2, [r2, #12]
 8004896:	0a12      	lsrs	r2, r2, #8
 8004898:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]
    break;
 80048a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048be:	687b      	ldr	r3, [r7, #4]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40021000 	.word	0x40021000
 80048d0:	007a1200 	.word	0x007a1200
 80048d4:	00f42400 	.word	0x00f42400

080048d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e0:	2300      	movs	r3, #0
 80048e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048e4:	2300      	movs	r3, #0
 80048e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8098 	beq.w	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fa:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10d      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	; 0x58
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004922:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a39      	ldr	r2, [pc, #228]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800492e:	f7fe faf1 	bl	8002f14 <HAL_GetTick>
 8004932:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004934:	e009      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004936:	f7fe faed 	bl	8002f14 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d902      	bls.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	74fb      	strb	r3, [r7, #19]
        break;
 8004948:	e005      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ef      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d159      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004966:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01e      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	d019      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a4:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fe faad 	bl	8002f14 <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049bc:	e00b      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fe faa9 	bl	8002f14 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	74fb      	strb	r3, [r7, #19]
            break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ec      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	4903      	ldr	r1, [pc, #12]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a00:	e008      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	74bb      	strb	r3, [r7, #18]
 8004a06:	e005      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a14:	7c7b      	ldrb	r3, [r7, #17]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d105      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1a:	4ba7      	ldr	r3, [pc, #668]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	4aa6      	ldr	r2, [pc, #664]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a32:	4ba1      	ldr	r3, [pc, #644]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f023 0203 	bic.w	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	499d      	ldr	r1, [pc, #628]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a54:	4b98      	ldr	r3, [pc, #608]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f023 020c 	bic.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4995      	ldr	r1, [pc, #596]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a76:	4b90      	ldr	r3, [pc, #576]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	498c      	ldr	r1, [pc, #560]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a98:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4984      	ldr	r1, [pc, #528]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aba:	4b7f      	ldr	r3, [pc, #508]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	497b      	ldr	r1, [pc, #492]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004adc:	4b76      	ldr	r3, [pc, #472]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	4973      	ldr	r1, [pc, #460]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004afe:	4b6e      	ldr	r3, [pc, #440]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	496a      	ldr	r1, [pc, #424]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b20:	4b65      	ldr	r3, [pc, #404]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4962      	ldr	r1, [pc, #392]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b42:	4b5d      	ldr	r3, [pc, #372]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	4959      	ldr	r1, [pc, #356]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b64:	4b54      	ldr	r3, [pc, #336]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	4951      	ldr	r1, [pc, #324]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d015      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b86:	4b4c      	ldr	r3, [pc, #304]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4948      	ldr	r1, [pc, #288]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba4:	d105      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba6:	4b44      	ldr	r3, [pc, #272]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4a43      	ldr	r2, [pc, #268]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d015      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bbe:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	493a      	ldr	r1, [pc, #232]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bdc:	d105      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d015      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bf6:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	492c      	ldr	r1, [pc, #176]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c14:	d105      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c20:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c2e:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	491e      	ldr	r1, [pc, #120]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c58:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d015      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	4910      	ldr	r1, [pc, #64]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c84:	d105      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c90:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	4902      	ldr	r1, [pc, #8]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cc4:	4b21      	ldr	r3, [pc, #132]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d015      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	4918      	ldr	r1, [pc, #96]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d06:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	490a      	ldr	r1, [pc, #40]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d32:	d105      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000

08004d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e09d      	b.n	8004e9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d72:	d009      	beq.n	8004d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
 8004d7a:	e005      	b.n	8004d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fd fe50 	bl	8002a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc8:	d902      	bls.n	8004dd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e002      	b.n	8004dd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dde:	d007      	beq.n	8004df0 <HAL_SPI_Init+0xa0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	ea42 0103 	orr.w	r1, r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	f003 0204 	and.w	r2, r3, #4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b088      	sub	sp, #32
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_SPI_Transmit+0x22>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e158      	b.n	800517a <HAL_SPI_Transmit+0x2d4>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed0:	f7fe f820 	bl	8002f14 <HAL_GetTick>
 8004ed4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eea:	e13d      	b.n	8005168 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_Transmit+0x52>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004efc:	e134      	b.n	8005168 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2203      	movs	r2, #3
 8004f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f48:	d10f      	bne.n	8004f6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d007      	beq.n	8004f88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f90:	d94b      	bls.n	800502a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_SPI_Transmit+0xfa>
 8004f9a:	8afb      	ldrh	r3, [r7, #22]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d13e      	bne.n	800501e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fc4:	e02b      	b.n	800501e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d112      	bne.n	8004ffa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	881a      	ldrh	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	1c9a      	adds	r2, r3, #2
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff8:	e011      	b.n	800501e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ffa:	f7fd ff8b 	bl	8002f14 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d803      	bhi.n	8005012 <HAL_SPI_Transmit+0x16c>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d102      	bne.n	8005018 <HAL_SPI_Transmit+0x172>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800501c:	e0a4      	b.n	8005168 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1ce      	bne.n	8004fc6 <HAL_SPI_Transmit+0x120>
 8005028:	e07c      	b.n	8005124 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_SPI_Transmit+0x192>
 8005032:	8afb      	ldrh	r3, [r7, #22]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d170      	bne.n	800511a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	d912      	bls.n	8005068 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	881a      	ldrh	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b02      	subs	r3, #2
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005066:	e058      	b.n	800511a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800508e:	e044      	b.n	800511a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d12b      	bne.n	80050f6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d912      	bls.n	80050ce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b02      	subs	r3, #2
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050cc:	e025      	b.n	800511a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050f4:	e011      	b.n	800511a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f6:	f7fd ff0d 	bl	8002f14 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d803      	bhi.n	800510e <HAL_SPI_Transmit+0x268>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d102      	bne.n	8005114 <HAL_SPI_Transmit+0x26e>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005118:	e026      	b.n	8005168 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1b5      	bne.n	8005090 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fce3 	bl	8005af4 <SPI_EndRxTxTransaction>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e000      	b.n	8005168 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005178:	7ffb      	ldrb	r3, [r7, #31]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af02      	add	r7, sp, #8
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519e:	d112      	bne.n	80051c6 <HAL_SPI_Receive+0x44>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10e      	bne.n	80051c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2204      	movs	r2, #4
 80051ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f910 	bl	80053e2 <HAL_SPI_TransmitReceive>
 80051c2:	4603      	mov	r3, r0
 80051c4:	e109      	b.n	80053da <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_SPI_Receive+0x52>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e102      	b.n	80053da <HAL_SPI_Receive+0x258>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051dc:	f7fd fe9a 	bl	8002f14 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
 80051f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051f2:	e0e9      	b.n	80053c8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_SPI_Receive+0x7e>
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005204:	e0e0      	b.n	80053c8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2204      	movs	r2, #4
 800520a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005250:	d908      	bls.n	8005264 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	e007      	b.n	8005274 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527c:	d10f      	bne.n	800529e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800529c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d007      	beq.n	80052bc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c4:	d867      	bhi.n	8005396 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052c6:	e030      	b.n	800532a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d117      	bne.n	8005306 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f103 020c 	add.w	r2, r3, #12
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	7812      	ldrb	r2, [r2, #0]
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005304:	e011      	b.n	800532a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005306:	f7fd fe05 	bl	8002f14 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d803      	bhi.n	800531e <HAL_SPI_Receive+0x19c>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d102      	bne.n	8005324 <HAL_SPI_Receive+0x1a2>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005328:	e04e      	b.n	80053c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1c8      	bne.n	80052c8 <HAL_SPI_Receive+0x146>
 8005336:	e034      	b.n	80053a2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d115      	bne.n	8005372 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	b292      	uxth	r2, r2
 8005352:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005370:	e011      	b.n	8005396 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005372:	f7fd fdcf 	bl	8002f14 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d803      	bhi.n	800538a <HAL_SPI_Receive+0x208>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d102      	bne.n	8005390 <HAL_SPI_Receive+0x20e>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005394:	e018      	b.n	80053c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1ca      	bne.n	8005338 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fb4c 	bl	8005a44 <SPI_EndRxTransaction>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	75fb      	strb	r3, [r7, #23]
 80053c4:	e000      	b.n	80053c8 <HAL_SPI_Receive+0x246>
  }

error :
 80053c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b08a      	sub	sp, #40	; 0x28
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053f0:	2301      	movs	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x26>
 8005404:	2302      	movs	r3, #2
 8005406:	e1fb      	b.n	8005800 <HAL_SPI_TransmitReceive+0x41e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005410:	f7fd fd80 	bl	8002f14 <HAL_GetTick>
 8005414:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800541c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800542c:	7efb      	ldrb	r3, [r7, #27]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d00e      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x6e>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005438:	d106      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x66>
 8005442:	7efb      	ldrb	r3, [r7, #27]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d003      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005448:	2302      	movs	r3, #2
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800544e:	e1cd      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x80>
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005468:	e1c0      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b04      	cmp	r3, #4
 8005474:	d003      	beq.n	800547e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2205      	movs	r2, #5
 800547a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	887a      	ldrh	r2, [r7, #2]
 800548e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	887a      	ldrh	r2, [r7, #2]
 8005496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	887a      	ldrh	r2, [r7, #2]
 80054a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054c0:	d802      	bhi.n	80054c8 <HAL_SPI_TransmitReceive+0xe6>
 80054c2:	8a3b      	ldrh	r3, [r7, #16]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d908      	bls.n	80054da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	e007      	b.n	80054ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d007      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005510:	d97c      	bls.n	800560c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x13e>
 800551a:	8a7b      	ldrh	r3, [r7, #18]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d169      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005544:	e056      	b.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b02      	cmp	r3, #2
 8005552:	d11b      	bne.n	800558c <HAL_SPI_TransmitReceive+0x1aa>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <HAL_SPI_TransmitReceive+0x1aa>
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b01      	cmp	r3, #1
 8005562:	d113      	bne.n	800558c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d11c      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x1f2>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	b292      	uxth	r2, r2
 80055b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	1c9a      	adds	r2, r3, #2
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055d4:	f7fd fc9e 	bl	8002f14 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d807      	bhi.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d003      	beq.n	80055f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055f2:	e0fb      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1a3      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x164>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d19d      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x164>
 800560a:	e0df      	b.n	80057cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_SPI_TransmitReceive+0x23a>
 8005614:	8a7b      	ldrh	r3, [r7, #18]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f040 80cb 	bne.w	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d912      	bls.n	800564c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b02      	subs	r3, #2
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800564a:	e0b2      	b.n	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005672:	e09e      	b.n	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d134      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x30a>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02f      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x30a>
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2b01      	cmp	r3, #1
 8005690:	d12c      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d912      	bls.n	80056c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	881a      	ldrh	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	1c9a      	adds	r2, r3, #2
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b02      	subs	r3, #2
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056c0:	e012      	b.n	80056e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d148      	bne.n	800578c <HAL_SPI_TransmitReceive+0x3aa>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d042      	beq.n	800578c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	d923      	bls.n	800575a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	b292      	uxth	r2, r2
 800571e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b02      	subs	r3, #2
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d81f      	bhi.n	8005788 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	e016      	b.n	8005788 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f103 020c 	add.w	r2, r3, #12
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005788:	2301      	movs	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800578c:	f7fd fbc2 	bl	8002f14 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	429a      	cmp	r2, r3
 800579a:	d803      	bhi.n	80057a4 <HAL_SPI_TransmitReceive+0x3c2>
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d102      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x3c8>
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80057b0:	e01c      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f af5b 	bne.w	8005674 <HAL_SPI_TransmitReceive+0x292>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f47f af54 	bne.w	8005674 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f98f 	bl	8005af4 <SPI_EndRxTxTransaction>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
 80057e8:	e000      	b.n	80057ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80057ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005800:	4618      	mov	r0, r3
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005818:	f7fd fb7c 	bl	8002f14 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	4413      	add	r3, r2
 8005826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005828:	f7fd fb74 	bl	8002f14 <HAL_GetTick>
 800582c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	015b      	lsls	r3, r3, #5
 8005834:	0d1b      	lsrs	r3, r3, #20
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	fb02 f303 	mul.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800583e:	e054      	b.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d050      	beq.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005848:	f7fd fb64 	bl	8002f14 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	429a      	cmp	r2, r3
 8005856:	d902      	bls.n	800585e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d13d      	bne.n	80058da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800586c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005876:	d111      	bne.n	800589c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005880:	d004      	beq.n	800588c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d107      	bne.n	800589c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a4:	d10f      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e017      	b.n	800590a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	429a      	cmp	r2, r3
 8005906:	d19b      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000008 	.word	0x20000008

08005918 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800592a:	f7fd faf3 	bl	8002f14 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	4413      	add	r3, r2
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800593a:	f7fd faeb 	bl	8002f14 <HAL_GetTick>
 800593e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005948:	4b3d      	ldr	r3, [pc, #244]	; (8005a40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	00da      	lsls	r2, r3, #3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	0d1b      	lsrs	r3, r3, #20
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005960:	e060      	b.n	8005a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005968:	d107      	bne.n	800597a <SPI_WaitFifoStateUntilTimeout+0x62>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005978:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d050      	beq.n	8005a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005982:	f7fd fac7 	bl	8002f14 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598e:	429a      	cmp	r2, r3
 8005990:	d902      	bls.n	8005998 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d13d      	bne.n	8005a14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b0:	d111      	bne.n	80059d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ba:	d004      	beq.n	80059c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c4:	d107      	bne.n	80059d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	d10f      	bne.n	8005a00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e010      	b.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d196      	bne.n	8005962 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000008 	.word	0x20000008

08005a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a58:	d111      	bne.n	8005a7e <SPI_EndRxTransaction+0x3a>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a62:	d004      	beq.n	8005a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d107      	bne.n	8005a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff febd 	bl	8005808 <SPI_WaitFlagStateUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e023      	b.n	8005aec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aac:	d11d      	bne.n	8005aea <SPI_EndRxTransaction+0xa6>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab6:	d004      	beq.n	8005ac2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	d113      	bne.n	8005aea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff ff22 	bl	8005918 <SPI_WaitFifoStateUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e000      	b.n	8005aec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff ff03 	bl	8005918 <SPI_WaitFifoStateUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e027      	b.n	8005b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fe68 	bl	8005808 <SPI_WaitFlagStateUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e014      	b.n	8005b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fedc 	bl	8005918 <SPI_WaitFifoStateUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e000      	b.n	8005b78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e042      	b.n	8005c18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fc ff91 	bl	8002acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2224      	movs	r2, #36	; 0x24
 8005bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8c2 	bl	8005d4c <UART_SetConfig>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e022      	b.n	8005c18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fbb2 	bl	8006344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fc39 	bl	8006488 <UART_CheckIdleState>
 8005c16:	4603      	mov	r3, r0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	f040 8083 	bne.w	8005d42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_UART_Transmit+0x28>
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e07b      	b.n	8005d44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Transmit+0x3a>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e074      	b.n	8005d44 <HAL_UART_Transmit+0x124>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2221      	movs	r2, #33	; 0x21
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c72:	f7fd f94f 	bl	8002f14 <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d108      	bne.n	8005ca4 <HAL_UART_Transmit+0x84>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e003      	b.n	8005cac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005cb4:	e02c      	b.n	8005d10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fc2c 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e039      	b.n	8005d44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e007      	b.n	8005cfe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1cc      	bne.n	8005cb6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fbf9 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e006      	b.n	8005d44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d50:	b08c      	sub	sp, #48	; 0x30
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4baa      	ldr	r3, [pc, #680]	; (8006024 <UART_SetConfig+0x2d8>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a9f      	ldr	r2, [pc, #636]	; (8006028 <UART_SetConfig+0x2dc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	f023 010f 	bic.w	r1, r3, #15
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a90      	ldr	r2, [pc, #576]	; (800602c <UART_SetConfig+0x2e0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d125      	bne.n	8005e3c <UART_SetConfig+0xf0>
 8005df0:	4b8f      	ldr	r3, [pc, #572]	; (8006030 <UART_SetConfig+0x2e4>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d81a      	bhi.n	8005e34 <UART_SetConfig+0xe8>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0xb8>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e25 	.word	0x08005e25
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e2d 	.word	0x08005e2d
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1a:	e116      	b.n	800604a <UART_SetConfig+0x2fe>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e22:	e112      	b.n	800604a <UART_SetConfig+0x2fe>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2a:	e10e      	b.n	800604a <UART_SetConfig+0x2fe>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e32:	e10a      	b.n	800604a <UART_SetConfig+0x2fe>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3a:	e106      	b.n	800604a <UART_SetConfig+0x2fe>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a7c      	ldr	r2, [pc, #496]	; (8006034 <UART_SetConfig+0x2e8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d138      	bne.n	8005eb8 <UART_SetConfig+0x16c>
 8005e46:	4b7a      	ldr	r3, [pc, #488]	; (8006030 <UART_SetConfig+0x2e4>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f003 030c 	and.w	r3, r3, #12
 8005e50:	2b0c      	cmp	r3, #12
 8005e52:	d82d      	bhi.n	8005eb0 <UART_SetConfig+0x164>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0x110>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	08005eb1 	.word	0x08005eb1
 8005e68:	08005eb1 	.word	0x08005eb1
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08005eb1 	.word	0x08005eb1
 8005e74:	08005eb1 	.word	0x08005eb1
 8005e78:	08005eb1 	.word	0x08005eb1
 8005e7c:	08005e99 	.word	0x08005e99
 8005e80:	08005eb1 	.word	0x08005eb1
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	08005eb1 	.word	0x08005eb1
 8005e8c:	08005ea9 	.word	0x08005ea9
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e0d8      	b.n	800604a <UART_SetConfig+0x2fe>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e0d4      	b.n	800604a <UART_SetConfig+0x2fe>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e0d0      	b.n	800604a <UART_SetConfig+0x2fe>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e0cc      	b.n	800604a <UART_SetConfig+0x2fe>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e0c8      	b.n	800604a <UART_SetConfig+0x2fe>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a5e      	ldr	r2, [pc, #376]	; (8006038 <UART_SetConfig+0x2ec>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d125      	bne.n	8005f0e <UART_SetConfig+0x1c2>
 8005ec2:	4b5b      	ldr	r3, [pc, #364]	; (8006030 <UART_SetConfig+0x2e4>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ecc:	2b30      	cmp	r3, #48	; 0x30
 8005ece:	d016      	beq.n	8005efe <UART_SetConfig+0x1b2>
 8005ed0:	2b30      	cmp	r3, #48	; 0x30
 8005ed2:	d818      	bhi.n	8005f06 <UART_SetConfig+0x1ba>
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d00a      	beq.n	8005eee <UART_SetConfig+0x1a2>
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d814      	bhi.n	8005f06 <UART_SetConfig+0x1ba>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <UART_SetConfig+0x19a>
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d008      	beq.n	8005ef6 <UART_SetConfig+0x1aa>
 8005ee4:	e00f      	b.n	8005f06 <UART_SetConfig+0x1ba>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eec:	e0ad      	b.n	800604a <UART_SetConfig+0x2fe>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef4:	e0a9      	b.n	800604a <UART_SetConfig+0x2fe>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efc:	e0a5      	b.n	800604a <UART_SetConfig+0x2fe>
 8005efe:	2308      	movs	r3, #8
 8005f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f04:	e0a1      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f06:	2310      	movs	r3, #16
 8005f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0c:	e09d      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4a      	ldr	r2, [pc, #296]	; (800603c <UART_SetConfig+0x2f0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d125      	bne.n	8005f64 <UART_SetConfig+0x218>
 8005f18:	4b45      	ldr	r3, [pc, #276]	; (8006030 <UART_SetConfig+0x2e4>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f22:	2bc0      	cmp	r3, #192	; 0xc0
 8005f24:	d016      	beq.n	8005f54 <UART_SetConfig+0x208>
 8005f26:	2bc0      	cmp	r3, #192	; 0xc0
 8005f28:	d818      	bhi.n	8005f5c <UART_SetConfig+0x210>
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	d00a      	beq.n	8005f44 <UART_SetConfig+0x1f8>
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d814      	bhi.n	8005f5c <UART_SetConfig+0x210>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <UART_SetConfig+0x1f0>
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d008      	beq.n	8005f4c <UART_SetConfig+0x200>
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x210>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f42:	e082      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f44:	2302      	movs	r3, #2
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e07e      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e07a      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5a:	e076      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f62:	e072      	b.n	800604a <UART_SetConfig+0x2fe>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a35      	ldr	r2, [pc, #212]	; (8006040 <UART_SetConfig+0x2f4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d12a      	bne.n	8005fc4 <UART_SetConfig+0x278>
 8005f6e:	4b30      	ldr	r3, [pc, #192]	; (8006030 <UART_SetConfig+0x2e4>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7c:	d01a      	beq.n	8005fb4 <UART_SetConfig+0x268>
 8005f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f82:	d81b      	bhi.n	8005fbc <UART_SetConfig+0x270>
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f88:	d00c      	beq.n	8005fa4 <UART_SetConfig+0x258>
 8005f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8e:	d815      	bhi.n	8005fbc <UART_SetConfig+0x270>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <UART_SetConfig+0x250>
 8005f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f98:	d008      	beq.n	8005fac <UART_SetConfig+0x260>
 8005f9a:	e00f      	b.n	8005fbc <UART_SetConfig+0x270>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa2:	e052      	b.n	800604a <UART_SetConfig+0x2fe>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005faa:	e04e      	b.n	800604a <UART_SetConfig+0x2fe>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb2:	e04a      	b.n	800604a <UART_SetConfig+0x2fe>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fba:	e046      	b.n	800604a <UART_SetConfig+0x2fe>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc2:	e042      	b.n	800604a <UART_SetConfig+0x2fe>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a17      	ldr	r2, [pc, #92]	; (8006028 <UART_SetConfig+0x2dc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d13a      	bne.n	8006044 <UART_SetConfig+0x2f8>
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <UART_SetConfig+0x2e4>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fdc:	d01a      	beq.n	8006014 <UART_SetConfig+0x2c8>
 8005fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fe2:	d81b      	bhi.n	800601c <UART_SetConfig+0x2d0>
 8005fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe8:	d00c      	beq.n	8006004 <UART_SetConfig+0x2b8>
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fee:	d815      	bhi.n	800601c <UART_SetConfig+0x2d0>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <UART_SetConfig+0x2b0>
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d008      	beq.n	800600c <UART_SetConfig+0x2c0>
 8005ffa:	e00f      	b.n	800601c <UART_SetConfig+0x2d0>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006002:	e022      	b.n	800604a <UART_SetConfig+0x2fe>
 8006004:	2302      	movs	r3, #2
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600a:	e01e      	b.n	800604a <UART_SetConfig+0x2fe>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006012:	e01a      	b.n	800604a <UART_SetConfig+0x2fe>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800601a:	e016      	b.n	800604a <UART_SetConfig+0x2fe>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006022:	e012      	b.n	800604a <UART_SetConfig+0x2fe>
 8006024:	cfff69f3 	.word	0xcfff69f3
 8006028:	40008000 	.word	0x40008000
 800602c:	40013800 	.word	0x40013800
 8006030:	40021000 	.word	0x40021000
 8006034:	40004400 	.word	0x40004400
 8006038:	40004800 	.word	0x40004800
 800603c:	40004c00 	.word	0x40004c00
 8006040:	40005000 	.word	0x40005000
 8006044:	2310      	movs	r3, #16
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4aae      	ldr	r2, [pc, #696]	; (8006308 <UART_SetConfig+0x5bc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	f040 8097 	bne.w	8006184 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800605a:	2b08      	cmp	r3, #8
 800605c:	d823      	bhi.n	80060a6 <UART_SetConfig+0x35a>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x318>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006089 	.word	0x08006089
 8006068:	080060a7 	.word	0x080060a7
 800606c:	08006091 	.word	0x08006091
 8006070:	080060a7 	.word	0x080060a7
 8006074:	08006097 	.word	0x08006097
 8006078:	080060a7 	.word	0x080060a7
 800607c:	080060a7 	.word	0x080060a7
 8006080:	080060a7 	.word	0x080060a7
 8006084:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fe fbb4 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 800608c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800608e:	e010      	b.n	80060b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b9e      	ldr	r3, [pc, #632]	; (800630c <UART_SetConfig+0x5c0>)
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006094:	e00d      	b.n	80060b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7fe fb3f 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 800609a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800609c:	e009      	b.n	80060b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060a4:	e005      	b.n	80060b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8130 	beq.w	800631a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	4a94      	ldr	r2, [pc, #592]	; (8006310 <UART_SetConfig+0x5c4>)
 80060c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4413      	add	r3, r2
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d305      	bcc.n	80060ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d903      	bls.n	80060f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060f0:	e113      	b.n	800631a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2200      	movs	r2, #0
 80060f6:	60bb      	str	r3, [r7, #8]
 80060f8:	60fa      	str	r2, [r7, #12]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	4a84      	ldr	r2, [pc, #528]	; (8006310 <UART_SetConfig+0x5c4>)
 8006100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006104:	b29b      	uxth	r3, r3
 8006106:	2200      	movs	r2, #0
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006114:	f7fa fde0 	bl	8000cd8 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	020b      	lsls	r3, r1, #8
 800612a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800612e:	0202      	lsls	r2, r0, #8
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	0849      	lsrs	r1, r1, #1
 8006136:	2000      	movs	r0, #0
 8006138:	460c      	mov	r4, r1
 800613a:	4605      	mov	r5, r0
 800613c:	eb12 0804 	adds.w	r8, r2, r4
 8006140:	eb43 0905 	adc.w	r9, r3, r5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	469a      	mov	sl, r3
 800614c:	4693      	mov	fp, r2
 800614e:	4652      	mov	r2, sl
 8006150:	465b      	mov	r3, fp
 8006152:	4640      	mov	r0, r8
 8006154:	4649      	mov	r1, r9
 8006156:	f7fa fdbf 	bl	8000cd8 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4613      	mov	r3, r2
 8006160:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006168:	d308      	bcc.n	800617c <UART_SetConfig+0x430>
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006170:	d204      	bcs.n	800617c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	e0ce      	b.n	800631a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006182:	e0ca      	b.n	800631a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d166      	bne.n	800625c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800618e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006192:	2b08      	cmp	r3, #8
 8006194:	d827      	bhi.n	80061e6 <UART_SetConfig+0x49a>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0x450>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061c1 	.word	0x080061c1
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061d1 	.word	0x080061d1
 80061a8:	080061e7 	.word	0x080061e7
 80061ac:	080061d7 	.word	0x080061d7
 80061b0:	080061e7 	.word	0x080061e7
 80061b4:	080061e7 	.word	0x080061e7
 80061b8:	080061e7 	.word	0x080061e7
 80061bc:	080061df 	.word	0x080061df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c0:	f7fe fb18 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c6:	e014      	b.n	80061f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c8:	f7fe fb2a 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 80061cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061ce:	e010      	b.n	80061f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d0:	4b4e      	ldr	r3, [pc, #312]	; (800630c <UART_SetConfig+0x5c0>)
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061d4:	e00d      	b.n	80061f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d6:	f7fe fa9f 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80061da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061dc:	e009      	b.n	80061f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061e4:	e005      	b.n	80061f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8090 	beq.w	800631a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	4a44      	ldr	r2, [pc, #272]	; (8006310 <UART_SetConfig+0x5c4>)
 8006200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006204:	461a      	mov	r2, r3
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	fbb3 f3f2 	udiv	r3, r3, r2
 800620c:	005a      	lsls	r2, r3, #1
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	441a      	add	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d916      	bls.n	8006254 <UART_SetConfig+0x508>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622c:	d212      	bcs.n	8006254 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f023 030f 	bic.w	r3, r3, #15
 8006236:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	b29b      	uxth	r3, r3
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	b29a      	uxth	r2, r3
 8006244:	8bfb      	ldrh	r3, [r7, #30]
 8006246:	4313      	orrs	r3, r2
 8006248:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	8bfa      	ldrh	r2, [r7, #30]
 8006250:	60da      	str	r2, [r3, #12]
 8006252:	e062      	b.n	800631a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800625a:	e05e      	b.n	800631a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800625c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006260:	2b08      	cmp	r3, #8
 8006262:	d828      	bhi.n	80062b6 <UART_SetConfig+0x56a>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x520>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	08006291 	.word	0x08006291
 8006270:	08006299 	.word	0x08006299
 8006274:	080062a1 	.word	0x080062a1
 8006278:	080062b7 	.word	0x080062b7
 800627c:	080062a7 	.word	0x080062a7
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062b7 	.word	0x080062b7
 8006288:	080062b7 	.word	0x080062b7
 800628c:	080062af 	.word	0x080062af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fe fab0 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8006294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006296:	e014      	b.n	80062c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006298:	f7fe fac2 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 800629c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800629e:	e010      	b.n	80062c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <UART_SetConfig+0x5c0>)
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062a4:	e00d      	b.n	80062c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a6:	f7fe fa37 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ac:	e009      	b.n	80062c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062b4:	e005      	b.n	80062c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062c0:	bf00      	nop
    }

    if (pclk != 0U)
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d028      	beq.n	800631a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	4a10      	ldr	r2, [pc, #64]	; (8006310 <UART_SetConfig+0x5c4>)
 80062ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	441a      	add	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d910      	bls.n	8006314 <UART_SetConfig+0x5c8>
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d20c      	bcs.n	8006314 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e009      	b.n	800631a <UART_SetConfig+0x5ce>
 8006306:	bf00      	nop
 8006308:	40008000 	.word	0x40008000
 800630c:	00f42400 	.word	0x00f42400
 8006310:	0800d588 	.word	0x0800d588
      }
      else
      {
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2201      	movs	r2, #1
 800631e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2201      	movs	r2, #1
 8006326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2200      	movs	r2, #0
 800632e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006336:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800633a:	4618      	mov	r0, r3
 800633c:	3730      	adds	r7, #48	; 0x30
 800633e:	46bd      	mov	sp, r7
 8006340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01a      	beq.n	800645a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006442:	d10a      	bne.n	800645a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af02      	add	r7, sp, #8
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006498:	f7fc fd3c 	bl	8002f14 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d10e      	bne.n	80064ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f82f 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e025      	b.n	8006516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d10e      	bne.n	80064f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f819 	bl	800651e <UART_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e00f      	b.n	8006516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652e:	e0a9      	b.n	8006684 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	f000 80a5 	beq.w	8006684 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fc fceb 	bl	8002f14 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <UART_WaitOnFlagUntilTimeout+0x32>
 800654a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654c:	2b00      	cmp	r3, #0
 800654e:	d140      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006564:	667b      	str	r3, [r7, #100]	; 0x64
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800656e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006570:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800657c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e6      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	663b      	str	r3, [r7, #96]	; 0x60
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e069      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d051      	beq.n	8006684 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ee:	d149      	bne.n	8006684 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800660e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
 800661a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	613b      	str	r3, [r7, #16]
   return(result);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	66bb      	str	r3, [r7, #104]	; 0x68
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800664c:	623a      	str	r2, [r7, #32]
 800664e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	69f9      	ldr	r1, [r7, #28]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	61bb      	str	r3, [r7, #24]
   return(result);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e010      	b.n	80066a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4013      	ands	r3, r2
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	bf0c      	ite	eq
 8006694:	2301      	moveq	r3, #1
 8006696:	2300      	movne	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	429a      	cmp	r2, r3
 80066a0:	f43f af46 	beq.w	8006530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3770      	adds	r7, #112	; 0x70
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e027      	b.n	8006714 <HAL_UARTEx_DisableFifoMode+0x66>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006734:	2302      	movs	r3, #2
 8006736:	e02d      	b.n	8006794 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2224      	movs	r2, #36	; 0x24
 8006744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f84f 	bl	8006818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e02d      	b.n	8006810 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f811 	bl	8006818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006824:	2b00      	cmp	r3, #0
 8006826:	d108      	bne.n	800683a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006838:	e031      	b.n	800689e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800683a:	2308      	movs	r3, #8
 800683c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800683e:	2308      	movs	r3, #8
 8006840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	0e5b      	lsrs	r3, r3, #25
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	0f5b      	lsrs	r3, r3, #29
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	7b3a      	ldrb	r2, [r7, #12]
 8006866:	4911      	ldr	r1, [pc, #68]	; (80068ac <UARTEx_SetNbDataToProcess+0x94>)
 8006868:	5c8a      	ldrb	r2, [r1, r2]
 800686a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800686e:	7b3a      	ldrb	r2, [r7, #12]
 8006870:	490f      	ldr	r1, [pc, #60]	; (80068b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006872:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006874:	fb93 f3f2 	sdiv	r3, r3, r2
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	7b7a      	ldrb	r2, [r7, #13]
 8006884:	4909      	ldr	r1, [pc, #36]	; (80068ac <UARTEx_SetNbDataToProcess+0x94>)
 8006886:	5c8a      	ldrb	r2, [r1, r2]
 8006888:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800688c:	7b7a      	ldrb	r2, [r7, #13]
 800688e:	4908      	ldr	r1, [pc, #32]	; (80068b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006890:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006892:	fb93 f3f2 	sdiv	r3, r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	0800d5a0 	.word	0x0800d5a0
 80068b0:	0800d5a8 	.word	0x0800d5a8

080068b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068bc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80068c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	43db      	mvns	r3, r3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4013      	ands	r3, r2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068ea:	b084      	sub	sp, #16
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	f107 0014 	add.w	r0, r7, #20
 80068f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	b004      	add	sp, #16
 800692a:	4770      	bx	lr

0800692c <__cvt>:
 800692c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	ec55 4b10 	vmov	r4, r5, d0
 8006934:	2d00      	cmp	r5, #0
 8006936:	460e      	mov	r6, r1
 8006938:	4619      	mov	r1, r3
 800693a:	462b      	mov	r3, r5
 800693c:	bfbb      	ittet	lt
 800693e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006942:	461d      	movlt	r5, r3
 8006944:	2300      	movge	r3, #0
 8006946:	232d      	movlt	r3, #45	; 0x2d
 8006948:	700b      	strb	r3, [r1, #0]
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006950:	4691      	mov	r9, r2
 8006952:	f023 0820 	bic.w	r8, r3, #32
 8006956:	bfbc      	itt	lt
 8006958:	4622      	movlt	r2, r4
 800695a:	4614      	movlt	r4, r2
 800695c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006960:	d005      	beq.n	800696e <__cvt+0x42>
 8006962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006966:	d100      	bne.n	800696a <__cvt+0x3e>
 8006968:	3601      	adds	r6, #1
 800696a:	2102      	movs	r1, #2
 800696c:	e000      	b.n	8006970 <__cvt+0x44>
 800696e:	2103      	movs	r1, #3
 8006970:	ab03      	add	r3, sp, #12
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	ab02      	add	r3, sp, #8
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	ec45 4b10 	vmov	d0, r4, r5
 800697c:	4653      	mov	r3, sl
 800697e:	4632      	mov	r2, r6
 8006980:	f001 f98a 	bl	8007c98 <_dtoa_r>
 8006984:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006988:	4607      	mov	r7, r0
 800698a:	d102      	bne.n	8006992 <__cvt+0x66>
 800698c:	f019 0f01 	tst.w	r9, #1
 8006990:	d022      	beq.n	80069d8 <__cvt+0xac>
 8006992:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006996:	eb07 0906 	add.w	r9, r7, r6
 800699a:	d110      	bne.n	80069be <__cvt+0x92>
 800699c:	783b      	ldrb	r3, [r7, #0]
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d10a      	bne.n	80069b8 <__cvt+0x8c>
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7fa f8b5 	bl	8000b18 <__aeabi_dcmpeq>
 80069ae:	b918      	cbnz	r0, 80069b8 <__cvt+0x8c>
 80069b0:	f1c6 0601 	rsb	r6, r6, #1
 80069b4:	f8ca 6000 	str.w	r6, [sl]
 80069b8:	f8da 3000 	ldr.w	r3, [sl]
 80069bc:	4499      	add	r9, r3
 80069be:	2200      	movs	r2, #0
 80069c0:	2300      	movs	r3, #0
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7fa f8a7 	bl	8000b18 <__aeabi_dcmpeq>
 80069ca:	b108      	cbz	r0, 80069d0 <__cvt+0xa4>
 80069cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80069d0:	2230      	movs	r2, #48	; 0x30
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	454b      	cmp	r3, r9
 80069d6:	d307      	bcc.n	80069e8 <__cvt+0xbc>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069dc:	1bdb      	subs	r3, r3, r7
 80069de:	4638      	mov	r0, r7
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	b004      	add	sp, #16
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	9103      	str	r1, [sp, #12]
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e7f0      	b.n	80069d2 <__cvt+0xa6>

080069f0 <__exponent>:
 80069f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f2:	4603      	mov	r3, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	bfb8      	it	lt
 80069f8:	4249      	neglt	r1, r1
 80069fa:	f803 2b02 	strb.w	r2, [r3], #2
 80069fe:	bfb4      	ite	lt
 8006a00:	222d      	movlt	r2, #45	; 0x2d
 8006a02:	222b      	movge	r2, #43	; 0x2b
 8006a04:	2909      	cmp	r1, #9
 8006a06:	7042      	strb	r2, [r0, #1]
 8006a08:	dd2a      	ble.n	8006a60 <__exponent+0x70>
 8006a0a:	f10d 0207 	add.w	r2, sp, #7
 8006a0e:	4617      	mov	r7, r2
 8006a10:	260a      	movs	r6, #10
 8006a12:	4694      	mov	ip, r2
 8006a14:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a18:	fb06 1415 	mls	r4, r6, r5, r1
 8006a1c:	3430      	adds	r4, #48	; 0x30
 8006a1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a22:	460c      	mov	r4, r1
 8006a24:	2c63      	cmp	r4, #99	; 0x63
 8006a26:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	dcf1      	bgt.n	8006a12 <__exponent+0x22>
 8006a2e:	3130      	adds	r1, #48	; 0x30
 8006a30:	f1ac 0402 	sub.w	r4, ip, #2
 8006a34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a38:	1c41      	adds	r1, r0, #1
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	42ba      	cmp	r2, r7
 8006a3e:	d30a      	bcc.n	8006a56 <__exponent+0x66>
 8006a40:	f10d 0209 	add.w	r2, sp, #9
 8006a44:	eba2 020c 	sub.w	r2, r2, ip
 8006a48:	42bc      	cmp	r4, r7
 8006a4a:	bf88      	it	hi
 8006a4c:	2200      	movhi	r2, #0
 8006a4e:	4413      	add	r3, r2
 8006a50:	1a18      	subs	r0, r3, r0
 8006a52:	b003      	add	sp, #12
 8006a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a5e:	e7ed      	b.n	8006a3c <__exponent+0x4c>
 8006a60:	2330      	movs	r3, #48	; 0x30
 8006a62:	3130      	adds	r1, #48	; 0x30
 8006a64:	7083      	strb	r3, [r0, #2]
 8006a66:	70c1      	strb	r1, [r0, #3]
 8006a68:	1d03      	adds	r3, r0, #4
 8006a6a:	e7f1      	b.n	8006a50 <__exponent+0x60>

08006a6c <_printf_float>:
 8006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	ed2d 8b02 	vpush	{d8}
 8006a74:	b08d      	sub	sp, #52	; 0x34
 8006a76:	460c      	mov	r4, r1
 8006a78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a7c:	4616      	mov	r6, r2
 8006a7e:	461f      	mov	r7, r3
 8006a80:	4605      	mov	r5, r0
 8006a82:	f001 f801 	bl	8007a88 <_localeconv_r>
 8006a86:	f8d0 a000 	ldr.w	sl, [r0]
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	f7f9 fc18 	bl	80002c0 <strlen>
 8006a90:	2300      	movs	r3, #0
 8006a92:	930a      	str	r3, [sp, #40]	; 0x28
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	f103 0208 	add.w	r2, r3, #8
 8006aaa:	f8c8 2000 	str.w	r2, [r8]
 8006aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006abc:	ee08 0a10 	vmov	s16, r0
 8006ac0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac8:	4b9e      	ldr	r3, [pc, #632]	; (8006d44 <_printf_float+0x2d8>)
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	f7fa f855 	bl	8000b7c <__aeabi_dcmpun>
 8006ad2:	bb88      	cbnz	r0, 8006b38 <_printf_float+0xcc>
 8006ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad8:	4b9a      	ldr	r3, [pc, #616]	; (8006d44 <_printf_float+0x2d8>)
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	f7fa f82f 	bl	8000b40 <__aeabi_dcmple>
 8006ae2:	bb48      	cbnz	r0, 8006b38 <_printf_float+0xcc>
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f7fa f81e 	bl	8000b2c <__aeabi_dcmplt>
 8006af0:	b110      	cbz	r0, 8006af8 <_printf_float+0x8c>
 8006af2:	232d      	movs	r3, #45	; 0x2d
 8006af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af8:	4a93      	ldr	r2, [pc, #588]	; (8006d48 <_printf_float+0x2dc>)
 8006afa:	4b94      	ldr	r3, [pc, #592]	; (8006d4c <_printf_float+0x2e0>)
 8006afc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b00:	bf94      	ite	ls
 8006b02:	4690      	movls	r8, r2
 8006b04:	4698      	movhi	r8, r3
 8006b06:	2303      	movs	r3, #3
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	f023 0304 	bic.w	r3, r3, #4
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	f04f 0900 	mov.w	r9, #0
 8006b16:	9700      	str	r7, [sp, #0]
 8006b18:	4633      	mov	r3, r6
 8006b1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f9da 	bl	8006ed8 <_printf_common>
 8006b24:	3001      	adds	r0, #1
 8006b26:	f040 8090 	bne.w	8006c4a <_printf_float+0x1de>
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2e:	b00d      	add	sp, #52	; 0x34
 8006b30:	ecbd 8b02 	vpop	{d8}
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	4649      	mov	r1, r9
 8006b40:	f7fa f81c 	bl	8000b7c <__aeabi_dcmpun>
 8006b44:	b140      	cbz	r0, 8006b58 <_printf_float+0xec>
 8006b46:	464b      	mov	r3, r9
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bfbc      	itt	lt
 8006b4c:	232d      	movlt	r3, #45	; 0x2d
 8006b4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b52:	4a7f      	ldr	r2, [pc, #508]	; (8006d50 <_printf_float+0x2e4>)
 8006b54:	4b7f      	ldr	r3, [pc, #508]	; (8006d54 <_printf_float+0x2e8>)
 8006b56:	e7d1      	b.n	8006afc <_printf_float+0x90>
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b5e:	9206      	str	r2, [sp, #24]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	d13f      	bne.n	8006be4 <_printf_float+0x178>
 8006b64:	2306      	movs	r3, #6
 8006b66:	6063      	str	r3, [r4, #4]
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	6861      	ldr	r1, [r4, #4]
 8006b6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b70:	2300      	movs	r3, #0
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	ab0a      	add	r3, sp, #40	; 0x28
 8006b76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b7a:	ab09      	add	r3, sp, #36	; 0x24
 8006b7c:	ec49 8b10 	vmov	d0, r8, r9
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff fecf 	bl	800692c <__cvt>
 8006b8e:	9b06      	ldr	r3, [sp, #24]
 8006b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b92:	2b47      	cmp	r3, #71	; 0x47
 8006b94:	4680      	mov	r8, r0
 8006b96:	d108      	bne.n	8006baa <_printf_float+0x13e>
 8006b98:	1cc8      	adds	r0, r1, #3
 8006b9a:	db02      	blt.n	8006ba2 <_printf_float+0x136>
 8006b9c:	6863      	ldr	r3, [r4, #4]
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	dd41      	ble.n	8006c26 <_printf_float+0x1ba>
 8006ba2:	f1ab 0302 	sub.w	r3, fp, #2
 8006ba6:	fa5f fb83 	uxtb.w	fp, r3
 8006baa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bae:	d820      	bhi.n	8006bf2 <_printf_float+0x186>
 8006bb0:	3901      	subs	r1, #1
 8006bb2:	465a      	mov	r2, fp
 8006bb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006bba:	f7ff ff19 	bl	80069f0 <__exponent>
 8006bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc0:	1813      	adds	r3, r2, r0
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	4681      	mov	r9, r0
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	dc02      	bgt.n	8006bd0 <_printf_float+0x164>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	07d2      	lsls	r2, r2, #31
 8006bce:	d501      	bpl.n	8006bd4 <_printf_float+0x168>
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d09c      	beq.n	8006b16 <_printf_float+0xaa>
 8006bdc:	232d      	movs	r3, #45	; 0x2d
 8006bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be2:	e798      	b.n	8006b16 <_printf_float+0xaa>
 8006be4:	9a06      	ldr	r2, [sp, #24]
 8006be6:	2a47      	cmp	r2, #71	; 0x47
 8006be8:	d1be      	bne.n	8006b68 <_printf_float+0xfc>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1bc      	bne.n	8006b68 <_printf_float+0xfc>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e7b9      	b.n	8006b66 <_printf_float+0xfa>
 8006bf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bf6:	d118      	bne.n	8006c2a <_printf_float+0x1be>
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	dd0b      	ble.n	8006c16 <_printf_float+0x1aa>
 8006bfe:	6121      	str	r1, [r4, #16]
 8006c00:	b913      	cbnz	r3, 8006c08 <_printf_float+0x19c>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	07d0      	lsls	r0, r2, #31
 8006c06:	d502      	bpl.n	8006c0e <_printf_float+0x1a2>
 8006c08:	3301      	adds	r3, #1
 8006c0a:	440b      	add	r3, r1
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c10:	f04f 0900 	mov.w	r9, #0
 8006c14:	e7de      	b.n	8006bd4 <_printf_float+0x168>
 8006c16:	b913      	cbnz	r3, 8006c1e <_printf_float+0x1b2>
 8006c18:	6822      	ldr	r2, [r4, #0]
 8006c1a:	07d2      	lsls	r2, r2, #31
 8006c1c:	d501      	bpl.n	8006c22 <_printf_float+0x1b6>
 8006c1e:	3302      	adds	r3, #2
 8006c20:	e7f4      	b.n	8006c0c <_printf_float+0x1a0>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e7f2      	b.n	8006c0c <_printf_float+0x1a0>
 8006c26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	db05      	blt.n	8006c3c <_printf_float+0x1d0>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	6121      	str	r1, [r4, #16]
 8006c34:	07d8      	lsls	r0, r3, #31
 8006c36:	d5ea      	bpl.n	8006c0e <_printf_float+0x1a2>
 8006c38:	1c4b      	adds	r3, r1, #1
 8006c3a:	e7e7      	b.n	8006c0c <_printf_float+0x1a0>
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	bfd4      	ite	le
 8006c40:	f1c1 0202 	rsble	r2, r1, #2
 8006c44:	2201      	movgt	r2, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	e7e0      	b.n	8006c0c <_printf_float+0x1a0>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	055a      	lsls	r2, r3, #21
 8006c4e:	d407      	bmi.n	8006c60 <_printf_float+0x1f4>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	4642      	mov	r2, r8
 8006c54:	4631      	mov	r1, r6
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d12c      	bne.n	8006cb8 <_printf_float+0x24c>
 8006c5e:	e764      	b.n	8006b2a <_printf_float+0xbe>
 8006c60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c64:	f240 80e0 	bls.w	8006e28 <_printf_float+0x3bc>
 8006c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f7f9 ff52 	bl	8000b18 <__aeabi_dcmpeq>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d034      	beq.n	8006ce2 <_printf_float+0x276>
 8006c78:	4a37      	ldr	r2, [pc, #220]	; (8006d58 <_printf_float+0x2ec>)
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f af51 	beq.w	8006b2a <_printf_float+0xbe>
 8006c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	db02      	blt.n	8006c96 <_printf_float+0x22a>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	07d8      	lsls	r0, r3, #31
 8006c94:	d510      	bpl.n	8006cb8 <_printf_float+0x24c>
 8006c96:	ee18 3a10 	vmov	r3, s16
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f af41 	beq.w	8006b2a <_printf_float+0xbe>
 8006ca8:	f04f 0800 	mov.w	r8, #0
 8006cac:	f104 091a 	add.w	r9, r4, #26
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	4543      	cmp	r3, r8
 8006cb6:	dc09      	bgt.n	8006ccc <_printf_float+0x260>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	f100 8107 	bmi.w	8006ece <_printf_float+0x462>
 8006cc0:	68e0      	ldr	r0, [r4, #12]
 8006cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc4:	4298      	cmp	r0, r3
 8006cc6:	bfb8      	it	lt
 8006cc8:	4618      	movlt	r0, r3
 8006cca:	e730      	b.n	8006b2e <_printf_float+0xc2>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	464a      	mov	r2, r9
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f af27 	beq.w	8006b2a <_printf_float+0xbe>
 8006cdc:	f108 0801 	add.w	r8, r8, #1
 8006ce0:	e7e6      	b.n	8006cb0 <_printf_float+0x244>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dc39      	bgt.n	8006d5c <_printf_float+0x2f0>
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <_printf_float+0x2ec>)
 8006cea:	2301      	movs	r3, #1
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f43f af19 	beq.w	8006b2a <_printf_float+0xbe>
 8006cf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	d102      	bne.n	8006d06 <_printf_float+0x29a>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07d9      	lsls	r1, r3, #31
 8006d04:	d5d8      	bpl.n	8006cb8 <_printf_float+0x24c>
 8006d06:	ee18 3a10 	vmov	r3, s16
 8006d0a:	4652      	mov	r2, sl
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	f43f af09 	beq.w	8006b2a <_printf_float+0xbe>
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	f104 0a1a 	add.w	sl, r4, #26
 8006d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d22:	425b      	negs	r3, r3
 8006d24:	454b      	cmp	r3, r9
 8006d26:	dc01      	bgt.n	8006d2c <_printf_float+0x2c0>
 8006d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2a:	e792      	b.n	8006c52 <_printf_float+0x1e6>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4652      	mov	r2, sl
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	f43f aef7 	beq.w	8006b2a <_printf_float+0xbe>
 8006d3c:	f109 0901 	add.w	r9, r9, #1
 8006d40:	e7ee      	b.n	8006d20 <_printf_float+0x2b4>
 8006d42:	bf00      	nop
 8006d44:	7fefffff 	.word	0x7fefffff
 8006d48:	0800d5b0 	.word	0x0800d5b0
 8006d4c:	0800d5b4 	.word	0x0800d5b4
 8006d50:	0800d5b8 	.word	0x0800d5b8
 8006d54:	0800d5bc 	.word	0x0800d5bc
 8006d58:	0800d5c0 	.word	0x0800d5c0
 8006d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bfa8      	it	ge
 8006d64:	461a      	movge	r2, r3
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	4691      	mov	r9, r2
 8006d6a:	dc37      	bgt.n	8006ddc <_printf_float+0x370>
 8006d6c:	f04f 0b00 	mov.w	fp, #0
 8006d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d74:	f104 021a 	add.w	r2, r4, #26
 8006d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	eba3 0309 	sub.w	r3, r3, r9
 8006d80:	455b      	cmp	r3, fp
 8006d82:	dc33      	bgt.n	8006dec <_printf_float+0x380>
 8006d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	db3b      	blt.n	8006e04 <_printf_float+0x398>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	07da      	lsls	r2, r3, #31
 8006d90:	d438      	bmi.n	8006e04 <_printf_float+0x398>
 8006d92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d96:	eba2 0903 	sub.w	r9, r2, r3
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	1ad2      	subs	r2, r2, r3
 8006d9e:	4591      	cmp	r9, r2
 8006da0:	bfa8      	it	ge
 8006da2:	4691      	movge	r9, r2
 8006da4:	f1b9 0f00 	cmp.w	r9, #0
 8006da8:	dc35      	bgt.n	8006e16 <_printf_float+0x3aa>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006db2:	f104 0a1a 	add.w	sl, r4, #26
 8006db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	eba3 0309 	sub.w	r3, r3, r9
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	f77f af79 	ble.w	8006cb8 <_printf_float+0x24c>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f aeaa 	beq.w	8006b2a <_printf_float+0xbe>
 8006dd6:	f108 0801 	add.w	r8, r8, #1
 8006dda:	e7ec      	b.n	8006db6 <_printf_float+0x34a>
 8006ddc:	4613      	mov	r3, r2
 8006dde:	4631      	mov	r1, r6
 8006de0:	4642      	mov	r2, r8
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	d1c0      	bne.n	8006d6c <_printf_float+0x300>
 8006dea:	e69e      	b.n	8006b2a <_printf_float+0xbe>
 8006dec:	2301      	movs	r3, #1
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	9205      	str	r2, [sp, #20]
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f ae97 	beq.w	8006b2a <_printf_float+0xbe>
 8006dfc:	9a05      	ldr	r2, [sp, #20]
 8006dfe:	f10b 0b01 	add.w	fp, fp, #1
 8006e02:	e7b9      	b.n	8006d78 <_printf_float+0x30c>
 8006e04:	ee18 3a10 	vmov	r3, s16
 8006e08:	4652      	mov	r2, sl
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	d1be      	bne.n	8006d92 <_printf_float+0x326>
 8006e14:	e689      	b.n	8006b2a <_printf_float+0xbe>
 8006e16:	9a05      	ldr	r2, [sp, #20]
 8006e18:	464b      	mov	r3, r9
 8006e1a:	4442      	add	r2, r8
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	d1c1      	bne.n	8006daa <_printf_float+0x33e>
 8006e26:	e680      	b.n	8006b2a <_printf_float+0xbe>
 8006e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2a:	2a01      	cmp	r2, #1
 8006e2c:	dc01      	bgt.n	8006e32 <_printf_float+0x3c6>
 8006e2e:	07db      	lsls	r3, r3, #31
 8006e30:	d53a      	bpl.n	8006ea8 <_printf_float+0x43c>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4642      	mov	r2, r8
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f ae74 	beq.w	8006b2a <_printf_float+0xbe>
 8006e42:	ee18 3a10 	vmov	r3, s16
 8006e46:	4652      	mov	r2, sl
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f ae6b 	beq.w	8006b2a <_printf_float+0xbe>
 8006e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006e60:	f7f9 fe5a 	bl	8000b18 <__aeabi_dcmpeq>
 8006e64:	b9d8      	cbnz	r0, 8006e9e <_printf_float+0x432>
 8006e66:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006e6a:	f108 0201 	add.w	r2, r8, #1
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	d10e      	bne.n	8006e96 <_printf_float+0x42a>
 8006e78:	e657      	b.n	8006b2a <_printf_float+0xbe>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae50 	beq.w	8006b2a <_printf_float+0xbe>
 8006e8a:	f108 0801 	add.w	r8, r8, #1
 8006e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	4543      	cmp	r3, r8
 8006e94:	dcf1      	bgt.n	8006e7a <_printf_float+0x40e>
 8006e96:	464b      	mov	r3, r9
 8006e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e9c:	e6da      	b.n	8006c54 <_printf_float+0x1e8>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	f104 0a1a 	add.w	sl, r4, #26
 8006ea6:	e7f2      	b.n	8006e8e <_printf_float+0x422>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4642      	mov	r2, r8
 8006eac:	e7df      	b.n	8006e6e <_printf_float+0x402>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	464a      	mov	r2, r9
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f ae36 	beq.w	8006b2a <_printf_float+0xbe>
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ec6:	1a5b      	subs	r3, r3, r1
 8006ec8:	4543      	cmp	r3, r8
 8006eca:	dcf0      	bgt.n	8006eae <_printf_float+0x442>
 8006ecc:	e6f8      	b.n	8006cc0 <_printf_float+0x254>
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	f104 0919 	add.w	r9, r4, #25
 8006ed6:	e7f4      	b.n	8006ec2 <_printf_float+0x456>

08006ed8 <_printf_common>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	4699      	mov	r9, r3
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfb8      	it	lt
 8006eec:	4613      	movlt	r3, r2
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b10a      	cbz	r2, 8006efe <_printf_common+0x26>
 8006efa:	3301      	adds	r3, #1
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	0699      	lsls	r1, r3, #26
 8006f02:	bf42      	ittt	mi
 8006f04:	6833      	ldrmi	r3, [r6, #0]
 8006f06:	3302      	addmi	r3, #2
 8006f08:	6033      	strmi	r3, [r6, #0]
 8006f0a:	6825      	ldr	r5, [r4, #0]
 8006f0c:	f015 0506 	ands.w	r5, r5, #6
 8006f10:	d106      	bne.n	8006f20 <_printf_common+0x48>
 8006f12:	f104 0a19 	add.w	sl, r4, #25
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	6832      	ldr	r2, [r6, #0]
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dc26      	bgt.n	8006f6e <_printf_common+0x96>
 8006f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f24:	1e13      	subs	r3, r2, #0
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	0692      	lsls	r2, r2, #26
 8006f2e:	d42b      	bmi.n	8006f88 <_printf_common+0xb0>
 8006f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d01e      	beq.n	8006f7c <_printf_common+0xa4>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	f003 0306 	and.w	r3, r3, #6
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	bf02      	ittt	eq
 8006f4a:	68e5      	ldreq	r5, [r4, #12]
 8006f4c:	6833      	ldreq	r3, [r6, #0]
 8006f4e:	1aed      	subeq	r5, r5, r3
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	bf0c      	ite	eq
 8006f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f58:	2500      	movne	r5, #0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bfc4      	itt	gt
 8006f5e:	1a9b      	subgt	r3, r3, r2
 8006f60:	18ed      	addgt	r5, r5, r3
 8006f62:	2600      	movs	r6, #0
 8006f64:	341a      	adds	r4, #26
 8006f66:	42b5      	cmp	r5, r6
 8006f68:	d11a      	bne.n	8006fa0 <_printf_common+0xc8>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e008      	b.n	8006f80 <_printf_common+0xa8>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	4649      	mov	r1, r9
 8006f74:	4638      	mov	r0, r7
 8006f76:	47c0      	blx	r8
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d103      	bne.n	8006f84 <_printf_common+0xac>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7c6      	b.n	8006f16 <_printf_common+0x3e>
 8006f88:	18e1      	adds	r1, r4, r3
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	2030      	movs	r0, #48	; 0x30
 8006f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f92:	4422      	add	r2, r4
 8006f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	e7c7      	b.n	8006f30 <_printf_common+0x58>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0e6      	beq.n	8006f7c <_printf_common+0xa4>
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7d9      	b.n	8006f66 <_printf_common+0x8e>
	...

08006fb4 <_printf_i>:
 8006fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	7e0f      	ldrb	r7, [r1, #24]
 8006fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fbc:	2f78      	cmp	r7, #120	; 0x78
 8006fbe:	4691      	mov	r9, r2
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	469a      	mov	sl, r3
 8006fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fca:	d807      	bhi.n	8006fdc <_printf_i+0x28>
 8006fcc:	2f62      	cmp	r7, #98	; 0x62
 8006fce:	d80a      	bhi.n	8006fe6 <_printf_i+0x32>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	f000 80d4 	beq.w	800717e <_printf_i+0x1ca>
 8006fd6:	2f58      	cmp	r7, #88	; 0x58
 8006fd8:	f000 80c0 	beq.w	800715c <_printf_i+0x1a8>
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe4:	e03a      	b.n	800705c <_printf_i+0xa8>
 8006fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fea:	2b15      	cmp	r3, #21
 8006fec:	d8f6      	bhi.n	8006fdc <_printf_i+0x28>
 8006fee:	a101      	add	r1, pc, #4	; (adr r1, 8006ff4 <_printf_i+0x40>)
 8006ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff4:	0800704d 	.word	0x0800704d
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08006fdd 	.word	0x08006fdd
 8007000:	08006fdd 	.word	0x08006fdd
 8007004:	08006fdd 	.word	0x08006fdd
 8007008:	08006fdd 	.word	0x08006fdd
 800700c:	08007061 	.word	0x08007061
 8007010:	08006fdd 	.word	0x08006fdd
 8007014:	08006fdd 	.word	0x08006fdd
 8007018:	08006fdd 	.word	0x08006fdd
 800701c:	08006fdd 	.word	0x08006fdd
 8007020:	08007165 	.word	0x08007165
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800711f 	.word	0x0800711f
 800702c:	08006fdd 	.word	0x08006fdd
 8007030:	08006fdd 	.word	0x08006fdd
 8007034:	08007187 	.word	0x08007187
 8007038:	08006fdd 	.word	0x08006fdd
 800703c:	0800708d 	.word	0x0800708d
 8007040:	08006fdd 	.word	0x08006fdd
 8007044:	08006fdd 	.word	0x08006fdd
 8007048:	08007127 	.word	0x08007127
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800705c:	2301      	movs	r3, #1
 800705e:	e09f      	b.n	80071a0 <_printf_i+0x1ec>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	0607      	lsls	r7, r0, #24
 8007066:	f103 0104 	add.w	r1, r3, #4
 800706a:	6029      	str	r1, [r5, #0]
 800706c:	d501      	bpl.n	8007072 <_printf_i+0xbe>
 800706e:	681e      	ldr	r6, [r3, #0]
 8007070:	e003      	b.n	800707a <_printf_i+0xc6>
 8007072:	0646      	lsls	r6, r0, #25
 8007074:	d5fb      	bpl.n	800706e <_printf_i+0xba>
 8007076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800707a:	2e00      	cmp	r6, #0
 800707c:	da03      	bge.n	8007086 <_printf_i+0xd2>
 800707e:	232d      	movs	r3, #45	; 0x2d
 8007080:	4276      	negs	r6, r6
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007086:	485a      	ldr	r0, [pc, #360]	; (80071f0 <_printf_i+0x23c>)
 8007088:	230a      	movs	r3, #10
 800708a:	e012      	b.n	80070b2 <_printf_i+0xfe>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6029      	str	r1, [r5, #0]
 8007094:	0605      	lsls	r5, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xe8>
 8007098:	681e      	ldr	r6, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0xee>
 800709c:	0641      	lsls	r1, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xe4>
 80070a0:	881e      	ldrh	r6, [r3, #0]
 80070a2:	4853      	ldr	r0, [pc, #332]	; (80071f0 <_printf_i+0x23c>)
 80070a4:	2f6f      	cmp	r7, #111	; 0x6f
 80070a6:	bf0c      	ite	eq
 80070a8:	2308      	moveq	r3, #8
 80070aa:	230a      	movne	r3, #10
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b2:	6865      	ldr	r5, [r4, #4]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	bfa2      	ittt	ge
 80070ba:	6821      	ldrge	r1, [r4, #0]
 80070bc:	f021 0104 	bicge.w	r1, r1, #4
 80070c0:	6021      	strge	r1, [r4, #0]
 80070c2:	b90e      	cbnz	r6, 80070c8 <_printf_i+0x114>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d04b      	beq.n	8007160 <_printf_i+0x1ac>
 80070c8:	4615      	mov	r5, r2
 80070ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80070ce:	fb03 6711 	mls	r7, r3, r1, r6
 80070d2:	5dc7      	ldrb	r7, [r0, r7]
 80070d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d8:	4637      	mov	r7, r6
 80070da:	42bb      	cmp	r3, r7
 80070dc:	460e      	mov	r6, r1
 80070de:	d9f4      	bls.n	80070ca <_printf_i+0x116>
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d10b      	bne.n	80070fc <_printf_i+0x148>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07de      	lsls	r6, r3, #31
 80070e8:	d508      	bpl.n	80070fc <_printf_i+0x148>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	bfde      	ittt	le
 80070f2:	2330      	movle	r3, #48	; 0x30
 80070f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070fc:	1b52      	subs	r2, r2, r5
 80070fe:	6122      	str	r2, [r4, #16]
 8007100:	f8cd a000 	str.w	sl, [sp]
 8007104:	464b      	mov	r3, r9
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f7ff fee4 	bl	8006ed8 <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14a      	bne.n	80071aa <_printf_i+0x1f6>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b004      	add	sp, #16
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	f043 0320 	orr.w	r3, r3, #32
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	4833      	ldr	r0, [pc, #204]	; (80071f4 <_printf_i+0x240>)
 8007128:	2778      	movs	r7, #120	; 0x78
 800712a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6829      	ldr	r1, [r5, #0]
 8007132:	061f      	lsls	r7, r3, #24
 8007134:	f851 6b04 	ldr.w	r6, [r1], #4
 8007138:	d402      	bmi.n	8007140 <_printf_i+0x18c>
 800713a:	065f      	lsls	r7, r3, #25
 800713c:	bf48      	it	mi
 800713e:	b2b6      	uxthmi	r6, r6
 8007140:	07df      	lsls	r7, r3, #31
 8007142:	bf48      	it	mi
 8007144:	f043 0320 	orrmi.w	r3, r3, #32
 8007148:	6029      	str	r1, [r5, #0]
 800714a:	bf48      	it	mi
 800714c:	6023      	strmi	r3, [r4, #0]
 800714e:	b91e      	cbnz	r6, 8007158 <_printf_i+0x1a4>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	2310      	movs	r3, #16
 800715a:	e7a7      	b.n	80070ac <_printf_i+0xf8>
 800715c:	4824      	ldr	r0, [pc, #144]	; (80071f0 <_printf_i+0x23c>)
 800715e:	e7e4      	b.n	800712a <_printf_i+0x176>
 8007160:	4615      	mov	r5, r2
 8007162:	e7bd      	b.n	80070e0 <_printf_i+0x12c>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	6826      	ldr	r6, [r4, #0]
 8007168:	6961      	ldr	r1, [r4, #20]
 800716a:	1d18      	adds	r0, r3, #4
 800716c:	6028      	str	r0, [r5, #0]
 800716e:	0635      	lsls	r5, r6, #24
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	d501      	bpl.n	8007178 <_printf_i+0x1c4>
 8007174:	6019      	str	r1, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0x1ca>
 8007178:	0670      	lsls	r0, r6, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0x1c0>
 800717c:	8019      	strh	r1, [r3, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	4615      	mov	r5, r2
 8007184:	e7bc      	b.n	8007100 <_printf_i+0x14c>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	602a      	str	r2, [r5, #0]
 800718c:	681d      	ldr	r5, [r3, #0]
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	2100      	movs	r1, #0
 8007192:	4628      	mov	r0, r5
 8007194:	f7f9 f844 	bl	8000220 <memchr>
 8007198:	b108      	cbz	r0, 800719e <_printf_i+0x1ea>
 800719a:	1b40      	subs	r0, r0, r5
 800719c:	6060      	str	r0, [r4, #4]
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	2300      	movs	r3, #0
 80071a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a8:	e7aa      	b.n	8007100 <_printf_i+0x14c>
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4649      	mov	r1, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	47d0      	blx	sl
 80071b4:	3001      	adds	r0, #1
 80071b6:	d0ad      	beq.n	8007114 <_printf_i+0x160>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	079b      	lsls	r3, r3, #30
 80071bc:	d413      	bmi.n	80071e6 <_printf_i+0x232>
 80071be:	68e0      	ldr	r0, [r4, #12]
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	4298      	cmp	r0, r3
 80071c4:	bfb8      	it	lt
 80071c6:	4618      	movlt	r0, r3
 80071c8:	e7a6      	b.n	8007118 <_printf_i+0x164>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4632      	mov	r2, r6
 80071ce:	4649      	mov	r1, r9
 80071d0:	4640      	mov	r0, r8
 80071d2:	47d0      	blx	sl
 80071d4:	3001      	adds	r0, #1
 80071d6:	d09d      	beq.n	8007114 <_printf_i+0x160>
 80071d8:	3501      	adds	r5, #1
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	9903      	ldr	r1, [sp, #12]
 80071de:	1a5b      	subs	r3, r3, r1
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dcf2      	bgt.n	80071ca <_printf_i+0x216>
 80071e4:	e7eb      	b.n	80071be <_printf_i+0x20a>
 80071e6:	2500      	movs	r5, #0
 80071e8:	f104 0619 	add.w	r6, r4, #25
 80071ec:	e7f5      	b.n	80071da <_printf_i+0x226>
 80071ee:	bf00      	nop
 80071f0:	0800d5c2 	.word	0x0800d5c2
 80071f4:	0800d5d3 	.word	0x0800d5d3

080071f8 <_scanf_float>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	b087      	sub	sp, #28
 80071fe:	4617      	mov	r7, r2
 8007200:	9303      	str	r3, [sp, #12]
 8007202:	688b      	ldr	r3, [r1, #8]
 8007204:	1e5a      	subs	r2, r3, #1
 8007206:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800720a:	bf83      	ittte	hi
 800720c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007210:	195b      	addhi	r3, r3, r5
 8007212:	9302      	strhi	r3, [sp, #8]
 8007214:	2300      	movls	r3, #0
 8007216:	bf86      	itte	hi
 8007218:	f240 135d 	movwhi	r3, #349	; 0x15d
 800721c:	608b      	strhi	r3, [r1, #8]
 800721e:	9302      	strls	r3, [sp, #8]
 8007220:	680b      	ldr	r3, [r1, #0]
 8007222:	468b      	mov	fp, r1
 8007224:	2500      	movs	r5, #0
 8007226:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800722a:	f84b 3b1c 	str.w	r3, [fp], #28
 800722e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007232:	4680      	mov	r8, r0
 8007234:	460c      	mov	r4, r1
 8007236:	465e      	mov	r6, fp
 8007238:	46aa      	mov	sl, r5
 800723a:	46a9      	mov	r9, r5
 800723c:	9501      	str	r5, [sp, #4]
 800723e:	68a2      	ldr	r2, [r4, #8]
 8007240:	b152      	cbz	r2, 8007258 <_scanf_float+0x60>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b4e      	cmp	r3, #78	; 0x4e
 8007248:	d864      	bhi.n	8007314 <_scanf_float+0x11c>
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d83c      	bhi.n	80072c8 <_scanf_float+0xd0>
 800724e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007252:	b2c8      	uxtb	r0, r1
 8007254:	280e      	cmp	r0, #14
 8007256:	d93a      	bls.n	80072ce <_scanf_float+0xd6>
 8007258:	f1b9 0f00 	cmp.w	r9, #0
 800725c:	d003      	beq.n	8007266 <_scanf_float+0x6e>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800726a:	f1ba 0f01 	cmp.w	sl, #1
 800726e:	f200 8113 	bhi.w	8007498 <_scanf_float+0x2a0>
 8007272:	455e      	cmp	r6, fp
 8007274:	f200 8105 	bhi.w	8007482 <_scanf_float+0x28a>
 8007278:	2501      	movs	r5, #1
 800727a:	4628      	mov	r0, r5
 800727c:	b007      	add	sp, #28
 800727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007282:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007286:	2a0d      	cmp	r2, #13
 8007288:	d8e6      	bhi.n	8007258 <_scanf_float+0x60>
 800728a:	a101      	add	r1, pc, #4	; (adr r1, 8007290 <_scanf_float+0x98>)
 800728c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007290:	080073cf 	.word	0x080073cf
 8007294:	08007259 	.word	0x08007259
 8007298:	08007259 	.word	0x08007259
 800729c:	08007259 	.word	0x08007259
 80072a0:	0800742f 	.word	0x0800742f
 80072a4:	08007407 	.word	0x08007407
 80072a8:	08007259 	.word	0x08007259
 80072ac:	08007259 	.word	0x08007259
 80072b0:	080073dd 	.word	0x080073dd
 80072b4:	08007259 	.word	0x08007259
 80072b8:	08007259 	.word	0x08007259
 80072bc:	08007259 	.word	0x08007259
 80072c0:	08007259 	.word	0x08007259
 80072c4:	08007395 	.word	0x08007395
 80072c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80072cc:	e7db      	b.n	8007286 <_scanf_float+0x8e>
 80072ce:	290e      	cmp	r1, #14
 80072d0:	d8c2      	bhi.n	8007258 <_scanf_float+0x60>
 80072d2:	a001      	add	r0, pc, #4	; (adr r0, 80072d8 <_scanf_float+0xe0>)
 80072d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072d8:	08007387 	.word	0x08007387
 80072dc:	08007259 	.word	0x08007259
 80072e0:	08007387 	.word	0x08007387
 80072e4:	0800741b 	.word	0x0800741b
 80072e8:	08007259 	.word	0x08007259
 80072ec:	08007335 	.word	0x08007335
 80072f0:	08007371 	.word	0x08007371
 80072f4:	08007371 	.word	0x08007371
 80072f8:	08007371 	.word	0x08007371
 80072fc:	08007371 	.word	0x08007371
 8007300:	08007371 	.word	0x08007371
 8007304:	08007371 	.word	0x08007371
 8007308:	08007371 	.word	0x08007371
 800730c:	08007371 	.word	0x08007371
 8007310:	08007371 	.word	0x08007371
 8007314:	2b6e      	cmp	r3, #110	; 0x6e
 8007316:	d809      	bhi.n	800732c <_scanf_float+0x134>
 8007318:	2b60      	cmp	r3, #96	; 0x60
 800731a:	d8b2      	bhi.n	8007282 <_scanf_float+0x8a>
 800731c:	2b54      	cmp	r3, #84	; 0x54
 800731e:	d077      	beq.n	8007410 <_scanf_float+0x218>
 8007320:	2b59      	cmp	r3, #89	; 0x59
 8007322:	d199      	bne.n	8007258 <_scanf_float+0x60>
 8007324:	2d07      	cmp	r5, #7
 8007326:	d197      	bne.n	8007258 <_scanf_float+0x60>
 8007328:	2508      	movs	r5, #8
 800732a:	e029      	b.n	8007380 <_scanf_float+0x188>
 800732c:	2b74      	cmp	r3, #116	; 0x74
 800732e:	d06f      	beq.n	8007410 <_scanf_float+0x218>
 8007330:	2b79      	cmp	r3, #121	; 0x79
 8007332:	e7f6      	b.n	8007322 <_scanf_float+0x12a>
 8007334:	6821      	ldr	r1, [r4, #0]
 8007336:	05c8      	lsls	r0, r1, #23
 8007338:	d51a      	bpl.n	8007370 <_scanf_float+0x178>
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007340:	6021      	str	r1, [r4, #0]
 8007342:	f109 0901 	add.w	r9, r9, #1
 8007346:	b11b      	cbz	r3, 8007350 <_scanf_float+0x158>
 8007348:	3b01      	subs	r3, #1
 800734a:	3201      	adds	r2, #1
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	60a2      	str	r2, [r4, #8]
 8007350:	68a3      	ldr	r3, [r4, #8]
 8007352:	3b01      	subs	r3, #1
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	3301      	adds	r3, #1
 800735a:	6123      	str	r3, [r4, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3b01      	subs	r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	f340 8084 	ble.w	8007470 <_scanf_float+0x278>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	e766      	b.n	800723e <_scanf_float+0x46>
 8007370:	eb1a 0f05 	cmn.w	sl, r5
 8007374:	f47f af70 	bne.w	8007258 <_scanf_float+0x60>
 8007378:	6822      	ldr	r2, [r4, #0]
 800737a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800737e:	6022      	str	r2, [r4, #0]
 8007380:	f806 3b01 	strb.w	r3, [r6], #1
 8007384:	e7e4      	b.n	8007350 <_scanf_float+0x158>
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	0610      	lsls	r0, r2, #24
 800738a:	f57f af65 	bpl.w	8007258 <_scanf_float+0x60>
 800738e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007392:	e7f4      	b.n	800737e <_scanf_float+0x186>
 8007394:	f1ba 0f00 	cmp.w	sl, #0
 8007398:	d10e      	bne.n	80073b8 <_scanf_float+0x1c0>
 800739a:	f1b9 0f00 	cmp.w	r9, #0
 800739e:	d10e      	bne.n	80073be <_scanf_float+0x1c6>
 80073a0:	6822      	ldr	r2, [r4, #0]
 80073a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80073a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80073aa:	d108      	bne.n	80073be <_scanf_float+0x1c6>
 80073ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073b0:	6022      	str	r2, [r4, #0]
 80073b2:	f04f 0a01 	mov.w	sl, #1
 80073b6:	e7e3      	b.n	8007380 <_scanf_float+0x188>
 80073b8:	f1ba 0f02 	cmp.w	sl, #2
 80073bc:	d055      	beq.n	800746a <_scanf_float+0x272>
 80073be:	2d01      	cmp	r5, #1
 80073c0:	d002      	beq.n	80073c8 <_scanf_float+0x1d0>
 80073c2:	2d04      	cmp	r5, #4
 80073c4:	f47f af48 	bne.w	8007258 <_scanf_float+0x60>
 80073c8:	3501      	adds	r5, #1
 80073ca:	b2ed      	uxtb	r5, r5
 80073cc:	e7d8      	b.n	8007380 <_scanf_float+0x188>
 80073ce:	f1ba 0f01 	cmp.w	sl, #1
 80073d2:	f47f af41 	bne.w	8007258 <_scanf_float+0x60>
 80073d6:	f04f 0a02 	mov.w	sl, #2
 80073da:	e7d1      	b.n	8007380 <_scanf_float+0x188>
 80073dc:	b97d      	cbnz	r5, 80073fe <_scanf_float+0x206>
 80073de:	f1b9 0f00 	cmp.w	r9, #0
 80073e2:	f47f af3c 	bne.w	800725e <_scanf_float+0x66>
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80073ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80073f0:	f47f af39 	bne.w	8007266 <_scanf_float+0x6e>
 80073f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073f8:	6022      	str	r2, [r4, #0]
 80073fa:	2501      	movs	r5, #1
 80073fc:	e7c0      	b.n	8007380 <_scanf_float+0x188>
 80073fe:	2d03      	cmp	r5, #3
 8007400:	d0e2      	beq.n	80073c8 <_scanf_float+0x1d0>
 8007402:	2d05      	cmp	r5, #5
 8007404:	e7de      	b.n	80073c4 <_scanf_float+0x1cc>
 8007406:	2d02      	cmp	r5, #2
 8007408:	f47f af26 	bne.w	8007258 <_scanf_float+0x60>
 800740c:	2503      	movs	r5, #3
 800740e:	e7b7      	b.n	8007380 <_scanf_float+0x188>
 8007410:	2d06      	cmp	r5, #6
 8007412:	f47f af21 	bne.w	8007258 <_scanf_float+0x60>
 8007416:	2507      	movs	r5, #7
 8007418:	e7b2      	b.n	8007380 <_scanf_float+0x188>
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	0591      	lsls	r1, r2, #22
 800741e:	f57f af1b 	bpl.w	8007258 <_scanf_float+0x60>
 8007422:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	f8cd 9004 	str.w	r9, [sp, #4]
 800742c:	e7a8      	b.n	8007380 <_scanf_float+0x188>
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007434:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007438:	d006      	beq.n	8007448 <_scanf_float+0x250>
 800743a:	0550      	lsls	r0, r2, #21
 800743c:	f57f af0c 	bpl.w	8007258 <_scanf_float+0x60>
 8007440:	f1b9 0f00 	cmp.w	r9, #0
 8007444:	f43f af0f 	beq.w	8007266 <_scanf_float+0x6e>
 8007448:	0591      	lsls	r1, r2, #22
 800744a:	bf58      	it	pl
 800744c:	9901      	ldrpl	r1, [sp, #4]
 800744e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007452:	bf58      	it	pl
 8007454:	eba9 0101 	subpl.w	r1, r9, r1
 8007458:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800745c:	bf58      	it	pl
 800745e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007462:	6022      	str	r2, [r4, #0]
 8007464:	f04f 0900 	mov.w	r9, #0
 8007468:	e78a      	b.n	8007380 <_scanf_float+0x188>
 800746a:	f04f 0a03 	mov.w	sl, #3
 800746e:	e787      	b.n	8007380 <_scanf_float+0x188>
 8007470:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007474:	4639      	mov	r1, r7
 8007476:	4640      	mov	r0, r8
 8007478:	4798      	blx	r3
 800747a:	2800      	cmp	r0, #0
 800747c:	f43f aedf 	beq.w	800723e <_scanf_float+0x46>
 8007480:	e6ea      	b.n	8007258 <_scanf_float+0x60>
 8007482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800748a:	463a      	mov	r2, r7
 800748c:	4640      	mov	r0, r8
 800748e:	4798      	blx	r3
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	3b01      	subs	r3, #1
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	e6ec      	b.n	8007272 <_scanf_float+0x7a>
 8007498:	1e6b      	subs	r3, r5, #1
 800749a:	2b06      	cmp	r3, #6
 800749c:	d825      	bhi.n	80074ea <_scanf_float+0x2f2>
 800749e:	2d02      	cmp	r5, #2
 80074a0:	d836      	bhi.n	8007510 <_scanf_float+0x318>
 80074a2:	455e      	cmp	r6, fp
 80074a4:	f67f aee8 	bls.w	8007278 <_scanf_float+0x80>
 80074a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074b0:	463a      	mov	r2, r7
 80074b2:	4640      	mov	r0, r8
 80074b4:	4798      	blx	r3
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	e7f1      	b.n	80074a2 <_scanf_float+0x2aa>
 80074be:	9802      	ldr	r0, [sp, #8]
 80074c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80074c8:	9002      	str	r0, [sp, #8]
 80074ca:	463a      	mov	r2, r7
 80074cc:	4640      	mov	r0, r8
 80074ce:	4798      	blx	r3
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074da:	fa5f fa8a 	uxtb.w	sl, sl
 80074de:	f1ba 0f02 	cmp.w	sl, #2
 80074e2:	d1ec      	bne.n	80074be <_scanf_float+0x2c6>
 80074e4:	3d03      	subs	r5, #3
 80074e6:	b2ed      	uxtb	r5, r5
 80074e8:	1b76      	subs	r6, r6, r5
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	05da      	lsls	r2, r3, #23
 80074ee:	d52f      	bpl.n	8007550 <_scanf_float+0x358>
 80074f0:	055b      	lsls	r3, r3, #21
 80074f2:	d510      	bpl.n	8007516 <_scanf_float+0x31e>
 80074f4:	455e      	cmp	r6, fp
 80074f6:	f67f aebf 	bls.w	8007278 <_scanf_float+0x80>
 80074fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007502:	463a      	mov	r2, r7
 8007504:	4640      	mov	r0, r8
 8007506:	4798      	blx	r3
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	3b01      	subs	r3, #1
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	e7f1      	b.n	80074f4 <_scanf_float+0x2fc>
 8007510:	46aa      	mov	sl, r5
 8007512:	9602      	str	r6, [sp, #8]
 8007514:	e7df      	b.n	80074d6 <_scanf_float+0x2de>
 8007516:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	2965      	cmp	r1, #101	; 0x65
 800751e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007522:	f106 35ff 	add.w	r5, r6, #4294967295
 8007526:	6123      	str	r3, [r4, #16]
 8007528:	d00c      	beq.n	8007544 <_scanf_float+0x34c>
 800752a:	2945      	cmp	r1, #69	; 0x45
 800752c:	d00a      	beq.n	8007544 <_scanf_float+0x34c>
 800752e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007532:	463a      	mov	r2, r7
 8007534:	4640      	mov	r0, r8
 8007536:	4798      	blx	r3
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800753e:	3b01      	subs	r3, #1
 8007540:	1eb5      	subs	r5, r6, #2
 8007542:	6123      	str	r3, [r4, #16]
 8007544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007548:	463a      	mov	r2, r7
 800754a:	4640      	mov	r0, r8
 800754c:	4798      	blx	r3
 800754e:	462e      	mov	r6, r5
 8007550:	6825      	ldr	r5, [r4, #0]
 8007552:	f015 0510 	ands.w	r5, r5, #16
 8007556:	d158      	bne.n	800760a <_scanf_float+0x412>
 8007558:	7035      	strb	r5, [r6, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007564:	d11c      	bne.n	80075a0 <_scanf_float+0x3a8>
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	454b      	cmp	r3, r9
 800756a:	eba3 0209 	sub.w	r2, r3, r9
 800756e:	d124      	bne.n	80075ba <_scanf_float+0x3c2>
 8007570:	2200      	movs	r2, #0
 8007572:	4659      	mov	r1, fp
 8007574:	4640      	mov	r0, r8
 8007576:	f002 fd3b 	bl	8009ff0 <_strtod_r>
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	6821      	ldr	r1, [r4, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f011 0f02 	tst.w	r1, #2
 8007584:	ec57 6b10 	vmov	r6, r7, d0
 8007588:	f103 0204 	add.w	r2, r3, #4
 800758c:	d020      	beq.n	80075d0 <_scanf_float+0x3d8>
 800758e:	9903      	ldr	r1, [sp, #12]
 8007590:	600a      	str	r2, [r1, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	e9c3 6700 	strd	r6, r7, [r3]
 8007598:	68e3      	ldr	r3, [r4, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60e3      	str	r3, [r4, #12]
 800759e:	e66c      	b.n	800727a <_scanf_float+0x82>
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0e4      	beq.n	8007570 <_scanf_float+0x378>
 80075a6:	9905      	ldr	r1, [sp, #20]
 80075a8:	230a      	movs	r3, #10
 80075aa:	462a      	mov	r2, r5
 80075ac:	3101      	adds	r1, #1
 80075ae:	4640      	mov	r0, r8
 80075b0:	f002 fda6 	bl	800a100 <_strtol_r>
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	9e05      	ldr	r6, [sp, #20]
 80075b8:	1ac2      	subs	r2, r0, r3
 80075ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80075be:	429e      	cmp	r6, r3
 80075c0:	bf28      	it	cs
 80075c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80075c6:	4912      	ldr	r1, [pc, #72]	; (8007610 <_scanf_float+0x418>)
 80075c8:	4630      	mov	r0, r6
 80075ca:	f000 f95d 	bl	8007888 <siprintf>
 80075ce:	e7cf      	b.n	8007570 <_scanf_float+0x378>
 80075d0:	f011 0f04 	tst.w	r1, #4
 80075d4:	9903      	ldr	r1, [sp, #12]
 80075d6:	600a      	str	r2, [r1, #0]
 80075d8:	d1db      	bne.n	8007592 <_scanf_float+0x39a>
 80075da:	f8d3 8000 	ldr.w	r8, [r3]
 80075de:	ee10 2a10 	vmov	r2, s0
 80075e2:	ee10 0a10 	vmov	r0, s0
 80075e6:	463b      	mov	r3, r7
 80075e8:	4639      	mov	r1, r7
 80075ea:	f7f9 fac7 	bl	8000b7c <__aeabi_dcmpun>
 80075ee:	b128      	cbz	r0, 80075fc <_scanf_float+0x404>
 80075f0:	4808      	ldr	r0, [pc, #32]	; (8007614 <_scanf_float+0x41c>)
 80075f2:	f000 fac1 	bl	8007b78 <nanf>
 80075f6:	ed88 0a00 	vstr	s0, [r8]
 80075fa:	e7cd      	b.n	8007598 <_scanf_float+0x3a0>
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f9 fb1a 	bl	8000c38 <__aeabi_d2f>
 8007604:	f8c8 0000 	str.w	r0, [r8]
 8007608:	e7c6      	b.n	8007598 <_scanf_float+0x3a0>
 800760a:	2500      	movs	r5, #0
 800760c:	e635      	b.n	800727a <_scanf_float+0x82>
 800760e:	bf00      	nop
 8007610:	0800d5e4 	.word	0x0800d5e4
 8007614:	0800d975 	.word	0x0800d975

08007618 <std>:
 8007618:	2300      	movs	r3, #0
 800761a:	b510      	push	{r4, lr}
 800761c:	4604      	mov	r4, r0
 800761e:	e9c0 3300 	strd	r3, r3, [r0]
 8007622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007626:	6083      	str	r3, [r0, #8]
 8007628:	8181      	strh	r1, [r0, #12]
 800762a:	6643      	str	r3, [r0, #100]	; 0x64
 800762c:	81c2      	strh	r2, [r0, #14]
 800762e:	6183      	str	r3, [r0, #24]
 8007630:	4619      	mov	r1, r3
 8007632:	2208      	movs	r2, #8
 8007634:	305c      	adds	r0, #92	; 0x5c
 8007636:	f000 fa1f 	bl	8007a78 <memset>
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <std+0x58>)
 800763c:	6263      	str	r3, [r4, #36]	; 0x24
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <std+0x5c>)
 8007640:	62a3      	str	r3, [r4, #40]	; 0x28
 8007642:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <std+0x60>)
 8007644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <std+0x64>)
 8007648:	6323      	str	r3, [r4, #48]	; 0x30
 800764a:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <std+0x68>)
 800764c:	6224      	str	r4, [r4, #32]
 800764e:	429c      	cmp	r4, r3
 8007650:	d006      	beq.n	8007660 <std+0x48>
 8007652:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007656:	4294      	cmp	r4, r2
 8007658:	d002      	beq.n	8007660 <std+0x48>
 800765a:	33d0      	adds	r3, #208	; 0xd0
 800765c:	429c      	cmp	r4, r3
 800765e:	d105      	bne.n	800766c <std+0x54>
 8007660:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007668:	f000 ba82 	b.w	8007b70 <__retarget_lock_init_recursive>
 800766c:	bd10      	pop	{r4, pc}
 800766e:	bf00      	nop
 8007670:	080078c9 	.word	0x080078c9
 8007674:	080078eb 	.word	0x080078eb
 8007678:	08007923 	.word	0x08007923
 800767c:	08007947 	.word	0x08007947
 8007680:	2000087c 	.word	0x2000087c

08007684 <stdio_exit_handler>:
 8007684:	4a02      	ldr	r2, [pc, #8]	; (8007690 <stdio_exit_handler+0xc>)
 8007686:	4903      	ldr	r1, [pc, #12]	; (8007694 <stdio_exit_handler+0x10>)
 8007688:	4803      	ldr	r0, [pc, #12]	; (8007698 <stdio_exit_handler+0x14>)
 800768a:	f000 b869 	b.w	8007760 <_fwalk_sglue>
 800768e:	bf00      	nop
 8007690:	20000014 	.word	0x20000014
 8007694:	0800a749 	.word	0x0800a749
 8007698:	20000020 	.word	0x20000020

0800769c <cleanup_stdio>:
 800769c:	6841      	ldr	r1, [r0, #4]
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <cleanup_stdio+0x34>)
 80076a0:	4299      	cmp	r1, r3
 80076a2:	b510      	push	{r4, lr}
 80076a4:	4604      	mov	r4, r0
 80076a6:	d001      	beq.n	80076ac <cleanup_stdio+0x10>
 80076a8:	f003 f84e 	bl	800a748 <_fflush_r>
 80076ac:	68a1      	ldr	r1, [r4, #8]
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <cleanup_stdio+0x38>)
 80076b0:	4299      	cmp	r1, r3
 80076b2:	d002      	beq.n	80076ba <cleanup_stdio+0x1e>
 80076b4:	4620      	mov	r0, r4
 80076b6:	f003 f847 	bl	800a748 <_fflush_r>
 80076ba:	68e1      	ldr	r1, [r4, #12]
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <cleanup_stdio+0x3c>)
 80076be:	4299      	cmp	r1, r3
 80076c0:	d004      	beq.n	80076cc <cleanup_stdio+0x30>
 80076c2:	4620      	mov	r0, r4
 80076c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c8:	f003 b83e 	b.w	800a748 <_fflush_r>
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	bf00      	nop
 80076d0:	2000087c 	.word	0x2000087c
 80076d4:	200008e4 	.word	0x200008e4
 80076d8:	2000094c 	.word	0x2000094c

080076dc <global_stdio_init.part.0>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4b0b      	ldr	r3, [pc, #44]	; (800770c <global_stdio_init.part.0+0x30>)
 80076e0:	4c0b      	ldr	r4, [pc, #44]	; (8007710 <global_stdio_init.part.0+0x34>)
 80076e2:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <global_stdio_init.part.0+0x38>)
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	4620      	mov	r0, r4
 80076e8:	2200      	movs	r2, #0
 80076ea:	2104      	movs	r1, #4
 80076ec:	f7ff ff94 	bl	8007618 <std>
 80076f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076f4:	2201      	movs	r2, #1
 80076f6:	2109      	movs	r1, #9
 80076f8:	f7ff ff8e 	bl	8007618 <std>
 80076fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007700:	2202      	movs	r2, #2
 8007702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007706:	2112      	movs	r1, #18
 8007708:	f7ff bf86 	b.w	8007618 <std>
 800770c:	200009b4 	.word	0x200009b4
 8007710:	2000087c 	.word	0x2000087c
 8007714:	08007685 	.word	0x08007685

08007718 <__sfp_lock_acquire>:
 8007718:	4801      	ldr	r0, [pc, #4]	; (8007720 <__sfp_lock_acquire+0x8>)
 800771a:	f000 ba2a 	b.w	8007b72 <__retarget_lock_acquire_recursive>
 800771e:	bf00      	nop
 8007720:	200009bd 	.word	0x200009bd

08007724 <__sfp_lock_release>:
 8007724:	4801      	ldr	r0, [pc, #4]	; (800772c <__sfp_lock_release+0x8>)
 8007726:	f000 ba25 	b.w	8007b74 <__retarget_lock_release_recursive>
 800772a:	bf00      	nop
 800772c:	200009bd 	.word	0x200009bd

08007730 <__sinit>:
 8007730:	b510      	push	{r4, lr}
 8007732:	4604      	mov	r4, r0
 8007734:	f7ff fff0 	bl	8007718 <__sfp_lock_acquire>
 8007738:	6a23      	ldr	r3, [r4, #32]
 800773a:	b11b      	cbz	r3, 8007744 <__sinit+0x14>
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	f7ff bff0 	b.w	8007724 <__sfp_lock_release>
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <__sinit+0x28>)
 8007746:	6223      	str	r3, [r4, #32]
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <__sinit+0x2c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f5      	bne.n	800773c <__sinit+0xc>
 8007750:	f7ff ffc4 	bl	80076dc <global_stdio_init.part.0>
 8007754:	e7f2      	b.n	800773c <__sinit+0xc>
 8007756:	bf00      	nop
 8007758:	0800769d 	.word	0x0800769d
 800775c:	200009b4 	.word	0x200009b4

08007760 <_fwalk_sglue>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	4607      	mov	r7, r0
 8007766:	4688      	mov	r8, r1
 8007768:	4614      	mov	r4, r2
 800776a:	2600      	movs	r6, #0
 800776c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007770:	f1b9 0901 	subs.w	r9, r9, #1
 8007774:	d505      	bpl.n	8007782 <_fwalk_sglue+0x22>
 8007776:	6824      	ldr	r4, [r4, #0]
 8007778:	2c00      	cmp	r4, #0
 800777a:	d1f7      	bne.n	800776c <_fwalk_sglue+0xc>
 800777c:	4630      	mov	r0, r6
 800777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d907      	bls.n	8007798 <_fwalk_sglue+0x38>
 8007788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800778c:	3301      	adds	r3, #1
 800778e:	d003      	beq.n	8007798 <_fwalk_sglue+0x38>
 8007790:	4629      	mov	r1, r5
 8007792:	4638      	mov	r0, r7
 8007794:	47c0      	blx	r8
 8007796:	4306      	orrs	r6, r0
 8007798:	3568      	adds	r5, #104	; 0x68
 800779a:	e7e9      	b.n	8007770 <_fwalk_sglue+0x10>

0800779c <iprintf>:
 800779c:	b40f      	push	{r0, r1, r2, r3}
 800779e:	b507      	push	{r0, r1, r2, lr}
 80077a0:	4906      	ldr	r1, [pc, #24]	; (80077bc <iprintf+0x20>)
 80077a2:	ab04      	add	r3, sp, #16
 80077a4:	6808      	ldr	r0, [r1, #0]
 80077a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077aa:	6881      	ldr	r1, [r0, #8]
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	f002 fe2b 	bl	800a408 <_vfiprintf_r>
 80077b2:	b003      	add	sp, #12
 80077b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b8:	b004      	add	sp, #16
 80077ba:	4770      	bx	lr
 80077bc:	2000006c 	.word	0x2000006c

080077c0 <putchar>:
 80077c0:	4b02      	ldr	r3, [pc, #8]	; (80077cc <putchar+0xc>)
 80077c2:	4601      	mov	r1, r0
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	6882      	ldr	r2, [r0, #8]
 80077c8:	f003 b848 	b.w	800a85c <_putc_r>
 80077cc:	2000006c 	.word	0x2000006c

080077d0 <_puts_r>:
 80077d0:	6a03      	ldr	r3, [r0, #32]
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	6884      	ldr	r4, [r0, #8]
 80077d6:	4605      	mov	r5, r0
 80077d8:	460e      	mov	r6, r1
 80077da:	b90b      	cbnz	r3, 80077e0 <_puts_r+0x10>
 80077dc:	f7ff ffa8 	bl	8007730 <__sinit>
 80077e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d405      	bmi.n	80077f2 <_puts_r+0x22>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	0598      	lsls	r0, r3, #22
 80077ea:	d402      	bmi.n	80077f2 <_puts_r+0x22>
 80077ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ee:	f000 f9c0 	bl	8007b72 <__retarget_lock_acquire_recursive>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	0719      	lsls	r1, r3, #28
 80077f6:	d513      	bpl.n	8007820 <_puts_r+0x50>
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	b18b      	cbz	r3, 8007820 <_puts_r+0x50>
 80077fc:	3e01      	subs	r6, #1
 80077fe:	68a3      	ldr	r3, [r4, #8]
 8007800:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007804:	3b01      	subs	r3, #1
 8007806:	60a3      	str	r3, [r4, #8]
 8007808:	b9e9      	cbnz	r1, 8007846 <_puts_r+0x76>
 800780a:	2b00      	cmp	r3, #0
 800780c:	da2e      	bge.n	800786c <_puts_r+0x9c>
 800780e:	4622      	mov	r2, r4
 8007810:	210a      	movs	r1, #10
 8007812:	4628      	mov	r0, r5
 8007814:	f000 f89b 	bl	800794e <__swbuf_r>
 8007818:	3001      	adds	r0, #1
 800781a:	d007      	beq.n	800782c <_puts_r+0x5c>
 800781c:	250a      	movs	r5, #10
 800781e:	e007      	b.n	8007830 <_puts_r+0x60>
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f8d0 	bl	80079c8 <__swsetup_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	d0e7      	beq.n	80077fc <_puts_r+0x2c>
 800782c:	f04f 35ff 	mov.w	r5, #4294967295
 8007830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007832:	07da      	lsls	r2, r3, #31
 8007834:	d405      	bmi.n	8007842 <_puts_r+0x72>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	059b      	lsls	r3, r3, #22
 800783a:	d402      	bmi.n	8007842 <_puts_r+0x72>
 800783c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783e:	f000 f999 	bl	8007b74 <__retarget_lock_release_recursive>
 8007842:	4628      	mov	r0, r5
 8007844:	bd70      	pop	{r4, r5, r6, pc}
 8007846:	2b00      	cmp	r3, #0
 8007848:	da04      	bge.n	8007854 <_puts_r+0x84>
 800784a:	69a2      	ldr	r2, [r4, #24]
 800784c:	429a      	cmp	r2, r3
 800784e:	dc06      	bgt.n	800785e <_puts_r+0x8e>
 8007850:	290a      	cmp	r1, #10
 8007852:	d004      	beq.n	800785e <_puts_r+0x8e>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	6022      	str	r2, [r4, #0]
 800785a:	7019      	strb	r1, [r3, #0]
 800785c:	e7cf      	b.n	80077fe <_puts_r+0x2e>
 800785e:	4622      	mov	r2, r4
 8007860:	4628      	mov	r0, r5
 8007862:	f000 f874 	bl	800794e <__swbuf_r>
 8007866:	3001      	adds	r0, #1
 8007868:	d1c9      	bne.n	80077fe <_puts_r+0x2e>
 800786a:	e7df      	b.n	800782c <_puts_r+0x5c>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	250a      	movs	r5, #10
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	6022      	str	r2, [r4, #0]
 8007874:	701d      	strb	r5, [r3, #0]
 8007876:	e7db      	b.n	8007830 <_puts_r+0x60>

08007878 <puts>:
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <puts+0xc>)
 800787a:	4601      	mov	r1, r0
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	f7ff bfa7 	b.w	80077d0 <_puts_r>
 8007882:	bf00      	nop
 8007884:	2000006c 	.word	0x2000006c

08007888 <siprintf>:
 8007888:	b40e      	push	{r1, r2, r3}
 800788a:	b500      	push	{lr}
 800788c:	b09c      	sub	sp, #112	; 0x70
 800788e:	ab1d      	add	r3, sp, #116	; 0x74
 8007890:	9002      	str	r0, [sp, #8]
 8007892:	9006      	str	r0, [sp, #24]
 8007894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007898:	4809      	ldr	r0, [pc, #36]	; (80078c0 <siprintf+0x38>)
 800789a:	9107      	str	r1, [sp, #28]
 800789c:	9104      	str	r1, [sp, #16]
 800789e:	4909      	ldr	r1, [pc, #36]	; (80078c4 <siprintf+0x3c>)
 80078a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a4:	9105      	str	r1, [sp, #20]
 80078a6:	6800      	ldr	r0, [r0, #0]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	a902      	add	r1, sp, #8
 80078ac:	f002 fc84 	bl	800a1b8 <_svfiprintf_r>
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	b01c      	add	sp, #112	; 0x70
 80078b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078bc:	b003      	add	sp, #12
 80078be:	4770      	bx	lr
 80078c0:	2000006c 	.word	0x2000006c
 80078c4:	ffff0208 	.word	0xffff0208

080078c8 <__sread>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	460c      	mov	r4, r1
 80078cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d0:	f000 f900 	bl	8007ad4 <_read_r>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	bfab      	itete	ge
 80078d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078da:	89a3      	ldrhlt	r3, [r4, #12]
 80078dc:	181b      	addge	r3, r3, r0
 80078de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078e2:	bfac      	ite	ge
 80078e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078e6:	81a3      	strhlt	r3, [r4, #12]
 80078e8:	bd10      	pop	{r4, pc}

080078ea <__swrite>:
 80078ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ee:	461f      	mov	r7, r3
 80078f0:	898b      	ldrh	r3, [r1, #12]
 80078f2:	05db      	lsls	r3, r3, #23
 80078f4:	4605      	mov	r5, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	4616      	mov	r6, r2
 80078fa:	d505      	bpl.n	8007908 <__swrite+0x1e>
 80078fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007900:	2302      	movs	r3, #2
 8007902:	2200      	movs	r2, #0
 8007904:	f000 f8d4 	bl	8007ab0 <_lseek_r>
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800790e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	4632      	mov	r2, r6
 8007916:	463b      	mov	r3, r7
 8007918:	4628      	mov	r0, r5
 800791a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800791e:	f000 b8eb 	b.w	8007af8 <_write_r>

08007922 <__sseek>:
 8007922:	b510      	push	{r4, lr}
 8007924:	460c      	mov	r4, r1
 8007926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792a:	f000 f8c1 	bl	8007ab0 <_lseek_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	bf15      	itete	ne
 8007934:	6560      	strne	r0, [r4, #84]	; 0x54
 8007936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800793a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800793e:	81a3      	strheq	r3, [r4, #12]
 8007940:	bf18      	it	ne
 8007942:	81a3      	strhne	r3, [r4, #12]
 8007944:	bd10      	pop	{r4, pc}

08007946 <__sclose>:
 8007946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794a:	f000 b8a1 	b.w	8007a90 <_close_r>

0800794e <__swbuf_r>:
 800794e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007950:	460e      	mov	r6, r1
 8007952:	4614      	mov	r4, r2
 8007954:	4605      	mov	r5, r0
 8007956:	b118      	cbz	r0, 8007960 <__swbuf_r+0x12>
 8007958:	6a03      	ldr	r3, [r0, #32]
 800795a:	b90b      	cbnz	r3, 8007960 <__swbuf_r+0x12>
 800795c:	f7ff fee8 	bl	8007730 <__sinit>
 8007960:	69a3      	ldr	r3, [r4, #24]
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	071a      	lsls	r2, r3, #28
 8007968:	d525      	bpl.n	80079b6 <__swbuf_r+0x68>
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	b31b      	cbz	r3, 80079b6 <__swbuf_r+0x68>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	1a98      	subs	r0, r3, r2
 8007974:	6963      	ldr	r3, [r4, #20]
 8007976:	b2f6      	uxtb	r6, r6
 8007978:	4283      	cmp	r3, r0
 800797a:	4637      	mov	r7, r6
 800797c:	dc04      	bgt.n	8007988 <__swbuf_r+0x3a>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f002 fee1 	bl	800a748 <_fflush_r>
 8007986:	b9e0      	cbnz	r0, 80079c2 <__swbuf_r+0x74>
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	3b01      	subs	r3, #1
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	6022      	str	r2, [r4, #0]
 8007994:	701e      	strb	r6, [r3, #0]
 8007996:	6962      	ldr	r2, [r4, #20]
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	429a      	cmp	r2, r3
 800799c:	d004      	beq.n	80079a8 <__swbuf_r+0x5a>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	07db      	lsls	r3, r3, #31
 80079a2:	d506      	bpl.n	80079b2 <__swbuf_r+0x64>
 80079a4:	2e0a      	cmp	r6, #10
 80079a6:	d104      	bne.n	80079b2 <__swbuf_r+0x64>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f002 fecc 	bl	800a748 <_fflush_r>
 80079b0:	b938      	cbnz	r0, 80079c2 <__swbuf_r+0x74>
 80079b2:	4638      	mov	r0, r7
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b6:	4621      	mov	r1, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	f000 f805 	bl	80079c8 <__swsetup_r>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d0d5      	beq.n	800796e <__swbuf_r+0x20>
 80079c2:	f04f 37ff 	mov.w	r7, #4294967295
 80079c6:	e7f4      	b.n	80079b2 <__swbuf_r+0x64>

080079c8 <__swsetup_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4b2a      	ldr	r3, [pc, #168]	; (8007a74 <__swsetup_r+0xac>)
 80079cc:	4605      	mov	r5, r0
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	460c      	mov	r4, r1
 80079d2:	b118      	cbz	r0, 80079dc <__swsetup_r+0x14>
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b90b      	cbnz	r3, 80079dc <__swsetup_r+0x14>
 80079d8:	f7ff feaa 	bl	8007730 <__sinit>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e2:	0718      	lsls	r0, r3, #28
 80079e4:	d422      	bmi.n	8007a2c <__swsetup_r+0x64>
 80079e6:	06d9      	lsls	r1, r3, #27
 80079e8:	d407      	bmi.n	80079fa <__swsetup_r+0x32>
 80079ea:	2309      	movs	r3, #9
 80079ec:	602b      	str	r3, [r5, #0]
 80079ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e034      	b.n	8007a64 <__swsetup_r+0x9c>
 80079fa:	0758      	lsls	r0, r3, #29
 80079fc:	d512      	bpl.n	8007a24 <__swsetup_r+0x5c>
 80079fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a00:	b141      	cbz	r1, 8007a14 <__swsetup_r+0x4c>
 8007a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a06:	4299      	cmp	r1, r3
 8007a08:	d002      	beq.n	8007a10 <__swsetup_r+0x48>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 ff36 	bl	800887c <_free_r>
 8007a10:	2300      	movs	r3, #0
 8007a12:	6363      	str	r3, [r4, #52]	; 0x34
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	6923      	ldr	r3, [r4, #16]
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f043 0308 	orr.w	r3, r3, #8
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	b94b      	cbnz	r3, 8007a44 <__swsetup_r+0x7c>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3a:	d003      	beq.n	8007a44 <__swsetup_r+0x7c>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f002 fed0 	bl	800a7e4 <__smakebuf_r>
 8007a44:	89a0      	ldrh	r0, [r4, #12]
 8007a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a4a:	f010 0301 	ands.w	r3, r0, #1
 8007a4e:	d00a      	beq.n	8007a66 <__swsetup_r+0x9e>
 8007a50:	2300      	movs	r3, #0
 8007a52:	60a3      	str	r3, [r4, #8]
 8007a54:	6963      	ldr	r3, [r4, #20]
 8007a56:	425b      	negs	r3, r3
 8007a58:	61a3      	str	r3, [r4, #24]
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	b943      	cbnz	r3, 8007a70 <__swsetup_r+0xa8>
 8007a5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a62:	d1c4      	bne.n	80079ee <__swsetup_r+0x26>
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	0781      	lsls	r1, r0, #30
 8007a68:	bf58      	it	pl
 8007a6a:	6963      	ldrpl	r3, [r4, #20]
 8007a6c:	60a3      	str	r3, [r4, #8]
 8007a6e:	e7f4      	b.n	8007a5a <__swsetup_r+0x92>
 8007a70:	2000      	movs	r0, #0
 8007a72:	e7f7      	b.n	8007a64 <__swsetup_r+0x9c>
 8007a74:	2000006c 	.word	0x2000006c

08007a78 <memset>:
 8007a78:	4402      	add	r2, r0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d100      	bne.n	8007a82 <memset+0xa>
 8007a80:	4770      	bx	lr
 8007a82:	f803 1b01 	strb.w	r1, [r3], #1
 8007a86:	e7f9      	b.n	8007a7c <memset+0x4>

08007a88 <_localeconv_r>:
 8007a88:	4800      	ldr	r0, [pc, #0]	; (8007a8c <_localeconv_r+0x4>)
 8007a8a:	4770      	bx	lr
 8007a8c:	20000160 	.word	0x20000160

08007a90 <_close_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	; (8007aac <_close_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fb f92f 	bl	8002cfe <_close>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_close_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_close_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	200009b8 	.word	0x200009b8

08007ab0 <_lseek_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_lseek_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fb f944 	bl	8002d4c <_lseek>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_lseek_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_lseek_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	200009b8 	.word	0x200009b8

08007ad4 <_read_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d07      	ldr	r5, [pc, #28]	; (8007af4 <_read_r+0x20>)
 8007ad8:	4604      	mov	r4, r0
 8007ada:	4608      	mov	r0, r1
 8007adc:	4611      	mov	r1, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	602a      	str	r2, [r5, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f7fb f8d2 	bl	8002c8c <_read>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_read_r+0x1e>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_read_r+0x1e>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	200009b8 	.word	0x200009b8

08007af8 <_write_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d07      	ldr	r5, [pc, #28]	; (8007b18 <_write_r+0x20>)
 8007afc:	4604      	mov	r4, r0
 8007afe:	4608      	mov	r0, r1
 8007b00:	4611      	mov	r1, r2
 8007b02:	2200      	movs	r2, #0
 8007b04:	602a      	str	r2, [r5, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f7fb f8dd 	bl	8002cc6 <_write>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_write_r+0x1e>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_write_r+0x1e>
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	200009b8 	.word	0x200009b8

08007b1c <__errno>:
 8007b1c:	4b01      	ldr	r3, [pc, #4]	; (8007b24 <__errno+0x8>)
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000006c 	.word	0x2000006c

08007b28 <__libc_init_array>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4d0d      	ldr	r5, [pc, #52]	; (8007b60 <__libc_init_array+0x38>)
 8007b2c:	4c0d      	ldr	r4, [pc, #52]	; (8007b64 <__libc_init_array+0x3c>)
 8007b2e:	1b64      	subs	r4, r4, r5
 8007b30:	10a4      	asrs	r4, r4, #2
 8007b32:	2600      	movs	r6, #0
 8007b34:	42a6      	cmp	r6, r4
 8007b36:	d109      	bne.n	8007b4c <__libc_init_array+0x24>
 8007b38:	4d0b      	ldr	r5, [pc, #44]	; (8007b68 <__libc_init_array+0x40>)
 8007b3a:	4c0c      	ldr	r4, [pc, #48]	; (8007b6c <__libc_init_array+0x44>)
 8007b3c:	f004 fd4a 	bl	800c5d4 <_init>
 8007b40:	1b64      	subs	r4, r4, r5
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	2600      	movs	r6, #0
 8007b46:	42a6      	cmp	r6, r4
 8007b48:	d105      	bne.n	8007b56 <__libc_init_array+0x2e>
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b50:	4798      	blx	r3
 8007b52:	3601      	adds	r6, #1
 8007b54:	e7ee      	b.n	8007b34 <__libc_init_array+0xc>
 8007b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5a:	4798      	blx	r3
 8007b5c:	3601      	adds	r6, #1
 8007b5e:	e7f2      	b.n	8007b46 <__libc_init_array+0x1e>
 8007b60:	0800da80 	.word	0x0800da80
 8007b64:	0800da80 	.word	0x0800da80
 8007b68:	0800da80 	.word	0x0800da80
 8007b6c:	0800da84 	.word	0x0800da84

08007b70 <__retarget_lock_init_recursive>:
 8007b70:	4770      	bx	lr

08007b72 <__retarget_lock_acquire_recursive>:
 8007b72:	4770      	bx	lr

08007b74 <__retarget_lock_release_recursive>:
 8007b74:	4770      	bx	lr
	...

08007b78 <nanf>:
 8007b78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b80 <nanf+0x8>
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	7fc00000 	.word	0x7fc00000

08007b84 <quorem>:
 8007b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	6903      	ldr	r3, [r0, #16]
 8007b8a:	690c      	ldr	r4, [r1, #16]
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	4607      	mov	r7, r0
 8007b90:	db7e      	blt.n	8007c90 <quorem+0x10c>
 8007b92:	3c01      	subs	r4, #1
 8007b94:	f101 0814 	add.w	r8, r1, #20
 8007b98:	f100 0514 	add.w	r5, r0, #20
 8007b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007baa:	3301      	adds	r3, #1
 8007bac:	429a      	cmp	r2, r3
 8007bae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bba:	d331      	bcc.n	8007c20 <quorem+0x9c>
 8007bbc:	f04f 0e00 	mov.w	lr, #0
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	46ac      	mov	ip, r5
 8007bc4:	46f2      	mov	sl, lr
 8007bc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bca:	b293      	uxth	r3, r2
 8007bcc:	fb06 e303 	mla	r3, r6, r3, lr
 8007bd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bd4:	0c1a      	lsrs	r2, r3, #16
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	ebaa 0303 	sub.w	r3, sl, r3
 8007bdc:	f8dc a000 	ldr.w	sl, [ip]
 8007be0:	fa13 f38a 	uxtah	r3, r3, sl
 8007be4:	fb06 220e 	mla	r2, r6, lr, r2
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bf0:	b292      	uxth	r2, r2
 8007bf2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bfa:	f8bd 3000 	ldrh.w	r3, [sp]
 8007bfe:	4581      	cmp	r9, r0
 8007c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c04:	f84c 3b04 	str.w	r3, [ip], #4
 8007c08:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c0c:	d2db      	bcs.n	8007bc6 <quorem+0x42>
 8007c0e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c12:	b92b      	cbnz	r3, 8007c20 <quorem+0x9c>
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	3b04      	subs	r3, #4
 8007c18:	429d      	cmp	r5, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	d32c      	bcc.n	8007c78 <quorem+0xf4>
 8007c1e:	613c      	str	r4, [r7, #16]
 8007c20:	4638      	mov	r0, r7
 8007c22:	f001 f9f1 	bl	8009008 <__mcmp>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	db22      	blt.n	8007c70 <quorem+0xec>
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c34:	f8d1 c000 	ldr.w	ip, [r1]
 8007c38:	b293      	uxth	r3, r2
 8007c3a:	1ac3      	subs	r3, r0, r3
 8007c3c:	0c12      	lsrs	r2, r2, #16
 8007c3e:	fa13 f38c 	uxtah	r3, r3, ip
 8007c42:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c50:	45c1      	cmp	r9, r8
 8007c52:	f841 3b04 	str.w	r3, [r1], #4
 8007c56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c5a:	d2e9      	bcs.n	8007c30 <quorem+0xac>
 8007c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c64:	b922      	cbnz	r2, 8007c70 <quorem+0xec>
 8007c66:	3b04      	subs	r3, #4
 8007c68:	429d      	cmp	r5, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	d30a      	bcc.n	8007c84 <quorem+0x100>
 8007c6e:	613c      	str	r4, [r7, #16]
 8007c70:	4630      	mov	r0, r6
 8007c72:	b003      	add	sp, #12
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	3b04      	subs	r3, #4
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d1ce      	bne.n	8007c1e <quorem+0x9a>
 8007c80:	3c01      	subs	r4, #1
 8007c82:	e7c9      	b.n	8007c18 <quorem+0x94>
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	3b04      	subs	r3, #4
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	d1f0      	bne.n	8007c6e <quorem+0xea>
 8007c8c:	3c01      	subs	r4, #1
 8007c8e:	e7eb      	b.n	8007c68 <quorem+0xe4>
 8007c90:	2000      	movs	r0, #0
 8007c92:	e7ee      	b.n	8007c72 <quorem+0xee>
 8007c94:	0000      	movs	r0, r0
	...

08007c98 <_dtoa_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	ed2d 8b04 	vpush	{d8-d9}
 8007ca0:	69c5      	ldr	r5, [r0, #28]
 8007ca2:	b093      	sub	sp, #76	; 0x4c
 8007ca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ca8:	ec57 6b10 	vmov	r6, r7, d0
 8007cac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cb0:	9107      	str	r1, [sp, #28]
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8007cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007cb8:	b975      	cbnz	r5, 8007cd8 <_dtoa_r+0x40>
 8007cba:	2010      	movs	r0, #16
 8007cbc:	f000 fe2a 	bl	8008914 <malloc>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	61e0      	str	r0, [r4, #28]
 8007cc4:	b920      	cbnz	r0, 8007cd0 <_dtoa_r+0x38>
 8007cc6:	4bae      	ldr	r3, [pc, #696]	; (8007f80 <_dtoa_r+0x2e8>)
 8007cc8:	21ef      	movs	r1, #239	; 0xef
 8007cca:	48ae      	ldr	r0, [pc, #696]	; (8007f84 <_dtoa_r+0x2ec>)
 8007ccc:	f002 fe70 	bl	800a9b0 <__assert_func>
 8007cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cd4:	6005      	str	r5, [r0, #0]
 8007cd6:	60c5      	str	r5, [r0, #12]
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	b151      	cbz	r1, 8007cf4 <_dtoa_r+0x5c>
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	604a      	str	r2, [r1, #4]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4093      	lsls	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 ff07 	bl	8008afc <_Bfree>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	1e3b      	subs	r3, r7, #0
 8007cf6:	bfbb      	ittet	lt
 8007cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	9303      	strlt	r3, [sp, #12]
 8007cfe:	2300      	movge	r3, #0
 8007d00:	2201      	movlt	r2, #1
 8007d02:	bfac      	ite	ge
 8007d04:	f8c8 3000 	strge.w	r3, [r8]
 8007d08:	f8c8 2000 	strlt.w	r2, [r8]
 8007d0c:	4b9e      	ldr	r3, [pc, #632]	; (8007f88 <_dtoa_r+0x2f0>)
 8007d0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d12:	ea33 0308 	bics.w	r3, r3, r8
 8007d16:	d11b      	bne.n	8007d50 <_dtoa_r+0xb8>
 8007d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d24:	4333      	orrs	r3, r6
 8007d26:	f000 8593 	beq.w	8008850 <_dtoa_r+0xbb8>
 8007d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d2c:	b963      	cbnz	r3, 8007d48 <_dtoa_r+0xb0>
 8007d2e:	4b97      	ldr	r3, [pc, #604]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d30:	e027      	b.n	8007d82 <_dtoa_r+0xea>
 8007d32:	4b97      	ldr	r3, [pc, #604]	; (8007f90 <_dtoa_r+0x2f8>)
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	9800      	ldr	r0, [sp, #0]
 8007d3e:	b013      	add	sp, #76	; 0x4c
 8007d40:	ecbd 8b04 	vpop	{d8-d9}
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	4b90      	ldr	r3, [pc, #576]	; (8007f8c <_dtoa_r+0x2f4>)
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	3303      	adds	r3, #3
 8007d4e:	e7f3      	b.n	8007d38 <_dtoa_r+0xa0>
 8007d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	ec51 0b17 	vmov	r0, r1, d7
 8007d5a:	eeb0 8a47 	vmov.f32	s16, s14
 8007d5e:	eef0 8a67 	vmov.f32	s17, s15
 8007d62:	2300      	movs	r3, #0
 8007d64:	f7f8 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 8007d68:	4681      	mov	r9, r0
 8007d6a:	b160      	cbz	r0, 8007d86 <_dtoa_r+0xee>
 8007d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d6e:	2301      	movs	r3, #1
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 8568 	beq.w	800884a <_dtoa_r+0xbb2>
 8007d7a:	4b86      	ldr	r3, [pc, #536]	; (8007f94 <_dtoa_r+0x2fc>)
 8007d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	e7da      	b.n	8007d3c <_dtoa_r+0xa4>
 8007d86:	aa10      	add	r2, sp, #64	; 0x40
 8007d88:	a911      	add	r1, sp, #68	; 0x44
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d90:	eef0 0a68 	vmov.f32	s1, s17
 8007d94:	f001 fa4e 	bl	8009234 <__d2b>
 8007d98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	d07f      	beq.n	8007ea2 <_dtoa_r+0x20a>
 8007da2:	ee18 3a90 	vmov	r3, s17
 8007da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007daa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007dae:	ec51 0b18 	vmov	r0, r1, d8
 8007db2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b75      	ldr	r3, [pc, #468]	; (8007f98 <_dtoa_r+0x300>)
 8007dc4:	f7f8 fa88 	bl	80002d8 <__aeabi_dsub>
 8007dc8:	a367      	add	r3, pc, #412	; (adr r3, 8007f68 <_dtoa_r+0x2d0>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fc3b 	bl	8000648 <__aeabi_dmul>
 8007dd2:	a367      	add	r3, pc, #412	; (adr r3, 8007f70 <_dtoa_r+0x2d8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fa80 	bl	80002dc <__adddf3>
 8007ddc:	4606      	mov	r6, r0
 8007dde:	4628      	mov	r0, r5
 8007de0:	460f      	mov	r7, r1
 8007de2:	f7f8 fbc7 	bl	8000574 <__aeabi_i2d>
 8007de6:	a364      	add	r3, pc, #400	; (adr r3, 8007f78 <_dtoa_r+0x2e0>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fc2c 	bl	8000648 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fa70 	bl	80002dc <__adddf3>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	f7f8 fed2 	bl	8000ba8 <__aeabi_d2iz>
 8007e04:	2200      	movs	r2, #0
 8007e06:	4683      	mov	fp, r0
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fe8d 	bl	8000b2c <__aeabi_dcmplt>
 8007e12:	b148      	cbz	r0, 8007e28 <_dtoa_r+0x190>
 8007e14:	4658      	mov	r0, fp
 8007e16:	f7f8 fbad 	bl	8000574 <__aeabi_i2d>
 8007e1a:	4632      	mov	r2, r6
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	f7f8 fe7b 	bl	8000b18 <__aeabi_dcmpeq>
 8007e22:	b908      	cbnz	r0, 8007e28 <_dtoa_r+0x190>
 8007e24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e28:	f1bb 0f16 	cmp.w	fp, #22
 8007e2c:	d857      	bhi.n	8007ede <_dtoa_r+0x246>
 8007e2e:	4b5b      	ldr	r3, [pc, #364]	; (8007f9c <_dtoa_r+0x304>)
 8007e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	ec51 0b18 	vmov	r0, r1, d8
 8007e3c:	f7f8 fe76 	bl	8000b2c <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d04e      	beq.n	8007ee2 <_dtoa_r+0x24a>
 8007e44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e48:	2300      	movs	r3, #0
 8007e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e4e:	1b5b      	subs	r3, r3, r5
 8007e50:	1e5a      	subs	r2, r3, #1
 8007e52:	bf45      	ittet	mi
 8007e54:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e58:	9305      	strmi	r3, [sp, #20]
 8007e5a:	2300      	movpl	r3, #0
 8007e5c:	2300      	movmi	r3, #0
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	bf54      	ite	pl
 8007e62:	9305      	strpl	r3, [sp, #20]
 8007e64:	9306      	strmi	r3, [sp, #24]
 8007e66:	f1bb 0f00 	cmp.w	fp, #0
 8007e6a:	db3c      	blt.n	8007ee6 <_dtoa_r+0x24e>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007e72:	445b      	add	r3, fp
 8007e74:	9306      	str	r3, [sp, #24]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9308      	str	r3, [sp, #32]
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d868      	bhi.n	8007f52 <_dtoa_r+0x2ba>
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	bfc4      	itt	gt
 8007e84:	3b04      	subgt	r3, #4
 8007e86:	9307      	strgt	r3, [sp, #28]
 8007e88:	9b07      	ldr	r3, [sp, #28]
 8007e8a:	f1a3 0302 	sub.w	r3, r3, #2
 8007e8e:	bfcc      	ite	gt
 8007e90:	2500      	movgt	r5, #0
 8007e92:	2501      	movle	r5, #1
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	f200 8085 	bhi.w	8007fa4 <_dtoa_r+0x30c>
 8007e9a:	e8df f003 	tbb	[pc, r3]
 8007e9e:	3b2e      	.short	0x3b2e
 8007ea0:	5839      	.short	0x5839
 8007ea2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ea6:	441d      	add	r5, r3
 8007ea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	bfc1      	itttt	gt
 8007eb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007eb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007eb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007ebc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ec0:	bfd6      	itet	le
 8007ec2:	f1c3 0320 	rsble	r3, r3, #32
 8007ec6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007eca:	fa06 f003 	lslle.w	r0, r6, r3
 8007ece:	f7f8 fb41 	bl	8000554 <__aeabi_ui2d>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ed8:	3d01      	subs	r5, #1
 8007eda:	920e      	str	r2, [sp, #56]	; 0x38
 8007edc:	e76f      	b.n	8007dbe <_dtoa_r+0x126>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e7b3      	b.n	8007e4a <_dtoa_r+0x1b2>
 8007ee2:	900c      	str	r0, [sp, #48]	; 0x30
 8007ee4:	e7b2      	b.n	8007e4c <_dtoa_r+0x1b4>
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	eba3 030b 	sub.w	r3, r3, fp
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f1cb 0300 	rsb	r3, fp, #0
 8007ef2:	9308      	str	r3, [sp, #32]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ef8:	e7bf      	b.n	8007e7a <_dtoa_r+0x1e2>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dc52      	bgt.n	8007faa <_dtoa_r+0x312>
 8007f04:	2301      	movs	r3, #1
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f0e:	e00b      	b.n	8007f28 <_dtoa_r+0x290>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f3      	b.n	8007efc <_dtoa_r+0x264>
 8007f14:	2300      	movs	r3, #0
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	445b      	add	r3, fp
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	bfb8      	it	lt
 8007f26:	2301      	movlt	r3, #1
 8007f28:	69e0      	ldr	r0, [r4, #28]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	f102 0614 	add.w	r6, r2, #20
 8007f32:	429e      	cmp	r6, r3
 8007f34:	d93d      	bls.n	8007fb2 <_dtoa_r+0x31a>
 8007f36:	6041      	str	r1, [r0, #4]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fd9f 	bl	8008a7c <_Balloc>
 8007f3e:	9000      	str	r0, [sp, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d139      	bne.n	8007fb8 <_dtoa_r+0x320>
 8007f44:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <_dtoa_r+0x308>)
 8007f46:	4602      	mov	r2, r0
 8007f48:	f240 11af 	movw	r1, #431	; 0x1af
 8007f4c:	e6bd      	b.n	8007cca <_dtoa_r+0x32>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7e1      	b.n	8007f16 <_dtoa_r+0x27e>
 8007f52:	2501      	movs	r5, #1
 8007f54:	2300      	movs	r3, #0
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	9509      	str	r5, [sp, #36]	; 0x24
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	2200      	movs	r2, #0
 8007f64:	2312      	movs	r3, #18
 8007f66:	e7d1      	b.n	8007f0c <_dtoa_r+0x274>
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	0800d5f6 	.word	0x0800d5f6
 8007f84:	0800d60d 	.word	0x0800d60d
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	0800d5f2 	.word	0x0800d5f2
 8007f90:	0800d5e9 	.word	0x0800d5e9
 8007f94:	0800d5c1 	.word	0x0800d5c1
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	0800d6f8 	.word	0x0800d6f8
 8007fa0:	0800d665 	.word	0x0800d665
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	e7d7      	b.n	8007f5a <_dtoa_r+0x2c2>
 8007faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	e7ba      	b.n	8007f28 <_dtoa_r+0x290>
 8007fb2:	3101      	adds	r1, #1
 8007fb4:	0052      	lsls	r2, r2, #1
 8007fb6:	e7ba      	b.n	8007f2e <_dtoa_r+0x296>
 8007fb8:	69e3      	ldr	r3, [r4, #28]
 8007fba:	9a00      	ldr	r2, [sp, #0]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	2b0e      	cmp	r3, #14
 8007fc2:	f200 80a8 	bhi.w	8008116 <_dtoa_r+0x47e>
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	f000 80a5 	beq.w	8008116 <_dtoa_r+0x47e>
 8007fcc:	f1bb 0f00 	cmp.w	fp, #0
 8007fd0:	dd38      	ble.n	8008044 <_dtoa_r+0x3ac>
 8007fd2:	4bc0      	ldr	r3, [pc, #768]	; (80082d4 <_dtoa_r+0x63c>)
 8007fd4:	f00b 020f 	and.w	r2, fp, #15
 8007fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007fe8:	d019      	beq.n	800801e <_dtoa_r+0x386>
 8007fea:	4bbb      	ldr	r3, [pc, #748]	; (80082d8 <_dtoa_r+0x640>)
 8007fec:	ec51 0b18 	vmov	r0, r1, d8
 8007ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ff4:	f7f8 fc52 	bl	800089c <__aeabi_ddiv>
 8007ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffc:	f008 080f 	and.w	r8, r8, #15
 8008000:	2503      	movs	r5, #3
 8008002:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80082d8 <_dtoa_r+0x640>
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	d10a      	bne.n	8008022 <_dtoa_r+0x38a>
 800800c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	f7f8 fc42 	bl	800089c <__aeabi_ddiv>
 8008018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800801c:	e02b      	b.n	8008076 <_dtoa_r+0x3de>
 800801e:	2502      	movs	r5, #2
 8008020:	e7ef      	b.n	8008002 <_dtoa_r+0x36a>
 8008022:	f018 0f01 	tst.w	r8, #1
 8008026:	d008      	beq.n	800803a <_dtoa_r+0x3a2>
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008030:	f7f8 fb0a 	bl	8000648 <__aeabi_dmul>
 8008034:	3501      	adds	r5, #1
 8008036:	4606      	mov	r6, r0
 8008038:	460f      	mov	r7, r1
 800803a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800803e:	f109 0908 	add.w	r9, r9, #8
 8008042:	e7e0      	b.n	8008006 <_dtoa_r+0x36e>
 8008044:	f000 809f 	beq.w	8008186 <_dtoa_r+0x4ee>
 8008048:	f1cb 0600 	rsb	r6, fp, #0
 800804c:	4ba1      	ldr	r3, [pc, #644]	; (80082d4 <_dtoa_r+0x63c>)
 800804e:	4fa2      	ldr	r7, [pc, #648]	; (80082d8 <_dtoa_r+0x640>)
 8008050:	f006 020f 	and.w	r2, r6, #15
 8008054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	ec51 0b18 	vmov	r0, r1, d8
 8008060:	f7f8 faf2 	bl	8000648 <__aeabi_dmul>
 8008064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008068:	1136      	asrs	r6, r6, #4
 800806a:	2300      	movs	r3, #0
 800806c:	2502      	movs	r5, #2
 800806e:	2e00      	cmp	r6, #0
 8008070:	d17e      	bne.n	8008170 <_dtoa_r+0x4d8>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1d0      	bne.n	8008018 <_dtoa_r+0x380>
 8008076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008078:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8084 	beq.w	800818a <_dtoa_r+0x4f2>
 8008082:	4b96      	ldr	r3, [pc, #600]	; (80082dc <_dtoa_r+0x644>)
 8008084:	2200      	movs	r2, #0
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d07b      	beq.n	800818a <_dtoa_r+0x4f2>
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d078      	beq.n	800818a <_dtoa_r+0x4f2>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd39      	ble.n	8008112 <_dtoa_r+0x47a>
 800809e:	4b90      	ldr	r3, [pc, #576]	; (80082e0 <_dtoa_r+0x648>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 facf 	bl	8000648 <__aeabi_dmul>
 80080aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ae:	9e01      	ldr	r6, [sp, #4]
 80080b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80080b4:	3501      	adds	r5, #1
 80080b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7f8 fa5a 	bl	8000574 <__aeabi_i2d>
 80080c0:	4642      	mov	r2, r8
 80080c2:	464b      	mov	r3, r9
 80080c4:	f7f8 fac0 	bl	8000648 <__aeabi_dmul>
 80080c8:	4b86      	ldr	r3, [pc, #536]	; (80082e4 <_dtoa_r+0x64c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7f8 f906 	bl	80002dc <__adddf3>
 80080d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	2e00      	cmp	r6, #0
 80080dc:	d158      	bne.n	8008190 <_dtoa_r+0x4f8>
 80080de:	4b82      	ldr	r3, [pc, #520]	; (80082e8 <_dtoa_r+0x650>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	4640      	mov	r0, r8
 80080e4:	4649      	mov	r1, r9
 80080e6:	f7f8 f8f7 	bl	80002d8 <__aeabi_dsub>
 80080ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	f7f8 fd39 	bl	8000b68 <__aeabi_dcmpgt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f040 8296 	bne.w	8008628 <_dtoa_r+0x990>
 80080fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008100:	4640      	mov	r0, r8
 8008102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008106:	4649      	mov	r1, r9
 8008108:	f7f8 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 8289 	bne.w	8008624 <_dtoa_r+0x98c>
 8008112:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008118:	2b00      	cmp	r3, #0
 800811a:	f2c0 814e 	blt.w	80083ba <_dtoa_r+0x722>
 800811e:	f1bb 0f0e 	cmp.w	fp, #14
 8008122:	f300 814a 	bgt.w	80083ba <_dtoa_r+0x722>
 8008126:	4b6b      	ldr	r3, [pc, #428]	; (80082d4 <_dtoa_r+0x63c>)
 8008128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800812c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	f280 80dc 	bge.w	80082f0 <_dtoa_r+0x658>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f300 80d8 	bgt.w	80082f0 <_dtoa_r+0x658>
 8008140:	f040 826f 	bne.w	8008622 <_dtoa_r+0x98a>
 8008144:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <_dtoa_r+0x650>)
 8008146:	2200      	movs	r2, #0
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fa7c 	bl	8000648 <__aeabi_dmul>
 8008150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008154:	f7f8 fcfe 	bl	8000b54 <__aeabi_dcmpge>
 8008158:	9e04      	ldr	r6, [sp, #16]
 800815a:	4637      	mov	r7, r6
 800815c:	2800      	cmp	r0, #0
 800815e:	f040 8245 	bne.w	80085ec <_dtoa_r+0x954>
 8008162:	9d00      	ldr	r5, [sp, #0]
 8008164:	2331      	movs	r3, #49	; 0x31
 8008166:	f805 3b01 	strb.w	r3, [r5], #1
 800816a:	f10b 0b01 	add.w	fp, fp, #1
 800816e:	e241      	b.n	80085f4 <_dtoa_r+0x95c>
 8008170:	07f2      	lsls	r2, r6, #31
 8008172:	d505      	bpl.n	8008180 <_dtoa_r+0x4e8>
 8008174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008178:	f7f8 fa66 	bl	8000648 <__aeabi_dmul>
 800817c:	3501      	adds	r5, #1
 800817e:	2301      	movs	r3, #1
 8008180:	1076      	asrs	r6, r6, #1
 8008182:	3708      	adds	r7, #8
 8008184:	e773      	b.n	800806e <_dtoa_r+0x3d6>
 8008186:	2502      	movs	r5, #2
 8008188:	e775      	b.n	8008076 <_dtoa_r+0x3de>
 800818a:	9e04      	ldr	r6, [sp, #16]
 800818c:	465f      	mov	r7, fp
 800818e:	e792      	b.n	80080b6 <_dtoa_r+0x41e>
 8008190:	9900      	ldr	r1, [sp, #0]
 8008192:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <_dtoa_r+0x63c>)
 8008194:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008198:	4431      	add	r1, r6
 800819a:	9102      	str	r1, [sp, #8]
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	eeb0 9a47 	vmov.f32	s18, s14
 80081a2:	eef0 9a67 	vmov.f32	s19, s15
 80081a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d044      	beq.n	800823c <_dtoa_r+0x5a4>
 80081b2:	494e      	ldr	r1, [pc, #312]	; (80082ec <_dtoa_r+0x654>)
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7f8 fb71 	bl	800089c <__aeabi_ddiv>
 80081ba:	ec53 2b19 	vmov	r2, r3, d9
 80081be:	f7f8 f88b 	bl	80002d8 <__aeabi_dsub>
 80081c2:	9d00      	ldr	r5, [sp, #0]
 80081c4:	ec41 0b19 	vmov	d9, r0, r1
 80081c8:	4649      	mov	r1, r9
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7f8 fcec 	bl	8000ba8 <__aeabi_d2iz>
 80081d0:	4606      	mov	r6, r0
 80081d2:	f7f8 f9cf 	bl	8000574 <__aeabi_i2d>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 f87b 	bl	80002d8 <__aeabi_dsub>
 80081e2:	3630      	adds	r6, #48	; 0x30
 80081e4:	f805 6b01 	strb.w	r6, [r5], #1
 80081e8:	ec53 2b19 	vmov	r2, r3, d9
 80081ec:	4680      	mov	r8, r0
 80081ee:	4689      	mov	r9, r1
 80081f0:	f7f8 fc9c 	bl	8000b2c <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d164      	bne.n	80082c2 <_dtoa_r+0x62a>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4937      	ldr	r1, [pc, #220]	; (80082dc <_dtoa_r+0x644>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f8 f86a 	bl	80002d8 <__aeabi_dsub>
 8008204:	ec53 2b19 	vmov	r2, r3, d9
 8008208:	f7f8 fc90 	bl	8000b2c <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80b6 	bne.w	800837e <_dtoa_r+0x6e6>
 8008212:	9b02      	ldr	r3, [sp, #8]
 8008214:	429d      	cmp	r5, r3
 8008216:	f43f af7c 	beq.w	8008112 <_dtoa_r+0x47a>
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <_dtoa_r+0x648>)
 800821c:	ec51 0b19 	vmov	r0, r1, d9
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 fa11 	bl	8000648 <__aeabi_dmul>
 8008226:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <_dtoa_r+0x648>)
 8008228:	ec41 0b19 	vmov	d9, r0, r1
 800822c:	2200      	movs	r2, #0
 800822e:	4640      	mov	r0, r8
 8008230:	4649      	mov	r1, r9
 8008232:	f7f8 fa09 	bl	8000648 <__aeabi_dmul>
 8008236:	4680      	mov	r8, r0
 8008238:	4689      	mov	r9, r1
 800823a:	e7c5      	b.n	80081c8 <_dtoa_r+0x530>
 800823c:	ec51 0b17 	vmov	r0, r1, d7
 8008240:	f7f8 fa02 	bl	8000648 <__aeabi_dmul>
 8008244:	9b02      	ldr	r3, [sp, #8]
 8008246:	9d00      	ldr	r5, [sp, #0]
 8008248:	930f      	str	r3, [sp, #60]	; 0x3c
 800824a:	ec41 0b19 	vmov	d9, r0, r1
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	f7f8 fca9 	bl	8000ba8 <__aeabi_d2iz>
 8008256:	4606      	mov	r6, r0
 8008258:	f7f8 f98c 	bl	8000574 <__aeabi_i2d>
 800825c:	3630      	adds	r6, #48	; 0x30
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f837 	bl	80002d8 <__aeabi_dsub>
 800826a:	f805 6b01 	strb.w	r6, [r5], #1
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	429d      	cmp	r5, r3
 8008272:	4680      	mov	r8, r0
 8008274:	4689      	mov	r9, r1
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	d124      	bne.n	80082c6 <_dtoa_r+0x62e>
 800827c:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <_dtoa_r+0x654>)
 800827e:	ec51 0b19 	vmov	r0, r1, d9
 8008282:	f7f8 f82b 	bl	80002dc <__adddf3>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4640      	mov	r0, r8
 800828c:	4649      	mov	r1, r9
 800828e:	f7f8 fc6b 	bl	8000b68 <__aeabi_dcmpgt>
 8008292:	2800      	cmp	r0, #0
 8008294:	d173      	bne.n	800837e <_dtoa_r+0x6e6>
 8008296:	ec53 2b19 	vmov	r2, r3, d9
 800829a:	4914      	ldr	r1, [pc, #80]	; (80082ec <_dtoa_r+0x654>)
 800829c:	2000      	movs	r0, #0
 800829e:	f7f8 f81b 	bl	80002d8 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4640      	mov	r0, r8
 80082a8:	4649      	mov	r1, r9
 80082aa:	f7f8 fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f af2f 	beq.w	8008112 <_dtoa_r+0x47a>
 80082b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082b6:	1e6b      	subs	r3, r5, #1
 80082b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d0f8      	beq.n	80082b4 <_dtoa_r+0x61c>
 80082c2:	46bb      	mov	fp, r7
 80082c4:	e04a      	b.n	800835c <_dtoa_r+0x6c4>
 80082c6:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <_dtoa_r+0x648>)
 80082c8:	f7f8 f9be 	bl	8000648 <__aeabi_dmul>
 80082cc:	4680      	mov	r8, r0
 80082ce:	4689      	mov	r9, r1
 80082d0:	e7bd      	b.n	800824e <_dtoa_r+0x5b6>
 80082d2:	bf00      	nop
 80082d4:	0800d6f8 	.word	0x0800d6f8
 80082d8:	0800d6d0 	.word	0x0800d6d0
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	40140000 	.word	0x40140000
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082f4:	9d00      	ldr	r5, [sp, #0]
 80082f6:	4642      	mov	r2, r8
 80082f8:	464b      	mov	r3, r9
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 facd 	bl	800089c <__aeabi_ddiv>
 8008302:	f7f8 fc51 	bl	8000ba8 <__aeabi_d2iz>
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	f7f8 f934 	bl	8000574 <__aeabi_i2d>
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	f7f8 f99a 	bl	8000648 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f7 ffdc 	bl	80002d8 <__aeabi_dsub>
 8008320:	9e01      	ldr	r6, [sp, #4]
 8008322:	9f04      	ldr	r7, [sp, #16]
 8008324:	3630      	adds	r6, #48	; 0x30
 8008326:	f805 6b01 	strb.w	r6, [r5], #1
 800832a:	9e00      	ldr	r6, [sp, #0]
 800832c:	1bae      	subs	r6, r5, r6
 800832e:	42b7      	cmp	r7, r6
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	d134      	bne.n	80083a0 <_dtoa_r+0x708>
 8008336:	f7f7 ffd1 	bl	80002dc <__adddf3>
 800833a:	4642      	mov	r2, r8
 800833c:	464b      	mov	r3, r9
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	f7f8 fc11 	bl	8000b68 <__aeabi_dcmpgt>
 8008346:	b9c8      	cbnz	r0, 800837c <_dtoa_r+0x6e4>
 8008348:	4642      	mov	r2, r8
 800834a:	464b      	mov	r3, r9
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fbe2 	bl	8000b18 <__aeabi_dcmpeq>
 8008354:	b110      	cbz	r0, 800835c <_dtoa_r+0x6c4>
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	07db      	lsls	r3, r3, #31
 800835a:	d40f      	bmi.n	800837c <_dtoa_r+0x6e4>
 800835c:	4651      	mov	r1, sl
 800835e:	4620      	mov	r0, r4
 8008360:	f000 fbcc 	bl	8008afc <_Bfree>
 8008364:	2300      	movs	r3, #0
 8008366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008368:	702b      	strb	r3, [r5, #0]
 800836a:	f10b 0301 	add.w	r3, fp, #1
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008372:	2b00      	cmp	r3, #0
 8008374:	f43f ace2 	beq.w	8007d3c <_dtoa_r+0xa4>
 8008378:	601d      	str	r5, [r3, #0]
 800837a:	e4df      	b.n	8007d3c <_dtoa_r+0xa4>
 800837c:	465f      	mov	r7, fp
 800837e:	462b      	mov	r3, r5
 8008380:	461d      	mov	r5, r3
 8008382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008386:	2a39      	cmp	r2, #57	; 0x39
 8008388:	d106      	bne.n	8008398 <_dtoa_r+0x700>
 800838a:	9a00      	ldr	r2, [sp, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d1f7      	bne.n	8008380 <_dtoa_r+0x6e8>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	2230      	movs	r2, #48	; 0x30
 8008394:	3701      	adds	r7, #1
 8008396:	700a      	strb	r2, [r1, #0]
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	3201      	adds	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e790      	b.n	80082c2 <_dtoa_r+0x62a>
 80083a0:	4ba3      	ldr	r3, [pc, #652]	; (8008630 <_dtoa_r+0x998>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	f7f8 f950 	bl	8000648 <__aeabi_dmul>
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	f7f8 fbb2 	bl	8000b18 <__aeabi_dcmpeq>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d09e      	beq.n	80082f6 <_dtoa_r+0x65e>
 80083b8:	e7d0      	b.n	800835c <_dtoa_r+0x6c4>
 80083ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083bc:	2a00      	cmp	r2, #0
 80083be:	f000 80ca 	beq.w	8008556 <_dtoa_r+0x8be>
 80083c2:	9a07      	ldr	r2, [sp, #28]
 80083c4:	2a01      	cmp	r2, #1
 80083c6:	f300 80ad 	bgt.w	8008524 <_dtoa_r+0x88c>
 80083ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	f000 80a5 	beq.w	800851c <_dtoa_r+0x884>
 80083d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083d6:	9e08      	ldr	r6, [sp, #32]
 80083d8:	9d05      	ldr	r5, [sp, #20]
 80083da:	9a05      	ldr	r2, [sp, #20]
 80083dc:	441a      	add	r2, r3
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	9a06      	ldr	r2, [sp, #24]
 80083e2:	2101      	movs	r1, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	4620      	mov	r0, r4
 80083e8:	9206      	str	r2, [sp, #24]
 80083ea:	f000 fc87 	bl	8008cfc <__i2b>
 80083ee:	4607      	mov	r7, r0
 80083f0:	b165      	cbz	r5, 800840c <_dtoa_r+0x774>
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd09      	ble.n	800840c <_dtoa_r+0x774>
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	9a05      	ldr	r2, [sp, #20]
 80083fc:	bfa8      	it	ge
 80083fe:	462b      	movge	r3, r5
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	9205      	str	r2, [sp, #20]
 8008404:	9a06      	ldr	r2, [sp, #24]
 8008406:	1aed      	subs	r5, r5, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	9306      	str	r3, [sp, #24]
 800840c:	9b08      	ldr	r3, [sp, #32]
 800840e:	b1f3      	cbz	r3, 800844e <_dtoa_r+0x7b6>
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 80a3 	beq.w	800855e <_dtoa_r+0x8c6>
 8008418:	2e00      	cmp	r6, #0
 800841a:	dd10      	ble.n	800843e <_dtoa_r+0x7a6>
 800841c:	4639      	mov	r1, r7
 800841e:	4632      	mov	r2, r6
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fd2b 	bl	8008e7c <__pow5mult>
 8008426:	4652      	mov	r2, sl
 8008428:	4601      	mov	r1, r0
 800842a:	4607      	mov	r7, r0
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fc7b 	bl	8008d28 <__multiply>
 8008432:	4651      	mov	r1, sl
 8008434:	4680      	mov	r8, r0
 8008436:	4620      	mov	r0, r4
 8008438:	f000 fb60 	bl	8008afc <_Bfree>
 800843c:	46c2      	mov	sl, r8
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	1b9a      	subs	r2, r3, r6
 8008442:	d004      	beq.n	800844e <_dtoa_r+0x7b6>
 8008444:	4651      	mov	r1, sl
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fd18 	bl	8008e7c <__pow5mult>
 800844c:	4682      	mov	sl, r0
 800844e:	2101      	movs	r1, #1
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fc53 	bl	8008cfc <__i2b>
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	4606      	mov	r6, r0
 800845c:	f340 8081 	ble.w	8008562 <_dtoa_r+0x8ca>
 8008460:	461a      	mov	r2, r3
 8008462:	4601      	mov	r1, r0
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fd09 	bl	8008e7c <__pow5mult>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	2b01      	cmp	r3, #1
 800846e:	4606      	mov	r6, r0
 8008470:	dd7a      	ble.n	8008568 <_dtoa_r+0x8d0>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	6933      	ldr	r3, [r6, #16]
 8008478:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800847c:	6918      	ldr	r0, [r3, #16]
 800847e:	f000 fbef 	bl	8008c60 <__hi0bits>
 8008482:	f1c0 0020 	rsb	r0, r0, #32
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	4418      	add	r0, r3
 800848a:	f010 001f 	ands.w	r0, r0, #31
 800848e:	f000 8094 	beq.w	80085ba <_dtoa_r+0x922>
 8008492:	f1c0 0320 	rsb	r3, r0, #32
 8008496:	2b04      	cmp	r3, #4
 8008498:	f340 8085 	ble.w	80085a6 <_dtoa_r+0x90e>
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	f1c0 001c 	rsb	r0, r0, #28
 80084a2:	4403      	add	r3, r0
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	9b06      	ldr	r3, [sp, #24]
 80084a8:	4403      	add	r3, r0
 80084aa:	4405      	add	r5, r0
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dd05      	ble.n	80084c0 <_dtoa_r+0x828>
 80084b4:	4651      	mov	r1, sl
 80084b6:	461a      	mov	r2, r3
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fd39 	bl	8008f30 <__lshift>
 80084be:	4682      	mov	sl, r0
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x83a>
 80084c6:	4631      	mov	r1, r6
 80084c8:	461a      	mov	r2, r3
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fd30 	bl	8008f30 <__lshift>
 80084d0:	4606      	mov	r6, r0
 80084d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d072      	beq.n	80085be <_dtoa_r+0x926>
 80084d8:	4631      	mov	r1, r6
 80084da:	4650      	mov	r0, sl
 80084dc:	f000 fd94 	bl	8009008 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	da6c      	bge.n	80085be <_dtoa_r+0x926>
 80084e4:	2300      	movs	r3, #0
 80084e6:	4651      	mov	r1, sl
 80084e8:	220a      	movs	r2, #10
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fb28 	bl	8008b40 <__multadd>
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084f6:	4682      	mov	sl, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 81b0 	beq.w	800885e <_dtoa_r+0xbc6>
 80084fe:	2300      	movs	r3, #0
 8008500:	4639      	mov	r1, r7
 8008502:	220a      	movs	r2, #10
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fb1b 	bl	8008b40 <__multadd>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	4607      	mov	r7, r0
 8008510:	f300 8096 	bgt.w	8008640 <_dtoa_r+0x9a8>
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	2b02      	cmp	r3, #2
 8008518:	dc59      	bgt.n	80085ce <_dtoa_r+0x936>
 800851a:	e091      	b.n	8008640 <_dtoa_r+0x9a8>
 800851c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800851e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008522:	e758      	b.n	80083d6 <_dtoa_r+0x73e>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	1e5e      	subs	r6, r3, #1
 8008528:	9b08      	ldr	r3, [sp, #32]
 800852a:	42b3      	cmp	r3, r6
 800852c:	bfbf      	itttt	lt
 800852e:	9b08      	ldrlt	r3, [sp, #32]
 8008530:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008532:	9608      	strlt	r6, [sp, #32]
 8008534:	1af3      	sublt	r3, r6, r3
 8008536:	bfb4      	ite	lt
 8008538:	18d2      	addlt	r2, r2, r3
 800853a:	1b9e      	subge	r6, r3, r6
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	bfbc      	itt	lt
 8008540:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008542:	2600      	movlt	r6, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfb7      	itett	lt
 8008548:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800854c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008550:	1a9d      	sublt	r5, r3, r2
 8008552:	2300      	movlt	r3, #0
 8008554:	e741      	b.n	80083da <_dtoa_r+0x742>
 8008556:	9e08      	ldr	r6, [sp, #32]
 8008558:	9d05      	ldr	r5, [sp, #20]
 800855a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800855c:	e748      	b.n	80083f0 <_dtoa_r+0x758>
 800855e:	9a08      	ldr	r2, [sp, #32]
 8008560:	e770      	b.n	8008444 <_dtoa_r+0x7ac>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b01      	cmp	r3, #1
 8008566:	dc19      	bgt.n	800859c <_dtoa_r+0x904>
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	b9bb      	cbnz	r3, 800859c <_dtoa_r+0x904>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008572:	b99b      	cbnz	r3, 800859c <_dtoa_r+0x904>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857a:	0d1b      	lsrs	r3, r3, #20
 800857c:	051b      	lsls	r3, r3, #20
 800857e:	b183      	cbz	r3, 80085a2 <_dtoa_r+0x90a>
 8008580:	9b05      	ldr	r3, [sp, #20]
 8008582:	3301      	adds	r3, #1
 8008584:	9305      	str	r3, [sp, #20]
 8008586:	9b06      	ldr	r3, [sp, #24]
 8008588:	3301      	adds	r3, #1
 800858a:	9306      	str	r3, [sp, #24]
 800858c:	f04f 0801 	mov.w	r8, #1
 8008590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	f47f af6f 	bne.w	8008476 <_dtoa_r+0x7de>
 8008598:	2001      	movs	r0, #1
 800859a:	e774      	b.n	8008486 <_dtoa_r+0x7ee>
 800859c:	f04f 0800 	mov.w	r8, #0
 80085a0:	e7f6      	b.n	8008590 <_dtoa_r+0x8f8>
 80085a2:	4698      	mov	r8, r3
 80085a4:	e7f4      	b.n	8008590 <_dtoa_r+0x8f8>
 80085a6:	d082      	beq.n	80084ae <_dtoa_r+0x816>
 80085a8:	9a05      	ldr	r2, [sp, #20]
 80085aa:	331c      	adds	r3, #28
 80085ac:	441a      	add	r2, r3
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	441a      	add	r2, r3
 80085b4:	441d      	add	r5, r3
 80085b6:	9206      	str	r2, [sp, #24]
 80085b8:	e779      	b.n	80084ae <_dtoa_r+0x816>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x910>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc37      	bgt.n	8008634 <_dtoa_r+0x99c>
 80085c4:	9b07      	ldr	r3, [sp, #28]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dd34      	ble.n	8008634 <_dtoa_r+0x99c>
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	b963      	cbnz	r3, 80085ec <_dtoa_r+0x954>
 80085d2:	4631      	mov	r1, r6
 80085d4:	2205      	movs	r2, #5
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fab2 	bl	8008b40 <__multadd>
 80085dc:	4601      	mov	r1, r0
 80085de:	4606      	mov	r6, r0
 80085e0:	4650      	mov	r0, sl
 80085e2:	f000 fd11 	bl	8009008 <__mcmp>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f73f adbb 	bgt.w	8008162 <_dtoa_r+0x4ca>
 80085ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ee:	9d00      	ldr	r5, [sp, #0]
 80085f0:	ea6f 0b03 	mvn.w	fp, r3
 80085f4:	f04f 0800 	mov.w	r8, #0
 80085f8:	4631      	mov	r1, r6
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fa7e 	bl	8008afc <_Bfree>
 8008600:	2f00      	cmp	r7, #0
 8008602:	f43f aeab 	beq.w	800835c <_dtoa_r+0x6c4>
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	d005      	beq.n	8008618 <_dtoa_r+0x980>
 800860c:	45b8      	cmp	r8, r7
 800860e:	d003      	beq.n	8008618 <_dtoa_r+0x980>
 8008610:	4641      	mov	r1, r8
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fa72 	bl	8008afc <_Bfree>
 8008618:	4639      	mov	r1, r7
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fa6e 	bl	8008afc <_Bfree>
 8008620:	e69c      	b.n	800835c <_dtoa_r+0x6c4>
 8008622:	2600      	movs	r6, #0
 8008624:	4637      	mov	r7, r6
 8008626:	e7e1      	b.n	80085ec <_dtoa_r+0x954>
 8008628:	46bb      	mov	fp, r7
 800862a:	4637      	mov	r7, r6
 800862c:	e599      	b.n	8008162 <_dtoa_r+0x4ca>
 800862e:	bf00      	nop
 8008630:	40240000 	.word	0x40240000
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80c8 	beq.w	80087cc <_dtoa_r+0xb34>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	2d00      	cmp	r5, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x9b8>
 8008644:	4639      	mov	r1, r7
 8008646:	462a      	mov	r2, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fc71 	bl	8008f30 <__lshift>
 800864e:	4607      	mov	r7, r0
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	d05b      	beq.n	800870e <_dtoa_r+0xa76>
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fa0f 	bl	8008a7c <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b928      	cbnz	r0, 800866e <_dtoa_r+0x9d6>
 8008662:	4b83      	ldr	r3, [pc, #524]	; (8008870 <_dtoa_r+0xbd8>)
 8008664:	4602      	mov	r2, r0
 8008666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800866a:	f7ff bb2e 	b.w	8007cca <_dtoa_r+0x32>
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	f107 010c 	add.w	r1, r7, #12
 8008678:	300c      	adds	r0, #12
 800867a:	f002 f981 	bl	800a980 <memcpy>
 800867e:	2201      	movs	r2, #1
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc54 	bl	8008f30 <__lshift>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008692:	4413      	add	r3, r2
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	46b8      	mov	r8, r7
 800869e:	9306      	str	r3, [sp, #24]
 80086a0:	4607      	mov	r7, r0
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	4631      	mov	r1, r6
 80086a6:	3b01      	subs	r3, #1
 80086a8:	4650      	mov	r0, sl
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f7ff fa6a 	bl	8007b84 <quorem>
 80086b0:	4641      	mov	r1, r8
 80086b2:	9002      	str	r0, [sp, #8]
 80086b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80086b8:	4650      	mov	r0, sl
 80086ba:	f000 fca5 	bl	8009008 <__mcmp>
 80086be:	463a      	mov	r2, r7
 80086c0:	9005      	str	r0, [sp, #20]
 80086c2:	4631      	mov	r1, r6
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fcbb 	bl	8009040 <__mdiff>
 80086ca:	68c2      	ldr	r2, [r0, #12]
 80086cc:	4605      	mov	r5, r0
 80086ce:	bb02      	cbnz	r2, 8008712 <_dtoa_r+0xa7a>
 80086d0:	4601      	mov	r1, r0
 80086d2:	4650      	mov	r0, sl
 80086d4:	f000 fc98 	bl	8009008 <__mcmp>
 80086d8:	4602      	mov	r2, r0
 80086da:	4629      	mov	r1, r5
 80086dc:	4620      	mov	r0, r4
 80086de:	9209      	str	r2, [sp, #36]	; 0x24
 80086e0:	f000 fa0c 	bl	8008afc <_Bfree>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e8:	9d04      	ldr	r5, [sp, #16]
 80086ea:	ea43 0102 	orr.w	r1, r3, r2
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	4319      	orrs	r1, r3
 80086f2:	d110      	bne.n	8008716 <_dtoa_r+0xa7e>
 80086f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086f8:	d029      	beq.n	800874e <_dtoa_r+0xab6>
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dd02      	ble.n	8008706 <_dtoa_r+0xa6e>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	f883 9000 	strb.w	r9, [r3]
 800870c:	e774      	b.n	80085f8 <_dtoa_r+0x960>
 800870e:	4638      	mov	r0, r7
 8008710:	e7ba      	b.n	8008688 <_dtoa_r+0x9f0>
 8008712:	2201      	movs	r2, #1
 8008714:	e7e1      	b.n	80086da <_dtoa_r+0xa42>
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <_dtoa_r+0xa8e>
 800871c:	9907      	ldr	r1, [sp, #28]
 800871e:	430b      	orrs	r3, r1
 8008720:	9906      	ldr	r1, [sp, #24]
 8008722:	430b      	orrs	r3, r1
 8008724:	d120      	bne.n	8008768 <_dtoa_r+0xad0>
 8008726:	2a00      	cmp	r2, #0
 8008728:	dded      	ble.n	8008706 <_dtoa_r+0xa6e>
 800872a:	4651      	mov	r1, sl
 800872c:	2201      	movs	r2, #1
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fbfe 	bl	8008f30 <__lshift>
 8008734:	4631      	mov	r1, r6
 8008736:	4682      	mov	sl, r0
 8008738:	f000 fc66 	bl	8009008 <__mcmp>
 800873c:	2800      	cmp	r0, #0
 800873e:	dc03      	bgt.n	8008748 <_dtoa_r+0xab0>
 8008740:	d1e1      	bne.n	8008706 <_dtoa_r+0xa6e>
 8008742:	f019 0f01 	tst.w	r9, #1
 8008746:	d0de      	beq.n	8008706 <_dtoa_r+0xa6e>
 8008748:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800874c:	d1d8      	bne.n	8008700 <_dtoa_r+0xa68>
 800874e:	9a01      	ldr	r2, [sp, #4]
 8008750:	2339      	movs	r3, #57	; 0x39
 8008752:	7013      	strb	r3, [r2, #0]
 8008754:	462b      	mov	r3, r5
 8008756:	461d      	mov	r5, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800875e:	2a39      	cmp	r2, #57	; 0x39
 8008760:	d06c      	beq.n	800883c <_dtoa_r+0xba4>
 8008762:	3201      	adds	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e747      	b.n	80085f8 <_dtoa_r+0x960>
 8008768:	2a00      	cmp	r2, #0
 800876a:	dd07      	ble.n	800877c <_dtoa_r+0xae4>
 800876c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008770:	d0ed      	beq.n	800874e <_dtoa_r+0xab6>
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	f109 0301 	add.w	r3, r9, #1
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	e73d      	b.n	80085f8 <_dtoa_r+0x960>
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	9a08      	ldr	r2, [sp, #32]
 8008780:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008784:	4293      	cmp	r3, r2
 8008786:	d043      	beq.n	8008810 <_dtoa_r+0xb78>
 8008788:	4651      	mov	r1, sl
 800878a:	2300      	movs	r3, #0
 800878c:	220a      	movs	r2, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f000 f9d6 	bl	8008b40 <__multadd>
 8008794:	45b8      	cmp	r8, r7
 8008796:	4682      	mov	sl, r0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	f04f 020a 	mov.w	r2, #10
 80087a0:	4641      	mov	r1, r8
 80087a2:	4620      	mov	r0, r4
 80087a4:	d107      	bne.n	80087b6 <_dtoa_r+0xb1e>
 80087a6:	f000 f9cb 	bl	8008b40 <__multadd>
 80087aa:	4680      	mov	r8, r0
 80087ac:	4607      	mov	r7, r0
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	e775      	b.n	80086a2 <_dtoa_r+0xa0a>
 80087b6:	f000 f9c3 	bl	8008b40 <__multadd>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4680      	mov	r8, r0
 80087be:	2300      	movs	r3, #0
 80087c0:	220a      	movs	r2, #10
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 f9bc 	bl	8008b40 <__multadd>
 80087c8:	4607      	mov	r7, r0
 80087ca:	e7f0      	b.n	80087ae <_dtoa_r+0xb16>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	9d00      	ldr	r5, [sp, #0]
 80087d2:	4631      	mov	r1, r6
 80087d4:	4650      	mov	r0, sl
 80087d6:	f7ff f9d5 	bl	8007b84 <quorem>
 80087da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087de:	9b00      	ldr	r3, [sp, #0]
 80087e0:	f805 9b01 	strb.w	r9, [r5], #1
 80087e4:	1aea      	subs	r2, r5, r3
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	dd07      	ble.n	80087fc <_dtoa_r+0xb64>
 80087ec:	4651      	mov	r1, sl
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f9a4 	bl	8008b40 <__multadd>
 80087f8:	4682      	mov	sl, r0
 80087fa:	e7ea      	b.n	80087d2 <_dtoa_r+0xb3a>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfc8      	it	gt
 8008802:	461d      	movgt	r5, r3
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	bfd8      	it	le
 8008808:	2501      	movle	r5, #1
 800880a:	441d      	add	r5, r3
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	4651      	mov	r1, sl
 8008812:	2201      	movs	r2, #1
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fb8b 	bl	8008f30 <__lshift>
 800881a:	4631      	mov	r1, r6
 800881c:	4682      	mov	sl, r0
 800881e:	f000 fbf3 	bl	8009008 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	dc96      	bgt.n	8008754 <_dtoa_r+0xabc>
 8008826:	d102      	bne.n	800882e <_dtoa_r+0xb96>
 8008828:	f019 0f01 	tst.w	r9, #1
 800882c:	d192      	bne.n	8008754 <_dtoa_r+0xabc>
 800882e:	462b      	mov	r3, r5
 8008830:	461d      	mov	r5, r3
 8008832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008836:	2a30      	cmp	r2, #48	; 0x30
 8008838:	d0fa      	beq.n	8008830 <_dtoa_r+0xb98>
 800883a:	e6dd      	b.n	80085f8 <_dtoa_r+0x960>
 800883c:	9a00      	ldr	r2, [sp, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d189      	bne.n	8008756 <_dtoa_r+0xabe>
 8008842:	f10b 0b01 	add.w	fp, fp, #1
 8008846:	2331      	movs	r3, #49	; 0x31
 8008848:	e796      	b.n	8008778 <_dtoa_r+0xae0>
 800884a:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <_dtoa_r+0xbdc>)
 800884c:	f7ff ba99 	b.w	8007d82 <_dtoa_r+0xea>
 8008850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f aa6d 	bne.w	8007d32 <_dtoa_r+0x9a>
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <_dtoa_r+0xbe0>)
 800885a:	f7ff ba92 	b.w	8007d82 <_dtoa_r+0xea>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dcb5      	bgt.n	80087d0 <_dtoa_r+0xb38>
 8008864:	9b07      	ldr	r3, [sp, #28]
 8008866:	2b02      	cmp	r3, #2
 8008868:	f73f aeb1 	bgt.w	80085ce <_dtoa_r+0x936>
 800886c:	e7b0      	b.n	80087d0 <_dtoa_r+0xb38>
 800886e:	bf00      	nop
 8008870:	0800d665 	.word	0x0800d665
 8008874:	0800d5c0 	.word	0x0800d5c0
 8008878:	0800d5e9 	.word	0x0800d5e9

0800887c <_free_r>:
 800887c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800887e:	2900      	cmp	r1, #0
 8008880:	d044      	beq.n	800890c <_free_r+0x90>
 8008882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f1a1 0404 	sub.w	r4, r1, #4
 800888e:	bfb8      	it	lt
 8008890:	18e4      	addlt	r4, r4, r3
 8008892:	f000 f8e7 	bl	8008a64 <__malloc_lock>
 8008896:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <_free_r+0x94>)
 8008898:	9801      	ldr	r0, [sp, #4]
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	b933      	cbnz	r3, 80088ac <_free_r+0x30>
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	6014      	str	r4, [r2, #0]
 80088a2:	b003      	add	sp, #12
 80088a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a8:	f000 b8e2 	b.w	8008a70 <__malloc_unlock>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d908      	bls.n	80088c2 <_free_r+0x46>
 80088b0:	6825      	ldr	r5, [r4, #0]
 80088b2:	1961      	adds	r1, r4, r5
 80088b4:	428b      	cmp	r3, r1
 80088b6:	bf01      	itttt	eq
 80088b8:	6819      	ldreq	r1, [r3, #0]
 80088ba:	685b      	ldreq	r3, [r3, #4]
 80088bc:	1949      	addeq	r1, r1, r5
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	e7ed      	b.n	800889e <_free_r+0x22>
 80088c2:	461a      	mov	r2, r3
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	b10b      	cbz	r3, 80088cc <_free_r+0x50>
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d9fa      	bls.n	80088c2 <_free_r+0x46>
 80088cc:	6811      	ldr	r1, [r2, #0]
 80088ce:	1855      	adds	r5, r2, r1
 80088d0:	42a5      	cmp	r5, r4
 80088d2:	d10b      	bne.n	80088ec <_free_r+0x70>
 80088d4:	6824      	ldr	r4, [r4, #0]
 80088d6:	4421      	add	r1, r4
 80088d8:	1854      	adds	r4, r2, r1
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	d1e0      	bne.n	80088a2 <_free_r+0x26>
 80088e0:	681c      	ldr	r4, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	6053      	str	r3, [r2, #4]
 80088e6:	440c      	add	r4, r1
 80088e8:	6014      	str	r4, [r2, #0]
 80088ea:	e7da      	b.n	80088a2 <_free_r+0x26>
 80088ec:	d902      	bls.n	80088f4 <_free_r+0x78>
 80088ee:	230c      	movs	r3, #12
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	e7d6      	b.n	80088a2 <_free_r+0x26>
 80088f4:	6825      	ldr	r5, [r4, #0]
 80088f6:	1961      	adds	r1, r4, r5
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf04      	itt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	bf04      	itt	eq
 8008904:	1949      	addeq	r1, r1, r5
 8008906:	6021      	streq	r1, [r4, #0]
 8008908:	6054      	str	r4, [r2, #4]
 800890a:	e7ca      	b.n	80088a2 <_free_r+0x26>
 800890c:	b003      	add	sp, #12
 800890e:	bd30      	pop	{r4, r5, pc}
 8008910:	200009c0 	.word	0x200009c0

08008914 <malloc>:
 8008914:	4b02      	ldr	r3, [pc, #8]	; (8008920 <malloc+0xc>)
 8008916:	4601      	mov	r1, r0
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	f000 b823 	b.w	8008964 <_malloc_r>
 800891e:	bf00      	nop
 8008920:	2000006c 	.word	0x2000006c

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f002 f816 	bl	800a960 <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f002 f811 	bl	800a960 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f002 f806 	bl	800a960 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	200009c4 	.word	0x200009c4

08008964 <_malloc_r>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	2600      	movs	r6, #0
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a60 <_malloc_r+0xfc>
 8008990:	f000 f868 	bl	8008a64 <__malloc_lock>
 8008994:	f8d8 3000 	ldr.w	r3, [r8]
 8008998:	461c      	mov	r4, r3
 800899a:	bb5c      	cbnz	r4, 80089f4 <_malloc_r+0x90>
 800899c:	4629      	mov	r1, r5
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff ffc0 	bl	8008924 <sbrk_aligned>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	4604      	mov	r4, r0
 80089a8:	d155      	bne.n	8008a56 <_malloc_r+0xf2>
 80089aa:	f8d8 4000 	ldr.w	r4, [r8]
 80089ae:	4626      	mov	r6, r4
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	d145      	bne.n	8008a40 <_malloc_r+0xdc>
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d048      	beq.n	8008a4a <_malloc_r+0xe6>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	4631      	mov	r1, r6
 80089bc:	4638      	mov	r0, r7
 80089be:	eb04 0903 	add.w	r9, r4, r3
 80089c2:	f001 ffcd 	bl	800a960 <_sbrk_r>
 80089c6:	4581      	cmp	r9, r0
 80089c8:	d13f      	bne.n	8008a4a <_malloc_r+0xe6>
 80089ca:	6821      	ldr	r1, [r4, #0]
 80089cc:	1a6d      	subs	r5, r5, r1
 80089ce:	4629      	mov	r1, r5
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ffa7 	bl	8008924 <sbrk_aligned>
 80089d6:	3001      	adds	r0, #1
 80089d8:	d037      	beq.n	8008a4a <_malloc_r+0xe6>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	442b      	add	r3, r5
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	f8d8 3000 	ldr.w	r3, [r8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d038      	beq.n	8008a5a <_malloc_r+0xf6>
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	d12b      	bne.n	8008a46 <_malloc_r+0xe2>
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e00f      	b.n	8008a14 <_malloc_r+0xb0>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	1b52      	subs	r2, r2, r5
 80089f8:	d41f      	bmi.n	8008a3a <_malloc_r+0xd6>
 80089fa:	2a0b      	cmp	r2, #11
 80089fc:	d917      	bls.n	8008a2e <_malloc_r+0xca>
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	6059      	strne	r1, [r3, #4]
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	bf08      	it	eq
 8008a0c:	f8c8 1000 	streq.w	r1, [r8]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4638      	mov	r0, r7
 8008a16:	f104 060b 	add.w	r6, r4, #11
 8008a1a:	f000 f829 	bl	8008a70 <__malloc_unlock>
 8008a1e:	f026 0607 	bic.w	r6, r6, #7
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	1af2      	subs	r2, r6, r3
 8008a26:	d0ae      	beq.n	8008986 <_malloc_r+0x22>
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	50a3      	str	r3, [r4, r2]
 8008a2c:	e7ab      	b.n	8008986 <_malloc_r+0x22>
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	d1dd      	bne.n	80089f0 <_malloc_r+0x8c>
 8008a34:	f8c8 2000 	str.w	r2, [r8]
 8008a38:	e7ec      	b.n	8008a14 <_malloc_r+0xb0>
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	6864      	ldr	r4, [r4, #4]
 8008a3e:	e7ac      	b.n	800899a <_malloc_r+0x36>
 8008a40:	4634      	mov	r4, r6
 8008a42:	6876      	ldr	r6, [r6, #4]
 8008a44:	e7b4      	b.n	80089b0 <_malloc_r+0x4c>
 8008a46:	4613      	mov	r3, r2
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x80>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f000 f80e 	bl	8008a70 <__malloc_unlock>
 8008a54:	e797      	b.n	8008986 <_malloc_r+0x22>
 8008a56:	6025      	str	r5, [r4, #0]
 8008a58:	e7dc      	b.n	8008a14 <_malloc_r+0xb0>
 8008a5a:	605b      	str	r3, [r3, #4]
 8008a5c:	deff      	udf	#255	; 0xff
 8008a5e:	bf00      	nop
 8008a60:	200009c0 	.word	0x200009c0

08008a64 <__malloc_lock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_lock+0x8>)
 8008a66:	f7ff b884 	b.w	8007b72 <__retarget_lock_acquire_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	200009bc 	.word	0x200009bc

08008a70 <__malloc_unlock>:
 8008a70:	4801      	ldr	r0, [pc, #4]	; (8008a78 <__malloc_unlock+0x8>)
 8008a72:	f7ff b87f 	b.w	8007b74 <__retarget_lock_release_recursive>
 8008a76:	bf00      	nop
 8008a78:	200009bc 	.word	0x200009bc

08008a7c <_Balloc>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	69c6      	ldr	r6, [r0, #28]
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	b976      	cbnz	r6, 8008aa4 <_Balloc+0x28>
 8008a86:	2010      	movs	r0, #16
 8008a88:	f7ff ff44 	bl	8008914 <malloc>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	61e0      	str	r0, [r4, #28]
 8008a90:	b920      	cbnz	r0, 8008a9c <_Balloc+0x20>
 8008a92:	4b18      	ldr	r3, [pc, #96]	; (8008af4 <_Balloc+0x78>)
 8008a94:	4818      	ldr	r0, [pc, #96]	; (8008af8 <_Balloc+0x7c>)
 8008a96:	216b      	movs	r1, #107	; 0x6b
 8008a98:	f001 ff8a 	bl	800a9b0 <__assert_func>
 8008a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aa0:	6006      	str	r6, [r0, #0]
 8008aa2:	60c6      	str	r6, [r0, #12]
 8008aa4:	69e6      	ldr	r6, [r4, #28]
 8008aa6:	68f3      	ldr	r3, [r6, #12]
 8008aa8:	b183      	cbz	r3, 8008acc <_Balloc+0x50>
 8008aaa:	69e3      	ldr	r3, [r4, #28]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ab2:	b9b8      	cbnz	r0, 8008ae4 <_Balloc+0x68>
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8008aba:	1d72      	adds	r2, r6, #5
 8008abc:	0092      	lsls	r2, r2, #2
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f001 ff94 	bl	800a9ec <_calloc_r>
 8008ac4:	b160      	cbz	r0, 8008ae0 <_Balloc+0x64>
 8008ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aca:	e00e      	b.n	8008aea <_Balloc+0x6e>
 8008acc:	2221      	movs	r2, #33	; 0x21
 8008ace:	2104      	movs	r1, #4
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f001 ff8b 	bl	800a9ec <_calloc_r>
 8008ad6:	69e3      	ldr	r3, [r4, #28]
 8008ad8:	60f0      	str	r0, [r6, #12]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e4      	bne.n	8008aaa <_Balloc+0x2e>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	6802      	ldr	r2, [r0, #0]
 8008ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aea:	2300      	movs	r3, #0
 8008aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008af0:	e7f7      	b.n	8008ae2 <_Balloc+0x66>
 8008af2:	bf00      	nop
 8008af4:	0800d5f6 	.word	0x0800d5f6
 8008af8:	0800d676 	.word	0x0800d676

08008afc <_Bfree>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	69c6      	ldr	r6, [r0, #28]
 8008b00:	4605      	mov	r5, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b976      	cbnz	r6, 8008b24 <_Bfree+0x28>
 8008b06:	2010      	movs	r0, #16
 8008b08:	f7ff ff04 	bl	8008914 <malloc>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	61e8      	str	r0, [r5, #28]
 8008b10:	b920      	cbnz	r0, 8008b1c <_Bfree+0x20>
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <_Bfree+0x3c>)
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <_Bfree+0x40>)
 8008b16:	218f      	movs	r1, #143	; 0x8f
 8008b18:	f001 ff4a 	bl	800a9b0 <__assert_func>
 8008b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b20:	6006      	str	r6, [r0, #0]
 8008b22:	60c6      	str	r6, [r0, #12]
 8008b24:	b13c      	cbz	r4, 8008b36 <_Bfree+0x3a>
 8008b26:	69eb      	ldr	r3, [r5, #28]
 8008b28:	6862      	ldr	r2, [r4, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b30:	6021      	str	r1, [r4, #0]
 8008b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	0800d5f6 	.word	0x0800d5f6
 8008b3c:	0800d676 	.word	0x0800d676

08008b40 <__multadd>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	690d      	ldr	r5, [r1, #16]
 8008b46:	4607      	mov	r7, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	461e      	mov	r6, r3
 8008b4c:	f101 0c14 	add.w	ip, r1, #20
 8008b50:	2000      	movs	r0, #0
 8008b52:	f8dc 3000 	ldr.w	r3, [ip]
 8008b56:	b299      	uxth	r1, r3
 8008b58:	fb02 6101 	mla	r1, r2, r1, r6
 8008b5c:	0c1e      	lsrs	r6, r3, #16
 8008b5e:	0c0b      	lsrs	r3, r1, #16
 8008b60:	fb02 3306 	mla	r3, r2, r6, r3
 8008b64:	b289      	uxth	r1, r1
 8008b66:	3001      	adds	r0, #1
 8008b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b76:	dcec      	bgt.n	8008b52 <__multadd+0x12>
 8008b78:	b30e      	cbz	r6, 8008bbe <__multadd+0x7e>
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc19      	bgt.n	8008bb4 <__multadd+0x74>
 8008b80:	6861      	ldr	r1, [r4, #4]
 8008b82:	4638      	mov	r0, r7
 8008b84:	3101      	adds	r1, #1
 8008b86:	f7ff ff79 	bl	8008a7c <_Balloc>
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <__multadd+0x5a>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <__multadd+0x84>)
 8008b92:	480d      	ldr	r0, [pc, #52]	; (8008bc8 <__multadd+0x88>)
 8008b94:	21ba      	movs	r1, #186	; 0xba
 8008b96:	f001 ff0b 	bl	800a9b0 <__assert_func>
 8008b9a:	6922      	ldr	r2, [r4, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	f104 010c 	add.w	r1, r4, #12
 8008ba2:	0092      	lsls	r2, r2, #2
 8008ba4:	300c      	adds	r0, #12
 8008ba6:	f001 feeb 	bl	800a980 <memcpy>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4638      	mov	r0, r7
 8008bae:	f7ff ffa5 	bl	8008afc <_Bfree>
 8008bb2:	4644      	mov	r4, r8
 8008bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bb8:	3501      	adds	r5, #1
 8008bba:	615e      	str	r6, [r3, #20]
 8008bbc:	6125      	str	r5, [r4, #16]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc4:	0800d665 	.word	0x0800d665
 8008bc8:	0800d676 	.word	0x0800d676

08008bcc <__s2b>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	4615      	mov	r5, r2
 8008bd4:	461f      	mov	r7, r3
 8008bd6:	2209      	movs	r2, #9
 8008bd8:	3308      	adds	r3, #8
 8008bda:	4606      	mov	r6, r0
 8008bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008be0:	2100      	movs	r1, #0
 8008be2:	2201      	movs	r2, #1
 8008be4:	429a      	cmp	r2, r3
 8008be6:	db09      	blt.n	8008bfc <__s2b+0x30>
 8008be8:	4630      	mov	r0, r6
 8008bea:	f7ff ff47 	bl	8008a7c <_Balloc>
 8008bee:	b940      	cbnz	r0, 8008c02 <__s2b+0x36>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <__s2b+0x8c>)
 8008bf4:	4819      	ldr	r0, [pc, #100]	; (8008c5c <__s2b+0x90>)
 8008bf6:	21d3      	movs	r1, #211	; 0xd3
 8008bf8:	f001 feda 	bl	800a9b0 <__assert_func>
 8008bfc:	0052      	lsls	r2, r2, #1
 8008bfe:	3101      	adds	r1, #1
 8008c00:	e7f0      	b.n	8008be4 <__s2b+0x18>
 8008c02:	9b08      	ldr	r3, [sp, #32]
 8008c04:	6143      	str	r3, [r0, #20]
 8008c06:	2d09      	cmp	r5, #9
 8008c08:	f04f 0301 	mov.w	r3, #1
 8008c0c:	6103      	str	r3, [r0, #16]
 8008c0e:	dd16      	ble.n	8008c3e <__s2b+0x72>
 8008c10:	f104 0909 	add.w	r9, r4, #9
 8008c14:	46c8      	mov	r8, r9
 8008c16:	442c      	add	r4, r5
 8008c18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	3b30      	subs	r3, #48	; 0x30
 8008c20:	220a      	movs	r2, #10
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff ff8c 	bl	8008b40 <__multadd>
 8008c28:	45a0      	cmp	r8, r4
 8008c2a:	d1f5      	bne.n	8008c18 <__s2b+0x4c>
 8008c2c:	f1a5 0408 	sub.w	r4, r5, #8
 8008c30:	444c      	add	r4, r9
 8008c32:	1b2d      	subs	r5, r5, r4
 8008c34:	1963      	adds	r3, r4, r5
 8008c36:	42bb      	cmp	r3, r7
 8008c38:	db04      	blt.n	8008c44 <__s2b+0x78>
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	340a      	adds	r4, #10
 8008c40:	2509      	movs	r5, #9
 8008c42:	e7f6      	b.n	8008c32 <__s2b+0x66>
 8008c44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c48:	4601      	mov	r1, r0
 8008c4a:	3b30      	subs	r3, #48	; 0x30
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff76 	bl	8008b40 <__multadd>
 8008c54:	e7ee      	b.n	8008c34 <__s2b+0x68>
 8008c56:	bf00      	nop
 8008c58:	0800d665 	.word	0x0800d665
 8008c5c:	0800d676 	.word	0x0800d676

08008c60 <__hi0bits>:
 8008c60:	0c03      	lsrs	r3, r0, #16
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	b9d3      	cbnz	r3, 8008c9c <__hi0bits+0x3c>
 8008c66:	0400      	lsls	r0, r0, #16
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c6e:	bf04      	itt	eq
 8008c70:	0200      	lsleq	r0, r0, #8
 8008c72:	3308      	addeq	r3, #8
 8008c74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c78:	bf04      	itt	eq
 8008c7a:	0100      	lsleq	r0, r0, #4
 8008c7c:	3304      	addeq	r3, #4
 8008c7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c82:	bf04      	itt	eq
 8008c84:	0080      	lsleq	r0, r0, #2
 8008c86:	3302      	addeq	r3, #2
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	db05      	blt.n	8008c98 <__hi0bits+0x38>
 8008c8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c90:	f103 0301 	add.w	r3, r3, #1
 8008c94:	bf08      	it	eq
 8008c96:	2320      	moveq	r3, #32
 8008c98:	4618      	mov	r0, r3
 8008c9a:	4770      	bx	lr
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e7e4      	b.n	8008c6a <__hi0bits+0xa>

08008ca0 <__lo0bits>:
 8008ca0:	6803      	ldr	r3, [r0, #0]
 8008ca2:	f013 0207 	ands.w	r2, r3, #7
 8008ca6:	d00c      	beq.n	8008cc2 <__lo0bits+0x22>
 8008ca8:	07d9      	lsls	r1, r3, #31
 8008caa:	d422      	bmi.n	8008cf2 <__lo0bits+0x52>
 8008cac:	079a      	lsls	r2, r3, #30
 8008cae:	bf49      	itett	mi
 8008cb0:	085b      	lsrmi	r3, r3, #1
 8008cb2:	089b      	lsrpl	r3, r3, #2
 8008cb4:	6003      	strmi	r3, [r0, #0]
 8008cb6:	2201      	movmi	r2, #1
 8008cb8:	bf5c      	itt	pl
 8008cba:	6003      	strpl	r3, [r0, #0]
 8008cbc:	2202      	movpl	r2, #2
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4770      	bx	lr
 8008cc2:	b299      	uxth	r1, r3
 8008cc4:	b909      	cbnz	r1, 8008cca <__lo0bits+0x2a>
 8008cc6:	0c1b      	lsrs	r3, r3, #16
 8008cc8:	2210      	movs	r2, #16
 8008cca:	b2d9      	uxtb	r1, r3
 8008ccc:	b909      	cbnz	r1, 8008cd2 <__lo0bits+0x32>
 8008cce:	3208      	adds	r2, #8
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	0719      	lsls	r1, r3, #28
 8008cd4:	bf04      	itt	eq
 8008cd6:	091b      	lsreq	r3, r3, #4
 8008cd8:	3204      	addeq	r2, #4
 8008cda:	0799      	lsls	r1, r3, #30
 8008cdc:	bf04      	itt	eq
 8008cde:	089b      	lsreq	r3, r3, #2
 8008ce0:	3202      	addeq	r2, #2
 8008ce2:	07d9      	lsls	r1, r3, #31
 8008ce4:	d403      	bmi.n	8008cee <__lo0bits+0x4e>
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	f102 0201 	add.w	r2, r2, #1
 8008cec:	d003      	beq.n	8008cf6 <__lo0bits+0x56>
 8008cee:	6003      	str	r3, [r0, #0]
 8008cf0:	e7e5      	b.n	8008cbe <__lo0bits+0x1e>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	e7e3      	b.n	8008cbe <__lo0bits+0x1e>
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	e7e1      	b.n	8008cbe <__lo0bits+0x1e>
	...

08008cfc <__i2b>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	460c      	mov	r4, r1
 8008d00:	2101      	movs	r1, #1
 8008d02:	f7ff febb 	bl	8008a7c <_Balloc>
 8008d06:	4602      	mov	r2, r0
 8008d08:	b928      	cbnz	r0, 8008d16 <__i2b+0x1a>
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <__i2b+0x24>)
 8008d0c:	4805      	ldr	r0, [pc, #20]	; (8008d24 <__i2b+0x28>)
 8008d0e:	f240 1145 	movw	r1, #325	; 0x145
 8008d12:	f001 fe4d 	bl	800a9b0 <__assert_func>
 8008d16:	2301      	movs	r3, #1
 8008d18:	6144      	str	r4, [r0, #20]
 8008d1a:	6103      	str	r3, [r0, #16]
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	bf00      	nop
 8008d20:	0800d665 	.word	0x0800d665
 8008d24:	0800d676 	.word	0x0800d676

08008d28 <__multiply>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4691      	mov	r9, r2
 8008d2e:	690a      	ldr	r2, [r1, #16]
 8008d30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	bfb8      	it	lt
 8008d38:	460b      	movlt	r3, r1
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	bfbc      	itt	lt
 8008d3e:	464c      	movlt	r4, r9
 8008d40:	4699      	movlt	r9, r3
 8008d42:	6927      	ldr	r7, [r4, #16]
 8008d44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d48:	68a3      	ldr	r3, [r4, #8]
 8008d4a:	6861      	ldr	r1, [r4, #4]
 8008d4c:	eb07 060a 	add.w	r6, r7, sl
 8008d50:	42b3      	cmp	r3, r6
 8008d52:	b085      	sub	sp, #20
 8008d54:	bfb8      	it	lt
 8008d56:	3101      	addlt	r1, #1
 8008d58:	f7ff fe90 	bl	8008a7c <_Balloc>
 8008d5c:	b930      	cbnz	r0, 8008d6c <__multiply+0x44>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b44      	ldr	r3, [pc, #272]	; (8008e74 <__multiply+0x14c>)
 8008d62:	4845      	ldr	r0, [pc, #276]	; (8008e78 <__multiply+0x150>)
 8008d64:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d68:	f001 fe22 	bl	800a9b0 <__assert_func>
 8008d6c:	f100 0514 	add.w	r5, r0, #20
 8008d70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d74:	462b      	mov	r3, r5
 8008d76:	2200      	movs	r2, #0
 8008d78:	4543      	cmp	r3, r8
 8008d7a:	d321      	bcc.n	8008dc0 <__multiply+0x98>
 8008d7c:	f104 0314 	add.w	r3, r4, #20
 8008d80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d84:	f109 0314 	add.w	r3, r9, #20
 8008d88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d8c:	9202      	str	r2, [sp, #8]
 8008d8e:	1b3a      	subs	r2, r7, r4
 8008d90:	3a15      	subs	r2, #21
 8008d92:	f022 0203 	bic.w	r2, r2, #3
 8008d96:	3204      	adds	r2, #4
 8008d98:	f104 0115 	add.w	r1, r4, #21
 8008d9c:	428f      	cmp	r7, r1
 8008d9e:	bf38      	it	cc
 8008da0:	2204      	movcc	r2, #4
 8008da2:	9201      	str	r2, [sp, #4]
 8008da4:	9a02      	ldr	r2, [sp, #8]
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d80c      	bhi.n	8008dc6 <__multiply+0x9e>
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	dd03      	ble.n	8008db8 <__multiply+0x90>
 8008db0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d05b      	beq.n	8008e70 <__multiply+0x148>
 8008db8:	6106      	str	r6, [r0, #16]
 8008dba:	b005      	add	sp, #20
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	f843 2b04 	str.w	r2, [r3], #4
 8008dc4:	e7d8      	b.n	8008d78 <__multiply+0x50>
 8008dc6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008dca:	f1ba 0f00 	cmp.w	sl, #0
 8008dce:	d024      	beq.n	8008e1a <__multiply+0xf2>
 8008dd0:	f104 0e14 	add.w	lr, r4, #20
 8008dd4:	46a9      	mov	r9, r5
 8008dd6:	f04f 0c00 	mov.w	ip, #0
 8008dda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008dde:	f8d9 1000 	ldr.w	r1, [r9]
 8008de2:	fa1f fb82 	uxth.w	fp, r2
 8008de6:	b289      	uxth	r1, r1
 8008de8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008dec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008df0:	f8d9 2000 	ldr.w	r2, [r9]
 8008df4:	4461      	add	r1, ip
 8008df6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dfa:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e02:	b289      	uxth	r1, r1
 8008e04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e08:	4577      	cmp	r7, lr
 8008e0a:	f849 1b04 	str.w	r1, [r9], #4
 8008e0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e12:	d8e2      	bhi.n	8008dda <__multiply+0xb2>
 8008e14:	9a01      	ldr	r2, [sp, #4]
 8008e16:	f845 c002 	str.w	ip, [r5, r2]
 8008e1a:	9a03      	ldr	r2, [sp, #12]
 8008e1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e20:	3304      	adds	r3, #4
 8008e22:	f1b9 0f00 	cmp.w	r9, #0
 8008e26:	d021      	beq.n	8008e6c <__multiply+0x144>
 8008e28:	6829      	ldr	r1, [r5, #0]
 8008e2a:	f104 0c14 	add.w	ip, r4, #20
 8008e2e:	46ae      	mov	lr, r5
 8008e30:	f04f 0a00 	mov.w	sl, #0
 8008e34:	f8bc b000 	ldrh.w	fp, [ip]
 8008e38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e3c:	fb09 220b 	mla	r2, r9, fp, r2
 8008e40:	4452      	add	r2, sl
 8008e42:	b289      	uxth	r1, r1
 8008e44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e48:	f84e 1b04 	str.w	r1, [lr], #4
 8008e4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e54:	f8be 1000 	ldrh.w	r1, [lr]
 8008e58:	fb09 110a 	mla	r1, r9, sl, r1
 8008e5c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e60:	4567      	cmp	r7, ip
 8008e62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e66:	d8e5      	bhi.n	8008e34 <__multiply+0x10c>
 8008e68:	9a01      	ldr	r2, [sp, #4]
 8008e6a:	50a9      	str	r1, [r5, r2]
 8008e6c:	3504      	adds	r5, #4
 8008e6e:	e799      	b.n	8008da4 <__multiply+0x7c>
 8008e70:	3e01      	subs	r6, #1
 8008e72:	e79b      	b.n	8008dac <__multiply+0x84>
 8008e74:	0800d665 	.word	0x0800d665
 8008e78:	0800d676 	.word	0x0800d676

08008e7c <__pow5mult>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	4615      	mov	r5, r2
 8008e82:	f012 0203 	ands.w	r2, r2, #3
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	d007      	beq.n	8008e9c <__pow5mult+0x20>
 8008e8c:	4c25      	ldr	r4, [pc, #148]	; (8008f24 <__pow5mult+0xa8>)
 8008e8e:	3a01      	subs	r2, #1
 8008e90:	2300      	movs	r3, #0
 8008e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e96:	f7ff fe53 	bl	8008b40 <__multadd>
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	10ad      	asrs	r5, r5, #2
 8008e9e:	d03d      	beq.n	8008f1c <__pow5mult+0xa0>
 8008ea0:	69f4      	ldr	r4, [r6, #28]
 8008ea2:	b97c      	cbnz	r4, 8008ec4 <__pow5mult+0x48>
 8008ea4:	2010      	movs	r0, #16
 8008ea6:	f7ff fd35 	bl	8008914 <malloc>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	61f0      	str	r0, [r6, #28]
 8008eae:	b928      	cbnz	r0, 8008ebc <__pow5mult+0x40>
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <__pow5mult+0xac>)
 8008eb2:	481e      	ldr	r0, [pc, #120]	; (8008f2c <__pow5mult+0xb0>)
 8008eb4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008eb8:	f001 fd7a 	bl	800a9b0 <__assert_func>
 8008ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ec0:	6004      	str	r4, [r0, #0]
 8008ec2:	60c4      	str	r4, [r0, #12]
 8008ec4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ecc:	b94c      	cbnz	r4, 8008ee2 <__pow5mult+0x66>
 8008ece:	f240 2171 	movw	r1, #625	; 0x271
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff ff12 	bl	8008cfc <__i2b>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ede:	4604      	mov	r4, r0
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	07eb      	lsls	r3, r5, #31
 8008ee8:	d50a      	bpl.n	8008f00 <__pow5mult+0x84>
 8008eea:	4639      	mov	r1, r7
 8008eec:	4622      	mov	r2, r4
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7ff ff1a 	bl	8008d28 <__multiply>
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff fdff 	bl	8008afc <_Bfree>
 8008efe:	4647      	mov	r7, r8
 8008f00:	106d      	asrs	r5, r5, #1
 8008f02:	d00b      	beq.n	8008f1c <__pow5mult+0xa0>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	b938      	cbnz	r0, 8008f18 <__pow5mult+0x9c>
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff ff0b 	bl	8008d28 <__multiply>
 8008f12:	6020      	str	r0, [r4, #0]
 8008f14:	f8c0 9000 	str.w	r9, [r0]
 8008f18:	4604      	mov	r4, r0
 8008f1a:	e7e4      	b.n	8008ee6 <__pow5mult+0x6a>
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f22:	bf00      	nop
 8008f24:	0800d7c0 	.word	0x0800d7c0
 8008f28:	0800d5f6 	.word	0x0800d5f6
 8008f2c:	0800d676 	.word	0x0800d676

08008f30 <__lshift>:
 8008f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f34:	460c      	mov	r4, r1
 8008f36:	6849      	ldr	r1, [r1, #4]
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f3e:	68a3      	ldr	r3, [r4, #8]
 8008f40:	4607      	mov	r7, r0
 8008f42:	4691      	mov	r9, r2
 8008f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f48:	f108 0601 	add.w	r6, r8, #1
 8008f4c:	42b3      	cmp	r3, r6
 8008f4e:	db0b      	blt.n	8008f68 <__lshift+0x38>
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff fd93 	bl	8008a7c <_Balloc>
 8008f56:	4605      	mov	r5, r0
 8008f58:	b948      	cbnz	r0, 8008f6e <__lshift+0x3e>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <__lshift+0xd0>)
 8008f5e:	4829      	ldr	r0, [pc, #164]	; (8009004 <__lshift+0xd4>)
 8008f60:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f64:	f001 fd24 	bl	800a9b0 <__assert_func>
 8008f68:	3101      	adds	r1, #1
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	e7ee      	b.n	8008f4c <__lshift+0x1c>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f100 0114 	add.w	r1, r0, #20
 8008f74:	f100 0210 	add.w	r2, r0, #16
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4553      	cmp	r3, sl
 8008f7c:	db33      	blt.n	8008fe6 <__lshift+0xb6>
 8008f7e:	6920      	ldr	r0, [r4, #16]
 8008f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f84:	f104 0314 	add.w	r3, r4, #20
 8008f88:	f019 091f 	ands.w	r9, r9, #31
 8008f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f94:	d02b      	beq.n	8008fee <__lshift+0xbe>
 8008f96:	f1c9 0e20 	rsb	lr, r9, #32
 8008f9a:	468a      	mov	sl, r1
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	fa00 f009 	lsl.w	r0, r0, r9
 8008fa4:	4310      	orrs	r0, r2
 8008fa6:	f84a 0b04 	str.w	r0, [sl], #4
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	459c      	cmp	ip, r3
 8008fb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fb4:	d8f3      	bhi.n	8008f9e <__lshift+0x6e>
 8008fb6:	ebac 0304 	sub.w	r3, ip, r4
 8008fba:	3b15      	subs	r3, #21
 8008fbc:	f023 0303 	bic.w	r3, r3, #3
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	f104 0015 	add.w	r0, r4, #21
 8008fc6:	4584      	cmp	ip, r0
 8008fc8:	bf38      	it	cc
 8008fca:	2304      	movcc	r3, #4
 8008fcc:	50ca      	str	r2, [r1, r3]
 8008fce:	b10a      	cbz	r2, 8008fd4 <__lshift+0xa4>
 8008fd0:	f108 0602 	add.w	r6, r8, #2
 8008fd4:	3e01      	subs	r6, #1
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	612e      	str	r6, [r5, #16]
 8008fda:	4621      	mov	r1, r4
 8008fdc:	f7ff fd8e 	bl	8008afc <_Bfree>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fea:	3301      	adds	r3, #1
 8008fec:	e7c5      	b.n	8008f7a <__lshift+0x4a>
 8008fee:	3904      	subs	r1, #4
 8008ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ff8:	459c      	cmp	ip, r3
 8008ffa:	d8f9      	bhi.n	8008ff0 <__lshift+0xc0>
 8008ffc:	e7ea      	b.n	8008fd4 <__lshift+0xa4>
 8008ffe:	bf00      	nop
 8009000:	0800d665 	.word	0x0800d665
 8009004:	0800d676 	.word	0x0800d676

08009008 <__mcmp>:
 8009008:	b530      	push	{r4, r5, lr}
 800900a:	6902      	ldr	r2, [r0, #16]
 800900c:	690c      	ldr	r4, [r1, #16]
 800900e:	1b12      	subs	r2, r2, r4
 8009010:	d10e      	bne.n	8009030 <__mcmp+0x28>
 8009012:	f100 0314 	add.w	r3, r0, #20
 8009016:	3114      	adds	r1, #20
 8009018:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800901c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009020:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009024:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009028:	42a5      	cmp	r5, r4
 800902a:	d003      	beq.n	8009034 <__mcmp+0x2c>
 800902c:	d305      	bcc.n	800903a <__mcmp+0x32>
 800902e:	2201      	movs	r2, #1
 8009030:	4610      	mov	r0, r2
 8009032:	bd30      	pop	{r4, r5, pc}
 8009034:	4283      	cmp	r3, r0
 8009036:	d3f3      	bcc.n	8009020 <__mcmp+0x18>
 8009038:	e7fa      	b.n	8009030 <__mcmp+0x28>
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	e7f7      	b.n	8009030 <__mcmp+0x28>

08009040 <__mdiff>:
 8009040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	4606      	mov	r6, r0
 8009048:	4611      	mov	r1, r2
 800904a:	4620      	mov	r0, r4
 800904c:	4690      	mov	r8, r2
 800904e:	f7ff ffdb 	bl	8009008 <__mcmp>
 8009052:	1e05      	subs	r5, r0, #0
 8009054:	d110      	bne.n	8009078 <__mdiff+0x38>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff fd0f 	bl	8008a7c <_Balloc>
 800905e:	b930      	cbnz	r0, 800906e <__mdiff+0x2e>
 8009060:	4b3a      	ldr	r3, [pc, #232]	; (800914c <__mdiff+0x10c>)
 8009062:	4602      	mov	r2, r0
 8009064:	f240 2137 	movw	r1, #567	; 0x237
 8009068:	4839      	ldr	r0, [pc, #228]	; (8009150 <__mdiff+0x110>)
 800906a:	f001 fca1 	bl	800a9b0 <__assert_func>
 800906e:	2301      	movs	r3, #1
 8009070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	bfa4      	itt	ge
 800907a:	4643      	movge	r3, r8
 800907c:	46a0      	movge	r8, r4
 800907e:	4630      	mov	r0, r6
 8009080:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009084:	bfa6      	itte	ge
 8009086:	461c      	movge	r4, r3
 8009088:	2500      	movge	r5, #0
 800908a:	2501      	movlt	r5, #1
 800908c:	f7ff fcf6 	bl	8008a7c <_Balloc>
 8009090:	b920      	cbnz	r0, 800909c <__mdiff+0x5c>
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <__mdiff+0x10c>)
 8009094:	4602      	mov	r2, r0
 8009096:	f240 2145 	movw	r1, #581	; 0x245
 800909a:	e7e5      	b.n	8009068 <__mdiff+0x28>
 800909c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090a0:	6926      	ldr	r6, [r4, #16]
 80090a2:	60c5      	str	r5, [r0, #12]
 80090a4:	f104 0914 	add.w	r9, r4, #20
 80090a8:	f108 0514 	add.w	r5, r8, #20
 80090ac:	f100 0e14 	add.w	lr, r0, #20
 80090b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090b8:	f108 0210 	add.w	r2, r8, #16
 80090bc:	46f2      	mov	sl, lr
 80090be:	2100      	movs	r1, #0
 80090c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80090c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090c8:	fa11 f88b 	uxtah	r8, r1, fp
 80090cc:	b299      	uxth	r1, r3
 80090ce:	0c1b      	lsrs	r3, r3, #16
 80090d0:	eba8 0801 	sub.w	r8, r8, r1
 80090d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090dc:	fa1f f888 	uxth.w	r8, r8
 80090e0:	1419      	asrs	r1, r3, #16
 80090e2:	454e      	cmp	r6, r9
 80090e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090e8:	f84a 3b04 	str.w	r3, [sl], #4
 80090ec:	d8e8      	bhi.n	80090c0 <__mdiff+0x80>
 80090ee:	1b33      	subs	r3, r6, r4
 80090f0:	3b15      	subs	r3, #21
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	3304      	adds	r3, #4
 80090f8:	3415      	adds	r4, #21
 80090fa:	42a6      	cmp	r6, r4
 80090fc:	bf38      	it	cc
 80090fe:	2304      	movcc	r3, #4
 8009100:	441d      	add	r5, r3
 8009102:	4473      	add	r3, lr
 8009104:	469e      	mov	lr, r3
 8009106:	462e      	mov	r6, r5
 8009108:	4566      	cmp	r6, ip
 800910a:	d30e      	bcc.n	800912a <__mdiff+0xea>
 800910c:	f10c 0203 	add.w	r2, ip, #3
 8009110:	1b52      	subs	r2, r2, r5
 8009112:	f022 0203 	bic.w	r2, r2, #3
 8009116:	3d03      	subs	r5, #3
 8009118:	45ac      	cmp	ip, r5
 800911a:	bf38      	it	cc
 800911c:	2200      	movcc	r2, #0
 800911e:	4413      	add	r3, r2
 8009120:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009124:	b17a      	cbz	r2, 8009146 <__mdiff+0x106>
 8009126:	6107      	str	r7, [r0, #16]
 8009128:	e7a4      	b.n	8009074 <__mdiff+0x34>
 800912a:	f856 8b04 	ldr.w	r8, [r6], #4
 800912e:	fa11 f288 	uxtah	r2, r1, r8
 8009132:	1414      	asrs	r4, r2, #16
 8009134:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009138:	b292      	uxth	r2, r2
 800913a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800913e:	f84e 2b04 	str.w	r2, [lr], #4
 8009142:	1421      	asrs	r1, r4, #16
 8009144:	e7e0      	b.n	8009108 <__mdiff+0xc8>
 8009146:	3f01      	subs	r7, #1
 8009148:	e7ea      	b.n	8009120 <__mdiff+0xe0>
 800914a:	bf00      	nop
 800914c:	0800d665 	.word	0x0800d665
 8009150:	0800d676 	.word	0x0800d676

08009154 <__ulp>:
 8009154:	b082      	sub	sp, #8
 8009156:	ed8d 0b00 	vstr	d0, [sp]
 800915a:	9a01      	ldr	r2, [sp, #4]
 800915c:	4b0f      	ldr	r3, [pc, #60]	; (800919c <__ulp+0x48>)
 800915e:	4013      	ands	r3, r2
 8009160:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009164:	2b00      	cmp	r3, #0
 8009166:	dc08      	bgt.n	800917a <__ulp+0x26>
 8009168:	425b      	negs	r3, r3
 800916a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800916e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009172:	da04      	bge.n	800917e <__ulp+0x2a>
 8009174:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009178:	4113      	asrs	r3, r2
 800917a:	2200      	movs	r2, #0
 800917c:	e008      	b.n	8009190 <__ulp+0x3c>
 800917e:	f1a2 0314 	sub.w	r3, r2, #20
 8009182:	2b1e      	cmp	r3, #30
 8009184:	bfda      	itte	le
 8009186:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800918a:	40da      	lsrle	r2, r3
 800918c:	2201      	movgt	r2, #1
 800918e:	2300      	movs	r3, #0
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	ec41 0b10 	vmov	d0, r0, r1
 8009198:	b002      	add	sp, #8
 800919a:	4770      	bx	lr
 800919c:	7ff00000 	.word	0x7ff00000

080091a0 <__b2d>:
 80091a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a4:	6906      	ldr	r6, [r0, #16]
 80091a6:	f100 0814 	add.w	r8, r0, #20
 80091aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80091ae:	1f37      	subs	r7, r6, #4
 80091b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7ff fd53 	bl	8008c60 <__hi0bits>
 80091ba:	f1c0 0320 	rsb	r3, r0, #32
 80091be:	280a      	cmp	r0, #10
 80091c0:	600b      	str	r3, [r1, #0]
 80091c2:	491b      	ldr	r1, [pc, #108]	; (8009230 <__b2d+0x90>)
 80091c4:	dc15      	bgt.n	80091f2 <__b2d+0x52>
 80091c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80091ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80091ce:	45b8      	cmp	r8, r7
 80091d0:	ea43 0501 	orr.w	r5, r3, r1
 80091d4:	bf34      	ite	cc
 80091d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091da:	2300      	movcs	r3, #0
 80091dc:	3015      	adds	r0, #21
 80091de:	fa02 f000 	lsl.w	r0, r2, r0
 80091e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80091e6:	4303      	orrs	r3, r0
 80091e8:	461c      	mov	r4, r3
 80091ea:	ec45 4b10 	vmov	d0, r4, r5
 80091ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f2:	45b8      	cmp	r8, r7
 80091f4:	bf3a      	itte	cc
 80091f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80091fe:	2300      	movcs	r3, #0
 8009200:	380b      	subs	r0, #11
 8009202:	d012      	beq.n	800922a <__b2d+0x8a>
 8009204:	f1c0 0120 	rsb	r1, r0, #32
 8009208:	fa23 f401 	lsr.w	r4, r3, r1
 800920c:	4082      	lsls	r2, r0
 800920e:	4322      	orrs	r2, r4
 8009210:	4547      	cmp	r7, r8
 8009212:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009216:	bf8c      	ite	hi
 8009218:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800921c:	2200      	movls	r2, #0
 800921e:	4083      	lsls	r3, r0
 8009220:	40ca      	lsrs	r2, r1
 8009222:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009226:	4313      	orrs	r3, r2
 8009228:	e7de      	b.n	80091e8 <__b2d+0x48>
 800922a:	ea42 0501 	orr.w	r5, r2, r1
 800922e:	e7db      	b.n	80091e8 <__b2d+0x48>
 8009230:	3ff00000 	.word	0x3ff00000

08009234 <__d2b>:
 8009234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009238:	460f      	mov	r7, r1
 800923a:	2101      	movs	r1, #1
 800923c:	ec59 8b10 	vmov	r8, r9, d0
 8009240:	4616      	mov	r6, r2
 8009242:	f7ff fc1b 	bl	8008a7c <_Balloc>
 8009246:	4604      	mov	r4, r0
 8009248:	b930      	cbnz	r0, 8009258 <__d2b+0x24>
 800924a:	4602      	mov	r2, r0
 800924c:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <__d2b+0xac>)
 800924e:	4825      	ldr	r0, [pc, #148]	; (80092e4 <__d2b+0xb0>)
 8009250:	f240 310f 	movw	r1, #783	; 0x30f
 8009254:	f001 fbac 	bl	800a9b0 <__assert_func>
 8009258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800925c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009260:	bb2d      	cbnz	r5, 80092ae <__d2b+0x7a>
 8009262:	9301      	str	r3, [sp, #4]
 8009264:	f1b8 0300 	subs.w	r3, r8, #0
 8009268:	d026      	beq.n	80092b8 <__d2b+0x84>
 800926a:	4668      	mov	r0, sp
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	f7ff fd17 	bl	8008ca0 <__lo0bits>
 8009272:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009276:	b1e8      	cbz	r0, 80092b4 <__d2b+0x80>
 8009278:	f1c0 0320 	rsb	r3, r0, #32
 800927c:	fa02 f303 	lsl.w	r3, r2, r3
 8009280:	430b      	orrs	r3, r1
 8009282:	40c2      	lsrs	r2, r0
 8009284:	6163      	str	r3, [r4, #20]
 8009286:	9201      	str	r2, [sp, #4]
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	61a3      	str	r3, [r4, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	bf14      	ite	ne
 8009290:	2202      	movne	r2, #2
 8009292:	2201      	moveq	r2, #1
 8009294:	6122      	str	r2, [r4, #16]
 8009296:	b1bd      	cbz	r5, 80092c8 <__d2b+0x94>
 8009298:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800929c:	4405      	add	r5, r0
 800929e:	603d      	str	r5, [r7, #0]
 80092a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092a4:	6030      	str	r0, [r6, #0]
 80092a6:	4620      	mov	r0, r4
 80092a8:	b003      	add	sp, #12
 80092aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092b2:	e7d6      	b.n	8009262 <__d2b+0x2e>
 80092b4:	6161      	str	r1, [r4, #20]
 80092b6:	e7e7      	b.n	8009288 <__d2b+0x54>
 80092b8:	a801      	add	r0, sp, #4
 80092ba:	f7ff fcf1 	bl	8008ca0 <__lo0bits>
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	6163      	str	r3, [r4, #20]
 80092c2:	3020      	adds	r0, #32
 80092c4:	2201      	movs	r2, #1
 80092c6:	e7e5      	b.n	8009294 <__d2b+0x60>
 80092c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092d0:	6038      	str	r0, [r7, #0]
 80092d2:	6918      	ldr	r0, [r3, #16]
 80092d4:	f7ff fcc4 	bl	8008c60 <__hi0bits>
 80092d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092dc:	e7e2      	b.n	80092a4 <__d2b+0x70>
 80092de:	bf00      	nop
 80092e0:	0800d665 	.word	0x0800d665
 80092e4:	0800d676 	.word	0x0800d676

080092e8 <__ratio>:
 80092e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	4688      	mov	r8, r1
 80092ee:	4669      	mov	r1, sp
 80092f0:	4681      	mov	r9, r0
 80092f2:	f7ff ff55 	bl	80091a0 <__b2d>
 80092f6:	a901      	add	r1, sp, #4
 80092f8:	4640      	mov	r0, r8
 80092fa:	ec55 4b10 	vmov	r4, r5, d0
 80092fe:	f7ff ff4f 	bl	80091a0 <__b2d>
 8009302:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009306:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800930a:	eba3 0c02 	sub.w	ip, r3, r2
 800930e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009318:	ec51 0b10 	vmov	r0, r1, d0
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfd6      	itet	le
 8009320:	460a      	movle	r2, r1
 8009322:	462a      	movgt	r2, r5
 8009324:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009328:	468b      	mov	fp, r1
 800932a:	462f      	mov	r7, r5
 800932c:	bfd4      	ite	le
 800932e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009332:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009336:	4620      	mov	r0, r4
 8009338:	ee10 2a10 	vmov	r2, s0
 800933c:	465b      	mov	r3, fp
 800933e:	4639      	mov	r1, r7
 8009340:	f7f7 faac 	bl	800089c <__aeabi_ddiv>
 8009344:	ec41 0b10 	vmov	d0, r0, r1
 8009348:	b003      	add	sp, #12
 800934a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800934e <__copybits>:
 800934e:	3901      	subs	r1, #1
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	1149      	asrs	r1, r1, #5
 8009354:	6914      	ldr	r4, [r2, #16]
 8009356:	3101      	adds	r1, #1
 8009358:	f102 0314 	add.w	r3, r2, #20
 800935c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009360:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009364:	1f05      	subs	r5, r0, #4
 8009366:	42a3      	cmp	r3, r4
 8009368:	d30c      	bcc.n	8009384 <__copybits+0x36>
 800936a:	1aa3      	subs	r3, r4, r2
 800936c:	3b11      	subs	r3, #17
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	3211      	adds	r2, #17
 8009374:	42a2      	cmp	r2, r4
 8009376:	bf88      	it	hi
 8009378:	2300      	movhi	r3, #0
 800937a:	4418      	add	r0, r3
 800937c:	2300      	movs	r3, #0
 800937e:	4288      	cmp	r0, r1
 8009380:	d305      	bcc.n	800938e <__copybits+0x40>
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	f853 6b04 	ldr.w	r6, [r3], #4
 8009388:	f845 6f04 	str.w	r6, [r5, #4]!
 800938c:	e7eb      	b.n	8009366 <__copybits+0x18>
 800938e:	f840 3b04 	str.w	r3, [r0], #4
 8009392:	e7f4      	b.n	800937e <__copybits+0x30>

08009394 <__any_on>:
 8009394:	f100 0214 	add.w	r2, r0, #20
 8009398:	6900      	ldr	r0, [r0, #16]
 800939a:	114b      	asrs	r3, r1, #5
 800939c:	4298      	cmp	r0, r3
 800939e:	b510      	push	{r4, lr}
 80093a0:	db11      	blt.n	80093c6 <__any_on+0x32>
 80093a2:	dd0a      	ble.n	80093ba <__any_on+0x26>
 80093a4:	f011 011f 	ands.w	r1, r1, #31
 80093a8:	d007      	beq.n	80093ba <__any_on+0x26>
 80093aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80093ae:	fa24 f001 	lsr.w	r0, r4, r1
 80093b2:	fa00 f101 	lsl.w	r1, r0, r1
 80093b6:	428c      	cmp	r4, r1
 80093b8:	d10b      	bne.n	80093d2 <__any_on+0x3e>
 80093ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093be:	4293      	cmp	r3, r2
 80093c0:	d803      	bhi.n	80093ca <__any_on+0x36>
 80093c2:	2000      	movs	r0, #0
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	4603      	mov	r3, r0
 80093c8:	e7f7      	b.n	80093ba <__any_on+0x26>
 80093ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093ce:	2900      	cmp	r1, #0
 80093d0:	d0f5      	beq.n	80093be <__any_on+0x2a>
 80093d2:	2001      	movs	r0, #1
 80093d4:	e7f6      	b.n	80093c4 <__any_on+0x30>

080093d6 <sulp>:
 80093d6:	b570      	push	{r4, r5, r6, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	460d      	mov	r5, r1
 80093dc:	ec45 4b10 	vmov	d0, r4, r5
 80093e0:	4616      	mov	r6, r2
 80093e2:	f7ff feb7 	bl	8009154 <__ulp>
 80093e6:	ec51 0b10 	vmov	r0, r1, d0
 80093ea:	b17e      	cbz	r6, 800940c <sulp+0x36>
 80093ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dd09      	ble.n	800940c <sulp+0x36>
 80093f8:	051b      	lsls	r3, r3, #20
 80093fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80093fe:	2400      	movs	r4, #0
 8009400:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009404:	4622      	mov	r2, r4
 8009406:	462b      	mov	r3, r5
 8009408:	f7f7 f91e 	bl	8000648 <__aeabi_dmul>
 800940c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009410 <_strtod_l>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	ed2d 8b02 	vpush	{d8}
 8009418:	b09b      	sub	sp, #108	; 0x6c
 800941a:	4604      	mov	r4, r0
 800941c:	9213      	str	r2, [sp, #76]	; 0x4c
 800941e:	2200      	movs	r2, #0
 8009420:	9216      	str	r2, [sp, #88]	; 0x58
 8009422:	460d      	mov	r5, r1
 8009424:	f04f 0800 	mov.w	r8, #0
 8009428:	f04f 0900 	mov.w	r9, #0
 800942c:	460a      	mov	r2, r1
 800942e:	9215      	str	r2, [sp, #84]	; 0x54
 8009430:	7811      	ldrb	r1, [r2, #0]
 8009432:	292b      	cmp	r1, #43	; 0x2b
 8009434:	d04c      	beq.n	80094d0 <_strtod_l+0xc0>
 8009436:	d83a      	bhi.n	80094ae <_strtod_l+0x9e>
 8009438:	290d      	cmp	r1, #13
 800943a:	d834      	bhi.n	80094a6 <_strtod_l+0x96>
 800943c:	2908      	cmp	r1, #8
 800943e:	d834      	bhi.n	80094aa <_strtod_l+0x9a>
 8009440:	2900      	cmp	r1, #0
 8009442:	d03d      	beq.n	80094c0 <_strtod_l+0xb0>
 8009444:	2200      	movs	r2, #0
 8009446:	920a      	str	r2, [sp, #40]	; 0x28
 8009448:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800944a:	7832      	ldrb	r2, [r6, #0]
 800944c:	2a30      	cmp	r2, #48	; 0x30
 800944e:	f040 80b4 	bne.w	80095ba <_strtod_l+0x1aa>
 8009452:	7872      	ldrb	r2, [r6, #1]
 8009454:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009458:	2a58      	cmp	r2, #88	; 0x58
 800945a:	d170      	bne.n	800953e <_strtod_l+0x12e>
 800945c:	9302      	str	r3, [sp, #8]
 800945e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	ab16      	add	r3, sp, #88	; 0x58
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	4a8e      	ldr	r2, [pc, #568]	; (80096a0 <_strtod_l+0x290>)
 8009468:	ab17      	add	r3, sp, #92	; 0x5c
 800946a:	a915      	add	r1, sp, #84	; 0x54
 800946c:	4620      	mov	r0, r4
 800946e:	f001 fb3b 	bl	800aae8 <__gethex>
 8009472:	f010 070f 	ands.w	r7, r0, #15
 8009476:	4605      	mov	r5, r0
 8009478:	d005      	beq.n	8009486 <_strtod_l+0x76>
 800947a:	2f06      	cmp	r7, #6
 800947c:	d12a      	bne.n	80094d4 <_strtod_l+0xc4>
 800947e:	3601      	adds	r6, #1
 8009480:	2300      	movs	r3, #0
 8009482:	9615      	str	r6, [sp, #84]	; 0x54
 8009484:	930a      	str	r3, [sp, #40]	; 0x28
 8009486:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009488:	2b00      	cmp	r3, #0
 800948a:	f040 857f 	bne.w	8009f8c <_strtod_l+0xb7c>
 800948e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009490:	b1db      	cbz	r3, 80094ca <_strtod_l+0xba>
 8009492:	4642      	mov	r2, r8
 8009494:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009498:	ec43 2b10 	vmov	d0, r2, r3
 800949c:	b01b      	add	sp, #108	; 0x6c
 800949e:	ecbd 8b02 	vpop	{d8}
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	2920      	cmp	r1, #32
 80094a8:	d1cc      	bne.n	8009444 <_strtod_l+0x34>
 80094aa:	3201      	adds	r2, #1
 80094ac:	e7bf      	b.n	800942e <_strtod_l+0x1e>
 80094ae:	292d      	cmp	r1, #45	; 0x2d
 80094b0:	d1c8      	bne.n	8009444 <_strtod_l+0x34>
 80094b2:	2101      	movs	r1, #1
 80094b4:	910a      	str	r1, [sp, #40]	; 0x28
 80094b6:	1c51      	adds	r1, r2, #1
 80094b8:	9115      	str	r1, [sp, #84]	; 0x54
 80094ba:	7852      	ldrb	r2, [r2, #1]
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d1c3      	bne.n	8009448 <_strtod_l+0x38>
 80094c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094c2:	9515      	str	r5, [sp, #84]	; 0x54
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f040 855f 	bne.w	8009f88 <_strtod_l+0xb78>
 80094ca:	4642      	mov	r2, r8
 80094cc:	464b      	mov	r3, r9
 80094ce:	e7e3      	b.n	8009498 <_strtod_l+0x88>
 80094d0:	2100      	movs	r1, #0
 80094d2:	e7ef      	b.n	80094b4 <_strtod_l+0xa4>
 80094d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094d6:	b13a      	cbz	r2, 80094e8 <_strtod_l+0xd8>
 80094d8:	2135      	movs	r1, #53	; 0x35
 80094da:	a818      	add	r0, sp, #96	; 0x60
 80094dc:	f7ff ff37 	bl	800934e <__copybits>
 80094e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094e2:	4620      	mov	r0, r4
 80094e4:	f7ff fb0a 	bl	8008afc <_Bfree>
 80094e8:	3f01      	subs	r7, #1
 80094ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094ec:	2f04      	cmp	r7, #4
 80094ee:	d806      	bhi.n	80094fe <_strtod_l+0xee>
 80094f0:	e8df f007 	tbb	[pc, r7]
 80094f4:	201d0314 	.word	0x201d0314
 80094f8:	14          	.byte	0x14
 80094f9:	00          	.byte	0x00
 80094fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80094fe:	05e9      	lsls	r1, r5, #23
 8009500:	bf48      	it	mi
 8009502:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009506:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800950a:	0d1b      	lsrs	r3, r3, #20
 800950c:	051b      	lsls	r3, r3, #20
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1b9      	bne.n	8009486 <_strtod_l+0x76>
 8009512:	f7fe fb03 	bl	8007b1c <__errno>
 8009516:	2322      	movs	r3, #34	; 0x22
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	e7b4      	b.n	8009486 <_strtod_l+0x76>
 800951c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009520:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009524:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009528:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800952c:	e7e7      	b.n	80094fe <_strtod_l+0xee>
 800952e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80096a8 <_strtod_l+0x298>
 8009532:	e7e4      	b.n	80094fe <_strtod_l+0xee>
 8009534:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009538:	f04f 38ff 	mov.w	r8, #4294967295
 800953c:	e7df      	b.n	80094fe <_strtod_l+0xee>
 800953e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	9215      	str	r2, [sp, #84]	; 0x54
 8009544:	785b      	ldrb	r3, [r3, #1]
 8009546:	2b30      	cmp	r3, #48	; 0x30
 8009548:	d0f9      	beq.n	800953e <_strtod_l+0x12e>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d09b      	beq.n	8009486 <_strtod_l+0x76>
 800954e:	2301      	movs	r3, #1
 8009550:	f04f 0a00 	mov.w	sl, #0
 8009554:	9304      	str	r3, [sp, #16]
 8009556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009558:	930b      	str	r3, [sp, #44]	; 0x2c
 800955a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800955e:	46d3      	mov	fp, sl
 8009560:	220a      	movs	r2, #10
 8009562:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009564:	7806      	ldrb	r6, [r0, #0]
 8009566:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800956a:	b2d9      	uxtb	r1, r3
 800956c:	2909      	cmp	r1, #9
 800956e:	d926      	bls.n	80095be <_strtod_l+0x1ae>
 8009570:	494c      	ldr	r1, [pc, #304]	; (80096a4 <_strtod_l+0x294>)
 8009572:	2201      	movs	r2, #1
 8009574:	f001 f9c0 	bl	800a8f8 <strncmp>
 8009578:	2800      	cmp	r0, #0
 800957a:	d030      	beq.n	80095de <_strtod_l+0x1ce>
 800957c:	2000      	movs	r0, #0
 800957e:	4632      	mov	r2, r6
 8009580:	9005      	str	r0, [sp, #20]
 8009582:	465e      	mov	r6, fp
 8009584:	4603      	mov	r3, r0
 8009586:	2a65      	cmp	r2, #101	; 0x65
 8009588:	d001      	beq.n	800958e <_strtod_l+0x17e>
 800958a:	2a45      	cmp	r2, #69	; 0x45
 800958c:	d113      	bne.n	80095b6 <_strtod_l+0x1a6>
 800958e:	b91e      	cbnz	r6, 8009598 <_strtod_l+0x188>
 8009590:	9a04      	ldr	r2, [sp, #16]
 8009592:	4302      	orrs	r2, r0
 8009594:	d094      	beq.n	80094c0 <_strtod_l+0xb0>
 8009596:	2600      	movs	r6, #0
 8009598:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800959a:	1c6a      	adds	r2, r5, #1
 800959c:	9215      	str	r2, [sp, #84]	; 0x54
 800959e:	786a      	ldrb	r2, [r5, #1]
 80095a0:	2a2b      	cmp	r2, #43	; 0x2b
 80095a2:	d074      	beq.n	800968e <_strtod_l+0x27e>
 80095a4:	2a2d      	cmp	r2, #45	; 0x2d
 80095a6:	d078      	beq.n	800969a <_strtod_l+0x28a>
 80095a8:	f04f 0c00 	mov.w	ip, #0
 80095ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80095b0:	2909      	cmp	r1, #9
 80095b2:	d97f      	bls.n	80096b4 <_strtod_l+0x2a4>
 80095b4:	9515      	str	r5, [sp, #84]	; 0x54
 80095b6:	2700      	movs	r7, #0
 80095b8:	e09e      	b.n	80096f8 <_strtod_l+0x2e8>
 80095ba:	2300      	movs	r3, #0
 80095bc:	e7c8      	b.n	8009550 <_strtod_l+0x140>
 80095be:	f1bb 0f08 	cmp.w	fp, #8
 80095c2:	bfd8      	it	le
 80095c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80095c6:	f100 0001 	add.w	r0, r0, #1
 80095ca:	bfda      	itte	le
 80095cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80095d0:	9309      	strle	r3, [sp, #36]	; 0x24
 80095d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80095d6:	f10b 0b01 	add.w	fp, fp, #1
 80095da:	9015      	str	r0, [sp, #84]	; 0x54
 80095dc:	e7c1      	b.n	8009562 <_strtod_l+0x152>
 80095de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	9215      	str	r2, [sp, #84]	; 0x54
 80095e4:	785a      	ldrb	r2, [r3, #1]
 80095e6:	f1bb 0f00 	cmp.w	fp, #0
 80095ea:	d037      	beq.n	800965c <_strtod_l+0x24c>
 80095ec:	9005      	str	r0, [sp, #20]
 80095ee:	465e      	mov	r6, fp
 80095f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80095f4:	2b09      	cmp	r3, #9
 80095f6:	d912      	bls.n	800961e <_strtod_l+0x20e>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e7c4      	b.n	8009586 <_strtod_l+0x176>
 80095fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	9215      	str	r2, [sp, #84]	; 0x54
 8009602:	785a      	ldrb	r2, [r3, #1]
 8009604:	3001      	adds	r0, #1
 8009606:	2a30      	cmp	r2, #48	; 0x30
 8009608:	d0f8      	beq.n	80095fc <_strtod_l+0x1ec>
 800960a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800960e:	2b08      	cmp	r3, #8
 8009610:	f200 84c1 	bhi.w	8009f96 <_strtod_l+0xb86>
 8009614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009616:	9005      	str	r0, [sp, #20]
 8009618:	2000      	movs	r0, #0
 800961a:	930b      	str	r3, [sp, #44]	; 0x2c
 800961c:	4606      	mov	r6, r0
 800961e:	3a30      	subs	r2, #48	; 0x30
 8009620:	f100 0301 	add.w	r3, r0, #1
 8009624:	d014      	beq.n	8009650 <_strtod_l+0x240>
 8009626:	9905      	ldr	r1, [sp, #20]
 8009628:	4419      	add	r1, r3
 800962a:	9105      	str	r1, [sp, #20]
 800962c:	4633      	mov	r3, r6
 800962e:	eb00 0c06 	add.w	ip, r0, r6
 8009632:	210a      	movs	r1, #10
 8009634:	4563      	cmp	r3, ip
 8009636:	d113      	bne.n	8009660 <_strtod_l+0x250>
 8009638:	1833      	adds	r3, r6, r0
 800963a:	2b08      	cmp	r3, #8
 800963c:	f106 0601 	add.w	r6, r6, #1
 8009640:	4406      	add	r6, r0
 8009642:	dc1a      	bgt.n	800967a <_strtod_l+0x26a>
 8009644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009646:	230a      	movs	r3, #10
 8009648:	fb03 2301 	mla	r3, r3, r1, r2
 800964c:	9309      	str	r3, [sp, #36]	; 0x24
 800964e:	2300      	movs	r3, #0
 8009650:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009652:	1c51      	adds	r1, r2, #1
 8009654:	9115      	str	r1, [sp, #84]	; 0x54
 8009656:	7852      	ldrb	r2, [r2, #1]
 8009658:	4618      	mov	r0, r3
 800965a:	e7c9      	b.n	80095f0 <_strtod_l+0x1e0>
 800965c:	4658      	mov	r0, fp
 800965e:	e7d2      	b.n	8009606 <_strtod_l+0x1f6>
 8009660:	2b08      	cmp	r3, #8
 8009662:	f103 0301 	add.w	r3, r3, #1
 8009666:	dc03      	bgt.n	8009670 <_strtod_l+0x260>
 8009668:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800966a:	434f      	muls	r7, r1
 800966c:	9709      	str	r7, [sp, #36]	; 0x24
 800966e:	e7e1      	b.n	8009634 <_strtod_l+0x224>
 8009670:	2b10      	cmp	r3, #16
 8009672:	bfd8      	it	le
 8009674:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009678:	e7dc      	b.n	8009634 <_strtod_l+0x224>
 800967a:	2e10      	cmp	r6, #16
 800967c:	bfdc      	itt	le
 800967e:	230a      	movle	r3, #10
 8009680:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009684:	e7e3      	b.n	800964e <_strtod_l+0x23e>
 8009686:	2300      	movs	r3, #0
 8009688:	9305      	str	r3, [sp, #20]
 800968a:	2301      	movs	r3, #1
 800968c:	e780      	b.n	8009590 <_strtod_l+0x180>
 800968e:	f04f 0c00 	mov.w	ip, #0
 8009692:	1caa      	adds	r2, r5, #2
 8009694:	9215      	str	r2, [sp, #84]	; 0x54
 8009696:	78aa      	ldrb	r2, [r5, #2]
 8009698:	e788      	b.n	80095ac <_strtod_l+0x19c>
 800969a:	f04f 0c01 	mov.w	ip, #1
 800969e:	e7f8      	b.n	8009692 <_strtod_l+0x282>
 80096a0:	0800d7d0 	.word	0x0800d7d0
 80096a4:	0800d7cc 	.word	0x0800d7cc
 80096a8:	7ff00000 	.word	0x7ff00000
 80096ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096ae:	1c51      	adds	r1, r2, #1
 80096b0:	9115      	str	r1, [sp, #84]	; 0x54
 80096b2:	7852      	ldrb	r2, [r2, #1]
 80096b4:	2a30      	cmp	r2, #48	; 0x30
 80096b6:	d0f9      	beq.n	80096ac <_strtod_l+0x29c>
 80096b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80096bc:	2908      	cmp	r1, #8
 80096be:	f63f af7a 	bhi.w	80095b6 <_strtod_l+0x1a6>
 80096c2:	3a30      	subs	r2, #48	; 0x30
 80096c4:	9208      	str	r2, [sp, #32]
 80096c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096c8:	920c      	str	r2, [sp, #48]	; 0x30
 80096ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096cc:	1c57      	adds	r7, r2, #1
 80096ce:	9715      	str	r7, [sp, #84]	; 0x54
 80096d0:	7852      	ldrb	r2, [r2, #1]
 80096d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80096d6:	f1be 0f09 	cmp.w	lr, #9
 80096da:	d938      	bls.n	800974e <_strtod_l+0x33e>
 80096dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096de:	1a7f      	subs	r7, r7, r1
 80096e0:	2f08      	cmp	r7, #8
 80096e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80096e6:	dc03      	bgt.n	80096f0 <_strtod_l+0x2e0>
 80096e8:	9908      	ldr	r1, [sp, #32]
 80096ea:	428f      	cmp	r7, r1
 80096ec:	bfa8      	it	ge
 80096ee:	460f      	movge	r7, r1
 80096f0:	f1bc 0f00 	cmp.w	ip, #0
 80096f4:	d000      	beq.n	80096f8 <_strtod_l+0x2e8>
 80096f6:	427f      	negs	r7, r7
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	d14f      	bne.n	800979c <_strtod_l+0x38c>
 80096fc:	9904      	ldr	r1, [sp, #16]
 80096fe:	4301      	orrs	r1, r0
 8009700:	f47f aec1 	bne.w	8009486 <_strtod_l+0x76>
 8009704:	2b00      	cmp	r3, #0
 8009706:	f47f aedb 	bne.w	80094c0 <_strtod_l+0xb0>
 800970a:	2a69      	cmp	r2, #105	; 0x69
 800970c:	d029      	beq.n	8009762 <_strtod_l+0x352>
 800970e:	dc26      	bgt.n	800975e <_strtod_l+0x34e>
 8009710:	2a49      	cmp	r2, #73	; 0x49
 8009712:	d026      	beq.n	8009762 <_strtod_l+0x352>
 8009714:	2a4e      	cmp	r2, #78	; 0x4e
 8009716:	f47f aed3 	bne.w	80094c0 <_strtod_l+0xb0>
 800971a:	499b      	ldr	r1, [pc, #620]	; (8009988 <_strtod_l+0x578>)
 800971c:	a815      	add	r0, sp, #84	; 0x54
 800971e:	f001 fc23 	bl	800af68 <__match>
 8009722:	2800      	cmp	r0, #0
 8009724:	f43f aecc 	beq.w	80094c0 <_strtod_l+0xb0>
 8009728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b28      	cmp	r3, #40	; 0x28
 800972e:	d12f      	bne.n	8009790 <_strtod_l+0x380>
 8009730:	4996      	ldr	r1, [pc, #600]	; (800998c <_strtod_l+0x57c>)
 8009732:	aa18      	add	r2, sp, #96	; 0x60
 8009734:	a815      	add	r0, sp, #84	; 0x54
 8009736:	f001 fc2b 	bl	800af90 <__hexnan>
 800973a:	2805      	cmp	r0, #5
 800973c:	d128      	bne.n	8009790 <_strtod_l+0x380>
 800973e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009744:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009748:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800974c:	e69b      	b.n	8009486 <_strtod_l+0x76>
 800974e:	9f08      	ldr	r7, [sp, #32]
 8009750:	210a      	movs	r1, #10
 8009752:	fb01 2107 	mla	r1, r1, r7, r2
 8009756:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800975a:	9208      	str	r2, [sp, #32]
 800975c:	e7b5      	b.n	80096ca <_strtod_l+0x2ba>
 800975e:	2a6e      	cmp	r2, #110	; 0x6e
 8009760:	e7d9      	b.n	8009716 <_strtod_l+0x306>
 8009762:	498b      	ldr	r1, [pc, #556]	; (8009990 <_strtod_l+0x580>)
 8009764:	a815      	add	r0, sp, #84	; 0x54
 8009766:	f001 fbff 	bl	800af68 <__match>
 800976a:	2800      	cmp	r0, #0
 800976c:	f43f aea8 	beq.w	80094c0 <_strtod_l+0xb0>
 8009770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009772:	4988      	ldr	r1, [pc, #544]	; (8009994 <_strtod_l+0x584>)
 8009774:	3b01      	subs	r3, #1
 8009776:	a815      	add	r0, sp, #84	; 0x54
 8009778:	9315      	str	r3, [sp, #84]	; 0x54
 800977a:	f001 fbf5 	bl	800af68 <__match>
 800977e:	b910      	cbnz	r0, 8009786 <_strtod_l+0x376>
 8009780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009782:	3301      	adds	r3, #1
 8009784:	9315      	str	r3, [sp, #84]	; 0x54
 8009786:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80099a4 <_strtod_l+0x594>
 800978a:	f04f 0800 	mov.w	r8, #0
 800978e:	e67a      	b.n	8009486 <_strtod_l+0x76>
 8009790:	4881      	ldr	r0, [pc, #516]	; (8009998 <_strtod_l+0x588>)
 8009792:	f001 f905 	bl	800a9a0 <nan>
 8009796:	ec59 8b10 	vmov	r8, r9, d0
 800979a:	e674      	b.n	8009486 <_strtod_l+0x76>
 800979c:	9b05      	ldr	r3, [sp, #20]
 800979e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a0:	1afb      	subs	r3, r7, r3
 80097a2:	f1bb 0f00 	cmp.w	fp, #0
 80097a6:	bf08      	it	eq
 80097a8:	46b3      	moveq	fp, r6
 80097aa:	2e10      	cmp	r6, #16
 80097ac:	9308      	str	r3, [sp, #32]
 80097ae:	4635      	mov	r5, r6
 80097b0:	bfa8      	it	ge
 80097b2:	2510      	movge	r5, #16
 80097b4:	f7f6 fece 	bl	8000554 <__aeabi_ui2d>
 80097b8:	2e09      	cmp	r6, #9
 80097ba:	4680      	mov	r8, r0
 80097bc:	4689      	mov	r9, r1
 80097be:	dd13      	ble.n	80097e8 <_strtod_l+0x3d8>
 80097c0:	4b76      	ldr	r3, [pc, #472]	; (800999c <_strtod_l+0x58c>)
 80097c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80097c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80097ca:	f7f6 ff3d 	bl	8000648 <__aeabi_dmul>
 80097ce:	4680      	mov	r8, r0
 80097d0:	4650      	mov	r0, sl
 80097d2:	4689      	mov	r9, r1
 80097d4:	f7f6 febe 	bl	8000554 <__aeabi_ui2d>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f6 fd7c 	bl	80002dc <__adddf3>
 80097e4:	4680      	mov	r8, r0
 80097e6:	4689      	mov	r9, r1
 80097e8:	2e0f      	cmp	r6, #15
 80097ea:	dc38      	bgt.n	800985e <_strtod_l+0x44e>
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f43f ae49 	beq.w	8009486 <_strtod_l+0x76>
 80097f4:	dd24      	ble.n	8009840 <_strtod_l+0x430>
 80097f6:	2b16      	cmp	r3, #22
 80097f8:	dc0b      	bgt.n	8009812 <_strtod_l+0x402>
 80097fa:	4968      	ldr	r1, [pc, #416]	; (800999c <_strtod_l+0x58c>)
 80097fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009804:	4642      	mov	r2, r8
 8009806:	464b      	mov	r3, r9
 8009808:	f7f6 ff1e 	bl	8000648 <__aeabi_dmul>
 800980c:	4680      	mov	r8, r0
 800980e:	4689      	mov	r9, r1
 8009810:	e639      	b.n	8009486 <_strtod_l+0x76>
 8009812:	9a08      	ldr	r2, [sp, #32]
 8009814:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009818:	4293      	cmp	r3, r2
 800981a:	db20      	blt.n	800985e <_strtod_l+0x44e>
 800981c:	4c5f      	ldr	r4, [pc, #380]	; (800999c <_strtod_l+0x58c>)
 800981e:	f1c6 060f 	rsb	r6, r6, #15
 8009822:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009826:	4642      	mov	r2, r8
 8009828:	464b      	mov	r3, r9
 800982a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800982e:	f7f6 ff0b 	bl	8000648 <__aeabi_dmul>
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	1b9e      	subs	r6, r3, r6
 8009836:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800983a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800983e:	e7e3      	b.n	8009808 <_strtod_l+0x3f8>
 8009840:	9b08      	ldr	r3, [sp, #32]
 8009842:	3316      	adds	r3, #22
 8009844:	db0b      	blt.n	800985e <_strtod_l+0x44e>
 8009846:	9b05      	ldr	r3, [sp, #20]
 8009848:	1bdf      	subs	r7, r3, r7
 800984a:	4b54      	ldr	r3, [pc, #336]	; (800999c <_strtod_l+0x58c>)
 800984c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009854:	4640      	mov	r0, r8
 8009856:	4649      	mov	r1, r9
 8009858:	f7f7 f820 	bl	800089c <__aeabi_ddiv>
 800985c:	e7d6      	b.n	800980c <_strtod_l+0x3fc>
 800985e:	9b08      	ldr	r3, [sp, #32]
 8009860:	1b75      	subs	r5, r6, r5
 8009862:	441d      	add	r5, r3
 8009864:	2d00      	cmp	r5, #0
 8009866:	dd70      	ble.n	800994a <_strtod_l+0x53a>
 8009868:	f015 030f 	ands.w	r3, r5, #15
 800986c:	d00a      	beq.n	8009884 <_strtod_l+0x474>
 800986e:	494b      	ldr	r1, [pc, #300]	; (800999c <_strtod_l+0x58c>)
 8009870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987c:	f7f6 fee4 	bl	8000648 <__aeabi_dmul>
 8009880:	4680      	mov	r8, r0
 8009882:	4689      	mov	r9, r1
 8009884:	f035 050f 	bics.w	r5, r5, #15
 8009888:	d04d      	beq.n	8009926 <_strtod_l+0x516>
 800988a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800988e:	dd22      	ble.n	80098d6 <_strtod_l+0x4c6>
 8009890:	2500      	movs	r5, #0
 8009892:	46ab      	mov	fp, r5
 8009894:	9509      	str	r5, [sp, #36]	; 0x24
 8009896:	9505      	str	r5, [sp, #20]
 8009898:	2322      	movs	r3, #34	; 0x22
 800989a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80099a4 <_strtod_l+0x594>
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	f04f 0800 	mov.w	r8, #0
 80098a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f43f aded 	beq.w	8009486 <_strtod_l+0x76>
 80098ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff f924 	bl	8008afc <_Bfree>
 80098b4:	9905      	ldr	r1, [sp, #20]
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff f920 	bl	8008afc <_Bfree>
 80098bc:	4659      	mov	r1, fp
 80098be:	4620      	mov	r0, r4
 80098c0:	f7ff f91c 	bl	8008afc <_Bfree>
 80098c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098c6:	4620      	mov	r0, r4
 80098c8:	f7ff f918 	bl	8008afc <_Bfree>
 80098cc:	4629      	mov	r1, r5
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7ff f914 	bl	8008afc <_Bfree>
 80098d4:	e5d7      	b.n	8009486 <_strtod_l+0x76>
 80098d6:	4b32      	ldr	r3, [pc, #200]	; (80099a0 <_strtod_l+0x590>)
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	2300      	movs	r3, #0
 80098dc:	112d      	asrs	r5, r5, #4
 80098de:	4640      	mov	r0, r8
 80098e0:	4649      	mov	r1, r9
 80098e2:	469a      	mov	sl, r3
 80098e4:	2d01      	cmp	r5, #1
 80098e6:	dc21      	bgt.n	800992c <_strtod_l+0x51c>
 80098e8:	b10b      	cbz	r3, 80098ee <_strtod_l+0x4de>
 80098ea:	4680      	mov	r8, r0
 80098ec:	4689      	mov	r9, r1
 80098ee:	492c      	ldr	r1, [pc, #176]	; (80099a0 <_strtod_l+0x590>)
 80098f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80098f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80098f8:	4642      	mov	r2, r8
 80098fa:	464b      	mov	r3, r9
 80098fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009900:	f7f6 fea2 	bl	8000648 <__aeabi_dmul>
 8009904:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <_strtod_l+0x594>)
 8009906:	460a      	mov	r2, r1
 8009908:	400b      	ands	r3, r1
 800990a:	4927      	ldr	r1, [pc, #156]	; (80099a8 <_strtod_l+0x598>)
 800990c:	428b      	cmp	r3, r1
 800990e:	4680      	mov	r8, r0
 8009910:	d8be      	bhi.n	8009890 <_strtod_l+0x480>
 8009912:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009916:	428b      	cmp	r3, r1
 8009918:	bf86      	itte	hi
 800991a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80099ac <_strtod_l+0x59c>
 800991e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009922:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009926:	2300      	movs	r3, #0
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	e07b      	b.n	8009a24 <_strtod_l+0x614>
 800992c:	07ea      	lsls	r2, r5, #31
 800992e:	d505      	bpl.n	800993c <_strtod_l+0x52c>
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f7f6 fe87 	bl	8000648 <__aeabi_dmul>
 800993a:	2301      	movs	r3, #1
 800993c:	9a04      	ldr	r2, [sp, #16]
 800993e:	3208      	adds	r2, #8
 8009940:	f10a 0a01 	add.w	sl, sl, #1
 8009944:	106d      	asrs	r5, r5, #1
 8009946:	9204      	str	r2, [sp, #16]
 8009948:	e7cc      	b.n	80098e4 <_strtod_l+0x4d4>
 800994a:	d0ec      	beq.n	8009926 <_strtod_l+0x516>
 800994c:	426d      	negs	r5, r5
 800994e:	f015 020f 	ands.w	r2, r5, #15
 8009952:	d00a      	beq.n	800996a <_strtod_l+0x55a>
 8009954:	4b11      	ldr	r3, [pc, #68]	; (800999c <_strtod_l+0x58c>)
 8009956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 ff9b 	bl	800089c <__aeabi_ddiv>
 8009966:	4680      	mov	r8, r0
 8009968:	4689      	mov	r9, r1
 800996a:	112d      	asrs	r5, r5, #4
 800996c:	d0db      	beq.n	8009926 <_strtod_l+0x516>
 800996e:	2d1f      	cmp	r5, #31
 8009970:	dd1e      	ble.n	80099b0 <_strtod_l+0x5a0>
 8009972:	2500      	movs	r5, #0
 8009974:	46ab      	mov	fp, r5
 8009976:	9509      	str	r5, [sp, #36]	; 0x24
 8009978:	9505      	str	r5, [sp, #20]
 800997a:	2322      	movs	r3, #34	; 0x22
 800997c:	f04f 0800 	mov.w	r8, #0
 8009980:	f04f 0900 	mov.w	r9, #0
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	e78d      	b.n	80098a4 <_strtod_l+0x494>
 8009988:	0800d5bd 	.word	0x0800d5bd
 800998c:	0800d7e4 	.word	0x0800d7e4
 8009990:	0800d5b5 	.word	0x0800d5b5
 8009994:	0800d5ec 	.word	0x0800d5ec
 8009998:	0800d975 	.word	0x0800d975
 800999c:	0800d6f8 	.word	0x0800d6f8
 80099a0:	0800d6d0 	.word	0x0800d6d0
 80099a4:	7ff00000 	.word	0x7ff00000
 80099a8:	7ca00000 	.word	0x7ca00000
 80099ac:	7fefffff 	.word	0x7fefffff
 80099b0:	f015 0310 	ands.w	r3, r5, #16
 80099b4:	bf18      	it	ne
 80099b6:	236a      	movne	r3, #106	; 0x6a
 80099b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009d5c <_strtod_l+0x94c>
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	2300      	movs	r3, #0
 80099c4:	07ea      	lsls	r2, r5, #31
 80099c6:	d504      	bpl.n	80099d2 <_strtod_l+0x5c2>
 80099c8:	e9da 2300 	ldrd	r2, r3, [sl]
 80099cc:	f7f6 fe3c 	bl	8000648 <__aeabi_dmul>
 80099d0:	2301      	movs	r3, #1
 80099d2:	106d      	asrs	r5, r5, #1
 80099d4:	f10a 0a08 	add.w	sl, sl, #8
 80099d8:	d1f4      	bne.n	80099c4 <_strtod_l+0x5b4>
 80099da:	b10b      	cbz	r3, 80099e0 <_strtod_l+0x5d0>
 80099dc:	4680      	mov	r8, r0
 80099de:	4689      	mov	r9, r1
 80099e0:	9b04      	ldr	r3, [sp, #16]
 80099e2:	b1bb      	cbz	r3, 8009a14 <_strtod_l+0x604>
 80099e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80099e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	4649      	mov	r1, r9
 80099f0:	dd10      	ble.n	8009a14 <_strtod_l+0x604>
 80099f2:	2b1f      	cmp	r3, #31
 80099f4:	f340 811e 	ble.w	8009c34 <_strtod_l+0x824>
 80099f8:	2b34      	cmp	r3, #52	; 0x34
 80099fa:	bfde      	ittt	le
 80099fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009a00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009a04:	4093      	lslle	r3, r2
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	bfcc      	ite	gt
 8009a0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009a10:	ea03 0901 	andle.w	r9, r3, r1
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f87c 	bl	8000b18 <__aeabi_dcmpeq>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d1a6      	bne.n	8009972 <_strtod_l+0x562>
 8009a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a2a:	4633      	mov	r3, r6
 8009a2c:	465a      	mov	r2, fp
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7ff f8cc 	bl	8008bcc <__s2b>
 8009a34:	9009      	str	r0, [sp, #36]	; 0x24
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f af2a 	beq.w	8009890 <_strtod_l+0x480>
 8009a3c:	9a08      	ldr	r2, [sp, #32]
 8009a3e:	9b05      	ldr	r3, [sp, #20]
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	eba3 0307 	sub.w	r3, r3, r7
 8009a46:	bfa8      	it	ge
 8009a48:	2300      	movge	r3, #0
 8009a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a4c:	2500      	movs	r5, #0
 8009a4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a52:	9312      	str	r3, [sp, #72]	; 0x48
 8009a54:	46ab      	mov	fp, r5
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	4620      	mov	r0, r4
 8009a5a:	6859      	ldr	r1, [r3, #4]
 8009a5c:	f7ff f80e 	bl	8008a7c <_Balloc>
 8009a60:	9005      	str	r0, [sp, #20]
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f43f af18 	beq.w	8009898 <_strtod_l+0x488>
 8009a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6a:	691a      	ldr	r2, [r3, #16]
 8009a6c:	3202      	adds	r2, #2
 8009a6e:	f103 010c 	add.w	r1, r3, #12
 8009a72:	0092      	lsls	r2, r2, #2
 8009a74:	300c      	adds	r0, #12
 8009a76:	f000 ff83 	bl	800a980 <memcpy>
 8009a7a:	ec49 8b10 	vmov	d0, r8, r9
 8009a7e:	aa18      	add	r2, sp, #96	; 0x60
 8009a80:	a917      	add	r1, sp, #92	; 0x5c
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7ff fbd6 	bl	8009234 <__d2b>
 8009a88:	ec49 8b18 	vmov	d8, r8, r9
 8009a8c:	9016      	str	r0, [sp, #88]	; 0x58
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	f43f af02 	beq.w	8009898 <_strtod_l+0x488>
 8009a94:	2101      	movs	r1, #1
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7ff f930 	bl	8008cfc <__i2b>
 8009a9c:	4683      	mov	fp, r0
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f aefa 	beq.w	8009898 <_strtod_l+0x488>
 8009aa4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009aa6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009aa8:	2e00      	cmp	r6, #0
 8009aaa:	bfab      	itete	ge
 8009aac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009aae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009ab0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009ab2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009ab6:	bfac      	ite	ge
 8009ab8:	eb06 0a03 	addge.w	sl, r6, r3
 8009abc:	1b9f      	sublt	r7, r3, r6
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	1af6      	subs	r6, r6, r3
 8009ac2:	4416      	add	r6, r2
 8009ac4:	4ba0      	ldr	r3, [pc, #640]	; (8009d48 <_strtod_l+0x938>)
 8009ac6:	3e01      	subs	r6, #1
 8009ac8:	429e      	cmp	r6, r3
 8009aca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ace:	f280 80c4 	bge.w	8009c5a <_strtod_l+0x84a>
 8009ad2:	1b9b      	subs	r3, r3, r6
 8009ad4:	2b1f      	cmp	r3, #31
 8009ad6:	eba2 0203 	sub.w	r2, r2, r3
 8009ada:	f04f 0101 	mov.w	r1, #1
 8009ade:	f300 80b0 	bgt.w	8009c42 <_strtod_l+0x832>
 8009ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ae8:	2300      	movs	r3, #0
 8009aea:	930d      	str	r3, [sp, #52]	; 0x34
 8009aec:	eb0a 0602 	add.w	r6, sl, r2
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	45b2      	cmp	sl, r6
 8009af4:	4417      	add	r7, r2
 8009af6:	441f      	add	r7, r3
 8009af8:	4653      	mov	r3, sl
 8009afa:	bfa8      	it	ge
 8009afc:	4633      	movge	r3, r6
 8009afe:	42bb      	cmp	r3, r7
 8009b00:	bfa8      	it	ge
 8009b02:	463b      	movge	r3, r7
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfc2      	ittt	gt
 8009b08:	1af6      	subgt	r6, r6, r3
 8009b0a:	1aff      	subgt	r7, r7, r3
 8009b0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dd17      	ble.n	8009b46 <_strtod_l+0x736>
 8009b16:	4659      	mov	r1, fp
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff f9ae 	bl	8008e7c <__pow5mult>
 8009b20:	4683      	mov	fp, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f43f aeb8 	beq.w	8009898 <_strtod_l+0x488>
 8009b28:	4601      	mov	r1, r0
 8009b2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff f8fb 	bl	8008d28 <__multiply>
 8009b32:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f43f aeaf 	beq.w	8009898 <_strtod_l+0x488>
 8009b3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7fe ffdd 	bl	8008afc <_Bfree>
 8009b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b44:	9316      	str	r3, [sp, #88]	; 0x58
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	f300 808c 	bgt.w	8009c64 <_strtod_l+0x854>
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	dd08      	ble.n	8009b64 <_strtod_l+0x754>
 8009b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b54:	9905      	ldr	r1, [sp, #20]
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7ff f990 	bl	8008e7c <__pow5mult>
 8009b5c:	9005      	str	r0, [sp, #20]
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	f43f ae9a 	beq.w	8009898 <_strtod_l+0x488>
 8009b64:	2f00      	cmp	r7, #0
 8009b66:	dd08      	ble.n	8009b7a <_strtod_l+0x76a>
 8009b68:	9905      	ldr	r1, [sp, #20]
 8009b6a:	463a      	mov	r2, r7
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f7ff f9df 	bl	8008f30 <__lshift>
 8009b72:	9005      	str	r0, [sp, #20]
 8009b74:	2800      	cmp	r0, #0
 8009b76:	f43f ae8f 	beq.w	8009898 <_strtod_l+0x488>
 8009b7a:	f1ba 0f00 	cmp.w	sl, #0
 8009b7e:	dd08      	ble.n	8009b92 <_strtod_l+0x782>
 8009b80:	4659      	mov	r1, fp
 8009b82:	4652      	mov	r2, sl
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7ff f9d3 	bl	8008f30 <__lshift>
 8009b8a:	4683      	mov	fp, r0
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	f43f ae83 	beq.w	8009898 <_strtod_l+0x488>
 8009b92:	9a05      	ldr	r2, [sp, #20]
 8009b94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b96:	4620      	mov	r0, r4
 8009b98:	f7ff fa52 	bl	8009040 <__mdiff>
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f43f ae7a 	beq.w	8009898 <_strtod_l+0x488>
 8009ba4:	68c3      	ldr	r3, [r0, #12]
 8009ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60c3      	str	r3, [r0, #12]
 8009bac:	4659      	mov	r1, fp
 8009bae:	f7ff fa2b 	bl	8009008 <__mcmp>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	da60      	bge.n	8009c78 <_strtod_l+0x868>
 8009bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb8:	ea53 0308 	orrs.w	r3, r3, r8
 8009bbc:	f040 8084 	bne.w	8009cc8 <_strtod_l+0x8b8>
 8009bc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d17f      	bne.n	8009cc8 <_strtod_l+0x8b8>
 8009bc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bcc:	0d1b      	lsrs	r3, r3, #20
 8009bce:	051b      	lsls	r3, r3, #20
 8009bd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009bd4:	d978      	bls.n	8009cc8 <_strtod_l+0x8b8>
 8009bd6:	696b      	ldr	r3, [r5, #20]
 8009bd8:	b913      	cbnz	r3, 8009be0 <_strtod_l+0x7d0>
 8009bda:	692b      	ldr	r3, [r5, #16]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	dd73      	ble.n	8009cc8 <_strtod_l+0x8b8>
 8009be0:	4629      	mov	r1, r5
 8009be2:	2201      	movs	r2, #1
 8009be4:	4620      	mov	r0, r4
 8009be6:	f7ff f9a3 	bl	8008f30 <__lshift>
 8009bea:	4659      	mov	r1, fp
 8009bec:	4605      	mov	r5, r0
 8009bee:	f7ff fa0b 	bl	8009008 <__mcmp>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	dd68      	ble.n	8009cc8 <_strtod_l+0x8b8>
 8009bf6:	9904      	ldr	r1, [sp, #16]
 8009bf8:	4a54      	ldr	r2, [pc, #336]	; (8009d4c <_strtod_l+0x93c>)
 8009bfa:	464b      	mov	r3, r9
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	f000 8084 	beq.w	8009d0a <_strtod_l+0x8fa>
 8009c02:	ea02 0109 	and.w	r1, r2, r9
 8009c06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c0a:	dc7e      	bgt.n	8009d0a <_strtod_l+0x8fa>
 8009c0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c10:	f77f aeb3 	ble.w	800997a <_strtod_l+0x56a>
 8009c14:	4b4e      	ldr	r3, [pc, #312]	; (8009d50 <_strtod_l+0x940>)
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f7f6 fd14 	bl	8000648 <__aeabi_dmul>
 8009c20:	4b4a      	ldr	r3, [pc, #296]	; (8009d4c <_strtod_l+0x93c>)
 8009c22:	400b      	ands	r3, r1
 8009c24:	4680      	mov	r8, r0
 8009c26:	4689      	mov	r9, r1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f47f ae3f 	bne.w	80098ac <_strtod_l+0x49c>
 8009c2e:	2322      	movs	r3, #34	; 0x22
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	e63b      	b.n	80098ac <_strtod_l+0x49c>
 8009c34:	f04f 32ff 	mov.w	r2, #4294967295
 8009c38:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3c:	ea03 0808 	and.w	r8, r3, r8
 8009c40:	e6e8      	b.n	8009a14 <_strtod_l+0x604>
 8009c42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009c46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009c4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009c4e:	36e2      	adds	r6, #226	; 0xe2
 8009c50:	fa01 f306 	lsl.w	r3, r1, r6
 8009c54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009c58:	e748      	b.n	8009aec <_strtod_l+0x6dc>
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009c62:	e743      	b.n	8009aec <_strtod_l+0x6dc>
 8009c64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c66:	4632      	mov	r2, r6
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7ff f961 	bl	8008f30 <__lshift>
 8009c6e:	9016      	str	r0, [sp, #88]	; 0x58
 8009c70:	2800      	cmp	r0, #0
 8009c72:	f47f af6b 	bne.w	8009b4c <_strtod_l+0x73c>
 8009c76:	e60f      	b.n	8009898 <_strtod_l+0x488>
 8009c78:	46ca      	mov	sl, r9
 8009c7a:	d171      	bne.n	8009d60 <_strtod_l+0x950>
 8009c7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c82:	b352      	cbz	r2, 8009cda <_strtod_l+0x8ca>
 8009c84:	4a33      	ldr	r2, [pc, #204]	; (8009d54 <_strtod_l+0x944>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d12a      	bne.n	8009ce0 <_strtod_l+0x8d0>
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	4641      	mov	r1, r8
 8009c8e:	b1fb      	cbz	r3, 8009cd0 <_strtod_l+0x8c0>
 8009c90:	4b2e      	ldr	r3, [pc, #184]	; (8009d4c <_strtod_l+0x93c>)
 8009c92:	ea09 0303 	and.w	r3, r9, r3
 8009c96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9e:	d81a      	bhi.n	8009cd6 <_strtod_l+0x8c6>
 8009ca0:	0d1b      	lsrs	r3, r3, #20
 8009ca2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8009caa:	4299      	cmp	r1, r3
 8009cac:	d118      	bne.n	8009ce0 <_strtod_l+0x8d0>
 8009cae:	4b2a      	ldr	r3, [pc, #168]	; (8009d58 <_strtod_l+0x948>)
 8009cb0:	459a      	cmp	sl, r3
 8009cb2:	d102      	bne.n	8009cba <_strtod_l+0x8aa>
 8009cb4:	3101      	adds	r1, #1
 8009cb6:	f43f adef 	beq.w	8009898 <_strtod_l+0x488>
 8009cba:	4b24      	ldr	r3, [pc, #144]	; (8009d4c <_strtod_l+0x93c>)
 8009cbc:	ea0a 0303 	and.w	r3, sl, r3
 8009cc0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009cc4:	f04f 0800 	mov.w	r8, #0
 8009cc8:	9b04      	ldr	r3, [sp, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1a2      	bne.n	8009c14 <_strtod_l+0x804>
 8009cce:	e5ed      	b.n	80098ac <_strtod_l+0x49c>
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd4:	e7e9      	b.n	8009caa <_strtod_l+0x89a>
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	e7e7      	b.n	8009caa <_strtod_l+0x89a>
 8009cda:	ea53 0308 	orrs.w	r3, r3, r8
 8009cde:	d08a      	beq.n	8009bf6 <_strtod_l+0x7e6>
 8009ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ce2:	b1e3      	cbz	r3, 8009d1e <_strtod_l+0x90e>
 8009ce4:	ea13 0f0a 	tst.w	r3, sl
 8009ce8:	d0ee      	beq.n	8009cc8 <_strtod_l+0x8b8>
 8009cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cec:	9a04      	ldr	r2, [sp, #16]
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	b1c3      	cbz	r3, 8009d26 <_strtod_l+0x916>
 8009cf4:	f7ff fb6f 	bl	80093d6 <sulp>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	ec51 0b18 	vmov	r0, r1, d8
 8009d00:	f7f6 faec 	bl	80002dc <__adddf3>
 8009d04:	4680      	mov	r8, r0
 8009d06:	4689      	mov	r9, r1
 8009d08:	e7de      	b.n	8009cc8 <_strtod_l+0x8b8>
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009d14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009d18:	f04f 38ff 	mov.w	r8, #4294967295
 8009d1c:	e7d4      	b.n	8009cc8 <_strtod_l+0x8b8>
 8009d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d20:	ea13 0f08 	tst.w	r3, r8
 8009d24:	e7e0      	b.n	8009ce8 <_strtod_l+0x8d8>
 8009d26:	f7ff fb56 	bl	80093d6 <sulp>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	ec51 0b18 	vmov	r0, r1, d8
 8009d32:	f7f6 fad1 	bl	80002d8 <__aeabi_dsub>
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	4689      	mov	r9, r1
 8009d3e:	f7f6 feeb 	bl	8000b18 <__aeabi_dcmpeq>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d0c0      	beq.n	8009cc8 <_strtod_l+0x8b8>
 8009d46:	e618      	b.n	800997a <_strtod_l+0x56a>
 8009d48:	fffffc02 	.word	0xfffffc02
 8009d4c:	7ff00000 	.word	0x7ff00000
 8009d50:	39500000 	.word	0x39500000
 8009d54:	000fffff 	.word	0x000fffff
 8009d58:	7fefffff 	.word	0x7fefffff
 8009d5c:	0800d7f8 	.word	0x0800d7f8
 8009d60:	4659      	mov	r1, fp
 8009d62:	4628      	mov	r0, r5
 8009d64:	f7ff fac0 	bl	80092e8 <__ratio>
 8009d68:	ec57 6b10 	vmov	r6, r7, d0
 8009d6c:	ee10 0a10 	vmov	r0, s0
 8009d70:	2200      	movs	r2, #0
 8009d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 fee2 	bl	8000b40 <__aeabi_dcmple>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d071      	beq.n	8009e64 <_strtod_l+0xa54>
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d17c      	bne.n	8009e80 <_strtod_l+0xa70>
 8009d86:	f1b8 0f00 	cmp.w	r8, #0
 8009d8a:	d15a      	bne.n	8009e42 <_strtod_l+0xa32>
 8009d8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d15d      	bne.n	8009e50 <_strtod_l+0xa40>
 8009d94:	4b90      	ldr	r3, [pc, #576]	; (8009fd8 <_strtod_l+0xbc8>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 fec6 	bl	8000b2c <__aeabi_dcmplt>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d15c      	bne.n	8009e5e <_strtod_l+0xa4e>
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	4b8c      	ldr	r3, [pc, #560]	; (8009fdc <_strtod_l+0xbcc>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	f7f6 fc4c 	bl	8000648 <__aeabi_dmul>
 8009db0:	4606      	mov	r6, r0
 8009db2:	460f      	mov	r7, r1
 8009db4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009db8:	9606      	str	r6, [sp, #24]
 8009dba:	9307      	str	r3, [sp, #28]
 8009dbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009dc4:	4b86      	ldr	r3, [pc, #536]	; (8009fe0 <_strtod_l+0xbd0>)
 8009dc6:	ea0a 0303 	and.w	r3, sl, r3
 8009dca:	930d      	str	r3, [sp, #52]	; 0x34
 8009dcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dce:	4b85      	ldr	r3, [pc, #532]	; (8009fe4 <_strtod_l+0xbd4>)
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	f040 8090 	bne.w	8009ef6 <_strtod_l+0xae6>
 8009dd6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009dda:	ec49 8b10 	vmov	d0, r8, r9
 8009dde:	f7ff f9b9 	bl	8009154 <__ulp>
 8009de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009de6:	ec51 0b10 	vmov	r0, r1, d0
 8009dea:	f7f6 fc2d 	bl	8000648 <__aeabi_dmul>
 8009dee:	4642      	mov	r2, r8
 8009df0:	464b      	mov	r3, r9
 8009df2:	f7f6 fa73 	bl	80002dc <__adddf3>
 8009df6:	460b      	mov	r3, r1
 8009df8:	4979      	ldr	r1, [pc, #484]	; (8009fe0 <_strtod_l+0xbd0>)
 8009dfa:	4a7b      	ldr	r2, [pc, #492]	; (8009fe8 <_strtod_l+0xbd8>)
 8009dfc:	4019      	ands	r1, r3
 8009dfe:	4291      	cmp	r1, r2
 8009e00:	4680      	mov	r8, r0
 8009e02:	d944      	bls.n	8009e8e <_strtod_l+0xa7e>
 8009e04:	ee18 2a90 	vmov	r2, s17
 8009e08:	4b78      	ldr	r3, [pc, #480]	; (8009fec <_strtod_l+0xbdc>)
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d104      	bne.n	8009e18 <_strtod_l+0xa08>
 8009e0e:	ee18 3a10 	vmov	r3, s16
 8009e12:	3301      	adds	r3, #1
 8009e14:	f43f ad40 	beq.w	8009898 <_strtod_l+0x488>
 8009e18:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009fec <_strtod_l+0xbdc>
 8009e1c:	f04f 38ff 	mov.w	r8, #4294967295
 8009e20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e22:	4620      	mov	r0, r4
 8009e24:	f7fe fe6a 	bl	8008afc <_Bfree>
 8009e28:	9905      	ldr	r1, [sp, #20]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f7fe fe66 	bl	8008afc <_Bfree>
 8009e30:	4659      	mov	r1, fp
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7fe fe62 	bl	8008afc <_Bfree>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7fe fe5e 	bl	8008afc <_Bfree>
 8009e40:	e609      	b.n	8009a56 <_strtod_l+0x646>
 8009e42:	f1b8 0f01 	cmp.w	r8, #1
 8009e46:	d103      	bne.n	8009e50 <_strtod_l+0xa40>
 8009e48:	f1b9 0f00 	cmp.w	r9, #0
 8009e4c:	f43f ad95 	beq.w	800997a <_strtod_l+0x56a>
 8009e50:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009fa8 <_strtod_l+0xb98>
 8009e54:	4f60      	ldr	r7, [pc, #384]	; (8009fd8 <_strtod_l+0xbc8>)
 8009e56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e5a:	2600      	movs	r6, #0
 8009e5c:	e7ae      	b.n	8009dbc <_strtod_l+0x9ac>
 8009e5e:	4f5f      	ldr	r7, [pc, #380]	; (8009fdc <_strtod_l+0xbcc>)
 8009e60:	2600      	movs	r6, #0
 8009e62:	e7a7      	b.n	8009db4 <_strtod_l+0x9a4>
 8009e64:	4b5d      	ldr	r3, [pc, #372]	; (8009fdc <_strtod_l+0xbcc>)
 8009e66:	4630      	mov	r0, r6
 8009e68:	4639      	mov	r1, r7
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f7f6 fbec 	bl	8000648 <__aeabi_dmul>
 8009e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e72:	4606      	mov	r6, r0
 8009e74:	460f      	mov	r7, r1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d09c      	beq.n	8009db4 <_strtod_l+0x9a4>
 8009e7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e7e:	e79d      	b.n	8009dbc <_strtod_l+0x9ac>
 8009e80:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009fb0 <_strtod_l+0xba0>
 8009e84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e88:	ec57 6b17 	vmov	r6, r7, d7
 8009e8c:	e796      	b.n	8009dbc <_strtod_l+0x9ac>
 8009e8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	46ca      	mov	sl, r9
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1c2      	bne.n	8009e20 <_strtod_l+0xa10>
 8009e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ea0:	0d1b      	lsrs	r3, r3, #20
 8009ea2:	051b      	lsls	r3, r3, #20
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d1bb      	bne.n	8009e20 <_strtod_l+0xa10>
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 ff2c 	bl	8000d08 <__aeabi_d2lz>
 8009eb0:	f7f6 fb9c 	bl	80005ec <__aeabi_l2d>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 fa0c 	bl	80002d8 <__aeabi_dsub>
 8009ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ec2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ec6:	ea43 0308 	orr.w	r3, r3, r8
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	4606      	mov	r6, r0
 8009ece:	460f      	mov	r7, r1
 8009ed0:	d054      	beq.n	8009f7c <_strtod_l+0xb6c>
 8009ed2:	a339      	add	r3, pc, #228	; (adr r3, 8009fb8 <_strtod_l+0xba8>)
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f7f6 fe28 	bl	8000b2c <__aeabi_dcmplt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f47f ace5 	bne.w	80098ac <_strtod_l+0x49c>
 8009ee2:	a337      	add	r3, pc, #220	; (adr r3, 8009fc0 <_strtod_l+0xbb0>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fe3c 	bl	8000b68 <__aeabi_dcmpgt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d095      	beq.n	8009e20 <_strtod_l+0xa10>
 8009ef4:	e4da      	b.n	80098ac <_strtod_l+0x49c>
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	b333      	cbz	r3, 8009f48 <_strtod_l+0xb38>
 8009efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009efc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f00:	d822      	bhi.n	8009f48 <_strtod_l+0xb38>
 8009f02:	a331      	add	r3, pc, #196	; (adr r3, 8009fc8 <_strtod_l+0xbb8>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 fe18 	bl	8000b40 <__aeabi_dcmple>
 8009f10:	b1a0      	cbz	r0, 8009f3c <_strtod_l+0xb2c>
 8009f12:	4639      	mov	r1, r7
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7f6 fe6f 	bl	8000bf8 <__aeabi_d2uiz>
 8009f1a:	2801      	cmp	r0, #1
 8009f1c:	bf38      	it	cc
 8009f1e:	2001      	movcc	r0, #1
 8009f20:	f7f6 fb18 	bl	8000554 <__aeabi_ui2d>
 8009f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	bb23      	cbnz	r3, 8009f76 <_strtod_l+0xb66>
 8009f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f30:	9010      	str	r0, [sp, #64]	; 0x40
 8009f32:	9311      	str	r3, [sp, #68]	; 0x44
 8009f34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f50:	eef0 0a68 	vmov.f32	s1, s17
 8009f54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009f58:	f7ff f8fc 	bl	8009154 <__ulp>
 8009f5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009f60:	ec53 2b10 	vmov	r2, r3, d0
 8009f64:	f7f6 fb70 	bl	8000648 <__aeabi_dmul>
 8009f68:	ec53 2b18 	vmov	r2, r3, d8
 8009f6c:	f7f6 f9b6 	bl	80002dc <__adddf3>
 8009f70:	4680      	mov	r8, r0
 8009f72:	4689      	mov	r9, r1
 8009f74:	e78d      	b.n	8009e92 <_strtod_l+0xa82>
 8009f76:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009f7a:	e7db      	b.n	8009f34 <_strtod_l+0xb24>
 8009f7c:	a314      	add	r3, pc, #80	; (adr r3, 8009fd0 <_strtod_l+0xbc0>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f7f6 fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8009f86:	e7b3      	b.n	8009ef0 <_strtod_l+0xae0>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	f7ff ba7c 	b.w	800948e <_strtod_l+0x7e>
 8009f96:	2a65      	cmp	r2, #101	; 0x65
 8009f98:	f43f ab75 	beq.w	8009686 <_strtod_l+0x276>
 8009f9c:	2a45      	cmp	r2, #69	; 0x45
 8009f9e:	f43f ab72 	beq.w	8009686 <_strtod_l+0x276>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f7ff bbaa 	b.w	80096fc <_strtod_l+0x2ec>
 8009fa8:	00000000 	.word	0x00000000
 8009fac:	bff00000 	.word	0xbff00000
 8009fb0:	00000000 	.word	0x00000000
 8009fb4:	3ff00000 	.word	0x3ff00000
 8009fb8:	94a03595 	.word	0x94a03595
 8009fbc:	3fdfffff 	.word	0x3fdfffff
 8009fc0:	35afe535 	.word	0x35afe535
 8009fc4:	3fe00000 	.word	0x3fe00000
 8009fc8:	ffc00000 	.word	0xffc00000
 8009fcc:	41dfffff 	.word	0x41dfffff
 8009fd0:	94a03595 	.word	0x94a03595
 8009fd4:	3fcfffff 	.word	0x3fcfffff
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	7fe00000 	.word	0x7fe00000
 8009fe8:	7c9fffff 	.word	0x7c9fffff
 8009fec:	7fefffff 	.word	0x7fefffff

08009ff0 <_strtod_r>:
 8009ff0:	4b01      	ldr	r3, [pc, #4]	; (8009ff8 <_strtod_r+0x8>)
 8009ff2:	f7ff ba0d 	b.w	8009410 <_strtod_l>
 8009ff6:	bf00      	nop
 8009ff8:	20000070 	.word	0x20000070

08009ffc <_strtol_l.constprop.0>:
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a002:	d001      	beq.n	800a008 <_strtol_l.constprop.0+0xc>
 800a004:	2b24      	cmp	r3, #36	; 0x24
 800a006:	d906      	bls.n	800a016 <_strtol_l.constprop.0+0x1a>
 800a008:	f7fd fd88 	bl	8007b1c <__errno>
 800a00c:	2316      	movs	r3, #22
 800a00e:	6003      	str	r3, [r0, #0]
 800a010:	2000      	movs	r0, #0
 800a012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a016:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0fc <_strtol_l.constprop.0+0x100>
 800a01a:	460d      	mov	r5, r1
 800a01c:	462e      	mov	r6, r5
 800a01e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a022:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a026:	f017 0708 	ands.w	r7, r7, #8
 800a02a:	d1f7      	bne.n	800a01c <_strtol_l.constprop.0+0x20>
 800a02c:	2c2d      	cmp	r4, #45	; 0x2d
 800a02e:	d132      	bne.n	800a096 <_strtol_l.constprop.0+0x9a>
 800a030:	782c      	ldrb	r4, [r5, #0]
 800a032:	2701      	movs	r7, #1
 800a034:	1cb5      	adds	r5, r6, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d05b      	beq.n	800a0f2 <_strtol_l.constprop.0+0xf6>
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d109      	bne.n	800a052 <_strtol_l.constprop.0+0x56>
 800a03e:	2c30      	cmp	r4, #48	; 0x30
 800a040:	d107      	bne.n	800a052 <_strtol_l.constprop.0+0x56>
 800a042:	782c      	ldrb	r4, [r5, #0]
 800a044:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a048:	2c58      	cmp	r4, #88	; 0x58
 800a04a:	d14d      	bne.n	800a0e8 <_strtol_l.constprop.0+0xec>
 800a04c:	786c      	ldrb	r4, [r5, #1]
 800a04e:	2310      	movs	r3, #16
 800a050:	3502      	adds	r5, #2
 800a052:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a056:	f108 38ff 	add.w	r8, r8, #4294967295
 800a05a:	f04f 0e00 	mov.w	lr, #0
 800a05e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a062:	4676      	mov	r6, lr
 800a064:	fb03 8a19 	mls	sl, r3, r9, r8
 800a068:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a06c:	f1bc 0f09 	cmp.w	ip, #9
 800a070:	d816      	bhi.n	800a0a0 <_strtol_l.constprop.0+0xa4>
 800a072:	4664      	mov	r4, ip
 800a074:	42a3      	cmp	r3, r4
 800a076:	dd24      	ble.n	800a0c2 <_strtol_l.constprop.0+0xc6>
 800a078:	f1be 3fff 	cmp.w	lr, #4294967295
 800a07c:	d008      	beq.n	800a090 <_strtol_l.constprop.0+0x94>
 800a07e:	45b1      	cmp	r9, r6
 800a080:	d31c      	bcc.n	800a0bc <_strtol_l.constprop.0+0xc0>
 800a082:	d101      	bne.n	800a088 <_strtol_l.constprop.0+0x8c>
 800a084:	45a2      	cmp	sl, r4
 800a086:	db19      	blt.n	800a0bc <_strtol_l.constprop.0+0xc0>
 800a088:	fb06 4603 	mla	r6, r6, r3, r4
 800a08c:	f04f 0e01 	mov.w	lr, #1
 800a090:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a094:	e7e8      	b.n	800a068 <_strtol_l.constprop.0+0x6c>
 800a096:	2c2b      	cmp	r4, #43	; 0x2b
 800a098:	bf04      	itt	eq
 800a09a:	782c      	ldrbeq	r4, [r5, #0]
 800a09c:	1cb5      	addeq	r5, r6, #2
 800a09e:	e7ca      	b.n	800a036 <_strtol_l.constprop.0+0x3a>
 800a0a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a0a4:	f1bc 0f19 	cmp.w	ip, #25
 800a0a8:	d801      	bhi.n	800a0ae <_strtol_l.constprop.0+0xb2>
 800a0aa:	3c37      	subs	r4, #55	; 0x37
 800a0ac:	e7e2      	b.n	800a074 <_strtol_l.constprop.0+0x78>
 800a0ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a0b2:	f1bc 0f19 	cmp.w	ip, #25
 800a0b6:	d804      	bhi.n	800a0c2 <_strtol_l.constprop.0+0xc6>
 800a0b8:	3c57      	subs	r4, #87	; 0x57
 800a0ba:	e7db      	b.n	800a074 <_strtol_l.constprop.0+0x78>
 800a0bc:	f04f 3eff 	mov.w	lr, #4294967295
 800a0c0:	e7e6      	b.n	800a090 <_strtol_l.constprop.0+0x94>
 800a0c2:	f1be 3fff 	cmp.w	lr, #4294967295
 800a0c6:	d105      	bne.n	800a0d4 <_strtol_l.constprop.0+0xd8>
 800a0c8:	2322      	movs	r3, #34	; 0x22
 800a0ca:	6003      	str	r3, [r0, #0]
 800a0cc:	4646      	mov	r6, r8
 800a0ce:	b942      	cbnz	r2, 800a0e2 <_strtol_l.constprop.0+0xe6>
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	e79e      	b.n	800a012 <_strtol_l.constprop.0+0x16>
 800a0d4:	b107      	cbz	r7, 800a0d8 <_strtol_l.constprop.0+0xdc>
 800a0d6:	4276      	negs	r6, r6
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	d0f9      	beq.n	800a0d0 <_strtol_l.constprop.0+0xd4>
 800a0dc:	f1be 0f00 	cmp.w	lr, #0
 800a0e0:	d000      	beq.n	800a0e4 <_strtol_l.constprop.0+0xe8>
 800a0e2:	1e69      	subs	r1, r5, #1
 800a0e4:	6011      	str	r1, [r2, #0]
 800a0e6:	e7f3      	b.n	800a0d0 <_strtol_l.constprop.0+0xd4>
 800a0e8:	2430      	movs	r4, #48	; 0x30
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1b1      	bne.n	800a052 <_strtol_l.constprop.0+0x56>
 800a0ee:	2308      	movs	r3, #8
 800a0f0:	e7af      	b.n	800a052 <_strtol_l.constprop.0+0x56>
 800a0f2:	2c30      	cmp	r4, #48	; 0x30
 800a0f4:	d0a5      	beq.n	800a042 <_strtol_l.constprop.0+0x46>
 800a0f6:	230a      	movs	r3, #10
 800a0f8:	e7ab      	b.n	800a052 <_strtol_l.constprop.0+0x56>
 800a0fa:	bf00      	nop
 800a0fc:	0800d821 	.word	0x0800d821

0800a100 <_strtol_r>:
 800a100:	f7ff bf7c 	b.w	8009ffc <_strtol_l.constprop.0>

0800a104 <__ssputs_r>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	688e      	ldr	r6, [r1, #8]
 800a10a:	461f      	mov	r7, r3
 800a10c:	42be      	cmp	r6, r7
 800a10e:	680b      	ldr	r3, [r1, #0]
 800a110:	4682      	mov	sl, r0
 800a112:	460c      	mov	r4, r1
 800a114:	4690      	mov	r8, r2
 800a116:	d82c      	bhi.n	800a172 <__ssputs_r+0x6e>
 800a118:	898a      	ldrh	r2, [r1, #12]
 800a11a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a11e:	d026      	beq.n	800a16e <__ssputs_r+0x6a>
 800a120:	6965      	ldr	r5, [r4, #20]
 800a122:	6909      	ldr	r1, [r1, #16]
 800a124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a128:	eba3 0901 	sub.w	r9, r3, r1
 800a12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a130:	1c7b      	adds	r3, r7, #1
 800a132:	444b      	add	r3, r9
 800a134:	106d      	asrs	r5, r5, #1
 800a136:	429d      	cmp	r5, r3
 800a138:	bf38      	it	cc
 800a13a:	461d      	movcc	r5, r3
 800a13c:	0553      	lsls	r3, r2, #21
 800a13e:	d527      	bpl.n	800a190 <__ssputs_r+0x8c>
 800a140:	4629      	mov	r1, r5
 800a142:	f7fe fc0f 	bl	8008964 <_malloc_r>
 800a146:	4606      	mov	r6, r0
 800a148:	b360      	cbz	r0, 800a1a4 <__ssputs_r+0xa0>
 800a14a:	6921      	ldr	r1, [r4, #16]
 800a14c:	464a      	mov	r2, r9
 800a14e:	f000 fc17 	bl	800a980 <memcpy>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	6126      	str	r6, [r4, #16]
 800a160:	6165      	str	r5, [r4, #20]
 800a162:	444e      	add	r6, r9
 800a164:	eba5 0509 	sub.w	r5, r5, r9
 800a168:	6026      	str	r6, [r4, #0]
 800a16a:	60a5      	str	r5, [r4, #8]
 800a16c:	463e      	mov	r6, r7
 800a16e:	42be      	cmp	r6, r7
 800a170:	d900      	bls.n	800a174 <__ssputs_r+0x70>
 800a172:	463e      	mov	r6, r7
 800a174:	6820      	ldr	r0, [r4, #0]
 800a176:	4632      	mov	r2, r6
 800a178:	4641      	mov	r1, r8
 800a17a:	f000 fba3 	bl	800a8c4 <memmove>
 800a17e:	68a3      	ldr	r3, [r4, #8]
 800a180:	1b9b      	subs	r3, r3, r6
 800a182:	60a3      	str	r3, [r4, #8]
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	4433      	add	r3, r6
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	2000      	movs	r0, #0
 800a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a190:	462a      	mov	r2, r5
 800a192:	f000 ffaa 	bl	800b0ea <_realloc_r>
 800a196:	4606      	mov	r6, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	d1e0      	bne.n	800a15e <__ssputs_r+0x5a>
 800a19c:	6921      	ldr	r1, [r4, #16]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	f7fe fb6c 	bl	800887c <_free_r>
 800a1a4:	230c      	movs	r3, #12
 800a1a6:	f8ca 3000 	str.w	r3, [sl]
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	e7e9      	b.n	800a18c <__ssputs_r+0x88>

0800a1b8 <_svfiprintf_r>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	4698      	mov	r8, r3
 800a1be:	898b      	ldrh	r3, [r1, #12]
 800a1c0:	061b      	lsls	r3, r3, #24
 800a1c2:	b09d      	sub	sp, #116	; 0x74
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	d50e      	bpl.n	800a1ea <_svfiprintf_r+0x32>
 800a1cc:	690b      	ldr	r3, [r1, #16]
 800a1ce:	b963      	cbnz	r3, 800a1ea <_svfiprintf_r+0x32>
 800a1d0:	2140      	movs	r1, #64	; 0x40
 800a1d2:	f7fe fbc7 	bl	8008964 <_malloc_r>
 800a1d6:	6028      	str	r0, [r5, #0]
 800a1d8:	6128      	str	r0, [r5, #16]
 800a1da:	b920      	cbnz	r0, 800a1e6 <_svfiprintf_r+0x2e>
 800a1dc:	230c      	movs	r3, #12
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	e0d0      	b.n	800a388 <_svfiprintf_r+0x1d0>
 800a1e6:	2340      	movs	r3, #64	; 0x40
 800a1e8:	616b      	str	r3, [r5, #20]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ee:	2320      	movs	r3, #32
 800a1f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f8:	2330      	movs	r3, #48	; 0x30
 800a1fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a3a0 <_svfiprintf_r+0x1e8>
 800a1fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a202:	f04f 0901 	mov.w	r9, #1
 800a206:	4623      	mov	r3, r4
 800a208:	469a      	mov	sl, r3
 800a20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20e:	b10a      	cbz	r2, 800a214 <_svfiprintf_r+0x5c>
 800a210:	2a25      	cmp	r2, #37	; 0x25
 800a212:	d1f9      	bne.n	800a208 <_svfiprintf_r+0x50>
 800a214:	ebba 0b04 	subs.w	fp, sl, r4
 800a218:	d00b      	beq.n	800a232 <_svfiprintf_r+0x7a>
 800a21a:	465b      	mov	r3, fp
 800a21c:	4622      	mov	r2, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ff6f 	bl	800a104 <__ssputs_r>
 800a226:	3001      	adds	r0, #1
 800a228:	f000 80a9 	beq.w	800a37e <_svfiprintf_r+0x1c6>
 800a22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a22e:	445a      	add	r2, fp
 800a230:	9209      	str	r2, [sp, #36]	; 0x24
 800a232:	f89a 3000 	ldrb.w	r3, [sl]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 80a1 	beq.w	800a37e <_svfiprintf_r+0x1c6>
 800a23c:	2300      	movs	r3, #0
 800a23e:	f04f 32ff 	mov.w	r2, #4294967295
 800a242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a246:	f10a 0a01 	add.w	sl, sl, #1
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	9307      	str	r3, [sp, #28]
 800a24e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a252:	931a      	str	r3, [sp, #104]	; 0x68
 800a254:	4654      	mov	r4, sl
 800a256:	2205      	movs	r2, #5
 800a258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25c:	4850      	ldr	r0, [pc, #320]	; (800a3a0 <_svfiprintf_r+0x1e8>)
 800a25e:	f7f5 ffdf 	bl	8000220 <memchr>
 800a262:	9a04      	ldr	r2, [sp, #16]
 800a264:	b9d8      	cbnz	r0, 800a29e <_svfiprintf_r+0xe6>
 800a266:	06d0      	lsls	r0, r2, #27
 800a268:	bf44      	itt	mi
 800a26a:	2320      	movmi	r3, #32
 800a26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a270:	0711      	lsls	r1, r2, #28
 800a272:	bf44      	itt	mi
 800a274:	232b      	movmi	r3, #43	; 0x2b
 800a276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27a:	f89a 3000 	ldrb.w	r3, [sl]
 800a27e:	2b2a      	cmp	r3, #42	; 0x2a
 800a280:	d015      	beq.n	800a2ae <_svfiprintf_r+0xf6>
 800a282:	9a07      	ldr	r2, [sp, #28]
 800a284:	4654      	mov	r4, sl
 800a286:	2000      	movs	r0, #0
 800a288:	f04f 0c0a 	mov.w	ip, #10
 800a28c:	4621      	mov	r1, r4
 800a28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a292:	3b30      	subs	r3, #48	; 0x30
 800a294:	2b09      	cmp	r3, #9
 800a296:	d94d      	bls.n	800a334 <_svfiprintf_r+0x17c>
 800a298:	b1b0      	cbz	r0, 800a2c8 <_svfiprintf_r+0x110>
 800a29a:	9207      	str	r2, [sp, #28]
 800a29c:	e014      	b.n	800a2c8 <_svfiprintf_r+0x110>
 800a29e:	eba0 0308 	sub.w	r3, r0, r8
 800a2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	46a2      	mov	sl, r4
 800a2ac:	e7d2      	b.n	800a254 <_svfiprintf_r+0x9c>
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	1d19      	adds	r1, r3, #4
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	9103      	str	r1, [sp, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfbb      	ittet	lt
 800a2ba:	425b      	neglt	r3, r3
 800a2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c0:	9307      	strge	r3, [sp, #28]
 800a2c2:	9307      	strlt	r3, [sp, #28]
 800a2c4:	bfb8      	it	lt
 800a2c6:	9204      	strlt	r2, [sp, #16]
 800a2c8:	7823      	ldrb	r3, [r4, #0]
 800a2ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a2cc:	d10c      	bne.n	800a2e8 <_svfiprintf_r+0x130>
 800a2ce:	7863      	ldrb	r3, [r4, #1]
 800a2d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d2:	d134      	bne.n	800a33e <_svfiprintf_r+0x186>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	1d1a      	adds	r2, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	9203      	str	r2, [sp, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfb8      	it	lt
 800a2e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2e4:	3402      	adds	r4, #2
 800a2e6:	9305      	str	r3, [sp, #20]
 800a2e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a3b0 <_svfiprintf_r+0x1f8>
 800a2ec:	7821      	ldrb	r1, [r4, #0]
 800a2ee:	2203      	movs	r2, #3
 800a2f0:	4650      	mov	r0, sl
 800a2f2:	f7f5 ff95 	bl	8000220 <memchr>
 800a2f6:	b138      	cbz	r0, 800a308 <_svfiprintf_r+0x150>
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	eba0 000a 	sub.w	r0, r0, sl
 800a2fe:	2240      	movs	r2, #64	; 0x40
 800a300:	4082      	lsls	r2, r0
 800a302:	4313      	orrs	r3, r2
 800a304:	3401      	adds	r4, #1
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30c:	4825      	ldr	r0, [pc, #148]	; (800a3a4 <_svfiprintf_r+0x1ec>)
 800a30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a312:	2206      	movs	r2, #6
 800a314:	f7f5 ff84 	bl	8000220 <memchr>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d038      	beq.n	800a38e <_svfiprintf_r+0x1d6>
 800a31c:	4b22      	ldr	r3, [pc, #136]	; (800a3a8 <_svfiprintf_r+0x1f0>)
 800a31e:	bb1b      	cbnz	r3, 800a368 <_svfiprintf_r+0x1b0>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	3307      	adds	r3, #7
 800a324:	f023 0307 	bic.w	r3, r3, #7
 800a328:	3308      	adds	r3, #8
 800a32a:	9303      	str	r3, [sp, #12]
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	4433      	add	r3, r6
 800a330:	9309      	str	r3, [sp, #36]	; 0x24
 800a332:	e768      	b.n	800a206 <_svfiprintf_r+0x4e>
 800a334:	fb0c 3202 	mla	r2, ip, r2, r3
 800a338:	460c      	mov	r4, r1
 800a33a:	2001      	movs	r0, #1
 800a33c:	e7a6      	b.n	800a28c <_svfiprintf_r+0xd4>
 800a33e:	2300      	movs	r3, #0
 800a340:	3401      	adds	r4, #1
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	4619      	mov	r1, r3
 800a346:	f04f 0c0a 	mov.w	ip, #10
 800a34a:	4620      	mov	r0, r4
 800a34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a350:	3a30      	subs	r2, #48	; 0x30
 800a352:	2a09      	cmp	r2, #9
 800a354:	d903      	bls.n	800a35e <_svfiprintf_r+0x1a6>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0c6      	beq.n	800a2e8 <_svfiprintf_r+0x130>
 800a35a:	9105      	str	r1, [sp, #20]
 800a35c:	e7c4      	b.n	800a2e8 <_svfiprintf_r+0x130>
 800a35e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a362:	4604      	mov	r4, r0
 800a364:	2301      	movs	r3, #1
 800a366:	e7f0      	b.n	800a34a <_svfiprintf_r+0x192>
 800a368:	ab03      	add	r3, sp, #12
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	462a      	mov	r2, r5
 800a36e:	4b0f      	ldr	r3, [pc, #60]	; (800a3ac <_svfiprintf_r+0x1f4>)
 800a370:	a904      	add	r1, sp, #16
 800a372:	4638      	mov	r0, r7
 800a374:	f7fc fb7a 	bl	8006a6c <_printf_float>
 800a378:	1c42      	adds	r2, r0, #1
 800a37a:	4606      	mov	r6, r0
 800a37c:	d1d6      	bne.n	800a32c <_svfiprintf_r+0x174>
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	065b      	lsls	r3, r3, #25
 800a382:	f53f af2d 	bmi.w	800a1e0 <_svfiprintf_r+0x28>
 800a386:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a388:	b01d      	add	sp, #116	; 0x74
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	ab03      	add	r3, sp, #12
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	462a      	mov	r2, r5
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <_svfiprintf_r+0x1f4>)
 800a396:	a904      	add	r1, sp, #16
 800a398:	4638      	mov	r0, r7
 800a39a:	f7fc fe0b 	bl	8006fb4 <_printf_i>
 800a39e:	e7eb      	b.n	800a378 <_svfiprintf_r+0x1c0>
 800a3a0:	0800d921 	.word	0x0800d921
 800a3a4:	0800d92b 	.word	0x0800d92b
 800a3a8:	08006a6d 	.word	0x08006a6d
 800a3ac:	0800a105 	.word	0x0800a105
 800a3b0:	0800d927 	.word	0x0800d927

0800a3b4 <__sfputc_r>:
 800a3b4:	6893      	ldr	r3, [r2, #8]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	b410      	push	{r4}
 800a3bc:	6093      	str	r3, [r2, #8]
 800a3be:	da08      	bge.n	800a3d2 <__sfputc_r+0x1e>
 800a3c0:	6994      	ldr	r4, [r2, #24]
 800a3c2:	42a3      	cmp	r3, r4
 800a3c4:	db01      	blt.n	800a3ca <__sfputc_r+0x16>
 800a3c6:	290a      	cmp	r1, #10
 800a3c8:	d103      	bne.n	800a3d2 <__sfputc_r+0x1e>
 800a3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ce:	f7fd babe 	b.w	800794e <__swbuf_r>
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	1c58      	adds	r0, r3, #1
 800a3d6:	6010      	str	r0, [r2, #0]
 800a3d8:	7019      	strb	r1, [r3, #0]
 800a3da:	4608      	mov	r0, r1
 800a3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <__sfputs_r>:
 800a3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	460f      	mov	r7, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	18d5      	adds	r5, r2, r3
 800a3ec:	42ac      	cmp	r4, r5
 800a3ee:	d101      	bne.n	800a3f4 <__sfputs_r+0x12>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e007      	b.n	800a404 <__sfputs_r+0x22>
 800a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f8:	463a      	mov	r2, r7
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff ffda 	bl	800a3b4 <__sfputc_r>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d1f3      	bne.n	800a3ec <__sfputs_r+0xa>
 800a404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a408 <_vfiprintf_r>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	460d      	mov	r5, r1
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4614      	mov	r4, r2
 800a412:	4698      	mov	r8, r3
 800a414:	4606      	mov	r6, r0
 800a416:	b118      	cbz	r0, 800a420 <_vfiprintf_r+0x18>
 800a418:	6a03      	ldr	r3, [r0, #32]
 800a41a:	b90b      	cbnz	r3, 800a420 <_vfiprintf_r+0x18>
 800a41c:	f7fd f988 	bl	8007730 <__sinit>
 800a420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a422:	07d9      	lsls	r1, r3, #31
 800a424:	d405      	bmi.n	800a432 <_vfiprintf_r+0x2a>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	059a      	lsls	r2, r3, #22
 800a42a:	d402      	bmi.n	800a432 <_vfiprintf_r+0x2a>
 800a42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42e:	f7fd fba0 	bl	8007b72 <__retarget_lock_acquire_recursive>
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	071b      	lsls	r3, r3, #28
 800a436:	d501      	bpl.n	800a43c <_vfiprintf_r+0x34>
 800a438:	692b      	ldr	r3, [r5, #16]
 800a43a:	b99b      	cbnz	r3, 800a464 <_vfiprintf_r+0x5c>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4630      	mov	r0, r6
 800a440:	f7fd fac2 	bl	80079c8 <__swsetup_r>
 800a444:	b170      	cbz	r0, 800a464 <_vfiprintf_r+0x5c>
 800a446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a448:	07dc      	lsls	r4, r3, #31
 800a44a:	d504      	bpl.n	800a456 <_vfiprintf_r+0x4e>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	b01d      	add	sp, #116	; 0x74
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	0598      	lsls	r0, r3, #22
 800a45a:	d4f7      	bmi.n	800a44c <_vfiprintf_r+0x44>
 800a45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a45e:	f7fd fb89 	bl	8007b74 <__retarget_lock_release_recursive>
 800a462:	e7f3      	b.n	800a44c <_vfiprintf_r+0x44>
 800a464:	2300      	movs	r3, #0
 800a466:	9309      	str	r3, [sp, #36]	; 0x24
 800a468:	2320      	movs	r3, #32
 800a46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a472:	2330      	movs	r3, #48	; 0x30
 800a474:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a628 <_vfiprintf_r+0x220>
 800a478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a47c:	f04f 0901 	mov.w	r9, #1
 800a480:	4623      	mov	r3, r4
 800a482:	469a      	mov	sl, r3
 800a484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a488:	b10a      	cbz	r2, 800a48e <_vfiprintf_r+0x86>
 800a48a:	2a25      	cmp	r2, #37	; 0x25
 800a48c:	d1f9      	bne.n	800a482 <_vfiprintf_r+0x7a>
 800a48e:	ebba 0b04 	subs.w	fp, sl, r4
 800a492:	d00b      	beq.n	800a4ac <_vfiprintf_r+0xa4>
 800a494:	465b      	mov	r3, fp
 800a496:	4622      	mov	r2, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7ff ffa1 	bl	800a3e2 <__sfputs_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f000 80a9 	beq.w	800a5f8 <_vfiprintf_r+0x1f0>
 800a4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a8:	445a      	add	r2, fp
 800a4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 80a1 	beq.w	800a5f8 <_vfiprintf_r+0x1f0>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c0:	f10a 0a01 	add.w	sl, sl, #1
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ce:	4654      	mov	r4, sl
 800a4d0:	2205      	movs	r2, #5
 800a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d6:	4854      	ldr	r0, [pc, #336]	; (800a628 <_vfiprintf_r+0x220>)
 800a4d8:	f7f5 fea2 	bl	8000220 <memchr>
 800a4dc:	9a04      	ldr	r2, [sp, #16]
 800a4de:	b9d8      	cbnz	r0, 800a518 <_vfiprintf_r+0x110>
 800a4e0:	06d1      	lsls	r1, r2, #27
 800a4e2:	bf44      	itt	mi
 800a4e4:	2320      	movmi	r3, #32
 800a4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ea:	0713      	lsls	r3, r2, #28
 800a4ec:	bf44      	itt	mi
 800a4ee:	232b      	movmi	r3, #43	; 0x2b
 800a4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fa:	d015      	beq.n	800a528 <_vfiprintf_r+0x120>
 800a4fc:	9a07      	ldr	r2, [sp, #28]
 800a4fe:	4654      	mov	r4, sl
 800a500:	2000      	movs	r0, #0
 800a502:	f04f 0c0a 	mov.w	ip, #10
 800a506:	4621      	mov	r1, r4
 800a508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a50c:	3b30      	subs	r3, #48	; 0x30
 800a50e:	2b09      	cmp	r3, #9
 800a510:	d94d      	bls.n	800a5ae <_vfiprintf_r+0x1a6>
 800a512:	b1b0      	cbz	r0, 800a542 <_vfiprintf_r+0x13a>
 800a514:	9207      	str	r2, [sp, #28]
 800a516:	e014      	b.n	800a542 <_vfiprintf_r+0x13a>
 800a518:	eba0 0308 	sub.w	r3, r0, r8
 800a51c:	fa09 f303 	lsl.w	r3, r9, r3
 800a520:	4313      	orrs	r3, r2
 800a522:	9304      	str	r3, [sp, #16]
 800a524:	46a2      	mov	sl, r4
 800a526:	e7d2      	b.n	800a4ce <_vfiprintf_r+0xc6>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	1d19      	adds	r1, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	9103      	str	r1, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfbb      	ittet	lt
 800a534:	425b      	neglt	r3, r3
 800a536:	f042 0202 	orrlt.w	r2, r2, #2
 800a53a:	9307      	strge	r3, [sp, #28]
 800a53c:	9307      	strlt	r3, [sp, #28]
 800a53e:	bfb8      	it	lt
 800a540:	9204      	strlt	r2, [sp, #16]
 800a542:	7823      	ldrb	r3, [r4, #0]
 800a544:	2b2e      	cmp	r3, #46	; 0x2e
 800a546:	d10c      	bne.n	800a562 <_vfiprintf_r+0x15a>
 800a548:	7863      	ldrb	r3, [r4, #1]
 800a54a:	2b2a      	cmp	r3, #42	; 0x2a
 800a54c:	d134      	bne.n	800a5b8 <_vfiprintf_r+0x1b0>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	1d1a      	adds	r2, r3, #4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	9203      	str	r2, [sp, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	bfb8      	it	lt
 800a55a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a55e:	3402      	adds	r4, #2
 800a560:	9305      	str	r3, [sp, #20]
 800a562:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a638 <_vfiprintf_r+0x230>
 800a566:	7821      	ldrb	r1, [r4, #0]
 800a568:	2203      	movs	r2, #3
 800a56a:	4650      	mov	r0, sl
 800a56c:	f7f5 fe58 	bl	8000220 <memchr>
 800a570:	b138      	cbz	r0, 800a582 <_vfiprintf_r+0x17a>
 800a572:	9b04      	ldr	r3, [sp, #16]
 800a574:	eba0 000a 	sub.w	r0, r0, sl
 800a578:	2240      	movs	r2, #64	; 0x40
 800a57a:	4082      	lsls	r2, r0
 800a57c:	4313      	orrs	r3, r2
 800a57e:	3401      	adds	r4, #1
 800a580:	9304      	str	r3, [sp, #16]
 800a582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a586:	4829      	ldr	r0, [pc, #164]	; (800a62c <_vfiprintf_r+0x224>)
 800a588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a58c:	2206      	movs	r2, #6
 800a58e:	f7f5 fe47 	bl	8000220 <memchr>
 800a592:	2800      	cmp	r0, #0
 800a594:	d03f      	beq.n	800a616 <_vfiprintf_r+0x20e>
 800a596:	4b26      	ldr	r3, [pc, #152]	; (800a630 <_vfiprintf_r+0x228>)
 800a598:	bb1b      	cbnz	r3, 800a5e2 <_vfiprintf_r+0x1da>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	3307      	adds	r3, #7
 800a59e:	f023 0307 	bic.w	r3, r3, #7
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	9303      	str	r3, [sp, #12]
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	443b      	add	r3, r7
 800a5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ac:	e768      	b.n	800a480 <_vfiprintf_r+0x78>
 800a5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	e7a6      	b.n	800a506 <_vfiprintf_r+0xfe>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	3401      	adds	r4, #1
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	f04f 0c0a 	mov.w	ip, #10
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ca:	3a30      	subs	r2, #48	; 0x30
 800a5cc:	2a09      	cmp	r2, #9
 800a5ce:	d903      	bls.n	800a5d8 <_vfiprintf_r+0x1d0>
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0c6      	beq.n	800a562 <_vfiprintf_r+0x15a>
 800a5d4:	9105      	str	r1, [sp, #20]
 800a5d6:	e7c4      	b.n	800a562 <_vfiprintf_r+0x15a>
 800a5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5dc:	4604      	mov	r4, r0
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e7f0      	b.n	800a5c4 <_vfiprintf_r+0x1bc>
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	4b12      	ldr	r3, [pc, #72]	; (800a634 <_vfiprintf_r+0x22c>)
 800a5ea:	a904      	add	r1, sp, #16
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7fc fa3d 	bl	8006a6c <_printf_float>
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	1c78      	adds	r0, r7, #1
 800a5f6:	d1d6      	bne.n	800a5a6 <_vfiprintf_r+0x19e>
 800a5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d405      	bmi.n	800a60a <_vfiprintf_r+0x202>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	059a      	lsls	r2, r3, #22
 800a602:	d402      	bmi.n	800a60a <_vfiprintf_r+0x202>
 800a604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a606:	f7fd fab5 	bl	8007b74 <__retarget_lock_release_recursive>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	065b      	lsls	r3, r3, #25
 800a60e:	f53f af1d 	bmi.w	800a44c <_vfiprintf_r+0x44>
 800a612:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a614:	e71c      	b.n	800a450 <_vfiprintf_r+0x48>
 800a616:	ab03      	add	r3, sp, #12
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	462a      	mov	r2, r5
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <_vfiprintf_r+0x22c>)
 800a61e:	a904      	add	r1, sp, #16
 800a620:	4630      	mov	r0, r6
 800a622:	f7fc fcc7 	bl	8006fb4 <_printf_i>
 800a626:	e7e4      	b.n	800a5f2 <_vfiprintf_r+0x1ea>
 800a628:	0800d921 	.word	0x0800d921
 800a62c:	0800d92b 	.word	0x0800d92b
 800a630:	08006a6d 	.word	0x08006a6d
 800a634:	0800a3e3 	.word	0x0800a3e3
 800a638:	0800d927 	.word	0x0800d927

0800a63c <__sflush_r>:
 800a63c:	898a      	ldrh	r2, [r1, #12]
 800a63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a642:	4605      	mov	r5, r0
 800a644:	0710      	lsls	r0, r2, #28
 800a646:	460c      	mov	r4, r1
 800a648:	d458      	bmi.n	800a6fc <__sflush_r+0xc0>
 800a64a:	684b      	ldr	r3, [r1, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dc05      	bgt.n	800a65c <__sflush_r+0x20>
 800a650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	dc02      	bgt.n	800a65c <__sflush_r+0x20>
 800a656:	2000      	movs	r0, #0
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a65e:	2e00      	cmp	r6, #0
 800a660:	d0f9      	beq.n	800a656 <__sflush_r+0x1a>
 800a662:	2300      	movs	r3, #0
 800a664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a668:	682f      	ldr	r7, [r5, #0]
 800a66a:	6a21      	ldr	r1, [r4, #32]
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	d032      	beq.n	800a6d6 <__sflush_r+0x9a>
 800a670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	075a      	lsls	r2, r3, #29
 800a676:	d505      	bpl.n	800a684 <__sflush_r+0x48>
 800a678:	6863      	ldr	r3, [r4, #4]
 800a67a:	1ac0      	subs	r0, r0, r3
 800a67c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a67e:	b10b      	cbz	r3, 800a684 <__sflush_r+0x48>
 800a680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a682:	1ac0      	subs	r0, r0, r3
 800a684:	2300      	movs	r3, #0
 800a686:	4602      	mov	r2, r0
 800a688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a68a:	6a21      	ldr	r1, [r4, #32]
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b0      	blx	r6
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	d106      	bne.n	800a6a4 <__sflush_r+0x68>
 800a696:	6829      	ldr	r1, [r5, #0]
 800a698:	291d      	cmp	r1, #29
 800a69a:	d82b      	bhi.n	800a6f4 <__sflush_r+0xb8>
 800a69c:	4a29      	ldr	r2, [pc, #164]	; (800a744 <__sflush_r+0x108>)
 800a69e:	410a      	asrs	r2, r1
 800a6a0:	07d6      	lsls	r6, r2, #31
 800a6a2:	d427      	bmi.n	800a6f4 <__sflush_r+0xb8>
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	6062      	str	r2, [r4, #4]
 800a6a8:	04d9      	lsls	r1, r3, #19
 800a6aa:	6922      	ldr	r2, [r4, #16]
 800a6ac:	6022      	str	r2, [r4, #0]
 800a6ae:	d504      	bpl.n	800a6ba <__sflush_r+0x7e>
 800a6b0:	1c42      	adds	r2, r0, #1
 800a6b2:	d101      	bne.n	800a6b8 <__sflush_r+0x7c>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b903      	cbnz	r3, 800a6ba <__sflush_r+0x7e>
 800a6b8:	6560      	str	r0, [r4, #84]	; 0x54
 800a6ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6bc:	602f      	str	r7, [r5, #0]
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	d0c9      	beq.n	800a656 <__sflush_r+0x1a>
 800a6c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	d002      	beq.n	800a6d0 <__sflush_r+0x94>
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7fe f8d6 	bl	800887c <_free_r>
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6d4:	e7c0      	b.n	800a658 <__sflush_r+0x1c>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b0      	blx	r6
 800a6dc:	1c41      	adds	r1, r0, #1
 800a6de:	d1c8      	bne.n	800a672 <__sflush_r+0x36>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0c5      	beq.n	800a672 <__sflush_r+0x36>
 800a6e6:	2b1d      	cmp	r3, #29
 800a6e8:	d001      	beq.n	800a6ee <__sflush_r+0xb2>
 800a6ea:	2b16      	cmp	r3, #22
 800a6ec:	d101      	bne.n	800a6f2 <__sflush_r+0xb6>
 800a6ee:	602f      	str	r7, [r5, #0]
 800a6f0:	e7b1      	b.n	800a656 <__sflush_r+0x1a>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	e7ad      	b.n	800a658 <__sflush_r+0x1c>
 800a6fc:	690f      	ldr	r7, [r1, #16]
 800a6fe:	2f00      	cmp	r7, #0
 800a700:	d0a9      	beq.n	800a656 <__sflush_r+0x1a>
 800a702:	0793      	lsls	r3, r2, #30
 800a704:	680e      	ldr	r6, [r1, #0]
 800a706:	bf08      	it	eq
 800a708:	694b      	ldreq	r3, [r1, #20]
 800a70a:	600f      	str	r7, [r1, #0]
 800a70c:	bf18      	it	ne
 800a70e:	2300      	movne	r3, #0
 800a710:	eba6 0807 	sub.w	r8, r6, r7
 800a714:	608b      	str	r3, [r1, #8]
 800a716:	f1b8 0f00 	cmp.w	r8, #0
 800a71a:	dd9c      	ble.n	800a656 <__sflush_r+0x1a>
 800a71c:	6a21      	ldr	r1, [r4, #32]
 800a71e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a720:	4643      	mov	r3, r8
 800a722:	463a      	mov	r2, r7
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	2800      	cmp	r0, #0
 800a72a:	dc06      	bgt.n	800a73a <__sflush_r+0xfe>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	e78e      	b.n	800a658 <__sflush_r+0x1c>
 800a73a:	4407      	add	r7, r0
 800a73c:	eba8 0800 	sub.w	r8, r8, r0
 800a740:	e7e9      	b.n	800a716 <__sflush_r+0xda>
 800a742:	bf00      	nop
 800a744:	dfbffffe 	.word	0xdfbffffe

0800a748 <_fflush_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	690b      	ldr	r3, [r1, #16]
 800a74c:	4605      	mov	r5, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	b913      	cbnz	r3, 800a758 <_fflush_r+0x10>
 800a752:	2500      	movs	r5, #0
 800a754:	4628      	mov	r0, r5
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	b118      	cbz	r0, 800a762 <_fflush_r+0x1a>
 800a75a:	6a03      	ldr	r3, [r0, #32]
 800a75c:	b90b      	cbnz	r3, 800a762 <_fflush_r+0x1a>
 800a75e:	f7fc ffe7 	bl	8007730 <__sinit>
 800a762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f3      	beq.n	800a752 <_fflush_r+0xa>
 800a76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a76c:	07d0      	lsls	r0, r2, #31
 800a76e:	d404      	bmi.n	800a77a <_fflush_r+0x32>
 800a770:	0599      	lsls	r1, r3, #22
 800a772:	d402      	bmi.n	800a77a <_fflush_r+0x32>
 800a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a776:	f7fd f9fc 	bl	8007b72 <__retarget_lock_acquire_recursive>
 800a77a:	4628      	mov	r0, r5
 800a77c:	4621      	mov	r1, r4
 800a77e:	f7ff ff5d 	bl	800a63c <__sflush_r>
 800a782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a784:	07da      	lsls	r2, r3, #31
 800a786:	4605      	mov	r5, r0
 800a788:	d4e4      	bmi.n	800a754 <_fflush_r+0xc>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	059b      	lsls	r3, r3, #22
 800a78e:	d4e1      	bmi.n	800a754 <_fflush_r+0xc>
 800a790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a792:	f7fd f9ef 	bl	8007b74 <__retarget_lock_release_recursive>
 800a796:	e7dd      	b.n	800a754 <_fflush_r+0xc>

0800a798 <__swhatbuf_r>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	b096      	sub	sp, #88	; 0x58
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	461e      	mov	r6, r3
 800a7a8:	da0d      	bge.n	800a7c6 <__swhatbuf_r+0x2e>
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7b0:	f04f 0100 	mov.w	r1, #0
 800a7b4:	bf0c      	ite	eq
 800a7b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7ba:	2340      	movne	r3, #64	; 0x40
 800a7bc:	2000      	movs	r0, #0
 800a7be:	6031      	str	r1, [r6, #0]
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	b016      	add	sp, #88	; 0x58
 800a7c4:	bd70      	pop	{r4, r5, r6, pc}
 800a7c6:	466a      	mov	r2, sp
 800a7c8:	f000 f8a8 	bl	800a91c <_fstat_r>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	dbec      	blt.n	800a7aa <__swhatbuf_r+0x12>
 800a7d0:	9901      	ldr	r1, [sp, #4]
 800a7d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7da:	4259      	negs	r1, r3
 800a7dc:	4159      	adcs	r1, r3
 800a7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7e2:	e7eb      	b.n	800a7bc <__swhatbuf_r+0x24>

0800a7e4 <__smakebuf_r>:
 800a7e4:	898b      	ldrh	r3, [r1, #12]
 800a7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e8:	079d      	lsls	r5, r3, #30
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	d507      	bpl.n	800a800 <__smakebuf_r+0x1c>
 800a7f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	6163      	str	r3, [r4, #20]
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	ab01      	add	r3, sp, #4
 800a802:	466a      	mov	r2, sp
 800a804:	f7ff ffc8 	bl	800a798 <__swhatbuf_r>
 800a808:	9900      	ldr	r1, [sp, #0]
 800a80a:	4605      	mov	r5, r0
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7fe f8a9 	bl	8008964 <_malloc_r>
 800a812:	b948      	cbnz	r0, 800a828 <__smakebuf_r+0x44>
 800a814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a818:	059a      	lsls	r2, r3, #22
 800a81a:	d4ef      	bmi.n	800a7fc <__smakebuf_r+0x18>
 800a81c:	f023 0303 	bic.w	r3, r3, #3
 800a820:	f043 0302 	orr.w	r3, r3, #2
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	e7e3      	b.n	800a7f0 <__smakebuf_r+0xc>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	6163      	str	r3, [r4, #20]
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	6120      	str	r0, [r4, #16]
 800a83a:	b15b      	cbz	r3, 800a854 <__smakebuf_r+0x70>
 800a83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a840:	4630      	mov	r0, r6
 800a842:	f000 f87d 	bl	800a940 <_isatty_r>
 800a846:	b128      	cbz	r0, 800a854 <__smakebuf_r+0x70>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	f043 0301 	orr.w	r3, r3, #1
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	431d      	orrs	r5, r3
 800a858:	81a5      	strh	r5, [r4, #12]
 800a85a:	e7cf      	b.n	800a7fc <__smakebuf_r+0x18>

0800a85c <_putc_r>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	460d      	mov	r5, r1
 800a860:	4614      	mov	r4, r2
 800a862:	4606      	mov	r6, r0
 800a864:	b118      	cbz	r0, 800a86e <_putc_r+0x12>
 800a866:	6a03      	ldr	r3, [r0, #32]
 800a868:	b90b      	cbnz	r3, 800a86e <_putc_r+0x12>
 800a86a:	f7fc ff61 	bl	8007730 <__sinit>
 800a86e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a870:	07d8      	lsls	r0, r3, #31
 800a872:	d405      	bmi.n	800a880 <_putc_r+0x24>
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	0599      	lsls	r1, r3, #22
 800a878:	d402      	bmi.n	800a880 <_putc_r+0x24>
 800a87a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a87c:	f7fd f979 	bl	8007b72 <__retarget_lock_acquire_recursive>
 800a880:	68a3      	ldr	r3, [r4, #8]
 800a882:	3b01      	subs	r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	60a3      	str	r3, [r4, #8]
 800a888:	da05      	bge.n	800a896 <_putc_r+0x3a>
 800a88a:	69a2      	ldr	r2, [r4, #24]
 800a88c:	4293      	cmp	r3, r2
 800a88e:	db12      	blt.n	800a8b6 <_putc_r+0x5a>
 800a890:	b2eb      	uxtb	r3, r5
 800a892:	2b0a      	cmp	r3, #10
 800a894:	d00f      	beq.n	800a8b6 <_putc_r+0x5a>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	6022      	str	r2, [r4, #0]
 800a89c:	701d      	strb	r5, [r3, #0]
 800a89e:	b2ed      	uxtb	r5, r5
 800a8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8a2:	07da      	lsls	r2, r3, #31
 800a8a4:	d405      	bmi.n	800a8b2 <_putc_r+0x56>
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	059b      	lsls	r3, r3, #22
 800a8aa:	d402      	bmi.n	800a8b2 <_putc_r+0x56>
 800a8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ae:	f7fd f961 	bl	8007b74 <__retarget_lock_release_recursive>
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4622      	mov	r2, r4
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7fd f847 	bl	800794e <__swbuf_r>
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	e7ed      	b.n	800a8a0 <_putc_r+0x44>

0800a8c4 <memmove>:
 800a8c4:	4288      	cmp	r0, r1
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	eb01 0402 	add.w	r4, r1, r2
 800a8cc:	d902      	bls.n	800a8d4 <memmove+0x10>
 800a8ce:	4284      	cmp	r4, r0
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	d807      	bhi.n	800a8e4 <memmove+0x20>
 800a8d4:	1e43      	subs	r3, r0, #1
 800a8d6:	42a1      	cmp	r1, r4
 800a8d8:	d008      	beq.n	800a8ec <memmove+0x28>
 800a8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8e2:	e7f8      	b.n	800a8d6 <memmove+0x12>
 800a8e4:	4402      	add	r2, r0
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	428a      	cmp	r2, r1
 800a8ea:	d100      	bne.n	800a8ee <memmove+0x2a>
 800a8ec:	bd10      	pop	{r4, pc}
 800a8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8f6:	e7f7      	b.n	800a8e8 <memmove+0x24>

0800a8f8 <strncmp>:
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	b16a      	cbz	r2, 800a918 <strncmp+0x20>
 800a8fc:	3901      	subs	r1, #1
 800a8fe:	1884      	adds	r4, r0, r2
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a908:	429a      	cmp	r2, r3
 800a90a:	d103      	bne.n	800a914 <strncmp+0x1c>
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d001      	beq.n	800a914 <strncmp+0x1c>
 800a910:	2a00      	cmp	r2, #0
 800a912:	d1f5      	bne.n	800a900 <strncmp+0x8>
 800a914:	1ad0      	subs	r0, r2, r3
 800a916:	bd10      	pop	{r4, pc}
 800a918:	4610      	mov	r0, r2
 800a91a:	e7fc      	b.n	800a916 <strncmp+0x1e>

0800a91c <_fstat_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	; (800a93c <_fstat_r+0x20>)
 800a920:	2300      	movs	r3, #0
 800a922:	4604      	mov	r4, r0
 800a924:	4608      	mov	r0, r1
 800a926:	4611      	mov	r1, r2
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f7f8 f9f4 	bl	8002d16 <_fstat>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d102      	bne.n	800a938 <_fstat_r+0x1c>
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	b103      	cbz	r3, 800a938 <_fstat_r+0x1c>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	200009b8 	.word	0x200009b8

0800a940 <_isatty_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	; (800a95c <_isatty_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f8 f9f3 	bl	8002d36 <_isatty>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_isatty_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_isatty_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	200009b8 	.word	0x200009b8

0800a960 <_sbrk_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d06      	ldr	r5, [pc, #24]	; (800a97c <_sbrk_r+0x1c>)
 800a964:	2300      	movs	r3, #0
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f8 f9fc 	bl	8002d68 <_sbrk>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_sbrk_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_sbrk_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	200009b8 	.word	0x200009b8

0800a980 <memcpy>:
 800a980:	440a      	add	r2, r1
 800a982:	4291      	cmp	r1, r2
 800a984:	f100 33ff 	add.w	r3, r0, #4294967295
 800a988:	d100      	bne.n	800a98c <memcpy+0xc>
 800a98a:	4770      	bx	lr
 800a98c:	b510      	push	{r4, lr}
 800a98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a992:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a996:	4291      	cmp	r1, r2
 800a998:	d1f9      	bne.n	800a98e <memcpy+0xe>
 800a99a:	bd10      	pop	{r4, pc}
 800a99c:	0000      	movs	r0, r0
	...

0800a9a0 <nan>:
 800a9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9a8 <nan+0x8>
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	00000000 	.word	0x00000000
 800a9ac:	7ff80000 	.word	0x7ff80000

0800a9b0 <__assert_func>:
 800a9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9b2:	4614      	mov	r4, r2
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <__assert_func+0x2c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	68d8      	ldr	r0, [r3, #12]
 800a9be:	b14c      	cbz	r4, 800a9d4 <__assert_func+0x24>
 800a9c0:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <__assert_func+0x30>)
 800a9c2:	9100      	str	r1, [sp, #0]
 800a9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c8:	4906      	ldr	r1, [pc, #24]	; (800a9e4 <__assert_func+0x34>)
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	f000 fbca 	bl	800b164 <fiprintf>
 800a9d0:	f000 fbda 	bl	800b188 <abort>
 800a9d4:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <__assert_func+0x38>)
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	e7f3      	b.n	800a9c2 <__assert_func+0x12>
 800a9da:	bf00      	nop
 800a9dc:	2000006c 	.word	0x2000006c
 800a9e0:	0800d93a 	.word	0x0800d93a
 800a9e4:	0800d947 	.word	0x0800d947
 800a9e8:	0800d975 	.word	0x0800d975

0800a9ec <_calloc_r>:
 800a9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800a9f2:	b94c      	cbnz	r4, 800aa08 <_calloc_r+0x1c>
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	9201      	str	r2, [sp, #4]
 800a9f8:	f7fd ffb4 	bl	8008964 <_malloc_r>
 800a9fc:	9a01      	ldr	r2, [sp, #4]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b930      	cbnz	r0, 800aa10 <_calloc_r+0x24>
 800aa02:	4628      	mov	r0, r5
 800aa04:	b003      	add	sp, #12
 800aa06:	bd30      	pop	{r4, r5, pc}
 800aa08:	220c      	movs	r2, #12
 800aa0a:	6002      	str	r2, [r0, #0]
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	e7f8      	b.n	800aa02 <_calloc_r+0x16>
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7fd f831 	bl	8007a78 <memset>
 800aa16:	e7f4      	b.n	800aa02 <_calloc_r+0x16>

0800aa18 <rshift>:
 800aa18:	6903      	ldr	r3, [r0, #16]
 800aa1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa26:	f100 0414 	add.w	r4, r0, #20
 800aa2a:	dd45      	ble.n	800aab8 <rshift+0xa0>
 800aa2c:	f011 011f 	ands.w	r1, r1, #31
 800aa30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa38:	d10c      	bne.n	800aa54 <rshift+0x3c>
 800aa3a:	f100 0710 	add.w	r7, r0, #16
 800aa3e:	4629      	mov	r1, r5
 800aa40:	42b1      	cmp	r1, r6
 800aa42:	d334      	bcc.n	800aaae <rshift+0x96>
 800aa44:	1a9b      	subs	r3, r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	1eea      	subs	r2, r5, #3
 800aa4a:	4296      	cmp	r6, r2
 800aa4c:	bf38      	it	cc
 800aa4e:	2300      	movcc	r3, #0
 800aa50:	4423      	add	r3, r4
 800aa52:	e015      	b.n	800aa80 <rshift+0x68>
 800aa54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa58:	f1c1 0820 	rsb	r8, r1, #32
 800aa5c:	40cf      	lsrs	r7, r1
 800aa5e:	f105 0e04 	add.w	lr, r5, #4
 800aa62:	46a1      	mov	r9, r4
 800aa64:	4576      	cmp	r6, lr
 800aa66:	46f4      	mov	ip, lr
 800aa68:	d815      	bhi.n	800aa96 <rshift+0x7e>
 800aa6a:	1a9a      	subs	r2, r3, r2
 800aa6c:	0092      	lsls	r2, r2, #2
 800aa6e:	3a04      	subs	r2, #4
 800aa70:	3501      	adds	r5, #1
 800aa72:	42ae      	cmp	r6, r5
 800aa74:	bf38      	it	cc
 800aa76:	2200      	movcc	r2, #0
 800aa78:	18a3      	adds	r3, r4, r2
 800aa7a:	50a7      	str	r7, [r4, r2]
 800aa7c:	b107      	cbz	r7, 800aa80 <rshift+0x68>
 800aa7e:	3304      	adds	r3, #4
 800aa80:	1b1a      	subs	r2, r3, r4
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa88:	bf08      	it	eq
 800aa8a:	2300      	moveq	r3, #0
 800aa8c:	6102      	str	r2, [r0, #16]
 800aa8e:	bf08      	it	eq
 800aa90:	6143      	streq	r3, [r0, #20]
 800aa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa96:	f8dc c000 	ldr.w	ip, [ip]
 800aa9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa9e:	ea4c 0707 	orr.w	r7, ip, r7
 800aaa2:	f849 7b04 	str.w	r7, [r9], #4
 800aaa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aaaa:	40cf      	lsrs	r7, r1
 800aaac:	e7da      	b.n	800aa64 <rshift+0x4c>
 800aaae:	f851 cb04 	ldr.w	ip, [r1], #4
 800aab2:	f847 cf04 	str.w	ip, [r7, #4]!
 800aab6:	e7c3      	b.n	800aa40 <rshift+0x28>
 800aab8:	4623      	mov	r3, r4
 800aaba:	e7e1      	b.n	800aa80 <rshift+0x68>

0800aabc <__hexdig_fun>:
 800aabc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	d802      	bhi.n	800aaca <__hexdig_fun+0xe>
 800aac4:	3820      	subs	r0, #32
 800aac6:	b2c0      	uxtb	r0, r0
 800aac8:	4770      	bx	lr
 800aaca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aace:	2b05      	cmp	r3, #5
 800aad0:	d801      	bhi.n	800aad6 <__hexdig_fun+0x1a>
 800aad2:	3847      	subs	r0, #71	; 0x47
 800aad4:	e7f7      	b.n	800aac6 <__hexdig_fun+0xa>
 800aad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aada:	2b05      	cmp	r3, #5
 800aadc:	d801      	bhi.n	800aae2 <__hexdig_fun+0x26>
 800aade:	3827      	subs	r0, #39	; 0x27
 800aae0:	e7f1      	b.n	800aac6 <__hexdig_fun+0xa>
 800aae2:	2000      	movs	r0, #0
 800aae4:	4770      	bx	lr
	...

0800aae8 <__gethex>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	4617      	mov	r7, r2
 800aaee:	680a      	ldr	r2, [r1, #0]
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	f102 0b02 	add.w	fp, r2, #2
 800aaf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aafa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aafe:	4681      	mov	r9, r0
 800ab00:	468a      	mov	sl, r1
 800ab02:	9302      	str	r3, [sp, #8]
 800ab04:	32fe      	adds	r2, #254	; 0xfe
 800ab06:	eb02 030b 	add.w	r3, r2, fp
 800ab0a:	46d8      	mov	r8, fp
 800ab0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	2830      	cmp	r0, #48	; 0x30
 800ab14:	d0f7      	beq.n	800ab06 <__gethex+0x1e>
 800ab16:	f7ff ffd1 	bl	800aabc <__hexdig_fun>
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d138      	bne.n	800ab92 <__gethex+0xaa>
 800ab20:	49a7      	ldr	r1, [pc, #668]	; (800adc0 <__gethex+0x2d8>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	4640      	mov	r0, r8
 800ab26:	f7ff fee7 	bl	800a8f8 <strncmp>
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d169      	bne.n	800ac04 <__gethex+0x11c>
 800ab30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ab34:	465d      	mov	r5, fp
 800ab36:	f7ff ffc1 	bl	800aabc <__hexdig_fun>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d064      	beq.n	800ac08 <__gethex+0x120>
 800ab3e:	465a      	mov	r2, fp
 800ab40:	7810      	ldrb	r0, [r2, #0]
 800ab42:	2830      	cmp	r0, #48	; 0x30
 800ab44:	4690      	mov	r8, r2
 800ab46:	f102 0201 	add.w	r2, r2, #1
 800ab4a:	d0f9      	beq.n	800ab40 <__gethex+0x58>
 800ab4c:	f7ff ffb6 	bl	800aabc <__hexdig_fun>
 800ab50:	2301      	movs	r3, #1
 800ab52:	fab0 f480 	clz	r4, r0
 800ab56:	0964      	lsrs	r4, r4, #5
 800ab58:	465e      	mov	r6, fp
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	4615      	mov	r5, r2
 800ab60:	3201      	adds	r2, #1
 800ab62:	7828      	ldrb	r0, [r5, #0]
 800ab64:	f7ff ffaa 	bl	800aabc <__hexdig_fun>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d1f8      	bne.n	800ab5e <__gethex+0x76>
 800ab6c:	4994      	ldr	r1, [pc, #592]	; (800adc0 <__gethex+0x2d8>)
 800ab6e:	2201      	movs	r2, #1
 800ab70:	4628      	mov	r0, r5
 800ab72:	f7ff fec1 	bl	800a8f8 <strncmp>
 800ab76:	b978      	cbnz	r0, 800ab98 <__gethex+0xb0>
 800ab78:	b946      	cbnz	r6, 800ab8c <__gethex+0xa4>
 800ab7a:	1c6e      	adds	r6, r5, #1
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	4615      	mov	r5, r2
 800ab80:	3201      	adds	r2, #1
 800ab82:	7828      	ldrb	r0, [r5, #0]
 800ab84:	f7ff ff9a 	bl	800aabc <__hexdig_fun>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d1f8      	bne.n	800ab7e <__gethex+0x96>
 800ab8c:	1b73      	subs	r3, r6, r5
 800ab8e:	009e      	lsls	r6, r3, #2
 800ab90:	e004      	b.n	800ab9c <__gethex+0xb4>
 800ab92:	2400      	movs	r4, #0
 800ab94:	4626      	mov	r6, r4
 800ab96:	e7e1      	b.n	800ab5c <__gethex+0x74>
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	d1f7      	bne.n	800ab8c <__gethex+0xa4>
 800ab9c:	782b      	ldrb	r3, [r5, #0]
 800ab9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aba2:	2b50      	cmp	r3, #80	; 0x50
 800aba4:	d13d      	bne.n	800ac22 <__gethex+0x13a>
 800aba6:	786b      	ldrb	r3, [r5, #1]
 800aba8:	2b2b      	cmp	r3, #43	; 0x2b
 800abaa:	d02f      	beq.n	800ac0c <__gethex+0x124>
 800abac:	2b2d      	cmp	r3, #45	; 0x2d
 800abae:	d031      	beq.n	800ac14 <__gethex+0x12c>
 800abb0:	1c69      	adds	r1, r5, #1
 800abb2:	f04f 0b00 	mov.w	fp, #0
 800abb6:	7808      	ldrb	r0, [r1, #0]
 800abb8:	f7ff ff80 	bl	800aabc <__hexdig_fun>
 800abbc:	1e42      	subs	r2, r0, #1
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	2a18      	cmp	r2, #24
 800abc2:	d82e      	bhi.n	800ac22 <__gethex+0x13a>
 800abc4:	f1a0 0210 	sub.w	r2, r0, #16
 800abc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abcc:	f7ff ff76 	bl	800aabc <__hexdig_fun>
 800abd0:	f100 3cff 	add.w	ip, r0, #4294967295
 800abd4:	fa5f fc8c 	uxtb.w	ip, ip
 800abd8:	f1bc 0f18 	cmp.w	ip, #24
 800abdc:	d91d      	bls.n	800ac1a <__gethex+0x132>
 800abde:	f1bb 0f00 	cmp.w	fp, #0
 800abe2:	d000      	beq.n	800abe6 <__gethex+0xfe>
 800abe4:	4252      	negs	r2, r2
 800abe6:	4416      	add	r6, r2
 800abe8:	f8ca 1000 	str.w	r1, [sl]
 800abec:	b1dc      	cbz	r4, 800ac26 <__gethex+0x13e>
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf14      	ite	ne
 800abf4:	f04f 0800 	movne.w	r8, #0
 800abf8:	f04f 0806 	moveq.w	r8, #6
 800abfc:	4640      	mov	r0, r8
 800abfe:	b005      	add	sp, #20
 800ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac04:	4645      	mov	r5, r8
 800ac06:	4626      	mov	r6, r4
 800ac08:	2401      	movs	r4, #1
 800ac0a:	e7c7      	b.n	800ab9c <__gethex+0xb4>
 800ac0c:	f04f 0b00 	mov.w	fp, #0
 800ac10:	1ca9      	adds	r1, r5, #2
 800ac12:	e7d0      	b.n	800abb6 <__gethex+0xce>
 800ac14:	f04f 0b01 	mov.w	fp, #1
 800ac18:	e7fa      	b.n	800ac10 <__gethex+0x128>
 800ac1a:	230a      	movs	r3, #10
 800ac1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ac20:	e7d0      	b.n	800abc4 <__gethex+0xdc>
 800ac22:	4629      	mov	r1, r5
 800ac24:	e7e0      	b.n	800abe8 <__gethex+0x100>
 800ac26:	eba5 0308 	sub.w	r3, r5, r8
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	2b07      	cmp	r3, #7
 800ac30:	dc0a      	bgt.n	800ac48 <__gethex+0x160>
 800ac32:	4648      	mov	r0, r9
 800ac34:	f7fd ff22 	bl	8008a7c <_Balloc>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	b940      	cbnz	r0, 800ac4e <__gethex+0x166>
 800ac3c:	4b61      	ldr	r3, [pc, #388]	; (800adc4 <__gethex+0x2dc>)
 800ac3e:	4602      	mov	r2, r0
 800ac40:	21e4      	movs	r1, #228	; 0xe4
 800ac42:	4861      	ldr	r0, [pc, #388]	; (800adc8 <__gethex+0x2e0>)
 800ac44:	f7ff feb4 	bl	800a9b0 <__assert_func>
 800ac48:	3101      	adds	r1, #1
 800ac4a:	105b      	asrs	r3, r3, #1
 800ac4c:	e7ef      	b.n	800ac2e <__gethex+0x146>
 800ac4e:	f100 0a14 	add.w	sl, r0, #20
 800ac52:	2300      	movs	r3, #0
 800ac54:	495a      	ldr	r1, [pc, #360]	; (800adc0 <__gethex+0x2d8>)
 800ac56:	f8cd a004 	str.w	sl, [sp, #4]
 800ac5a:	469b      	mov	fp, r3
 800ac5c:	45a8      	cmp	r8, r5
 800ac5e:	d342      	bcc.n	800ace6 <__gethex+0x1fe>
 800ac60:	9801      	ldr	r0, [sp, #4]
 800ac62:	f840 bb04 	str.w	fp, [r0], #4
 800ac66:	eba0 000a 	sub.w	r0, r0, sl
 800ac6a:	1080      	asrs	r0, r0, #2
 800ac6c:	6120      	str	r0, [r4, #16]
 800ac6e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ac72:	4658      	mov	r0, fp
 800ac74:	f7fd fff4 	bl	8008c60 <__hi0bits>
 800ac78:	683d      	ldr	r5, [r7, #0]
 800ac7a:	eba8 0000 	sub.w	r0, r8, r0
 800ac7e:	42a8      	cmp	r0, r5
 800ac80:	dd59      	ble.n	800ad36 <__gethex+0x24e>
 800ac82:	eba0 0805 	sub.w	r8, r0, r5
 800ac86:	4641      	mov	r1, r8
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f7fe fb83 	bl	8009394 <__any_on>
 800ac8e:	4683      	mov	fp, r0
 800ac90:	b1b8      	cbz	r0, 800acc2 <__gethex+0x1da>
 800ac92:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac96:	1159      	asrs	r1, r3, #5
 800ac98:	f003 021f 	and.w	r2, r3, #31
 800ac9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aca0:	f04f 0b01 	mov.w	fp, #1
 800aca4:	fa0b f202 	lsl.w	r2, fp, r2
 800aca8:	420a      	tst	r2, r1
 800acaa:	d00a      	beq.n	800acc2 <__gethex+0x1da>
 800acac:	455b      	cmp	r3, fp
 800acae:	dd06      	ble.n	800acbe <__gethex+0x1d6>
 800acb0:	f1a8 0102 	sub.w	r1, r8, #2
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7fe fb6d 	bl	8009394 <__any_on>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d138      	bne.n	800ad30 <__gethex+0x248>
 800acbe:	f04f 0b02 	mov.w	fp, #2
 800acc2:	4641      	mov	r1, r8
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7ff fea7 	bl	800aa18 <rshift>
 800acca:	4446      	add	r6, r8
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	42b3      	cmp	r3, r6
 800acd0:	da41      	bge.n	800ad56 <__gethex+0x26e>
 800acd2:	4621      	mov	r1, r4
 800acd4:	4648      	mov	r0, r9
 800acd6:	f7fd ff11 	bl	8008afc <_Bfree>
 800acda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acdc:	2300      	movs	r3, #0
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ace4:	e78a      	b.n	800abfc <__gethex+0x114>
 800ace6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800acea:	2a2e      	cmp	r2, #46	; 0x2e
 800acec:	d014      	beq.n	800ad18 <__gethex+0x230>
 800acee:	2b20      	cmp	r3, #32
 800acf0:	d106      	bne.n	800ad00 <__gethex+0x218>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	f843 bb04 	str.w	fp, [r3], #4
 800acf8:	f04f 0b00 	mov.w	fp, #0
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	465b      	mov	r3, fp
 800ad00:	7828      	ldrb	r0, [r5, #0]
 800ad02:	9303      	str	r3, [sp, #12]
 800ad04:	f7ff feda 	bl	800aabc <__hexdig_fun>
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	f000 000f 	and.w	r0, r0, #15
 800ad0e:	4098      	lsls	r0, r3
 800ad10:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad14:	3304      	adds	r3, #4
 800ad16:	e7a1      	b.n	800ac5c <__gethex+0x174>
 800ad18:	45a8      	cmp	r8, r5
 800ad1a:	d8e8      	bhi.n	800acee <__gethex+0x206>
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	4628      	mov	r0, r5
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	f7ff fde9 	bl	800a8f8 <strncmp>
 800ad26:	4926      	ldr	r1, [pc, #152]	; (800adc0 <__gethex+0x2d8>)
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d1df      	bne.n	800acee <__gethex+0x206>
 800ad2e:	e795      	b.n	800ac5c <__gethex+0x174>
 800ad30:	f04f 0b03 	mov.w	fp, #3
 800ad34:	e7c5      	b.n	800acc2 <__gethex+0x1da>
 800ad36:	da0b      	bge.n	800ad50 <__gethex+0x268>
 800ad38:	eba5 0800 	sub.w	r8, r5, r0
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4642      	mov	r2, r8
 800ad40:	4648      	mov	r0, r9
 800ad42:	f7fe f8f5 	bl	8008f30 <__lshift>
 800ad46:	eba6 0608 	sub.w	r6, r6, r8
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	f100 0a14 	add.w	sl, r0, #20
 800ad50:	f04f 0b00 	mov.w	fp, #0
 800ad54:	e7ba      	b.n	800accc <__gethex+0x1e4>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	42b3      	cmp	r3, r6
 800ad5a:	dd73      	ble.n	800ae44 <__gethex+0x35c>
 800ad5c:	1b9e      	subs	r6, r3, r6
 800ad5e:	42b5      	cmp	r5, r6
 800ad60:	dc34      	bgt.n	800adcc <__gethex+0x2e4>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d023      	beq.n	800adb0 <__gethex+0x2c8>
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d025      	beq.n	800adb8 <__gethex+0x2d0>
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d115      	bne.n	800ad9c <__gethex+0x2b4>
 800ad70:	42b5      	cmp	r5, r6
 800ad72:	d113      	bne.n	800ad9c <__gethex+0x2b4>
 800ad74:	2d01      	cmp	r5, #1
 800ad76:	d10b      	bne.n	800ad90 <__gethex+0x2a8>
 800ad78:	9a02      	ldr	r2, [sp, #8]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	2301      	movs	r3, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	f8ca 3000 	str.w	r3, [sl]
 800ad86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad88:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad8c:	601c      	str	r4, [r3, #0]
 800ad8e:	e735      	b.n	800abfc <__gethex+0x114>
 800ad90:	1e69      	subs	r1, r5, #1
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7fe fafe 	bl	8009394 <__any_on>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1ed      	bne.n	800ad78 <__gethex+0x290>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4648      	mov	r0, r9
 800ada0:	f7fd feac 	bl	8008afc <_Bfree>
 800ada4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada6:	2300      	movs	r3, #0
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800adae:	e725      	b.n	800abfc <__gethex+0x114>
 800adb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1f2      	bne.n	800ad9c <__gethex+0x2b4>
 800adb6:	e7df      	b.n	800ad78 <__gethex+0x290>
 800adb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1dc      	bne.n	800ad78 <__gethex+0x290>
 800adbe:	e7ed      	b.n	800ad9c <__gethex+0x2b4>
 800adc0:	0800d7cc 	.word	0x0800d7cc
 800adc4:	0800d665 	.word	0x0800d665
 800adc8:	0800d976 	.word	0x0800d976
 800adcc:	f106 38ff 	add.w	r8, r6, #4294967295
 800add0:	f1bb 0f00 	cmp.w	fp, #0
 800add4:	d133      	bne.n	800ae3e <__gethex+0x356>
 800add6:	f1b8 0f00 	cmp.w	r8, #0
 800adda:	d004      	beq.n	800ade6 <__gethex+0x2fe>
 800addc:	4641      	mov	r1, r8
 800adde:	4620      	mov	r0, r4
 800ade0:	f7fe fad8 	bl	8009394 <__any_on>
 800ade4:	4683      	mov	fp, r0
 800ade6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800adea:	2301      	movs	r3, #1
 800adec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800adf0:	f008 081f 	and.w	r8, r8, #31
 800adf4:	fa03 f308 	lsl.w	r3, r3, r8
 800adf8:	4213      	tst	r3, r2
 800adfa:	4631      	mov	r1, r6
 800adfc:	4620      	mov	r0, r4
 800adfe:	bf18      	it	ne
 800ae00:	f04b 0b02 	orrne.w	fp, fp, #2
 800ae04:	1bad      	subs	r5, r5, r6
 800ae06:	f7ff fe07 	bl	800aa18 <rshift>
 800ae0a:	687e      	ldr	r6, [r7, #4]
 800ae0c:	f04f 0802 	mov.w	r8, #2
 800ae10:	f1bb 0f00 	cmp.w	fp, #0
 800ae14:	d04a      	beq.n	800aeac <__gethex+0x3c4>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d016      	beq.n	800ae4a <__gethex+0x362>
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d018      	beq.n	800ae52 <__gethex+0x36a>
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d109      	bne.n	800ae38 <__gethex+0x350>
 800ae24:	f01b 0f02 	tst.w	fp, #2
 800ae28:	d006      	beq.n	800ae38 <__gethex+0x350>
 800ae2a:	f8da 3000 	ldr.w	r3, [sl]
 800ae2e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ae32:	f01b 0f01 	tst.w	fp, #1
 800ae36:	d10f      	bne.n	800ae58 <__gethex+0x370>
 800ae38:	f048 0810 	orr.w	r8, r8, #16
 800ae3c:	e036      	b.n	800aeac <__gethex+0x3c4>
 800ae3e:	f04f 0b01 	mov.w	fp, #1
 800ae42:	e7d0      	b.n	800ade6 <__gethex+0x2fe>
 800ae44:	f04f 0801 	mov.w	r8, #1
 800ae48:	e7e2      	b.n	800ae10 <__gethex+0x328>
 800ae4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae4c:	f1c3 0301 	rsb	r3, r3, #1
 800ae50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0ef      	beq.n	800ae38 <__gethex+0x350>
 800ae58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae5c:	f104 0214 	add.w	r2, r4, #20
 800ae60:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4694      	mov	ip, r2
 800ae6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae72:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae76:	d01e      	beq.n	800aeb6 <__gethex+0x3ce>
 800ae78:	3101      	adds	r1, #1
 800ae7a:	f8cc 1000 	str.w	r1, [ip]
 800ae7e:	f1b8 0f02 	cmp.w	r8, #2
 800ae82:	f104 0214 	add.w	r2, r4, #20
 800ae86:	d13d      	bne.n	800af04 <__gethex+0x41c>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	d10b      	bne.n	800aea8 <__gethex+0x3c0>
 800ae90:	1169      	asrs	r1, r5, #5
 800ae92:	2301      	movs	r3, #1
 800ae94:	f005 051f 	and.w	r5, r5, #31
 800ae98:	fa03 f505 	lsl.w	r5, r3, r5
 800ae9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aea0:	421d      	tst	r5, r3
 800aea2:	bf18      	it	ne
 800aea4:	f04f 0801 	movne.w	r8, #1
 800aea8:	f048 0820 	orr.w	r8, r8, #32
 800aeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeae:	601c      	str	r4, [r3, #0]
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	601e      	str	r6, [r3, #0]
 800aeb4:	e6a2      	b.n	800abfc <__gethex+0x114>
 800aeb6:	4290      	cmp	r0, r2
 800aeb8:	f842 3c04 	str.w	r3, [r2, #-4]
 800aebc:	d8d6      	bhi.n	800ae6c <__gethex+0x384>
 800aebe:	68a2      	ldr	r2, [r4, #8]
 800aec0:	4593      	cmp	fp, r2
 800aec2:	db17      	blt.n	800aef4 <__gethex+0x40c>
 800aec4:	6861      	ldr	r1, [r4, #4]
 800aec6:	4648      	mov	r0, r9
 800aec8:	3101      	adds	r1, #1
 800aeca:	f7fd fdd7 	bl	8008a7c <_Balloc>
 800aece:	4682      	mov	sl, r0
 800aed0:	b918      	cbnz	r0, 800aeda <__gethex+0x3f2>
 800aed2:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <__gethex+0x458>)
 800aed4:	4602      	mov	r2, r0
 800aed6:	2184      	movs	r1, #132	; 0x84
 800aed8:	e6b3      	b.n	800ac42 <__gethex+0x15a>
 800aeda:	6922      	ldr	r2, [r4, #16]
 800aedc:	3202      	adds	r2, #2
 800aede:	f104 010c 	add.w	r1, r4, #12
 800aee2:	0092      	lsls	r2, r2, #2
 800aee4:	300c      	adds	r0, #12
 800aee6:	f7ff fd4b 	bl	800a980 <memcpy>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4648      	mov	r0, r9
 800aeee:	f7fd fe05 	bl	8008afc <_Bfree>
 800aef2:	4654      	mov	r4, sl
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	1c51      	adds	r1, r2, #1
 800aef8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aefc:	6121      	str	r1, [r4, #16]
 800aefe:	2101      	movs	r1, #1
 800af00:	6151      	str	r1, [r2, #20]
 800af02:	e7bc      	b.n	800ae7e <__gethex+0x396>
 800af04:	6921      	ldr	r1, [r4, #16]
 800af06:	4559      	cmp	r1, fp
 800af08:	dd0b      	ble.n	800af22 <__gethex+0x43a>
 800af0a:	2101      	movs	r1, #1
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff fd83 	bl	800aa18 <rshift>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	3601      	adds	r6, #1
 800af16:	42b3      	cmp	r3, r6
 800af18:	f6ff aedb 	blt.w	800acd2 <__gethex+0x1ea>
 800af1c:	f04f 0801 	mov.w	r8, #1
 800af20:	e7c2      	b.n	800aea8 <__gethex+0x3c0>
 800af22:	f015 051f 	ands.w	r5, r5, #31
 800af26:	d0f9      	beq.n	800af1c <__gethex+0x434>
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	441a      	add	r2, r3
 800af2c:	f1c5 0520 	rsb	r5, r5, #32
 800af30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800af34:	f7fd fe94 	bl	8008c60 <__hi0bits>
 800af38:	42a8      	cmp	r0, r5
 800af3a:	dbe6      	blt.n	800af0a <__gethex+0x422>
 800af3c:	e7ee      	b.n	800af1c <__gethex+0x434>
 800af3e:	bf00      	nop
 800af40:	0800d665 	.word	0x0800d665

0800af44 <L_shift>:
 800af44:	f1c2 0208 	rsb	r2, r2, #8
 800af48:	0092      	lsls	r2, r2, #2
 800af4a:	b570      	push	{r4, r5, r6, lr}
 800af4c:	f1c2 0620 	rsb	r6, r2, #32
 800af50:	6843      	ldr	r3, [r0, #4]
 800af52:	6804      	ldr	r4, [r0, #0]
 800af54:	fa03 f506 	lsl.w	r5, r3, r6
 800af58:	432c      	orrs	r4, r5
 800af5a:	40d3      	lsrs	r3, r2
 800af5c:	6004      	str	r4, [r0, #0]
 800af5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800af62:	4288      	cmp	r0, r1
 800af64:	d3f4      	bcc.n	800af50 <L_shift+0xc>
 800af66:	bd70      	pop	{r4, r5, r6, pc}

0800af68 <__match>:
 800af68:	b530      	push	{r4, r5, lr}
 800af6a:	6803      	ldr	r3, [r0, #0]
 800af6c:	3301      	adds	r3, #1
 800af6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af72:	b914      	cbnz	r4, 800af7a <__match+0x12>
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	2001      	movs	r0, #1
 800af78:	bd30      	pop	{r4, r5, pc}
 800af7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af82:	2d19      	cmp	r5, #25
 800af84:	bf98      	it	ls
 800af86:	3220      	addls	r2, #32
 800af88:	42a2      	cmp	r2, r4
 800af8a:	d0f0      	beq.n	800af6e <__match+0x6>
 800af8c:	2000      	movs	r0, #0
 800af8e:	e7f3      	b.n	800af78 <__match+0x10>

0800af90 <__hexnan>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	680b      	ldr	r3, [r1, #0]
 800af96:	6801      	ldr	r1, [r0, #0]
 800af98:	115e      	asrs	r6, r3, #5
 800af9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af9e:	f013 031f 	ands.w	r3, r3, #31
 800afa2:	b087      	sub	sp, #28
 800afa4:	bf18      	it	ne
 800afa6:	3604      	addne	r6, #4
 800afa8:	2500      	movs	r5, #0
 800afaa:	1f37      	subs	r7, r6, #4
 800afac:	4682      	mov	sl, r0
 800afae:	4690      	mov	r8, r2
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800afb6:	46b9      	mov	r9, r7
 800afb8:	463c      	mov	r4, r7
 800afba:	9502      	str	r5, [sp, #8]
 800afbc:	46ab      	mov	fp, r5
 800afbe:	784a      	ldrb	r2, [r1, #1]
 800afc0:	1c4b      	adds	r3, r1, #1
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	b342      	cbz	r2, 800b018 <__hexnan+0x88>
 800afc6:	4610      	mov	r0, r2
 800afc8:	9105      	str	r1, [sp, #20]
 800afca:	9204      	str	r2, [sp, #16]
 800afcc:	f7ff fd76 	bl	800aabc <__hexdig_fun>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d14f      	bne.n	800b074 <__hexnan+0xe4>
 800afd4:	9a04      	ldr	r2, [sp, #16]
 800afd6:	9905      	ldr	r1, [sp, #20]
 800afd8:	2a20      	cmp	r2, #32
 800afda:	d818      	bhi.n	800b00e <__hexnan+0x7e>
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	459b      	cmp	fp, r3
 800afe0:	dd13      	ble.n	800b00a <__hexnan+0x7a>
 800afe2:	454c      	cmp	r4, r9
 800afe4:	d206      	bcs.n	800aff4 <__hexnan+0x64>
 800afe6:	2d07      	cmp	r5, #7
 800afe8:	dc04      	bgt.n	800aff4 <__hexnan+0x64>
 800afea:	462a      	mov	r2, r5
 800afec:	4649      	mov	r1, r9
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff ffa8 	bl	800af44 <L_shift>
 800aff4:	4544      	cmp	r4, r8
 800aff6:	d950      	bls.n	800b09a <__hexnan+0x10a>
 800aff8:	2300      	movs	r3, #0
 800affa:	f1a4 0904 	sub.w	r9, r4, #4
 800affe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b002:	f8cd b008 	str.w	fp, [sp, #8]
 800b006:	464c      	mov	r4, r9
 800b008:	461d      	mov	r5, r3
 800b00a:	9903      	ldr	r1, [sp, #12]
 800b00c:	e7d7      	b.n	800afbe <__hexnan+0x2e>
 800b00e:	2a29      	cmp	r2, #41	; 0x29
 800b010:	d155      	bne.n	800b0be <__hexnan+0x12e>
 800b012:	3102      	adds	r1, #2
 800b014:	f8ca 1000 	str.w	r1, [sl]
 800b018:	f1bb 0f00 	cmp.w	fp, #0
 800b01c:	d04f      	beq.n	800b0be <__hexnan+0x12e>
 800b01e:	454c      	cmp	r4, r9
 800b020:	d206      	bcs.n	800b030 <__hexnan+0xa0>
 800b022:	2d07      	cmp	r5, #7
 800b024:	dc04      	bgt.n	800b030 <__hexnan+0xa0>
 800b026:	462a      	mov	r2, r5
 800b028:	4649      	mov	r1, r9
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7ff ff8a 	bl	800af44 <L_shift>
 800b030:	4544      	cmp	r4, r8
 800b032:	d934      	bls.n	800b09e <__hexnan+0x10e>
 800b034:	f1a8 0204 	sub.w	r2, r8, #4
 800b038:	4623      	mov	r3, r4
 800b03a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b03e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b042:	429f      	cmp	r7, r3
 800b044:	d2f9      	bcs.n	800b03a <__hexnan+0xaa>
 800b046:	1b3b      	subs	r3, r7, r4
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	3304      	adds	r3, #4
 800b04e:	3e03      	subs	r6, #3
 800b050:	3401      	adds	r4, #1
 800b052:	42a6      	cmp	r6, r4
 800b054:	bf38      	it	cc
 800b056:	2304      	movcc	r3, #4
 800b058:	4443      	add	r3, r8
 800b05a:	2200      	movs	r2, #0
 800b05c:	f843 2b04 	str.w	r2, [r3], #4
 800b060:	429f      	cmp	r7, r3
 800b062:	d2fb      	bcs.n	800b05c <__hexnan+0xcc>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	b91b      	cbnz	r3, 800b070 <__hexnan+0xe0>
 800b068:	4547      	cmp	r7, r8
 800b06a:	d126      	bne.n	800b0ba <__hexnan+0x12a>
 800b06c:	2301      	movs	r3, #1
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	2005      	movs	r0, #5
 800b072:	e025      	b.n	800b0c0 <__hexnan+0x130>
 800b074:	3501      	adds	r5, #1
 800b076:	2d08      	cmp	r5, #8
 800b078:	f10b 0b01 	add.w	fp, fp, #1
 800b07c:	dd06      	ble.n	800b08c <__hexnan+0xfc>
 800b07e:	4544      	cmp	r4, r8
 800b080:	d9c3      	bls.n	800b00a <__hexnan+0x7a>
 800b082:	2300      	movs	r3, #0
 800b084:	f844 3c04 	str.w	r3, [r4, #-4]
 800b088:	2501      	movs	r5, #1
 800b08a:	3c04      	subs	r4, #4
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	f000 000f 	and.w	r0, r0, #15
 800b092:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b096:	6020      	str	r0, [r4, #0]
 800b098:	e7b7      	b.n	800b00a <__hexnan+0x7a>
 800b09a:	2508      	movs	r5, #8
 800b09c:	e7b5      	b.n	800b00a <__hexnan+0x7a>
 800b09e:	9b01      	ldr	r3, [sp, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0df      	beq.n	800b064 <__hexnan+0xd4>
 800b0a4:	f1c3 0320 	rsb	r3, r3, #32
 800b0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ac:	40da      	lsrs	r2, r3
 800b0ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b0b8:	e7d4      	b.n	800b064 <__hexnan+0xd4>
 800b0ba:	3f04      	subs	r7, #4
 800b0bc:	e7d2      	b.n	800b064 <__hexnan+0xd4>
 800b0be:	2004      	movs	r0, #4
 800b0c0:	b007      	add	sp, #28
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0c6 <__ascii_mbtowc>:
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	b901      	cbnz	r1, 800b0cc <__ascii_mbtowc+0x6>
 800b0ca:	a901      	add	r1, sp, #4
 800b0cc:	b142      	cbz	r2, 800b0e0 <__ascii_mbtowc+0x1a>
 800b0ce:	b14b      	cbz	r3, 800b0e4 <__ascii_mbtowc+0x1e>
 800b0d0:	7813      	ldrb	r3, [r2, #0]
 800b0d2:	600b      	str	r3, [r1, #0]
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	1e10      	subs	r0, r2, #0
 800b0d8:	bf18      	it	ne
 800b0da:	2001      	movne	r0, #1
 800b0dc:	b002      	add	sp, #8
 800b0de:	4770      	bx	lr
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	e7fb      	b.n	800b0dc <__ascii_mbtowc+0x16>
 800b0e4:	f06f 0001 	mvn.w	r0, #1
 800b0e8:	e7f8      	b.n	800b0dc <__ascii_mbtowc+0x16>

0800b0ea <_realloc_r>:
 800b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	460e      	mov	r6, r1
 800b0f4:	b921      	cbnz	r1, 800b100 <_realloc_r+0x16>
 800b0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	f7fd bc32 	b.w	8008964 <_malloc_r>
 800b100:	b92a      	cbnz	r2, 800b10e <_realloc_r+0x24>
 800b102:	f7fd fbbb 	bl	800887c <_free_r>
 800b106:	4625      	mov	r5, r4
 800b108:	4628      	mov	r0, r5
 800b10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10e:	f000 f842 	bl	800b196 <_malloc_usable_size_r>
 800b112:	4284      	cmp	r4, r0
 800b114:	4607      	mov	r7, r0
 800b116:	d802      	bhi.n	800b11e <_realloc_r+0x34>
 800b118:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b11c:	d812      	bhi.n	800b144 <_realloc_r+0x5a>
 800b11e:	4621      	mov	r1, r4
 800b120:	4640      	mov	r0, r8
 800b122:	f7fd fc1f 	bl	8008964 <_malloc_r>
 800b126:	4605      	mov	r5, r0
 800b128:	2800      	cmp	r0, #0
 800b12a:	d0ed      	beq.n	800b108 <_realloc_r+0x1e>
 800b12c:	42bc      	cmp	r4, r7
 800b12e:	4622      	mov	r2, r4
 800b130:	4631      	mov	r1, r6
 800b132:	bf28      	it	cs
 800b134:	463a      	movcs	r2, r7
 800b136:	f7ff fc23 	bl	800a980 <memcpy>
 800b13a:	4631      	mov	r1, r6
 800b13c:	4640      	mov	r0, r8
 800b13e:	f7fd fb9d 	bl	800887c <_free_r>
 800b142:	e7e1      	b.n	800b108 <_realloc_r+0x1e>
 800b144:	4635      	mov	r5, r6
 800b146:	e7df      	b.n	800b108 <_realloc_r+0x1e>

0800b148 <__ascii_wctomb>:
 800b148:	b149      	cbz	r1, 800b15e <__ascii_wctomb+0x16>
 800b14a:	2aff      	cmp	r2, #255	; 0xff
 800b14c:	bf85      	ittet	hi
 800b14e:	238a      	movhi	r3, #138	; 0x8a
 800b150:	6003      	strhi	r3, [r0, #0]
 800b152:	700a      	strbls	r2, [r1, #0]
 800b154:	f04f 30ff 	movhi.w	r0, #4294967295
 800b158:	bf98      	it	ls
 800b15a:	2001      	movls	r0, #1
 800b15c:	4770      	bx	lr
 800b15e:	4608      	mov	r0, r1
 800b160:	4770      	bx	lr
	...

0800b164 <fiprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	b503      	push	{r0, r1, lr}
 800b168:	4601      	mov	r1, r0
 800b16a:	ab03      	add	r3, sp, #12
 800b16c:	4805      	ldr	r0, [pc, #20]	; (800b184 <fiprintf+0x20>)
 800b16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b172:	6800      	ldr	r0, [r0, #0]
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	f7ff f947 	bl	800a408 <_vfiprintf_r>
 800b17a:	b002      	add	sp, #8
 800b17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b180:	b003      	add	sp, #12
 800b182:	4770      	bx	lr
 800b184:	2000006c 	.word	0x2000006c

0800b188 <abort>:
 800b188:	b508      	push	{r3, lr}
 800b18a:	2006      	movs	r0, #6
 800b18c:	f000 f834 	bl	800b1f8 <raise>
 800b190:	2001      	movs	r0, #1
 800b192:	f7f7 fd71 	bl	8002c78 <_exit>

0800b196 <_malloc_usable_size_r>:
 800b196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19a:	1f18      	subs	r0, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfbc      	itt	lt
 800b1a0:	580b      	ldrlt	r3, [r1, r0]
 800b1a2:	18c0      	addlt	r0, r0, r3
 800b1a4:	4770      	bx	lr

0800b1a6 <_raise_r>:
 800b1a6:	291f      	cmp	r1, #31
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	d904      	bls.n	800b1ba <_raise_r+0x14>
 800b1b0:	2316      	movs	r3, #22
 800b1b2:	6003      	str	r3, [r0, #0]
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b1bc:	b112      	cbz	r2, 800b1c4 <_raise_r+0x1e>
 800b1be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c2:	b94b      	cbnz	r3, 800b1d8 <_raise_r+0x32>
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 f831 	bl	800b22c <_getpid_r>
 800b1ca:	462a      	mov	r2, r5
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d4:	f000 b818 	b.w	800b208 <_kill_r>
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d00a      	beq.n	800b1f2 <_raise_r+0x4c>
 800b1dc:	1c59      	adds	r1, r3, #1
 800b1de:	d103      	bne.n	800b1e8 <_raise_r+0x42>
 800b1e0:	2316      	movs	r3, #22
 800b1e2:	6003      	str	r3, [r0, #0]
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	e7e7      	b.n	800b1b8 <_raise_r+0x12>
 800b1e8:	2400      	movs	r4, #0
 800b1ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	4798      	blx	r3
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	e7e0      	b.n	800b1b8 <_raise_r+0x12>
	...

0800b1f8 <raise>:
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <raise+0xc>)
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f7ff bfd2 	b.w	800b1a6 <_raise_r>
 800b202:	bf00      	nop
 800b204:	2000006c 	.word	0x2000006c

0800b208 <_kill_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	; (800b228 <_kill_r+0x20>)
 800b20c:	2300      	movs	r3, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	f7f7 fd1f 	bl	8002c58 <_kill>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d102      	bne.n	800b224 <_kill_r+0x1c>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	b103      	cbz	r3, 800b224 <_kill_r+0x1c>
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	bd38      	pop	{r3, r4, r5, pc}
 800b226:	bf00      	nop
 800b228:	200009b8 	.word	0x200009b8

0800b22c <_getpid_r>:
 800b22c:	f7f7 bd0c 	b.w	8002c48 <_getpid>

0800b230 <atan2>:
 800b230:	f000 b982 	b.w	800b538 <__ieee754_atan2>

0800b234 <pow>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	ed2d 8b02 	vpush	{d8}
 800b23a:	eeb0 8a40 	vmov.f32	s16, s0
 800b23e:	eef0 8a60 	vmov.f32	s17, s1
 800b242:	ec55 4b11 	vmov	r4, r5, d1
 800b246:	f000 fa3f 	bl	800b6c8 <__ieee754_pow>
 800b24a:	4622      	mov	r2, r4
 800b24c:	462b      	mov	r3, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	4629      	mov	r1, r5
 800b252:	ec57 6b10 	vmov	r6, r7, d0
 800b256:	f7f5 fc91 	bl	8000b7c <__aeabi_dcmpun>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d13b      	bne.n	800b2d6 <pow+0xa2>
 800b25e:	ec51 0b18 	vmov	r0, r1, d8
 800b262:	2200      	movs	r2, #0
 800b264:	2300      	movs	r3, #0
 800b266:	f7f5 fc57 	bl	8000b18 <__aeabi_dcmpeq>
 800b26a:	b1b8      	cbz	r0, 800b29c <pow+0x68>
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	4620      	mov	r0, r4
 800b272:	4629      	mov	r1, r5
 800b274:	f7f5 fc50 	bl	8000b18 <__aeabi_dcmpeq>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d146      	bne.n	800b30a <pow+0xd6>
 800b27c:	ec45 4b10 	vmov	d0, r4, r5
 800b280:	f000 f874 	bl	800b36c <finite>
 800b284:	b338      	cbz	r0, 800b2d6 <pow+0xa2>
 800b286:	2200      	movs	r2, #0
 800b288:	2300      	movs	r3, #0
 800b28a:	4620      	mov	r0, r4
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7f5 fc4d 	bl	8000b2c <__aeabi_dcmplt>
 800b292:	b300      	cbz	r0, 800b2d6 <pow+0xa2>
 800b294:	f7fc fc42 	bl	8007b1c <__errno>
 800b298:	2322      	movs	r3, #34	; 0x22
 800b29a:	e01b      	b.n	800b2d4 <pow+0xa0>
 800b29c:	ec47 6b10 	vmov	d0, r6, r7
 800b2a0:	f000 f864 	bl	800b36c <finite>
 800b2a4:	b9e0      	cbnz	r0, 800b2e0 <pow+0xac>
 800b2a6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2aa:	eef0 0a68 	vmov.f32	s1, s17
 800b2ae:	f000 f85d 	bl	800b36c <finite>
 800b2b2:	b1a8      	cbz	r0, 800b2e0 <pow+0xac>
 800b2b4:	ec45 4b10 	vmov	d0, r4, r5
 800b2b8:	f000 f858 	bl	800b36c <finite>
 800b2bc:	b180      	cbz	r0, 800b2e0 <pow+0xac>
 800b2be:	4632      	mov	r2, r6
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 fc59 	bl	8000b7c <__aeabi_dcmpun>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d0e2      	beq.n	800b294 <pow+0x60>
 800b2ce:	f7fc fc25 	bl	8007b1c <__errno>
 800b2d2:	2321      	movs	r3, #33	; 0x21
 800b2d4:	6003      	str	r3, [r0, #0]
 800b2d6:	ecbd 8b02 	vpop	{d8}
 800b2da:	ec47 6b10 	vmov	d0, r6, r7
 800b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	f7f5 fc16 	bl	8000b18 <__aeabi_dcmpeq>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d0f2      	beq.n	800b2d6 <pow+0xa2>
 800b2f0:	eeb0 0a48 	vmov.f32	s0, s16
 800b2f4:	eef0 0a68 	vmov.f32	s1, s17
 800b2f8:	f000 f838 	bl	800b36c <finite>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d0ea      	beq.n	800b2d6 <pow+0xa2>
 800b300:	ec45 4b10 	vmov	d0, r4, r5
 800b304:	f000 f832 	bl	800b36c <finite>
 800b308:	e7c3      	b.n	800b292 <pow+0x5e>
 800b30a:	4f01      	ldr	r7, [pc, #4]	; (800b310 <pow+0xdc>)
 800b30c:	2600      	movs	r6, #0
 800b30e:	e7e2      	b.n	800b2d6 <pow+0xa2>
 800b310:	3ff00000 	.word	0x3ff00000

0800b314 <sqrt>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	ed2d 8b02 	vpush	{d8}
 800b31a:	ec55 4b10 	vmov	r4, r5, d0
 800b31e:	f000 f831 	bl	800b384 <__ieee754_sqrt>
 800b322:	4622      	mov	r2, r4
 800b324:	462b      	mov	r3, r5
 800b326:	4620      	mov	r0, r4
 800b328:	4629      	mov	r1, r5
 800b32a:	eeb0 8a40 	vmov.f32	s16, s0
 800b32e:	eef0 8a60 	vmov.f32	s17, s1
 800b332:	f7f5 fc23 	bl	8000b7c <__aeabi_dcmpun>
 800b336:	b990      	cbnz	r0, 800b35e <sqrt+0x4a>
 800b338:	2200      	movs	r2, #0
 800b33a:	2300      	movs	r3, #0
 800b33c:	4620      	mov	r0, r4
 800b33e:	4629      	mov	r1, r5
 800b340:	f7f5 fbf4 	bl	8000b2c <__aeabi_dcmplt>
 800b344:	b158      	cbz	r0, 800b35e <sqrt+0x4a>
 800b346:	f7fc fbe9 	bl	8007b1c <__errno>
 800b34a:	2321      	movs	r3, #33	; 0x21
 800b34c:	6003      	str	r3, [r0, #0]
 800b34e:	2200      	movs	r2, #0
 800b350:	2300      	movs	r3, #0
 800b352:	4610      	mov	r0, r2
 800b354:	4619      	mov	r1, r3
 800b356:	f7f5 faa1 	bl	800089c <__aeabi_ddiv>
 800b35a:	ec41 0b18 	vmov	d8, r0, r1
 800b35e:	eeb0 0a48 	vmov.f32	s0, s16
 800b362:	eef0 0a68 	vmov.f32	s1, s17
 800b366:	ecbd 8b02 	vpop	{d8}
 800b36a:	bd38      	pop	{r3, r4, r5, pc}

0800b36c <finite>:
 800b36c:	b082      	sub	sp, #8
 800b36e:	ed8d 0b00 	vstr	d0, [sp]
 800b372:	9801      	ldr	r0, [sp, #4]
 800b374:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b378:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b37c:	0fc0      	lsrs	r0, r0, #31
 800b37e:	b002      	add	sp, #8
 800b380:	4770      	bx	lr
	...

0800b384 <__ieee754_sqrt>:
 800b384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	ec55 4b10 	vmov	r4, r5, d0
 800b38c:	4e67      	ldr	r6, [pc, #412]	; (800b52c <__ieee754_sqrt+0x1a8>)
 800b38e:	43ae      	bics	r6, r5
 800b390:	ee10 0a10 	vmov	r0, s0
 800b394:	ee10 2a10 	vmov	r2, s0
 800b398:	4629      	mov	r1, r5
 800b39a:	462b      	mov	r3, r5
 800b39c:	d10d      	bne.n	800b3ba <__ieee754_sqrt+0x36>
 800b39e:	f7f5 f953 	bl	8000648 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f4 ff97 	bl	80002dc <__adddf3>
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	460d      	mov	r5, r1
 800b3b2:	ec45 4b10 	vmov	d0, r4, r5
 800b3b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	dc0b      	bgt.n	800b3d6 <__ieee754_sqrt+0x52>
 800b3be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b3c2:	4326      	orrs	r6, r4
 800b3c4:	d0f5      	beq.n	800b3b2 <__ieee754_sqrt+0x2e>
 800b3c6:	b135      	cbz	r5, 800b3d6 <__ieee754_sqrt+0x52>
 800b3c8:	f7f4 ff86 	bl	80002d8 <__aeabi_dsub>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	f7f5 fa64 	bl	800089c <__aeabi_ddiv>
 800b3d4:	e7eb      	b.n	800b3ae <__ieee754_sqrt+0x2a>
 800b3d6:	1509      	asrs	r1, r1, #20
 800b3d8:	f000 808d 	beq.w	800b4f6 <__ieee754_sqrt+0x172>
 800b3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b3e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3e8:	07c9      	lsls	r1, r1, #31
 800b3ea:	bf5c      	itt	pl
 800b3ec:	005b      	lslpl	r3, r3, #1
 800b3ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b3f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3f6:	bf58      	it	pl
 800b3f8:	0052      	lslpl	r2, r2, #1
 800b3fa:	2500      	movs	r5, #0
 800b3fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b400:	1076      	asrs	r6, r6, #1
 800b402:	0052      	lsls	r2, r2, #1
 800b404:	f04f 0e16 	mov.w	lr, #22
 800b408:	46ac      	mov	ip, r5
 800b40a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b40e:	eb0c 0001 	add.w	r0, ip, r1
 800b412:	4298      	cmp	r0, r3
 800b414:	bfde      	ittt	le
 800b416:	1a1b      	suble	r3, r3, r0
 800b418:	eb00 0c01 	addle.w	ip, r0, r1
 800b41c:	186d      	addle	r5, r5, r1
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	f1be 0e01 	subs.w	lr, lr, #1
 800b424:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b428:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b42c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b430:	d1ed      	bne.n	800b40e <__ieee754_sqrt+0x8a>
 800b432:	4674      	mov	r4, lr
 800b434:	2720      	movs	r7, #32
 800b436:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b43a:	4563      	cmp	r3, ip
 800b43c:	eb01 000e 	add.w	r0, r1, lr
 800b440:	dc02      	bgt.n	800b448 <__ieee754_sqrt+0xc4>
 800b442:	d113      	bne.n	800b46c <__ieee754_sqrt+0xe8>
 800b444:	4290      	cmp	r0, r2
 800b446:	d811      	bhi.n	800b46c <__ieee754_sqrt+0xe8>
 800b448:	2800      	cmp	r0, #0
 800b44a:	eb00 0e01 	add.w	lr, r0, r1
 800b44e:	da57      	bge.n	800b500 <__ieee754_sqrt+0x17c>
 800b450:	f1be 0f00 	cmp.w	lr, #0
 800b454:	db54      	blt.n	800b500 <__ieee754_sqrt+0x17c>
 800b456:	f10c 0801 	add.w	r8, ip, #1
 800b45a:	eba3 030c 	sub.w	r3, r3, ip
 800b45e:	4290      	cmp	r0, r2
 800b460:	bf88      	it	hi
 800b462:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b466:	1a12      	subs	r2, r2, r0
 800b468:	440c      	add	r4, r1
 800b46a:	46c4      	mov	ip, r8
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	3f01      	subs	r7, #1
 800b470:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b474:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b478:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b47c:	d1dd      	bne.n	800b43a <__ieee754_sqrt+0xb6>
 800b47e:	4313      	orrs	r3, r2
 800b480:	d01b      	beq.n	800b4ba <__ieee754_sqrt+0x136>
 800b482:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b530 <__ieee754_sqrt+0x1ac>
 800b486:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b534 <__ieee754_sqrt+0x1b0>
 800b48a:	e9da 0100 	ldrd	r0, r1, [sl]
 800b48e:	e9db 2300 	ldrd	r2, r3, [fp]
 800b492:	f7f4 ff21 	bl	80002d8 <__aeabi_dsub>
 800b496:	e9da 8900 	ldrd	r8, r9, [sl]
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f5 fb4d 	bl	8000b40 <__aeabi_dcmple>
 800b4a6:	b140      	cbz	r0, 800b4ba <__ieee754_sqrt+0x136>
 800b4a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b4ac:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4b0:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4b4:	d126      	bne.n	800b504 <__ieee754_sqrt+0x180>
 800b4b6:	3501      	adds	r5, #1
 800b4b8:	463c      	mov	r4, r7
 800b4ba:	106a      	asrs	r2, r5, #1
 800b4bc:	0863      	lsrs	r3, r4, #1
 800b4be:	07e9      	lsls	r1, r5, #31
 800b4c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b4c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b4c8:	bf48      	it	mi
 800b4ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b4ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b4d2:	461c      	mov	r4, r3
 800b4d4:	e76d      	b.n	800b3b2 <__ieee754_sqrt+0x2e>
 800b4d6:	0ad3      	lsrs	r3, r2, #11
 800b4d8:	3815      	subs	r0, #21
 800b4da:	0552      	lsls	r2, r2, #21
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0fa      	beq.n	800b4d6 <__ieee754_sqrt+0x152>
 800b4e0:	02dc      	lsls	r4, r3, #11
 800b4e2:	d50a      	bpl.n	800b4fa <__ieee754_sqrt+0x176>
 800b4e4:	f1c1 0420 	rsb	r4, r1, #32
 800b4e8:	fa22 f404 	lsr.w	r4, r2, r4
 800b4ec:	1e4d      	subs	r5, r1, #1
 800b4ee:	408a      	lsls	r2, r1
 800b4f0:	4323      	orrs	r3, r4
 800b4f2:	1b41      	subs	r1, r0, r5
 800b4f4:	e772      	b.n	800b3dc <__ieee754_sqrt+0x58>
 800b4f6:	4608      	mov	r0, r1
 800b4f8:	e7f0      	b.n	800b4dc <__ieee754_sqrt+0x158>
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	3101      	adds	r1, #1
 800b4fe:	e7ef      	b.n	800b4e0 <__ieee754_sqrt+0x15c>
 800b500:	46e0      	mov	r8, ip
 800b502:	e7aa      	b.n	800b45a <__ieee754_sqrt+0xd6>
 800b504:	f7f4 feea 	bl	80002dc <__adddf3>
 800b508:	e9da 8900 	ldrd	r8, r9, [sl]
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4640      	mov	r0, r8
 800b512:	4649      	mov	r1, r9
 800b514:	f7f5 fb0a 	bl	8000b2c <__aeabi_dcmplt>
 800b518:	b120      	cbz	r0, 800b524 <__ieee754_sqrt+0x1a0>
 800b51a:	1ca0      	adds	r0, r4, #2
 800b51c:	bf08      	it	eq
 800b51e:	3501      	addeq	r5, #1
 800b520:	3402      	adds	r4, #2
 800b522:	e7ca      	b.n	800b4ba <__ieee754_sqrt+0x136>
 800b524:	3401      	adds	r4, #1
 800b526:	f024 0401 	bic.w	r4, r4, #1
 800b52a:	e7c6      	b.n	800b4ba <__ieee754_sqrt+0x136>
 800b52c:	7ff00000 	.word	0x7ff00000
 800b530:	200001e0 	.word	0x200001e0
 800b534:	200001e8 	.word	0x200001e8

0800b538 <__ieee754_atan2>:
 800b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	ec57 6b11 	vmov	r6, r7, d1
 800b540:	4273      	negs	r3, r6
 800b542:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b6c0 <__ieee754_atan2+0x188>
 800b546:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b54a:	4333      	orrs	r3, r6
 800b54c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b550:	4543      	cmp	r3, r8
 800b552:	ec51 0b10 	vmov	r0, r1, d0
 800b556:	ee11 5a10 	vmov	r5, s2
 800b55a:	d80a      	bhi.n	800b572 <__ieee754_atan2+0x3a>
 800b55c:	4244      	negs	r4, r0
 800b55e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b562:	4304      	orrs	r4, r0
 800b564:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b568:	4544      	cmp	r4, r8
 800b56a:	ee10 9a10 	vmov	r9, s0
 800b56e:	468e      	mov	lr, r1
 800b570:	d907      	bls.n	800b582 <__ieee754_atan2+0x4a>
 800b572:	4632      	mov	r2, r6
 800b574:	463b      	mov	r3, r7
 800b576:	f7f4 feb1 	bl	80002dc <__adddf3>
 800b57a:	ec41 0b10 	vmov	d0, r0, r1
 800b57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b582:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b586:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b58a:	4334      	orrs	r4, r6
 800b58c:	d103      	bne.n	800b596 <__ieee754_atan2+0x5e>
 800b58e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b592:	f000 bdc5 	b.w	800c120 <atan>
 800b596:	17bc      	asrs	r4, r7, #30
 800b598:	f004 0402 	and.w	r4, r4, #2
 800b59c:	ea53 0909 	orrs.w	r9, r3, r9
 800b5a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b5a4:	d107      	bne.n	800b5b6 <__ieee754_atan2+0x7e>
 800b5a6:	2c02      	cmp	r4, #2
 800b5a8:	d05f      	beq.n	800b66a <__ieee754_atan2+0x132>
 800b5aa:	2c03      	cmp	r4, #3
 800b5ac:	d1e5      	bne.n	800b57a <__ieee754_atan2+0x42>
 800b5ae:	a140      	add	r1, pc, #256	; (adr r1, 800b6b0 <__ieee754_atan2+0x178>)
 800b5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5b4:	e7e1      	b.n	800b57a <__ieee754_atan2+0x42>
 800b5b6:	4315      	orrs	r5, r2
 800b5b8:	d106      	bne.n	800b5c8 <__ieee754_atan2+0x90>
 800b5ba:	f1be 0f00 	cmp.w	lr, #0
 800b5be:	da5f      	bge.n	800b680 <__ieee754_atan2+0x148>
 800b5c0:	a13d      	add	r1, pc, #244	; (adr r1, 800b6b8 <__ieee754_atan2+0x180>)
 800b5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5c6:	e7d8      	b.n	800b57a <__ieee754_atan2+0x42>
 800b5c8:	4542      	cmp	r2, r8
 800b5ca:	d10f      	bne.n	800b5ec <__ieee754_atan2+0xb4>
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5d2:	d107      	bne.n	800b5e4 <__ieee754_atan2+0xac>
 800b5d4:	2c02      	cmp	r4, #2
 800b5d6:	d84c      	bhi.n	800b672 <__ieee754_atan2+0x13a>
 800b5d8:	4b33      	ldr	r3, [pc, #204]	; (800b6a8 <__ieee754_atan2+0x170>)
 800b5da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5e2:	e7ca      	b.n	800b57a <__ieee754_atan2+0x42>
 800b5e4:	2c02      	cmp	r4, #2
 800b5e6:	d848      	bhi.n	800b67a <__ieee754_atan2+0x142>
 800b5e8:	4b30      	ldr	r3, [pc, #192]	; (800b6ac <__ieee754_atan2+0x174>)
 800b5ea:	e7f6      	b.n	800b5da <__ieee754_atan2+0xa2>
 800b5ec:	4543      	cmp	r3, r8
 800b5ee:	d0e4      	beq.n	800b5ba <__ieee754_atan2+0x82>
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b5f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5fa:	da1e      	bge.n	800b63a <__ieee754_atan2+0x102>
 800b5fc:	2f00      	cmp	r7, #0
 800b5fe:	da01      	bge.n	800b604 <__ieee754_atan2+0xcc>
 800b600:	323c      	adds	r2, #60	; 0x3c
 800b602:	db1e      	blt.n	800b642 <__ieee754_atan2+0x10a>
 800b604:	4632      	mov	r2, r6
 800b606:	463b      	mov	r3, r7
 800b608:	f7f5 f948 	bl	800089c <__aeabi_ddiv>
 800b60c:	ec41 0b10 	vmov	d0, r0, r1
 800b610:	f000 ff26 	bl	800c460 <fabs>
 800b614:	f000 fd84 	bl	800c120 <atan>
 800b618:	ec51 0b10 	vmov	r0, r1, d0
 800b61c:	2c01      	cmp	r4, #1
 800b61e:	d013      	beq.n	800b648 <__ieee754_atan2+0x110>
 800b620:	2c02      	cmp	r4, #2
 800b622:	d015      	beq.n	800b650 <__ieee754_atan2+0x118>
 800b624:	2c00      	cmp	r4, #0
 800b626:	d0a8      	beq.n	800b57a <__ieee754_atan2+0x42>
 800b628:	a317      	add	r3, pc, #92	; (adr r3, 800b688 <__ieee754_atan2+0x150>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f4 fe53 	bl	80002d8 <__aeabi_dsub>
 800b632:	a317      	add	r3, pc, #92	; (adr r3, 800b690 <__ieee754_atan2+0x158>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	e014      	b.n	800b664 <__ieee754_atan2+0x12c>
 800b63a:	a117      	add	r1, pc, #92	; (adr r1, 800b698 <__ieee754_atan2+0x160>)
 800b63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b640:	e7ec      	b.n	800b61c <__ieee754_atan2+0xe4>
 800b642:	2000      	movs	r0, #0
 800b644:	2100      	movs	r1, #0
 800b646:	e7e9      	b.n	800b61c <__ieee754_atan2+0xe4>
 800b648:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b64c:	4619      	mov	r1, r3
 800b64e:	e794      	b.n	800b57a <__ieee754_atan2+0x42>
 800b650:	a30d      	add	r3, pc, #52	; (adr r3, 800b688 <__ieee754_atan2+0x150>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f4 fe3f 	bl	80002d8 <__aeabi_dsub>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	a10c      	add	r1, pc, #48	; (adr r1, 800b690 <__ieee754_atan2+0x158>)
 800b660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b664:	f7f4 fe38 	bl	80002d8 <__aeabi_dsub>
 800b668:	e787      	b.n	800b57a <__ieee754_atan2+0x42>
 800b66a:	a109      	add	r1, pc, #36	; (adr r1, 800b690 <__ieee754_atan2+0x158>)
 800b66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b670:	e783      	b.n	800b57a <__ieee754_atan2+0x42>
 800b672:	a10b      	add	r1, pc, #44	; (adr r1, 800b6a0 <__ieee754_atan2+0x168>)
 800b674:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b678:	e77f      	b.n	800b57a <__ieee754_atan2+0x42>
 800b67a:	2000      	movs	r0, #0
 800b67c:	2100      	movs	r1, #0
 800b67e:	e77c      	b.n	800b57a <__ieee754_atan2+0x42>
 800b680:	a105      	add	r1, pc, #20	; (adr r1, 800b698 <__ieee754_atan2+0x160>)
 800b682:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b686:	e778      	b.n	800b57a <__ieee754_atan2+0x42>
 800b688:	33145c07 	.word	0x33145c07
 800b68c:	3ca1a626 	.word	0x3ca1a626
 800b690:	54442d18 	.word	0x54442d18
 800b694:	400921fb 	.word	0x400921fb
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	3ff921fb 	.word	0x3ff921fb
 800b6a0:	54442d18 	.word	0x54442d18
 800b6a4:	3fe921fb 	.word	0x3fe921fb
 800b6a8:	0800d9d8 	.word	0x0800d9d8
 800b6ac:	0800d9f0 	.word	0x0800d9f0
 800b6b0:	54442d18 	.word	0x54442d18
 800b6b4:	c00921fb 	.word	0xc00921fb
 800b6b8:	54442d18 	.word	0x54442d18
 800b6bc:	bff921fb 	.word	0xbff921fb
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	00000000 	.word	0x00000000

0800b6c8 <__ieee754_pow>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ed2d 8b06 	vpush	{d8-d10}
 800b6d0:	b089      	sub	sp, #36	; 0x24
 800b6d2:	ed8d 1b00 	vstr	d1, [sp]
 800b6d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b6da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b6de:	ea58 0102 	orrs.w	r1, r8, r2
 800b6e2:	ec57 6b10 	vmov	r6, r7, d0
 800b6e6:	d115      	bne.n	800b714 <__ieee754_pow+0x4c>
 800b6e8:	19b3      	adds	r3, r6, r6
 800b6ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b6ee:	4152      	adcs	r2, r2
 800b6f0:	4299      	cmp	r1, r3
 800b6f2:	4b89      	ldr	r3, [pc, #548]	; (800b918 <__ieee754_pow+0x250>)
 800b6f4:	4193      	sbcs	r3, r2
 800b6f6:	f080 84d1 	bcs.w	800c09c <__ieee754_pow+0x9d4>
 800b6fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f4 fdeb 	bl	80002dc <__adddf3>
 800b706:	ec41 0b10 	vmov	d0, r0, r1
 800b70a:	b009      	add	sp, #36	; 0x24
 800b70c:	ecbd 8b06 	vpop	{d8-d10}
 800b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b714:	4b81      	ldr	r3, [pc, #516]	; (800b91c <__ieee754_pow+0x254>)
 800b716:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b71a:	429c      	cmp	r4, r3
 800b71c:	ee10 aa10 	vmov	sl, s0
 800b720:	463d      	mov	r5, r7
 800b722:	dc06      	bgt.n	800b732 <__ieee754_pow+0x6a>
 800b724:	d101      	bne.n	800b72a <__ieee754_pow+0x62>
 800b726:	2e00      	cmp	r6, #0
 800b728:	d1e7      	bne.n	800b6fa <__ieee754_pow+0x32>
 800b72a:	4598      	cmp	r8, r3
 800b72c:	dc01      	bgt.n	800b732 <__ieee754_pow+0x6a>
 800b72e:	d10f      	bne.n	800b750 <__ieee754_pow+0x88>
 800b730:	b172      	cbz	r2, 800b750 <__ieee754_pow+0x88>
 800b732:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b736:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b73a:	ea55 050a 	orrs.w	r5, r5, sl
 800b73e:	d1dc      	bne.n	800b6fa <__ieee754_pow+0x32>
 800b740:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b744:	18db      	adds	r3, r3, r3
 800b746:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b74a:	4152      	adcs	r2, r2
 800b74c:	429d      	cmp	r5, r3
 800b74e:	e7d0      	b.n	800b6f2 <__ieee754_pow+0x2a>
 800b750:	2d00      	cmp	r5, #0
 800b752:	da3b      	bge.n	800b7cc <__ieee754_pow+0x104>
 800b754:	4b72      	ldr	r3, [pc, #456]	; (800b920 <__ieee754_pow+0x258>)
 800b756:	4598      	cmp	r8, r3
 800b758:	dc51      	bgt.n	800b7fe <__ieee754_pow+0x136>
 800b75a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b75e:	4598      	cmp	r8, r3
 800b760:	f340 84ab 	ble.w	800c0ba <__ieee754_pow+0x9f2>
 800b764:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b76c:	2b14      	cmp	r3, #20
 800b76e:	dd0f      	ble.n	800b790 <__ieee754_pow+0xc8>
 800b770:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b774:	fa22 f103 	lsr.w	r1, r2, r3
 800b778:	fa01 f303 	lsl.w	r3, r1, r3
 800b77c:	4293      	cmp	r3, r2
 800b77e:	f040 849c 	bne.w	800c0ba <__ieee754_pow+0x9f2>
 800b782:	f001 0101 	and.w	r1, r1, #1
 800b786:	f1c1 0302 	rsb	r3, r1, #2
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	b182      	cbz	r2, 800b7b0 <__ieee754_pow+0xe8>
 800b78e:	e05f      	b.n	800b850 <__ieee754_pow+0x188>
 800b790:	2a00      	cmp	r2, #0
 800b792:	d15b      	bne.n	800b84c <__ieee754_pow+0x184>
 800b794:	f1c3 0314 	rsb	r3, r3, #20
 800b798:	fa48 f103 	asr.w	r1, r8, r3
 800b79c:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a0:	4543      	cmp	r3, r8
 800b7a2:	f040 8487 	bne.w	800c0b4 <__ieee754_pow+0x9ec>
 800b7a6:	f001 0101 	and.w	r1, r1, #1
 800b7aa:	f1c1 0302 	rsb	r3, r1, #2
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	4b5c      	ldr	r3, [pc, #368]	; (800b924 <__ieee754_pow+0x25c>)
 800b7b2:	4598      	cmp	r8, r3
 800b7b4:	d132      	bne.n	800b81c <__ieee754_pow+0x154>
 800b7b6:	f1b9 0f00 	cmp.w	r9, #0
 800b7ba:	f280 8477 	bge.w	800c0ac <__ieee754_pow+0x9e4>
 800b7be:	4959      	ldr	r1, [pc, #356]	; (800b924 <__ieee754_pow+0x25c>)
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f7f5 f869 	bl	800089c <__aeabi_ddiv>
 800b7ca:	e79c      	b.n	800b706 <__ieee754_pow+0x3e>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9304      	str	r3, [sp, #16]
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	d13d      	bne.n	800b850 <__ieee754_pow+0x188>
 800b7d4:	4b51      	ldr	r3, [pc, #324]	; (800b91c <__ieee754_pow+0x254>)
 800b7d6:	4598      	cmp	r8, r3
 800b7d8:	d1ea      	bne.n	800b7b0 <__ieee754_pow+0xe8>
 800b7da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7e2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7e6:	f000 8459 	beq.w	800c09c <__ieee754_pow+0x9d4>
 800b7ea:	4b4f      	ldr	r3, [pc, #316]	; (800b928 <__ieee754_pow+0x260>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	dd08      	ble.n	800b802 <__ieee754_pow+0x13a>
 800b7f0:	f1b9 0f00 	cmp.w	r9, #0
 800b7f4:	f2c0 8456 	blt.w	800c0a4 <__ieee754_pow+0x9dc>
 800b7f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7fc:	e783      	b.n	800b706 <__ieee754_pow+0x3e>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e7e5      	b.n	800b7ce <__ieee754_pow+0x106>
 800b802:	f1b9 0f00 	cmp.w	r9, #0
 800b806:	f04f 0000 	mov.w	r0, #0
 800b80a:	f04f 0100 	mov.w	r1, #0
 800b80e:	f6bf af7a 	bge.w	800b706 <__ieee754_pow+0x3e>
 800b812:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b816:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b81a:	e774      	b.n	800b706 <__ieee754_pow+0x3e>
 800b81c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b820:	d106      	bne.n	800b830 <__ieee754_pow+0x168>
 800b822:	4632      	mov	r2, r6
 800b824:	463b      	mov	r3, r7
 800b826:	4630      	mov	r0, r6
 800b828:	4639      	mov	r1, r7
 800b82a:	f7f4 ff0d 	bl	8000648 <__aeabi_dmul>
 800b82e:	e76a      	b.n	800b706 <__ieee754_pow+0x3e>
 800b830:	4b3e      	ldr	r3, [pc, #248]	; (800b92c <__ieee754_pow+0x264>)
 800b832:	4599      	cmp	r9, r3
 800b834:	d10c      	bne.n	800b850 <__ieee754_pow+0x188>
 800b836:	2d00      	cmp	r5, #0
 800b838:	db0a      	blt.n	800b850 <__ieee754_pow+0x188>
 800b83a:	ec47 6b10 	vmov	d0, r6, r7
 800b83e:	b009      	add	sp, #36	; 0x24
 800b840:	ecbd 8b06 	vpop	{d8-d10}
 800b844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	f7ff bd9c 	b.w	800b384 <__ieee754_sqrt>
 800b84c:	2300      	movs	r3, #0
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	ec47 6b10 	vmov	d0, r6, r7
 800b854:	f000 fe04 	bl	800c460 <fabs>
 800b858:	ec51 0b10 	vmov	r0, r1, d0
 800b85c:	f1ba 0f00 	cmp.w	sl, #0
 800b860:	d129      	bne.n	800b8b6 <__ieee754_pow+0x1ee>
 800b862:	b124      	cbz	r4, 800b86e <__ieee754_pow+0x1a6>
 800b864:	4b2f      	ldr	r3, [pc, #188]	; (800b924 <__ieee754_pow+0x25c>)
 800b866:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d123      	bne.n	800b8b6 <__ieee754_pow+0x1ee>
 800b86e:	f1b9 0f00 	cmp.w	r9, #0
 800b872:	da05      	bge.n	800b880 <__ieee754_pow+0x1b8>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	2000      	movs	r0, #0
 800b87a:	492a      	ldr	r1, [pc, #168]	; (800b924 <__ieee754_pow+0x25c>)
 800b87c:	f7f5 f80e 	bl	800089c <__aeabi_ddiv>
 800b880:	2d00      	cmp	r5, #0
 800b882:	f6bf af40 	bge.w	800b706 <__ieee754_pow+0x3e>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b88c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b890:	431c      	orrs	r4, r3
 800b892:	d108      	bne.n	800b8a6 <__ieee754_pow+0x1de>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4610      	mov	r0, r2
 800b89a:	4619      	mov	r1, r3
 800b89c:	f7f4 fd1c 	bl	80002d8 <__aeabi_dsub>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	e78f      	b.n	800b7c6 <__ieee754_pow+0xfe>
 800b8a6:	9b04      	ldr	r3, [sp, #16]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	f47f af2c 	bne.w	800b706 <__ieee754_pow+0x3e>
 800b8ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	e727      	b.n	800b706 <__ieee754_pow+0x3e>
 800b8b6:	0feb      	lsrs	r3, r5, #31
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	9306      	str	r3, [sp, #24]
 800b8bc:	9a06      	ldr	r2, [sp, #24]
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	d102      	bne.n	800b8ca <__ieee754_pow+0x202>
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	463b      	mov	r3, r7
 800b8c8:	e7e6      	b.n	800b898 <__ieee754_pow+0x1d0>
 800b8ca:	4b19      	ldr	r3, [pc, #100]	; (800b930 <__ieee754_pow+0x268>)
 800b8cc:	4598      	cmp	r8, r3
 800b8ce:	f340 80fb 	ble.w	800bac8 <__ieee754_pow+0x400>
 800b8d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8d6:	4598      	cmp	r8, r3
 800b8d8:	4b13      	ldr	r3, [pc, #76]	; (800b928 <__ieee754_pow+0x260>)
 800b8da:	dd0c      	ble.n	800b8f6 <__ieee754_pow+0x22e>
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	dc0f      	bgt.n	800b900 <__ieee754_pow+0x238>
 800b8e0:	f1b9 0f00 	cmp.w	r9, #0
 800b8e4:	da0f      	bge.n	800b906 <__ieee754_pow+0x23e>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	b009      	add	sp, #36	; 0x24
 800b8ea:	ecbd 8b06 	vpop	{d8-d10}
 800b8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f2:	f000 be66 	b.w	800c5c2 <__math_oflow>
 800b8f6:	429c      	cmp	r4, r3
 800b8f8:	dbf2      	blt.n	800b8e0 <__ieee754_pow+0x218>
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <__ieee754_pow+0x25c>)
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	dd19      	ble.n	800b934 <__ieee754_pow+0x26c>
 800b900:	f1b9 0f00 	cmp.w	r9, #0
 800b904:	dcef      	bgt.n	800b8e6 <__ieee754_pow+0x21e>
 800b906:	2000      	movs	r0, #0
 800b908:	b009      	add	sp, #36	; 0x24
 800b90a:	ecbd 8b06 	vpop	{d8-d10}
 800b90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b912:	f000 be4d 	b.w	800c5b0 <__math_uflow>
 800b916:	bf00      	nop
 800b918:	fff00000 	.word	0xfff00000
 800b91c:	7ff00000 	.word	0x7ff00000
 800b920:	433fffff 	.word	0x433fffff
 800b924:	3ff00000 	.word	0x3ff00000
 800b928:	3fefffff 	.word	0x3fefffff
 800b92c:	3fe00000 	.word	0x3fe00000
 800b930:	41e00000 	.word	0x41e00000
 800b934:	4b60      	ldr	r3, [pc, #384]	; (800bab8 <__ieee754_pow+0x3f0>)
 800b936:	2200      	movs	r2, #0
 800b938:	f7f4 fcce 	bl	80002d8 <__aeabi_dsub>
 800b93c:	a354      	add	r3, pc, #336	; (adr r3, 800ba90 <__ieee754_pow+0x3c8>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	4604      	mov	r4, r0
 800b944:	460d      	mov	r5, r1
 800b946:	f7f4 fe7f 	bl	8000648 <__aeabi_dmul>
 800b94a:	a353      	add	r3, pc, #332	; (adr r3, 800ba98 <__ieee754_pow+0x3d0>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4606      	mov	r6, r0
 800b952:	460f      	mov	r7, r1
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f4 fe76 	bl	8000648 <__aeabi_dmul>
 800b95c:	4b57      	ldr	r3, [pc, #348]	; (800babc <__ieee754_pow+0x3f4>)
 800b95e:	4682      	mov	sl, r0
 800b960:	468b      	mov	fp, r1
 800b962:	2200      	movs	r2, #0
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f7f4 fe6e 	bl	8000648 <__aeabi_dmul>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	a14b      	add	r1, pc, #300	; (adr r1, 800baa0 <__ieee754_pow+0x3d8>)
 800b972:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b976:	f7f4 fcaf 	bl	80002d8 <__aeabi_dsub>
 800b97a:	4622      	mov	r2, r4
 800b97c:	462b      	mov	r3, r5
 800b97e:	f7f4 fe63 	bl	8000648 <__aeabi_dmul>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	2000      	movs	r0, #0
 800b988:	494d      	ldr	r1, [pc, #308]	; (800bac0 <__ieee754_pow+0x3f8>)
 800b98a:	f7f4 fca5 	bl	80002d8 <__aeabi_dsub>
 800b98e:	4622      	mov	r2, r4
 800b990:	4680      	mov	r8, r0
 800b992:	4689      	mov	r9, r1
 800b994:	462b      	mov	r3, r5
 800b996:	4620      	mov	r0, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	f7f4 fe55 	bl	8000648 <__aeabi_dmul>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fe4f 	bl	8000648 <__aeabi_dmul>
 800b9aa:	a33f      	add	r3, pc, #252	; (adr r3, 800baa8 <__ieee754_pow+0x3e0>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fe4a 	bl	8000648 <__aeabi_dmul>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	4659      	mov	r1, fp
 800b9bc:	f7f4 fc8c 	bl	80002d8 <__aeabi_dsub>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	4689      	mov	r9, r1
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f4 fc86 	bl	80002dc <__adddf3>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	463b      	mov	r3, r7
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	460d      	mov	r5, r1
 800b9da:	f7f4 fc7d 	bl	80002d8 <__aeabi_dsub>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc77 	bl	80002d8 <__aeabi_dsub>
 800b9ea:	9b04      	ldr	r3, [sp, #16]
 800b9ec:	9a06      	ldr	r2, [sp, #24]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	4682      	mov	sl, r0
 800b9f4:	468b      	mov	fp, r1
 800b9f6:	f040 81e7 	bne.w	800bdc8 <__ieee754_pow+0x700>
 800b9fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bab0 <__ieee754_pow+0x3e8>
 800b9fe:	eeb0 8a47 	vmov.f32	s16, s14
 800ba02:	eef0 8a67 	vmov.f32	s17, s15
 800ba06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba0a:	2600      	movs	r6, #0
 800ba0c:	4632      	mov	r2, r6
 800ba0e:	463b      	mov	r3, r7
 800ba10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba14:	f7f4 fc60 	bl	80002d8 <__aeabi_dsub>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	f7f4 fe14 	bl	8000648 <__aeabi_dmul>
 800ba20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba24:	4680      	mov	r8, r0
 800ba26:	4689      	mov	r9, r1
 800ba28:	4650      	mov	r0, sl
 800ba2a:	4659      	mov	r1, fp
 800ba2c:	f7f4 fe0c 	bl	8000648 <__aeabi_dmul>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4640      	mov	r0, r8
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7f4 fc50 	bl	80002dc <__adddf3>
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	463b      	mov	r3, r7
 800ba40:	4680      	mov	r8, r0
 800ba42:	4689      	mov	r9, r1
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 fdfe 	bl	8000648 <__aeabi_dmul>
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	4602      	mov	r2, r0
 800ba54:	4649      	mov	r1, r9
 800ba56:	4640      	mov	r0, r8
 800ba58:	f7f4 fc40 	bl	80002dc <__adddf3>
 800ba5c:	4b19      	ldr	r3, [pc, #100]	; (800bac4 <__ieee754_pow+0x3fc>)
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	ec45 4b19 	vmov	d9, r4, r5
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	468b      	mov	fp, r1
 800ba6a:	f340 82f0 	ble.w	800c04e <__ieee754_pow+0x986>
 800ba6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba76:	4303      	orrs	r3, r0
 800ba78:	f000 81e4 	beq.w	800be44 <__ieee754_pow+0x77c>
 800ba7c:	ec51 0b18 	vmov	r0, r1, d8
 800ba80:	2200      	movs	r2, #0
 800ba82:	2300      	movs	r3, #0
 800ba84:	f7f5 f852 	bl	8000b2c <__aeabi_dcmplt>
 800ba88:	3800      	subs	r0, #0
 800ba8a:	bf18      	it	ne
 800ba8c:	2001      	movne	r0, #1
 800ba8e:	e72b      	b.n	800b8e8 <__ieee754_pow+0x220>
 800ba90:	60000000 	.word	0x60000000
 800ba94:	3ff71547 	.word	0x3ff71547
 800ba98:	f85ddf44 	.word	0xf85ddf44
 800ba9c:	3e54ae0b 	.word	0x3e54ae0b
 800baa0:	55555555 	.word	0x55555555
 800baa4:	3fd55555 	.word	0x3fd55555
 800baa8:	652b82fe 	.word	0x652b82fe
 800baac:	3ff71547 	.word	0x3ff71547
 800bab0:	00000000 	.word	0x00000000
 800bab4:	bff00000 	.word	0xbff00000
 800bab8:	3ff00000 	.word	0x3ff00000
 800babc:	3fd00000 	.word	0x3fd00000
 800bac0:	3fe00000 	.word	0x3fe00000
 800bac4:	408fffff 	.word	0x408fffff
 800bac8:	4bd5      	ldr	r3, [pc, #852]	; (800be20 <__ieee754_pow+0x758>)
 800baca:	402b      	ands	r3, r5
 800bacc:	2200      	movs	r2, #0
 800bace:	b92b      	cbnz	r3, 800badc <__ieee754_pow+0x414>
 800bad0:	4bd4      	ldr	r3, [pc, #848]	; (800be24 <__ieee754_pow+0x75c>)
 800bad2:	f7f4 fdb9 	bl	8000648 <__aeabi_dmul>
 800bad6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bada:	460c      	mov	r4, r1
 800badc:	1523      	asrs	r3, r4, #20
 800bade:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bae2:	4413      	add	r3, r2
 800bae4:	9305      	str	r3, [sp, #20]
 800bae6:	4bd0      	ldr	r3, [pc, #832]	; (800be28 <__ieee754_pow+0x760>)
 800bae8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800baec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800baf0:	429c      	cmp	r4, r3
 800baf2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800baf6:	dd08      	ble.n	800bb0a <__ieee754_pow+0x442>
 800baf8:	4bcc      	ldr	r3, [pc, #816]	; (800be2c <__ieee754_pow+0x764>)
 800bafa:	429c      	cmp	r4, r3
 800bafc:	f340 8162 	ble.w	800bdc4 <__ieee754_pow+0x6fc>
 800bb00:	9b05      	ldr	r3, [sp, #20]
 800bb02:	3301      	adds	r3, #1
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb0a:	2400      	movs	r4, #0
 800bb0c:	00e3      	lsls	r3, r4, #3
 800bb0e:	9307      	str	r3, [sp, #28]
 800bb10:	4bc7      	ldr	r3, [pc, #796]	; (800be30 <__ieee754_pow+0x768>)
 800bb12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb16:	ed93 7b00 	vldr	d7, [r3]
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	ec53 2b17 	vmov	r2, r3, d7
 800bb20:	eeb0 9a47 	vmov.f32	s18, s14
 800bb24:	eef0 9a67 	vmov.f32	s19, s15
 800bb28:	4682      	mov	sl, r0
 800bb2a:	f7f4 fbd5 	bl	80002d8 <__aeabi_dsub>
 800bb2e:	4652      	mov	r2, sl
 800bb30:	4606      	mov	r6, r0
 800bb32:	460f      	mov	r7, r1
 800bb34:	462b      	mov	r3, r5
 800bb36:	ec51 0b19 	vmov	r0, r1, d9
 800bb3a:	f7f4 fbcf 	bl	80002dc <__adddf3>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	2000      	movs	r0, #0
 800bb44:	49bb      	ldr	r1, [pc, #748]	; (800be34 <__ieee754_pow+0x76c>)
 800bb46:	f7f4 fea9 	bl	800089c <__aeabi_ddiv>
 800bb4a:	ec41 0b1a 	vmov	d10, r0, r1
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	f7f4 fd77 	bl	8000648 <__aeabi_dmul>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb60:	9302      	str	r3, [sp, #8]
 800bb62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb66:	46ab      	mov	fp, r5
 800bb68:	106d      	asrs	r5, r5, #1
 800bb6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb72:	ec41 0b18 	vmov	d8, r0, r1
 800bb76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	4614      	mov	r4, r2
 800bb82:	461d      	mov	r5, r3
 800bb84:	f7f4 fd60 	bl	8000648 <__aeabi_dmul>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	4639      	mov	r1, r7
 800bb90:	f7f4 fba2 	bl	80002d8 <__aeabi_dsub>
 800bb94:	ec53 2b19 	vmov	r2, r3, d9
 800bb98:	4606      	mov	r6, r0
 800bb9a:	460f      	mov	r7, r1
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7f4 fb9a 	bl	80002d8 <__aeabi_dsub>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4650      	mov	r0, sl
 800bbaa:	4659      	mov	r1, fp
 800bbac:	f7f4 fb94 	bl	80002d8 <__aeabi_dsub>
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	464b      	mov	r3, r9
 800bbb4:	f7f4 fd48 	bl	8000648 <__aeabi_dmul>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	f7f4 fb8a 	bl	80002d8 <__aeabi_dsub>
 800bbc4:	ec53 2b1a 	vmov	r2, r3, d10
 800bbc8:	f7f4 fd3e 	bl	8000648 <__aeabi_dmul>
 800bbcc:	ec53 2b18 	vmov	r2, r3, d8
 800bbd0:	ec41 0b19 	vmov	d9, r0, r1
 800bbd4:	ec51 0b18 	vmov	r0, r1, d8
 800bbd8:	f7f4 fd36 	bl	8000648 <__aeabi_dmul>
 800bbdc:	a37c      	add	r3, pc, #496	; (adr r3, 800bdd0 <__ieee754_pow+0x708>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	f7f4 fd2f 	bl	8000648 <__aeabi_dmul>
 800bbea:	a37b      	add	r3, pc, #492	; (adr r3, 800bdd8 <__ieee754_pow+0x710>)
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f7f4 fb74 	bl	80002dc <__adddf3>
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	462b      	mov	r3, r5
 800bbf8:	f7f4 fd26 	bl	8000648 <__aeabi_dmul>
 800bbfc:	a378      	add	r3, pc, #480	; (adr r3, 800bde0 <__ieee754_pow+0x718>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f7f4 fb6b 	bl	80002dc <__adddf3>
 800bc06:	4622      	mov	r2, r4
 800bc08:	462b      	mov	r3, r5
 800bc0a:	f7f4 fd1d 	bl	8000648 <__aeabi_dmul>
 800bc0e:	a376      	add	r3, pc, #472	; (adr r3, 800bde8 <__ieee754_pow+0x720>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	f7f4 fb62 	bl	80002dc <__adddf3>
 800bc18:	4622      	mov	r2, r4
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	f7f4 fd14 	bl	8000648 <__aeabi_dmul>
 800bc20:	a373      	add	r3, pc, #460	; (adr r3, 800bdf0 <__ieee754_pow+0x728>)
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	f7f4 fb59 	bl	80002dc <__adddf3>
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	f7f4 fd0b 	bl	8000648 <__aeabi_dmul>
 800bc32:	a371      	add	r3, pc, #452	; (adr r3, 800bdf8 <__ieee754_pow+0x730>)
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	f7f4 fb50 	bl	80002dc <__adddf3>
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	462b      	mov	r3, r5
 800bc44:	4620      	mov	r0, r4
 800bc46:	4629      	mov	r1, r5
 800bc48:	f7f4 fcfe 	bl	8000648 <__aeabi_dmul>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fcf8 	bl	8000648 <__aeabi_dmul>
 800bc58:	4642      	mov	r2, r8
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	460d      	mov	r5, r1
 800bc5e:	464b      	mov	r3, r9
 800bc60:	ec51 0b18 	vmov	r0, r1, d8
 800bc64:	f7f4 fb3a 	bl	80002dc <__adddf3>
 800bc68:	ec53 2b19 	vmov	r2, r3, d9
 800bc6c:	f7f4 fcec 	bl	8000648 <__aeabi_dmul>
 800bc70:	4622      	mov	r2, r4
 800bc72:	462b      	mov	r3, r5
 800bc74:	f7f4 fb32 	bl	80002dc <__adddf3>
 800bc78:	4642      	mov	r2, r8
 800bc7a:	4682      	mov	sl, r0
 800bc7c:	468b      	mov	fp, r1
 800bc7e:	464b      	mov	r3, r9
 800bc80:	4640      	mov	r0, r8
 800bc82:	4649      	mov	r1, r9
 800bc84:	f7f4 fce0 	bl	8000648 <__aeabi_dmul>
 800bc88:	4b6b      	ldr	r3, [pc, #428]	; (800be38 <__ieee754_pow+0x770>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	460f      	mov	r7, r1
 800bc90:	f7f4 fb24 	bl	80002dc <__adddf3>
 800bc94:	4652      	mov	r2, sl
 800bc96:	465b      	mov	r3, fp
 800bc98:	f7f4 fb20 	bl	80002dc <__adddf3>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	460d      	mov	r5, r1
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4640      	mov	r0, r8
 800bca8:	4649      	mov	r1, r9
 800bcaa:	f7f4 fccd 	bl	8000648 <__aeabi_dmul>
 800bcae:	4b62      	ldr	r3, [pc, #392]	; (800be38 <__ieee754_pow+0x770>)
 800bcb0:	4680      	mov	r8, r0
 800bcb2:	4689      	mov	r9, r1
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 fb0d 	bl	80002d8 <__aeabi_dsub>
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	463b      	mov	r3, r7
 800bcc2:	f7f4 fb09 	bl	80002d8 <__aeabi_dsub>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4650      	mov	r0, sl
 800bccc:	4659      	mov	r1, fp
 800bcce:	f7f4 fb03 	bl	80002d8 <__aeabi_dsub>
 800bcd2:	ec53 2b18 	vmov	r2, r3, d8
 800bcd6:	f7f4 fcb7 	bl	8000648 <__aeabi_dmul>
 800bcda:	4622      	mov	r2, r4
 800bcdc:	4606      	mov	r6, r0
 800bcde:	460f      	mov	r7, r1
 800bce0:	462b      	mov	r3, r5
 800bce2:	ec51 0b19 	vmov	r0, r1, d9
 800bce6:	f7f4 fcaf 	bl	8000648 <__aeabi_dmul>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 faf3 	bl	80002dc <__adddf3>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4640      	mov	r0, r8
 800bd00:	4649      	mov	r1, r9
 800bd02:	f7f4 faeb 	bl	80002dc <__adddf3>
 800bd06:	a33e      	add	r3, pc, #248	; (adr r3, 800be00 <__ieee754_pow+0x738>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	4604      	mov	r4, r0
 800bd10:	460d      	mov	r5, r1
 800bd12:	f7f4 fc99 	bl	8000648 <__aeabi_dmul>
 800bd16:	4642      	mov	r2, r8
 800bd18:	ec41 0b18 	vmov	d8, r0, r1
 800bd1c:	464b      	mov	r3, r9
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 fad9 	bl	80002d8 <__aeabi_dsub>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 fad3 	bl	80002d8 <__aeabi_dsub>
 800bd32:	a335      	add	r3, pc, #212	; (adr r3, 800be08 <__ieee754_pow+0x740>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fc86 	bl	8000648 <__aeabi_dmul>
 800bd3c:	a334      	add	r3, pc, #208	; (adr r3, 800be10 <__ieee754_pow+0x748>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	4620      	mov	r0, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 fc7d 	bl	8000648 <__aeabi_dmul>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4630      	mov	r0, r6
 800bd54:	4639      	mov	r1, r7
 800bd56:	f7f4 fac1 	bl	80002dc <__adddf3>
 800bd5a:	9a07      	ldr	r2, [sp, #28]
 800bd5c:	4b37      	ldr	r3, [pc, #220]	; (800be3c <__ieee754_pow+0x774>)
 800bd5e:	4413      	add	r3, r2
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	f7f4 faba 	bl	80002dc <__adddf3>
 800bd68:	4682      	mov	sl, r0
 800bd6a:	9805      	ldr	r0, [sp, #20]
 800bd6c:	468b      	mov	fp, r1
 800bd6e:	f7f4 fc01 	bl	8000574 <__aeabi_i2d>
 800bd72:	9a07      	ldr	r2, [sp, #28]
 800bd74:	4b32      	ldr	r3, [pc, #200]	; (800be40 <__ieee754_pow+0x778>)
 800bd76:	4413      	add	r3, r2
 800bd78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	460f      	mov	r7, r1
 800bd80:	4652      	mov	r2, sl
 800bd82:	465b      	mov	r3, fp
 800bd84:	ec51 0b18 	vmov	r0, r1, d8
 800bd88:	f7f4 faa8 	bl	80002dc <__adddf3>
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	464b      	mov	r3, r9
 800bd90:	f7f4 faa4 	bl	80002dc <__adddf3>
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	f7f4 faa0 	bl	80002dc <__adddf3>
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	4632      	mov	r2, r6
 800bda0:	463b      	mov	r3, r7
 800bda2:	4604      	mov	r4, r0
 800bda4:	460d      	mov	r5, r1
 800bda6:	f7f4 fa97 	bl	80002d8 <__aeabi_dsub>
 800bdaa:	4642      	mov	r2, r8
 800bdac:	464b      	mov	r3, r9
 800bdae:	f7f4 fa93 	bl	80002d8 <__aeabi_dsub>
 800bdb2:	ec53 2b18 	vmov	r2, r3, d8
 800bdb6:	f7f4 fa8f 	bl	80002d8 <__aeabi_dsub>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4650      	mov	r0, sl
 800bdc0:	4659      	mov	r1, fp
 800bdc2:	e610      	b.n	800b9e6 <__ieee754_pow+0x31e>
 800bdc4:	2401      	movs	r4, #1
 800bdc6:	e6a1      	b.n	800bb0c <__ieee754_pow+0x444>
 800bdc8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800be18 <__ieee754_pow+0x750>
 800bdcc:	e617      	b.n	800b9fe <__ieee754_pow+0x336>
 800bdce:	bf00      	nop
 800bdd0:	4a454eef 	.word	0x4a454eef
 800bdd4:	3fca7e28 	.word	0x3fca7e28
 800bdd8:	93c9db65 	.word	0x93c9db65
 800bddc:	3fcd864a 	.word	0x3fcd864a
 800bde0:	a91d4101 	.word	0xa91d4101
 800bde4:	3fd17460 	.word	0x3fd17460
 800bde8:	518f264d 	.word	0x518f264d
 800bdec:	3fd55555 	.word	0x3fd55555
 800bdf0:	db6fabff 	.word	0xdb6fabff
 800bdf4:	3fdb6db6 	.word	0x3fdb6db6
 800bdf8:	33333303 	.word	0x33333303
 800bdfc:	3fe33333 	.word	0x3fe33333
 800be00:	e0000000 	.word	0xe0000000
 800be04:	3feec709 	.word	0x3feec709
 800be08:	dc3a03fd 	.word	0xdc3a03fd
 800be0c:	3feec709 	.word	0x3feec709
 800be10:	145b01f5 	.word	0x145b01f5
 800be14:	be3e2fe0 	.word	0xbe3e2fe0
 800be18:	00000000 	.word	0x00000000
 800be1c:	3ff00000 	.word	0x3ff00000
 800be20:	7ff00000 	.word	0x7ff00000
 800be24:	43400000 	.word	0x43400000
 800be28:	0003988e 	.word	0x0003988e
 800be2c:	000bb679 	.word	0x000bb679
 800be30:	0800da08 	.word	0x0800da08
 800be34:	3ff00000 	.word	0x3ff00000
 800be38:	40080000 	.word	0x40080000
 800be3c:	0800da28 	.word	0x0800da28
 800be40:	0800da18 	.word	0x0800da18
 800be44:	a3b3      	add	r3, pc, #716	; (adr r3, 800c114 <__ieee754_pow+0xa4c>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fa45 	bl	80002dc <__adddf3>
 800be52:	4622      	mov	r2, r4
 800be54:	ec41 0b1a 	vmov	d10, r0, r1
 800be58:	462b      	mov	r3, r5
 800be5a:	4630      	mov	r0, r6
 800be5c:	4639      	mov	r1, r7
 800be5e:	f7f4 fa3b 	bl	80002d8 <__aeabi_dsub>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	ec51 0b1a 	vmov	r0, r1, d10
 800be6a:	f7f4 fe7d 	bl	8000b68 <__aeabi_dcmpgt>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f47f ae04 	bne.w	800ba7c <__ieee754_pow+0x3b4>
 800be74:	4aa2      	ldr	r2, [pc, #648]	; (800c100 <__ieee754_pow+0xa38>)
 800be76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be7a:	4293      	cmp	r3, r2
 800be7c:	f340 8107 	ble.w	800c08e <__ieee754_pow+0x9c6>
 800be80:	151b      	asrs	r3, r3, #20
 800be82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be86:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be8a:	fa4a fa03 	asr.w	sl, sl, r3
 800be8e:	44da      	add	sl, fp
 800be90:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800be94:	489b      	ldr	r0, [pc, #620]	; (800c104 <__ieee754_pow+0xa3c>)
 800be96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800be9a:	4108      	asrs	r0, r1
 800be9c:	ea00 030a 	and.w	r3, r0, sl
 800bea0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bea4:	f1c1 0114 	rsb	r1, r1, #20
 800bea8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800beac:	fa4a fa01 	asr.w	sl, sl, r1
 800beb0:	f1bb 0f00 	cmp.w	fp, #0
 800beb4:	f04f 0200 	mov.w	r2, #0
 800beb8:	4620      	mov	r0, r4
 800beba:	4629      	mov	r1, r5
 800bebc:	bfb8      	it	lt
 800bebe:	f1ca 0a00 	rsblt	sl, sl, #0
 800bec2:	f7f4 fa09 	bl	80002d8 <__aeabi_dsub>
 800bec6:	ec41 0b19 	vmov	d9, r0, r1
 800beca:	4642      	mov	r2, r8
 800becc:	464b      	mov	r3, r9
 800bece:	ec51 0b19 	vmov	r0, r1, d9
 800bed2:	f7f4 fa03 	bl	80002dc <__adddf3>
 800bed6:	a37a      	add	r3, pc, #488	; (adr r3, 800c0c0 <__ieee754_pow+0x9f8>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	2000      	movs	r0, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	460d      	mov	r5, r1
 800bee2:	f7f4 fbb1 	bl	8000648 <__aeabi_dmul>
 800bee6:	ec53 2b19 	vmov	r2, r3, d9
 800beea:	4606      	mov	r6, r0
 800beec:	460f      	mov	r7, r1
 800beee:	4620      	mov	r0, r4
 800bef0:	4629      	mov	r1, r5
 800bef2:	f7f4 f9f1 	bl	80002d8 <__aeabi_dsub>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4640      	mov	r0, r8
 800befc:	4649      	mov	r1, r9
 800befe:	f7f4 f9eb 	bl	80002d8 <__aeabi_dsub>
 800bf02:	a371      	add	r3, pc, #452	; (adr r3, 800c0c8 <__ieee754_pow+0xa00>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 fb9e 	bl	8000648 <__aeabi_dmul>
 800bf0c:	a370      	add	r3, pc, #448	; (adr r3, 800c0d0 <__ieee754_pow+0xa08>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	4680      	mov	r8, r0
 800bf14:	4689      	mov	r9, r1
 800bf16:	4620      	mov	r0, r4
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 fb95 	bl	8000648 <__aeabi_dmul>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	f7f4 f9d9 	bl	80002dc <__adddf3>
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4630      	mov	r0, r6
 800bf34:	4639      	mov	r1, r7
 800bf36:	f7f4 f9d1 	bl	80002dc <__adddf3>
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	4680      	mov	r8, r0
 800bf40:	4689      	mov	r9, r1
 800bf42:	f7f4 f9c9 	bl	80002d8 <__aeabi_dsub>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	f7f4 f9c3 	bl	80002d8 <__aeabi_dsub>
 800bf52:	4642      	mov	r2, r8
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	464b      	mov	r3, r9
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	f7f4 fb73 	bl	8000648 <__aeabi_dmul>
 800bf62:	a35d      	add	r3, pc, #372	; (adr r3, 800c0d8 <__ieee754_pow+0xa10>)
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	4604      	mov	r4, r0
 800bf6a:	460d      	mov	r5, r1
 800bf6c:	f7f4 fb6c 	bl	8000648 <__aeabi_dmul>
 800bf70:	a35b      	add	r3, pc, #364	; (adr r3, 800c0e0 <__ieee754_pow+0xa18>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 f9af 	bl	80002d8 <__aeabi_dsub>
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	462b      	mov	r3, r5
 800bf7e:	f7f4 fb63 	bl	8000648 <__aeabi_dmul>
 800bf82:	a359      	add	r3, pc, #356	; (adr r3, 800c0e8 <__ieee754_pow+0xa20>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 f9a8 	bl	80002dc <__adddf3>
 800bf8c:	4622      	mov	r2, r4
 800bf8e:	462b      	mov	r3, r5
 800bf90:	f7f4 fb5a 	bl	8000648 <__aeabi_dmul>
 800bf94:	a356      	add	r3, pc, #344	; (adr r3, 800c0f0 <__ieee754_pow+0xa28>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 f99d 	bl	80002d8 <__aeabi_dsub>
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	f7f4 fb51 	bl	8000648 <__aeabi_dmul>
 800bfa6:	a354      	add	r3, pc, #336	; (adr r3, 800c0f8 <__ieee754_pow+0xa30>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 f996 	bl	80002dc <__adddf3>
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	f7f4 fb48 	bl	8000648 <__aeabi_dmul>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	f7f4 f98a 	bl	80002d8 <__aeabi_dsub>
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4640      	mov	r0, r8
 800bfce:	4649      	mov	r1, r9
 800bfd0:	f7f4 fb3a 	bl	8000648 <__aeabi_dmul>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	ec41 0b19 	vmov	d9, r0, r1
 800bfda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f7f4 f979 	bl	80002d8 <__aeabi_dsub>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	ec51 0b19 	vmov	r0, r1, d9
 800bfee:	f7f4 fc55 	bl	800089c <__aeabi_ddiv>
 800bff2:	4632      	mov	r2, r6
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	463b      	mov	r3, r7
 800bffa:	4640      	mov	r0, r8
 800bffc:	4649      	mov	r1, r9
 800bffe:	f7f4 fb23 	bl	8000648 <__aeabi_dmul>
 800c002:	4632      	mov	r2, r6
 800c004:	463b      	mov	r3, r7
 800c006:	f7f4 f969 	bl	80002dc <__adddf3>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	f7f4 f961 	bl	80002d8 <__aeabi_dsub>
 800c016:	4642      	mov	r2, r8
 800c018:	464b      	mov	r3, r9
 800c01a:	f7f4 f95d 	bl	80002d8 <__aeabi_dsub>
 800c01e:	460b      	mov	r3, r1
 800c020:	4602      	mov	r2, r0
 800c022:	4939      	ldr	r1, [pc, #228]	; (800c108 <__ieee754_pow+0xa40>)
 800c024:	2000      	movs	r0, #0
 800c026:	f7f4 f957 	bl	80002d8 <__aeabi_dsub>
 800c02a:	ec41 0b10 	vmov	d0, r0, r1
 800c02e:	ee10 3a90 	vmov	r3, s1
 800c032:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c03a:	da2b      	bge.n	800c094 <__ieee754_pow+0x9cc>
 800c03c:	4650      	mov	r0, sl
 800c03e:	f000 fa1b 	bl	800c478 <scalbn>
 800c042:	ec51 0b10 	vmov	r0, r1, d0
 800c046:	ec53 2b18 	vmov	r2, r3, d8
 800c04a:	f7ff bbee 	b.w	800b82a <__ieee754_pow+0x162>
 800c04e:	4b2f      	ldr	r3, [pc, #188]	; (800c10c <__ieee754_pow+0xa44>)
 800c050:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c054:	429e      	cmp	r6, r3
 800c056:	f77f af0d 	ble.w	800be74 <__ieee754_pow+0x7ac>
 800c05a:	4b2d      	ldr	r3, [pc, #180]	; (800c110 <__ieee754_pow+0xa48>)
 800c05c:	440b      	add	r3, r1
 800c05e:	4303      	orrs	r3, r0
 800c060:	d009      	beq.n	800c076 <__ieee754_pow+0x9ae>
 800c062:	ec51 0b18 	vmov	r0, r1, d8
 800c066:	2200      	movs	r2, #0
 800c068:	2300      	movs	r3, #0
 800c06a:	f7f4 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 800c06e:	3800      	subs	r0, #0
 800c070:	bf18      	it	ne
 800c072:	2001      	movne	r0, #1
 800c074:	e448      	b.n	800b908 <__ieee754_pow+0x240>
 800c076:	4622      	mov	r2, r4
 800c078:	462b      	mov	r3, r5
 800c07a:	f7f4 f92d 	bl	80002d8 <__aeabi_dsub>
 800c07e:	4642      	mov	r2, r8
 800c080:	464b      	mov	r3, r9
 800c082:	f7f4 fd67 	bl	8000b54 <__aeabi_dcmpge>
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f aef4 	beq.w	800be74 <__ieee754_pow+0x7ac>
 800c08c:	e7e9      	b.n	800c062 <__ieee754_pow+0x99a>
 800c08e:	f04f 0a00 	mov.w	sl, #0
 800c092:	e71a      	b.n	800beca <__ieee754_pow+0x802>
 800c094:	ec51 0b10 	vmov	r0, r1, d0
 800c098:	4619      	mov	r1, r3
 800c09a:	e7d4      	b.n	800c046 <__ieee754_pow+0x97e>
 800c09c:	491a      	ldr	r1, [pc, #104]	; (800c108 <__ieee754_pow+0xa40>)
 800c09e:	2000      	movs	r0, #0
 800c0a0:	f7ff bb31 	b.w	800b706 <__ieee754_pow+0x3e>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f7ff bb2d 	b.w	800b706 <__ieee754_pow+0x3e>
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	f7ff bb29 	b.w	800b706 <__ieee754_pow+0x3e>
 800c0b4:	9204      	str	r2, [sp, #16]
 800c0b6:	f7ff bb7b 	b.w	800b7b0 <__ieee754_pow+0xe8>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f7ff bb65 	b.w	800b78a <__ieee754_pow+0xc2>
 800c0c0:	00000000 	.word	0x00000000
 800c0c4:	3fe62e43 	.word	0x3fe62e43
 800c0c8:	fefa39ef 	.word	0xfefa39ef
 800c0cc:	3fe62e42 	.word	0x3fe62e42
 800c0d0:	0ca86c39 	.word	0x0ca86c39
 800c0d4:	be205c61 	.word	0xbe205c61
 800c0d8:	72bea4d0 	.word	0x72bea4d0
 800c0dc:	3e663769 	.word	0x3e663769
 800c0e0:	c5d26bf1 	.word	0xc5d26bf1
 800c0e4:	3ebbbd41 	.word	0x3ebbbd41
 800c0e8:	af25de2c 	.word	0xaf25de2c
 800c0ec:	3f11566a 	.word	0x3f11566a
 800c0f0:	16bebd93 	.word	0x16bebd93
 800c0f4:	3f66c16c 	.word	0x3f66c16c
 800c0f8:	5555553e 	.word	0x5555553e
 800c0fc:	3fc55555 	.word	0x3fc55555
 800c100:	3fe00000 	.word	0x3fe00000
 800c104:	fff00000 	.word	0xfff00000
 800c108:	3ff00000 	.word	0x3ff00000
 800c10c:	4090cbff 	.word	0x4090cbff
 800c110:	3f6f3400 	.word	0x3f6f3400
 800c114:	652b82fe 	.word	0x652b82fe
 800c118:	3c971547 	.word	0x3c971547
 800c11c:	00000000 	.word	0x00000000

0800c120 <atan>:
 800c120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	ec55 4b10 	vmov	r4, r5, d0
 800c128:	4bc3      	ldr	r3, [pc, #780]	; (800c438 <atan+0x318>)
 800c12a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c12e:	429e      	cmp	r6, r3
 800c130:	46ab      	mov	fp, r5
 800c132:	dd18      	ble.n	800c166 <atan+0x46>
 800c134:	4bc1      	ldr	r3, [pc, #772]	; (800c43c <atan+0x31c>)
 800c136:	429e      	cmp	r6, r3
 800c138:	dc01      	bgt.n	800c13e <atan+0x1e>
 800c13a:	d109      	bne.n	800c150 <atan+0x30>
 800c13c:	b144      	cbz	r4, 800c150 <atan+0x30>
 800c13e:	4622      	mov	r2, r4
 800c140:	462b      	mov	r3, r5
 800c142:	4620      	mov	r0, r4
 800c144:	4629      	mov	r1, r5
 800c146:	f7f4 f8c9 	bl	80002dc <__adddf3>
 800c14a:	4604      	mov	r4, r0
 800c14c:	460d      	mov	r5, r1
 800c14e:	e006      	b.n	800c15e <atan+0x3e>
 800c150:	f1bb 0f00 	cmp.w	fp, #0
 800c154:	f300 8131 	bgt.w	800c3ba <atan+0x29a>
 800c158:	a59b      	add	r5, pc, #620	; (adr r5, 800c3c8 <atan+0x2a8>)
 800c15a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c15e:	ec45 4b10 	vmov	d0, r4, r5
 800c162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c166:	4bb6      	ldr	r3, [pc, #728]	; (800c440 <atan+0x320>)
 800c168:	429e      	cmp	r6, r3
 800c16a:	dc14      	bgt.n	800c196 <atan+0x76>
 800c16c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c170:	429e      	cmp	r6, r3
 800c172:	dc0d      	bgt.n	800c190 <atan+0x70>
 800c174:	a396      	add	r3, pc, #600	; (adr r3, 800c3d0 <atan+0x2b0>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	ee10 0a10 	vmov	r0, s0
 800c17e:	4629      	mov	r1, r5
 800c180:	f7f4 f8ac 	bl	80002dc <__adddf3>
 800c184:	4baf      	ldr	r3, [pc, #700]	; (800c444 <atan+0x324>)
 800c186:	2200      	movs	r2, #0
 800c188:	f7f4 fcee 	bl	8000b68 <__aeabi_dcmpgt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d1e6      	bne.n	800c15e <atan+0x3e>
 800c190:	f04f 3aff 	mov.w	sl, #4294967295
 800c194:	e02b      	b.n	800c1ee <atan+0xce>
 800c196:	f000 f963 	bl	800c460 <fabs>
 800c19a:	4bab      	ldr	r3, [pc, #684]	; (800c448 <atan+0x328>)
 800c19c:	429e      	cmp	r6, r3
 800c19e:	ec55 4b10 	vmov	r4, r5, d0
 800c1a2:	f300 80bf 	bgt.w	800c324 <atan+0x204>
 800c1a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	f300 80a0 	bgt.w	800c2f0 <atan+0x1d0>
 800c1b0:	ee10 2a10 	vmov	r2, s0
 800c1b4:	ee10 0a10 	vmov	r0, s0
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7f4 f88e 	bl	80002dc <__adddf3>
 800c1c0:	4ba0      	ldr	r3, [pc, #640]	; (800c444 <atan+0x324>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f7f4 f888 	bl	80002d8 <__aeabi_dsub>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460f      	mov	r7, r1
 800c1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	f7f4 f881 	bl	80002dc <__adddf3>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4630      	mov	r0, r6
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	f7f4 fb5b 	bl	800089c <__aeabi_ddiv>
 800c1e6:	f04f 0a00 	mov.w	sl, #0
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	460d      	mov	r5, r1
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 fa27 	bl	8000648 <__aeabi_dmul>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4680      	mov	r8, r0
 800c200:	4689      	mov	r9, r1
 800c202:	f7f4 fa21 	bl	8000648 <__aeabi_dmul>
 800c206:	a374      	add	r3, pc, #464	; (adr r3, 800c3d8 <atan+0x2b8>)
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	4606      	mov	r6, r0
 800c20e:	460f      	mov	r7, r1
 800c210:	f7f4 fa1a 	bl	8000648 <__aeabi_dmul>
 800c214:	a372      	add	r3, pc, #456	; (adr r3, 800c3e0 <atan+0x2c0>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f7f4 f85f 	bl	80002dc <__adddf3>
 800c21e:	4632      	mov	r2, r6
 800c220:	463b      	mov	r3, r7
 800c222:	f7f4 fa11 	bl	8000648 <__aeabi_dmul>
 800c226:	a370      	add	r3, pc, #448	; (adr r3, 800c3e8 <atan+0x2c8>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f7f4 f856 	bl	80002dc <__adddf3>
 800c230:	4632      	mov	r2, r6
 800c232:	463b      	mov	r3, r7
 800c234:	f7f4 fa08 	bl	8000648 <__aeabi_dmul>
 800c238:	a36d      	add	r3, pc, #436	; (adr r3, 800c3f0 <atan+0x2d0>)
 800c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23e:	f7f4 f84d 	bl	80002dc <__adddf3>
 800c242:	4632      	mov	r2, r6
 800c244:	463b      	mov	r3, r7
 800c246:	f7f4 f9ff 	bl	8000648 <__aeabi_dmul>
 800c24a:	a36b      	add	r3, pc, #428	; (adr r3, 800c3f8 <atan+0x2d8>)
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	f7f4 f844 	bl	80002dc <__adddf3>
 800c254:	4632      	mov	r2, r6
 800c256:	463b      	mov	r3, r7
 800c258:	f7f4 f9f6 	bl	8000648 <__aeabi_dmul>
 800c25c:	a368      	add	r3, pc, #416	; (adr r3, 800c400 <atan+0x2e0>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	f7f4 f83b 	bl	80002dc <__adddf3>
 800c266:	4642      	mov	r2, r8
 800c268:	464b      	mov	r3, r9
 800c26a:	f7f4 f9ed 	bl	8000648 <__aeabi_dmul>
 800c26e:	a366      	add	r3, pc, #408	; (adr r3, 800c408 <atan+0x2e8>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	4680      	mov	r8, r0
 800c276:	4689      	mov	r9, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 f9e4 	bl	8000648 <__aeabi_dmul>
 800c280:	a363      	add	r3, pc, #396	; (adr r3, 800c410 <atan+0x2f0>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f7f4 f827 	bl	80002d8 <__aeabi_dsub>
 800c28a:	4632      	mov	r2, r6
 800c28c:	463b      	mov	r3, r7
 800c28e:	f7f4 f9db 	bl	8000648 <__aeabi_dmul>
 800c292:	a361      	add	r3, pc, #388	; (adr r3, 800c418 <atan+0x2f8>)
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f7f4 f81e 	bl	80002d8 <__aeabi_dsub>
 800c29c:	4632      	mov	r2, r6
 800c29e:	463b      	mov	r3, r7
 800c2a0:	f7f4 f9d2 	bl	8000648 <__aeabi_dmul>
 800c2a4:	a35e      	add	r3, pc, #376	; (adr r3, 800c420 <atan+0x300>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	f7f4 f815 	bl	80002d8 <__aeabi_dsub>
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	463b      	mov	r3, r7
 800c2b2:	f7f4 f9c9 	bl	8000648 <__aeabi_dmul>
 800c2b6:	a35c      	add	r3, pc, #368	; (adr r3, 800c428 <atan+0x308>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f4 f80c 	bl	80002d8 <__aeabi_dsub>
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	463b      	mov	r3, r7
 800c2c4:	f7f4 f9c0 	bl	8000648 <__aeabi_dmul>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	4649      	mov	r1, r9
 800c2d0:	f7f4 f804 	bl	80002dc <__adddf3>
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	462b      	mov	r3, r5
 800c2d8:	f7f4 f9b6 	bl	8000648 <__aeabi_dmul>
 800c2dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	d14b      	bne.n	800c37e <atan+0x25e>
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f3 fff5 	bl	80002d8 <__aeabi_dsub>
 800c2ee:	e72c      	b.n	800c14a <atan+0x2a>
 800c2f0:	ee10 0a10 	vmov	r0, s0
 800c2f4:	4b53      	ldr	r3, [pc, #332]	; (800c444 <atan+0x324>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f7f3 ffed 	bl	80002d8 <__aeabi_dsub>
 800c2fe:	4b51      	ldr	r3, [pc, #324]	; (800c444 <atan+0x324>)
 800c300:	4606      	mov	r6, r0
 800c302:	460f      	mov	r7, r1
 800c304:	2200      	movs	r2, #0
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f3 ffe7 	bl	80002dc <__adddf3>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4630      	mov	r0, r6
 800c314:	4639      	mov	r1, r7
 800c316:	f7f4 fac1 	bl	800089c <__aeabi_ddiv>
 800c31a:	f04f 0a01 	mov.w	sl, #1
 800c31e:	4604      	mov	r4, r0
 800c320:	460d      	mov	r5, r1
 800c322:	e764      	b.n	800c1ee <atan+0xce>
 800c324:	4b49      	ldr	r3, [pc, #292]	; (800c44c <atan+0x32c>)
 800c326:	429e      	cmp	r6, r3
 800c328:	da1d      	bge.n	800c366 <atan+0x246>
 800c32a:	ee10 0a10 	vmov	r0, s0
 800c32e:	4b48      	ldr	r3, [pc, #288]	; (800c450 <atan+0x330>)
 800c330:	2200      	movs	r2, #0
 800c332:	4629      	mov	r1, r5
 800c334:	f7f3 ffd0 	bl	80002d8 <__aeabi_dsub>
 800c338:	4b45      	ldr	r3, [pc, #276]	; (800c450 <atan+0x330>)
 800c33a:	4606      	mov	r6, r0
 800c33c:	460f      	mov	r7, r1
 800c33e:	2200      	movs	r2, #0
 800c340:	4620      	mov	r0, r4
 800c342:	4629      	mov	r1, r5
 800c344:	f7f4 f980 	bl	8000648 <__aeabi_dmul>
 800c348:	4b3e      	ldr	r3, [pc, #248]	; (800c444 <atan+0x324>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	f7f3 ffc6 	bl	80002dc <__adddf3>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f4 faa0 	bl	800089c <__aeabi_ddiv>
 800c35c:	f04f 0a02 	mov.w	sl, #2
 800c360:	4604      	mov	r4, r0
 800c362:	460d      	mov	r5, r1
 800c364:	e743      	b.n	800c1ee <atan+0xce>
 800c366:	462b      	mov	r3, r5
 800c368:	ee10 2a10 	vmov	r2, s0
 800c36c:	4939      	ldr	r1, [pc, #228]	; (800c454 <atan+0x334>)
 800c36e:	2000      	movs	r0, #0
 800c370:	f7f4 fa94 	bl	800089c <__aeabi_ddiv>
 800c374:	f04f 0a03 	mov.w	sl, #3
 800c378:	4604      	mov	r4, r0
 800c37a:	460d      	mov	r5, r1
 800c37c:	e737      	b.n	800c1ee <atan+0xce>
 800c37e:	4b36      	ldr	r3, [pc, #216]	; (800c458 <atan+0x338>)
 800c380:	4e36      	ldr	r6, [pc, #216]	; (800c45c <atan+0x33c>)
 800c382:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f3 ffa5 	bl	80002d8 <__aeabi_dsub>
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	f7f3 ffa1 	bl	80002d8 <__aeabi_dsub>
 800c396:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c39a:	4602      	mov	r2, r0
 800c39c:	460b      	mov	r3, r1
 800c39e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c3a2:	f7f3 ff99 	bl	80002d8 <__aeabi_dsub>
 800c3a6:	f1bb 0f00 	cmp.w	fp, #0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	f6bf aed6 	bge.w	800c15e <atan+0x3e>
 800c3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3b6:	461d      	mov	r5, r3
 800c3b8:	e6d1      	b.n	800c15e <atan+0x3e>
 800c3ba:	a51d      	add	r5, pc, #116	; (adr r5, 800c430 <atan+0x310>)
 800c3bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c3c0:	e6cd      	b.n	800c15e <atan+0x3e>
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	54442d18 	.word	0x54442d18
 800c3cc:	bff921fb 	.word	0xbff921fb
 800c3d0:	8800759c 	.word	0x8800759c
 800c3d4:	7e37e43c 	.word	0x7e37e43c
 800c3d8:	e322da11 	.word	0xe322da11
 800c3dc:	3f90ad3a 	.word	0x3f90ad3a
 800c3e0:	24760deb 	.word	0x24760deb
 800c3e4:	3fa97b4b 	.word	0x3fa97b4b
 800c3e8:	a0d03d51 	.word	0xa0d03d51
 800c3ec:	3fb10d66 	.word	0x3fb10d66
 800c3f0:	c54c206e 	.word	0xc54c206e
 800c3f4:	3fb745cd 	.word	0x3fb745cd
 800c3f8:	920083ff 	.word	0x920083ff
 800c3fc:	3fc24924 	.word	0x3fc24924
 800c400:	5555550d 	.word	0x5555550d
 800c404:	3fd55555 	.word	0x3fd55555
 800c408:	2c6a6c2f 	.word	0x2c6a6c2f
 800c40c:	bfa2b444 	.word	0xbfa2b444
 800c410:	52defd9a 	.word	0x52defd9a
 800c414:	3fadde2d 	.word	0x3fadde2d
 800c418:	af749a6d 	.word	0xaf749a6d
 800c41c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c420:	fe231671 	.word	0xfe231671
 800c424:	3fbc71c6 	.word	0x3fbc71c6
 800c428:	9998ebc4 	.word	0x9998ebc4
 800c42c:	3fc99999 	.word	0x3fc99999
 800c430:	54442d18 	.word	0x54442d18
 800c434:	3ff921fb 	.word	0x3ff921fb
 800c438:	440fffff 	.word	0x440fffff
 800c43c:	7ff00000 	.word	0x7ff00000
 800c440:	3fdbffff 	.word	0x3fdbffff
 800c444:	3ff00000 	.word	0x3ff00000
 800c448:	3ff2ffff 	.word	0x3ff2ffff
 800c44c:	40038000 	.word	0x40038000
 800c450:	3ff80000 	.word	0x3ff80000
 800c454:	bff00000 	.word	0xbff00000
 800c458:	0800da58 	.word	0x0800da58
 800c45c:	0800da38 	.word	0x0800da38

0800c460 <fabs>:
 800c460:	ec51 0b10 	vmov	r0, r1, d0
 800c464:	ee10 2a10 	vmov	r2, s0
 800c468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c46c:	ec43 2b10 	vmov	d0, r2, r3
 800c470:	4770      	bx	lr
 800c472:	0000      	movs	r0, r0
 800c474:	0000      	movs	r0, r0
	...

0800c478 <scalbn>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	ec55 4b10 	vmov	r4, r5, d0
 800c47e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c482:	4606      	mov	r6, r0
 800c484:	462b      	mov	r3, r5
 800c486:	b999      	cbnz	r1, 800c4b0 <scalbn+0x38>
 800c488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c48c:	4323      	orrs	r3, r4
 800c48e:	d03f      	beq.n	800c510 <scalbn+0x98>
 800c490:	4b35      	ldr	r3, [pc, #212]	; (800c568 <scalbn+0xf0>)
 800c492:	4629      	mov	r1, r5
 800c494:	ee10 0a10 	vmov	r0, s0
 800c498:	2200      	movs	r2, #0
 800c49a:	f7f4 f8d5 	bl	8000648 <__aeabi_dmul>
 800c49e:	4b33      	ldr	r3, [pc, #204]	; (800c56c <scalbn+0xf4>)
 800c4a0:	429e      	cmp	r6, r3
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	460d      	mov	r5, r1
 800c4a6:	da10      	bge.n	800c4ca <scalbn+0x52>
 800c4a8:	a327      	add	r3, pc, #156	; (adr r3, 800c548 <scalbn+0xd0>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	e01f      	b.n	800c4f0 <scalbn+0x78>
 800c4b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c4b4:	4291      	cmp	r1, r2
 800c4b6:	d10c      	bne.n	800c4d2 <scalbn+0x5a>
 800c4b8:	ee10 2a10 	vmov	r2, s0
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f3 ff0c 	bl	80002dc <__adddf3>
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	e022      	b.n	800c510 <scalbn+0x98>
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c4d0:	3936      	subs	r1, #54	; 0x36
 800c4d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c4d6:	4296      	cmp	r6, r2
 800c4d8:	dd0d      	ble.n	800c4f6 <scalbn+0x7e>
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	a11c      	add	r1, pc, #112	; (adr r1, 800c550 <scalbn+0xd8>)
 800c4de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4e2:	da02      	bge.n	800c4ea <scalbn+0x72>
 800c4e4:	a11c      	add	r1, pc, #112	; (adr r1, 800c558 <scalbn+0xe0>)
 800c4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ea:	a319      	add	r3, pc, #100	; (adr r3, 800c550 <scalbn+0xd8>)
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f7f4 f8aa 	bl	8000648 <__aeabi_dmul>
 800c4f4:	e7e6      	b.n	800c4c4 <scalbn+0x4c>
 800c4f6:	1872      	adds	r2, r6, r1
 800c4f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c4fc:	428a      	cmp	r2, r1
 800c4fe:	dcec      	bgt.n	800c4da <scalbn+0x62>
 800c500:	2a00      	cmp	r2, #0
 800c502:	dd08      	ble.n	800c516 <scalbn+0x9e>
 800c504:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c508:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c50c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c510:	ec45 4b10 	vmov	d0, r4, r5
 800c514:	bd70      	pop	{r4, r5, r6, pc}
 800c516:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c51a:	da08      	bge.n	800c52e <scalbn+0xb6>
 800c51c:	2d00      	cmp	r5, #0
 800c51e:	a10a      	add	r1, pc, #40	; (adr r1, 800c548 <scalbn+0xd0>)
 800c520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c524:	dac0      	bge.n	800c4a8 <scalbn+0x30>
 800c526:	a10e      	add	r1, pc, #56	; (adr r1, 800c560 <scalbn+0xe8>)
 800c528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c52c:	e7bc      	b.n	800c4a8 <scalbn+0x30>
 800c52e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c532:	3236      	adds	r2, #54	; 0x36
 800c534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c53c:	4620      	mov	r0, r4
 800c53e:	4b0c      	ldr	r3, [pc, #48]	; (800c570 <scalbn+0xf8>)
 800c540:	2200      	movs	r2, #0
 800c542:	e7d5      	b.n	800c4f0 <scalbn+0x78>
 800c544:	f3af 8000 	nop.w
 800c548:	c2f8f359 	.word	0xc2f8f359
 800c54c:	01a56e1f 	.word	0x01a56e1f
 800c550:	8800759c 	.word	0x8800759c
 800c554:	7e37e43c 	.word	0x7e37e43c
 800c558:	8800759c 	.word	0x8800759c
 800c55c:	fe37e43c 	.word	0xfe37e43c
 800c560:	c2f8f359 	.word	0xc2f8f359
 800c564:	81a56e1f 	.word	0x81a56e1f
 800c568:	43500000 	.word	0x43500000
 800c56c:	ffff3cb0 	.word	0xffff3cb0
 800c570:	3c900000 	.word	0x3c900000

0800c574 <with_errno>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	4604      	mov	r4, r0
 800c578:	460d      	mov	r5, r1
 800c57a:	4616      	mov	r6, r2
 800c57c:	f7fb face 	bl	8007b1c <__errno>
 800c580:	4629      	mov	r1, r5
 800c582:	6006      	str	r6, [r0, #0]
 800c584:	4620      	mov	r0, r4
 800c586:	bd70      	pop	{r4, r5, r6, pc}

0800c588 <xflow>:
 800c588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c58a:	4614      	mov	r4, r2
 800c58c:	461d      	mov	r5, r3
 800c58e:	b108      	cbz	r0, 800c594 <xflow+0xc>
 800c590:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c594:	e9cd 2300 	strd	r2, r3, [sp]
 800c598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c59c:	4620      	mov	r0, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f4 f852 	bl	8000648 <__aeabi_dmul>
 800c5a4:	2222      	movs	r2, #34	; 0x22
 800c5a6:	b003      	add	sp, #12
 800c5a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5ac:	f7ff bfe2 	b.w	800c574 <with_errno>

0800c5b0 <__math_uflow>:
 800c5b0:	b508      	push	{r3, lr}
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5b8:	f7ff ffe6 	bl	800c588 <xflow>
 800c5bc:	ec41 0b10 	vmov	d0, r0, r1
 800c5c0:	bd08      	pop	{r3, pc}

0800c5c2 <__math_oflow>:
 800c5c2:	b508      	push	{r3, lr}
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c5ca:	f7ff ffdd 	bl	800c588 <xflow>
 800c5ce:	ec41 0b10 	vmov	d0, r0, r1
 800c5d2:	bd08      	pop	{r3, pc}

0800c5d4 <_init>:
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d6:	bf00      	nop
 800c5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5da:	bc08      	pop	{r3}
 800c5dc:	469e      	mov	lr, r3
 800c5de:	4770      	bx	lr

0800c5e0 <_fini>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr
