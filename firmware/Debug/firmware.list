
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000438c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080045d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000068  0800463c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800463c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017092  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da9  00000000  00000000  0003716d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00039f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f07  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cf3  00000000  00000000  0003c197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c10  00000000  00000000  0005ce8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc67b  00000000  00000000  00074a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058ac  00000000  00000000  00141118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001469c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800454c 	.word	0x0800454c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800454c 	.word	0x0800454c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800051e:	1df9      	adds	r1, r7, #7
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	2201      	movs	r2, #1
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <__io_putchar+0x24>)
 8000528:	f002 fcdd 	bl	8002ee6 <HAL_UART_Transmit>
	return ch;
 800052c:	79fb      	ldrb	r3, [r7, #7]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000198 	.word	0x20000198

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fcd1 	bl	8000ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f816 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f99a 	bl	8000880 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800054c:	f000 f860 	bl	8000610 <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8000550:	f000 f96e 	bl	8000830 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000554:	f000 f8a2 	bl	800069c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000558:	f000 f8e0 	bl	800071c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f91c 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("HAL init done, proceeding ...\n");
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <main+0x34>)
 8000562:	f003 fc5d 	bl	8003e20 <puts>
  setup();
 8000566:	f000 fa02 	bl	800096e <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800056a:	f000 fa07 	bl	800097c <loop>
 800056e:	e7fc      	b.n	800056a <main+0x2e>
 8000570:	08004564 	.word	0x08004564

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	2238      	movs	r2, #56	; 0x38
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fd2c 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059a:	f001 fb85 	bl	8001ca8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800059e:	2322      	movs	r3, #34	; 0x22
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80005bc:	230c      	movs	r3, #12
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc1d 	bl	8001e10 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005dc:	f000 f9c2 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 ff21 	bl	8002440 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000604:	f000 f9ae 	bl	8000964 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <MX_FDCAN2_Init+0x88>)
 8000618:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800062e:	2200      	movs	r2, #0
 8000630:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800063a:	2200      	movs	r2, #0
 800063c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000640:	2210      	movs	r2, #16
 8000642:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000646:	2201      	movs	r2, #1
 8000648:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800064c:	2202      	movs	r2, #2
 800064e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000652:	2202      	movs	r2, #2
 8000654:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000658:	2201      	movs	r2, #1
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800065e:	2201      	movs	r2, #1
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000664:	2201      	movs	r2, #1
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800066a:	2201      	movs	r2, #1
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000676:	2200      	movs	r2, #0
 8000678:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_FDCAN2_Init+0x84>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_FDCAN2_Init+0x84>)
 8000682:	f000 fd85 	bl	8001190 <HAL_FDCAN_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800068c:	f000 f96a 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000084 	.word	0x20000084
 8000698:	40006800 	.word	0x40006800

0800069c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C2_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C2_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C2_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d8:	f001 f8b0 	bl	800183c <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f93f 	bl	8000964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ea:	f001 f936 	bl	800195a <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f936 	bl	8000964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C2_Init+0x74>)
 80006fc:	f001 f978 	bl	80019f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f92d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000e8 	.word	0x200000e8
 8000714:	40005800 	.word	0x40005800
 8000718:	2010091a 	.word	0x2010091a

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_SPI1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_SPI1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_SPI1_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI1_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_SPI1_Init+0x74>)
 800077c:	f002 fab8 	bl	8002cf0 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f8ed 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000134 	.word	0x20000134
 8000794:	40013000 	.word	0x40013000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_USART2_UART_Init+0x90>)
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <MX_USART2_UART_Init+0x94>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007e2:	f002 fb30 	bl	8002e46 <HAL_UART_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f8ba 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_USART2_UART_Init+0x90>)
 80007f4:	f003 f8f8 	bl	80039e8 <HAL_UARTEx_SetTxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f8b1 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x90>)
 8000806:	f003 f92d 	bl	8003a64 <HAL_UARTEx_SetRxFifoThreshold>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f000 f8a8 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_USART2_UART_Init+0x90>)
 8000816:	f003 f8ae 	bl	8003976 <HAL_UARTEx_DisableFifoMode>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f8a0 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000198 	.word	0x20000198
 800082c:	40004400 	.word	0x40004400

08000830 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USB_PCD_Init+0x48>)
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <MX_USB_PCD_Init+0x4c>)
 8000838:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_PCD_Init+0x48>)
 800083c:	2208      	movs	r2, #8
 800083e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_USB_PCD_Init+0x48>)
 8000842:	2202      	movs	r2, #2
 8000844:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_PCD_Init+0x48>)
 8000848:	2202      	movs	r2, #2
 800084a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_USB_PCD_Init+0x48>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_PCD_Init+0x48>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_USB_PCD_Init+0x48>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_PCD_Init+0x48>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_USB_PCD_Init+0x48>)
 8000866:	f001 f90f 	bl	8001a88 <HAL_PCD_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000870:	f000 f878 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000228 	.word	0x20000228
 800087c:	40005c00 	.word	0x40005c00

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_GPIO_Init+0xdc>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a30      	ldr	r2, [pc, #192]	; (800095c <MX_GPIO_Init+0xdc>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_GPIO_Init+0xdc>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_GPIO_Init+0xdc>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <MX_GPIO_Init+0xdc>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_GPIO_Init+0xdc>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f240 4111 	movw	r1, #1041	; 0x411
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 ff9c 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <MX_GPIO_Init+0xe0>)
 80008da:	f000 ff97 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_IMU_Pin CS_IMU_Pin CS_ADNS_Pin */
  GPIO_InitStruct.Pin = RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin;
 80008de:	f240 4311 	movw	r3, #1041	; 0x411
 80008e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f000 fe05 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ANDS_Pin */
  GPIO_InitStruct.Pin = INT_ANDS_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000908:	2301      	movs	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ANDS_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_GPIO_Init+0xe0>)
 8000914:	f000 fdf8 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 8000918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f000 fde9 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000936:	2310      	movs	r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0xe0>)
 800094e:	f000 fddb 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	48000400 	.word	0x48000400

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>

0800096e <setup>:
void setup(void){
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <loop>:

void loop(void){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009c2:	f001 fa15 	bl	8001df0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09e      	sub	sp, #120	; 0x78
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2250      	movs	r2, #80	; 0x50
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 faf3 	bl	8003fe0 <memset>
  if(hfdcan->Instance==FDCAN2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <HAL_FDCAN_MspInit+0xa8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d137      	bne.n	8000a74 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 ff2f 	bl	8002878 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a20:	f7ff ffa0 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_FDCAN_MspInit+0xac>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <HAL_FDCAN_MspInit+0xac>)
 8000a2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_FDCAN_MspInit+0xac>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_FDCAN_MspInit+0xac>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_FDCAN_MspInit+0xac>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_FDCAN_MspInit+0xac>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000a64:	2309      	movs	r3, #9
 8000a66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <HAL_FDCAN_MspInit+0xb0>)
 8000a70:	f000 fd4a 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3778      	adds	r7, #120	; 0x78
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40006800 	.word	0x40006800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09e      	sub	sp, #120	; 0x78
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2250      	movs	r2, #80	; 0x50
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fa99 	bl	8003fe0 <memset>
  if(hi2c->Instance==I2C2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_I2C_MspInit+0xa8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d137      	bne.n	8000b28 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fed7 	bl	8002878 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff ff48 	bl	8000964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_I2C_MspInit+0xac>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <HAL_I2C_MspInit+0xac>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_I2C_MspInit+0xac>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	2312      	movs	r3, #18
 8000af4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afe:	2304      	movs	r3, #4
 8000b00:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f000 fcfc 	bl	8001508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_I2C_MspInit+0xac>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_I2C_MspInit+0xac>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_I2C_MspInit+0xac>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3778      	adds	r7, #120	; 0x78
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_SPI_MspInit+0x7c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d128      	bne.n	8000bac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_SPI_MspInit+0x80>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_SPI_MspInit+0x80>)
 8000b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_SPI_MspInit+0x80>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_SPI_MspInit+0x80>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_SPI_MspInit+0x80>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_SPI_MspInit+0x80>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b8a:	23e0      	movs	r3, #224	; 0xe0
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f000 fcae 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09e      	sub	sp, #120	; 0x78
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2250      	movs	r2, #80	; 0x50
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 f9ff 	bl	8003fe0 <memset>
  if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_UART_MspInit+0xa8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d136      	bne.n	8000c5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fe3d 	bl	8002878 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c04:	f7ff feae 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0xac>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <HAL_UART_MspInit+0xac>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	6593      	str	r3, [r2, #88]	; 0x58
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0xac>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0xac>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_UART_MspInit+0xac>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_UART_MspInit+0xac>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f000 fc57 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3778      	adds	r7, #120	; 0x78
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b098      	sub	sp, #96	; 0x60
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2250      	movs	r2, #80	; 0x50
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 f9af 	bl	8003fe0 <memset>
  if(hpcd->Instance==USB)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_PCD_MspInit+0x60>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d11a      	bne.n	8000cc2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c92:	2300      	movs	r3, #0
 8000c94:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fdec 	bl	8002878 <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000ca6:	f7ff fe5d 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_PCD_MspInit+0x64>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_PCD_MspInit+0x64>)
 8000cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_PCD_MspInit+0x64>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3760      	adds	r7, #96	; 0x60
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40005c00 	.word	0x40005c00
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f934 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
  }

  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbc9 	bl	8000514 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf1      	blt.n	8000d74 <_write+0x12>
  }
  return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_close>:

int _close(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_isatty>:

int _isatty(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f003 f922 	bl	800407c <__errno>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2001c000 	.word	0x2001c000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	2000051c 	.word	0x2000051c
 8000e6c:	20000670 	.word	0x20000670

08000e70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ee0 <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ebe:	f7ff ffd7 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f003 f8e1 	bl	8004088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec6:	f7ff fb39 	bl	800053c <main>

08000eca <LoopForever>:

LoopForever:
    b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   r0, =_estack
 8000ecc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ed8:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 8000edc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ee0:	20000670 	.word	0x20000670

08000ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_2_IRQHandler>

08000ee6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f91b 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f80e 	bl	8000f18 <HAL_InitTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	e001      	b.n	8000f0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f08:	f7ff fd40 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_InitTick+0x68>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d022      	beq.n	8000f72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_InitTick+0x6c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_InitTick+0x68>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f918 	bl	8001176 <HAL_SYSTICK_Config>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10f      	bne.n	8000f6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	d809      	bhi.n	8000f66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f52:	2200      	movs	r2, #0
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	f000 f8f2 	bl	8001142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0x70>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	e007      	b.n	8000f76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e004      	b.n	8000f76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e001      	b.n	8000f76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x20>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <HAL_IncTick+0x1c>)
 8000f9c:	6013      	str	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000520 	.word	0x20000520
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000520 	.word	0x20000520

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff90 	bl	8001080 <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5f 	bl	800102c <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb2 	bl	80010e8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e147      	b.n	8001432 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fc0c 	bl	80009d4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0210 	bic.w	r2, r2, #16
 80011ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff fef0 	bl	8000fb0 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011d2:	e012      	b.n	80011fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011d4:	f7ff feec 	bl	8000fb0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90b      	bls.n	80011fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e11b      	b.n	8001432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b08      	cmp	r3, #8
 8001206:	d0e5      	beq.n	80011d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff feca 	bl	8000fb0 <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800121e:	e012      	b.n	8001246 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001220:	f7ff fec6 	bl	8000fb0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d90b      	bls.n	8001246 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0f5      	b.n	8001432 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0e5      	beq.n	8001220 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0202 	orr.w	r2, r2, #2
 8001262:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a74      	ldr	r2, [pc, #464]	; (800143c <HAL_FDCAN_Init+0x2ac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d103      	bne.n	8001276 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800126e:	4a74      	ldr	r2, [pc, #464]	; (8001440 <HAL_FDCAN_Init+0x2b0>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7c1b      	ldrb	r3, [r3, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800128c:	619a      	str	r2, [r3, #24]
 800128e:	e007      	b.n	80012a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800129e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7c5b      	ldrb	r3, [r3, #17]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	e007      	b.n	80012ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7c9b      	ldrb	r3, [r3, #18]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d108      	bne.n	80012e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012e0:	619a      	str	r2, [r3, #24]
 80012e2:	e007      	b.n	80012f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001318:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0210 	bic.w	r2, r2, #16
 8001328:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d108      	bne.n	8001344 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699a      	ldr	r2, [r3, #24]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0204 	orr.w	r2, r2, #4
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	e02c      	b.n	800139e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d028      	beq.n	800139e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d01c      	beq.n	800138e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001362:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0210 	orr.w	r2, r2, #16
 8001372:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d110      	bne.n	800139e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0220 	orr.w	r2, r2, #32
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	e007      	b.n	800139e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	3b01      	subs	r3, #1
 80013c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80013d2:	d115      	bne.n	8001400 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	3b01      	subs	r3, #1
 80013e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	3b01      	subs	r3, #1
 80013ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f814 	bl	8001444 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40006400 	.word	0x40006400
 8001440:	40006500 	.word	0x40006500

08001444 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800144e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d103      	bne.n	8001462 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001460:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001470:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001496:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	061a      	lsls	r2, r3, #24
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e005      	b.n	80014e4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d3f3      	bcc.n	80014d8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	4000a400 	.word	0x4000a400
 8001504:	40006800 	.word	0x40006800

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001516:	e15a      	b.n	80017ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 814c 	beq.w	80017c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d005      	beq.n	8001548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001544:	2b02      	cmp	r3, #2
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 0201 	and.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d017      	beq.n	80015e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d123      	bne.n	800163a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0203 	and.w	r2, r3, #3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167c:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_GPIO_Init+0x2e4>)
 800167e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001680:	4a5a      	ldr	r2, [pc, #360]	; (80017ec <HAL_GPIO_Init+0x2e4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6613      	str	r3, [r2, #96]	; 0x60
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_GPIO_Init+0x2e4>)
 800168a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001694:	4a56      	ldr	r2, [pc, #344]	; (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016be:	d01f      	beq.n	8001700 <HAL_GPIO_Init+0x1f8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x2ec>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d019      	beq.n	80016fc <HAL_GPIO_Init+0x1f4>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <HAL_GPIO_Init+0x2f0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_Init+0x1f0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x2f4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a49      	ldr	r2, [pc, #292]	; (8001800 <HAL_GPIO_Init+0x2f8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1e8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a48      	ldr	r2, [pc, #288]	; (8001804 <HAL_GPIO_Init+0x2fc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1e4>
 80016e8:	2305      	movs	r3, #5
 80016ea:	e00a      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016ec:	2306      	movs	r3, #6
 80016ee:	e008      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001712:	4937      	ldr	r1, [pc, #220]	; (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_GPIO_Init+0x300>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001744:	4a30      	ldr	r2, [pc, #192]	; (8001808 <HAL_GPIO_Init+0x300>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_GPIO_Init+0x300>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800176e:	4a26      	ldr	r2, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x300>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_GPIO_Init+0x300>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_GPIO_Init+0x300>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_GPIO_Init+0x300>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c2:	4a11      	ldr	r2, [pc, #68]	; (8001808 <HAL_GPIO_Init+0x300>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ae9d 	bne.w	8001518 <HAL_GPIO_Init+0x10>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	48000400 	.word	0x48000400
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000c00 	.word	0x48000c00
 8001800:	48001000 	.word	0x48001000
 8001804:	48001400 	.word	0x48001400
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001828:	e002      	b.n	8001830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e081      	b.n	8001952 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f910 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800189c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	e006      	b.n	80018c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d104      	bne.n	80018d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69d9      	ldr	r1, [r3, #28]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b20      	cmp	r3, #32
 800196e:	d138      	bne.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800197a:	2302      	movs	r3, #2
 800197c:	e032      	b.n	80019e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2224      	movs	r2, #36	; 0x24
 800198a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d139      	bne.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e033      	b.n	8001a7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af06      	add	r7, sp, #24
 8001a8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0d7      	b.n	8001c4a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff f8dc 	bl	8000c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 f85b 	bl	8003b7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e04c      	b.n	8001b66 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3301      	adds	r3, #1
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	b298      	uxth	r0, r3
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3336      	adds	r3, #54	; 0x36
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3303      	adds	r3, #3
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	3338      	adds	r3, #56	; 0x38
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	333c      	adds	r3, #60	; 0x3c
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3340      	adds	r3, #64	; 0x40
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	3301      	adds	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3ad      	bcc.n	8001acc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e044      	b.n	8001c00 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3b5      	bcc.n	8001b76 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	687e      	ldr	r6, [r7, #4]
 8001c12:	466d      	mov	r5, sp
 8001c14:	f106 0410 	add.w	r4, r6, #16
 8001c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	602b      	str	r3, [r5, #0]
 8001c20:	1d33      	adds	r3, r6, #4
 8001c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c24:	6838      	ldr	r0, [r7, #0]
 8001c26:	f001 ffc4 	bl	8003bb2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f805 	bl	8001c52 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d141      	bne.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d131      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2232      	movs	r2, #50	; 0x32
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a3f      	ldr	r2, [pc, #252]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfa:	e002      	b.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d102      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f2      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d158      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e057      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d38:	e04d      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d40:	d141      	bne.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4e:	d131      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d56:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2232      	movs	r2, #50	; 0x32
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9b      	lsrs	r3, r3, #18
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d86:	e002      	b.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d102      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f2      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dae:	d112      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e011      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dc4:	e007      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40007000 	.word	0x40007000
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfe:	6093      	str	r3, [r2, #8]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e306      	b.n	8002430 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2e:	4b97      	ldr	r3, [pc, #604]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e38:	4b94      	ldr	r3, [pc, #592]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3e>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b8d      	ldr	r3, [pc, #564]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e2e1      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b85      	ldr	r3, [pc, #532]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a84      	ldr	r2, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7e      	ldr	r2, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b7c      	ldr	r3, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7b      	ldr	r2, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a77      	ldr	r2, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a74      	ldr	r2, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f872 	bl	8000fb0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f86e 	bl	8000fb0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e2a6      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee2:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f85e 	bl	8000fb0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f85a 	bl	8000fb0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e292      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0a:	4b60      	ldr	r3, [pc, #384]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b56      	ldr	r3, [pc, #344]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x136>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d002      	beq.n	8001f4c <HAL_RCC_OscConfig+0x13c>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11f      	bne.n	8001f8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x154>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e265      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	4946      	ldr	r1, [pc, #280]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe ffcb 	bl	8000f18 <HAL_InitTick>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d043      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e251      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f806 	bl	8000fb0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f802 	bl	8000fb0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e23a      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	061b      	lsls	r3, r3, #24
 8001fd4:	492d      	ldr	r1, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
 8001fda:	e01a      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ffe2 	bl	8000fb0 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7fe ffde 	bl	8000fb0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e216      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1e0>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d041      	beq.n	80020a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01c      	beq.n	8002060 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7fe ffbb 	bl	8000fb0 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7fe ffb7 	bl	8000fb0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1ef      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ef      	beq.n	800203e <HAL_RCC_OscConfig+0x22e>
 800205e:	e020      	b.n	80020a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x27c>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe ff9e 	bl	8000fb0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002076:	e00d      	b.n	8002094 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe ff9a 	bl	8000fb0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d906      	bls.n	8002094 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1d2      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ea      	bne.n	8002078 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80a6 	beq.w	80021fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b4:	4b84      	ldr	r3, [pc, #528]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2b4>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x2b6>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b7f      	ldr	r3, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a7e      	ldr	r2, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b7c      	ldr	r3, [pc, #496]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e6:	4b79      	ldr	r3, [pc, #484]	; (80022cc <HAL_RCC_OscConfig+0x4bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f2:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_OscConfig+0x4bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a75      	ldr	r2, [pc, #468]	; (80022cc <HAL_RCC_OscConfig+0x4bc>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff57 	bl	8000fb0 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7fe ff53 	bl	8000fb0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e18b      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002118:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <HAL_RCC_OscConfig+0x4bc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_RCC_OscConfig+0x32e>
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213c:	e024      	b.n	8002188 <HAL_RCC_OscConfig+0x378>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d110      	bne.n	8002168 <HAL_RCC_OscConfig+0x358>
 8002146:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	4a5e      	ldr	r2, [pc, #376]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	4a5a      	ldr	r2, [pc, #360]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002166:	e00f      	b.n	8002188 <HAL_RCC_OscConfig+0x378>
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d016      	beq.n	80021be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe ff0e 	bl	8000fb0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe ff0a 	bl	8000fb0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e140      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ed      	beq.n	8002198 <HAL_RCC_OscConfig+0x388>
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe fef7 	bl	8000fb0 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fef3 	bl	8000fb0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e129      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ed      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ea:	7ffb      	ldrb	r3, [r7, #31]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03c      	beq.n	8002282 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01c      	beq.n	800224a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002216:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe fec6 	bl	8000fb0 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002228:	f7fe fec2 	bl	8000fb0 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0fa      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800223c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ef      	beq.n	8002228 <HAL_RCC_OscConfig+0x418>
 8002248:	e01b      	b.n	8002282 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe fea9 	bl	8000fb0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002262:	f7fe fea5 	bl	8000fb0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0dd      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 8002276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ef      	bne.n	8002262 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80d1 	beq.w	800242e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b0c      	cmp	r3, #12
 8002296:	f000 808b 	beq.w	80023b0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d15e      	bne.n	8002360 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe7f 	bl	8000fb0 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b4:	e00c      	b.n	80022d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fe7b 	bl	8000fb0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d905      	bls.n	80022d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0b3      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ec      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b56      	ldr	r3, [pc, #344]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	4b56      	ldr	r3, [pc, #344]	; (800243c <HAL_RCC_OscConfig+0x62c>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6a11      	ldr	r1, [r2, #32]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ec:	3a01      	subs	r2, #1
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	4311      	orrs	r1, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022f6:	0212      	lsls	r2, r2, #8
 80022f8:	4311      	orrs	r1, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022fe:	0852      	lsrs	r2, r2, #1
 8002300:	3a01      	subs	r2, #1
 8002302:	0552      	lsls	r2, r2, #21
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800230a:	0852      	lsrs	r2, r2, #1
 800230c:	3a01      	subs	r2, #1
 800230e:	0652      	lsls	r2, r2, #25
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002316:	06d2      	lsls	r2, r2, #27
 8002318:	430a      	orrs	r2, r1
 800231a:	4947      	ldr	r1, [pc, #284]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 800231c:	4313      	orrs	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002320:	4b45      	ldr	r3, [pc, #276]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a44      	ldr	r2, [pc, #272]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fe3a 	bl	8000fb0 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fe36 	bl	8000fb0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e06e      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x530>
 800235e:	e066      	b.n	800242e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800236a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a31      	ldr	r2, [pc, #196]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 800237e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fe12 	bl	8000fb0 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fe0e 	bl	8000fb0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e046      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x580>
 80023ae:	e03e      	b.n	800242e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e039      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_OscConfig+0x628>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d12c      	bne.n	800242a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	3b01      	subs	r3, #1
 80023dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d123      	bne.n	800242a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d11b      	bne.n	800242a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d113      	bne.n	800242a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d109      	bne.n	800242a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	019f800c 	.word	0x019f800c

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e11e      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d910      	bls.n	8002488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b8e      	ldr	r3, [pc, #568]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	498c      	ldr	r1, [pc, #560]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b8a      	ldr	r3, [pc, #552]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e106      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d073      	beq.n	800257c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d129      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249c:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0f4      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024ac:	f000 f99e 	bl	80027ec <RCC_GetSysClockFreqFromPLLSource>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4a7c      	ldr	r2, [pc, #496]	; (80026a8 <HAL_RCC_ClockConfig+0x268>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d93f      	bls.n	800253a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ba:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d033      	beq.n	800253a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d12f      	bne.n	800253a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024da:	4b72      	ldr	r3, [pc, #456]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e2:	4a70      	ldr	r2, [pc, #448]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e024      	b.n	800253a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0c6      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0be      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002518:	f000 f8ce 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 800251c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_RCC_ClockConfig+0x268>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d909      	bls.n	800253a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002526:	4b5f      	ldr	r3, [pc, #380]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800252e:	4a5d      	ldr	r2, [pc, #372]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4957      	ldr	r1, [pc, #348]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fd30 	bl	8000fb0 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fd2c 	bl	8000fb0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e095      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002594:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a42      	ldr	r2, [pc, #264]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800259a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800259e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025ac:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4936      	ldr	r1, [pc, #216]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a32      	ldr	r2, [pc, #200]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 80025dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d21d      	bcs.n	800262c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 020f 	bic.w	r2, r3, #15
 80025f8:	4929      	ldr	r1, [pc, #164]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002600:	f7fe fcd6 	bl	8000fb0 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fcd2 	bl	8000fb0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e03b      	b.n	8002696 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_ClockConfig+0x260>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d1ed      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4917      	ldr	r1, [pc, #92]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490f      	ldr	r1, [pc, #60]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800266a:	f000 f825 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_RCC_ClockConfig+0x264>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490c      	ldr	r1, [pc, #48]	; (80026ac <HAL_RCC_ClockConfig+0x26c>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x270>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x274>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fc42 	bl	8000f18 <HAL_InitTick>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	04c4b400 	.word	0x04c4b400
 80026ac:	08004584 	.word	0x08004584
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	e047      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026dc:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e03e      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d136      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800270c:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc0>)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002716:	68d2      	ldr	r2, [r2, #12]
 8002718:	0a12      	lsrs	r2, r2, #8
 800271a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e00c      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002726:	4a13      	ldr	r2, [pc, #76]	; (8002774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	0a12      	lsrs	r2, r2, #8
 8002734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
      break;
 800273e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0e5b      	lsrs	r3, r3, #25
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	3301      	adds	r3, #1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e001      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002760:	693b      	ldr	r3, [r7, #16]
}
 8002762:	4618      	mov	r0, r3
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	00f42400 	.word	0x00f42400
 8002778:	007a1200 	.word	0x007a1200

0800277c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4904      	ldr	r1, [pc, #16]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08004594 	.word	0x08004594

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027c4:	f7ff ffda 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0adb      	lsrs	r3, r3, #11
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4904      	ldr	r1, [pc, #16]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08004594 	.word	0x08004594

080027ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d10c      	bne.n	800282a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002810:	4a17      	ldr	r2, [pc, #92]	; (8002870 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800281a:	68d2      	ldr	r2, [r2, #12]
 800281c:	0a12      	lsrs	r2, r2, #8
 800281e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
    break;
 8002828:	e00c      	b.n	8002844 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800282a:	4a12      	ldr	r2, [pc, #72]	; (8002874 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	0a12      	lsrs	r2, r2, #8
 8002838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800283c:	fb02 f303 	mul.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    break;
 8002842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0e5b      	lsrs	r3, r3, #25
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800285e:	687b      	ldr	r3, [r7, #4]
}
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	00f42400 	.word	0x00f42400

08002878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002880:	2300      	movs	r3, #0
 8002882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002884:	2300      	movs	r3, #0
 8002886:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8098 	beq.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6593      	str	r3, [r2, #88]	; 0x58
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a39      	ldr	r2, [pc, #228]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fb6f 	bl	8000fb0 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028d4:	e009      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d6:	f7fe fb6b 	bl	8000fb0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d902      	bls.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	74fb      	strb	r3, [r7, #19]
        break;
 80028e8:	e005      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ef      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d159      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002906:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01e      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	d019      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002924:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe fb2b 	bl	8000fb0 <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295c:	e00b      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fb27 	bl	8000fb0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d902      	bls.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	74fb      	strb	r3, [r7, #19]
            break;
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ec      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10b      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	4903      	ldr	r1, [pc, #12]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029a0:	e008      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	74bb      	strb	r3, [r7, #18]
 80029a6:	e005      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b4:	7c7b      	ldrb	r3, [r7, #17]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4ba7      	ldr	r3, [pc, #668]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	4aa6      	ldr	r2, [pc, #664]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d2:	4ba1      	ldr	r3, [pc, #644]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f023 0203 	bic.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	499d      	ldr	r1, [pc, #628]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f4:	4b98      	ldr	r3, [pc, #608]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 020c 	bic.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4995      	ldr	r1, [pc, #596]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a16:	4b90      	ldr	r3, [pc, #576]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	498c      	ldr	r1, [pc, #560]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a38:	4b87      	ldr	r3, [pc, #540]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	4984      	ldr	r1, [pc, #528]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a5a:	4b7f      	ldr	r3, [pc, #508]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	497b      	ldr	r1, [pc, #492]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a7c:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	4973      	ldr	r1, [pc, #460]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a9e:	4b6e      	ldr	r3, [pc, #440]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	496a      	ldr	r1, [pc, #424]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac0:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4962      	ldr	r1, [pc, #392]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	4959      	ldr	r1, [pc, #356]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b04:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	4951      	ldr	r1, [pc, #324]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b26:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	4948      	ldr	r1, [pc, #288]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b44:	d105      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b46:	4b44      	ldr	r3, [pc, #272]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a43      	ldr	r2, [pc, #268]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d015      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	493a      	ldr	r1, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b7e:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b88:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	492c      	ldr	r1, [pc, #176]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	491e      	ldr	r1, [pc, #120]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bec:	d105      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	4910      	ldr	r1, [pc, #64]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c24:	d105      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c30:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d018      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4902      	ldr	r1, [pc, #8]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	e001      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c62:	d105      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d015      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4918      	ldr	r1, [pc, #96]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ce0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e09d      	b.n	8002e3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d108      	bne.n	8002d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d12:	d009      	beq.n	8002d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
 8002d1a:	e005      	b.n	8002d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fd fef8 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d68:	d902      	bls.n	8002d70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e002      	b.n	8002d76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d7e:	d007      	beq.n	8002d90 <HAL_SPI_Init+0xa0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	ea42 0103 	orr.w	r1, r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	f003 0204 	and.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e0c:	ea42 0103 	orr.w	r1, r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e042      	b.n	8002ede <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fea6 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f8c3 	bl	8003014 <UART_SetConfig>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e022      	b.n	8002ede <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fbb3 	bl	800360c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0201 	orr.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fc3a 	bl	8003750 <UART_CheckIdleState>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b08a      	sub	sp, #40	; 0x28
 8002eea:	af02      	add	r7, sp, #8
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 8083 	bne.w	8003008 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_UART_Transmit+0x28>
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07b      	b.n	800300a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Transmit+0x3a>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e074      	b.n	800300a <HAL_UART_Transmit+0x124>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2221      	movs	r2, #33	; 0x21
 8002f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f38:	f7fe f83a 	bl	8000fb0 <HAL_GetTick>
 8002f3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d108      	bne.n	8002f6a <HAL_UART_Transmit+0x84>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	e003      	b.n	8002f72 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002f7a:	e02c      	b.n	8002fd6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fc2d 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e039      	b.n	800300a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e007      	b.n	8002fc4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1cc      	bne.n	8002f7c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fbfa 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b08c      	sub	sp, #48	; 0x30
 800301a:	af00      	add	r7, sp, #0
 800301c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	431a      	orrs	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	431a      	orrs	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4313      	orrs	r3, r2
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4baa      	ldr	r3, [pc, #680]	; (80032ec <UART_SetConfig+0x2d8>)
 8003044:	4013      	ands	r3, r2
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800304c:	430b      	orrs	r3, r1
 800304e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a9f      	ldr	r2, [pc, #636]	; (80032f0 <UART_SetConfig+0x2dc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307c:	4313      	orrs	r3, r2
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800308a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003094:	430b      	orrs	r3, r1
 8003096:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f023 010f 	bic.w	r1, r3, #15
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a90      	ldr	r2, [pc, #576]	; (80032f4 <UART_SetConfig+0x2e0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d125      	bne.n	8003104 <UART_SetConfig+0xf0>
 80030b8:	4b8f      	ldr	r3, [pc, #572]	; (80032f8 <UART_SetConfig+0x2e4>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d81a      	bhi.n	80030fc <UART_SetConfig+0xe8>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0xb8>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f5 	.word	0x080030f5
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e2:	e116      	b.n	8003312 <UART_SetConfig+0x2fe>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ea:	e112      	b.n	8003312 <UART_SetConfig+0x2fe>
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f2:	e10e      	b.n	8003312 <UART_SetConfig+0x2fe>
 80030f4:	2308      	movs	r3, #8
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030fa:	e10a      	b.n	8003312 <UART_SetConfig+0x2fe>
 80030fc:	2310      	movs	r3, #16
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003102:	e106      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7c      	ldr	r2, [pc, #496]	; (80032fc <UART_SetConfig+0x2e8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d138      	bne.n	8003180 <UART_SetConfig+0x16c>
 800310e:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <UART_SetConfig+0x2e4>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d82d      	bhi.n	8003178 <UART_SetConfig+0x164>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0x110>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003159 	.word	0x08003159
 8003128:	08003179 	.word	0x08003179
 800312c:	08003179 	.word	0x08003179
 8003130:	08003179 	.word	0x08003179
 8003134:	08003169 	.word	0x08003169
 8003138:	08003179 	.word	0x08003179
 800313c:	08003179 	.word	0x08003179
 8003140:	08003179 	.word	0x08003179
 8003144:	08003161 	.word	0x08003161
 8003148:	08003179 	.word	0x08003179
 800314c:	08003179 	.word	0x08003179
 8003150:	08003179 	.word	0x08003179
 8003154:	08003171 	.word	0x08003171
 8003158:	2300      	movs	r3, #0
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315e:	e0d8      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003166:	e0d4      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316e:	e0d0      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003176:	e0cc      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e0c8      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5e      	ldr	r2, [pc, #376]	; (8003300 <UART_SetConfig+0x2ec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d125      	bne.n	80031d6 <UART_SetConfig+0x1c2>
 800318a:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <UART_SetConfig+0x2e4>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d016      	beq.n	80031c6 <UART_SetConfig+0x1b2>
 8003198:	2b30      	cmp	r3, #48	; 0x30
 800319a:	d818      	bhi.n	80031ce <UART_SetConfig+0x1ba>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d00a      	beq.n	80031b6 <UART_SetConfig+0x1a2>
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d814      	bhi.n	80031ce <UART_SetConfig+0x1ba>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <UART_SetConfig+0x19a>
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d008      	beq.n	80031be <UART_SetConfig+0x1aa>
 80031ac:	e00f      	b.n	80031ce <UART_SetConfig+0x1ba>
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b4:	e0ad      	b.n	8003312 <UART_SetConfig+0x2fe>
 80031b6:	2302      	movs	r3, #2
 80031b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031bc:	e0a9      	b.n	8003312 <UART_SetConfig+0x2fe>
 80031be:	2304      	movs	r3, #4
 80031c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c4:	e0a5      	b.n	8003312 <UART_SetConfig+0x2fe>
 80031c6:	2308      	movs	r3, #8
 80031c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031cc:	e0a1      	b.n	8003312 <UART_SetConfig+0x2fe>
 80031ce:	2310      	movs	r3, #16
 80031d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d4:	e09d      	b.n	8003312 <UART_SetConfig+0x2fe>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <UART_SetConfig+0x2f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d125      	bne.n	800322c <UART_SetConfig+0x218>
 80031e0:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <UART_SetConfig+0x2e4>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d016      	beq.n	800321c <UART_SetConfig+0x208>
 80031ee:	2bc0      	cmp	r3, #192	; 0xc0
 80031f0:	d818      	bhi.n	8003224 <UART_SetConfig+0x210>
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d00a      	beq.n	800320c <UART_SetConfig+0x1f8>
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d814      	bhi.n	8003224 <UART_SetConfig+0x210>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <UART_SetConfig+0x1f0>
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d008      	beq.n	8003214 <UART_SetConfig+0x200>
 8003202:	e00f      	b.n	8003224 <UART_SetConfig+0x210>
 8003204:	2300      	movs	r3, #0
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320a:	e082      	b.n	8003312 <UART_SetConfig+0x2fe>
 800320c:	2302      	movs	r3, #2
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003212:	e07e      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003214:	2304      	movs	r3, #4
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800321a:	e07a      	b.n	8003312 <UART_SetConfig+0x2fe>
 800321c:	2308      	movs	r3, #8
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003222:	e076      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003224:	2310      	movs	r3, #16
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322a:	e072      	b.n	8003312 <UART_SetConfig+0x2fe>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a35      	ldr	r2, [pc, #212]	; (8003308 <UART_SetConfig+0x2f4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12a      	bne.n	800328c <UART_SetConfig+0x278>
 8003236:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <UART_SetConfig+0x2e4>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003244:	d01a      	beq.n	800327c <UART_SetConfig+0x268>
 8003246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324a:	d81b      	bhi.n	8003284 <UART_SetConfig+0x270>
 800324c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003250:	d00c      	beq.n	800326c <UART_SetConfig+0x258>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003256:	d815      	bhi.n	8003284 <UART_SetConfig+0x270>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <UART_SetConfig+0x250>
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d008      	beq.n	8003274 <UART_SetConfig+0x260>
 8003262:	e00f      	b.n	8003284 <UART_SetConfig+0x270>
 8003264:	2300      	movs	r3, #0
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326a:	e052      	b.n	8003312 <UART_SetConfig+0x2fe>
 800326c:	2302      	movs	r3, #2
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003272:	e04e      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003274:	2304      	movs	r3, #4
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800327a:	e04a      	b.n	8003312 <UART_SetConfig+0x2fe>
 800327c:	2308      	movs	r3, #8
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003282:	e046      	b.n	8003312 <UART_SetConfig+0x2fe>
 8003284:	2310      	movs	r3, #16
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800328a:	e042      	b.n	8003312 <UART_SetConfig+0x2fe>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <UART_SetConfig+0x2dc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d13a      	bne.n	800330c <UART_SetConfig+0x2f8>
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <UART_SetConfig+0x2e4>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a4:	d01a      	beq.n	80032dc <UART_SetConfig+0x2c8>
 80032a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032aa:	d81b      	bhi.n	80032e4 <UART_SetConfig+0x2d0>
 80032ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b0:	d00c      	beq.n	80032cc <UART_SetConfig+0x2b8>
 80032b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b6:	d815      	bhi.n	80032e4 <UART_SetConfig+0x2d0>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <UART_SetConfig+0x2b0>
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d008      	beq.n	80032d4 <UART_SetConfig+0x2c0>
 80032c2:	e00f      	b.n	80032e4 <UART_SetConfig+0x2d0>
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ca:	e022      	b.n	8003312 <UART_SetConfig+0x2fe>
 80032cc:	2302      	movs	r3, #2
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032d2:	e01e      	b.n	8003312 <UART_SetConfig+0x2fe>
 80032d4:	2304      	movs	r3, #4
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032da:	e01a      	b.n	8003312 <UART_SetConfig+0x2fe>
 80032dc:	2308      	movs	r3, #8
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032e2:	e016      	b.n	8003312 <UART_SetConfig+0x2fe>
 80032e4:	2310      	movs	r3, #16
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ea:	e012      	b.n	8003312 <UART_SetConfig+0x2fe>
 80032ec:	cfff69f3 	.word	0xcfff69f3
 80032f0:	40008000 	.word	0x40008000
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40004400 	.word	0x40004400
 8003300:	40004800 	.word	0x40004800
 8003304:	40004c00 	.word	0x40004c00
 8003308:	40005000 	.word	0x40005000
 800330c:	2310      	movs	r3, #16
 800330e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4aae      	ldr	r2, [pc, #696]	; (80035d0 <UART_SetConfig+0x5bc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	f040 8097 	bne.w	800344c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800331e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003322:	2b08      	cmp	r3, #8
 8003324:	d823      	bhi.n	800336e <UART_SetConfig+0x35a>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x318>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	0800336f 	.word	0x0800336f
 8003334:	08003359 	.word	0x08003359
 8003338:	0800336f 	.word	0x0800336f
 800333c:	0800335f 	.word	0x0800335f
 8003340:	0800336f 	.word	0x0800336f
 8003344:	0800336f 	.word	0x0800336f
 8003348:	0800336f 	.word	0x0800336f
 800334c:	08003367 	.word	0x08003367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7ff fa20 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003356:	e010      	b.n	800337a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003358:	4b9e      	ldr	r3, [pc, #632]	; (80035d4 <UART_SetConfig+0x5c0>)
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800335c:	e00d      	b.n	800337a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335e:	f7ff f9ab 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003364:	e009      	b.n	800337a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800336c:	e005      	b.n	800337a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8130 	beq.w	80035e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	4a94      	ldr	r2, [pc, #592]	; (80035d8 <UART_SetConfig+0x5c4>)
 8003388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800338c:	461a      	mov	r2, r3
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	fbb3 f3f2 	udiv	r3, r3, r2
 8003394:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d305      	bcc.n	80033b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d903      	bls.n	80033ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033b8:	e113      	b.n	80035e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	2200      	movs	r2, #0
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	60fa      	str	r2, [r7, #12]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	4a84      	ldr	r2, [pc, #528]	; (80035d8 <UART_SetConfig+0x5c4>)
 80033c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2200      	movs	r2, #0
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033dc:	f7fc ff1c 	bl	8000218 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	020b      	lsls	r3, r1, #8
 80033f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033f6:	0202      	lsls	r2, r0, #8
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	6849      	ldr	r1, [r1, #4]
 80033fc:	0849      	lsrs	r1, r1, #1
 80033fe:	2000      	movs	r0, #0
 8003400:	460c      	mov	r4, r1
 8003402:	4605      	mov	r5, r0
 8003404:	eb12 0804 	adds.w	r8, r2, r4
 8003408:	eb43 0905 	adc.w	r9, r3, r5
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	469a      	mov	sl, r3
 8003414:	4693      	mov	fp, r2
 8003416:	4652      	mov	r2, sl
 8003418:	465b      	mov	r3, fp
 800341a:	4640      	mov	r0, r8
 800341c:	4649      	mov	r1, r9
 800341e:	f7fc fefb 	bl	8000218 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4613      	mov	r3, r2
 8003428:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003430:	d308      	bcc.n	8003444 <UART_SetConfig+0x430>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003438:	d204      	bcs.n	8003444 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a3a      	ldr	r2, [r7, #32]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e0ce      	b.n	80035e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800344a:	e0ca      	b.n	80035e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003454:	d166      	bne.n	8003524 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800345a:	2b08      	cmp	r3, #8
 800345c:	d827      	bhi.n	80034ae <UART_SetConfig+0x49a>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <UART_SetConfig+0x450>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff f984 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 800348c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800348e:	e014      	b.n	80034ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7ff f996 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8003494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003496:	e010      	b.n	80034ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <UART_SetConfig+0x5c0>)
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800349c:	e00d      	b.n	80034ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7ff f90b 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 80034a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034a4:	e009      	b.n	80034ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034ac:	e005      	b.n	80034ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8090 	beq.w	80035e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	4a44      	ldr	r2, [pc, #272]	; (80035d8 <UART_SetConfig+0x5c4>)
 80034c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034cc:	461a      	mov	r2, r3
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034d4:	005a      	lsls	r2, r3, #1
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	441a      	add	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	d916      	bls.n	800351c <UART_SetConfig+0x508>
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d212      	bcs.n	800351c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f023 030f 	bic.w	r3, r3, #15
 80034fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	b29a      	uxth	r2, r3
 800350c:	8bfb      	ldrh	r3, [r7, #30]
 800350e:	4313      	orrs	r3, r2
 8003510:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	8bfa      	ldrh	r2, [r7, #30]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	e062      	b.n	80035e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003522:	e05e      	b.n	80035e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003528:	2b08      	cmp	r3, #8
 800352a:	d828      	bhi.n	800357e <UART_SetConfig+0x56a>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0x520>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003559 	.word	0x08003559
 8003538:	08003561 	.word	0x08003561
 800353c:	08003569 	.word	0x08003569
 8003540:	0800357f 	.word	0x0800357f
 8003544:	0800356f 	.word	0x0800356f
 8003548:	0800357f 	.word	0x0800357f
 800354c:	0800357f 	.word	0x0800357f
 8003550:	0800357f 	.word	0x0800357f
 8003554:	08003577 	.word	0x08003577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7ff f91c 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800355e:	e014      	b.n	800358a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7ff f92e 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003566:	e010      	b.n	800358a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <UART_SetConfig+0x5c0>)
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7ff f8a3 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003574:	e009      	b.n	800358a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800357c:	e005      	b.n	800358a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003588:	bf00      	nop
    }

    if (pclk != 0U)
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d028      	beq.n	80035e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <UART_SetConfig+0x5c4>)
 8003596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800359a:	461a      	mov	r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	fbb3 f2f2 	udiv	r2, r3, r2
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	441a      	add	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d910      	bls.n	80035dc <UART_SetConfig+0x5c8>
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d20c      	bcs.n	80035dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	e009      	b.n	80035e2 <UART_SetConfig+0x5ce>
 80035ce:	bf00      	nop
 80035d0:	40008000 	.word	0x40008000
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	0800459c 	.word	0x0800459c
      }
      else
      {
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80035fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003602:	4618      	mov	r0, r3
 8003604:	3730      	adds	r7, #48	; 0x30
 8003606:	46bd      	mov	sp, r7
 8003608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800360c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01a      	beq.n	8003722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370a:	d10a      	bne.n	8003722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	605a      	str	r2, [r3, #4]
  }
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003760:	f7fd fc26 	bl	8000fb0 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d10e      	bne.n	8003792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f82f 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e025      	b.n	80037de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d10e      	bne.n	80037be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f819 	bl	80037e6 <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e00f      	b.n	80037de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b09c      	sub	sp, #112	; 0x70
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	e0a9      	b.n	800394c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	f000 80a5 	beq.w	800394c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fd fbd5 	bl	8000fb0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <UART_WaitOnFlagUntilTimeout+0x32>
 8003812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003814:	2b00      	cmp	r3, #0
 8003816:	d140      	bne.n	800389a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003838:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800383c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e6      	bne.n	8003818 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3308      	adds	r3, #8
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	663b      	str	r3, [r7, #96]	; 0x60
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3308      	adds	r3, #8
 8003868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800386a:	64ba      	str	r2, [r7, #72]	; 0x48
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e5      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e069      	b.n	800396e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d051      	beq.n	800394c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b6:	d149      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
 80038e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e6      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3308      	adds	r3, #8
 80038fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	66bb      	str	r3, [r7, #104]	; 0x68
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003914:	623a      	str	r2, [r7, #32]
 8003916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	61bb      	str	r3, [r7, #24]
   return(result);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e010      	b.n	800396e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4013      	ands	r3, r2
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	429a      	cmp	r2, r3
 8003968:	f43f af46 	beq.w	80037f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3770      	adds	r7, #112	; 0x70
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UARTEx_DisableFifoMode+0x16>
 8003988:	2302      	movs	r3, #2
 800398a:	e027      	b.n	80039dc <HAL_UARTEx_DisableFifoMode+0x66>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e02d      	b.n	8003a5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f84f 	bl	8003ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e02d      	b.n	8003ad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f811 	bl	8003ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b00:	e031      	b.n	8003b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b02:	2308      	movs	r3, #8
 8003b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b06:	2308      	movs	r3, #8
 8003b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	0e5b      	lsrs	r3, r3, #25
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	0f5b      	lsrs	r3, r3, #29
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b2a:	7bbb      	ldrb	r3, [r7, #14]
 8003b2c:	7b3a      	ldrb	r2, [r7, #12]
 8003b2e:	4911      	ldr	r1, [pc, #68]	; (8003b74 <UARTEx_SetNbDataToProcess+0x94>)
 8003b30:	5c8a      	ldrb	r2, [r1, r2]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b36:	7b3a      	ldrb	r2, [r7, #12]
 8003b38:	490f      	ldr	r1, [pc, #60]	; (8003b78 <UARTEx_SetNbDataToProcess+0x98>)
 8003b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	7b7a      	ldrb	r2, [r7, #13]
 8003b4c:	4909      	ldr	r1, [pc, #36]	; (8003b74 <UARTEx_SetNbDataToProcess+0x94>)
 8003b4e:	5c8a      	ldrb	r2, [r1, r2]
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b54:	7b7a      	ldrb	r2, [r7, #13]
 8003b56:	4908      	ldr	r1, [pc, #32]	; (8003b78 <UARTEx_SetNbDataToProcess+0x98>)
 8003b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	080045b4 	.word	0x080045b4
 8003b78:	080045bc 	.word	0x080045bc

08003b7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b84:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003b88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	f107 0014 	add.w	r0, r7, #20
 8003bc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	b004      	add	sp, #16
 8003bf2:	4770      	bx	lr

08003bf4 <std>:
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8003bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c02:	6083      	str	r3, [r0, #8]
 8003c04:	8181      	strh	r1, [r0, #12]
 8003c06:	6643      	str	r3, [r0, #100]	; 0x64
 8003c08:	81c2      	strh	r2, [r0, #14]
 8003c0a:	6183      	str	r3, [r0, #24]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	2208      	movs	r2, #8
 8003c10:	305c      	adds	r0, #92	; 0x5c
 8003c12:	f000 f9e5 	bl	8003fe0 <memset>
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <std+0x58>)
 8003c18:	6263      	str	r3, [r4, #36]	; 0x24
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <std+0x5c>)
 8003c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <std+0x60>)
 8003c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <std+0x64>)
 8003c24:	6323      	str	r3, [r4, #48]	; 0x30
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <std+0x68>)
 8003c28:	6224      	str	r4, [r4, #32]
 8003c2a:	429c      	cmp	r4, r3
 8003c2c:	d006      	beq.n	8003c3c <std+0x48>
 8003c2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c32:	4294      	cmp	r4, r2
 8003c34:	d002      	beq.n	8003c3c <std+0x48>
 8003c36:	33d0      	adds	r3, #208	; 0xd0
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	d105      	bne.n	8003c48 <std+0x54>
 8003c3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c44:	f000 ba44 	b.w	80040d0 <__retarget_lock_init_recursive>
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	bf00      	nop
 8003c4c:	08003e31 	.word	0x08003e31
 8003c50:	08003e53 	.word	0x08003e53
 8003c54:	08003e8b 	.word	0x08003e8b
 8003c58:	08003eaf 	.word	0x08003eaf
 8003c5c:	20000524 	.word	0x20000524

08003c60 <stdio_exit_handler>:
 8003c60:	4a02      	ldr	r2, [pc, #8]	; (8003c6c <stdio_exit_handler+0xc>)
 8003c62:	4903      	ldr	r1, [pc, #12]	; (8003c70 <stdio_exit_handler+0x10>)
 8003c64:	4803      	ldr	r0, [pc, #12]	; (8003c74 <stdio_exit_handler+0x14>)
 8003c66:	f000 b869 	b.w	8003d3c <_fwalk_sglue>
 8003c6a:	bf00      	nop
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	080043d5 	.word	0x080043d5
 8003c74:	20000018 	.word	0x20000018

08003c78 <cleanup_stdio>:
 8003c78:	6841      	ldr	r1, [r0, #4]
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <cleanup_stdio+0x34>)
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	4604      	mov	r4, r0
 8003c82:	d001      	beq.n	8003c88 <cleanup_stdio+0x10>
 8003c84:	f000 fba6 	bl	80043d4 <_fflush_r>
 8003c88:	68a1      	ldr	r1, [r4, #8]
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <cleanup_stdio+0x38>)
 8003c8c:	4299      	cmp	r1, r3
 8003c8e:	d002      	beq.n	8003c96 <cleanup_stdio+0x1e>
 8003c90:	4620      	mov	r0, r4
 8003c92:	f000 fb9f 	bl	80043d4 <_fflush_r>
 8003c96:	68e1      	ldr	r1, [r4, #12]
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <cleanup_stdio+0x3c>)
 8003c9a:	4299      	cmp	r1, r3
 8003c9c:	d004      	beq.n	8003ca8 <cleanup_stdio+0x30>
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca4:	f000 bb96 	b.w	80043d4 <_fflush_r>
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	bf00      	nop
 8003cac:	20000524 	.word	0x20000524
 8003cb0:	2000058c 	.word	0x2000058c
 8003cb4:	200005f4 	.word	0x200005f4

08003cb8 <global_stdio_init.part.0>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <global_stdio_init.part.0+0x30>)
 8003cbc:	4c0b      	ldr	r4, [pc, #44]	; (8003cec <global_stdio_init.part.0+0x34>)
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <global_stdio_init.part.0+0x38>)
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	f7ff ff94 	bl	8003bf4 <std>
 8003ccc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2109      	movs	r1, #9
 8003cd4:	f7ff ff8e 	bl	8003bf4 <std>
 8003cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cdc:	2202      	movs	r2, #2
 8003cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce2:	2112      	movs	r1, #18
 8003ce4:	f7ff bf86 	b.w	8003bf4 <std>
 8003ce8:	2000065c 	.word	0x2000065c
 8003cec:	20000524 	.word	0x20000524
 8003cf0:	08003c61 	.word	0x08003c61

08003cf4 <__sfp_lock_acquire>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <__sfp_lock_acquire+0x8>)
 8003cf6:	f000 b9ec 	b.w	80040d2 <__retarget_lock_acquire_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	20000665 	.word	0x20000665

08003d00 <__sfp_lock_release>:
 8003d00:	4801      	ldr	r0, [pc, #4]	; (8003d08 <__sfp_lock_release+0x8>)
 8003d02:	f000 b9e7 	b.w	80040d4 <__retarget_lock_release_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000665 	.word	0x20000665

08003d0c <__sinit>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4604      	mov	r4, r0
 8003d10:	f7ff fff0 	bl	8003cf4 <__sfp_lock_acquire>
 8003d14:	6a23      	ldr	r3, [r4, #32]
 8003d16:	b11b      	cbz	r3, 8003d20 <__sinit+0x14>
 8003d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1c:	f7ff bff0 	b.w	8003d00 <__sfp_lock_release>
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__sinit+0x28>)
 8003d22:	6223      	str	r3, [r4, #32]
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__sinit+0x2c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f5      	bne.n	8003d18 <__sinit+0xc>
 8003d2c:	f7ff ffc4 	bl	8003cb8 <global_stdio_init.part.0>
 8003d30:	e7f2      	b.n	8003d18 <__sinit+0xc>
 8003d32:	bf00      	nop
 8003d34:	08003c79 	.word	0x08003c79
 8003d38:	2000065c 	.word	0x2000065c

08003d3c <_fwalk_sglue>:
 8003d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d40:	4607      	mov	r7, r0
 8003d42:	4688      	mov	r8, r1
 8003d44:	4614      	mov	r4, r2
 8003d46:	2600      	movs	r6, #0
 8003d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d50:	d505      	bpl.n	8003d5e <_fwalk_sglue+0x22>
 8003d52:	6824      	ldr	r4, [r4, #0]
 8003d54:	2c00      	cmp	r4, #0
 8003d56:	d1f7      	bne.n	8003d48 <_fwalk_sglue+0xc>
 8003d58:	4630      	mov	r0, r6
 8003d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d5e:	89ab      	ldrh	r3, [r5, #12]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d907      	bls.n	8003d74 <_fwalk_sglue+0x38>
 8003d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	d003      	beq.n	8003d74 <_fwalk_sglue+0x38>
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	4638      	mov	r0, r7
 8003d70:	47c0      	blx	r8
 8003d72:	4306      	orrs	r6, r0
 8003d74:	3568      	adds	r5, #104	; 0x68
 8003d76:	e7e9      	b.n	8003d4c <_fwalk_sglue+0x10>

08003d78 <_puts_r>:
 8003d78:	6a03      	ldr	r3, [r0, #32]
 8003d7a:	b570      	push	{r4, r5, r6, lr}
 8003d7c:	6884      	ldr	r4, [r0, #8]
 8003d7e:	4605      	mov	r5, r0
 8003d80:	460e      	mov	r6, r1
 8003d82:	b90b      	cbnz	r3, 8003d88 <_puts_r+0x10>
 8003d84:	f7ff ffc2 	bl	8003d0c <__sinit>
 8003d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8a:	07db      	lsls	r3, r3, #31
 8003d8c:	d405      	bmi.n	8003d9a <_puts_r+0x22>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	0598      	lsls	r0, r3, #22
 8003d92:	d402      	bmi.n	8003d9a <_puts_r+0x22>
 8003d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d96:	f000 f99c 	bl	80040d2 <__retarget_lock_acquire_recursive>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	0719      	lsls	r1, r3, #28
 8003d9e:	d513      	bpl.n	8003dc8 <_puts_r+0x50>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	b18b      	cbz	r3, 8003dc8 <_puts_r+0x50>
 8003da4:	3e01      	subs	r6, #1
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	b9e9      	cbnz	r1, 8003dee <_puts_r+0x76>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da2e      	bge.n	8003e14 <_puts_r+0x9c>
 8003db6:	4622      	mov	r2, r4
 8003db8:	210a      	movs	r1, #10
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f87b 	bl	8003eb6 <__swbuf_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d007      	beq.n	8003dd4 <_puts_r+0x5c>
 8003dc4:	250a      	movs	r5, #10
 8003dc6:	e007      	b.n	8003dd8 <_puts_r+0x60>
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f000 f8b0 	bl	8003f30 <__swsetup_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0e7      	beq.n	8003da4 <_puts_r+0x2c>
 8003dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dda:	07da      	lsls	r2, r3, #31
 8003ddc:	d405      	bmi.n	8003dea <_puts_r+0x72>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	059b      	lsls	r3, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_puts_r+0x72>
 8003de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de6:	f000 f975 	bl	80040d4 <__retarget_lock_release_recursive>
 8003dea:	4628      	mov	r0, r5
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da04      	bge.n	8003dfc <_puts_r+0x84>
 8003df2:	69a2      	ldr	r2, [r4, #24]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dc06      	bgt.n	8003e06 <_puts_r+0x8e>
 8003df8:	290a      	cmp	r1, #10
 8003dfa:	d004      	beq.n	8003e06 <_puts_r+0x8e>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	7019      	strb	r1, [r3, #0]
 8003e04:	e7cf      	b.n	8003da6 <_puts_r+0x2e>
 8003e06:	4622      	mov	r2, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 f854 	bl	8003eb6 <__swbuf_r>
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d1c9      	bne.n	8003da6 <_puts_r+0x2e>
 8003e12:	e7df      	b.n	8003dd4 <_puts_r+0x5c>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	250a      	movs	r5, #10
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	701d      	strb	r5, [r3, #0]
 8003e1e:	e7db      	b.n	8003dd8 <_puts_r+0x60>

08003e20 <puts>:
 8003e20:	4b02      	ldr	r3, [pc, #8]	; (8003e2c <puts+0xc>)
 8003e22:	4601      	mov	r1, r0
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f7ff bfa7 	b.w	8003d78 <_puts_r>
 8003e2a:	bf00      	nop
 8003e2c:	20000064 	.word	0x20000064

08003e30 <__sread>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	460c      	mov	r4, r1
 8003e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e38:	f000 f8fc 	bl	8004034 <_read_r>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	bfab      	itete	ge
 8003e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e42:	89a3      	ldrhlt	r3, [r4, #12]
 8003e44:	181b      	addge	r3, r3, r0
 8003e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e4a:	bfac      	ite	ge
 8003e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e4e:	81a3      	strhlt	r3, [r4, #12]
 8003e50:	bd10      	pop	{r4, pc}

08003e52 <__swrite>:
 8003e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e56:	461f      	mov	r7, r3
 8003e58:	898b      	ldrh	r3, [r1, #12]
 8003e5a:	05db      	lsls	r3, r3, #23
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	4616      	mov	r6, r2
 8003e62:	d505      	bpl.n	8003e70 <__swrite+0x1e>
 8003e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e68:	2302      	movs	r3, #2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f000 f8d0 	bl	8004010 <_lseek_r>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	4632      	mov	r2, r6
 8003e7e:	463b      	mov	r3, r7
 8003e80:	4628      	mov	r0, r5
 8003e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e86:	f000 b8e7 	b.w	8004058 <_write_r>

08003e8a <__sseek>:
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e92:	f000 f8bd 	bl	8004010 <_lseek_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	bf15      	itete	ne
 8003e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ea6:	81a3      	strheq	r3, [r4, #12]
 8003ea8:	bf18      	it	ne
 8003eaa:	81a3      	strhne	r3, [r4, #12]
 8003eac:	bd10      	pop	{r4, pc}

08003eae <__sclose>:
 8003eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb2:	f000 b89d 	b.w	8003ff0 <_close_r>

08003eb6 <__swbuf_r>:
 8003eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb8:	460e      	mov	r6, r1
 8003eba:	4614      	mov	r4, r2
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	b118      	cbz	r0, 8003ec8 <__swbuf_r+0x12>
 8003ec0:	6a03      	ldr	r3, [r0, #32]
 8003ec2:	b90b      	cbnz	r3, 8003ec8 <__swbuf_r+0x12>
 8003ec4:	f7ff ff22 	bl	8003d0c <__sinit>
 8003ec8:	69a3      	ldr	r3, [r4, #24]
 8003eca:	60a3      	str	r3, [r4, #8]
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	071a      	lsls	r2, r3, #28
 8003ed0:	d525      	bpl.n	8003f1e <__swbuf_r+0x68>
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	b31b      	cbz	r3, 8003f1e <__swbuf_r+0x68>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	6922      	ldr	r2, [r4, #16]
 8003eda:	1a98      	subs	r0, r3, r2
 8003edc:	6963      	ldr	r3, [r4, #20]
 8003ede:	b2f6      	uxtb	r6, r6
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	4637      	mov	r7, r6
 8003ee4:	dc04      	bgt.n	8003ef0 <__swbuf_r+0x3a>
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f000 fa73 	bl	80043d4 <_fflush_r>
 8003eee:	b9e0      	cbnz	r0, 8003f2a <__swbuf_r+0x74>
 8003ef0:	68a3      	ldr	r3, [r4, #8]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	6022      	str	r2, [r4, #0]
 8003efc:	701e      	strb	r6, [r3, #0]
 8003efe:	6962      	ldr	r2, [r4, #20]
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d004      	beq.n	8003f10 <__swbuf_r+0x5a>
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	07db      	lsls	r3, r3, #31
 8003f0a:	d506      	bpl.n	8003f1a <__swbuf_r+0x64>
 8003f0c:	2e0a      	cmp	r6, #10
 8003f0e:	d104      	bne.n	8003f1a <__swbuf_r+0x64>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 fa5e 	bl	80043d4 <_fflush_r>
 8003f18:	b938      	cbnz	r0, 8003f2a <__swbuf_r+0x74>
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 f805 	bl	8003f30 <__swsetup_r>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d0d5      	beq.n	8003ed6 <__swbuf_r+0x20>
 8003f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f2e:	e7f4      	b.n	8003f1a <__swbuf_r+0x64>

08003f30 <__swsetup_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <__swsetup_r+0xac>)
 8003f34:	4605      	mov	r5, r0
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	460c      	mov	r4, r1
 8003f3a:	b118      	cbz	r0, 8003f44 <__swsetup_r+0x14>
 8003f3c:	6a03      	ldr	r3, [r0, #32]
 8003f3e:	b90b      	cbnz	r3, 8003f44 <__swsetup_r+0x14>
 8003f40:	f7ff fee4 	bl	8003d0c <__sinit>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f4a:	0718      	lsls	r0, r3, #28
 8003f4c:	d422      	bmi.n	8003f94 <__swsetup_r+0x64>
 8003f4e:	06d9      	lsls	r1, r3, #27
 8003f50:	d407      	bmi.n	8003f62 <__swsetup_r+0x32>
 8003f52:	2309      	movs	r3, #9
 8003f54:	602b      	str	r3, [r5, #0]
 8003f56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	e034      	b.n	8003fcc <__swsetup_r+0x9c>
 8003f62:	0758      	lsls	r0, r3, #29
 8003f64:	d512      	bpl.n	8003f8c <__swsetup_r+0x5c>
 8003f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f68:	b141      	cbz	r1, 8003f7c <__swsetup_r+0x4c>
 8003f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f6e:	4299      	cmp	r1, r3
 8003f70:	d002      	beq.n	8003f78 <__swsetup_r+0x48>
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 f8b0 	bl	80040d8 <_free_r>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6363      	str	r3, [r4, #52]	; 0x34
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f82:	81a3      	strh	r3, [r4, #12]
 8003f84:	2300      	movs	r3, #0
 8003f86:	6063      	str	r3, [r4, #4]
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f043 0308 	orr.w	r3, r3, #8
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	b94b      	cbnz	r3, 8003fac <__swsetup_r+0x7c>
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa2:	d003      	beq.n	8003fac <__swsetup_r+0x7c>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 fa62 	bl	8004470 <__smakebuf_r>
 8003fac:	89a0      	ldrh	r0, [r4, #12]
 8003fae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fb2:	f010 0301 	ands.w	r3, r0, #1
 8003fb6:	d00a      	beq.n	8003fce <__swsetup_r+0x9e>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60a3      	str	r3, [r4, #8]
 8003fbc:	6963      	ldr	r3, [r4, #20]
 8003fbe:	425b      	negs	r3, r3
 8003fc0:	61a3      	str	r3, [r4, #24]
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	b943      	cbnz	r3, 8003fd8 <__swsetup_r+0xa8>
 8003fc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fca:	d1c4      	bne.n	8003f56 <__swsetup_r+0x26>
 8003fcc:	bd38      	pop	{r3, r4, r5, pc}
 8003fce:	0781      	lsls	r1, r0, #30
 8003fd0:	bf58      	it	pl
 8003fd2:	6963      	ldrpl	r3, [r4, #20]
 8003fd4:	60a3      	str	r3, [r4, #8]
 8003fd6:	e7f4      	b.n	8003fc2 <__swsetup_r+0x92>
 8003fd8:	2000      	movs	r0, #0
 8003fda:	e7f7      	b.n	8003fcc <__swsetup_r+0x9c>
 8003fdc:	20000064 	.word	0x20000064

08003fe0 <memset>:
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	f803 1b01 	strb.w	r1, [r3], #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <_close_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d06      	ldr	r5, [pc, #24]	; (800400c <_close_r+0x1c>)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	f7fc fecd 	bl	8000d9a <_close>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_close_r+0x1a>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_close_r+0x1a>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	20000660 	.word	0x20000660

08004010 <_lseek_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4d07      	ldr	r5, [pc, #28]	; (8004030 <_lseek_r+0x20>)
 8004014:	4604      	mov	r4, r0
 8004016:	4608      	mov	r0, r1
 8004018:	4611      	mov	r1, r2
 800401a:	2200      	movs	r2, #0
 800401c:	602a      	str	r2, [r5, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f7fc fee2 	bl	8000de8 <_lseek>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_lseek_r+0x1e>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_lseek_r+0x1e>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000660 	.word	0x20000660

08004034 <_read_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4d07      	ldr	r5, [pc, #28]	; (8004054 <_read_r+0x20>)
 8004038:	4604      	mov	r4, r0
 800403a:	4608      	mov	r0, r1
 800403c:	4611      	mov	r1, r2
 800403e:	2200      	movs	r2, #0
 8004040:	602a      	str	r2, [r5, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f7fc fe70 	bl	8000d28 <_read>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_read_r+0x1e>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_read_r+0x1e>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000660 	.word	0x20000660

08004058 <_write_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4d07      	ldr	r5, [pc, #28]	; (8004078 <_write_r+0x20>)
 800405c:	4604      	mov	r4, r0
 800405e:	4608      	mov	r0, r1
 8004060:	4611      	mov	r1, r2
 8004062:	2200      	movs	r2, #0
 8004064:	602a      	str	r2, [r5, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	f7fc fe7b 	bl	8000d62 <_write>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d102      	bne.n	8004076 <_write_r+0x1e>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b103      	cbz	r3, 8004076 <_write_r+0x1e>
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	20000660 	.word	0x20000660

0800407c <__errno>:
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <__errno+0x8>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000064 	.word	0x20000064

08004088 <__libc_init_array>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4d0d      	ldr	r5, [pc, #52]	; (80040c0 <__libc_init_array+0x38>)
 800408c:	4c0d      	ldr	r4, [pc, #52]	; (80040c4 <__libc_init_array+0x3c>)
 800408e:	1b64      	subs	r4, r4, r5
 8004090:	10a4      	asrs	r4, r4, #2
 8004092:	2600      	movs	r6, #0
 8004094:	42a6      	cmp	r6, r4
 8004096:	d109      	bne.n	80040ac <__libc_init_array+0x24>
 8004098:	4d0b      	ldr	r5, [pc, #44]	; (80040c8 <__libc_init_array+0x40>)
 800409a:	4c0c      	ldr	r4, [pc, #48]	; (80040cc <__libc_init_array+0x44>)
 800409c:	f000 fa56 	bl	800454c <_init>
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	2600      	movs	r6, #0
 80040a6:	42a6      	cmp	r6, r4
 80040a8:	d105      	bne.n	80040b6 <__libc_init_array+0x2e>
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b0:	4798      	blx	r3
 80040b2:	3601      	adds	r6, #1
 80040b4:	e7ee      	b.n	8004094 <__libc_init_array+0xc>
 80040b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ba:	4798      	blx	r3
 80040bc:	3601      	adds	r6, #1
 80040be:	e7f2      	b.n	80040a6 <__libc_init_array+0x1e>
 80040c0:	080045cc 	.word	0x080045cc
 80040c4:	080045cc 	.word	0x080045cc
 80040c8:	080045cc 	.word	0x080045cc
 80040cc:	080045d0 	.word	0x080045d0

080040d0 <__retarget_lock_init_recursive>:
 80040d0:	4770      	bx	lr

080040d2 <__retarget_lock_acquire_recursive>:
 80040d2:	4770      	bx	lr

080040d4 <__retarget_lock_release_recursive>:
 80040d4:	4770      	bx	lr
	...

080040d8 <_free_r>:
 80040d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040da:	2900      	cmp	r1, #0
 80040dc:	d044      	beq.n	8004168 <_free_r+0x90>
 80040de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e2:	9001      	str	r0, [sp, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f1a1 0404 	sub.w	r4, r1, #4
 80040ea:	bfb8      	it	lt
 80040ec:	18e4      	addlt	r4, r4, r3
 80040ee:	f000 f8df 	bl	80042b0 <__malloc_lock>
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <_free_r+0x94>)
 80040f4:	9801      	ldr	r0, [sp, #4]
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	b933      	cbnz	r3, 8004108 <_free_r+0x30>
 80040fa:	6063      	str	r3, [r4, #4]
 80040fc:	6014      	str	r4, [r2, #0]
 80040fe:	b003      	add	sp, #12
 8004100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004104:	f000 b8da 	b.w	80042bc <__malloc_unlock>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d908      	bls.n	800411e <_free_r+0x46>
 800410c:	6825      	ldr	r5, [r4, #0]
 800410e:	1961      	adds	r1, r4, r5
 8004110:	428b      	cmp	r3, r1
 8004112:	bf01      	itttt	eq
 8004114:	6819      	ldreq	r1, [r3, #0]
 8004116:	685b      	ldreq	r3, [r3, #4]
 8004118:	1949      	addeq	r1, r1, r5
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	e7ed      	b.n	80040fa <_free_r+0x22>
 800411e:	461a      	mov	r2, r3
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b10b      	cbz	r3, 8004128 <_free_r+0x50>
 8004124:	42a3      	cmp	r3, r4
 8004126:	d9fa      	bls.n	800411e <_free_r+0x46>
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	1855      	adds	r5, r2, r1
 800412c:	42a5      	cmp	r5, r4
 800412e:	d10b      	bne.n	8004148 <_free_r+0x70>
 8004130:	6824      	ldr	r4, [r4, #0]
 8004132:	4421      	add	r1, r4
 8004134:	1854      	adds	r4, r2, r1
 8004136:	42a3      	cmp	r3, r4
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	d1e0      	bne.n	80040fe <_free_r+0x26>
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	6053      	str	r3, [r2, #4]
 8004142:	440c      	add	r4, r1
 8004144:	6014      	str	r4, [r2, #0]
 8004146:	e7da      	b.n	80040fe <_free_r+0x26>
 8004148:	d902      	bls.n	8004150 <_free_r+0x78>
 800414a:	230c      	movs	r3, #12
 800414c:	6003      	str	r3, [r0, #0]
 800414e:	e7d6      	b.n	80040fe <_free_r+0x26>
 8004150:	6825      	ldr	r5, [r4, #0]
 8004152:	1961      	adds	r1, r4, r5
 8004154:	428b      	cmp	r3, r1
 8004156:	bf04      	itt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	bf04      	itt	eq
 8004160:	1949      	addeq	r1, r1, r5
 8004162:	6021      	streq	r1, [r4, #0]
 8004164:	6054      	str	r4, [r2, #4]
 8004166:	e7ca      	b.n	80040fe <_free_r+0x26>
 8004168:	b003      	add	sp, #12
 800416a:	bd30      	pop	{r4, r5, pc}
 800416c:	20000668 	.word	0x20000668

08004170 <sbrk_aligned>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	4e0e      	ldr	r6, [pc, #56]	; (80041ac <sbrk_aligned+0x3c>)
 8004174:	460c      	mov	r4, r1
 8004176:	6831      	ldr	r1, [r6, #0]
 8004178:	4605      	mov	r5, r0
 800417a:	b911      	cbnz	r1, 8004182 <sbrk_aligned+0x12>
 800417c:	f000 f9d6 	bl	800452c <_sbrk_r>
 8004180:	6030      	str	r0, [r6, #0]
 8004182:	4621      	mov	r1, r4
 8004184:	4628      	mov	r0, r5
 8004186:	f000 f9d1 	bl	800452c <_sbrk_r>
 800418a:	1c43      	adds	r3, r0, #1
 800418c:	d00a      	beq.n	80041a4 <sbrk_aligned+0x34>
 800418e:	1cc4      	adds	r4, r0, #3
 8004190:	f024 0403 	bic.w	r4, r4, #3
 8004194:	42a0      	cmp	r0, r4
 8004196:	d007      	beq.n	80041a8 <sbrk_aligned+0x38>
 8004198:	1a21      	subs	r1, r4, r0
 800419a:	4628      	mov	r0, r5
 800419c:	f000 f9c6 	bl	800452c <_sbrk_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d101      	bne.n	80041a8 <sbrk_aligned+0x38>
 80041a4:	f04f 34ff 	mov.w	r4, #4294967295
 80041a8:	4620      	mov	r0, r4
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	2000066c 	.word	0x2000066c

080041b0 <_malloc_r>:
 80041b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b4:	1ccd      	adds	r5, r1, #3
 80041b6:	f025 0503 	bic.w	r5, r5, #3
 80041ba:	3508      	adds	r5, #8
 80041bc:	2d0c      	cmp	r5, #12
 80041be:	bf38      	it	cc
 80041c0:	250c      	movcc	r5, #12
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	4607      	mov	r7, r0
 80041c6:	db01      	blt.n	80041cc <_malloc_r+0x1c>
 80041c8:	42a9      	cmp	r1, r5
 80041ca:	d905      	bls.n	80041d8 <_malloc_r+0x28>
 80041cc:	230c      	movs	r3, #12
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	2600      	movs	r6, #0
 80041d2:	4630      	mov	r0, r6
 80041d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042ac <_malloc_r+0xfc>
 80041dc:	f000 f868 	bl	80042b0 <__malloc_lock>
 80041e0:	f8d8 3000 	ldr.w	r3, [r8]
 80041e4:	461c      	mov	r4, r3
 80041e6:	bb5c      	cbnz	r4, 8004240 <_malloc_r+0x90>
 80041e8:	4629      	mov	r1, r5
 80041ea:	4638      	mov	r0, r7
 80041ec:	f7ff ffc0 	bl	8004170 <sbrk_aligned>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	4604      	mov	r4, r0
 80041f4:	d155      	bne.n	80042a2 <_malloc_r+0xf2>
 80041f6:	f8d8 4000 	ldr.w	r4, [r8]
 80041fa:	4626      	mov	r6, r4
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	d145      	bne.n	800428c <_malloc_r+0xdc>
 8004200:	2c00      	cmp	r4, #0
 8004202:	d048      	beq.n	8004296 <_malloc_r+0xe6>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	4631      	mov	r1, r6
 8004208:	4638      	mov	r0, r7
 800420a:	eb04 0903 	add.w	r9, r4, r3
 800420e:	f000 f98d 	bl	800452c <_sbrk_r>
 8004212:	4581      	cmp	r9, r0
 8004214:	d13f      	bne.n	8004296 <_malloc_r+0xe6>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	1a6d      	subs	r5, r5, r1
 800421a:	4629      	mov	r1, r5
 800421c:	4638      	mov	r0, r7
 800421e:	f7ff ffa7 	bl	8004170 <sbrk_aligned>
 8004222:	3001      	adds	r0, #1
 8004224:	d037      	beq.n	8004296 <_malloc_r+0xe6>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	442b      	add	r3, r5
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	f8d8 3000 	ldr.w	r3, [r8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d038      	beq.n	80042a6 <_malloc_r+0xf6>
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	42a2      	cmp	r2, r4
 8004238:	d12b      	bne.n	8004292 <_malloc_r+0xe2>
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	e00f      	b.n	8004260 <_malloc_r+0xb0>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	1b52      	subs	r2, r2, r5
 8004244:	d41f      	bmi.n	8004286 <_malloc_r+0xd6>
 8004246:	2a0b      	cmp	r2, #11
 8004248:	d917      	bls.n	800427a <_malloc_r+0xca>
 800424a:	1961      	adds	r1, r4, r5
 800424c:	42a3      	cmp	r3, r4
 800424e:	6025      	str	r5, [r4, #0]
 8004250:	bf18      	it	ne
 8004252:	6059      	strne	r1, [r3, #4]
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	bf08      	it	eq
 8004258:	f8c8 1000 	streq.w	r1, [r8]
 800425c:	5162      	str	r2, [r4, r5]
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	4638      	mov	r0, r7
 8004262:	f104 060b 	add.w	r6, r4, #11
 8004266:	f000 f829 	bl	80042bc <__malloc_unlock>
 800426a:	f026 0607 	bic.w	r6, r6, #7
 800426e:	1d23      	adds	r3, r4, #4
 8004270:	1af2      	subs	r2, r6, r3
 8004272:	d0ae      	beq.n	80041d2 <_malloc_r+0x22>
 8004274:	1b9b      	subs	r3, r3, r6
 8004276:	50a3      	str	r3, [r4, r2]
 8004278:	e7ab      	b.n	80041d2 <_malloc_r+0x22>
 800427a:	42a3      	cmp	r3, r4
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	d1dd      	bne.n	800423c <_malloc_r+0x8c>
 8004280:	f8c8 2000 	str.w	r2, [r8]
 8004284:	e7ec      	b.n	8004260 <_malloc_r+0xb0>
 8004286:	4623      	mov	r3, r4
 8004288:	6864      	ldr	r4, [r4, #4]
 800428a:	e7ac      	b.n	80041e6 <_malloc_r+0x36>
 800428c:	4634      	mov	r4, r6
 800428e:	6876      	ldr	r6, [r6, #4]
 8004290:	e7b4      	b.n	80041fc <_malloc_r+0x4c>
 8004292:	4613      	mov	r3, r2
 8004294:	e7cc      	b.n	8004230 <_malloc_r+0x80>
 8004296:	230c      	movs	r3, #12
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4638      	mov	r0, r7
 800429c:	f000 f80e 	bl	80042bc <__malloc_unlock>
 80042a0:	e797      	b.n	80041d2 <_malloc_r+0x22>
 80042a2:	6025      	str	r5, [r4, #0]
 80042a4:	e7dc      	b.n	8004260 <_malloc_r+0xb0>
 80042a6:	605b      	str	r3, [r3, #4]
 80042a8:	deff      	udf	#255	; 0xff
 80042aa:	bf00      	nop
 80042ac:	20000668 	.word	0x20000668

080042b0 <__malloc_lock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__malloc_lock+0x8>)
 80042b2:	f7ff bf0e 	b.w	80040d2 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000664 	.word	0x20000664

080042bc <__malloc_unlock>:
 80042bc:	4801      	ldr	r0, [pc, #4]	; (80042c4 <__malloc_unlock+0x8>)
 80042be:	f7ff bf09 	b.w	80040d4 <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	20000664 	.word	0x20000664

080042c8 <__sflush_r>:
 80042c8:	898a      	ldrh	r2, [r1, #12]
 80042ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ce:	4605      	mov	r5, r0
 80042d0:	0710      	lsls	r0, r2, #28
 80042d2:	460c      	mov	r4, r1
 80042d4:	d458      	bmi.n	8004388 <__sflush_r+0xc0>
 80042d6:	684b      	ldr	r3, [r1, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dc05      	bgt.n	80042e8 <__sflush_r+0x20>
 80042dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	dc02      	bgt.n	80042e8 <__sflush_r+0x20>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	d0f9      	beq.n	80042e2 <__sflush_r+0x1a>
 80042ee:	2300      	movs	r3, #0
 80042f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042f4:	682f      	ldr	r7, [r5, #0]
 80042f6:	6a21      	ldr	r1, [r4, #32]
 80042f8:	602b      	str	r3, [r5, #0]
 80042fa:	d032      	beq.n	8004362 <__sflush_r+0x9a>
 80042fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	075a      	lsls	r2, r3, #29
 8004302:	d505      	bpl.n	8004310 <__sflush_r+0x48>
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	1ac0      	subs	r0, r0, r3
 8004308:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800430a:	b10b      	cbz	r3, 8004310 <__sflush_r+0x48>
 800430c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800430e:	1ac0      	subs	r0, r0, r3
 8004310:	2300      	movs	r3, #0
 8004312:	4602      	mov	r2, r0
 8004314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004316:	6a21      	ldr	r1, [r4, #32]
 8004318:	4628      	mov	r0, r5
 800431a:	47b0      	blx	r6
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	d106      	bne.n	8004330 <__sflush_r+0x68>
 8004322:	6829      	ldr	r1, [r5, #0]
 8004324:	291d      	cmp	r1, #29
 8004326:	d82b      	bhi.n	8004380 <__sflush_r+0xb8>
 8004328:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <__sflush_r+0x108>)
 800432a:	410a      	asrs	r2, r1
 800432c:	07d6      	lsls	r6, r2, #31
 800432e:	d427      	bmi.n	8004380 <__sflush_r+0xb8>
 8004330:	2200      	movs	r2, #0
 8004332:	6062      	str	r2, [r4, #4]
 8004334:	04d9      	lsls	r1, r3, #19
 8004336:	6922      	ldr	r2, [r4, #16]
 8004338:	6022      	str	r2, [r4, #0]
 800433a:	d504      	bpl.n	8004346 <__sflush_r+0x7e>
 800433c:	1c42      	adds	r2, r0, #1
 800433e:	d101      	bne.n	8004344 <__sflush_r+0x7c>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b903      	cbnz	r3, 8004346 <__sflush_r+0x7e>
 8004344:	6560      	str	r0, [r4, #84]	; 0x54
 8004346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004348:	602f      	str	r7, [r5, #0]
 800434a:	2900      	cmp	r1, #0
 800434c:	d0c9      	beq.n	80042e2 <__sflush_r+0x1a>
 800434e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004352:	4299      	cmp	r1, r3
 8004354:	d002      	beq.n	800435c <__sflush_r+0x94>
 8004356:	4628      	mov	r0, r5
 8004358:	f7ff febe 	bl	80040d8 <_free_r>
 800435c:	2000      	movs	r0, #0
 800435e:	6360      	str	r0, [r4, #52]	; 0x34
 8004360:	e7c0      	b.n	80042e4 <__sflush_r+0x1c>
 8004362:	2301      	movs	r3, #1
 8004364:	4628      	mov	r0, r5
 8004366:	47b0      	blx	r6
 8004368:	1c41      	adds	r1, r0, #1
 800436a:	d1c8      	bne.n	80042fe <__sflush_r+0x36>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0c5      	beq.n	80042fe <__sflush_r+0x36>
 8004372:	2b1d      	cmp	r3, #29
 8004374:	d001      	beq.n	800437a <__sflush_r+0xb2>
 8004376:	2b16      	cmp	r3, #22
 8004378:	d101      	bne.n	800437e <__sflush_r+0xb6>
 800437a:	602f      	str	r7, [r5, #0]
 800437c:	e7b1      	b.n	80042e2 <__sflush_r+0x1a>
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	e7ad      	b.n	80042e4 <__sflush_r+0x1c>
 8004388:	690f      	ldr	r7, [r1, #16]
 800438a:	2f00      	cmp	r7, #0
 800438c:	d0a9      	beq.n	80042e2 <__sflush_r+0x1a>
 800438e:	0793      	lsls	r3, r2, #30
 8004390:	680e      	ldr	r6, [r1, #0]
 8004392:	bf08      	it	eq
 8004394:	694b      	ldreq	r3, [r1, #20]
 8004396:	600f      	str	r7, [r1, #0]
 8004398:	bf18      	it	ne
 800439a:	2300      	movne	r3, #0
 800439c:	eba6 0807 	sub.w	r8, r6, r7
 80043a0:	608b      	str	r3, [r1, #8]
 80043a2:	f1b8 0f00 	cmp.w	r8, #0
 80043a6:	dd9c      	ble.n	80042e2 <__sflush_r+0x1a>
 80043a8:	6a21      	ldr	r1, [r4, #32]
 80043aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043ac:	4643      	mov	r3, r8
 80043ae:	463a      	mov	r2, r7
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b0      	blx	r6
 80043b4:	2800      	cmp	r0, #0
 80043b6:	dc06      	bgt.n	80043c6 <__sflush_r+0xfe>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	e78e      	b.n	80042e4 <__sflush_r+0x1c>
 80043c6:	4407      	add	r7, r0
 80043c8:	eba8 0800 	sub.w	r8, r8, r0
 80043cc:	e7e9      	b.n	80043a2 <__sflush_r+0xda>
 80043ce:	bf00      	nop
 80043d0:	dfbffffe 	.word	0xdfbffffe

080043d4 <_fflush_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	690b      	ldr	r3, [r1, #16]
 80043d8:	4605      	mov	r5, r0
 80043da:	460c      	mov	r4, r1
 80043dc:	b913      	cbnz	r3, 80043e4 <_fflush_r+0x10>
 80043de:	2500      	movs	r5, #0
 80043e0:	4628      	mov	r0, r5
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	b118      	cbz	r0, 80043ee <_fflush_r+0x1a>
 80043e6:	6a03      	ldr	r3, [r0, #32]
 80043e8:	b90b      	cbnz	r3, 80043ee <_fflush_r+0x1a>
 80043ea:	f7ff fc8f 	bl	8003d0c <__sinit>
 80043ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f3      	beq.n	80043de <_fflush_r+0xa>
 80043f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043f8:	07d0      	lsls	r0, r2, #31
 80043fa:	d404      	bmi.n	8004406 <_fflush_r+0x32>
 80043fc:	0599      	lsls	r1, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_fflush_r+0x32>
 8004400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004402:	f7ff fe66 	bl	80040d2 <__retarget_lock_acquire_recursive>
 8004406:	4628      	mov	r0, r5
 8004408:	4621      	mov	r1, r4
 800440a:	f7ff ff5d 	bl	80042c8 <__sflush_r>
 800440e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004410:	07da      	lsls	r2, r3, #31
 8004412:	4605      	mov	r5, r0
 8004414:	d4e4      	bmi.n	80043e0 <_fflush_r+0xc>
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	059b      	lsls	r3, r3, #22
 800441a:	d4e1      	bmi.n	80043e0 <_fflush_r+0xc>
 800441c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800441e:	f7ff fe59 	bl	80040d4 <__retarget_lock_release_recursive>
 8004422:	e7dd      	b.n	80043e0 <_fflush_r+0xc>

08004424 <__swhatbuf_r>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	460c      	mov	r4, r1
 8004428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442c:	2900      	cmp	r1, #0
 800442e:	b096      	sub	sp, #88	; 0x58
 8004430:	4615      	mov	r5, r2
 8004432:	461e      	mov	r6, r3
 8004434:	da0d      	bge.n	8004452 <__swhatbuf_r+0x2e>
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f013 0f80 	tst.w	r3, #128	; 0x80
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	bf0c      	ite	eq
 8004442:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004446:	2340      	movne	r3, #64	; 0x40
 8004448:	2000      	movs	r0, #0
 800444a:	6031      	str	r1, [r6, #0]
 800444c:	602b      	str	r3, [r5, #0]
 800444e:	b016      	add	sp, #88	; 0x58
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	466a      	mov	r2, sp
 8004454:	f000 f848 	bl	80044e8 <_fstat_r>
 8004458:	2800      	cmp	r0, #0
 800445a:	dbec      	blt.n	8004436 <__swhatbuf_r+0x12>
 800445c:	9901      	ldr	r1, [sp, #4]
 800445e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004462:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004466:	4259      	negs	r1, r3
 8004468:	4159      	adcs	r1, r3
 800446a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800446e:	e7eb      	b.n	8004448 <__swhatbuf_r+0x24>

08004470 <__smakebuf_r>:
 8004470:	898b      	ldrh	r3, [r1, #12]
 8004472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004474:	079d      	lsls	r5, r3, #30
 8004476:	4606      	mov	r6, r0
 8004478:	460c      	mov	r4, r1
 800447a:	d507      	bpl.n	800448c <__smakebuf_r+0x1c>
 800447c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2301      	movs	r3, #1
 8004486:	6163      	str	r3, [r4, #20]
 8004488:	b002      	add	sp, #8
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	ab01      	add	r3, sp, #4
 800448e:	466a      	mov	r2, sp
 8004490:	f7ff ffc8 	bl	8004424 <__swhatbuf_r>
 8004494:	9900      	ldr	r1, [sp, #0]
 8004496:	4605      	mov	r5, r0
 8004498:	4630      	mov	r0, r6
 800449a:	f7ff fe89 	bl	80041b0 <_malloc_r>
 800449e:	b948      	cbnz	r0, 80044b4 <__smakebuf_r+0x44>
 80044a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a4:	059a      	lsls	r2, r3, #22
 80044a6:	d4ef      	bmi.n	8004488 <__smakebuf_r+0x18>
 80044a8:	f023 0303 	bic.w	r3, r3, #3
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	e7e3      	b.n	800447c <__smakebuf_r+0xc>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	6020      	str	r0, [r4, #0]
 80044b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	9b00      	ldr	r3, [sp, #0]
 80044c0:	6163      	str	r3, [r4, #20]
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	6120      	str	r0, [r4, #16]
 80044c6:	b15b      	cbz	r3, 80044e0 <__smakebuf_r+0x70>
 80044c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f81d 	bl	800450c <_isatty_r>
 80044d2:	b128      	cbz	r0, 80044e0 <__smakebuf_r+0x70>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	431d      	orrs	r5, r3
 80044e4:	81a5      	strh	r5, [r4, #12]
 80044e6:	e7cf      	b.n	8004488 <__smakebuf_r+0x18>

080044e8 <_fstat_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4d07      	ldr	r5, [pc, #28]	; (8004508 <_fstat_r+0x20>)
 80044ec:	2300      	movs	r3, #0
 80044ee:	4604      	mov	r4, r0
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	f7fc fc5c 	bl	8000db2 <_fstat>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	d102      	bne.n	8004504 <_fstat_r+0x1c>
 80044fe:	682b      	ldr	r3, [r5, #0]
 8004500:	b103      	cbz	r3, 8004504 <_fstat_r+0x1c>
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	bd38      	pop	{r3, r4, r5, pc}
 8004506:	bf00      	nop
 8004508:	20000660 	.word	0x20000660

0800450c <_isatty_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d06      	ldr	r5, [pc, #24]	; (8004528 <_isatty_r+0x1c>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f7fc fc5b 	bl	8000dd2 <_isatty>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_isatty_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_isatty_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	20000660 	.word	0x20000660

0800452c <_sbrk_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4d06      	ldr	r5, [pc, #24]	; (8004548 <_sbrk_r+0x1c>)
 8004530:	2300      	movs	r3, #0
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fc fc64 	bl	8000e04 <_sbrk>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_sbrk_r+0x1a>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_sbrk_r+0x1a>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20000660 	.word	0x20000660

0800454c <_init>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr

08004558 <_fini>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr
