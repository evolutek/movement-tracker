
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800c0c8  0800c0c8  0001c0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c800  0800c800  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c800  0800c800  0001c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c808  0800c808  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c808  0800c808  0001c808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c810  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  200001e8  0800c9f8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000998  0800c9f8  00020998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001881f  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031bc  00000000  00000000  00038a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9a  00000000  00000000  0003d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043eb  00000000  00000000  0003e00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018da4  00000000  00000000  000423f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce364  00000000  00000000  0005b199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f44  00000000  00000000  00129500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00130444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c0ac 	.word	0x0800c0ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800c0ac 	.word	0x0800c0ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <print_header>:
int16_t angular_velocity_Q1 = 10;
int16_t gravity_Q1 = 8;

/*============================ Debug ============================*/

void print_header(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
		//Print the four byte header
		printf("Header:");
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <print_header+0x50>)
 8001048:	f006 f916 	bl	8007278 <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 800104c:	2300      	movs	r3, #0
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	e014      	b.n	800107c <print_header+0x3c>
		{
			printf(" ");
 8001052:	2020      	movs	r0, #32
 8001054:	f006 f922 	bl	800729c <putchar>
			if (shtpHeader[x] < 0x10)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <print_header+0x54>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	d802      	bhi.n	8001068 <print_header+0x28>
				printf("0");
 8001062:	2030      	movs	r0, #48	; 0x30
 8001064:	f006 f91a 	bl	800729c <putchar>
			printf("%01X",shtpHeader[x]);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <print_header+0x54>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <print_header+0x58>)
 8001072:	f006 f901 	bl	8007278 <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	3301      	adds	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d9e7      	bls.n	8001052 <print_header+0x12>
		}
		printf("\n");
 8001082:	200a      	movs	r0, #10
 8001084:	f006 f90a 	bl	800729c <putchar>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0800c0c8 	.word	0x0800c0c8
 8001094:	20000204 	.word	0x20000204
 8001098:	0800c0d0 	.word	0x0800c0d0

0800109c <print_packet>:
void print_packet(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
 80010a2:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <print_packet+0x114>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <print_packet+0x114>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	80fb      	strh	r3, [r7, #6]

	//Print the four byte header
	print_header();
 80010b6:	f7ff ffc3 	bl	8001040 <print_header>

	uint16_t printLength = packetLength - 4;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	3b04      	subs	r3, #4
 80010be:	80bb      	strh	r3, [r7, #4]
	if (printLength > 40){printLength = 40; printf("(Shortened) ");} //Artificial limit. We don't want the phone book.
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	2b28      	cmp	r3, #40	; 0x28
 80010c4:	d904      	bls.n	80010d0 <print_packet+0x34>
 80010c6:	2328      	movs	r3, #40	; 0x28
 80010c8:	80bb      	strh	r3, [r7, #4]
 80010ca:	483a      	ldr	r0, [pc, #232]	; (80011b4 <print_packet+0x118>)
 80010cc:	f006 f8d4 	bl	8007278 <iprintf>

	if (packetLength & 1 << 15){
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da06      	bge.n	80010e6 <print_packet+0x4a>
			printf("[Continued] ");
 80010d8:	4837      	ldr	r0, [pc, #220]	; (80011b8 <print_packet+0x11c>)
 80010da:	f006 f8cd 	bl	8007278 <iprintf>
			packetLength &= ~(1 << 15);
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010e4:	80fb      	strh	r3, [r7, #6]
		}
	printf("Body:");
 80010e6:	4835      	ldr	r0, [pc, #212]	; (80011bc <print_packet+0x120>)
 80010e8:	f006 f8c6 	bl	8007278 <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	70fb      	strb	r3, [r7, #3]
 80010f0:	e014      	b.n	800111c <print_packet+0x80>
	{
		printf(" ");
 80010f2:	2020      	movs	r0, #32
 80010f4:	f006 f8d2 	bl	800729c <putchar>
		if (shtpData[x] < 0x10)
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <print_packet+0x124>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	d802      	bhi.n	8001108 <print_packet+0x6c>
			printf("0");
 8001102:	2030      	movs	r0, #48	; 0x30
 8001104:	f006 f8ca 	bl	800729c <putchar>
		printf("%01X",shtpData[x]);
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <print_packet+0x124>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	4619      	mov	r1, r3
 8001110:	482c      	ldr	r0, [pc, #176]	; (80011c4 <print_packet+0x128>)
 8001112:	f006 f8b1 	bl	8007278 <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	3301      	adds	r3, #1
 800111a:	70fb      	strb	r3, [r7, #3]
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	b29b      	uxth	r3, r3
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	d8e5      	bhi.n	80010f2 <print_packet+0x56>
	}

	printf("\n");
 8001126:	200a      	movs	r0, #10
 8001128:	f006 f8b8 	bl	800729c <putchar>

	printf("Length: %u ", packetLength);
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	4619      	mov	r1, r3
 8001130:	4825      	ldr	r0, [pc, #148]	; (80011c8 <print_packet+0x12c>)
 8001132:	f006 f8a1 	bl	8007278 <iprintf>

	printf("Channel: ");
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <print_packet+0x130>)
 8001138:	f006 f89e 	bl	8007278 <iprintf>
	switch (shtpHeader[2]){
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <print_packet+0x114>)
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d827      	bhi.n	8001194 <print_packet+0xf8>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <print_packet+0xb0>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	08001165 	.word	0x08001165
 8001150:	0800116d 	.word	0x0800116d
 8001154:	08001175 	.word	0x08001175
 8001158:	0800117d 	.word	0x0800117d
 800115c:	08001185 	.word	0x08001185
 8001160:	0800118d 	.word	0x0800118d
		case 0: printf("Command"); break;
 8001164:	481a      	ldr	r0, [pc, #104]	; (80011d0 <print_packet+0x134>)
 8001166:	f006 f887 	bl	8007278 <iprintf>
 800116a:	e01a      	b.n	80011a2 <print_packet+0x106>
		case 1: printf("Executable"); break;
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <print_packet+0x138>)
 800116e:	f006 f883 	bl	8007278 <iprintf>
 8001172:	e016      	b.n	80011a2 <print_packet+0x106>
		case 2: printf("Control"); break;
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <print_packet+0x13c>)
 8001176:	f006 f87f 	bl	8007278 <iprintf>
 800117a:	e012      	b.n	80011a2 <print_packet+0x106>
		case 3: printf("Sensor-report"); break;
 800117c:	4817      	ldr	r0, [pc, #92]	; (80011dc <print_packet+0x140>)
 800117e:	f006 f87b 	bl	8007278 <iprintf>
 8001182:	e00e      	b.n	80011a2 <print_packet+0x106>
		case 4: printf("Wake-report"); break;
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <print_packet+0x144>)
 8001186:	f006 f877 	bl	8007278 <iprintf>
 800118a:	e00a      	b.n	80011a2 <print_packet+0x106>
		case 5: printf("Gyro-vector"); break;
 800118c:	4815      	ldr	r0, [pc, #84]	; (80011e4 <print_packet+0x148>)
 800118e:	f006 f873 	bl	8007278 <iprintf>
 8001192:	e006      	b.n	80011a2 <print_packet+0x106>
		default: printf("Raw header : %hu", shtpHeader[2]); break;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <print_packet+0x114>)
 8001196:	789b      	ldrb	r3, [r3, #2]
 8001198:	4619      	mov	r1, r3
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <print_packet+0x14c>)
 800119c:	f006 f86c 	bl	8007278 <iprintf>
 80011a0:	bf00      	nop
	}
	printf("\n");
 80011a2:	200a      	movs	r0, #10
 80011a4:	f006 f87a 	bl	800729c <putchar>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	0800c0d8 	.word	0x0800c0d8
 80011b8:	0800c0e8 	.word	0x0800c0e8
 80011bc:	0800c0f8 	.word	0x0800c0f8
 80011c0:	20000208 	.word	0x20000208
 80011c4:	0800c0d0 	.word	0x0800c0d0
 80011c8:	0800c100 	.word	0x0800c100
 80011cc:	0800c10c 	.word	0x0800c10c
 80011d0:	0800c118 	.word	0x0800c118
 80011d4:	0800c120 	.word	0x0800c120
 80011d8:	0800c12c 	.word	0x0800c12c
 80011dc:	0800c134 	.word	0x0800c134
 80011e0:	0800c144 	.word	0x0800c144
 80011e4:	0800c150 	.word	0x0800c150
 80011e8:	0800c15c 	.word	0x0800c15c

080011ec <_enable_slave>:

/*============================ Hardware abstraction ============================*/

static inline void _enable_slave(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f002 f88e 	bl	8003318 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_disable_slave>:
static inline void _disable_slave(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f002 f884 	bl	8003318 <HAL_GPIO_WritePin>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <_reset_slave_blocking>:
static inline void _reset_slave_blocking(){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2101      	movs	r1, #1
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f002 f87a 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001224:	200a      	movs	r0, #10
 8001226:	f001 fbef 	bl	8002a08 <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2101      	movs	r1, #1
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f002 f871 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001236:	200a      	movs	r0, #10
 8001238:	f001 fbe6 	bl	8002a08 <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2101      	movs	r1, #1
 8001240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001244:	f002 f868 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f001 fbdd 	bl	8002a08 <HAL_Delay>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}

08001252 <_sensor_awaiting>:
static inline bool _sensor_awaiting(){
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin);
 8001256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f002 f843 	bl	80032e8 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}

08001272 <_wait_for_int_blocking_timeout>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
static bool _wait_for_int_blocking_timeout(uint16_t timeout){
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	80fb      	strh	r3, [r7, #6]
	for (uint16_t counter = 0; counter < timeout; counter++){
 800127c:	2300      	movs	r3, #0
 800127e:	81fb      	strh	r3, [r7, #14]
 8001280:	e010      	b.n	80012a4 <_wait_for_int_blocking_timeout+0x32>
		if (!HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin))
 8001282:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f002 f82d 	bl	80032e8 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <_wait_for_int_blocking_timeout+0x26>
			return (true);
 8001294:	2301      	movs	r3, #1
 8001296:	e00a      	b.n	80012ae <_wait_for_int_blocking_timeout+0x3c>
		HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fbb5 	bl	8002a08 <HAL_Delay>
	for (uint16_t counter = 0; counter < timeout; counter++){
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	3301      	adds	r3, #1
 80012a2:	81fb      	strh	r3, [r7, #14]
 80012a4:	89fa      	ldrh	r2, [r7, #14]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3ea      	bcc.n	8001282 <_wait_for_int_blocking_timeout+0x10>
	}
	return (false);
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_wait_for_int_blocking>:
static bool _wait_for_int_blocking(){
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
	return _wait_for_int_blocking_timeout(BNO_STANDARD_INT_TIMEOUT);
 80012ba:	20fa      	movs	r0, #250	; 0xfa
 80012bc:	f7ff ffd9 	bl	8001272 <_wait_for_int_blocking_timeout>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <_receive_packet>:

/*============================ Low Level ============================*/

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool _receive_packet(void){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 80012ce:	f7ff ffc0 	bl	8001252 <_sensor_awaiting>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <_receive_packet+0x1a>
		return (false); //Data is not available
 80012de:	2300      	movs	r3, #0
 80012e0:	e043      	b.n	800136a <_receive_packet+0xa2>

	//Get first four bytes to find out how much data we need to read
	_enable_slave();
 80012e2:	f7ff ff83 	bl	80011ec <_enable_slave>

	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(&hspi1, shtpHeader, 4, 500);
 80012e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ea:	2204      	movs	r2, #4
 80012ec:	4921      	ldr	r1, [pc, #132]	; (8001374 <_receive_packet+0xac>)
 80012ee:	4822      	ldr	r0, [pc, #136]	; (8001378 <_receive_packet+0xb0>)
 80012f0:	f003 fcb5 	bl	8004c5e <HAL_SPI_Receive>
	shtpHeader[2] : channelNumber;
	shtpHeader[3] : sequenceNumber;
	*/

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = (((uint16_t)shtpHeader[1]/*MSB*/) << 8) | ((uint16_t)shtpHeader[0]/*LSB*/);
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <_receive_packet+0xac>)
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <_receive_packet+0xac>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800130e:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit

	if (dataLength == 0){
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10b      	bne.n	800132e <_receive_packet+0x66>
		//Packet is empty
		if (_debug) printf("Packet empty !");
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <_receive_packet+0xb4>)
 8001318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <_receive_packet+0x5e>
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <_receive_packet+0xb8>)
 8001322:	f005 ffa9 	bl	8007278 <iprintf>
		_disable_slave();
 8001326:	f7ff ff6b 	bl	8001200 <_disable_slave>
		return (false); //All done
 800132a:	2300      	movs	r3, #0
 800132c:	e01d      	b.n	800136a <_receive_packet+0xa2>
	}

	dataLength -= 4; //Remove the header bytes from the data count
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	3b04      	subs	r3, #4
 8001332:	80fb      	strh	r3, [r7, #6]
	//Read incoming data into the shtpData array

	if (dataLength > BNO_MAX_PACKET_SIZE)  dataLength = BNO_MAX_PACKET_SIZE;
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800133a:	d902      	bls.n	8001342 <_receive_packet+0x7a>
 800133c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001340:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1,shtpData, dataLength, 500);
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001348:	490e      	ldr	r1, [pc, #56]	; (8001384 <_receive_packet+0xbc>)
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <_receive_packet+0xb0>)
 800134c:	f003 fc87 	bl	8004c5e <HAL_SPI_Receive>

	_disable_slave(); //Release BNO080
 8001350:	f7ff ff56 	bl	8001200 <_disable_slave>

	if(_debug == 2){printf("New packet retrieved :\n");print_packet();}
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <_receive_packet+0xb4>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d104      	bne.n	8001368 <_receive_packet+0xa0>
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <_receive_packet+0xc0>)
 8001360:	f005 fff8 	bl	8007354 <puts>
 8001364:	f7ff fe9a 	bl	800109c <print_packet>
		has_reset = 0;
		printf("Sensor is back up and running \n");
	}
	*/

	return (true); //We're done!
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000204 	.word	0x20000204
 8001378:	20000458 	.word	0x20000458
 800137c:	20000000 	.word	0x20000000
 8001380:	0800c170 	.word	0x0800c170
 8001384:	20000208 	.word	0x20000208
 8001388:	0800c180 	.word	0x0800c180

0800138c <_send_packet>:
static bool _send_packet(uint8_t channelNumber, uint8_t dataLength){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	460a      	mov	r2, r1
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	3304      	adds	r3, #4
 80013a0:	73fb      	strb	r3, [r7, #15]

	//Wait for BNO080 to indicate it is available for communication
	if (_wait_for_int_blocking() == false)
 80013a2:	f7ff ff88 	bl	80012b6 <_wait_for_int_blocking>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <_send_packet+0x2a>
		return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e025      	b.n	8001402 <_send_packet+0x76>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode 3
	_enable_slave();
 80013b6:	f7ff ff19 	bl	80011ec <_enable_slave>

	//Send the 4 byte packet header
	uint8_t header_buffer[4];
	header_buffer[0] = (packetLength & 0xFF); //Packet length LSB // uhhhhhh & 0xFF ?
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	723b      	strb	r3, [r7, #8]
	header_buffer[1] = (packetLength >> 8); //Packet length MSB
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	121b      	asrs	r3, r3, #8
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	727b      	strb	r3, [r7, #9]
	header_buffer[2] = channelNumber;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	72bb      	strb	r3, [r7, #10]
	header_buffer[3] = (sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <_send_packet+0x80>)
 80013ce:	5cd2      	ldrb	r2, [r2, r3]
 80013d0:	1c51      	adds	r1, r2, #1
 80013d2:	b2c8      	uxtb	r0, r1
 80013d4:	490d      	ldr	r1, [pc, #52]	; (800140c <_send_packet+0x80>)
 80013d6:	54c8      	strb	r0, [r1, r3]
 80013d8:	4613      	mov	r3, r2
 80013da:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi1, header_buffer, 4, 500);
 80013dc:	f107 0108 	add.w	r1, r7, #8
 80013e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e4:	2204      	movs	r2, #4
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <_send_packet+0x84>)
 80013e8:	f003 facb 	bl	8004982 <HAL_SPI_Transmit>

	//Send the user's data packet
	HAL_SPI_Transmit(&hspi1, shtpData, dataLength, 500);
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <_send_packet+0x88>)
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <_send_packet+0x84>)
 80013f8:	f003 fac3 	bl	8004982 <HAL_SPI_Transmit>

	_disable_slave();
 80013fc:	f7ff ff00 	bl	8001200 <_disable_slave>

	return (true);
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000334 	.word	0x20000334
 8001410:	20000458 	.word	0x20000458
 8001414:	20000208 	.word	0x20000208

08001418 <_set_feature_command>:

static void _set_feature_command(uint8_t reportID, uint16_t millisBetweenReports, uint32_t specificConfig){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	603a      	str	r2, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
 8001424:	460b      	mov	r3, r1
 8001426:	80bb      	strh	r3, [r7, #4]

	long microsBetweenReports = (long)millisBetweenReports * 1000L;
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	60fb      	str	r3, [r7, #12]

	shtpData[0] = BNO_SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <_set_feature_command+0xb0>)
 8001436:	22fd      	movs	r2, #253	; 0xfd
 8001438:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <_set_feature_command+0xb0>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <_set_feature_command+0xb0>)
 8001442:	2200      	movs	r2, #0
 8001444:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <_set_feature_command+0xb0>)
 8001448:	2200      	movs	r2, #0
 800144a:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <_set_feature_command+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <_set_feature_command+0xb0>)
 8001458:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	121b      	asrs	r3, r3, #8
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <_set_feature_command+0xb0>)
 8001462:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	141b      	asrs	r3, r3, #16
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <_set_feature_command+0xb0>)
 800146c:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0e1b      	lsrs	r3, r3, #24
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <_set_feature_command+0xb0>)
 8001476:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_set_feature_command+0xb0>)
 800147a:	2200      	movs	r2, #0
 800147c:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <_set_feature_command+0xb0>)
 8001480:	2200      	movs	r2, #0
 8001482:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <_set_feature_command+0xb0>)
 8001486:	2200      	movs	r2, #0
 8001488:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <_set_feature_command+0xb0>)
 800148c:	2200      	movs	r2, #0
 800148e:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <_set_feature_command+0xb0>)
 8001496:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <_set_feature_command+0xb0>)
 80014a0:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_set_feature_command+0xb0>)
 80014aa:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	0e1b      	lsrs	r3, r3, #24
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <_set_feature_command+0xb0>)
 80014b4:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	_send_packet(CHANNEL_CONTROL, 17);
 80014b6:	2302      	movs	r3, #2
 80014b8:	2111      	movs	r1, #17
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff66 	bl	800138c <_send_packet>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000208 	.word	0x20000208
 80014cc:	00000000 	.word	0x00000000

080014d0 <_quaternion_to_float>:

static float _quaternion_to_float(int16_t fixedPointValue, uint8_t qPoint){
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	80fb      	strh	r3, [r7, #6]
 80014dc:	4613      	mov	r3, r2
 80014de:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ec:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	425b      	negs	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f83d 	bl	8000574 <__aeabi_i2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b11 	vmov	d1, r2, r3
 8001502:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001540 <_quaternion_to_float+0x70>
 8001506:	f009 fc01 	bl	800ad0c <pow>
 800150a:	ec55 4b10 	vmov	r4, r5, d0
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff f842 	bl	8000598 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7ff f894 	bl	8000648 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb86 	bl	8000c38 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bdb0      	pop	{r4, r5, r7, pc}
 8001540:	00000000 	.word	0x00000000
 8001544:	40000000 	.word	0x40000000

08001548 <_parse_input_report>:
//shtpData[4:5]: i/accel x/gyro x/etc
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
static uint16_t _parse_input_report(void){
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800154e:	4ba0      	ldr	r3, [pc, #640]	; (80017d0 <_parse_input_report+0x288>)
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b9e      	ldr	r3, [pc, #632]	; (80017d0 <_parse_input_report+0x288>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	81fb      	strh	r3, [r7, #14]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001566:	81fb      	strh	r3, [r7, #14]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	3b04      	subs	r3, #4
 800156c:	b29b      	uxth	r3, r3
 800156e:	81fb      	strh	r3, [r7, #14]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001570:	4b98      	ldr	r3, [pc, #608]	; (80017d4 <_parse_input_report+0x28c>)
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	061a      	lsls	r2, r3, #24
 8001576:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <_parse_input_report+0x28c>)
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	431a      	orrs	r2, r3
 800157e:	4b95      	ldr	r3, [pc, #596]	; (80017d4 <_parse_input_report+0x28c>)
 8001580:	789b      	ldrb	r3, [r3, #2]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4313      	orrs	r3, r2
 8001586:	4a93      	ldr	r2, [pc, #588]	; (80017d4 <_parse_input_report+0x28c>)
 8001588:	7852      	ldrb	r2, [r2, #1]
 800158a:	4313      	orrs	r3, r2
 800158c:	4a92      	ldr	r2, [pc, #584]	; (80017d8 <_parse_input_report+0x290>)
 800158e:	6013      	str	r3, [r2, #0]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
 8001590:	4b8f      	ldr	r3, [pc, #572]	; (80017d0 <_parse_input_report+0x288>)
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	2205      	movs	r2, #5
 8001596:	4293      	cmp	r3, r2
 8001598:	d155      	bne.n	8001646 <_parse_input_report+0xfe>
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
 800159a:	4b8e      	ldr	r3, [pc, #568]	; (80017d4 <_parse_input_report+0x28c>)
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	4b8c      	ldr	r3, [pc, #560]	; (80017d4 <_parse_input_report+0x28c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <_parse_input_report+0x294>)
 80015b0:	801a      	strh	r2, [r3, #0]
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <_parse_input_report+0x28c>)
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b86      	ldr	r3, [pc, #536]	; (80017d4 <_parse_input_report+0x28c>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <_parse_input_report+0x298>)
 80015c8:	801a      	strh	r2, [r3, #0]
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
 80015ca:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <_parse_input_report+0x28c>)
 80015cc:	795b      	ldrb	r3, [r3, #5]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b80      	ldr	r3, [pc, #512]	; (80017d4 <_parse_input_report+0x28c>)
 80015d4:	791b      	ldrb	r3, [r3, #4]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <_parse_input_report+0x29c>)
 80015e0:	801a      	strh	r2, [r3, #0]
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
 80015e2:	4b7c      	ldr	r3, [pc, #496]	; (80017d4 <_parse_input_report+0x28c>)
 80015e4:	79db      	ldrb	r3, [r3, #7]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b7a      	ldr	r3, [pc, #488]	; (80017d4 <_parse_input_report+0x28c>)
 80015ec:	799b      	ldrb	r3, [r3, #6]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <_parse_input_report+0x2a0>)
 80015f8:	801a      	strh	r2, [r3, #0]
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <_parse_input_report+0x28c>)
 80015fc:	7a5b      	ldrb	r3, [r3, #9]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b74      	ldr	r3, [pc, #464]	; (80017d4 <_parse_input_report+0x28c>)
 8001604:	7a1b      	ldrb	r3, [r3, #8]
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b77      	ldr	r3, [pc, #476]	; (80017ec <_parse_input_report+0x2a4>)
 8001610:	801a      	strh	r2, [r3, #0]
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <_parse_input_report+0x28c>)
 8001614:	7adb      	ldrb	r3, [r3, #11]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <_parse_input_report+0x28c>)
 800161c:	7a9b      	ldrb	r3, [r3, #10]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <_parse_input_report+0x2a8>)
 8001628:	801a      	strh	r2, [r3, #0]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
 800162a:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <_parse_input_report+0x28c>)
 800162c:	7b5b      	ldrb	r3, [r3, #13]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <_parse_input_report+0x28c>)
 8001634:	7b1b      	ldrb	r3, [r3, #12]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b6d      	ldr	r3, [pc, #436]	; (80017f4 <_parse_input_report+0x2ac>)
 8001640:	801a      	strh	r2, [r3, #0]

		return BNO_REPORTID_GYRO_INTEGRATED_ROTATION_VECTOR;
 8001642:	232a      	movs	r3, #42	; 0x2a
 8001644:	e198      	b.n	8001978 <_parse_input_report+0x430>
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <_parse_input_report+0x28c>)
 8001648:	79db      	ldrb	r3, [r3, #7]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	737b      	strb	r3, [r7, #13]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001650:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <_parse_input_report+0x28c>)
 8001652:	7a9b      	ldrb	r3, [r3, #10]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <_parse_input_report+0x28c>)
 800165a:	7a5b      	ldrb	r3, [r3, #9]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	817b      	strh	r3, [r7, #10]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001664:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <_parse_input_report+0x28c>)
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <_parse_input_report+0x28c>)
 800166e:	7adb      	ldrb	r3, [r3, #11]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21b      	sxth	r3, r3
 8001676:	813b      	strh	r3, [r7, #8]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001678:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <_parse_input_report+0x28c>)
 800167a:	7b9b      	ldrb	r3, [r3, #14]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <_parse_input_report+0x28c>)
 8001682:	7b5b      	ldrb	r3, [r3, #13]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	80fb      	strh	r3, [r7, #6]
	uint16_t data4 = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001690:	2300      	movs	r3, #0
 8001692:	82bb      	strh	r3, [r7, #20]
	uint16_t data6 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	827b      	strh	r3, [r7, #18]

	if (dataLength - 5 > 9){
 8001698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169c:	2b0e      	cmp	r3, #14
 800169e:	dd09      	ble.n	80016b4 <_parse_input_report+0x16c>
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <_parse_input_report+0x28c>)
 80016a2:	7c1b      	ldrb	r3, [r3, #16]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <_parse_input_report+0x28c>)
 80016aa:	7bdb      	ldrb	r3, [r3, #15]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11){
 80016b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	dd09      	ble.n	80016d0 <_parse_input_report+0x188>
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <_parse_input_report+0x28c>)
 80016be:	7c9b      	ldrb	r3, [r3, #18]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <_parse_input_report+0x28c>)
 80016c6:	7c5b      	ldrb	r3, [r3, #17]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	82bb      	strh	r3, [r7, #20]
	}
	if (dataLength - 5 > 13){
 80016d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	dd09      	ble.n	80016ec <_parse_input_report+0x1a4>
		data6 = (uint16_t)shtpData[5 + 15] << 8 | shtpData[5 + 14];
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <_parse_input_report+0x28c>)
 80016da:	7d1b      	ldrb	r3, [r3, #20]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <_parse_input_report+0x28c>)
 80016e2:	7cdb      	ldrb	r3, [r3, #19]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	827b      	strh	r3, [r7, #18]
	}

	//Store these generic values to their proper global variable
	switch (shtpData[5]){
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <_parse_input_report+0x28c>)
 80016ee:	795b      	ldrb	r3, [r3, #5]
 80016f0:	2b29      	cmp	r3, #41	; 0x29
 80016f2:	dc5b      	bgt.n	80017ac <_parse_input_report+0x264>
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f340 8139 	ble.w	800196c <_parse_input_report+0x424>
 80016fa:	3b01      	subs	r3, #1
 80016fc:	2b28      	cmp	r3, #40	; 0x28
 80016fe:	f200 8135 	bhi.w	800196c <_parse_input_report+0x424>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <_parse_input_report+0x1c0>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	080017b5 	.word	0x080017b5
 800170c:	08001825 	.word	0x08001825
 8001710:	0800186f 	.word	0x0800186f
 8001714:	08001809 	.word	0x08001809
 8001718:	0800188b 	.word	0x0800188b
 800171c:	08001951 	.word	0x08001951
 8001720:	08001841 	.word	0x08001841
 8001724:	0800188b 	.word	0x0800188b
 8001728:	0800196d 	.word	0x0800196d
 800172c:	0800196d 	.word	0x0800196d
 8001730:	0800196d 	.word	0x0800196d
 8001734:	0800196d 	.word	0x0800196d
 8001738:	0800196d 	.word	0x0800196d
 800173c:	0800196d 	.word	0x0800196d
 8001740:	0800196d 	.word	0x0800196d
 8001744:	080018b3 	.word	0x080018b3
 8001748:	080018bd 	.word	0x080018bd
 800174c:	0800196d 	.word	0x0800196d
 8001750:	080018c5 	.word	0x080018c5
 8001754:	080018ff 	.word	0x080018ff
 8001758:	08001913 	.word	0x08001913
 800175c:	08001927 	.word	0x08001927
 8001760:	0800196d 	.word	0x0800196d
 8001764:	0800196d 	.word	0x0800196d
 8001768:	0800196d 	.word	0x0800196d
 800176c:	0800196d 	.word	0x0800196d
 8001770:	0800196d 	.word	0x0800196d
 8001774:	0800196d 	.word	0x0800196d
 8001778:	0800196d 	.word	0x0800196d
 800177c:	080018cf 	.word	0x080018cf
 8001780:	0800196d 	.word	0x0800196d
 8001784:	0800196d 	.word	0x0800196d
 8001788:	0800196d 	.word	0x0800196d
 800178c:	0800196d 	.word	0x0800196d
 8001790:	0800196d 	.word	0x0800196d
 8001794:	0800196d 	.word	0x0800196d
 8001798:	0800196d 	.word	0x0800196d
 800179c:	0800196d 	.word	0x0800196d
 80017a0:	0800196d 	.word	0x0800196d
 80017a4:	0800188b 	.word	0x0800188b
 80017a8:	0800188b 	.word	0x0800188b
 80017ac:	2bf1      	cmp	r3, #241	; 0xf1
 80017ae:	f000 80c4 	beq.w	800193a <_parse_input_report+0x3f2>
 80017b2:	e0db      	b.n	800196c <_parse_input_report+0x424>
	case (BNO_REPORTID_ACCELEROMETER):
		accelAccuracy = status;
 80017b4:	7b7b      	ldrb	r3, [r7, #13]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <_parse_input_report+0x2b0>)
 80017ba:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <_parse_input_report+0x2b4>)
 80017be:	897b      	ldrh	r3, [r7, #10]
 80017c0:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <_parse_input_report+0x2b8>)
 80017c4:	893b      	ldrh	r3, [r7, #8]
 80017c6:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <_parse_input_report+0x2bc>)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	8013      	strh	r3, [r2, #0]
		break;
 80017ce:	e0d0      	b.n	8001972 <_parse_input_report+0x42a>
 80017d0:	20000204 	.word	0x20000204
 80017d4:	20000208 	.word	0x20000208
 80017d8:	20000388 	.word	0x20000388
 80017dc:	20000368 	.word	0x20000368
 80017e0:	2000036a 	.word	0x2000036a
 80017e4:	2000036c 	.word	0x2000036c
 80017e8:	2000036e 	.word	0x2000036e
 80017ec:	20000374 	.word	0x20000374
 80017f0:	20000376 	.word	0x20000376
 80017f4:	20000378 	.word	0x20000378
 80017f8:	20000340 	.word	0x20000340
 80017fc:	2000033a 	.word	0x2000033a
 8001800:	2000033c 	.word	0x2000033c
 8001804:	2000033e 	.word	0x2000033e
	case (BNO_REPORTID_LINEAR_ACCELERATION):
		accelLinAccuracy = status;
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <_parse_input_report+0x43c>)
 800180e:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001810:	4a5d      	ldr	r2, [pc, #372]	; (8001988 <_parse_input_report+0x440>)
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001816:	4a5d      	ldr	r2, [pc, #372]	; (800198c <_parse_input_report+0x444>)
 8001818:	893b      	ldrh	r3, [r7, #8]
 800181a:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 800181c:	4a5c      	ldr	r2, [pc, #368]	; (8001990 <_parse_input_report+0x448>)
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	8013      	strh	r3, [r2, #0]
		break;
 8001822:	e0a6      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_GYROSCOPE):
		gyroAccuracy = status;
 8001824:	7b7b      	ldrb	r3, [r7, #13]
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <_parse_input_report+0x44c>)
 800182a:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 800182c:	4a5a      	ldr	r2, [pc, #360]	; (8001998 <_parse_input_report+0x450>)
 800182e:	897b      	ldrh	r3, [r7, #10]
 8001830:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001832:	4a5a      	ldr	r2, [pc, #360]	; (800199c <_parse_input_report+0x454>)
 8001834:	893b      	ldrh	r3, [r7, #8]
 8001836:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001838:	4a59      	ldr	r2, [pc, #356]	; (80019a0 <_parse_input_report+0x458>)
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	8013      	strh	r3, [r2, #0]
		break;
 800183e:	e098      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_UNCALIBRATED_GYRO):
		UncalibGyroAccuracy = status;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <_parse_input_report+0x45c>)
 8001846:	801a      	strh	r2, [r3, #0]
		rawUncalibGyroX = data1;
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <_parse_input_report+0x460>)
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	8013      	strh	r3, [r2, #0]
		rawUncalibGyroY = data2;
 800184e:	4a57      	ldr	r2, [pc, #348]	; (80019ac <_parse_input_report+0x464>)
 8001850:	893b      	ldrh	r3, [r7, #8]
 8001852:	8013      	strh	r3, [r2, #0]
		rawUncalibGyroZ = data3;
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <_parse_input_report+0x468>)
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	8013      	strh	r3, [r2, #0]
		rawBiasX  = data4;
 800185a:	4a56      	ldr	r2, [pc, #344]	; (80019b4 <_parse_input_report+0x46c>)
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	8013      	strh	r3, [r2, #0]
		rawBiasY  = data5;
 8001860:	4a55      	ldr	r2, [pc, #340]	; (80019b8 <_parse_input_report+0x470>)
 8001862:	8abb      	ldrh	r3, [r7, #20]
 8001864:	8013      	strh	r3, [r2, #0]
		rawBiasZ  = data6;
 8001866:	4a55      	ldr	r2, [pc, #340]	; (80019bc <_parse_input_report+0x474>)
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	8013      	strh	r3, [r2, #0]
		break;
 800186c:	e081      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_MAGNETIC_FIELD):
		magAccuracy = status;
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <_parse_input_report+0x478>)
 8001874:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001876:	4a53      	ldr	r2, [pc, #332]	; (80019c4 <_parse_input_report+0x47c>)
 8001878:	897b      	ldrh	r3, [r7, #10]
 800187a:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <_parse_input_report+0x480>)
 800187e:	893b      	ldrh	r3, [r7, #8]
 8001880:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001882:	4a52      	ldr	r2, [pc, #328]	; (80019cc <_parse_input_report+0x484>)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	8013      	strh	r3, [r2, #0]
		break;
 8001888:	e073      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_AR_VR_STABILIZED_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR):
	case (BNO_REPORTID_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_ROTATION_VECTOR):
		quatAccuracy = status;
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <_parse_input_report+0x488>)
 8001890:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001892:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <_parse_input_report+0x48c>)
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <_parse_input_report+0x490>)
 800189a:	893b      	ldrh	r3, [r7, #8]
 800189c:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 800189e:	4a4f      	ldr	r2, [pc, #316]	; (80019dc <_parse_input_report+0x494>)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 80018a4:	4a4e      	ldr	r2, [pc, #312]	; (80019e0 <_parse_input_report+0x498>)
 80018a6:	8afb      	ldrh	r3, [r7, #22]
 80018a8:	8013      	strh	r3, [r2, #0]
		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
 80018aa:	4a4e      	ldr	r2, [pc, #312]	; (80019e4 <_parse_input_report+0x49c>)
 80018ac:	8abb      	ldrh	r3, [r7, #20]
 80018ae:	8013      	strh	r3, [r2, #0]
		break;
 80018b0:	e05f      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_TAP_DETECTOR):
		tapDetector = shtpData[5 + 4]; //Byte 4 only
 80018b2:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <_parse_input_report+0x4a0>)
 80018b4:	7a5a      	ldrb	r2, [r3, #9]
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <_parse_input_report+0x4a4>)
 80018b8:	701a      	strb	r2, [r3, #0]
		break;
 80018ba:	e05a      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_STEP_COUNTER):
		stepCount = data3; //Bytes 8/9
 80018bc:	4a4c      	ldr	r2, [pc, #304]	; (80019f0 <_parse_input_report+0x4a8>)
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	8013      	strh	r3, [r2, #0]
		break;
 80018c2:	e056      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_STABILITY_CLASSIFIER):
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <_parse_input_report+0x4a0>)
 80018c6:	7a5a      	ldrb	r2, [r3, #9]
 80018c8:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <_parse_input_report+0x4ac>)
 80018ca:	701a      	strb	r2, [r3, #0]
		break;
 80018cc:	e051      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER):
		activityClassifier = shtpData[5 + 5]; //Most likely state
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <_parse_input_report+0x4a0>)
 80018d0:	7a9a      	ldrb	r2, [r3, #10]
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <_parse_input_report+0x4b0>)
 80018d4:	701a      	strb	r2, [r3, #0]

		//Load activity classification confidences into the array
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018d6:	2300      	movs	r3, #0
 80018d8:	747b      	strb	r3, [r7, #17]
 80018da:	e00c      	b.n	80018f6 <_parse_input_report+0x3ae>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80018dc:	7c7b      	ldrb	r3, [r7, #17]
 80018de:	f103 020b 	add.w	r2, r3, #11
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <_parse_input_report+0x4b4>)
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	440b      	add	r3, r1
 80018ea:	493f      	ldr	r1, [pc, #252]	; (80019e8 <_parse_input_report+0x4a0>)
 80018ec:	5c8a      	ldrb	r2, [r1, r2]
 80018ee:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018f0:	7c7b      	ldrb	r3, [r7, #17]
 80018f2:	3301      	adds	r3, #1
 80018f4:	747b      	strb	r3, [r7, #17]
 80018f6:	7c7b      	ldrb	r3, [r7, #17]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d9ef      	bls.n	80018dc <_parse_input_report+0x394>
		break;
 80018fc:	e039      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_RAW_ACCELEROMETER):
		memsRawAccelX = data1;
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <_parse_input_report+0x4b8>)
 8001900:	897b      	ldrh	r3, [r7, #10]
 8001902:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001904:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <_parse_input_report+0x4bc>)
 8001906:	893b      	ldrh	r3, [r7, #8]
 8001908:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 800190a:	4a3f      	ldr	r2, [pc, #252]	; (8001a08 <_parse_input_report+0x4c0>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	8013      	strh	r3, [r2, #0]
		break;
 8001910:	e02f      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_RAW_GYROSCOPE):
		memsRawGyroX = data1;
 8001912:	4a3e      	ldr	r2, [pc, #248]	; (8001a0c <_parse_input_report+0x4c4>)
 8001914:	897b      	ldrh	r3, [r7, #10]
 8001916:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001918:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <_parse_input_report+0x4c8>)
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 800191e:	4a3d      	ldr	r2, [pc, #244]	; (8001a14 <_parse_input_report+0x4cc>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	8013      	strh	r3, [r2, #0]
		break;
 8001924:	e025      	b.n	8001972 <_parse_input_report+0x42a>
	case (BNO_REPORTID_RAW_MAGNETOMETER):
		memsRawMagX = data1;
 8001926:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <_parse_input_report+0x4d0>)
 8001928:	897b      	ldrh	r3, [r7, #10]
 800192a:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 800192c:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <_parse_input_report+0x4d4>)
 800192e:	893b      	ldrh	r3, [r7, #8]
 8001930:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <_parse_input_report+0x4d8>)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	8013      	strh	r3, [r2, #0]
		break;
 8001938:	e01b      	b.n	8001972 <_parse_input_report+0x42a>
		/*
		if (_printDebug == true){
			_debugPort->println(F("!"));
		}*/
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <_parse_input_report+0x4a0>)
 800193c:	79db      	ldrb	r3, [r3, #7]
 800193e:	717b      	strb	r3, [r7, #5]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001940:	797b      	ldrb	r3, [r7, #5]
 8001942:	2b07      	cmp	r3, #7
 8001944:	d114      	bne.n	8001970 <_parse_input_report+0x428>
			/*if (_printDebug == true){
				_debugPort->println(F("ME Cal report found!"));
			}*/
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <_parse_input_report+0x4a0>)
 8001948:	7a9a      	ldrb	r2, [r3, #10]
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <_parse_input_report+0x4dc>)
 800194c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800194e:	e00f      	b.n	8001970 <_parse_input_report+0x428>
	case(BNO_REPORTID_GRAVITY):
		gravityAccuracy = status;
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <_parse_input_report+0x4e0>)
 8001956:	801a      	strh	r2, [r3, #0]
		gravityX = data1;
 8001958:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <_parse_input_report+0x4e4>)
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	8013      	strh	r3, [r2, #0]
		gravityY = data2;
 800195e:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <_parse_input_report+0x4e8>)
 8001960:	893b      	ldrh	r3, [r7, #8]
 8001962:	8013      	strh	r3, [r2, #0]
		gravityZ = data3;
 8001964:	4a33      	ldr	r2, [pc, #204]	; (8001a34 <_parse_input_report+0x4ec>)
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	8013      	strh	r3, [r2, #0]
		break;
 800196a:	e002      	b.n	8001972 <_parse_input_report+0x42a>
	default :
		return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e003      	b.n	8001978 <_parse_input_report+0x430>
		break;
 8001970:	bf00      	nop
	}
	//TODO additional feature reports may be strung together. Parse them all.

	return shtpData[5];
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <_parse_input_report+0x4a0>)
 8001974:	795b      	ldrb	r3, [r3, #5]
 8001976:	b29b      	uxth	r3, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20000348 	.word	0x20000348
 8001988:	20000342 	.word	0x20000342
 800198c:	20000344 	.word	0x20000344
 8001990:	20000346 	.word	0x20000346
 8001994:	20000350 	.word	0x20000350
 8001998:	2000034a 	.word	0x2000034a
 800199c:	2000034c 	.word	0x2000034c
 80019a0:	2000034e 	.word	0x2000034e
 80019a4:	2000035e 	.word	0x2000035e
 80019a8:	20000352 	.word	0x20000352
 80019ac:	20000354 	.word	0x20000354
 80019b0:	20000356 	.word	0x20000356
 80019b4:	20000358 	.word	0x20000358
 80019b8:	2000035a 	.word	0x2000035a
 80019bc:	2000035c 	.word	0x2000035c
 80019c0:	20000366 	.word	0x20000366
 80019c4:	20000360 	.word	0x20000360
 80019c8:	20000362 	.word	0x20000362
 80019cc:	20000364 	.word	0x20000364
 80019d0:	20000372 	.word	0x20000372
 80019d4:	20000368 	.word	0x20000368
 80019d8:	2000036a 	.word	0x2000036a
 80019dc:	2000036c 	.word	0x2000036c
 80019e0:	2000036e 	.word	0x2000036e
 80019e4:	20000370 	.word	0x20000370
 80019e8:	20000208 	.word	0x20000208
 80019ec:	20000382 	.word	0x20000382
 80019f0:	20000384 	.word	0x20000384
 80019f4:	2000038c 	.word	0x2000038c
 80019f8:	2000038d 	.word	0x2000038d
 80019fc:	20000390 	.word	0x20000390
 8001a00:	20000396 	.word	0x20000396
 8001a04:	20000398 	.word	0x20000398
 8001a08:	2000039a 	.word	0x2000039a
 8001a0c:	2000039c 	.word	0x2000039c
 8001a10:	2000039e 	.word	0x2000039e
 8001a14:	200003a0 	.word	0x200003a0
 8001a18:	200003a2 	.word	0x200003a2
 8001a1c:	200003a4 	.word	0x200003a4
 8001a20:	200003a6 	.word	0x200003a6
 8001a24:	20000394 	.word	0x20000394
 8001a28:	20000380 	.word	0x20000380
 8001a2c:	2000037a 	.word	0x2000037a
 8001a30:	2000037c 	.word	0x2000037c
 8001a34:	2000037e 	.word	0x2000037e

08001a38 <_parse_command_report>:
//shtpData[5 + 4]: R4
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
static uint16_t _parse_command_report(void){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
	if (shtpData[0] == BNO_SHTP_REPORT_COMMAND_RESPONSE){
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <_parse_command_report+0x38>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bf1      	cmp	r3, #241	; 0xf1
 8001a44:	d10d      	bne.n	8001a62 <_parse_command_report+0x2a>
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <_parse_command_report+0x38>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	71fb      	strb	r3, [r7, #7]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d103      	bne.n	8001a5a <_parse_command_report+0x22>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_parse_command_report+0x38>)
 8001a54:	795a      	ldrb	r2, [r3, #5]
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_parse_command_report+0x3c>)
 8001a58:	701a      	strb	r2, [r3, #0]
		}
		return shtpData[0];
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <_parse_command_report+0x38>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	e000      	b.n	8001a64 <_parse_command_report+0x2c>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
	return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000208 	.word	0x20000208
 8001a74:	20000394 	.word	0x20000394

08001a78 <bno_setup>:
/*============================ High Level ============================*/

bool bno_setup(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
	_disable_slave();
 8001a7e:	f7ff fbbf 	bl	8001200 <_disable_slave>
	_reset_slave_blocking();
 8001a82:	f7ff fbc7 	bl	8001214 <_reset_slave_blocking>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	_wait_for_int_blocking(); //Wait for assertion of INT before reading advert message.
 8001a86:	f7ff fc16 	bl	80012b6 <_wait_for_int_blocking>
	_receive_packet();
 8001a8a:	f7ff fc1d 	bl	80012c8 <_receive_packet>
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	_wait_for_int_blocking(); //Wait for assertion of INT before reading Init response
 8001a8e:	f7ff fc12 	bl	80012b6 <_wait_for_int_blocking>
	_receive_packet();
 8001a92:	f7ff fc19 	bl	80012c8 <_receive_packet>

	//Check communication with device
	shtpData[0] = BNO_SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <bno_setup+0x100>)
 8001a98:	22f9      	movs	r2, #249	; 0xf9
 8001a9a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <bno_setup+0x100>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	if(!_send_packet(CHANNEL_CONTROL, 2)){
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc70 	bl	800138c <_send_packet>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <bno_setup+0x4a>
		printf("Send command to the BNO085 failed");
 8001ab8:	4830      	ldr	r0, [pc, #192]	; (8001b7c <bno_setup+0x104>)
 8001aba:	f005 fbdd 	bl	8007278 <iprintf>
		return false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e056      	b.n	8001b70 <bno_setup+0xf8>
	}

	//Now we wait for response
	_wait_for_int_blocking();
 8001ac2:	f7ff fbf8 	bl	80012b6 <_wait_for_int_blocking>
	_receive_packet();
 8001ac6:	f7ff fbff 	bl	80012c8 <_receive_packet>
	if (shtpData[0] == BNO_SHTP_REPORT_PRODUCT_ID_RESPONSE){
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <bno_setup+0x100>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2bf8      	cmp	r3, #248	; 0xf8
 8001ad0:	d14d      	bne.n	8001b6e <bno_setup+0xf6>
		if (_debug){
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <bno_setup+0x108>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d046      	beq.n	8001b6a <bno_setup+0xf2>
			printf("Reset has occured (as expected at startup): %d\n", shtpData[1]);
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <bno_setup+0x100>)
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4828      	ldr	r0, [pc, #160]	; (8001b84 <bno_setup+0x10c>)
 8001ae4:	f005 fbc8 	bl	8007278 <iprintf>
			printf("SW Version Major: 0x%04X", shtpData[2]);
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <bno_setup+0x100>)
 8001aea:	789b      	ldrb	r3, [r3, #2]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4826      	ldr	r0, [pc, #152]	; (8001b88 <bno_setup+0x110>)
 8001af0:	f005 fbc2 	bl	8007278 <iprintf>
			printf(" SW Version Minor: 0x%04X \n", shtpData[3]);
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <bno_setup+0x100>)
 8001af6:	78db      	ldrb	r3, [r3, #3]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4824      	ldr	r0, [pc, #144]	; (8001b8c <bno_setup+0x114>)
 8001afc:	f005 fbbc 	bl	8007278 <iprintf>
			uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <bno_setup+0x100>)
 8001b02:	79db      	ldrb	r3, [r3, #7]
 8001b04:	061a      	lsls	r2, r3, #24
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <bno_setup+0x100>)
 8001b08:	799b      	ldrb	r3, [r3, #6]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <bno_setup+0x100>)
 8001b10:	795b      	ldrb	r3, [r3, #5]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4313      	orrs	r3, r2
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <bno_setup+0x100>)
 8001b18:	7912      	ldrb	r2, [r2, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
			printf("SW Part Number: %ld \n",SW_Part_Number);
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <bno_setup+0x118>)
 8001b22:	f005 fba9 	bl	8007278 <iprintf>
			uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <bno_setup+0x100>)
 8001b28:	7adb      	ldrb	r3, [r3, #11]
 8001b2a:	061a      	lsls	r2, r3, #24
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <bno_setup+0x100>)
 8001b2e:	7a9b      	ldrb	r3, [r3, #10]
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <bno_setup+0x100>)
 8001b36:	7a5b      	ldrb	r3, [r3, #9]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <bno_setup+0x100>)
 8001b3e:	7a12      	ldrb	r2, [r2, #8]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
			printf("SW Build Number: %ld \n", SW_Build_Number);
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	4813      	ldr	r0, [pc, #76]	; (8001b94 <bno_setup+0x11c>)
 8001b48:	f005 fb96 	bl	8007278 <iprintf>
			uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <bno_setup+0x100>)
 8001b4e:	7b5b      	ldrb	r3, [r3, #13]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <bno_setup+0x100>)
 8001b56:	7b1b      	ldrb	r3, [r3, #12]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	80fb      	strh	r3, [r7, #6]
			printf("SW Version Patch: %d \n",SW_Version_Patch);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <bno_setup+0x120>)
 8001b66:	f005 fb87 	bl	8007278 <iprintf>
		}
		return (true);
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <bno_setup+0xf8>
	}
	return (false); //Something went wrong
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000208 	.word	0x20000208
 8001b7c:	0800c198 	.word	0x0800c198
 8001b80:	20000000 	.word	0x20000000
 8001b84:	0800c1bc 	.word	0x0800c1bc
 8001b88:	0800c1ec 	.word	0x0800c1ec
 8001b8c:	0800c208 	.word	0x0800c208
 8001b90:	0800c224 	.word	0x0800c224
 8001b94:	0800c23c 	.word	0x0800c23c
 8001b98:	0800c254 	.word	0x0800c254

08001b9c <bno_enable_rotation_vector>:

void bno_enable_rotation_vector(uint16_t millisBetweenReports){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
	_set_feature_command(BNO_REPORTID_ROTATION_VECTOR, millisBetweenReports, 0);
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	2005      	movs	r0, #5
 8001bae:	f7ff fc33 	bl	8001418 <_set_feature_command>
	//HAL_Delay(100);
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <bno_get_readings>:

uint16_t bno_get_readings(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
/* handled by _receive_packet
	if (!_sensor_awaiting())
		return (0); //Data is not available
*/
	//printf("%d",shtpHeader[2]);
	if (_receive_packet() == true){
 8001bc0:	f7ff fb82 	bl	80012c8 <_receive_packet>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01e      	beq.n	8001c08 <bno_get_readings+0x4c>
		//Check to see if this packet is a sensor reporting its data to us
		//if (shtpHeader[2] != 0) printf("channel %d \n",shtpHeader[2] );
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == BNO_SHTP_REPORT_BASE_TIMESTAMP){
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <bno_get_readings+0x54>)
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d107      	bne.n	8001be4 <bno_get_readings+0x28>
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <bno_get_readings+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2bfb      	cmp	r3, #251	; 0xfb
 8001bda:	d103      	bne.n	8001be4 <bno_get_readings+0x28>
			return _parse_input_report(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001bdc:	f7ff fcb4 	bl	8001548 <_parse_input_report>
 8001be0:	4603      	mov	r3, r0
 8001be2:	e012      	b.n	8001c0a <bno_get_readings+0x4e>
		} else if (shtpHeader[2] == CHANNEL_CONTROL){
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <bno_get_readings+0x54>)
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d103      	bne.n	8001bf6 <bno_get_readings+0x3a>
			return _parse_command_report(); //This will update responses to commands, calibrationStatus, etc.
 8001bee:	f7ff ff23 	bl	8001a38 <_parse_command_report>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e009      	b.n	8001c0a <bno_get_readings+0x4e>
		} else if (shtpHeader[2] == CHANNEL_GYRO){
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <bno_get_readings+0x54>)
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d103      	bne.n	8001c08 <bno_get_readings+0x4c>
			return _parse_input_report();
 8001c00:	f7ff fca2 	bl	8001548 <_parse_input_report>
 8001c04:	4603      	mov	r3, r0
 8001c06:	e000      	b.n	8001c0a <bno_get_readings+0x4e>
		}
	}
	return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000204 	.word	0x20000204
 8001c14:	20000208 	.word	0x20000208

08001c18 <bno_get_yaw>:

float bno_get_yaw(void){
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
	 // get quaternion arguments
	float dqw = _quaternion_to_float(rawQuatReal, rotationVector_Q1);
 8001c1e:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <bno_get_yaw+0x1ac>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <bno_get_yaw+0x1b0>)
 8001c26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fc4e 	bl	80014d0 <_quaternion_to_float>
 8001c34:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float dqx = _quaternion_to_float(rawQuatI, rotationVector_Q1);
 8001c38:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <bno_get_yaw+0x1b4>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <bno_get_yaw+0x1b0>)
 8001c40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fc41 	bl	80014d0 <_quaternion_to_float>
 8001c4e:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqy = _quaternion_to_float(rawQuatJ, rotationVector_Q1);
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <bno_get_yaw+0x1b8>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4a5b      	ldr	r2, [pc, #364]	; (8001dc8 <bno_get_yaw+0x1b0>)
 8001c5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc34 	bl	80014d0 <_quaternion_to_float>
 8001c68:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqz = _quaternion_to_float(rawQuatK, rotationVector_Q1);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <bno_get_yaw+0x1bc>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <bno_get_yaw+0x1b0>)
 8001c74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fc27 	bl	80014d0 <_quaternion_to_float>
 8001c82:	ed87 0a06 	vstr	s0, [r7, #24]

	//printf("%d %d %d %d \n", rawQuatReal,rawQuatI,rawQuatJ,rawQuatK);

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8001c86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001caa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb2:	ee17 0a90 	vmov	r0, s15
 8001cb6:	f7fe fc6f 	bl	8000598 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	ec43 2b10 	vmov	d0, r2, r3
 8001cc2:	f009 f893 	bl	800adec <sqrt>
 8001cc6:	ec53 2b10 	vmov	r2, r3, d0
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe ffb3 	bl	8000c38 <__aeabi_d2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	617b      	str	r3, [r7, #20]
	dqw = dqw/norm;
 8001cd6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dqx = dqx/norm;
 8001ce6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc7 7a08 	vstr	s15, [r7, #32]
	dqy = dqy/norm;
 8001cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	edc7 7a07 	vstr	s15, [r7, #28]
	dqz = dqz/norm;
 8001d06:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d12:	edc7 7a06 	vstr	s15, [r7, #24]

	float ysqr = dqy * dqy;
 8001d16:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d1e:	edc7 7a04 	vstr	s15, [r7, #16]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 8001d22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d42:	edc7 7a03 	vstr	s15, [r7, #12]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8001d46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	ee17 0a90 	vmov	r0, s15
 8001d5a:	f7fe fc1d 	bl	8000598 <__aeabi_f2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	f7fe fabb 	bl	80002dc <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	f04f 0000 	mov.w	r0, #0
 8001d6e:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <bno_get_yaw+0x1c0>)
 8001d70:	f7fe fab2 	bl	80002d8 <__aeabi_dsub>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe ff5c 	bl	8000c38 <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	60bb      	str	r3, [r7, #8]
	float yaw = atan2(t3, t4);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7fe fc07 	bl	8000598 <__aeabi_f2d>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f7fe fc02 	bl	8000598 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	ec43 2b11 	vmov	d1, r2, r3
 8001d9c:	ec45 4b10 	vmov	d0, r4, r5
 8001da0:	f008 ffb2 	bl	800ad08 <atan2>
 8001da4:	ec53 2b10 	vmov	r2, r3, d0
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7fe ff44 	bl	8000c38 <__aeabi_d2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	607b      	str	r3, [r7, #4]

	return (yaw);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	ee07 3a90 	vmov	s15, r3
}
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc4:	2000036e 	.word	0x2000036e
 8001dc8:	20000002 	.word	0x20000002
 8001dcc:	20000368 	.word	0x20000368
 8001dd0:	2000036a 	.word	0x2000036a
 8001dd4:	2000036c 	.word	0x2000036c
 8001dd8:	3ff00000 	.word	0x3ff00000

08001ddc <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <DWT_Init+0x28>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <DWT_Init+0x28>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dea:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <DWT_Init+0x2c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <DWT_Init+0x2c>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000edf0 	.word	0xe000edf0
 8001e08:	e0001000 	.word	0xe0001000

08001e0c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001e16:	1df9      	adds	r1, r7, #7
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4804      	ldr	r0, [pc, #16]	; (8001e30 <__io_putchar+0x24>)
 8001e20:	f003 fc6c 	bl	80056fc <HAL_UART_Transmit>
	return ch;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004bc 	.word	0x200004bc

08001e34 <main>:
  * @retval int
  */
int bno_setup_done = 0;

int main(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e3a:	f000 fd74 	bl	8002926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3e:	f000 f861 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e42:	f000 f9e5 	bl	8002210 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8001e46:	f000 f8ab 	bl	8001fa0 <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8001e4a:	f000 f9b9 	bl	80021c0 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8001e4e:	f000 f8ed 	bl	800202c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001e52:	f000 f92b 	bl	80020ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e56:	f000 f967 	bl	8002128 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8001e5a:	f7ff ffbf 	bl	8001ddc <DWT_Init>
  printf("=== HAL init done, proceeding ... ===\n");
 8001e5e:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <main+0xbc>)
 8001e60:	f005 fa78 	bl	8007354 <puts>
  HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f001 fa53 	bl	8003318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2110      	movs	r1, #16
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f001 fa4d 	bl	8003318 <HAL_GPIO_WritePin>

  //adnsEnableDebugReports();
  //adnsInit();

  if(!bno_setup()) printf("=== Could NOT initialize the BNO085 ! ===\n");
 8001e7e:	f7ff fdfb 	bl	8001a78 <bno_setup>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <main+0x60>
 8001e8e:	4819      	ldr	r0, [pc, #100]	; (8001ef4 <main+0xc0>)
 8001e90:	f005 fa60 	bl	8007354 <puts>
  bno_enable_rotation_vector(50);
 8001e94:	2032      	movs	r0, #50	; 0x32
 8001e96:	f7ff fe81 	bl	8001b9c <bno_enable_rotation_vector>
  setup();
 8001e9a:	f000 fa5f 	bl	800235c <setup>
  printf("=== User init done, proceeding ... ===\n");
 8001e9e:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <main+0xc4>)
 8001ea0:	f005 fa58 	bl	8007354 <puts>
  bno_setup_done = 1;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <main+0xc8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
  double x = 0, y = 0;
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001ec2:	f000 fa52 	bl	800236a <loop>
	  HAL_Delay(20);
 8001ec6:	2014      	movs	r0, #20
 8001ec8:	f000 fd9e 	bl	8002a08 <HAL_Delay>
	  if(bno_get_readings()) printf("yaw %.4f \n",bno_get_yaw());
 8001ecc:	f7ff fe76 	bl	8001bbc <bno_get_readings>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f5      	beq.n	8001ec2 <main+0x8e>
 8001ed6:	f7ff fe9f 	bl	8001c18 <bno_get_yaw>
 8001eda:	ee10 3a10 	vmov	r3, s0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb5a 	bl	8000598 <__aeabi_f2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <main+0xcc>)
 8001eea:	f005 f9c5 	bl	8007278 <iprintf>
	  loop();
 8001eee:	e7e8      	b.n	8001ec2 <main+0x8e>
 8001ef0:	0800c26c 	.word	0x0800c26c
 8001ef4:	0800c294 	.word	0x0800c294
 8001ef8:	0800c2c0 	.word	0x0800c2c0
 8001efc:	20000840 	.word	0x20000840
 8001f00:	0800c2e8 	.word	0x0800c2e8

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	; 0x50
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 0318 	add.w	r3, r7, #24
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f005 fb1e 	bl	8007554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f2a:	f001 fc5b 	bl	80037e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001f2e:	2322      	movs	r3, #34	; 0x22
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f38:	2340      	movs	r3, #64	; 0x40
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2302      	movs	r3, #2
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fcf3 	bl	800394c <HAL_RCC_OscConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001f6c:	f000 f9f1 	bl	8002352 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f70:	230f      	movs	r3, #15
 8001f72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f74:	2303      	movs	r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 fff7 	bl	8003f7c <HAL_RCC_ClockConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f94:	f000 f9dd 	bl	8002352 <Error_Handler>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3750      	adds	r7, #80	; 0x50
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fa6:	4a20      	ldr	r2, [pc, #128]	; (8002028 <MX_FDCAN2_Init+0x88>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8002006:	2200      	movs	r2, #0
 8002008:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_FDCAN2_Init+0x84>)
 800200c:	2200      	movs	r2, #0
 800200e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_FDCAN2_Init+0x84>)
 8002012:	f000 fe2b 	bl	8002c6c <HAL_FDCAN_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800201c:	f000 f999 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200003a8 	.word	0x200003a8
 8002028:	40006800 	.word	0x40006800

0800202c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <MX_I2C2_Init+0x78>)
 8002034:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <MX_I2C2_Init+0x7c>)
 800203a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_I2C2_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002044:	2201      	movs	r2, #1
 8002046:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_I2C2_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_I2C2_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002066:	480e      	ldr	r0, [pc, #56]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002068:	f001 f986 	bl	8003378 <HAL_I2C_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002072:	f000 f96e 	bl	8002352 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002076:	2100      	movs	r1, #0
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <MX_I2C2_Init+0x74>)
 800207a:	f001 fa0c 	bl	8003496 <HAL_I2CEx_ConfigAnalogFilter>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002084:	f000 f965 	bl	8002352 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002088:	2100      	movs	r1, #0
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_I2C2_Init+0x74>)
 800208c:	f001 fa4e 	bl	800352c <HAL_I2CEx_ConfigDigitalFilter>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002096:	f000 f95c 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000040c 	.word	0x2000040c
 80020a4:	40005800 	.word	0x40005800
 80020a8:	2010091a 	.word	0x2010091a

080020ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_SPI1_Init+0x74>)
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <MX_SPI1_Init+0x78>)
 80020b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_SPI1_Init+0x74>)
 80020b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_SPI1_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_SPI1_Init+0x74>)
 80020c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_SPI1_Init+0x74>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <MX_SPI1_Init+0x74>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_SPI1_Init+0x74>)
 80020da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_SPI1_Init+0x74>)
 80020e2:	2218      	movs	r2, #24
 80020e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_SPI1_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_SPI1_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MX_SPI1_Init+0x74>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_SPI1_Init+0x74>)
 80020fa:	2207      	movs	r2, #7
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_SPI1_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_SPI1_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_SPI1_Init+0x74>)
 800210c:	f002 fb8e 	bl	800482c <HAL_SPI_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002116:	f000 f91c 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000458 	.word	0x20000458
 8002124:	40013000 	.word	0x40013000

08002128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <MX_USART2_UART_Init+0x94>)
 8002130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 800216c:	2200      	movs	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002170:	4811      	ldr	r0, [pc, #68]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002172:	f003 fa73 	bl	800565c <HAL_UART_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800217c:	f000 f8e9 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002180:	2100      	movs	r1, #0
 8002182:	480d      	ldr	r0, [pc, #52]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002184:	f004 f83a 	bl	80061fc <HAL_UARTEx_SetTxFifoThreshold>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800218e:	f000 f8e0 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002192:	2100      	movs	r1, #0
 8002194:	4808      	ldr	r0, [pc, #32]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 8002196:	f004 f86f 	bl	8006278 <HAL_UARTEx_SetRxFifoThreshold>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80021a0:	f000 f8d7 	bl	8002352 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_USART2_UART_Init+0x90>)
 80021a6:	f003 fff0 	bl	800618a <HAL_UARTEx_DisableFifoMode>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80021b0:	f000 f8cf 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200004bc 	.word	0x200004bc
 80021bc:	40004400 	.word	0x40004400

080021c0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <MX_USB_PCD_Init+0x4c>)
 80021c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021cc:	2208      	movs	r2, #8
 80021ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021d8:	2202      	movs	r2, #2
 80021da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_USB_PCD_Init+0x48>)
 80021f6:	f001 f9e5 	bl	80035c4 <HAL_PCD_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002200:	f000 f8a7 	bl	8002352 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000054c 	.word	0x2000054c
 800220c:	40005c00 	.word	0x40005c00

08002210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <MX_GPIO_Init+0x124>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a42      	ldr	r2, [pc, #264]	; (8002334 <MX_GPIO_Init+0x124>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <MX_GPIO_Init+0x124>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <MX_GPIO_Init+0x124>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <MX_GPIO_Init+0x124>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <MX_GPIO_Init+0x124>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	f240 4111 	movw	r1, #1041	; 0x411
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f001 f85a 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	2110      	movs	r1, #16
 8002268:	4833      	ldr	r0, [pc, #204]	; (8002338 <MX_GPIO_Init+0x128>)
 800226a:	f001 f855 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_IMU_Pin */
  GPIO_InitStruct.Pin = RST_IMU_Pin;
 800226e:	2301      	movs	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_IMU_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	f000 feac 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_INT_Pin */
  GPIO_InitStruct.Pin = AU_INT_Pin;
 800228c:	2302      	movs	r3, #2
 800228e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002290:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002296:	2302      	movs	r3, #2
 8002298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_INT_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a4:	f000 fe9e 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_ADNS_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_ADNS_Pin;
 80022a8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80022ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4619      	mov	r1, r3
 80022c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c4:	f000 fe8e 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ANDS_Pin */
  GPIO_InitStruct.Pin = INT_ANDS_Pin;
 80022c8:	2301      	movs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ANDS_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4619      	mov	r1, r3
 80022dc:	4816      	ldr	r0, [pc, #88]	; (8002338 <MX_GPIO_Init+0x128>)
 80022de:	f000 fe81 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80022e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4619      	mov	r1, r3
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fc:	f000 fe72 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8002300:	2310      	movs	r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	4619      	mov	r1, r3
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <MX_GPIO_Init+0x128>)
 8002318:	f000 fe64 	bl	8002fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	2028      	movs	r0, #40	; 0x28
 8002322:	f000 fc6e 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002326:	2028      	movs	r0, #40	; 0x28
 8002328:	f000 fc85 	bl	8002c36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	48000400 	.word	0x48000400

0800233c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
	/*if(bno_setup_done){
		printf("%d ",_receive_packet());
	}
	*/
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002356:	b672      	cpsid	i
}
 8002358:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800235a:	e7fe      	b.n	800235a <Error_Handler+0x8>

0800235c <setup>:
void setup(void){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <loop>:

void loop(void){
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_MspInit+0x44>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_MspInit+0x44>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6613      	str	r3, [r2, #96]	; 0x60
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_MspInit+0x44>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_MspInit+0x44>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_MspInit+0x44>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_MspInit+0x44>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023ae:	f001 fabd 	bl	800392c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b09e      	sub	sp, #120	; 0x78
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2250      	movs	r2, #80	; 0x50
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 f8b7 	bl	8007554 <memset>
  if(hfdcan->Instance==FDCAN2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_FDCAN_MspInit+0xa8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d137      	bne.n	8002460 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80023f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4618      	mov	r0, r3
 8002402:	f001 ffd7 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800240c:	f7ff ffa1 	bl	8002352 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 8002416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241a:	6593      	str	r3, [r2, #88]	; 0x58
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_FDCAN_MspInit+0xac>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8002440:	2360      	movs	r3, #96	; 0x60
 8002442:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002450:	2309      	movs	r3, #9
 8002452:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002458:	4619      	mov	r1, r3
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_FDCAN_MspInit+0xb0>)
 800245c:	f000 fdc2 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3778      	adds	r7, #120	; 0x78
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40006800 	.word	0x40006800
 800246c:	40021000 	.word	0x40021000
 8002470:	48000400 	.word	0x48000400

08002474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b09e      	sub	sp, #120	; 0x78
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2250      	movs	r2, #80	; 0x50
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f005 f85d 	bl	8007554 <memset>
  if(hi2c->Instance==I2C2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_I2C_MspInit+0xa8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d137      	bne.n	8002514 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 ff7f 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024bc:	f7ff ff49 	bl	8002352 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_I2C_MspInit+0xac>)
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_I2C_MspInit+0xac>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_I2C_MspInit+0xac>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024de:	2312      	movs	r3, #18
 80024e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024ea:	2304      	movs	r3, #4
 80024ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f8:	f000 fd74 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_I2C_MspInit+0xac>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_I2C_MspInit+0xac>)
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002506:	6593      	str	r3, [r2, #88]	; 0x58
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_I2C_MspInit+0xac>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002514:	bf00      	nop
 8002516:	3778      	adds	r7, #120	; 0x78
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40005800 	.word	0x40005800
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_SPI_MspInit+0x7c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d128      	bne.n	8002598 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_SPI_MspInit+0x80>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_SPI_MspInit+0x80>)
 800254c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002550:	6613      	str	r3, [r2, #96]	; 0x60
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_SPI_MspInit+0x80>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_SPI_MspInit+0x80>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_SPI_MspInit+0x80>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_SPI_MspInit+0x80>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002576:	23e0      	movs	r3, #224	; 0xe0
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002586:	2305      	movs	r3, #5
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002594:	f000 fd26 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013000 	.word	0x40013000
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b09e      	sub	sp, #120	; 0x78
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2250      	movs	r2, #80	; 0x50
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 ffc3 	bl	8007554 <memset>
  if(huart->Instance==USART2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_UART_MspInit+0xa8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d136      	bne.n	8002646 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025d8:	2302      	movs	r3, #2
 80025da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 fee5 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025f0:	f7ff feaf 	bl	8002352 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_UART_MspInit+0xac>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	4a16      	ldr	r2, [pc, #88]	; (8002654 <HAL_UART_MspInit+0xac>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_UART_MspInit+0xac>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_UART_MspInit+0xac>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_UART_MspInit+0xac>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_UART_MspInit+0xac>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002624:	230c      	movs	r3, #12
 8002626:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002634:	2307      	movs	r3, #7
 8002636:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800263c:	4619      	mov	r1, r3
 800263e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002642:	f000 fccf 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002646:	bf00      	nop
 8002648:	3778      	adds	r7, #120	; 0x78
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40004400 	.word	0x40004400
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b098      	sub	sp, #96	; 0x60
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2250      	movs	r2, #80	; 0x50
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f004 ff73 	bl	8007554 <memset>
  if(hpcd->Instance==USB)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_PCD_MspInit+0x60>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d11a      	bne.n	80026ae <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800267e:	2300      	movs	r3, #0
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	4618      	mov	r0, r3
 8002688:	f001 fe94 	bl	80043b4 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002692:	f7ff fe5e 	bl	8002352 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_PCD_MspInit+0x64>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <HAL_PCD_MspInit+0x64>)
 800269c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_PCD_MspInit+0x64>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80026ae:	bf00      	nop
 80026b0:	3760      	adds	r7, #96	; 0x60
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40005c00 	.word	0x40005c00
 80026bc:	40021000 	.word	0x40021000

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <NMI_Handler+0x4>

080026c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <HardFault_Handler+0x4>

080026cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <MemManage_Handler+0x4>

080026d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <BusFault_Handler+0x4>

080026d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <UsageFault_Handler+0x4>

080026de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800270c:	f000 f95e 	bl	80029cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IMU_Pin);
 8002718:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800271c:	f000 fe14 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_kill>:

int _kill(int pid, int sig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800273e:	f004 ff5b 	bl	80075f8 <__errno>
 8002742:	4603      	mov	r3, r0
 8002744:	2216      	movs	r2, #22
 8002746:	601a      	str	r2, [r3, #0]
  return -1;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_exit>:

void _exit (int status)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffe7 	bl	8002734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002766:	e7fe      	b.n	8002766 <_exit+0x12>

08002768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	e00a      	b.n	8002790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277a:	f3af 8000 	nop.w
 800277e:	4601      	mov	r1, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	60ba      	str	r2, [r7, #8]
 8002786:	b2ca      	uxtb	r2, r1
 8002788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	dbf0      	blt.n	800277a <_read+0x12>
  }

  return len;
 8002798:	687b      	ldr	r3, [r7, #4]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e009      	b.n	80027c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	60ba      	str	r2, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb25 	bl	8001e0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf1      	blt.n	80027b4 <_write+0x12>
  }
  return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_close>:

int _close(int file)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002802:	605a      	str	r2, [r3, #4]
  return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_isatty>:

int _isatty(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f004 fec0 	bl	80075f8 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2001c000 	.word	0x2001c000
 80028a4:	00000400 	.word	0x00000400
 80028a8:	20000844 	.word	0x20000844
 80028ac:	20000998 	.word	0x20000998

080028b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490e      	ldr	r1, [pc, #56]	; (8002914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0b      	ldr	r4, [pc, #44]	; (8002920 <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028fe:	f7ff ffd7 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002902:	f004 fe7f 	bl	8007604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002906:	f7ff fa95 	bl	8001e34 <main>

0800290a <LoopForever>:

LoopForever:
    b LoopForever
 800290a:	e7fe      	b.n	800290a <LoopForever>
  ldr   r0, =_estack
 800290c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002918:	0800c810 	.word	0x0800c810
  ldr r2, =_sbss
 800291c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002920:	20000998 	.word	0x20000998

08002924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC1_2_IRQHandler>

08002926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f000 f95b 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002936:	200f      	movs	r0, #15
 8002938:	f000 f80e 	bl	8002958 <HAL_InitTick>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	71fb      	strb	r3, [r7, #7]
 8002946:	e001      	b.n	800294c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002948:	f7ff fd16 	bl	8002378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800294c:	79fb      	ldrb	r3, [r7, #7]

}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_InitTick+0x68>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d022      	beq.n	80029b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_InitTick+0x6c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_InitTick+0x68>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002978:	fbb1 f3f3 	udiv	r3, r1, r3
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f966 	bl	8002c52 <HAL_SYSTICK_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	d809      	bhi.n	80029a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002992:	2200      	movs	r2, #0
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	f04f 30ff 	mov.w	r0, #4294967295
 800299a:	f000 f932 	bl	8002c02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_InitTick+0x70>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e007      	b.n	80029b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e004      	b.n	80029b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e001      	b.n	80029b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	20000004 	.word	0x20000004
 80029c8:	20000008 	.word	0x20000008

080029cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_IncTick+0x1c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_IncTick+0x20>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_IncTick+0x1c>)
 80029dc:	6013      	str	r3, [r2, #0]
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000848 	.word	0x20000848
 80029ec:	2000000c 	.word	0x2000000c

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000848 	.word	0x20000848

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d004      	beq.n	8002a2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_Delay+0x40>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2c:	bf00      	nop
 8002a2e:	f7ff ffdf 	bl	80029f0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d8f7      	bhi.n	8002a2e <HAL_Delay+0x26>
  {
  }
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff29 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff40 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff90 	bl	8002b40 <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5f 	bl	8002aec <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff33 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa4 	bl	8002ba8 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e147      	b.n	8002f0e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fb94 	bl	80023c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7ff fea2 	bl	80029f0 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cae:	e012      	b.n	8002cd6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cb0:	f7ff fe9e 	bl	80029f0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b0a      	cmp	r3, #10
 8002cbc:	d90b      	bls.n	8002cd6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e11b      	b.n	8002f0e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d0e5      	beq.n	8002cb0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7ff fe7c 	bl	80029f0 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cfa:	e012      	b.n	8002d22 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cfc:	f7ff fe78 	bl	80029f0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b0a      	cmp	r3, #10
 8002d08:	d90b      	bls.n	8002d22 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0f5      	b.n	8002f0e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0e5      	beq.n	8002cfc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0202 	orr.w	r2, r2, #2
 8002d3e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a74      	ldr	r2, [pc, #464]	; (8002f18 <HAL_FDCAN_Init+0x2ac>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d103      	bne.n	8002d52 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d4a:	4a74      	ldr	r2, [pc, #464]	; (8002f1c <HAL_FDCAN_Init+0x2b0>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7c1b      	ldrb	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d108      	bne.n	8002d6c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d68:	619a      	str	r2, [r3, #24]
 8002d6a:	e007      	b.n	8002d7c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7c5b      	ldrb	r3, [r3, #17]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d108      	bne.n	8002d96 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d92:	619a      	str	r2, [r3, #24]
 8002d94:	e007      	b.n	8002da6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002da4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7c9b      	ldrb	r3, [r3, #18]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dbc:	619a      	str	r2, [r3, #24]
 8002dbe:	e007      	b.n	8002dd0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002df4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0210 	bic.w	r2, r2, #16
 8002e04:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d108      	bne.n	8002e20 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0204 	orr.w	r2, r2, #4
 8002e1c:	619a      	str	r2, [r3, #24]
 8002e1e:	e02c      	b.n	8002e7a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d028      	beq.n	8002e7a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d01c      	beq.n	8002e6a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e3e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0210 	orr.w	r2, r2, #16
 8002e4e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d110      	bne.n	8002e7a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	619a      	str	r2, [r3, #24]
 8002e68:	e007      	b.n	8002e7a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0220 	orr.w	r2, r2, #32
 8002e78:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e8a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e92:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ea2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ea4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eae:	d115      	bne.n	8002edc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ebe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ec8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ed8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eda:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f814 	bl	8002f20 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40006400 	.word	0x40006400
 8002f1c:	40006500 	.word	0x40006500

08002f20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002f2a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d103      	bne.n	8002f3e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f3c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4c:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f72:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	061a      	lsls	r2, r3, #24
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e005      	b.n	8002fc0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d3f3      	bcc.n	8002fb4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	4000a400 	.word	0x4000a400
 8002fe0:	40006800 	.word	0x40006800

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ff2:	e15a      	b.n	80032aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 814c 	beq.w	80032a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003020:	2b02      	cmp	r3, #2
 8003022:	d130      	bne.n	8003086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305a:	2201      	movs	r2, #1
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0201 	and.w	r2, r3, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b03      	cmp	r3, #3
 8003090:	d017      	beq.n	80030c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d123      	bne.n	8003116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	6939      	ldr	r1, [r7, #16]
 8003112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80a6 	beq.w	80032a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003158:	4b5b      	ldr	r3, [pc, #364]	; (80032c8 <HAL_GPIO_Init+0x2e4>)
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	4a5a      	ldr	r2, [pc, #360]	; (80032c8 <HAL_GPIO_Init+0x2e4>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6613      	str	r3, [r2, #96]	; 0x60
 8003164:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_GPIO_Init+0x2e4>)
 8003166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003170:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_GPIO_Init+0x2e8>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	220f      	movs	r2, #15
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800319a:	d01f      	beq.n	80031dc <HAL_GPIO_Init+0x1f8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a4c      	ldr	r2, [pc, #304]	; (80032d0 <HAL_GPIO_Init+0x2ec>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d019      	beq.n	80031d8 <HAL_GPIO_Init+0x1f4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a4b      	ldr	r2, [pc, #300]	; (80032d4 <HAL_GPIO_Init+0x2f0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_GPIO_Init+0x1f0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a4a      	ldr	r2, [pc, #296]	; (80032d8 <HAL_GPIO_Init+0x2f4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00d      	beq.n	80031d0 <HAL_GPIO_Init+0x1ec>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_GPIO_Init+0x2f8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <HAL_GPIO_Init+0x1e8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a48      	ldr	r2, [pc, #288]	; (80032e0 <HAL_GPIO_Init+0x2fc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_GPIO_Init+0x1e4>
 80031c4:	2305      	movs	r3, #5
 80031c6:	e00a      	b.n	80031de <HAL_GPIO_Init+0x1fa>
 80031c8:	2306      	movs	r3, #6
 80031ca:	e008      	b.n	80031de <HAL_GPIO_Init+0x1fa>
 80031cc:	2304      	movs	r3, #4
 80031ce:	e006      	b.n	80031de <HAL_GPIO_Init+0x1fa>
 80031d0:	2303      	movs	r3, #3
 80031d2:	e004      	b.n	80031de <HAL_GPIO_Init+0x1fa>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e002      	b.n	80031de <HAL_GPIO_Init+0x1fa>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_GPIO_Init+0x1fa>
 80031dc:	2300      	movs	r3, #0
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	f002 0203 	and.w	r2, r2, #3
 80031e4:	0092      	lsls	r2, r2, #2
 80031e6:	4093      	lsls	r3, r2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ee:	4937      	ldr	r1, [pc, #220]	; (80032cc <HAL_GPIO_Init+0x2e8>)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_GPIO_Init+0x300>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003220:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_GPIO_Init+0x300>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_GPIO_Init+0x300>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_GPIO_Init+0x300>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_GPIO_Init+0x300>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003274:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_GPIO_Init+0x300>)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_GPIO_Init+0x300>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800329e:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <HAL_GPIO_Init+0x300>)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3301      	adds	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f47f ae9d 	bne.w	8002ff4 <HAL_GPIO_Init+0x10>
  }
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40010000 	.word	0x40010000
 80032d0:	48000400 	.word	0x48000400
 80032d4:	48000800 	.word	0x48000800
 80032d8:	48000c00 	.word	0x48000c00
 80032dc:	48001000 	.word	0x48001000
 80032e0:	48001400 	.word	0x48001400
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e001      	b.n	800330a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003334:	e002      	b.n	800333c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe ffe8 	bl	800233c <HAL_GPIO_EXTI_Callback>
  }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e081      	b.n	800348e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff f868 	bl	8002474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e006      	b.n	8003400 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d104      	bne.n	8003412 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003410:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003424:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d138      	bne.n	800351e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e032      	b.n	8003520 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d139      	bne.n	80035b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800354c:	2302      	movs	r3, #2
 800354e:	e033      	b.n	80035b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800357e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c6:	b08b      	sub	sp, #44	; 0x2c
 80035c8:	af06      	add	r7, sp, #24
 80035ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0d7      	b.n	8003786 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff f834 	bl	8002658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2203      	movs	r2, #3
 80035f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 fec7 	bl	8006390 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e04c      	b.n	80036a2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3301      	adds	r3, #1
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	b298      	uxth	r0, r3
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	3336      	adds	r3, #54	; 0x36
 8003646:	4602      	mov	r2, r0
 8003648:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	440b      	add	r3, r1
 800365a:	3303      	adds	r3, #3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	440b      	add	r3, r1
 800366e:	3338      	adds	r3, #56	; 0x38
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	333c      	adds	r3, #60	; 0x3c
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	3340      	adds	r3, #64	; 0x40
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3ad      	bcc.n	8003608 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e044      	b.n	800373c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	440b      	add	r3, r1
 8003718:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	440b      	add	r3, r1
 800372e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	3301      	adds	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3b5      	bcc.n	80036b2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	687e      	ldr	r6, [r7, #4]
 800374e:	466d      	mov	r5, sp
 8003750:	f106 0410 	add.w	r4, r6, #16
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	1d33      	adds	r3, r6, #4
 800375e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	f002 fe30 	bl	80063c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f805 	bl	800378e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800378e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d141      	bne.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fe:	d131      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003800:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	4a46      	ldr	r2, [pc, #280]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003810:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003818:	4a41      	ldr	r2, [pc, #260]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003820:	4b40      	ldr	r3, [pc, #256]	; (8003924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2232      	movs	r2, #50	; 0x32
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	0c9b      	lsrs	r3, r3, #18
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003836:	e002      	b.n	800383e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3b01      	subs	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800383e:	4b38      	ldr	r3, [pc, #224]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d102      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f2      	bne.n	8003838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d158      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e057      	b.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386a:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003874:	e04d      	b.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387c:	d141      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d131      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800389c:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038a4:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2232      	movs	r2, #50	; 0x32
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	0c9b      	lsrs	r3, r3, #18
 80038be:	3301      	adds	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c2:	e002      	b.n	80038ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d102      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f2      	bne.n	80038c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d112      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e011      	b.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003900:	e007      	b.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800390a:	4a05      	ldr	r2, [pc, #20]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40007000 	.word	0x40007000
 8003924:	20000004 	.word	0x20000004
 8003928:	431bde83 	.word	0x431bde83

0800392c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800393a:	6093      	str	r3, [r2, #8]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e306      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d075      	beq.n	8003a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396a:	4b97      	ldr	r3, [pc, #604]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003974:	4b94      	ldr	r3, [pc, #592]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d102      	bne.n	800398a <HAL_RCC_OscConfig+0x3e>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d002      	beq.n	8003990 <HAL_RCC_OscConfig+0x44>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4b8d      	ldr	r3, [pc, #564]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05b      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e2e1      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x74>
 80039b2:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a84      	ldr	r2, [pc, #528]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x98>
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7e      	ldr	r2, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7b      	ldr	r2, [pc, #492]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039e4:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a77      	ldr	r2, [pc, #476]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a74      	ldr	r2, [pc, #464]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe fff4 	bl	80029f0 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fff0 	bl	80029f0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e2a6      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe ffe0 	bl	80029f0 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe ffdc 	bl	80029f0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e292      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a46:	4b60      	ldr	r3, [pc, #384]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a6c:	4b56      	ldr	r3, [pc, #344]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_OscConfig+0x136>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_OscConfig+0x13c>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d11f      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x154>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e265      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	4946      	ldr	r1, [pc, #280]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ab4:	4b45      	ldr	r3, [pc, #276]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe ff4d 	bl	8002958 <HAL_InitTick>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d043      	beq.n	8003b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e251      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d023      	beq.n	8003b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe ff88 	bl	80029f0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae4:	f7fe ff84 	bl	80029f0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e23a      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	492d      	ldr	r1, [pc, #180]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
 8003b16:	e01a      	b.n	8003b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe ff64 	bl	80029f0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fe ff60 	bl	80029f0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e216      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1e0>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d041      	beq.n	8003bde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe ff3d 	bl	80029f0 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fe ff39 	bl	80029f0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1ef      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ef      	beq.n	8003b7a <HAL_RCC_OscConfig+0x22e>
 8003b9a:	e020      	b.n	8003bde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe ff20 	bl	80029f0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb2:	e00d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe ff1c 	bl	80029f0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d906      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1d2      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd0:	4b8c      	ldr	r3, [pc, #560]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ea      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a6 	beq.w	8003d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bf0:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2b4>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x2b6>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b7f      	ldr	r3, [pc, #508]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
 8003c12:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	4b79      	ldr	r3, [pc, #484]	; (8003e08 <HAL_RCC_OscConfig+0x4bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x4bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x4bc>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fed9 	bl	80029f0 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe fed5 	bl	80029f0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e18b      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c54:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x4bc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_RCC_OscConfig+0x32e>
 8003c68:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c78:	e024      	b.n	8003cc4 <HAL_RCC_OscConfig+0x378>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d110      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x358>
 8003c82:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c92:	4b5c      	ldr	r3, [pc, #368]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca2:	e00f      	b.n	8003cc4 <HAL_RCC_OscConfig+0x378>
 8003ca4:	4b57      	ldr	r3, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb4:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	4a52      	ldr	r2, [pc, #328]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fe fe90 	bl	80029f0 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fe8c 	bl	80029f0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e140      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cea:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ed      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x388>
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fe79 	bl	80029f0 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe fe75 	bl	80029f0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e129      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d18:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ed      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b35      	ldr	r3, [pc, #212]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fe48 	bl	80029f0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d64:	f7fe fe44 	bl	80029f0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0fa      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCC_OscConfig+0x418>
 8003d84:	e01b      	b.n	8003dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d86:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fe2b 	bl	80029f0 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d9e:	f7fe fe27 	bl	80029f0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0dd      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ef      	bne.n	8003d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80d1 	beq.w	8003f6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	f000 808b 	beq.w	8003eec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d15e      	bne.n	8003e9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_RCC_OscConfig+0x4b8>)
 8003de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fe fe01 	bl	80029f0 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	e00c      	b.n	8003e0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fe fdfd 	bl	80029f0 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d905      	bls.n	8003e0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0b3      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ec      	bne.n	8003df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e18:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_RCC_OscConfig+0x62c>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6a11      	ldr	r1, [r2, #32]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e32:	0212      	lsls	r2, r2, #8
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e3a:	0852      	lsrs	r2, r2, #1
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0552      	lsls	r2, r2, #21
 8003e40:	4311      	orrs	r1, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	4311      	orrs	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e52:	06d2      	lsls	r2, r2, #27
 8003e54:	430a      	orrs	r2, r1
 8003e56:	4947      	ldr	r1, [pc, #284]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a44      	ldr	r2, [pc, #272]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e68:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a41      	ldr	r2, [pc, #260]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe fdbc 	bl	80029f0 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe fdb8 	bl	80029f0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e06e      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x530>
 8003e9a:	e066      	b.n	8003f6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a31      	ldr	r2, [pc, #196]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a2e      	ldr	r2, [pc, #184]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003eba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fd94 	bl	80029f0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe fd90 	bl	80029f0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e046      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ede:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x580>
 8003eea:	e03e      	b.n	8003f6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e039      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d12c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	3b01      	subs	r3, #1
 8003f18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d123      	bne.n	8003f66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d113      	bne.n	8003f66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	019f800c 	.word	0x019f800c

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e11e      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b91      	ldr	r3, [pc, #580]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d910      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b8e      	ldr	r3, [pc, #568]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	498c      	ldr	r1, [pc, #560]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b8a      	ldr	r3, [pc, #552]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e106      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d073      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d129      	bne.n	800402c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0f4      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fe8:	f000 f99e 	bl	8004328 <RCC_GetSysClockFreqFromPLLSource>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4a7c      	ldr	r2, [pc, #496]	; (80041e4 <HAL_RCC_ClockConfig+0x268>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d93f      	bls.n	8004076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ff6:	4b7a      	ldr	r3, [pc, #488]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800400a:	2b00      	cmp	r3, #0
 800400c:	d033      	beq.n	8004076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004012:	2b00      	cmp	r3, #0
 8004014:	d12f      	bne.n	8004076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004016:	4b72      	ldr	r3, [pc, #456]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401e:	4a70      	ldr	r2, [pc, #448]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e024      	b.n	8004076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d107      	bne.n	8004044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004034:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0c6      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0be      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004054:	f000 f8ce 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8004058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4a61      	ldr	r2, [pc, #388]	; (80041e4 <HAL_RCC_ClockConfig+0x268>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d909      	bls.n	8004076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004062:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800406a:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 800406c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004076:	4b5a      	ldr	r3, [pc, #360]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4957      	ldr	r1, [pc, #348]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fe fcb2 	bl	80029f0 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004090:	f7fe fcae 	bl	80029f0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e095      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	4b4e      	ldr	r3, [pc, #312]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 020c 	and.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1eb      	bne.n	8004090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d023      	beq.n	800410c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a42      	ldr	r2, [pc, #264]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040e8:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040f0:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80040f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4936      	ldr	r1, [pc, #216]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
 800410a:	e008      	b.n	800411e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b80      	cmp	r3, #128	; 0x80
 8004110:	d105      	bne.n	800411e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800411c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800411e:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d21d      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 020f 	bic.w	r2, r3, #15
 8004134:	4929      	ldr	r1, [pc, #164]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800413c:	f7fe fc58 	bl	80029f0 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fe fc54 	bl	80029f0 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e03b      	b.n	80041d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_RCC_ClockConfig+0x260>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d1ed      	bne.n	8004144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4917      	ldr	r1, [pc, #92]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490f      	ldr	r1, [pc, #60]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a6:	f000 f825 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_ClockConfig+0x264>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	490c      	ldr	r1, [pc, #48]	; (80041e8 <HAL_RCC_ClockConfig+0x26c>)
 80041b8:	5ccb      	ldrb	r3, [r1, r3]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <HAL_RCC_ClockConfig+0x270>)
 80041c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fbc4 	bl	8002958 <HAL_InitTick>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40022000 	.word	0x40022000
 80041e0:	40021000 	.word	0x40021000
 80041e4:	04c4b400 	.word	0x04c4b400
 80041e8:	0800c2f4 	.word	0x0800c2f4
 80041ec:	20000004 	.word	0x20000004
 80041f0:	20000008 	.word	0x20000008

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041fa:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b04      	cmp	r3, #4
 8004204:	d102      	bne.n	800420c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004206:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e047      	b.n	800429c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d102      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004218:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e03e      	b.n	800429c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d136      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	3301      	adds	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d10c      	bne.n	8004262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004248:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	4a16      	ldr	r2, [pc, #88]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004252:	68d2      	ldr	r2, [r2, #12]
 8004254:	0a12      	lsrs	r2, r2, #8
 8004256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	617b      	str	r3, [r7, #20]
      break;
 8004260:	e00c      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004262:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	0a12      	lsrs	r2, r2, #8
 8004270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
      break;
 800427a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0e5b      	lsrs	r3, r3, #25
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	3301      	adds	r3, #1
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e001      	b.n	800429c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800429c:	693b      	ldr	r3, [r7, #16]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	00f42400 	.word	0x00f42400
 80042b4:	007a1200 	.word	0x007a1200

080042b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCC_GetHCLKFreq+0x14>)
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000004 	.word	0x20000004

080042d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d4:	f7ff fff0 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4904      	ldr	r1, [pc, #16]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	0800c304 	.word	0x0800c304

080042fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004300:	f7ff ffda 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0adb      	lsrs	r3, r3, #11
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4904      	ldr	r1, [pc, #16]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	0800c304 	.word	0x0800c304

08004328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d10c      	bne.n	8004366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004356:	68d2      	ldr	r2, [r2, #12]
 8004358:	0a12      	lsrs	r2, r2, #8
 800435a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
    break;
 8004364:	e00c      	b.n	8004380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004370:	68d2      	ldr	r2, [r2, #12]
 8004372:	0a12      	lsrs	r2, r2, #8
 8004374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    break;
 800437e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0e5b      	lsrs	r3, r3, #25
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800439a:	687b      	ldr	r3, [r7, #4]
}
 800439c:	4618      	mov	r0, r3
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40021000 	.word	0x40021000
 80043ac:	007a1200 	.word	0x007a1200
 80043b0:	00f42400 	.word	0x00f42400

080043b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043bc:	2300      	movs	r3, #0
 80043be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043c0:	2300      	movs	r3, #0
 80043c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8098 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4a3f      	ldr	r2, [pc, #252]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fe:	4b3a      	ldr	r3, [pc, #232]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a39      	ldr	r2, [pc, #228]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800440a:	f7fe faf1 	bl	80029f0 <HAL_GetTick>
 800440e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004410:	e009      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fe faed 	bl	80029f0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d902      	bls.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	74fb      	strb	r3, [r7, #19]
        break;
 8004424:	e005      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004426:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ef      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d159      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004438:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01e      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	429a      	cmp	r2, r3
 8004452:	d019      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004460:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004470:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fe faad 	bl	80029f0 <HAL_GetTick>
 8004496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004498:	e00b      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fe faa9 	bl	80029f0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d902      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	74fb      	strb	r3, [r7, #19]
            break;
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ec      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044dc:	e008      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044de:	7cfb      	ldrb	r3, [r7, #19]
 80044e0:	74bb      	strb	r3, [r7, #18]
 80044e2:	e005      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f0:	7c7b      	ldrb	r3, [r7, #17]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4ba7      	ldr	r3, [pc, #668]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	4aa6      	ldr	r2, [pc, #664]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800450e:	4ba1      	ldr	r3, [pc, #644]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 0203 	bic.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	499d      	ldr	r1, [pc, #628]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004530:	4b98      	ldr	r3, [pc, #608]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 020c 	bic.w	r2, r3, #12
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	4995      	ldr	r1, [pc, #596]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004552:	4b90      	ldr	r3, [pc, #576]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	498c      	ldr	r1, [pc, #560]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004574:	4b87      	ldr	r3, [pc, #540]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	4984      	ldr	r1, [pc, #528]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004596:	4b7f      	ldr	r3, [pc, #508]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	497b      	ldr	r1, [pc, #492]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	4973      	ldr	r1, [pc, #460]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045da:	4b6e      	ldr	r3, [pc, #440]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	496a      	ldr	r1, [pc, #424]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045fc:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4962      	ldr	r1, [pc, #392]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800461e:	4b5d      	ldr	r3, [pc, #372]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	4959      	ldr	r1, [pc, #356]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004640:	4b54      	ldr	r3, [pc, #336]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	4951      	ldr	r1, [pc, #324]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	2b00      	cmp	r3, #0
 8004660:	d015      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004662:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4948      	ldr	r1, [pc, #288]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004680:	d105      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004682:	4b44      	ldr	r3, [pc, #272]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4a43      	ldr	r2, [pc, #268]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800468c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	2b00      	cmp	r3, #0
 8004698:	d015      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800469a:	4b3e      	ldr	r3, [pc, #248]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	493a      	ldr	r1, [pc, #232]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d105      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4a35      	ldr	r2, [pc, #212]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d015      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046d2:	4b30      	ldr	r3, [pc, #192]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	492c      	ldr	r1, [pc, #176]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f0:	d105      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4a27      	ldr	r2, [pc, #156]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046fc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d015      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470a:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	491e      	ldr	r1, [pc, #120]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004728:	d105      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472a:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004734:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d015      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004750:	4910      	ldr	r1, [pc, #64]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004760:	d105      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	4902      	ldr	r1, [pc, #8]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004794:	40021000 	.word	0x40021000
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479e:	d105      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a20      	ldr	r2, [pc, #128]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	4918      	ldr	r1, [pc, #96]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d105      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a12      	ldr	r2, [pc, #72]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	490a      	ldr	r1, [pc, #40]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a04      	ldr	r2, [pc, #16]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800481c:	7cbb      	ldrb	r3, [r7, #18]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e09d      	b.n	800497a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d009      	beq.n	8004864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e005      	b.n	8004864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fe50 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a4:	d902      	bls.n	80048ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e002      	b.n	80048b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Init+0xa0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	f003 0204 	and.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004948:	ea42 0103 	orr.w	r1, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_SPI_Transmit+0x22>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e158      	b.n	8004c56 <HAL_SPI_Transmit+0x2d4>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ac:	f7fe f820 	bl	80029f0 <HAL_GetTick>
 80049b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c6:	e13d      	b.n	8004c44 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x52>
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049d8:	e134      	b.n	8004c44 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a24:	d10f      	bne.n	8004a46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d007      	beq.n	8004a64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a6c:	d94b      	bls.n	8004b06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Transmit+0xfa>
 8004a76:	8afb      	ldrh	r3, [r7, #22]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d13e      	bne.n	8004afa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	1c9a      	adds	r2, r3, #2
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004aa0:	e02b      	b.n	8004afa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d112      	bne.n	8004ad6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ad4:	e011      	b.n	8004afa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad6:	f7fd ff8b 	bl	80029f0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d803      	bhi.n	8004aee <HAL_SPI_Transmit+0x16c>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d102      	bne.n	8004af4 <HAL_SPI_Transmit+0x172>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004af8:	e0a4      	b.n	8004c44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ce      	bne.n	8004aa2 <HAL_SPI_Transmit+0x120>
 8004b04:	e07c      	b.n	8004c00 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_Transmit+0x192>
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d170      	bne.n	8004bf6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d912      	bls.n	8004b44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b02      	subs	r3, #2
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b42:	e058      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b6a:	e044      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d12b      	bne.n	8004bd2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d912      	bls.n	8004baa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	881a      	ldrh	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b02      	subs	r3, #2
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba8:	e025      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd0:	e011      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd2:	f7fd ff0d 	bl	80029f0 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d803      	bhi.n	8004bea <HAL_SPI_Transmit+0x268>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d102      	bne.n	8004bf0 <HAL_SPI_Transmit+0x26e>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d102      	bne.n	8004bf6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bf4:	e026      	b.n	8004c44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1b5      	bne.n	8004b6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fce3 	bl	80055d0 <SPI_EndRxTxTransaction>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e000      	b.n	8004c44 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d112      	bne.n	8004ca2 <HAL_SPI_Receive+0x44>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10e      	bne.n	8004ca2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2204      	movs	r2, #4
 8004c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f910 	bl	8004ebe <HAL_SPI_TransmitReceive>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	e109      	b.n	8004eb6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_SPI_Receive+0x52>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e102      	b.n	8004eb6 <HAL_SPI_Receive+0x258>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb8:	f7fd fe9a 	bl	80029f0 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cce:	e0e9      	b.n	8004ea4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_SPI_Receive+0x7e>
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ce0:	e0e0      	b.n	8004ea4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d2c:	d908      	bls.n	8004d40 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	e007      	b.n	8004d50 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	d10f      	bne.n	8004d7a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d007      	beq.n	8004d98 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004da0:	d867      	bhi.n	8004e72 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004da2:	e030      	b.n	8004e06 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d117      	bne.n	8004de2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f103 020c 	add.w	r2, r3, #12
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004de0:	e011      	b.n	8004e06 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de2:	f7fd fe05 	bl	80029f0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d803      	bhi.n	8004dfa <HAL_SPI_Receive+0x19c>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d102      	bne.n	8004e00 <HAL_SPI_Receive+0x1a2>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e04:	e04e      	b.n	8004ea4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1c8      	bne.n	8004da4 <HAL_SPI_Receive+0x146>
 8004e12:	e034      	b.n	8004e7e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d115      	bne.n	8004e4e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	1c9a      	adds	r2, r3, #2
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e4c:	e011      	b.n	8004e72 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e4e:	f7fd fdcf 	bl	80029f0 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d803      	bhi.n	8004e66 <HAL_SPI_Receive+0x208>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d102      	bne.n	8004e6c <HAL_SPI_Receive+0x20e>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e70:	e018      	b.n	8004ea4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ca      	bne.n	8004e14 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fb4c 	bl	8005520 <SPI_EndRxTransaction>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
 8004ea0:	e000      	b.n	8004ea4 <HAL_SPI_Receive+0x246>
  }

error :
 8004ea2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b08a      	sub	sp, #40	; 0x28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x26>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e1fb      	b.n	80052dc <HAL_SPI_TransmitReceive+0x41e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eec:	f7fd fd80 	bl	80029f0 <HAL_GetTick>
 8004ef0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ef8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f00:	887b      	ldrh	r3, [r7, #2]
 8004f02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f04:	887b      	ldrh	r3, [r7, #2]
 8004f06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f08:	7efb      	ldrb	r3, [r7, #27]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d00e      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x6e>
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f14:	d106      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x66>
 8004f1e:	7efb      	ldrb	r3, [r7, #27]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d003      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f2a:	e1cd      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x80>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x80>
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f44:	e1c0      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d003      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2205      	movs	r2, #5
 8004f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	887a      	ldrh	r2, [r7, #2]
 8004f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	887a      	ldrh	r2, [r7, #2]
 8004f86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f9c:	d802      	bhi.n	8004fa4 <HAL_SPI_TransmitReceive+0xe6>
 8004f9e:	8a3b      	ldrh	r3, [r7, #16]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d908      	bls.n	8004fb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	e007      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d007      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fec:	d97c      	bls.n	80050e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x13e>
 8004ff6:	8a7b      	ldrh	r3, [r7, #18]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d169      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	1c9a      	adds	r2, r3, #2
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005020:	e056      	b.n	80050d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d11b      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x1aa>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x1aa>
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b01      	cmp	r3, #1
 800503e:	d113      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	1c9a      	adds	r2, r3, #2
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d11c      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x1f2>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	b292      	uxth	r2, r2
 800508e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	1c9a      	adds	r2, r3, #2
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ac:	2301      	movs	r3, #1
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050b0:	f7fd fc9e 	bl	80029f0 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050bc:	429a      	cmp	r2, r3
 80050be:	d807      	bhi.n	80050d0 <HAL_SPI_TransmitReceive+0x212>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d003      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050ce:	e0fb      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1a3      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x164>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d19d      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x164>
 80050e6:	e0df      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x23a>
 80050f0:	8a7b      	ldrh	r3, [r7, #18]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	f040 80cb 	bne.w	800528e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d912      	bls.n	8005128 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	1c9a      	adds	r2, r3, #2
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b02      	subs	r3, #2
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005126:	e0b2      	b.n	800528e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514e:	e09e      	b.n	800528e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b02      	cmp	r3, #2
 800515c:	d134      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x30a>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d02f      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x30a>
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b01      	cmp	r3, #1
 800516c:	d12c      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d912      	bls.n	800519e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b02      	subs	r3, #2
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800519c:	e012      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	7812      	ldrb	r2, [r2, #0]
 80051aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d148      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x3aa>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d042      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d923      	bls.n	8005236 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	b292      	uxth	r2, r2
 80051fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b02      	subs	r3, #2
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d81f      	bhi.n	8005264 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	e016      	b.n	8005264 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f103 020c 	add.w	r2, r3, #12
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	7812      	ldrb	r2, [r2, #0]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005264:	2301      	movs	r3, #1
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005268:	f7fd fbc2 	bl	80029f0 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005274:	429a      	cmp	r2, r3
 8005276:	d803      	bhi.n	8005280 <HAL_SPI_TransmitReceive+0x3c2>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d102      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x3c8>
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800528c:	e01c      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	f47f af5b 	bne.w	8005150 <HAL_SPI_TransmitReceive+0x292>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f47f af54 	bne.w	8005150 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f98f 	bl	80055d0 <SPI_EndRxTxTransaction>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
 80052c4:	e000      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80052c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052f4:	f7fd fb7c 	bl	80029f0 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	4413      	add	r3, r2
 8005302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005304:	f7fd fb74 	bl	80029f0 <HAL_GetTick>
 8005308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800530a:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	015b      	lsls	r3, r3, #5
 8005310:	0d1b      	lsrs	r3, r3, #20
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531a:	e054      	b.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d050      	beq.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005324:	f7fd fb64 	bl	80029f0 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	d902      	bls.n	800533a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d13d      	bne.n	80053b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d111      	bne.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535c:	d004      	beq.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d107      	bne.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	d10f      	bne.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e017      	b.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4013      	ands	r3, r2
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d19b      	bne.n	800531c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000004 	.word	0x20000004

080053f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005406:	f7fd faf3 	bl	80029f0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	4413      	add	r3, r2
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005416:	f7fd faeb 	bl	80029f0 <HAL_GetTick>
 800541a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005424:	4b3d      	ldr	r3, [pc, #244]	; (800551c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	00da      	lsls	r2, r3, #3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	0d1b      	lsrs	r3, r3, #20
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800543c:	e060      	b.n	8005500 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005444:	d107      	bne.n	8005456 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005454:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d050      	beq.n	8005500 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800545e:	f7fd fac7 	bl	80029f0 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	429a      	cmp	r2, r3
 800546c:	d902      	bls.n	8005474 <SPI_WaitFifoStateUntilTimeout+0x80>
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d13d      	bne.n	80054f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548c:	d111      	bne.n	80054b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005496:	d004      	beq.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a0:	d107      	bne.n	80054b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ba:	d10f      	bne.n	80054dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e010      	b.n	8005512 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d196      	bne.n	800543e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000004 	.word	0x20000004

08005520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005534:	d111      	bne.n	800555a <SPI_EndRxTransaction+0x3a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d004      	beq.n	800554a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d107      	bne.n	800555a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005558:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff febd 	bl	80052e4 <SPI_WaitFlagStateUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e023      	b.n	80055c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005588:	d11d      	bne.n	80055c6 <SPI_EndRxTransaction+0xa6>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005592:	d004      	beq.n	800559e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559c:	d113      	bne.n	80055c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff22 	bl	80053f4 <SPI_WaitFifoStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e000      	b.n	80055c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff03 	bl	80053f4 <SPI_WaitFifoStateUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e027      	b.n	8005654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	2180      	movs	r1, #128	; 0x80
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fe68 	bl	80052e4 <SPI_WaitFlagStateUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e014      	b.n	8005654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff fedc 	bl	80053f4 <SPI_WaitFifoStateUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e000      	b.n	8005654 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e042      	b.n	80056f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fc ff91 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2224      	movs	r2, #36	; 0x24
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8c2 	bl	8005828 <UART_SetConfig>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e022      	b.n	80056f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fbb2 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fc39 	bl	8005f64 <UART_CheckIdleState>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005712:	2b20      	cmp	r3, #32
 8005714:	f040 8083 	bne.w	800581e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UART_Transmit+0x28>
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e07b      	b.n	8005820 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_UART_Transmit+0x3a>
 8005732:	2302      	movs	r3, #2
 8005734:	e074      	b.n	8005820 <HAL_UART_Transmit+0x124>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2221      	movs	r2, #33	; 0x21
 800574a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574e:	f7fd f94f 	bl	80029f0 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	d108      	bne.n	8005780 <HAL_UART_Transmit+0x84>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005790:	e02c      	b.n	80057ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fc2c 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e039      	b.n	8005820 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3302      	adds	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e007      	b.n	80057da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1cc      	bne.n	8005792 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2200      	movs	r2, #0
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fbf9 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e006      	b.n	8005820 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800582c:	b08c      	sub	sp, #48	; 0x30
 800582e:	af00      	add	r7, sp, #0
 8005830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	431a      	orrs	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	431a      	orrs	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4313      	orrs	r3, r2
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4baa      	ldr	r3, [pc, #680]	; (8005b00 <UART_SetConfig+0x2d8>)
 8005858:	4013      	ands	r3, r2
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005860:	430b      	orrs	r3, r1
 8005862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a9f      	ldr	r2, [pc, #636]	; (8005b04 <UART_SetConfig+0x2dc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005890:	4313      	orrs	r3, r2
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800589e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f023 010f 	bic.w	r1, r3, #15
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a90      	ldr	r2, [pc, #576]	; (8005b08 <UART_SetConfig+0x2e0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d125      	bne.n	8005918 <UART_SetConfig+0xf0>
 80058cc:	4b8f      	ldr	r3, [pc, #572]	; (8005b0c <UART_SetConfig+0x2e4>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d81a      	bhi.n	8005910 <UART_SetConfig+0xe8>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0xb8>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	08005901 	.word	0x08005901
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	08005909 	.word	0x08005909
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f6:	e116      	b.n	8005b26 <UART_SetConfig+0x2fe>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fe:	e112      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e10e      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e10a      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e106      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a7c      	ldr	r2, [pc, #496]	; (8005b10 <UART_SetConfig+0x2e8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d138      	bne.n	8005994 <UART_SetConfig+0x16c>
 8005922:	4b7a      	ldr	r3, [pc, #488]	; (8005b0c <UART_SetConfig+0x2e4>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d82d      	bhi.n	800598c <UART_SetConfig+0x164>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <UART_SetConfig+0x110>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596d 	.word	0x0800596d
 800593c:	0800598d 	.word	0x0800598d
 8005940:	0800598d 	.word	0x0800598d
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800597d 	.word	0x0800597d
 800594c:	0800598d 	.word	0x0800598d
 8005950:	0800598d 	.word	0x0800598d
 8005954:	0800598d 	.word	0x0800598d
 8005958:	08005975 	.word	0x08005975
 800595c:	0800598d 	.word	0x0800598d
 8005960:	0800598d 	.word	0x0800598d
 8005964:	0800598d 	.word	0x0800598d
 8005968:	08005985 	.word	0x08005985
 800596c:	2300      	movs	r3, #0
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005972:	e0d8      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005974:	2302      	movs	r3, #2
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597a:	e0d4      	b.n	8005b26 <UART_SetConfig+0x2fe>
 800597c:	2304      	movs	r3, #4
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e0d0      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005984:	2308      	movs	r3, #8
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e0cc      	b.n	8005b26 <UART_SetConfig+0x2fe>
 800598c:	2310      	movs	r3, #16
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e0c8      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5e      	ldr	r2, [pc, #376]	; (8005b14 <UART_SetConfig+0x2ec>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d125      	bne.n	80059ea <UART_SetConfig+0x1c2>
 800599e:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <UART_SetConfig+0x2e4>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059a8:	2b30      	cmp	r3, #48	; 0x30
 80059aa:	d016      	beq.n	80059da <UART_SetConfig+0x1b2>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d818      	bhi.n	80059e2 <UART_SetConfig+0x1ba>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d00a      	beq.n	80059ca <UART_SetConfig+0x1a2>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d814      	bhi.n	80059e2 <UART_SetConfig+0x1ba>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <UART_SetConfig+0x19a>
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d008      	beq.n	80059d2 <UART_SetConfig+0x1aa>
 80059c0:	e00f      	b.n	80059e2 <UART_SetConfig+0x1ba>
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c8:	e0ad      	b.n	8005b26 <UART_SetConfig+0x2fe>
 80059ca:	2302      	movs	r3, #2
 80059cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d0:	e0a9      	b.n	8005b26 <UART_SetConfig+0x2fe>
 80059d2:	2304      	movs	r3, #4
 80059d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d8:	e0a5      	b.n	8005b26 <UART_SetConfig+0x2fe>
 80059da:	2308      	movs	r3, #8
 80059dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e0:	e0a1      	b.n	8005b26 <UART_SetConfig+0x2fe>
 80059e2:	2310      	movs	r3, #16
 80059e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e8:	e09d      	b.n	8005b26 <UART_SetConfig+0x2fe>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4a      	ldr	r2, [pc, #296]	; (8005b18 <UART_SetConfig+0x2f0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d125      	bne.n	8005a40 <UART_SetConfig+0x218>
 80059f4:	4b45      	ldr	r3, [pc, #276]	; (8005b0c <UART_SetConfig+0x2e4>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005a00:	d016      	beq.n	8005a30 <UART_SetConfig+0x208>
 8005a02:	2bc0      	cmp	r3, #192	; 0xc0
 8005a04:	d818      	bhi.n	8005a38 <UART_SetConfig+0x210>
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d00a      	beq.n	8005a20 <UART_SetConfig+0x1f8>
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d814      	bhi.n	8005a38 <UART_SetConfig+0x210>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <UART_SetConfig+0x1f0>
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d008      	beq.n	8005a28 <UART_SetConfig+0x200>
 8005a16:	e00f      	b.n	8005a38 <UART_SetConfig+0x210>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1e:	e082      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a20:	2302      	movs	r3, #2
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a26:	e07e      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e07a      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a36:	e076      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e072      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a35      	ldr	r2, [pc, #212]	; (8005b1c <UART_SetConfig+0x2f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d12a      	bne.n	8005aa0 <UART_SetConfig+0x278>
 8005a4a:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <UART_SetConfig+0x2e4>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a58:	d01a      	beq.n	8005a90 <UART_SetConfig+0x268>
 8005a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5e:	d81b      	bhi.n	8005a98 <UART_SetConfig+0x270>
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d00c      	beq.n	8005a80 <UART_SetConfig+0x258>
 8005a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6a:	d815      	bhi.n	8005a98 <UART_SetConfig+0x270>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <UART_SetConfig+0x250>
 8005a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a74:	d008      	beq.n	8005a88 <UART_SetConfig+0x260>
 8005a76:	e00f      	b.n	8005a98 <UART_SetConfig+0x270>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	e052      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e04e      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e04a      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e046      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e042      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <UART_SetConfig+0x2dc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d13a      	bne.n	8005b20 <UART_SetConfig+0x2f8>
 8005aaa:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <UART_SetConfig+0x2e4>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ab8:	d01a      	beq.n	8005af0 <UART_SetConfig+0x2c8>
 8005aba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005abe:	d81b      	bhi.n	8005af8 <UART_SetConfig+0x2d0>
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac4:	d00c      	beq.n	8005ae0 <UART_SetConfig+0x2b8>
 8005ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aca:	d815      	bhi.n	8005af8 <UART_SetConfig+0x2d0>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <UART_SetConfig+0x2b0>
 8005ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad4:	d008      	beq.n	8005ae8 <UART_SetConfig+0x2c0>
 8005ad6:	e00f      	b.n	8005af8 <UART_SetConfig+0x2d0>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ade:	e022      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae6:	e01e      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aee:	e01a      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005af0:	2308      	movs	r3, #8
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af6:	e016      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005af8:	2310      	movs	r3, #16
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afe:	e012      	b.n	8005b26 <UART_SetConfig+0x2fe>
 8005b00:	cfff69f3 	.word	0xcfff69f3
 8005b04:	40008000 	.word	0x40008000
 8005b08:	40013800 	.word	0x40013800
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40004400 	.word	0x40004400
 8005b14:	40004800 	.word	0x40004800
 8005b18:	40004c00 	.word	0x40004c00
 8005b1c:	40005000 	.word	0x40005000
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4aae      	ldr	r2, [pc, #696]	; (8005de4 <UART_SetConfig+0x5bc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	f040 8097 	bne.w	8005c60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d823      	bhi.n	8005b82 <UART_SetConfig+0x35a>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0x318>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b83 	.word	0x08005b83
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b83 	.word	0x08005b83
 8005b50:	08005b73 	.word	0x08005b73
 8005b54:	08005b83 	.word	0x08005b83
 8005b58:	08005b83 	.word	0x08005b83
 8005b5c:	08005b83 	.word	0x08005b83
 8005b60:	08005b7b 	.word	0x08005b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fe fbb4 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b6a:	e010      	b.n	8005b8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b9e      	ldr	r3, [pc, #632]	; (8005de8 <UART_SetConfig+0x5c0>)
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b70:	e00d      	b.n	8005b8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fe fb3f 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005b76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b78:	e009      	b.n	8005b8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b80:	e005      	b.n	8005b8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8130 	beq.w	8005df6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	4a94      	ldr	r2, [pc, #592]	; (8005dec <UART_SetConfig+0x5c4>)
 8005b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d305      	bcc.n	8005bc6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d903      	bls.n	8005bce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bcc:	e113      	b.n	8005df6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	60fa      	str	r2, [r7, #12]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	4a84      	ldr	r2, [pc, #528]	; (8005dec <UART_SetConfig+0x5c4>)
 8005bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2200      	movs	r2, #0
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bf0:	f7fb f872 	bl	8000cd8 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	020b      	lsls	r3, r1, #8
 8005c06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c0a:	0202      	lsls	r2, r0, #8
 8005c0c:	6979      	ldr	r1, [r7, #20]
 8005c0e:	6849      	ldr	r1, [r1, #4]
 8005c10:	0849      	lsrs	r1, r1, #1
 8005c12:	2000      	movs	r0, #0
 8005c14:	460c      	mov	r4, r1
 8005c16:	4605      	mov	r5, r0
 8005c18:	eb12 0804 	adds.w	r8, r2, r4
 8005c1c:	eb43 0905 	adc.w	r9, r3, r5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	469a      	mov	sl, r3
 8005c28:	4693      	mov	fp, r2
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	465b      	mov	r3, fp
 8005c2e:	4640      	mov	r0, r8
 8005c30:	4649      	mov	r1, r9
 8005c32:	f7fb f851 	bl	8000cd8 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c44:	d308      	bcc.n	8005c58 <UART_SetConfig+0x430>
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4c:	d204      	bcs.n	8005c58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	e0ce      	b.n	8005df6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c5e:	e0ca      	b.n	8005df6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c68:	d166      	bne.n	8005d38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d827      	bhi.n	8005cc2 <UART_SetConfig+0x49a>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <UART_SetConfig+0x450>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005ca5 	.word	0x08005ca5
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	08005cc3 	.word	0x08005cc3
 8005c88:	08005cb3 	.word	0x08005cb3
 8005c8c:	08005cc3 	.word	0x08005cc3
 8005c90:	08005cc3 	.word	0x08005cc3
 8005c94:	08005cc3 	.word	0x08005cc3
 8005c98:	08005cbb 	.word	0x08005cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f7fe fb18 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8005ca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ca2:	e014      	b.n	8005cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca4:	f7fe fb2a 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8005ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005caa:	e010      	b.n	8005cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cac:	4b4e      	ldr	r3, [pc, #312]	; (8005de8 <UART_SetConfig+0x5c0>)
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cb0:	e00d      	b.n	8005cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb2:	f7fe fa9f 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cc0:	e005      	b.n	8005cce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8090 	beq.w	8005df6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	4a44      	ldr	r2, [pc, #272]	; (8005dec <UART_SetConfig+0x5c4>)
 8005cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ce8:	005a      	lsls	r2, r3, #1
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	441a      	add	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d916      	bls.n	8005d30 <UART_SetConfig+0x508>
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d212      	bcs.n	8005d30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f023 030f 	bic.w	r3, r3, #15
 8005d12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	8bfb      	ldrh	r3, [r7, #30]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	8bfa      	ldrh	r2, [r7, #30]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	e062      	b.n	8005df6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d36:	e05e      	b.n	8005df6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d828      	bhi.n	8005d92 <UART_SetConfig+0x56a>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <UART_SetConfig+0x520>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d75 	.word	0x08005d75
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	08005d93 	.word	0x08005d93
 8005d58:	08005d83 	.word	0x08005d83
 8005d5c:	08005d93 	.word	0x08005d93
 8005d60:	08005d93 	.word	0x08005d93
 8005d64:	08005d93 	.word	0x08005d93
 8005d68:	08005d8b 	.word	0x08005d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7fe fab0 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d72:	e014      	b.n	8005d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d74:	f7fe fac2 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8005d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d7a:	e010      	b.n	8005d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <UART_SetConfig+0x5c0>)
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d80:	e00d      	b.n	8005d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d82:	f7fe fa37 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005d86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d88:	e009      	b.n	8005d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d90:	e005      	b.n	8005d9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d028      	beq.n	8005df6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	4a10      	ldr	r2, [pc, #64]	; (8005dec <UART_SetConfig+0x5c4>)
 8005daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	441a      	add	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d910      	bls.n	8005df0 <UART_SetConfig+0x5c8>
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d20c      	bcs.n	8005df0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	e009      	b.n	8005df6 <UART_SetConfig+0x5ce>
 8005de2:	bf00      	nop
 8005de4:	40008000 	.word	0x40008000
 8005de8:	00f42400 	.word	0x00f42400
 8005dec:	0800c30c 	.word	0x0800c30c
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3730      	adds	r7, #48	; 0x30
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f74:	f7fc fd3c 	bl	80029f0 <HAL_GetTick>
 8005f78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d10e      	bne.n	8005fa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f82f 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e025      	b.n	8005ff2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d10e      	bne.n	8005fd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f819 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e00f      	b.n	8005ff2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b09c      	sub	sp, #112	; 0x70
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600a:	e0a9      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	f000 80a5 	beq.w	8006160 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006016:	f7fc fceb 	bl	80029f0 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <UART_WaitOnFlagUntilTimeout+0x32>
 8006026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006028:	2b00      	cmp	r3, #0
 800602a:	d140      	bne.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800603a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006040:	667b      	str	r3, [r7, #100]	; 0x64
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800604a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800604c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006050:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e6      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	663b      	str	r3, [r7, #96]	; 0x60
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3308      	adds	r3, #8
 800607c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800607e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006080:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800608c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e069      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d051      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ca:	d149      	bne.n	8006160 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
 80060f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	613b      	str	r3, [r7, #16]
   return(result);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006128:	623a      	str	r2, [r7, #32]
 800612a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	69f9      	ldr	r1, [r7, #28]
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	61bb      	str	r3, [r7, #24]
   return(result);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e5      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e010      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	429a      	cmp	r2, r3
 800617c:	f43f af46 	beq.w	800600c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3770      	adds	r7, #112	; 0x70
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800619c:	2302      	movs	r3, #2
 800619e:	e027      	b.n	80061f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2224      	movs	r2, #36	; 0x24
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e02d      	b.n	8006270 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	; 0x24
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f84f 	bl	80062f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e02d      	b.n	80062ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2224      	movs	r2, #36	; 0x24
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f811 	bl	80062f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	2b00      	cmp	r3, #0
 8006302:	d108      	bne.n	8006316 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006314:	e031      	b.n	800637a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006316:	2308      	movs	r3, #8
 8006318:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800631a:	2308      	movs	r3, #8
 800631c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	0e5b      	lsrs	r3, r3, #25
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	0f5b      	lsrs	r3, r3, #29
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	7b3a      	ldrb	r2, [r7, #12]
 8006342:	4911      	ldr	r1, [pc, #68]	; (8006388 <UARTEx_SetNbDataToProcess+0x94>)
 8006344:	5c8a      	ldrb	r2, [r1, r2]
 8006346:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800634a:	7b3a      	ldrb	r2, [r7, #12]
 800634c:	490f      	ldr	r1, [pc, #60]	; (800638c <UARTEx_SetNbDataToProcess+0x98>)
 800634e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006350:	fb93 f3f2 	sdiv	r3, r3, r2
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	7b7a      	ldrb	r2, [r7, #13]
 8006360:	4909      	ldr	r1, [pc, #36]	; (8006388 <UARTEx_SetNbDataToProcess+0x94>)
 8006362:	5c8a      	ldrb	r2, [r1, r2]
 8006364:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006368:	7b7a      	ldrb	r2, [r7, #13]
 800636a:	4908      	ldr	r1, [pc, #32]	; (800638c <UARTEx_SetNbDataToProcess+0x98>)
 800636c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	0800c324 	.word	0x0800c324
 800638c:	0800c32c 	.word	0x0800c32c

08006390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006398:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800639c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	4013      	ands	r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063c6:	b084      	sub	sp, #16
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	f107 0014 	add.w	r0, r7, #20
 80063d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	b004      	add	sp, #16
 8006406:	4770      	bx	lr

08006408 <__cvt>:
 8006408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	ec55 4b10 	vmov	r4, r5, d0
 8006410:	2d00      	cmp	r5, #0
 8006412:	460e      	mov	r6, r1
 8006414:	4619      	mov	r1, r3
 8006416:	462b      	mov	r3, r5
 8006418:	bfbb      	ittet	lt
 800641a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800641e:	461d      	movlt	r5, r3
 8006420:	2300      	movge	r3, #0
 8006422:	232d      	movlt	r3, #45	; 0x2d
 8006424:	700b      	strb	r3, [r1, #0]
 8006426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800642c:	4691      	mov	r9, r2
 800642e:	f023 0820 	bic.w	r8, r3, #32
 8006432:	bfbc      	itt	lt
 8006434:	4622      	movlt	r2, r4
 8006436:	4614      	movlt	r4, r2
 8006438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800643c:	d005      	beq.n	800644a <__cvt+0x42>
 800643e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006442:	d100      	bne.n	8006446 <__cvt+0x3e>
 8006444:	3601      	adds	r6, #1
 8006446:	2102      	movs	r1, #2
 8006448:	e000      	b.n	800644c <__cvt+0x44>
 800644a:	2103      	movs	r1, #3
 800644c:	ab03      	add	r3, sp, #12
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	ab02      	add	r3, sp, #8
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	ec45 4b10 	vmov	d0, r4, r5
 8006458:	4653      	mov	r3, sl
 800645a:	4632      	mov	r2, r6
 800645c:	f001 f988 	bl	8007770 <_dtoa_r>
 8006460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006464:	4607      	mov	r7, r0
 8006466:	d102      	bne.n	800646e <__cvt+0x66>
 8006468:	f019 0f01 	tst.w	r9, #1
 800646c:	d022      	beq.n	80064b4 <__cvt+0xac>
 800646e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006472:	eb07 0906 	add.w	r9, r7, r6
 8006476:	d110      	bne.n	800649a <__cvt+0x92>
 8006478:	783b      	ldrb	r3, [r7, #0]
 800647a:	2b30      	cmp	r3, #48	; 0x30
 800647c:	d10a      	bne.n	8006494 <__cvt+0x8c>
 800647e:	2200      	movs	r2, #0
 8006480:	2300      	movs	r3, #0
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7fa fb47 	bl	8000b18 <__aeabi_dcmpeq>
 800648a:	b918      	cbnz	r0, 8006494 <__cvt+0x8c>
 800648c:	f1c6 0601 	rsb	r6, r6, #1
 8006490:	f8ca 6000 	str.w	r6, [sl]
 8006494:	f8da 3000 	ldr.w	r3, [sl]
 8006498:	4499      	add	r9, r3
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa fb39 	bl	8000b18 <__aeabi_dcmpeq>
 80064a6:	b108      	cbz	r0, 80064ac <__cvt+0xa4>
 80064a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80064ac:	2230      	movs	r2, #48	; 0x30
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	454b      	cmp	r3, r9
 80064b2:	d307      	bcc.n	80064c4 <__cvt+0xbc>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064b8:	1bdb      	subs	r3, r3, r7
 80064ba:	4638      	mov	r0, r7
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	b004      	add	sp, #16
 80064c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c4:	1c59      	adds	r1, r3, #1
 80064c6:	9103      	str	r1, [sp, #12]
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e7f0      	b.n	80064ae <__cvt+0xa6>

080064cc <__exponent>:
 80064cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ce:	4603      	mov	r3, r0
 80064d0:	2900      	cmp	r1, #0
 80064d2:	bfb8      	it	lt
 80064d4:	4249      	neglt	r1, r1
 80064d6:	f803 2b02 	strb.w	r2, [r3], #2
 80064da:	bfb4      	ite	lt
 80064dc:	222d      	movlt	r2, #45	; 0x2d
 80064de:	222b      	movge	r2, #43	; 0x2b
 80064e0:	2909      	cmp	r1, #9
 80064e2:	7042      	strb	r2, [r0, #1]
 80064e4:	dd2a      	ble.n	800653c <__exponent+0x70>
 80064e6:	f10d 0207 	add.w	r2, sp, #7
 80064ea:	4617      	mov	r7, r2
 80064ec:	260a      	movs	r6, #10
 80064ee:	4694      	mov	ip, r2
 80064f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80064f4:	fb06 1415 	mls	r4, r6, r5, r1
 80064f8:	3430      	adds	r4, #48	; 0x30
 80064fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80064fe:	460c      	mov	r4, r1
 8006500:	2c63      	cmp	r4, #99	; 0x63
 8006502:	f102 32ff 	add.w	r2, r2, #4294967295
 8006506:	4629      	mov	r1, r5
 8006508:	dcf1      	bgt.n	80064ee <__exponent+0x22>
 800650a:	3130      	adds	r1, #48	; 0x30
 800650c:	f1ac 0402 	sub.w	r4, ip, #2
 8006510:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006514:	1c41      	adds	r1, r0, #1
 8006516:	4622      	mov	r2, r4
 8006518:	42ba      	cmp	r2, r7
 800651a:	d30a      	bcc.n	8006532 <__exponent+0x66>
 800651c:	f10d 0209 	add.w	r2, sp, #9
 8006520:	eba2 020c 	sub.w	r2, r2, ip
 8006524:	42bc      	cmp	r4, r7
 8006526:	bf88      	it	hi
 8006528:	2200      	movhi	r2, #0
 800652a:	4413      	add	r3, r2
 800652c:	1a18      	subs	r0, r3, r0
 800652e:	b003      	add	sp, #12
 8006530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006532:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006536:	f801 5f01 	strb.w	r5, [r1, #1]!
 800653a:	e7ed      	b.n	8006518 <__exponent+0x4c>
 800653c:	2330      	movs	r3, #48	; 0x30
 800653e:	3130      	adds	r1, #48	; 0x30
 8006540:	7083      	strb	r3, [r0, #2]
 8006542:	70c1      	strb	r1, [r0, #3]
 8006544:	1d03      	adds	r3, r0, #4
 8006546:	e7f1      	b.n	800652c <__exponent+0x60>

08006548 <_printf_float>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	ed2d 8b02 	vpush	{d8}
 8006550:	b08d      	sub	sp, #52	; 0x34
 8006552:	460c      	mov	r4, r1
 8006554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006558:	4616      	mov	r6, r2
 800655a:	461f      	mov	r7, r3
 800655c:	4605      	mov	r5, r0
 800655e:	f001 f801 	bl	8007564 <_localeconv_r>
 8006562:	f8d0 a000 	ldr.w	sl, [r0]
 8006566:	4650      	mov	r0, sl
 8006568:	f7f9 feaa 	bl	80002c0 <strlen>
 800656c:	2300      	movs	r3, #0
 800656e:	930a      	str	r3, [sp, #40]	; 0x28
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	f8d8 3000 	ldr.w	r3, [r8]
 8006578:	f894 b018 	ldrb.w	fp, [r4, #24]
 800657c:	3307      	adds	r3, #7
 800657e:	f023 0307 	bic.w	r3, r3, #7
 8006582:	f103 0208 	add.w	r2, r3, #8
 8006586:	f8c8 2000 	str.w	r2, [r8]
 800658a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800658e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006592:	9307      	str	r3, [sp, #28]
 8006594:	f8cd 8018 	str.w	r8, [sp, #24]
 8006598:	ee08 0a10 	vmov	s16, r0
 800659c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80065a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065a4:	4b9e      	ldr	r3, [pc, #632]	; (8006820 <_printf_float+0x2d8>)
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	f7fa fae7 	bl	8000b7c <__aeabi_dcmpun>
 80065ae:	bb88      	cbnz	r0, 8006614 <_printf_float+0xcc>
 80065b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b4:	4b9a      	ldr	r3, [pc, #616]	; (8006820 <_printf_float+0x2d8>)
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	f7fa fac1 	bl	8000b40 <__aeabi_dcmple>
 80065be:	bb48      	cbnz	r0, 8006614 <_printf_float+0xcc>
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4640      	mov	r0, r8
 80065c6:	4649      	mov	r1, r9
 80065c8:	f7fa fab0 	bl	8000b2c <__aeabi_dcmplt>
 80065cc:	b110      	cbz	r0, 80065d4 <_printf_float+0x8c>
 80065ce:	232d      	movs	r3, #45	; 0x2d
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d4:	4a93      	ldr	r2, [pc, #588]	; (8006824 <_printf_float+0x2dc>)
 80065d6:	4b94      	ldr	r3, [pc, #592]	; (8006828 <_printf_float+0x2e0>)
 80065d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065dc:	bf94      	ite	ls
 80065de:	4690      	movls	r8, r2
 80065e0:	4698      	movhi	r8, r3
 80065e2:	2303      	movs	r3, #3
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	9b05      	ldr	r3, [sp, #20]
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	f04f 0900 	mov.w	r9, #0
 80065f2:	9700      	str	r7, [sp, #0]
 80065f4:	4633      	mov	r3, r6
 80065f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f9da 	bl	80069b4 <_printf_common>
 8006600:	3001      	adds	r0, #1
 8006602:	f040 8090 	bne.w	8006726 <_printf_float+0x1de>
 8006606:	f04f 30ff 	mov.w	r0, #4294967295
 800660a:	b00d      	add	sp, #52	; 0x34
 800660c:	ecbd 8b02 	vpop	{d8}
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	4642      	mov	r2, r8
 8006616:	464b      	mov	r3, r9
 8006618:	4640      	mov	r0, r8
 800661a:	4649      	mov	r1, r9
 800661c:	f7fa faae 	bl	8000b7c <__aeabi_dcmpun>
 8006620:	b140      	cbz	r0, 8006634 <_printf_float+0xec>
 8006622:	464b      	mov	r3, r9
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfbc      	itt	lt
 8006628:	232d      	movlt	r3, #45	; 0x2d
 800662a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800662e:	4a7f      	ldr	r2, [pc, #508]	; (800682c <_printf_float+0x2e4>)
 8006630:	4b7f      	ldr	r3, [pc, #508]	; (8006830 <_printf_float+0x2e8>)
 8006632:	e7d1      	b.n	80065d8 <_printf_float+0x90>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800663a:	9206      	str	r2, [sp, #24]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	d13f      	bne.n	80066c0 <_printf_float+0x178>
 8006640:	2306      	movs	r3, #6
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	9b05      	ldr	r3, [sp, #20]
 8006646:	6861      	ldr	r1, [r4, #4]
 8006648:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800664c:	2300      	movs	r3, #0
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	ab0a      	add	r3, sp, #40	; 0x28
 8006652:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006656:	ab09      	add	r3, sp, #36	; 0x24
 8006658:	ec49 8b10 	vmov	d0, r8, r9
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6022      	str	r2, [r4, #0]
 8006660:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff fecf 	bl	8006408 <__cvt>
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800666e:	2b47      	cmp	r3, #71	; 0x47
 8006670:	4680      	mov	r8, r0
 8006672:	d108      	bne.n	8006686 <_printf_float+0x13e>
 8006674:	1cc8      	adds	r0, r1, #3
 8006676:	db02      	blt.n	800667e <_printf_float+0x136>
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	4299      	cmp	r1, r3
 800667c:	dd41      	ble.n	8006702 <_printf_float+0x1ba>
 800667e:	f1ab 0302 	sub.w	r3, fp, #2
 8006682:	fa5f fb83 	uxtb.w	fp, r3
 8006686:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800668a:	d820      	bhi.n	80066ce <_printf_float+0x186>
 800668c:	3901      	subs	r1, #1
 800668e:	465a      	mov	r2, fp
 8006690:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006694:	9109      	str	r1, [sp, #36]	; 0x24
 8006696:	f7ff ff19 	bl	80064cc <__exponent>
 800669a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800669c:	1813      	adds	r3, r2, r0
 800669e:	2a01      	cmp	r2, #1
 80066a0:	4681      	mov	r9, r0
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	dc02      	bgt.n	80066ac <_printf_float+0x164>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	07d2      	lsls	r2, r2, #31
 80066aa:	d501      	bpl.n	80066b0 <_printf_float+0x168>
 80066ac:	3301      	adds	r3, #1
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d09c      	beq.n	80065f2 <_printf_float+0xaa>
 80066b8:	232d      	movs	r3, #45	; 0x2d
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	e798      	b.n	80065f2 <_printf_float+0xaa>
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	2a47      	cmp	r2, #71	; 0x47
 80066c4:	d1be      	bne.n	8006644 <_printf_float+0xfc>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1bc      	bne.n	8006644 <_printf_float+0xfc>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7b9      	b.n	8006642 <_printf_float+0xfa>
 80066ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066d2:	d118      	bne.n	8006706 <_printf_float+0x1be>
 80066d4:	2900      	cmp	r1, #0
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	dd0b      	ble.n	80066f2 <_printf_float+0x1aa>
 80066da:	6121      	str	r1, [r4, #16]
 80066dc:	b913      	cbnz	r3, 80066e4 <_printf_float+0x19c>
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	07d0      	lsls	r0, r2, #31
 80066e2:	d502      	bpl.n	80066ea <_printf_float+0x1a2>
 80066e4:	3301      	adds	r3, #1
 80066e6:	440b      	add	r3, r1
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80066ec:	f04f 0900 	mov.w	r9, #0
 80066f0:	e7de      	b.n	80066b0 <_printf_float+0x168>
 80066f2:	b913      	cbnz	r3, 80066fa <_printf_float+0x1b2>
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	07d2      	lsls	r2, r2, #31
 80066f8:	d501      	bpl.n	80066fe <_printf_float+0x1b6>
 80066fa:	3302      	adds	r3, #2
 80066fc:	e7f4      	b.n	80066e8 <_printf_float+0x1a0>
 80066fe:	2301      	movs	r3, #1
 8006700:	e7f2      	b.n	80066e8 <_printf_float+0x1a0>
 8006702:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006708:	4299      	cmp	r1, r3
 800670a:	db05      	blt.n	8006718 <_printf_float+0x1d0>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	6121      	str	r1, [r4, #16]
 8006710:	07d8      	lsls	r0, r3, #31
 8006712:	d5ea      	bpl.n	80066ea <_printf_float+0x1a2>
 8006714:	1c4b      	adds	r3, r1, #1
 8006716:	e7e7      	b.n	80066e8 <_printf_float+0x1a0>
 8006718:	2900      	cmp	r1, #0
 800671a:	bfd4      	ite	le
 800671c:	f1c1 0202 	rsble	r2, r1, #2
 8006720:	2201      	movgt	r2, #1
 8006722:	4413      	add	r3, r2
 8006724:	e7e0      	b.n	80066e8 <_printf_float+0x1a0>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	055a      	lsls	r2, r3, #21
 800672a:	d407      	bmi.n	800673c <_printf_float+0x1f4>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	4642      	mov	r2, r8
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	d12c      	bne.n	8006794 <_printf_float+0x24c>
 800673a:	e764      	b.n	8006606 <_printf_float+0xbe>
 800673c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006740:	f240 80e0 	bls.w	8006904 <_printf_float+0x3bc>
 8006744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006748:	2200      	movs	r2, #0
 800674a:	2300      	movs	r3, #0
 800674c:	f7fa f9e4 	bl	8000b18 <__aeabi_dcmpeq>
 8006750:	2800      	cmp	r0, #0
 8006752:	d034      	beq.n	80067be <_printf_float+0x276>
 8006754:	4a37      	ldr	r2, [pc, #220]	; (8006834 <_printf_float+0x2ec>)
 8006756:	2301      	movs	r3, #1
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af51 	beq.w	8006606 <_printf_float+0xbe>
 8006764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006768:	429a      	cmp	r2, r3
 800676a:	db02      	blt.n	8006772 <_printf_float+0x22a>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	07d8      	lsls	r0, r3, #31
 8006770:	d510      	bpl.n	8006794 <_printf_float+0x24c>
 8006772:	ee18 3a10 	vmov	r3, s16
 8006776:	4652      	mov	r2, sl
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af41 	beq.w	8006606 <_printf_float+0xbe>
 8006784:	f04f 0800 	mov.w	r8, #0
 8006788:	f104 091a 	add.w	r9, r4, #26
 800678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678e:	3b01      	subs	r3, #1
 8006790:	4543      	cmp	r3, r8
 8006792:	dc09      	bgt.n	80067a8 <_printf_float+0x260>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	079b      	lsls	r3, r3, #30
 8006798:	f100 8107 	bmi.w	80069aa <_printf_float+0x462>
 800679c:	68e0      	ldr	r0, [r4, #12]
 800679e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067a0:	4298      	cmp	r0, r3
 80067a2:	bfb8      	it	lt
 80067a4:	4618      	movlt	r0, r3
 80067a6:	e730      	b.n	800660a <_printf_float+0xc2>
 80067a8:	2301      	movs	r3, #1
 80067aa:	464a      	mov	r2, r9
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af27 	beq.w	8006606 <_printf_float+0xbe>
 80067b8:	f108 0801 	add.w	r8, r8, #1
 80067bc:	e7e6      	b.n	800678c <_printf_float+0x244>
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc39      	bgt.n	8006838 <_printf_float+0x2f0>
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <_printf_float+0x2ec>)
 80067c6:	2301      	movs	r3, #1
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af19 	beq.w	8006606 <_printf_float+0xbe>
 80067d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067d8:	4313      	orrs	r3, r2
 80067da:	d102      	bne.n	80067e2 <_printf_float+0x29a>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07d9      	lsls	r1, r3, #31
 80067e0:	d5d8      	bpl.n	8006794 <_printf_float+0x24c>
 80067e2:	ee18 3a10 	vmov	r3, s16
 80067e6:	4652      	mov	r2, sl
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af09 	beq.w	8006606 <_printf_float+0xbe>
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	f104 0a1a 	add.w	sl, r4, #26
 80067fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fe:	425b      	negs	r3, r3
 8006800:	454b      	cmp	r3, r9
 8006802:	dc01      	bgt.n	8006808 <_printf_float+0x2c0>
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	e792      	b.n	800672e <_printf_float+0x1e6>
 8006808:	2301      	movs	r3, #1
 800680a:	4652      	mov	r2, sl
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f aef7 	beq.w	8006606 <_printf_float+0xbe>
 8006818:	f109 0901 	add.w	r9, r9, #1
 800681c:	e7ee      	b.n	80067fc <_printf_float+0x2b4>
 800681e:	bf00      	nop
 8006820:	7fefffff 	.word	0x7fefffff
 8006824:	0800c334 	.word	0x0800c334
 8006828:	0800c338 	.word	0x0800c338
 800682c:	0800c33c 	.word	0x0800c33c
 8006830:	0800c340 	.word	0x0800c340
 8006834:	0800c344 	.word	0x0800c344
 8006838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800683a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800683c:	429a      	cmp	r2, r3
 800683e:	bfa8      	it	ge
 8006840:	461a      	movge	r2, r3
 8006842:	2a00      	cmp	r2, #0
 8006844:	4691      	mov	r9, r2
 8006846:	dc37      	bgt.n	80068b8 <_printf_float+0x370>
 8006848:	f04f 0b00 	mov.w	fp, #0
 800684c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006850:	f104 021a 	add.w	r2, r4, #26
 8006854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	eba3 0309 	sub.w	r3, r3, r9
 800685c:	455b      	cmp	r3, fp
 800685e:	dc33      	bgt.n	80068c8 <_printf_float+0x380>
 8006860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006864:	429a      	cmp	r2, r3
 8006866:	db3b      	blt.n	80068e0 <_printf_float+0x398>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	07da      	lsls	r2, r3, #31
 800686c:	d438      	bmi.n	80068e0 <_printf_float+0x398>
 800686e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006872:	eba2 0903 	sub.w	r9, r2, r3
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	4591      	cmp	r9, r2
 800687c:	bfa8      	it	ge
 800687e:	4691      	movge	r9, r2
 8006880:	f1b9 0f00 	cmp.w	r9, #0
 8006884:	dc35      	bgt.n	80068f2 <_printf_float+0x3aa>
 8006886:	f04f 0800 	mov.w	r8, #0
 800688a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800688e:	f104 0a1a 	add.w	sl, r4, #26
 8006892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	eba3 0309 	sub.w	r3, r3, r9
 800689c:	4543      	cmp	r3, r8
 800689e:	f77f af79 	ble.w	8006794 <_printf_float+0x24c>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4652      	mov	r2, sl
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f aeaa 	beq.w	8006606 <_printf_float+0xbe>
 80068b2:	f108 0801 	add.w	r8, r8, #1
 80068b6:	e7ec      	b.n	8006892 <_printf_float+0x34a>
 80068b8:	4613      	mov	r3, r2
 80068ba:	4631      	mov	r1, r6
 80068bc:	4642      	mov	r2, r8
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1c0      	bne.n	8006848 <_printf_float+0x300>
 80068c6:	e69e      	b.n	8006606 <_printf_float+0xbe>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	9205      	str	r2, [sp, #20]
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f ae97 	beq.w	8006606 <_printf_float+0xbe>
 80068d8:	9a05      	ldr	r2, [sp, #20]
 80068da:	f10b 0b01 	add.w	fp, fp, #1
 80068de:	e7b9      	b.n	8006854 <_printf_float+0x30c>
 80068e0:	ee18 3a10 	vmov	r3, s16
 80068e4:	4652      	mov	r2, sl
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	d1be      	bne.n	800686e <_printf_float+0x326>
 80068f0:	e689      	b.n	8006606 <_printf_float+0xbe>
 80068f2:	9a05      	ldr	r2, [sp, #20]
 80068f4:	464b      	mov	r3, r9
 80068f6:	4442      	add	r2, r8
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	d1c1      	bne.n	8006886 <_printf_float+0x33e>
 8006902:	e680      	b.n	8006606 <_printf_float+0xbe>
 8006904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006906:	2a01      	cmp	r2, #1
 8006908:	dc01      	bgt.n	800690e <_printf_float+0x3c6>
 800690a:	07db      	lsls	r3, r3, #31
 800690c:	d53a      	bpl.n	8006984 <_printf_float+0x43c>
 800690e:	2301      	movs	r3, #1
 8006910:	4642      	mov	r2, r8
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f ae74 	beq.w	8006606 <_printf_float+0xbe>
 800691e:	ee18 3a10 	vmov	r3, s16
 8006922:	4652      	mov	r2, sl
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f ae6b 	beq.w	8006606 <_printf_float+0xbe>
 8006930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800693c:	f7fa f8ec 	bl	8000b18 <__aeabi_dcmpeq>
 8006940:	b9d8      	cbnz	r0, 800697a <_printf_float+0x432>
 8006942:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006946:	f108 0201 	add.w	r2, r8, #1
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	d10e      	bne.n	8006972 <_printf_float+0x42a>
 8006954:	e657      	b.n	8006606 <_printf_float+0xbe>
 8006956:	2301      	movs	r3, #1
 8006958:	4652      	mov	r2, sl
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	f43f ae50 	beq.w	8006606 <_printf_float+0xbe>
 8006966:	f108 0801 	add.w	r8, r8, #1
 800696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696c:	3b01      	subs	r3, #1
 800696e:	4543      	cmp	r3, r8
 8006970:	dcf1      	bgt.n	8006956 <_printf_float+0x40e>
 8006972:	464b      	mov	r3, r9
 8006974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006978:	e6da      	b.n	8006730 <_printf_float+0x1e8>
 800697a:	f04f 0800 	mov.w	r8, #0
 800697e:	f104 0a1a 	add.w	sl, r4, #26
 8006982:	e7f2      	b.n	800696a <_printf_float+0x422>
 8006984:	2301      	movs	r3, #1
 8006986:	4642      	mov	r2, r8
 8006988:	e7df      	b.n	800694a <_printf_float+0x402>
 800698a:	2301      	movs	r3, #1
 800698c:	464a      	mov	r2, r9
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f ae36 	beq.w	8006606 <_printf_float+0xbe>
 800699a:	f108 0801 	add.w	r8, r8, #1
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069a2:	1a5b      	subs	r3, r3, r1
 80069a4:	4543      	cmp	r3, r8
 80069a6:	dcf0      	bgt.n	800698a <_printf_float+0x442>
 80069a8:	e6f8      	b.n	800679c <_printf_float+0x254>
 80069aa:	f04f 0800 	mov.w	r8, #0
 80069ae:	f104 0919 	add.w	r9, r4, #25
 80069b2:	e7f4      	b.n	800699e <_printf_float+0x456>

080069b4 <_printf_common>:
 80069b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b8:	4616      	mov	r6, r2
 80069ba:	4699      	mov	r9, r3
 80069bc:	688a      	ldr	r2, [r1, #8]
 80069be:	690b      	ldr	r3, [r1, #16]
 80069c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	bfb8      	it	lt
 80069c8:	4613      	movlt	r3, r2
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069d0:	4607      	mov	r7, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b10a      	cbz	r2, 80069da <_printf_common+0x26>
 80069d6:	3301      	adds	r3, #1
 80069d8:	6033      	str	r3, [r6, #0]
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	0699      	lsls	r1, r3, #26
 80069de:	bf42      	ittt	mi
 80069e0:	6833      	ldrmi	r3, [r6, #0]
 80069e2:	3302      	addmi	r3, #2
 80069e4:	6033      	strmi	r3, [r6, #0]
 80069e6:	6825      	ldr	r5, [r4, #0]
 80069e8:	f015 0506 	ands.w	r5, r5, #6
 80069ec:	d106      	bne.n	80069fc <_printf_common+0x48>
 80069ee:	f104 0a19 	add.w	sl, r4, #25
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	6832      	ldr	r2, [r6, #0]
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	42ab      	cmp	r3, r5
 80069fa:	dc26      	bgt.n	8006a4a <_printf_common+0x96>
 80069fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a00:	1e13      	subs	r3, r2, #0
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	bf18      	it	ne
 8006a06:	2301      	movne	r3, #1
 8006a08:	0692      	lsls	r2, r2, #26
 8006a0a:	d42b      	bmi.n	8006a64 <_printf_common+0xb0>
 8006a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a10:	4649      	mov	r1, r9
 8006a12:	4638      	mov	r0, r7
 8006a14:	47c0      	blx	r8
 8006a16:	3001      	adds	r0, #1
 8006a18:	d01e      	beq.n	8006a58 <_printf_common+0xa4>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	6922      	ldr	r2, [r4, #16]
 8006a1e:	f003 0306 	and.w	r3, r3, #6
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	bf02      	ittt	eq
 8006a26:	68e5      	ldreq	r5, [r4, #12]
 8006a28:	6833      	ldreq	r3, [r6, #0]
 8006a2a:	1aed      	subeq	r5, r5, r3
 8006a2c:	68a3      	ldr	r3, [r4, #8]
 8006a2e:	bf0c      	ite	eq
 8006a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a34:	2500      	movne	r5, #0
 8006a36:	4293      	cmp	r3, r2
 8006a38:	bfc4      	itt	gt
 8006a3a:	1a9b      	subgt	r3, r3, r2
 8006a3c:	18ed      	addgt	r5, r5, r3
 8006a3e:	2600      	movs	r6, #0
 8006a40:	341a      	adds	r4, #26
 8006a42:	42b5      	cmp	r5, r6
 8006a44:	d11a      	bne.n	8006a7c <_printf_common+0xc8>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e008      	b.n	8006a5c <_printf_common+0xa8>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4638      	mov	r0, r7
 8006a52:	47c0      	blx	r8
 8006a54:	3001      	adds	r0, #1
 8006a56:	d103      	bne.n	8006a60 <_printf_common+0xac>
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a60:	3501      	adds	r5, #1
 8006a62:	e7c6      	b.n	80069f2 <_printf_common+0x3e>
 8006a64:	18e1      	adds	r1, r4, r3
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	2030      	movs	r0, #48	; 0x30
 8006a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a6e:	4422      	add	r2, r4
 8006a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a78:	3302      	adds	r3, #2
 8006a7a:	e7c7      	b.n	8006a0c <_printf_common+0x58>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4649      	mov	r1, r9
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c0      	blx	r8
 8006a86:	3001      	adds	r0, #1
 8006a88:	d0e6      	beq.n	8006a58 <_printf_common+0xa4>
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	e7d9      	b.n	8006a42 <_printf_common+0x8e>
	...

08006a90 <_printf_i>:
 8006a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a94:	7e0f      	ldrb	r7, [r1, #24]
 8006a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a98:	2f78      	cmp	r7, #120	; 0x78
 8006a9a:	4691      	mov	r9, r2
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	469a      	mov	sl, r3
 8006aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aa6:	d807      	bhi.n	8006ab8 <_printf_i+0x28>
 8006aa8:	2f62      	cmp	r7, #98	; 0x62
 8006aaa:	d80a      	bhi.n	8006ac2 <_printf_i+0x32>
 8006aac:	2f00      	cmp	r7, #0
 8006aae:	f000 80d4 	beq.w	8006c5a <_printf_i+0x1ca>
 8006ab2:	2f58      	cmp	r7, #88	; 0x58
 8006ab4:	f000 80c0 	beq.w	8006c38 <_printf_i+0x1a8>
 8006ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ac0:	e03a      	b.n	8006b38 <_printf_i+0xa8>
 8006ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ac6:	2b15      	cmp	r3, #21
 8006ac8:	d8f6      	bhi.n	8006ab8 <_printf_i+0x28>
 8006aca:	a101      	add	r1, pc, #4	; (adr r1, 8006ad0 <_printf_i+0x40>)
 8006acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad0:	08006b29 	.word	0x08006b29
 8006ad4:	08006b3d 	.word	0x08006b3d
 8006ad8:	08006ab9 	.word	0x08006ab9
 8006adc:	08006ab9 	.word	0x08006ab9
 8006ae0:	08006ab9 	.word	0x08006ab9
 8006ae4:	08006ab9 	.word	0x08006ab9
 8006ae8:	08006b3d 	.word	0x08006b3d
 8006aec:	08006ab9 	.word	0x08006ab9
 8006af0:	08006ab9 	.word	0x08006ab9
 8006af4:	08006ab9 	.word	0x08006ab9
 8006af8:	08006ab9 	.word	0x08006ab9
 8006afc:	08006c41 	.word	0x08006c41
 8006b00:	08006b69 	.word	0x08006b69
 8006b04:	08006bfb 	.word	0x08006bfb
 8006b08:	08006ab9 	.word	0x08006ab9
 8006b0c:	08006ab9 	.word	0x08006ab9
 8006b10:	08006c63 	.word	0x08006c63
 8006b14:	08006ab9 	.word	0x08006ab9
 8006b18:	08006b69 	.word	0x08006b69
 8006b1c:	08006ab9 	.word	0x08006ab9
 8006b20:	08006ab9 	.word	0x08006ab9
 8006b24:	08006c03 	.word	0x08006c03
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	1d1a      	adds	r2, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	602a      	str	r2, [r5, #0]
 8006b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e09f      	b.n	8006c7c <_printf_i+0x1ec>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	0607      	lsls	r7, r0, #24
 8006b42:	f103 0104 	add.w	r1, r3, #4
 8006b46:	6029      	str	r1, [r5, #0]
 8006b48:	d501      	bpl.n	8006b4e <_printf_i+0xbe>
 8006b4a:	681e      	ldr	r6, [r3, #0]
 8006b4c:	e003      	b.n	8006b56 <_printf_i+0xc6>
 8006b4e:	0646      	lsls	r6, r0, #25
 8006b50:	d5fb      	bpl.n	8006b4a <_printf_i+0xba>
 8006b52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	da03      	bge.n	8006b62 <_printf_i+0xd2>
 8006b5a:	232d      	movs	r3, #45	; 0x2d
 8006b5c:	4276      	negs	r6, r6
 8006b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b62:	485a      	ldr	r0, [pc, #360]	; (8006ccc <_printf_i+0x23c>)
 8006b64:	230a      	movs	r3, #10
 8006b66:	e012      	b.n	8006b8e <_printf_i+0xfe>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	1d19      	adds	r1, r3, #4
 8006b6e:	6029      	str	r1, [r5, #0]
 8006b70:	0605      	lsls	r5, r0, #24
 8006b72:	d501      	bpl.n	8006b78 <_printf_i+0xe8>
 8006b74:	681e      	ldr	r6, [r3, #0]
 8006b76:	e002      	b.n	8006b7e <_printf_i+0xee>
 8006b78:	0641      	lsls	r1, r0, #25
 8006b7a:	d5fb      	bpl.n	8006b74 <_printf_i+0xe4>
 8006b7c:	881e      	ldrh	r6, [r3, #0]
 8006b7e:	4853      	ldr	r0, [pc, #332]	; (8006ccc <_printf_i+0x23c>)
 8006b80:	2f6f      	cmp	r7, #111	; 0x6f
 8006b82:	bf0c      	ite	eq
 8006b84:	2308      	moveq	r3, #8
 8006b86:	230a      	movne	r3, #10
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b8e:	6865      	ldr	r5, [r4, #4]
 8006b90:	60a5      	str	r5, [r4, #8]
 8006b92:	2d00      	cmp	r5, #0
 8006b94:	bfa2      	ittt	ge
 8006b96:	6821      	ldrge	r1, [r4, #0]
 8006b98:	f021 0104 	bicge.w	r1, r1, #4
 8006b9c:	6021      	strge	r1, [r4, #0]
 8006b9e:	b90e      	cbnz	r6, 8006ba4 <_printf_i+0x114>
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	d04b      	beq.n	8006c3c <_printf_i+0x1ac>
 8006ba4:	4615      	mov	r5, r2
 8006ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006baa:	fb03 6711 	mls	r7, r3, r1, r6
 8006bae:	5dc7      	ldrb	r7, [r0, r7]
 8006bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bb4:	4637      	mov	r7, r6
 8006bb6:	42bb      	cmp	r3, r7
 8006bb8:	460e      	mov	r6, r1
 8006bba:	d9f4      	bls.n	8006ba6 <_printf_i+0x116>
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d10b      	bne.n	8006bd8 <_printf_i+0x148>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07de      	lsls	r6, r3, #31
 8006bc4:	d508      	bpl.n	8006bd8 <_printf_i+0x148>
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	6861      	ldr	r1, [r4, #4]
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	bfde      	ittt	le
 8006bce:	2330      	movle	r3, #48	; 0x30
 8006bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bd8:	1b52      	subs	r2, r2, r5
 8006bda:	6122      	str	r2, [r4, #16]
 8006bdc:	f8cd a000 	str.w	sl, [sp]
 8006be0:	464b      	mov	r3, r9
 8006be2:	aa03      	add	r2, sp, #12
 8006be4:	4621      	mov	r1, r4
 8006be6:	4640      	mov	r0, r8
 8006be8:	f7ff fee4 	bl	80069b4 <_printf_common>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d14a      	bne.n	8006c86 <_printf_i+0x1f6>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b004      	add	sp, #16
 8006bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	f043 0320 	orr.w	r3, r3, #32
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	4833      	ldr	r0, [pc, #204]	; (8006cd0 <_printf_i+0x240>)
 8006c04:	2778      	movs	r7, #120	; 0x78
 8006c06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	6829      	ldr	r1, [r5, #0]
 8006c0e:	061f      	lsls	r7, r3, #24
 8006c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c14:	d402      	bmi.n	8006c1c <_printf_i+0x18c>
 8006c16:	065f      	lsls	r7, r3, #25
 8006c18:	bf48      	it	mi
 8006c1a:	b2b6      	uxthmi	r6, r6
 8006c1c:	07df      	lsls	r7, r3, #31
 8006c1e:	bf48      	it	mi
 8006c20:	f043 0320 	orrmi.w	r3, r3, #32
 8006c24:	6029      	str	r1, [r5, #0]
 8006c26:	bf48      	it	mi
 8006c28:	6023      	strmi	r3, [r4, #0]
 8006c2a:	b91e      	cbnz	r6, 8006c34 <_printf_i+0x1a4>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	f023 0320 	bic.w	r3, r3, #32
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	2310      	movs	r3, #16
 8006c36:	e7a7      	b.n	8006b88 <_printf_i+0xf8>
 8006c38:	4824      	ldr	r0, [pc, #144]	; (8006ccc <_printf_i+0x23c>)
 8006c3a:	e7e4      	b.n	8006c06 <_printf_i+0x176>
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	e7bd      	b.n	8006bbc <_printf_i+0x12c>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	6826      	ldr	r6, [r4, #0]
 8006c44:	6961      	ldr	r1, [r4, #20]
 8006c46:	1d18      	adds	r0, r3, #4
 8006c48:	6028      	str	r0, [r5, #0]
 8006c4a:	0635      	lsls	r5, r6, #24
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	d501      	bpl.n	8006c54 <_printf_i+0x1c4>
 8006c50:	6019      	str	r1, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <_printf_i+0x1ca>
 8006c54:	0670      	lsls	r0, r6, #25
 8006c56:	d5fb      	bpl.n	8006c50 <_printf_i+0x1c0>
 8006c58:	8019      	strh	r1, [r3, #0]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	4615      	mov	r5, r2
 8006c60:	e7bc      	b.n	8006bdc <_printf_i+0x14c>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	1d1a      	adds	r2, r3, #4
 8006c66:	602a      	str	r2, [r5, #0]
 8006c68:	681d      	ldr	r5, [r3, #0]
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f7f9 fad6 	bl	8000220 <memchr>
 8006c74:	b108      	cbz	r0, 8006c7a <_printf_i+0x1ea>
 8006c76:	1b40      	subs	r0, r0, r5
 8006c78:	6060      	str	r0, [r4, #4]
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c84:	e7aa      	b.n	8006bdc <_printf_i+0x14c>
 8006c86:	6923      	ldr	r3, [r4, #16]
 8006c88:	462a      	mov	r2, r5
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	47d0      	blx	sl
 8006c90:	3001      	adds	r0, #1
 8006c92:	d0ad      	beq.n	8006bf0 <_printf_i+0x160>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	079b      	lsls	r3, r3, #30
 8006c98:	d413      	bmi.n	8006cc2 <_printf_i+0x232>
 8006c9a:	68e0      	ldr	r0, [r4, #12]
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	4298      	cmp	r0, r3
 8006ca0:	bfb8      	it	lt
 8006ca2:	4618      	movlt	r0, r3
 8006ca4:	e7a6      	b.n	8006bf4 <_printf_i+0x164>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4632      	mov	r2, r6
 8006caa:	4649      	mov	r1, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	47d0      	blx	sl
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d09d      	beq.n	8006bf0 <_printf_i+0x160>
 8006cb4:	3501      	adds	r5, #1
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	9903      	ldr	r1, [sp, #12]
 8006cba:	1a5b      	subs	r3, r3, r1
 8006cbc:	42ab      	cmp	r3, r5
 8006cbe:	dcf2      	bgt.n	8006ca6 <_printf_i+0x216>
 8006cc0:	e7eb      	b.n	8006c9a <_printf_i+0x20a>
 8006cc2:	2500      	movs	r5, #0
 8006cc4:	f104 0619 	add.w	r6, r4, #25
 8006cc8:	e7f5      	b.n	8006cb6 <_printf_i+0x226>
 8006cca:	bf00      	nop
 8006ccc:	0800c346 	.word	0x0800c346
 8006cd0:	0800c357 	.word	0x0800c357

08006cd4 <_scanf_float>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	b087      	sub	sp, #28
 8006cda:	4617      	mov	r7, r2
 8006cdc:	9303      	str	r3, [sp, #12]
 8006cde:	688b      	ldr	r3, [r1, #8]
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ce6:	bf83      	ittte	hi
 8006ce8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cec:	195b      	addhi	r3, r3, r5
 8006cee:	9302      	strhi	r3, [sp, #8]
 8006cf0:	2300      	movls	r3, #0
 8006cf2:	bf86      	itte	hi
 8006cf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cf8:	608b      	strhi	r3, [r1, #8]
 8006cfa:	9302      	strls	r3, [sp, #8]
 8006cfc:	680b      	ldr	r3, [r1, #0]
 8006cfe:	468b      	mov	fp, r1
 8006d00:	2500      	movs	r5, #0
 8006d02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d06:	f84b 3b1c 	str.w	r3, [fp], #28
 8006d0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d0e:	4680      	mov	r8, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	465e      	mov	r6, fp
 8006d14:	46aa      	mov	sl, r5
 8006d16:	46a9      	mov	r9, r5
 8006d18:	9501      	str	r5, [sp, #4]
 8006d1a:	68a2      	ldr	r2, [r4, #8]
 8006d1c:	b152      	cbz	r2, 8006d34 <_scanf_float+0x60>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b4e      	cmp	r3, #78	; 0x4e
 8006d24:	d864      	bhi.n	8006df0 <_scanf_float+0x11c>
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d83c      	bhi.n	8006da4 <_scanf_float+0xd0>
 8006d2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006d2e:	b2c8      	uxtb	r0, r1
 8006d30:	280e      	cmp	r0, #14
 8006d32:	d93a      	bls.n	8006daa <_scanf_float+0xd6>
 8006d34:	f1b9 0f00 	cmp.w	r9, #0
 8006d38:	d003      	beq.n	8006d42 <_scanf_float+0x6e>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d46:	f1ba 0f01 	cmp.w	sl, #1
 8006d4a:	f200 8113 	bhi.w	8006f74 <_scanf_float+0x2a0>
 8006d4e:	455e      	cmp	r6, fp
 8006d50:	f200 8105 	bhi.w	8006f5e <_scanf_float+0x28a>
 8006d54:	2501      	movs	r5, #1
 8006d56:	4628      	mov	r0, r5
 8006d58:	b007      	add	sp, #28
 8006d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d62:	2a0d      	cmp	r2, #13
 8006d64:	d8e6      	bhi.n	8006d34 <_scanf_float+0x60>
 8006d66:	a101      	add	r1, pc, #4	; (adr r1, 8006d6c <_scanf_float+0x98>)
 8006d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d6c:	08006eab 	.word	0x08006eab
 8006d70:	08006d35 	.word	0x08006d35
 8006d74:	08006d35 	.word	0x08006d35
 8006d78:	08006d35 	.word	0x08006d35
 8006d7c:	08006f0b 	.word	0x08006f0b
 8006d80:	08006ee3 	.word	0x08006ee3
 8006d84:	08006d35 	.word	0x08006d35
 8006d88:	08006d35 	.word	0x08006d35
 8006d8c:	08006eb9 	.word	0x08006eb9
 8006d90:	08006d35 	.word	0x08006d35
 8006d94:	08006d35 	.word	0x08006d35
 8006d98:	08006d35 	.word	0x08006d35
 8006d9c:	08006d35 	.word	0x08006d35
 8006da0:	08006e71 	.word	0x08006e71
 8006da4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006da8:	e7db      	b.n	8006d62 <_scanf_float+0x8e>
 8006daa:	290e      	cmp	r1, #14
 8006dac:	d8c2      	bhi.n	8006d34 <_scanf_float+0x60>
 8006dae:	a001      	add	r0, pc, #4	; (adr r0, 8006db4 <_scanf_float+0xe0>)
 8006db0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006db4:	08006e63 	.word	0x08006e63
 8006db8:	08006d35 	.word	0x08006d35
 8006dbc:	08006e63 	.word	0x08006e63
 8006dc0:	08006ef7 	.word	0x08006ef7
 8006dc4:	08006d35 	.word	0x08006d35
 8006dc8:	08006e11 	.word	0x08006e11
 8006dcc:	08006e4d 	.word	0x08006e4d
 8006dd0:	08006e4d 	.word	0x08006e4d
 8006dd4:	08006e4d 	.word	0x08006e4d
 8006dd8:	08006e4d 	.word	0x08006e4d
 8006ddc:	08006e4d 	.word	0x08006e4d
 8006de0:	08006e4d 	.word	0x08006e4d
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006e4d 	.word	0x08006e4d
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	2b6e      	cmp	r3, #110	; 0x6e
 8006df2:	d809      	bhi.n	8006e08 <_scanf_float+0x134>
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d8b2      	bhi.n	8006d5e <_scanf_float+0x8a>
 8006df8:	2b54      	cmp	r3, #84	; 0x54
 8006dfa:	d077      	beq.n	8006eec <_scanf_float+0x218>
 8006dfc:	2b59      	cmp	r3, #89	; 0x59
 8006dfe:	d199      	bne.n	8006d34 <_scanf_float+0x60>
 8006e00:	2d07      	cmp	r5, #7
 8006e02:	d197      	bne.n	8006d34 <_scanf_float+0x60>
 8006e04:	2508      	movs	r5, #8
 8006e06:	e029      	b.n	8006e5c <_scanf_float+0x188>
 8006e08:	2b74      	cmp	r3, #116	; 0x74
 8006e0a:	d06f      	beq.n	8006eec <_scanf_float+0x218>
 8006e0c:	2b79      	cmp	r3, #121	; 0x79
 8006e0e:	e7f6      	b.n	8006dfe <_scanf_float+0x12a>
 8006e10:	6821      	ldr	r1, [r4, #0]
 8006e12:	05c8      	lsls	r0, r1, #23
 8006e14:	d51a      	bpl.n	8006e4c <_scanf_float+0x178>
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e1c:	6021      	str	r1, [r4, #0]
 8006e1e:	f109 0901 	add.w	r9, r9, #1
 8006e22:	b11b      	cbz	r3, 8006e2c <_scanf_float+0x158>
 8006e24:	3b01      	subs	r3, #1
 8006e26:	3201      	adds	r2, #1
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	60a2      	str	r2, [r4, #8]
 8006e2c:	68a3      	ldr	r3, [r4, #8]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	3301      	adds	r3, #1
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	f340 8084 	ble.w	8006f4c <_scanf_float+0x278>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	3301      	adds	r3, #1
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	e766      	b.n	8006d1a <_scanf_float+0x46>
 8006e4c:	eb1a 0f05 	cmn.w	sl, r5
 8006e50:	f47f af70 	bne.w	8006d34 <_scanf_float+0x60>
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e5a:	6022      	str	r2, [r4, #0]
 8006e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e60:	e7e4      	b.n	8006e2c <_scanf_float+0x158>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	0610      	lsls	r0, r2, #24
 8006e66:	f57f af65 	bpl.w	8006d34 <_scanf_float+0x60>
 8006e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e6e:	e7f4      	b.n	8006e5a <_scanf_float+0x186>
 8006e70:	f1ba 0f00 	cmp.w	sl, #0
 8006e74:	d10e      	bne.n	8006e94 <_scanf_float+0x1c0>
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	d10e      	bne.n	8006e9a <_scanf_float+0x1c6>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e86:	d108      	bne.n	8006e9a <_scanf_float+0x1c6>
 8006e88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	f04f 0a01 	mov.w	sl, #1
 8006e92:	e7e3      	b.n	8006e5c <_scanf_float+0x188>
 8006e94:	f1ba 0f02 	cmp.w	sl, #2
 8006e98:	d055      	beq.n	8006f46 <_scanf_float+0x272>
 8006e9a:	2d01      	cmp	r5, #1
 8006e9c:	d002      	beq.n	8006ea4 <_scanf_float+0x1d0>
 8006e9e:	2d04      	cmp	r5, #4
 8006ea0:	f47f af48 	bne.w	8006d34 <_scanf_float+0x60>
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	b2ed      	uxtb	r5, r5
 8006ea8:	e7d8      	b.n	8006e5c <_scanf_float+0x188>
 8006eaa:	f1ba 0f01 	cmp.w	sl, #1
 8006eae:	f47f af41 	bne.w	8006d34 <_scanf_float+0x60>
 8006eb2:	f04f 0a02 	mov.w	sl, #2
 8006eb6:	e7d1      	b.n	8006e5c <_scanf_float+0x188>
 8006eb8:	b97d      	cbnz	r5, 8006eda <_scanf_float+0x206>
 8006eba:	f1b9 0f00 	cmp.w	r9, #0
 8006ebe:	f47f af3c 	bne.w	8006d3a <_scanf_float+0x66>
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ec8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ecc:	f47f af39 	bne.w	8006d42 <_scanf_float+0x6e>
 8006ed0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	2501      	movs	r5, #1
 8006ed8:	e7c0      	b.n	8006e5c <_scanf_float+0x188>
 8006eda:	2d03      	cmp	r5, #3
 8006edc:	d0e2      	beq.n	8006ea4 <_scanf_float+0x1d0>
 8006ede:	2d05      	cmp	r5, #5
 8006ee0:	e7de      	b.n	8006ea0 <_scanf_float+0x1cc>
 8006ee2:	2d02      	cmp	r5, #2
 8006ee4:	f47f af26 	bne.w	8006d34 <_scanf_float+0x60>
 8006ee8:	2503      	movs	r5, #3
 8006eea:	e7b7      	b.n	8006e5c <_scanf_float+0x188>
 8006eec:	2d06      	cmp	r5, #6
 8006eee:	f47f af21 	bne.w	8006d34 <_scanf_float+0x60>
 8006ef2:	2507      	movs	r5, #7
 8006ef4:	e7b2      	b.n	8006e5c <_scanf_float+0x188>
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	0591      	lsls	r1, r2, #22
 8006efa:	f57f af1b 	bpl.w	8006d34 <_scanf_float+0x60>
 8006efe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f08:	e7a8      	b.n	8006e5c <_scanf_float+0x188>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006f10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006f14:	d006      	beq.n	8006f24 <_scanf_float+0x250>
 8006f16:	0550      	lsls	r0, r2, #21
 8006f18:	f57f af0c 	bpl.w	8006d34 <_scanf_float+0x60>
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	f43f af0f 	beq.w	8006d42 <_scanf_float+0x6e>
 8006f24:	0591      	lsls	r1, r2, #22
 8006f26:	bf58      	it	pl
 8006f28:	9901      	ldrpl	r1, [sp, #4]
 8006f2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f2e:	bf58      	it	pl
 8006f30:	eba9 0101 	subpl.w	r1, r9, r1
 8006f34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f38:	bf58      	it	pl
 8006f3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	f04f 0900 	mov.w	r9, #0
 8006f44:	e78a      	b.n	8006e5c <_scanf_float+0x188>
 8006f46:	f04f 0a03 	mov.w	sl, #3
 8006f4a:	e787      	b.n	8006e5c <_scanf_float+0x188>
 8006f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f50:	4639      	mov	r1, r7
 8006f52:	4640      	mov	r0, r8
 8006f54:	4798      	blx	r3
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f aedf 	beq.w	8006d1a <_scanf_float+0x46>
 8006f5c:	e6ea      	b.n	8006d34 <_scanf_float+0x60>
 8006f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f66:	463a      	mov	r2, r7
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4798      	blx	r3
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	e6ec      	b.n	8006d4e <_scanf_float+0x7a>
 8006f74:	1e6b      	subs	r3, r5, #1
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d825      	bhi.n	8006fc6 <_scanf_float+0x2f2>
 8006f7a:	2d02      	cmp	r5, #2
 8006f7c:	d836      	bhi.n	8006fec <_scanf_float+0x318>
 8006f7e:	455e      	cmp	r6, fp
 8006f80:	f67f aee8 	bls.w	8006d54 <_scanf_float+0x80>
 8006f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4798      	blx	r3
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	e7f1      	b.n	8006f7e <_scanf_float+0x2aa>
 8006f9a:	9802      	ldr	r0, [sp, #8]
 8006f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4798      	blx	r3
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb6:	fa5f fa8a 	uxtb.w	sl, sl
 8006fba:	f1ba 0f02 	cmp.w	sl, #2
 8006fbe:	d1ec      	bne.n	8006f9a <_scanf_float+0x2c6>
 8006fc0:	3d03      	subs	r5, #3
 8006fc2:	b2ed      	uxtb	r5, r5
 8006fc4:	1b76      	subs	r6, r6, r5
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	05da      	lsls	r2, r3, #23
 8006fca:	d52f      	bpl.n	800702c <_scanf_float+0x358>
 8006fcc:	055b      	lsls	r3, r3, #21
 8006fce:	d510      	bpl.n	8006ff2 <_scanf_float+0x31e>
 8006fd0:	455e      	cmp	r6, fp
 8006fd2:	f67f aebf 	bls.w	8006d54 <_scanf_float+0x80>
 8006fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4798      	blx	r3
 8006fe4:	6923      	ldr	r3, [r4, #16]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	e7f1      	b.n	8006fd0 <_scanf_float+0x2fc>
 8006fec:	46aa      	mov	sl, r5
 8006fee:	9602      	str	r6, [sp, #8]
 8006ff0:	e7df      	b.n	8006fb2 <_scanf_float+0x2de>
 8006ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	2965      	cmp	r1, #101	; 0x65
 8006ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ffe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	d00c      	beq.n	8007020 <_scanf_float+0x34c>
 8007006:	2945      	cmp	r1, #69	; 0x45
 8007008:	d00a      	beq.n	8007020 <_scanf_float+0x34c>
 800700a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800700e:	463a      	mov	r2, r7
 8007010:	4640      	mov	r0, r8
 8007012:	4798      	blx	r3
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800701a:	3b01      	subs	r3, #1
 800701c:	1eb5      	subs	r5, r6, #2
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007024:	463a      	mov	r2, r7
 8007026:	4640      	mov	r0, r8
 8007028:	4798      	blx	r3
 800702a:	462e      	mov	r6, r5
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	f015 0510 	ands.w	r5, r5, #16
 8007032:	d158      	bne.n	80070e6 <_scanf_float+0x412>
 8007034:	7035      	strb	r5, [r6, #0]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800703c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007040:	d11c      	bne.n	800707c <_scanf_float+0x3a8>
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	454b      	cmp	r3, r9
 8007046:	eba3 0209 	sub.w	r2, r3, r9
 800704a:	d124      	bne.n	8007096 <_scanf_float+0x3c2>
 800704c:	2200      	movs	r2, #0
 800704e:	4659      	mov	r1, fp
 8007050:	4640      	mov	r0, r8
 8007052:	f002 fd39 	bl	8009ac8 <_strtod_r>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f011 0f02 	tst.w	r1, #2
 8007060:	ec57 6b10 	vmov	r6, r7, d0
 8007064:	f103 0204 	add.w	r2, r3, #4
 8007068:	d020      	beq.n	80070ac <_scanf_float+0x3d8>
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	600a      	str	r2, [r1, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	e9c3 6700 	strd	r6, r7, [r3]
 8007074:	68e3      	ldr	r3, [r4, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60e3      	str	r3, [r4, #12]
 800707a:	e66c      	b.n	8006d56 <_scanf_float+0x82>
 800707c:	9b04      	ldr	r3, [sp, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0e4      	beq.n	800704c <_scanf_float+0x378>
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	230a      	movs	r3, #10
 8007086:	462a      	mov	r2, r5
 8007088:	3101      	adds	r1, #1
 800708a:	4640      	mov	r0, r8
 800708c:	f002 fda4 	bl	8009bd8 <_strtol_r>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	9e05      	ldr	r6, [sp, #20]
 8007094:	1ac2      	subs	r2, r0, r3
 8007096:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800709a:	429e      	cmp	r6, r3
 800709c:	bf28      	it	cs
 800709e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80070a2:	4912      	ldr	r1, [pc, #72]	; (80070ec <_scanf_float+0x418>)
 80070a4:	4630      	mov	r0, r6
 80070a6:	f000 f95d 	bl	8007364 <siprintf>
 80070aa:	e7cf      	b.n	800704c <_scanf_float+0x378>
 80070ac:	f011 0f04 	tst.w	r1, #4
 80070b0:	9903      	ldr	r1, [sp, #12]
 80070b2:	600a      	str	r2, [r1, #0]
 80070b4:	d1db      	bne.n	800706e <_scanf_float+0x39a>
 80070b6:	f8d3 8000 	ldr.w	r8, [r3]
 80070ba:	ee10 2a10 	vmov	r2, s0
 80070be:	ee10 0a10 	vmov	r0, s0
 80070c2:	463b      	mov	r3, r7
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 fd59 	bl	8000b7c <__aeabi_dcmpun>
 80070ca:	b128      	cbz	r0, 80070d8 <_scanf_float+0x404>
 80070cc:	4808      	ldr	r0, [pc, #32]	; (80070f0 <_scanf_float+0x41c>)
 80070ce:	f000 fac1 	bl	8007654 <nanf>
 80070d2:	ed88 0a00 	vstr	s0, [r8]
 80070d6:	e7cd      	b.n	8007074 <_scanf_float+0x3a0>
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fdac 	bl	8000c38 <__aeabi_d2f>
 80070e0:	f8c8 0000 	str.w	r0, [r8]
 80070e4:	e7c6      	b.n	8007074 <_scanf_float+0x3a0>
 80070e6:	2500      	movs	r5, #0
 80070e8:	e635      	b.n	8006d56 <_scanf_float+0x82>
 80070ea:	bf00      	nop
 80070ec:	0800c368 	.word	0x0800c368
 80070f0:	0800c6fd 	.word	0x0800c6fd

080070f4 <std>:
 80070f4:	2300      	movs	r3, #0
 80070f6:	b510      	push	{r4, lr}
 80070f8:	4604      	mov	r4, r0
 80070fa:	e9c0 3300 	strd	r3, r3, [r0]
 80070fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007102:	6083      	str	r3, [r0, #8]
 8007104:	8181      	strh	r1, [r0, #12]
 8007106:	6643      	str	r3, [r0, #100]	; 0x64
 8007108:	81c2      	strh	r2, [r0, #14]
 800710a:	6183      	str	r3, [r0, #24]
 800710c:	4619      	mov	r1, r3
 800710e:	2208      	movs	r2, #8
 8007110:	305c      	adds	r0, #92	; 0x5c
 8007112:	f000 fa1f 	bl	8007554 <memset>
 8007116:	4b0d      	ldr	r3, [pc, #52]	; (800714c <std+0x58>)
 8007118:	6263      	str	r3, [r4, #36]	; 0x24
 800711a:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <std+0x5c>)
 800711c:	62a3      	str	r3, [r4, #40]	; 0x28
 800711e:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <std+0x60>)
 8007120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007122:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <std+0x64>)
 8007124:	6323      	str	r3, [r4, #48]	; 0x30
 8007126:	4b0d      	ldr	r3, [pc, #52]	; (800715c <std+0x68>)
 8007128:	6224      	str	r4, [r4, #32]
 800712a:	429c      	cmp	r4, r3
 800712c:	d006      	beq.n	800713c <std+0x48>
 800712e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007132:	4294      	cmp	r4, r2
 8007134:	d002      	beq.n	800713c <std+0x48>
 8007136:	33d0      	adds	r3, #208	; 0xd0
 8007138:	429c      	cmp	r4, r3
 800713a:	d105      	bne.n	8007148 <std+0x54>
 800713c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007144:	f000 ba82 	b.w	800764c <__retarget_lock_init_recursive>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	080073a5 	.word	0x080073a5
 8007150:	080073c7 	.word	0x080073c7
 8007154:	080073ff 	.word	0x080073ff
 8007158:	08007423 	.word	0x08007423
 800715c:	2000084c 	.word	0x2000084c

08007160 <stdio_exit_handler>:
 8007160:	4a02      	ldr	r2, [pc, #8]	; (800716c <stdio_exit_handler+0xc>)
 8007162:	4903      	ldr	r1, [pc, #12]	; (8007170 <stdio_exit_handler+0x10>)
 8007164:	4803      	ldr	r0, [pc, #12]	; (8007174 <stdio_exit_handler+0x14>)
 8007166:	f000 b869 	b.w	800723c <_fwalk_sglue>
 800716a:	bf00      	nop
 800716c:	20000010 	.word	0x20000010
 8007170:	0800a221 	.word	0x0800a221
 8007174:	2000001c 	.word	0x2000001c

08007178 <cleanup_stdio>:
 8007178:	6841      	ldr	r1, [r0, #4]
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <cleanup_stdio+0x34>)
 800717c:	4299      	cmp	r1, r3
 800717e:	b510      	push	{r4, lr}
 8007180:	4604      	mov	r4, r0
 8007182:	d001      	beq.n	8007188 <cleanup_stdio+0x10>
 8007184:	f003 f84c 	bl	800a220 <_fflush_r>
 8007188:	68a1      	ldr	r1, [r4, #8]
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <cleanup_stdio+0x38>)
 800718c:	4299      	cmp	r1, r3
 800718e:	d002      	beq.n	8007196 <cleanup_stdio+0x1e>
 8007190:	4620      	mov	r0, r4
 8007192:	f003 f845 	bl	800a220 <_fflush_r>
 8007196:	68e1      	ldr	r1, [r4, #12]
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <cleanup_stdio+0x3c>)
 800719a:	4299      	cmp	r1, r3
 800719c:	d004      	beq.n	80071a8 <cleanup_stdio+0x30>
 800719e:	4620      	mov	r0, r4
 80071a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a4:	f003 b83c 	b.w	800a220 <_fflush_r>
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop
 80071ac:	2000084c 	.word	0x2000084c
 80071b0:	200008b4 	.word	0x200008b4
 80071b4:	2000091c 	.word	0x2000091c

080071b8 <global_stdio_init.part.0>:
 80071b8:	b510      	push	{r4, lr}
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <global_stdio_init.part.0+0x30>)
 80071bc:	4c0b      	ldr	r4, [pc, #44]	; (80071ec <global_stdio_init.part.0+0x34>)
 80071be:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <global_stdio_init.part.0+0x38>)
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	4620      	mov	r0, r4
 80071c4:	2200      	movs	r2, #0
 80071c6:	2104      	movs	r1, #4
 80071c8:	f7ff ff94 	bl	80070f4 <std>
 80071cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071d0:	2201      	movs	r2, #1
 80071d2:	2109      	movs	r1, #9
 80071d4:	f7ff ff8e 	bl	80070f4 <std>
 80071d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071dc:	2202      	movs	r2, #2
 80071de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e2:	2112      	movs	r1, #18
 80071e4:	f7ff bf86 	b.w	80070f4 <std>
 80071e8:	20000984 	.word	0x20000984
 80071ec:	2000084c 	.word	0x2000084c
 80071f0:	08007161 	.word	0x08007161

080071f4 <__sfp_lock_acquire>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__sfp_lock_acquire+0x8>)
 80071f6:	f000 ba2a 	b.w	800764e <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	2000098d 	.word	0x2000098d

08007200 <__sfp_lock_release>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__sfp_lock_release+0x8>)
 8007202:	f000 ba25 	b.w	8007650 <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	2000098d 	.word	0x2000098d

0800720c <__sinit>:
 800720c:	b510      	push	{r4, lr}
 800720e:	4604      	mov	r4, r0
 8007210:	f7ff fff0 	bl	80071f4 <__sfp_lock_acquire>
 8007214:	6a23      	ldr	r3, [r4, #32]
 8007216:	b11b      	cbz	r3, 8007220 <__sinit+0x14>
 8007218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721c:	f7ff bff0 	b.w	8007200 <__sfp_lock_release>
 8007220:	4b04      	ldr	r3, [pc, #16]	; (8007234 <__sinit+0x28>)
 8007222:	6223      	str	r3, [r4, #32]
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <__sinit+0x2c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1f5      	bne.n	8007218 <__sinit+0xc>
 800722c:	f7ff ffc4 	bl	80071b8 <global_stdio_init.part.0>
 8007230:	e7f2      	b.n	8007218 <__sinit+0xc>
 8007232:	bf00      	nop
 8007234:	08007179 	.word	0x08007179
 8007238:	20000984 	.word	0x20000984

0800723c <_fwalk_sglue>:
 800723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007240:	4607      	mov	r7, r0
 8007242:	4688      	mov	r8, r1
 8007244:	4614      	mov	r4, r2
 8007246:	2600      	movs	r6, #0
 8007248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800724c:	f1b9 0901 	subs.w	r9, r9, #1
 8007250:	d505      	bpl.n	800725e <_fwalk_sglue+0x22>
 8007252:	6824      	ldr	r4, [r4, #0]
 8007254:	2c00      	cmp	r4, #0
 8007256:	d1f7      	bne.n	8007248 <_fwalk_sglue+0xc>
 8007258:	4630      	mov	r0, r6
 800725a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d907      	bls.n	8007274 <_fwalk_sglue+0x38>
 8007264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007268:	3301      	adds	r3, #1
 800726a:	d003      	beq.n	8007274 <_fwalk_sglue+0x38>
 800726c:	4629      	mov	r1, r5
 800726e:	4638      	mov	r0, r7
 8007270:	47c0      	blx	r8
 8007272:	4306      	orrs	r6, r0
 8007274:	3568      	adds	r5, #104	; 0x68
 8007276:	e7e9      	b.n	800724c <_fwalk_sglue+0x10>

08007278 <iprintf>:
 8007278:	b40f      	push	{r0, r1, r2, r3}
 800727a:	b507      	push	{r0, r1, r2, lr}
 800727c:	4906      	ldr	r1, [pc, #24]	; (8007298 <iprintf+0x20>)
 800727e:	ab04      	add	r3, sp, #16
 8007280:	6808      	ldr	r0, [r1, #0]
 8007282:	f853 2b04 	ldr.w	r2, [r3], #4
 8007286:	6881      	ldr	r1, [r0, #8]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	f002 fe29 	bl	8009ee0 <_vfiprintf_r>
 800728e:	b003      	add	sp, #12
 8007290:	f85d eb04 	ldr.w	lr, [sp], #4
 8007294:	b004      	add	sp, #16
 8007296:	4770      	bx	lr
 8007298:	20000068 	.word	0x20000068

0800729c <putchar>:
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <putchar+0xc>)
 800729e:	4601      	mov	r1, r0
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	6882      	ldr	r2, [r0, #8]
 80072a4:	f003 b846 	b.w	800a334 <_putc_r>
 80072a8:	20000068 	.word	0x20000068

080072ac <_puts_r>:
 80072ac:	6a03      	ldr	r3, [r0, #32]
 80072ae:	b570      	push	{r4, r5, r6, lr}
 80072b0:	6884      	ldr	r4, [r0, #8]
 80072b2:	4605      	mov	r5, r0
 80072b4:	460e      	mov	r6, r1
 80072b6:	b90b      	cbnz	r3, 80072bc <_puts_r+0x10>
 80072b8:	f7ff ffa8 	bl	800720c <__sinit>
 80072bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072be:	07db      	lsls	r3, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_puts_r+0x22>
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	0598      	lsls	r0, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_puts_r+0x22>
 80072c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ca:	f000 f9c0 	bl	800764e <__retarget_lock_acquire_recursive>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	0719      	lsls	r1, r3, #28
 80072d2:	d513      	bpl.n	80072fc <_puts_r+0x50>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	b18b      	cbz	r3, 80072fc <_puts_r+0x50>
 80072d8:	3e01      	subs	r6, #1
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072e0:	3b01      	subs	r3, #1
 80072e2:	60a3      	str	r3, [r4, #8]
 80072e4:	b9e9      	cbnz	r1, 8007322 <_puts_r+0x76>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da2e      	bge.n	8007348 <_puts_r+0x9c>
 80072ea:	4622      	mov	r2, r4
 80072ec:	210a      	movs	r1, #10
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 f89b 	bl	800742a <__swbuf_r>
 80072f4:	3001      	adds	r0, #1
 80072f6:	d007      	beq.n	8007308 <_puts_r+0x5c>
 80072f8:	250a      	movs	r5, #10
 80072fa:	e007      	b.n	800730c <_puts_r+0x60>
 80072fc:	4621      	mov	r1, r4
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 f8d0 	bl	80074a4 <__swsetup_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	d0e7      	beq.n	80072d8 <_puts_r+0x2c>
 8007308:	f04f 35ff 	mov.w	r5, #4294967295
 800730c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800730e:	07da      	lsls	r2, r3, #31
 8007310:	d405      	bmi.n	800731e <_puts_r+0x72>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	059b      	lsls	r3, r3, #22
 8007316:	d402      	bmi.n	800731e <_puts_r+0x72>
 8007318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731a:	f000 f999 	bl	8007650 <__retarget_lock_release_recursive>
 800731e:	4628      	mov	r0, r5
 8007320:	bd70      	pop	{r4, r5, r6, pc}
 8007322:	2b00      	cmp	r3, #0
 8007324:	da04      	bge.n	8007330 <_puts_r+0x84>
 8007326:	69a2      	ldr	r2, [r4, #24]
 8007328:	429a      	cmp	r2, r3
 800732a:	dc06      	bgt.n	800733a <_puts_r+0x8e>
 800732c:	290a      	cmp	r1, #10
 800732e:	d004      	beq.n	800733a <_puts_r+0x8e>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	7019      	strb	r1, [r3, #0]
 8007338:	e7cf      	b.n	80072da <_puts_r+0x2e>
 800733a:	4622      	mov	r2, r4
 800733c:	4628      	mov	r0, r5
 800733e:	f000 f874 	bl	800742a <__swbuf_r>
 8007342:	3001      	adds	r0, #1
 8007344:	d1c9      	bne.n	80072da <_puts_r+0x2e>
 8007346:	e7df      	b.n	8007308 <_puts_r+0x5c>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	250a      	movs	r5, #10
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	6022      	str	r2, [r4, #0]
 8007350:	701d      	strb	r5, [r3, #0]
 8007352:	e7db      	b.n	800730c <_puts_r+0x60>

08007354 <puts>:
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <puts+0xc>)
 8007356:	4601      	mov	r1, r0
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	f7ff bfa7 	b.w	80072ac <_puts_r>
 800735e:	bf00      	nop
 8007360:	20000068 	.word	0x20000068

08007364 <siprintf>:
 8007364:	b40e      	push	{r1, r2, r3}
 8007366:	b500      	push	{lr}
 8007368:	b09c      	sub	sp, #112	; 0x70
 800736a:	ab1d      	add	r3, sp, #116	; 0x74
 800736c:	9002      	str	r0, [sp, #8]
 800736e:	9006      	str	r0, [sp, #24]
 8007370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007374:	4809      	ldr	r0, [pc, #36]	; (800739c <siprintf+0x38>)
 8007376:	9107      	str	r1, [sp, #28]
 8007378:	9104      	str	r1, [sp, #16]
 800737a:	4909      	ldr	r1, [pc, #36]	; (80073a0 <siprintf+0x3c>)
 800737c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007380:	9105      	str	r1, [sp, #20]
 8007382:	6800      	ldr	r0, [r0, #0]
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	a902      	add	r1, sp, #8
 8007388:	f002 fc82 	bl	8009c90 <_svfiprintf_r>
 800738c:	9b02      	ldr	r3, [sp, #8]
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	b01c      	add	sp, #112	; 0x70
 8007394:	f85d eb04 	ldr.w	lr, [sp], #4
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	20000068 	.word	0x20000068
 80073a0:	ffff0208 	.word	0xffff0208

080073a4 <__sread>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	f000 f900 	bl	80075b0 <_read_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	bfab      	itete	ge
 80073b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073b6:	89a3      	ldrhlt	r3, [r4, #12]
 80073b8:	181b      	addge	r3, r3, r0
 80073ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073be:	bfac      	ite	ge
 80073c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073c2:	81a3      	strhlt	r3, [r4, #12]
 80073c4:	bd10      	pop	{r4, pc}

080073c6 <__swrite>:
 80073c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	461f      	mov	r7, r3
 80073cc:	898b      	ldrh	r3, [r1, #12]
 80073ce:	05db      	lsls	r3, r3, #23
 80073d0:	4605      	mov	r5, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	4616      	mov	r6, r2
 80073d6:	d505      	bpl.n	80073e4 <__swrite+0x1e>
 80073d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073dc:	2302      	movs	r3, #2
 80073de:	2200      	movs	r2, #0
 80073e0:	f000 f8d4 	bl	800758c <_lseek_r>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ee:	81a3      	strh	r3, [r4, #12]
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	4628      	mov	r0, r5
 80073f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fa:	f000 b8eb 	b.w	80075d4 <_write_r>

080073fe <__sseek>:
 80073fe:	b510      	push	{r4, lr}
 8007400:	460c      	mov	r4, r1
 8007402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007406:	f000 f8c1 	bl	800758c <_lseek_r>
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	bf15      	itete	ne
 8007410:	6560      	strne	r0, [r4, #84]	; 0x54
 8007412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800741a:	81a3      	strheq	r3, [r4, #12]
 800741c:	bf18      	it	ne
 800741e:	81a3      	strhne	r3, [r4, #12]
 8007420:	bd10      	pop	{r4, pc}

08007422 <__sclose>:
 8007422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007426:	f000 b8a1 	b.w	800756c <_close_r>

0800742a <__swbuf_r>:
 800742a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742c:	460e      	mov	r6, r1
 800742e:	4614      	mov	r4, r2
 8007430:	4605      	mov	r5, r0
 8007432:	b118      	cbz	r0, 800743c <__swbuf_r+0x12>
 8007434:	6a03      	ldr	r3, [r0, #32]
 8007436:	b90b      	cbnz	r3, 800743c <__swbuf_r+0x12>
 8007438:	f7ff fee8 	bl	800720c <__sinit>
 800743c:	69a3      	ldr	r3, [r4, #24]
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	071a      	lsls	r2, r3, #28
 8007444:	d525      	bpl.n	8007492 <__swbuf_r+0x68>
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	b31b      	cbz	r3, 8007492 <__swbuf_r+0x68>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	6922      	ldr	r2, [r4, #16]
 800744e:	1a98      	subs	r0, r3, r2
 8007450:	6963      	ldr	r3, [r4, #20]
 8007452:	b2f6      	uxtb	r6, r6
 8007454:	4283      	cmp	r3, r0
 8007456:	4637      	mov	r7, r6
 8007458:	dc04      	bgt.n	8007464 <__swbuf_r+0x3a>
 800745a:	4621      	mov	r1, r4
 800745c:	4628      	mov	r0, r5
 800745e:	f002 fedf 	bl	800a220 <_fflush_r>
 8007462:	b9e0      	cbnz	r0, 800749e <__swbuf_r+0x74>
 8007464:	68a3      	ldr	r3, [r4, #8]
 8007466:	3b01      	subs	r3, #1
 8007468:	60a3      	str	r3, [r4, #8]
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	6022      	str	r2, [r4, #0]
 8007470:	701e      	strb	r6, [r3, #0]
 8007472:	6962      	ldr	r2, [r4, #20]
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	429a      	cmp	r2, r3
 8007478:	d004      	beq.n	8007484 <__swbuf_r+0x5a>
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	07db      	lsls	r3, r3, #31
 800747e:	d506      	bpl.n	800748e <__swbuf_r+0x64>
 8007480:	2e0a      	cmp	r6, #10
 8007482:	d104      	bne.n	800748e <__swbuf_r+0x64>
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f002 feca 	bl	800a220 <_fflush_r>
 800748c:	b938      	cbnz	r0, 800749e <__swbuf_r+0x74>
 800748e:	4638      	mov	r0, r7
 8007490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f000 f805 	bl	80074a4 <__swsetup_r>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0d5      	beq.n	800744a <__swbuf_r+0x20>
 800749e:	f04f 37ff 	mov.w	r7, #4294967295
 80074a2:	e7f4      	b.n	800748e <__swbuf_r+0x64>

080074a4 <__swsetup_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <__swsetup_r+0xac>)
 80074a8:	4605      	mov	r5, r0
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	460c      	mov	r4, r1
 80074ae:	b118      	cbz	r0, 80074b8 <__swsetup_r+0x14>
 80074b0:	6a03      	ldr	r3, [r0, #32]
 80074b2:	b90b      	cbnz	r3, 80074b8 <__swsetup_r+0x14>
 80074b4:	f7ff feaa 	bl	800720c <__sinit>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074be:	0718      	lsls	r0, r3, #28
 80074c0:	d422      	bmi.n	8007508 <__swsetup_r+0x64>
 80074c2:	06d9      	lsls	r1, r3, #27
 80074c4:	d407      	bmi.n	80074d6 <__swsetup_r+0x32>
 80074c6:	2309      	movs	r3, #9
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	e034      	b.n	8007540 <__swsetup_r+0x9c>
 80074d6:	0758      	lsls	r0, r3, #29
 80074d8:	d512      	bpl.n	8007500 <__swsetup_r+0x5c>
 80074da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074dc:	b141      	cbz	r1, 80074f0 <__swsetup_r+0x4c>
 80074de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e2:	4299      	cmp	r1, r3
 80074e4:	d002      	beq.n	80074ec <__swsetup_r+0x48>
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 ff34 	bl	8008354 <_free_r>
 80074ec:	2300      	movs	r3, #0
 80074ee:	6363      	str	r3, [r4, #52]	; 0x34
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	2300      	movs	r3, #0
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f043 0308 	orr.w	r3, r3, #8
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	b94b      	cbnz	r3, 8007520 <__swsetup_r+0x7c>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007516:	d003      	beq.n	8007520 <__swsetup_r+0x7c>
 8007518:	4621      	mov	r1, r4
 800751a:	4628      	mov	r0, r5
 800751c:	f002 fece 	bl	800a2bc <__smakebuf_r>
 8007520:	89a0      	ldrh	r0, [r4, #12]
 8007522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007526:	f010 0301 	ands.w	r3, r0, #1
 800752a:	d00a      	beq.n	8007542 <__swsetup_r+0x9e>
 800752c:	2300      	movs	r3, #0
 800752e:	60a3      	str	r3, [r4, #8]
 8007530:	6963      	ldr	r3, [r4, #20]
 8007532:	425b      	negs	r3, r3
 8007534:	61a3      	str	r3, [r4, #24]
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	b943      	cbnz	r3, 800754c <__swsetup_r+0xa8>
 800753a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800753e:	d1c4      	bne.n	80074ca <__swsetup_r+0x26>
 8007540:	bd38      	pop	{r3, r4, r5, pc}
 8007542:	0781      	lsls	r1, r0, #30
 8007544:	bf58      	it	pl
 8007546:	6963      	ldrpl	r3, [r4, #20]
 8007548:	60a3      	str	r3, [r4, #8]
 800754a:	e7f4      	b.n	8007536 <__swsetup_r+0x92>
 800754c:	2000      	movs	r0, #0
 800754e:	e7f7      	b.n	8007540 <__swsetup_r+0x9c>
 8007550:	20000068 	.word	0x20000068

08007554 <memset>:
 8007554:	4402      	add	r2, r0
 8007556:	4603      	mov	r3, r0
 8007558:	4293      	cmp	r3, r2
 800755a:	d100      	bne.n	800755e <memset+0xa>
 800755c:	4770      	bx	lr
 800755e:	f803 1b01 	strb.w	r1, [r3], #1
 8007562:	e7f9      	b.n	8007558 <memset+0x4>

08007564 <_localeconv_r>:
 8007564:	4800      	ldr	r0, [pc, #0]	; (8007568 <_localeconv_r+0x4>)
 8007566:	4770      	bx	lr
 8007568:	2000015c 	.word	0x2000015c

0800756c <_close_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	; (8007588 <_close_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7fb f92f 	bl	80027da <_close>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_close_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_close_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000988 	.word	0x20000988

0800758c <_lseek_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d07      	ldr	r5, [pc, #28]	; (80075ac <_lseek_r+0x20>)
 8007590:	4604      	mov	r4, r0
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	2200      	movs	r2, #0
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fb f944 	bl	8002828 <_lseek>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_lseek_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_lseek_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000988 	.word	0x20000988

080075b0 <_read_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_read_r+0x20>)
 80075b4:	4604      	mov	r4, r0
 80075b6:	4608      	mov	r0, r1
 80075b8:	4611      	mov	r1, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7fb f8d2 	bl	8002768 <_read>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_read_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_read_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000988 	.word	0x20000988

080075d4 <_write_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_write_r+0x20>)
 80075d8:	4604      	mov	r4, r0
 80075da:	4608      	mov	r0, r1
 80075dc:	4611      	mov	r1, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fb f8dd 	bl	80027a2 <_write>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_write_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_write_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000988 	.word	0x20000988

080075f8 <__errno>:
 80075f8:	4b01      	ldr	r3, [pc, #4]	; (8007600 <__errno+0x8>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	20000068 	.word	0x20000068

08007604 <__libc_init_array>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	4d0d      	ldr	r5, [pc, #52]	; (800763c <__libc_init_array+0x38>)
 8007608:	4c0d      	ldr	r4, [pc, #52]	; (8007640 <__libc_init_array+0x3c>)
 800760a:	1b64      	subs	r4, r4, r5
 800760c:	10a4      	asrs	r4, r4, #2
 800760e:	2600      	movs	r6, #0
 8007610:	42a6      	cmp	r6, r4
 8007612:	d109      	bne.n	8007628 <__libc_init_array+0x24>
 8007614:	4d0b      	ldr	r5, [pc, #44]	; (8007644 <__libc_init_array+0x40>)
 8007616:	4c0c      	ldr	r4, [pc, #48]	; (8007648 <__libc_init_array+0x44>)
 8007618:	f004 fd48 	bl	800c0ac <_init>
 800761c:	1b64      	subs	r4, r4, r5
 800761e:	10a4      	asrs	r4, r4, #2
 8007620:	2600      	movs	r6, #0
 8007622:	42a6      	cmp	r6, r4
 8007624:	d105      	bne.n	8007632 <__libc_init_array+0x2e>
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	f855 3b04 	ldr.w	r3, [r5], #4
 800762c:	4798      	blx	r3
 800762e:	3601      	adds	r6, #1
 8007630:	e7ee      	b.n	8007610 <__libc_init_array+0xc>
 8007632:	f855 3b04 	ldr.w	r3, [r5], #4
 8007636:	4798      	blx	r3
 8007638:	3601      	adds	r6, #1
 800763a:	e7f2      	b.n	8007622 <__libc_init_array+0x1e>
 800763c:	0800c808 	.word	0x0800c808
 8007640:	0800c808 	.word	0x0800c808
 8007644:	0800c808 	.word	0x0800c808
 8007648:	0800c80c 	.word	0x0800c80c

0800764c <__retarget_lock_init_recursive>:
 800764c:	4770      	bx	lr

0800764e <__retarget_lock_acquire_recursive>:
 800764e:	4770      	bx	lr

08007650 <__retarget_lock_release_recursive>:
 8007650:	4770      	bx	lr
	...

08007654 <nanf>:
 8007654:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800765c <nanf+0x8>
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	7fc00000 	.word	0x7fc00000

08007660 <quorem>:
 8007660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	6903      	ldr	r3, [r0, #16]
 8007666:	690c      	ldr	r4, [r1, #16]
 8007668:	42a3      	cmp	r3, r4
 800766a:	4607      	mov	r7, r0
 800766c:	db7e      	blt.n	800776c <quorem+0x10c>
 800766e:	3c01      	subs	r4, #1
 8007670:	f101 0814 	add.w	r8, r1, #20
 8007674:	f100 0514 	add.w	r5, r0, #20
 8007678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007686:	3301      	adds	r3, #1
 8007688:	429a      	cmp	r2, r3
 800768a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800768e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007692:	fbb2 f6f3 	udiv	r6, r2, r3
 8007696:	d331      	bcc.n	80076fc <quorem+0x9c>
 8007698:	f04f 0e00 	mov.w	lr, #0
 800769c:	4640      	mov	r0, r8
 800769e:	46ac      	mov	ip, r5
 80076a0:	46f2      	mov	sl, lr
 80076a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80076a6:	b293      	uxth	r3, r2
 80076a8:	fb06 e303 	mla	r3, r6, r3, lr
 80076ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076b0:	0c1a      	lsrs	r2, r3, #16
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ebaa 0303 	sub.w	r3, sl, r3
 80076b8:	f8dc a000 	ldr.w	sl, [ip]
 80076bc:	fa13 f38a 	uxtah	r3, r3, sl
 80076c0:	fb06 220e 	mla	r2, r6, lr, r2
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076cc:	b292      	uxth	r2, r2
 80076ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80076da:	4581      	cmp	r9, r0
 80076dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e0:	f84c 3b04 	str.w	r3, [ip], #4
 80076e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076e8:	d2db      	bcs.n	80076a2 <quorem+0x42>
 80076ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80076ee:	b92b      	cbnz	r3, 80076fc <quorem+0x9c>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	429d      	cmp	r5, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	d32c      	bcc.n	8007754 <quorem+0xf4>
 80076fa:	613c      	str	r4, [r7, #16]
 80076fc:	4638      	mov	r0, r7
 80076fe:	f001 f9ef 	bl	8008ae0 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	db22      	blt.n	800774c <quorem+0xec>
 8007706:	3601      	adds	r6, #1
 8007708:	4629      	mov	r1, r5
 800770a:	2000      	movs	r0, #0
 800770c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007710:	f8d1 c000 	ldr.w	ip, [r1]
 8007714:	b293      	uxth	r3, r2
 8007716:	1ac3      	subs	r3, r0, r3
 8007718:	0c12      	lsrs	r2, r2, #16
 800771a:	fa13 f38c 	uxtah	r3, r3, ip
 800771e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007722:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772c:	45c1      	cmp	r9, r8
 800772e:	f841 3b04 	str.w	r3, [r1], #4
 8007732:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007736:	d2e9      	bcs.n	800770c <quorem+0xac>
 8007738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800773c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007740:	b922      	cbnz	r2, 800774c <quorem+0xec>
 8007742:	3b04      	subs	r3, #4
 8007744:	429d      	cmp	r5, r3
 8007746:	461a      	mov	r2, r3
 8007748:	d30a      	bcc.n	8007760 <quorem+0x100>
 800774a:	613c      	str	r4, [r7, #16]
 800774c:	4630      	mov	r0, r6
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	3b04      	subs	r3, #4
 8007758:	2a00      	cmp	r2, #0
 800775a:	d1ce      	bne.n	80076fa <quorem+0x9a>
 800775c:	3c01      	subs	r4, #1
 800775e:	e7c9      	b.n	80076f4 <quorem+0x94>
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	3b04      	subs	r3, #4
 8007764:	2a00      	cmp	r2, #0
 8007766:	d1f0      	bne.n	800774a <quorem+0xea>
 8007768:	3c01      	subs	r4, #1
 800776a:	e7eb      	b.n	8007744 <quorem+0xe4>
 800776c:	2000      	movs	r0, #0
 800776e:	e7ee      	b.n	800774e <quorem+0xee>

08007770 <_dtoa_r>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ed2d 8b04 	vpush	{d8-d9}
 8007778:	69c5      	ldr	r5, [r0, #28]
 800777a:	b093      	sub	sp, #76	; 0x4c
 800777c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007780:	ec57 6b10 	vmov	r6, r7, d0
 8007784:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007788:	9107      	str	r1, [sp, #28]
 800778a:	4604      	mov	r4, r0
 800778c:	920a      	str	r2, [sp, #40]	; 0x28
 800778e:	930d      	str	r3, [sp, #52]	; 0x34
 8007790:	b975      	cbnz	r5, 80077b0 <_dtoa_r+0x40>
 8007792:	2010      	movs	r0, #16
 8007794:	f000 fe2a 	bl	80083ec <malloc>
 8007798:	4602      	mov	r2, r0
 800779a:	61e0      	str	r0, [r4, #28]
 800779c:	b920      	cbnz	r0, 80077a8 <_dtoa_r+0x38>
 800779e:	4bae      	ldr	r3, [pc, #696]	; (8007a58 <_dtoa_r+0x2e8>)
 80077a0:	21ef      	movs	r1, #239	; 0xef
 80077a2:	48ae      	ldr	r0, [pc, #696]	; (8007a5c <_dtoa_r+0x2ec>)
 80077a4:	f002 fe70 	bl	800a488 <__assert_func>
 80077a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077ac:	6005      	str	r5, [r0, #0]
 80077ae:	60c5      	str	r5, [r0, #12]
 80077b0:	69e3      	ldr	r3, [r4, #28]
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	b151      	cbz	r1, 80077cc <_dtoa_r+0x5c>
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	604a      	str	r2, [r1, #4]
 80077ba:	2301      	movs	r3, #1
 80077bc:	4093      	lsls	r3, r2
 80077be:	608b      	str	r3, [r1, #8]
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 ff07 	bl	80085d4 <_Bfree>
 80077c6:	69e3      	ldr	r3, [r4, #28]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	1e3b      	subs	r3, r7, #0
 80077ce:	bfbb      	ittet	lt
 80077d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	9303      	strlt	r3, [sp, #12]
 80077d6:	2300      	movge	r3, #0
 80077d8:	2201      	movlt	r2, #1
 80077da:	bfac      	ite	ge
 80077dc:	f8c8 3000 	strge.w	r3, [r8]
 80077e0:	f8c8 2000 	strlt.w	r2, [r8]
 80077e4:	4b9e      	ldr	r3, [pc, #632]	; (8007a60 <_dtoa_r+0x2f0>)
 80077e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077ea:	ea33 0308 	bics.w	r3, r3, r8
 80077ee:	d11b      	bne.n	8007828 <_dtoa_r+0xb8>
 80077f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077fc:	4333      	orrs	r3, r6
 80077fe:	f000 8593 	beq.w	8008328 <_dtoa_r+0xbb8>
 8007802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007804:	b963      	cbnz	r3, 8007820 <_dtoa_r+0xb0>
 8007806:	4b97      	ldr	r3, [pc, #604]	; (8007a64 <_dtoa_r+0x2f4>)
 8007808:	e027      	b.n	800785a <_dtoa_r+0xea>
 800780a:	4b97      	ldr	r3, [pc, #604]	; (8007a68 <_dtoa_r+0x2f8>)
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	9800      	ldr	r0, [sp, #0]
 8007816:	b013      	add	sp, #76	; 0x4c
 8007818:	ecbd 8b04 	vpop	{d8-d9}
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007820:	4b90      	ldr	r3, [pc, #576]	; (8007a64 <_dtoa_r+0x2f4>)
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	3303      	adds	r3, #3
 8007826:	e7f3      	b.n	8007810 <_dtoa_r+0xa0>
 8007828:	ed9d 7b02 	vldr	d7, [sp, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	ec51 0b17 	vmov	r0, r1, d7
 8007832:	eeb0 8a47 	vmov.f32	s16, s14
 8007836:	eef0 8a67 	vmov.f32	s17, s15
 800783a:	2300      	movs	r3, #0
 800783c:	f7f9 f96c 	bl	8000b18 <__aeabi_dcmpeq>
 8007840:	4681      	mov	r9, r0
 8007842:	b160      	cbz	r0, 800785e <_dtoa_r+0xee>
 8007844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007846:	2301      	movs	r3, #1
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8568 	beq.w	8008322 <_dtoa_r+0xbb2>
 8007852:	4b86      	ldr	r3, [pc, #536]	; (8007a6c <_dtoa_r+0x2fc>)
 8007854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	3b01      	subs	r3, #1
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	e7da      	b.n	8007814 <_dtoa_r+0xa4>
 800785e:	aa10      	add	r2, sp, #64	; 0x40
 8007860:	a911      	add	r1, sp, #68	; 0x44
 8007862:	4620      	mov	r0, r4
 8007864:	eeb0 0a48 	vmov.f32	s0, s16
 8007868:	eef0 0a68 	vmov.f32	s1, s17
 800786c:	f001 fa4e 	bl	8008d0c <__d2b>
 8007870:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007874:	4682      	mov	sl, r0
 8007876:	2d00      	cmp	r5, #0
 8007878:	d07f      	beq.n	800797a <_dtoa_r+0x20a>
 800787a:	ee18 3a90 	vmov	r3, s17
 800787e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007882:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007886:	ec51 0b18 	vmov	r0, r1, d8
 800788a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800788e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007892:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007896:	4619      	mov	r1, r3
 8007898:	2200      	movs	r2, #0
 800789a:	4b75      	ldr	r3, [pc, #468]	; (8007a70 <_dtoa_r+0x300>)
 800789c:	f7f8 fd1c 	bl	80002d8 <__aeabi_dsub>
 80078a0:	a367      	add	r3, pc, #412	; (adr r3, 8007a40 <_dtoa_r+0x2d0>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fecf 	bl	8000648 <__aeabi_dmul>
 80078aa:	a367      	add	r3, pc, #412	; (adr r3, 8007a48 <_dtoa_r+0x2d8>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 fd14 	bl	80002dc <__adddf3>
 80078b4:	4606      	mov	r6, r0
 80078b6:	4628      	mov	r0, r5
 80078b8:	460f      	mov	r7, r1
 80078ba:	f7f8 fe5b 	bl	8000574 <__aeabi_i2d>
 80078be:	a364      	add	r3, pc, #400	; (adr r3, 8007a50 <_dtoa_r+0x2e0>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 fec0 	bl	8000648 <__aeabi_dmul>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4630      	mov	r0, r6
 80078ce:	4639      	mov	r1, r7
 80078d0:	f7f8 fd04 	bl	80002dc <__adddf3>
 80078d4:	4606      	mov	r6, r0
 80078d6:	460f      	mov	r7, r1
 80078d8:	f7f9 f966 	bl	8000ba8 <__aeabi_d2iz>
 80078dc:	2200      	movs	r2, #0
 80078de:	4683      	mov	fp, r0
 80078e0:	2300      	movs	r3, #0
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f9 f921 	bl	8000b2c <__aeabi_dcmplt>
 80078ea:	b148      	cbz	r0, 8007900 <_dtoa_r+0x190>
 80078ec:	4658      	mov	r0, fp
 80078ee:	f7f8 fe41 	bl	8000574 <__aeabi_i2d>
 80078f2:	4632      	mov	r2, r6
 80078f4:	463b      	mov	r3, r7
 80078f6:	f7f9 f90f 	bl	8000b18 <__aeabi_dcmpeq>
 80078fa:	b908      	cbnz	r0, 8007900 <_dtoa_r+0x190>
 80078fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007900:	f1bb 0f16 	cmp.w	fp, #22
 8007904:	d857      	bhi.n	80079b6 <_dtoa_r+0x246>
 8007906:	4b5b      	ldr	r3, [pc, #364]	; (8007a74 <_dtoa_r+0x304>)
 8007908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	ec51 0b18 	vmov	r0, r1, d8
 8007914:	f7f9 f90a 	bl	8000b2c <__aeabi_dcmplt>
 8007918:	2800      	cmp	r0, #0
 800791a:	d04e      	beq.n	80079ba <_dtoa_r+0x24a>
 800791c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007920:	2300      	movs	r3, #0
 8007922:	930c      	str	r3, [sp, #48]	; 0x30
 8007924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007926:	1b5b      	subs	r3, r3, r5
 8007928:	1e5a      	subs	r2, r3, #1
 800792a:	bf45      	ittet	mi
 800792c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007930:	9305      	strmi	r3, [sp, #20]
 8007932:	2300      	movpl	r3, #0
 8007934:	2300      	movmi	r3, #0
 8007936:	9206      	str	r2, [sp, #24]
 8007938:	bf54      	ite	pl
 800793a:	9305      	strpl	r3, [sp, #20]
 800793c:	9306      	strmi	r3, [sp, #24]
 800793e:	f1bb 0f00 	cmp.w	fp, #0
 8007942:	db3c      	blt.n	80079be <_dtoa_r+0x24e>
 8007944:	9b06      	ldr	r3, [sp, #24]
 8007946:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800794a:	445b      	add	r3, fp
 800794c:	9306      	str	r3, [sp, #24]
 800794e:	2300      	movs	r3, #0
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	9b07      	ldr	r3, [sp, #28]
 8007954:	2b09      	cmp	r3, #9
 8007956:	d868      	bhi.n	8007a2a <_dtoa_r+0x2ba>
 8007958:	2b05      	cmp	r3, #5
 800795a:	bfc4      	itt	gt
 800795c:	3b04      	subgt	r3, #4
 800795e:	9307      	strgt	r3, [sp, #28]
 8007960:	9b07      	ldr	r3, [sp, #28]
 8007962:	f1a3 0302 	sub.w	r3, r3, #2
 8007966:	bfcc      	ite	gt
 8007968:	2500      	movgt	r5, #0
 800796a:	2501      	movle	r5, #1
 800796c:	2b03      	cmp	r3, #3
 800796e:	f200 8085 	bhi.w	8007a7c <_dtoa_r+0x30c>
 8007972:	e8df f003 	tbb	[pc, r3]
 8007976:	3b2e      	.short	0x3b2e
 8007978:	5839      	.short	0x5839
 800797a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800797e:	441d      	add	r5, r3
 8007980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007984:	2b20      	cmp	r3, #32
 8007986:	bfc1      	itttt	gt
 8007988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800798c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007990:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007994:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007998:	bfd6      	itet	le
 800799a:	f1c3 0320 	rsble	r3, r3, #32
 800799e:	ea48 0003 	orrgt.w	r0, r8, r3
 80079a2:	fa06 f003 	lslle.w	r0, r6, r3
 80079a6:	f7f8 fdd5 	bl	8000554 <__aeabi_ui2d>
 80079aa:	2201      	movs	r2, #1
 80079ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079b0:	3d01      	subs	r5, #1
 80079b2:	920e      	str	r2, [sp, #56]	; 0x38
 80079b4:	e76f      	b.n	8007896 <_dtoa_r+0x126>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7b3      	b.n	8007922 <_dtoa_r+0x1b2>
 80079ba:	900c      	str	r0, [sp, #48]	; 0x30
 80079bc:	e7b2      	b.n	8007924 <_dtoa_r+0x1b4>
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	eba3 030b 	sub.w	r3, r3, fp
 80079c4:	9305      	str	r3, [sp, #20]
 80079c6:	f1cb 0300 	rsb	r3, fp, #0
 80079ca:	9308      	str	r3, [sp, #32]
 80079cc:	2300      	movs	r3, #0
 80079ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d0:	e7bf      	b.n	8007952 <_dtoa_r+0x1e2>
 80079d2:	2300      	movs	r3, #0
 80079d4:	9309      	str	r3, [sp, #36]	; 0x24
 80079d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dc52      	bgt.n	8007a82 <_dtoa_r+0x312>
 80079dc:	2301      	movs	r3, #1
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	461a      	mov	r2, r3
 80079e4:	920a      	str	r2, [sp, #40]	; 0x28
 80079e6:	e00b      	b.n	8007a00 <_dtoa_r+0x290>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7f3      	b.n	80079d4 <_dtoa_r+0x264>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9309      	str	r3, [sp, #36]	; 0x24
 80079f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f2:	445b      	add	r3, fp
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	3301      	adds	r3, #1
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	bfb8      	it	lt
 80079fe:	2301      	movlt	r3, #1
 8007a00:	69e0      	ldr	r0, [r4, #28]
 8007a02:	2100      	movs	r1, #0
 8007a04:	2204      	movs	r2, #4
 8007a06:	f102 0614 	add.w	r6, r2, #20
 8007a0a:	429e      	cmp	r6, r3
 8007a0c:	d93d      	bls.n	8007a8a <_dtoa_r+0x31a>
 8007a0e:	6041      	str	r1, [r0, #4]
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fd9f 	bl	8008554 <_Balloc>
 8007a16:	9000      	str	r0, [sp, #0]
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d139      	bne.n	8007a90 <_dtoa_r+0x320>
 8007a1c:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <_dtoa_r+0x308>)
 8007a1e:	4602      	mov	r2, r0
 8007a20:	f240 11af 	movw	r1, #431	; 0x1af
 8007a24:	e6bd      	b.n	80077a2 <_dtoa_r+0x32>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e7e1      	b.n	80079ee <_dtoa_r+0x27e>
 8007a2a:	2501      	movs	r5, #1
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	9509      	str	r5, [sp, #36]	; 0x24
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2312      	movs	r3, #18
 8007a3e:	e7d1      	b.n	80079e4 <_dtoa_r+0x274>
 8007a40:	636f4361 	.word	0x636f4361
 8007a44:	3fd287a7 	.word	0x3fd287a7
 8007a48:	8b60c8b3 	.word	0x8b60c8b3
 8007a4c:	3fc68a28 	.word	0x3fc68a28
 8007a50:	509f79fb 	.word	0x509f79fb
 8007a54:	3fd34413 	.word	0x3fd34413
 8007a58:	0800c37a 	.word	0x0800c37a
 8007a5c:	0800c391 	.word	0x0800c391
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	0800c376 	.word	0x0800c376
 8007a68:	0800c36d 	.word	0x0800c36d
 8007a6c:	0800c345 	.word	0x0800c345
 8007a70:	3ff80000 	.word	0x3ff80000
 8007a74:	0800c480 	.word	0x0800c480
 8007a78:	0800c3e9 	.word	0x0800c3e9
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a80:	e7d7      	b.n	8007a32 <_dtoa_r+0x2c2>
 8007a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	e7ba      	b.n	8007a00 <_dtoa_r+0x290>
 8007a8a:	3101      	adds	r1, #1
 8007a8c:	0052      	lsls	r2, r2, #1
 8007a8e:	e7ba      	b.n	8007a06 <_dtoa_r+0x296>
 8007a90:	69e3      	ldr	r3, [r4, #28]
 8007a92:	9a00      	ldr	r2, [sp, #0]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	2b0e      	cmp	r3, #14
 8007a9a:	f200 80a8 	bhi.w	8007bee <_dtoa_r+0x47e>
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	f000 80a5 	beq.w	8007bee <_dtoa_r+0x47e>
 8007aa4:	f1bb 0f00 	cmp.w	fp, #0
 8007aa8:	dd38      	ble.n	8007b1c <_dtoa_r+0x3ac>
 8007aaa:	4bc0      	ldr	r3, [pc, #768]	; (8007dac <_dtoa_r+0x63c>)
 8007aac:	f00b 020f 	and.w	r2, fp, #15
 8007ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ab8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007abc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ac0:	d019      	beq.n	8007af6 <_dtoa_r+0x386>
 8007ac2:	4bbb      	ldr	r3, [pc, #748]	; (8007db0 <_dtoa_r+0x640>)
 8007ac4:	ec51 0b18 	vmov	r0, r1, d8
 8007ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007acc:	f7f8 fee6 	bl	800089c <__aeabi_ddiv>
 8007ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad4:	f008 080f 	and.w	r8, r8, #15
 8007ad8:	2503      	movs	r5, #3
 8007ada:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007db0 <_dtoa_r+0x640>
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	d10a      	bne.n	8007afa <_dtoa_r+0x38a>
 8007ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae8:	4632      	mov	r2, r6
 8007aea:	463b      	mov	r3, r7
 8007aec:	f7f8 fed6 	bl	800089c <__aeabi_ddiv>
 8007af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007af4:	e02b      	b.n	8007b4e <_dtoa_r+0x3de>
 8007af6:	2502      	movs	r5, #2
 8007af8:	e7ef      	b.n	8007ada <_dtoa_r+0x36a>
 8007afa:	f018 0f01 	tst.w	r8, #1
 8007afe:	d008      	beq.n	8007b12 <_dtoa_r+0x3a2>
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b08:	f7f8 fd9e 	bl	8000648 <__aeabi_dmul>
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460f      	mov	r7, r1
 8007b12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b16:	f109 0908 	add.w	r9, r9, #8
 8007b1a:	e7e0      	b.n	8007ade <_dtoa_r+0x36e>
 8007b1c:	f000 809f 	beq.w	8007c5e <_dtoa_r+0x4ee>
 8007b20:	f1cb 0600 	rsb	r6, fp, #0
 8007b24:	4ba1      	ldr	r3, [pc, #644]	; (8007dac <_dtoa_r+0x63c>)
 8007b26:	4fa2      	ldr	r7, [pc, #648]	; (8007db0 <_dtoa_r+0x640>)
 8007b28:	f006 020f 	and.w	r2, r6, #15
 8007b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	ec51 0b18 	vmov	r0, r1, d8
 8007b38:	f7f8 fd86 	bl	8000648 <__aeabi_dmul>
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	1136      	asrs	r6, r6, #4
 8007b42:	2300      	movs	r3, #0
 8007b44:	2502      	movs	r5, #2
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d17e      	bne.n	8007c48 <_dtoa_r+0x4d8>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1d0      	bne.n	8007af0 <_dtoa_r+0x380>
 8007b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8084 	beq.w	8007c62 <_dtoa_r+0x4f2>
 8007b5a:	4b96      	ldr	r3, [pc, #600]	; (8007db4 <_dtoa_r+0x644>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4640      	mov	r0, r8
 8007b60:	4649      	mov	r1, r9
 8007b62:	f7f8 ffe3 	bl	8000b2c <__aeabi_dcmplt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d07b      	beq.n	8007c62 <_dtoa_r+0x4f2>
 8007b6a:	9b04      	ldr	r3, [sp, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d078      	beq.n	8007c62 <_dtoa_r+0x4f2>
 8007b70:	9b01      	ldr	r3, [sp, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd39      	ble.n	8007bea <_dtoa_r+0x47a>
 8007b76:	4b90      	ldr	r3, [pc, #576]	; (8007db8 <_dtoa_r+0x648>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	f7f8 fd63 	bl	8000648 <__aeabi_dmul>
 8007b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b86:	9e01      	ldr	r6, [sp, #4]
 8007b88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b8c:	3501      	adds	r5, #1
 8007b8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7f8 fcee 	bl	8000574 <__aeabi_i2d>
 8007b98:	4642      	mov	r2, r8
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	f7f8 fd54 	bl	8000648 <__aeabi_dmul>
 8007ba0:	4b86      	ldr	r3, [pc, #536]	; (8007dbc <_dtoa_r+0x64c>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f7f8 fb9a 	bl	80002dc <__adddf3>
 8007ba8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	d158      	bne.n	8007c68 <_dtoa_r+0x4f8>
 8007bb6:	4b82      	ldr	r3, [pc, #520]	; (8007dc0 <_dtoa_r+0x650>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb8b 	bl	80002d8 <__aeabi_dsub>
 8007bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	4689      	mov	r9, r1
 8007bca:	f7f8 ffcd 	bl	8000b68 <__aeabi_dcmpgt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 8296 	bne.w	8008100 <_dtoa_r+0x990>
 8007bd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bde:	4649      	mov	r1, r9
 8007be0:	f7f8 ffa4 	bl	8000b2c <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 8289 	bne.w	80080fc <_dtoa_r+0x98c>
 8007bea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f2c0 814e 	blt.w	8007e92 <_dtoa_r+0x722>
 8007bf6:	f1bb 0f0e 	cmp.w	fp, #14
 8007bfa:	f300 814a 	bgt.w	8007e92 <_dtoa_r+0x722>
 8007bfe:	4b6b      	ldr	r3, [pc, #428]	; (8007dac <_dtoa_r+0x63c>)
 8007c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f280 80dc 	bge.w	8007dc8 <_dtoa_r+0x658>
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f300 80d8 	bgt.w	8007dc8 <_dtoa_r+0x658>
 8007c18:	f040 826f 	bne.w	80080fa <_dtoa_r+0x98a>
 8007c1c:	4b68      	ldr	r3, [pc, #416]	; (8007dc0 <_dtoa_r+0x650>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4640      	mov	r0, r8
 8007c22:	4649      	mov	r1, r9
 8007c24:	f7f8 fd10 	bl	8000648 <__aeabi_dmul>
 8007c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c2c:	f7f8 ff92 	bl	8000b54 <__aeabi_dcmpge>
 8007c30:	9e04      	ldr	r6, [sp, #16]
 8007c32:	4637      	mov	r7, r6
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 8245 	bne.w	80080c4 <_dtoa_r+0x954>
 8007c3a:	9d00      	ldr	r5, [sp, #0]
 8007c3c:	2331      	movs	r3, #49	; 0x31
 8007c3e:	f805 3b01 	strb.w	r3, [r5], #1
 8007c42:	f10b 0b01 	add.w	fp, fp, #1
 8007c46:	e241      	b.n	80080cc <_dtoa_r+0x95c>
 8007c48:	07f2      	lsls	r2, r6, #31
 8007c4a:	d505      	bpl.n	8007c58 <_dtoa_r+0x4e8>
 8007c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c50:	f7f8 fcfa 	bl	8000648 <__aeabi_dmul>
 8007c54:	3501      	adds	r5, #1
 8007c56:	2301      	movs	r3, #1
 8007c58:	1076      	asrs	r6, r6, #1
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	e773      	b.n	8007b46 <_dtoa_r+0x3d6>
 8007c5e:	2502      	movs	r5, #2
 8007c60:	e775      	b.n	8007b4e <_dtoa_r+0x3de>
 8007c62:	9e04      	ldr	r6, [sp, #16]
 8007c64:	465f      	mov	r7, fp
 8007c66:	e792      	b.n	8007b8e <_dtoa_r+0x41e>
 8007c68:	9900      	ldr	r1, [sp, #0]
 8007c6a:	4b50      	ldr	r3, [pc, #320]	; (8007dac <_dtoa_r+0x63c>)
 8007c6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c70:	4431      	add	r1, r6
 8007c72:	9102      	str	r1, [sp, #8]
 8007c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c76:	eeb0 9a47 	vmov.f32	s18, s14
 8007c7a:	eef0 9a67 	vmov.f32	s19, s15
 8007c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d044      	beq.n	8007d14 <_dtoa_r+0x5a4>
 8007c8a:	494e      	ldr	r1, [pc, #312]	; (8007dc4 <_dtoa_r+0x654>)
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	f7f8 fe05 	bl	800089c <__aeabi_ddiv>
 8007c92:	ec53 2b19 	vmov	r2, r3, d9
 8007c96:	f7f8 fb1f 	bl	80002d8 <__aeabi_dsub>
 8007c9a:	9d00      	ldr	r5, [sp, #0]
 8007c9c:	ec41 0b19 	vmov	d9, r0, r1
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7f8 ff80 	bl	8000ba8 <__aeabi_d2iz>
 8007ca8:	4606      	mov	r6, r0
 8007caa:	f7f8 fc63 	bl	8000574 <__aeabi_i2d>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	f7f8 fb0f 	bl	80002d8 <__aeabi_dsub>
 8007cba:	3630      	adds	r6, #48	; 0x30
 8007cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8007cc0:	ec53 2b19 	vmov	r2, r3, d9
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	4689      	mov	r9, r1
 8007cc8:	f7f8 ff30 	bl	8000b2c <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d164      	bne.n	8007d9a <_dtoa_r+0x62a>
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	464b      	mov	r3, r9
 8007cd4:	4937      	ldr	r1, [pc, #220]	; (8007db4 <_dtoa_r+0x644>)
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7f8 fafe 	bl	80002d8 <__aeabi_dsub>
 8007cdc:	ec53 2b19 	vmov	r2, r3, d9
 8007ce0:	f7f8 ff24 	bl	8000b2c <__aeabi_dcmplt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 80b6 	bne.w	8007e56 <_dtoa_r+0x6e6>
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	429d      	cmp	r5, r3
 8007cee:	f43f af7c 	beq.w	8007bea <_dtoa_r+0x47a>
 8007cf2:	4b31      	ldr	r3, [pc, #196]	; (8007db8 <_dtoa_r+0x648>)
 8007cf4:	ec51 0b19 	vmov	r0, r1, d9
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f7f8 fca5 	bl	8000648 <__aeabi_dmul>
 8007cfe:	4b2e      	ldr	r3, [pc, #184]	; (8007db8 <_dtoa_r+0x648>)
 8007d00:	ec41 0b19 	vmov	d9, r0, r1
 8007d04:	2200      	movs	r2, #0
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fc9d 	bl	8000648 <__aeabi_dmul>
 8007d0e:	4680      	mov	r8, r0
 8007d10:	4689      	mov	r9, r1
 8007d12:	e7c5      	b.n	8007ca0 <_dtoa_r+0x530>
 8007d14:	ec51 0b17 	vmov	r0, r1, d7
 8007d18:	f7f8 fc96 	bl	8000648 <__aeabi_dmul>
 8007d1c:	9b02      	ldr	r3, [sp, #8]
 8007d1e:	9d00      	ldr	r5, [sp, #0]
 8007d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d22:	ec41 0b19 	vmov	d9, r0, r1
 8007d26:	4649      	mov	r1, r9
 8007d28:	4640      	mov	r0, r8
 8007d2a:	f7f8 ff3d 	bl	8000ba8 <__aeabi_d2iz>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	f7f8 fc20 	bl	8000574 <__aeabi_i2d>
 8007d34:	3630      	adds	r6, #48	; 0x30
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	f7f8 facb 	bl	80002d8 <__aeabi_dsub>
 8007d42:	f805 6b01 	strb.w	r6, [r5], #1
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	429d      	cmp	r5, r3
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	4689      	mov	r9, r1
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	d124      	bne.n	8007d9e <_dtoa_r+0x62e>
 8007d54:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <_dtoa_r+0x654>)
 8007d56:	ec51 0b19 	vmov	r0, r1, d9
 8007d5a:	f7f8 fabf 	bl	80002dc <__adddf3>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 feff 	bl	8000b68 <__aeabi_dcmpgt>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d173      	bne.n	8007e56 <_dtoa_r+0x6e6>
 8007d6e:	ec53 2b19 	vmov	r2, r3, d9
 8007d72:	4914      	ldr	r1, [pc, #80]	; (8007dc4 <_dtoa_r+0x654>)
 8007d74:	2000      	movs	r0, #0
 8007d76:	f7f8 faaf 	bl	80002d8 <__aeabi_dsub>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	f7f8 fed3 	bl	8000b2c <__aeabi_dcmplt>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f af2f 	beq.w	8007bea <_dtoa_r+0x47a>
 8007d8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d8e:	1e6b      	subs	r3, r5, #1
 8007d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d96:	2b30      	cmp	r3, #48	; 0x30
 8007d98:	d0f8      	beq.n	8007d8c <_dtoa_r+0x61c>
 8007d9a:	46bb      	mov	fp, r7
 8007d9c:	e04a      	b.n	8007e34 <_dtoa_r+0x6c4>
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <_dtoa_r+0x648>)
 8007da0:	f7f8 fc52 	bl	8000648 <__aeabi_dmul>
 8007da4:	4680      	mov	r8, r0
 8007da6:	4689      	mov	r9, r1
 8007da8:	e7bd      	b.n	8007d26 <_dtoa_r+0x5b6>
 8007daa:	bf00      	nop
 8007dac:	0800c480 	.word	0x0800c480
 8007db0:	0800c458 	.word	0x0800c458
 8007db4:	3ff00000 	.word	0x3ff00000
 8007db8:	40240000 	.word	0x40240000
 8007dbc:	401c0000 	.word	0x401c0000
 8007dc0:	40140000 	.word	0x40140000
 8007dc4:	3fe00000 	.word	0x3fe00000
 8007dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dcc:	9d00      	ldr	r5, [sp, #0]
 8007dce:	4642      	mov	r2, r8
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fd61 	bl	800089c <__aeabi_ddiv>
 8007dda:	f7f8 fee5 	bl	8000ba8 <__aeabi_d2iz>
 8007dde:	9001      	str	r0, [sp, #4]
 8007de0:	f7f8 fbc8 	bl	8000574 <__aeabi_i2d>
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	f7f8 fc2e 	bl	8000648 <__aeabi_dmul>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4630      	mov	r0, r6
 8007df2:	4639      	mov	r1, r7
 8007df4:	f7f8 fa70 	bl	80002d8 <__aeabi_dsub>
 8007df8:	9e01      	ldr	r6, [sp, #4]
 8007dfa:	9f04      	ldr	r7, [sp, #16]
 8007dfc:	3630      	adds	r6, #48	; 0x30
 8007dfe:	f805 6b01 	strb.w	r6, [r5], #1
 8007e02:	9e00      	ldr	r6, [sp, #0]
 8007e04:	1bae      	subs	r6, r5, r6
 8007e06:	42b7      	cmp	r7, r6
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	d134      	bne.n	8007e78 <_dtoa_r+0x708>
 8007e0e:	f7f8 fa65 	bl	80002dc <__adddf3>
 8007e12:	4642      	mov	r2, r8
 8007e14:	464b      	mov	r3, r9
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	f7f8 fea5 	bl	8000b68 <__aeabi_dcmpgt>
 8007e1e:	b9c8      	cbnz	r0, 8007e54 <_dtoa_r+0x6e4>
 8007e20:	4642      	mov	r2, r8
 8007e22:	464b      	mov	r3, r9
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 fe76 	bl	8000b18 <__aeabi_dcmpeq>
 8007e2c:	b110      	cbz	r0, 8007e34 <_dtoa_r+0x6c4>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	07db      	lsls	r3, r3, #31
 8007e32:	d40f      	bmi.n	8007e54 <_dtoa_r+0x6e4>
 8007e34:	4651      	mov	r1, sl
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 fbcc 	bl	80085d4 <_Bfree>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e40:	702b      	strb	r3, [r5, #0]
 8007e42:	f10b 0301 	add.w	r3, fp, #1
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f43f ace2 	beq.w	8007814 <_dtoa_r+0xa4>
 8007e50:	601d      	str	r5, [r3, #0]
 8007e52:	e4df      	b.n	8007814 <_dtoa_r+0xa4>
 8007e54:	465f      	mov	r7, fp
 8007e56:	462b      	mov	r3, r5
 8007e58:	461d      	mov	r5, r3
 8007e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e5e:	2a39      	cmp	r2, #57	; 0x39
 8007e60:	d106      	bne.n	8007e70 <_dtoa_r+0x700>
 8007e62:	9a00      	ldr	r2, [sp, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d1f7      	bne.n	8007e58 <_dtoa_r+0x6e8>
 8007e68:	9900      	ldr	r1, [sp, #0]
 8007e6a:	2230      	movs	r2, #48	; 0x30
 8007e6c:	3701      	adds	r7, #1
 8007e6e:	700a      	strb	r2, [r1, #0]
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	3201      	adds	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e790      	b.n	8007d9a <_dtoa_r+0x62a>
 8007e78:	4ba3      	ldr	r3, [pc, #652]	; (8008108 <_dtoa_r+0x998>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f7f8 fbe4 	bl	8000648 <__aeabi_dmul>
 8007e80:	2200      	movs	r2, #0
 8007e82:	2300      	movs	r3, #0
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	f7f8 fe46 	bl	8000b18 <__aeabi_dcmpeq>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d09e      	beq.n	8007dce <_dtoa_r+0x65e>
 8007e90:	e7d0      	b.n	8007e34 <_dtoa_r+0x6c4>
 8007e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	f000 80ca 	beq.w	800802e <_dtoa_r+0x8be>
 8007e9a:	9a07      	ldr	r2, [sp, #28]
 8007e9c:	2a01      	cmp	r2, #1
 8007e9e:	f300 80ad 	bgt.w	8007ffc <_dtoa_r+0x88c>
 8007ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	f000 80a5 	beq.w	8007ff4 <_dtoa_r+0x884>
 8007eaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007eae:	9e08      	ldr	r6, [sp, #32]
 8007eb0:	9d05      	ldr	r5, [sp, #20]
 8007eb2:	9a05      	ldr	r2, [sp, #20]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	9205      	str	r2, [sp, #20]
 8007eb8:	9a06      	ldr	r2, [sp, #24]
 8007eba:	2101      	movs	r1, #1
 8007ebc:	441a      	add	r2, r3
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	9206      	str	r2, [sp, #24]
 8007ec2:	f000 fc87 	bl	80087d4 <__i2b>
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	b165      	cbz	r5, 8007ee4 <_dtoa_r+0x774>
 8007eca:	9b06      	ldr	r3, [sp, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dd09      	ble.n	8007ee4 <_dtoa_r+0x774>
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	9a05      	ldr	r2, [sp, #20]
 8007ed4:	bfa8      	it	ge
 8007ed6:	462b      	movge	r3, r5
 8007ed8:	1ad2      	subs	r2, r2, r3
 8007eda:	9205      	str	r2, [sp, #20]
 8007edc:	9a06      	ldr	r2, [sp, #24]
 8007ede:	1aed      	subs	r5, r5, r3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	9306      	str	r3, [sp, #24]
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	b1f3      	cbz	r3, 8007f26 <_dtoa_r+0x7b6>
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80a3 	beq.w	8008036 <_dtoa_r+0x8c6>
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	dd10      	ble.n	8007f16 <_dtoa_r+0x7a6>
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fd2b 	bl	8008954 <__pow5mult>
 8007efe:	4652      	mov	r2, sl
 8007f00:	4601      	mov	r1, r0
 8007f02:	4607      	mov	r7, r0
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fc7b 	bl	8008800 <__multiply>
 8007f0a:	4651      	mov	r1, sl
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fb60 	bl	80085d4 <_Bfree>
 8007f14:	46c2      	mov	sl, r8
 8007f16:	9b08      	ldr	r3, [sp, #32]
 8007f18:	1b9a      	subs	r2, r3, r6
 8007f1a:	d004      	beq.n	8007f26 <_dtoa_r+0x7b6>
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fd18 	bl	8008954 <__pow5mult>
 8007f24:	4682      	mov	sl, r0
 8007f26:	2101      	movs	r1, #1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fc53 	bl	80087d4 <__i2b>
 8007f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	4606      	mov	r6, r0
 8007f34:	f340 8081 	ble.w	800803a <_dtoa_r+0x8ca>
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fd09 	bl	8008954 <__pow5mult>
 8007f42:	9b07      	ldr	r3, [sp, #28]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	4606      	mov	r6, r0
 8007f48:	dd7a      	ble.n	8008040 <_dtoa_r+0x8d0>
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	6933      	ldr	r3, [r6, #16]
 8007f50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f54:	6918      	ldr	r0, [r3, #16]
 8007f56:	f000 fbef 	bl	8008738 <__hi0bits>
 8007f5a:	f1c0 0020 	rsb	r0, r0, #32
 8007f5e:	9b06      	ldr	r3, [sp, #24]
 8007f60:	4418      	add	r0, r3
 8007f62:	f010 001f 	ands.w	r0, r0, #31
 8007f66:	f000 8094 	beq.w	8008092 <_dtoa_r+0x922>
 8007f6a:	f1c0 0320 	rsb	r3, r0, #32
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	f340 8085 	ble.w	800807e <_dtoa_r+0x90e>
 8007f74:	9b05      	ldr	r3, [sp, #20]
 8007f76:	f1c0 001c 	rsb	r0, r0, #28
 8007f7a:	4403      	add	r3, r0
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	9b06      	ldr	r3, [sp, #24]
 8007f80:	4403      	add	r3, r0
 8007f82:	4405      	add	r5, r0
 8007f84:	9306      	str	r3, [sp, #24]
 8007f86:	9b05      	ldr	r3, [sp, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dd05      	ble.n	8007f98 <_dtoa_r+0x828>
 8007f8c:	4651      	mov	r1, sl
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fd39 	bl	8008a08 <__lshift>
 8007f96:	4682      	mov	sl, r0
 8007f98:	9b06      	ldr	r3, [sp, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd05      	ble.n	8007faa <_dtoa_r+0x83a>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fd30 	bl	8008a08 <__lshift>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d072      	beq.n	8008096 <_dtoa_r+0x926>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	f000 fd94 	bl	8008ae0 <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	da6c      	bge.n	8008096 <_dtoa_r+0x926>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fb28 	bl	8008618 <__multadd>
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fce:	4682      	mov	sl, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 81b0 	beq.w	8008336 <_dtoa_r+0xbc6>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4639      	mov	r1, r7
 8007fda:	220a      	movs	r2, #10
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fb1b 	bl	8008618 <__multadd>
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f300 8096 	bgt.w	8008118 <_dtoa_r+0x9a8>
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	dc59      	bgt.n	80080a6 <_dtoa_r+0x936>
 8007ff2:	e091      	b.n	8008118 <_dtoa_r+0x9a8>
 8007ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ffa:	e758      	b.n	8007eae <_dtoa_r+0x73e>
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	1e5e      	subs	r6, r3, #1
 8008000:	9b08      	ldr	r3, [sp, #32]
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfbf      	itttt	lt
 8008006:	9b08      	ldrlt	r3, [sp, #32]
 8008008:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800800a:	9608      	strlt	r6, [sp, #32]
 800800c:	1af3      	sublt	r3, r6, r3
 800800e:	bfb4      	ite	lt
 8008010:	18d2      	addlt	r2, r2, r3
 8008012:	1b9e      	subge	r6, r3, r6
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	bfbc      	itt	lt
 8008018:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800801a:	2600      	movlt	r6, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfb7      	itett	lt
 8008020:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008024:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008028:	1a9d      	sublt	r5, r3, r2
 800802a:	2300      	movlt	r3, #0
 800802c:	e741      	b.n	8007eb2 <_dtoa_r+0x742>
 800802e:	9e08      	ldr	r6, [sp, #32]
 8008030:	9d05      	ldr	r5, [sp, #20]
 8008032:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008034:	e748      	b.n	8007ec8 <_dtoa_r+0x758>
 8008036:	9a08      	ldr	r2, [sp, #32]
 8008038:	e770      	b.n	8007f1c <_dtoa_r+0x7ac>
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b01      	cmp	r3, #1
 800803e:	dc19      	bgt.n	8008074 <_dtoa_r+0x904>
 8008040:	9b02      	ldr	r3, [sp, #8]
 8008042:	b9bb      	cbnz	r3, 8008074 <_dtoa_r+0x904>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800804a:	b99b      	cbnz	r3, 8008074 <_dtoa_r+0x904>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008052:	0d1b      	lsrs	r3, r3, #20
 8008054:	051b      	lsls	r3, r3, #20
 8008056:	b183      	cbz	r3, 800807a <_dtoa_r+0x90a>
 8008058:	9b05      	ldr	r3, [sp, #20]
 800805a:	3301      	adds	r3, #1
 800805c:	9305      	str	r3, [sp, #20]
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	3301      	adds	r3, #1
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	f04f 0801 	mov.w	r8, #1
 8008068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806a:	2b00      	cmp	r3, #0
 800806c:	f47f af6f 	bne.w	8007f4e <_dtoa_r+0x7de>
 8008070:	2001      	movs	r0, #1
 8008072:	e774      	b.n	8007f5e <_dtoa_r+0x7ee>
 8008074:	f04f 0800 	mov.w	r8, #0
 8008078:	e7f6      	b.n	8008068 <_dtoa_r+0x8f8>
 800807a:	4698      	mov	r8, r3
 800807c:	e7f4      	b.n	8008068 <_dtoa_r+0x8f8>
 800807e:	d082      	beq.n	8007f86 <_dtoa_r+0x816>
 8008080:	9a05      	ldr	r2, [sp, #20]
 8008082:	331c      	adds	r3, #28
 8008084:	441a      	add	r2, r3
 8008086:	9205      	str	r2, [sp, #20]
 8008088:	9a06      	ldr	r2, [sp, #24]
 800808a:	441a      	add	r2, r3
 800808c:	441d      	add	r5, r3
 800808e:	9206      	str	r2, [sp, #24]
 8008090:	e779      	b.n	8007f86 <_dtoa_r+0x816>
 8008092:	4603      	mov	r3, r0
 8008094:	e7f4      	b.n	8008080 <_dtoa_r+0x910>
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc37      	bgt.n	800810c <_dtoa_r+0x99c>
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	dd34      	ble.n	800810c <_dtoa_r+0x99c>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	b963      	cbnz	r3, 80080c4 <_dtoa_r+0x954>
 80080aa:	4631      	mov	r1, r6
 80080ac:	2205      	movs	r2, #5
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 fab2 	bl	8008618 <__multadd>
 80080b4:	4601      	mov	r1, r0
 80080b6:	4606      	mov	r6, r0
 80080b8:	4650      	mov	r0, sl
 80080ba:	f000 fd11 	bl	8008ae0 <__mcmp>
 80080be:	2800      	cmp	r0, #0
 80080c0:	f73f adbb 	bgt.w	8007c3a <_dtoa_r+0x4ca>
 80080c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c6:	9d00      	ldr	r5, [sp, #0]
 80080c8:	ea6f 0b03 	mvn.w	fp, r3
 80080cc:	f04f 0800 	mov.w	r8, #0
 80080d0:	4631      	mov	r1, r6
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fa7e 	bl	80085d4 <_Bfree>
 80080d8:	2f00      	cmp	r7, #0
 80080da:	f43f aeab 	beq.w	8007e34 <_dtoa_r+0x6c4>
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	d005      	beq.n	80080f0 <_dtoa_r+0x980>
 80080e4:	45b8      	cmp	r8, r7
 80080e6:	d003      	beq.n	80080f0 <_dtoa_r+0x980>
 80080e8:	4641      	mov	r1, r8
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 fa72 	bl	80085d4 <_Bfree>
 80080f0:	4639      	mov	r1, r7
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 fa6e 	bl	80085d4 <_Bfree>
 80080f8:	e69c      	b.n	8007e34 <_dtoa_r+0x6c4>
 80080fa:	2600      	movs	r6, #0
 80080fc:	4637      	mov	r7, r6
 80080fe:	e7e1      	b.n	80080c4 <_dtoa_r+0x954>
 8008100:	46bb      	mov	fp, r7
 8008102:	4637      	mov	r7, r6
 8008104:	e599      	b.n	8007c3a <_dtoa_r+0x4ca>
 8008106:	bf00      	nop
 8008108:	40240000 	.word	0x40240000
 800810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80c8 	beq.w	80082a4 <_dtoa_r+0xb34>
 8008114:	9b04      	ldr	r3, [sp, #16]
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	2d00      	cmp	r5, #0
 800811a:	dd05      	ble.n	8008128 <_dtoa_r+0x9b8>
 800811c:	4639      	mov	r1, r7
 800811e:	462a      	mov	r2, r5
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fc71 	bl	8008a08 <__lshift>
 8008126:	4607      	mov	r7, r0
 8008128:	f1b8 0f00 	cmp.w	r8, #0
 800812c:	d05b      	beq.n	80081e6 <_dtoa_r+0xa76>
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fa0f 	bl	8008554 <_Balloc>
 8008136:	4605      	mov	r5, r0
 8008138:	b928      	cbnz	r0, 8008146 <_dtoa_r+0x9d6>
 800813a:	4b83      	ldr	r3, [pc, #524]	; (8008348 <_dtoa_r+0xbd8>)
 800813c:	4602      	mov	r2, r0
 800813e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008142:	f7ff bb2e 	b.w	80077a2 <_dtoa_r+0x32>
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	3202      	adds	r2, #2
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	f107 010c 	add.w	r1, r7, #12
 8008150:	300c      	adds	r0, #12
 8008152:	f002 f981 	bl	800a458 <memcpy>
 8008156:	2201      	movs	r2, #1
 8008158:	4629      	mov	r1, r5
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fc54 	bl	8008a08 <__lshift>
 8008160:	9b00      	ldr	r3, [sp, #0]
 8008162:	3301      	adds	r3, #1
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800816a:	4413      	add	r3, r2
 800816c:	9308      	str	r3, [sp, #32]
 800816e:	9b02      	ldr	r3, [sp, #8]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	46b8      	mov	r8, r7
 8008176:	9306      	str	r3, [sp, #24]
 8008178:	4607      	mov	r7, r0
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	4631      	mov	r1, r6
 800817e:	3b01      	subs	r3, #1
 8008180:	4650      	mov	r0, sl
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	f7ff fa6c 	bl	8007660 <quorem>
 8008188:	4641      	mov	r1, r8
 800818a:	9002      	str	r0, [sp, #8]
 800818c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008190:	4650      	mov	r0, sl
 8008192:	f000 fca5 	bl	8008ae0 <__mcmp>
 8008196:	463a      	mov	r2, r7
 8008198:	9005      	str	r0, [sp, #20]
 800819a:	4631      	mov	r1, r6
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fcbb 	bl	8008b18 <__mdiff>
 80081a2:	68c2      	ldr	r2, [r0, #12]
 80081a4:	4605      	mov	r5, r0
 80081a6:	bb02      	cbnz	r2, 80081ea <_dtoa_r+0xa7a>
 80081a8:	4601      	mov	r1, r0
 80081aa:	4650      	mov	r0, sl
 80081ac:	f000 fc98 	bl	8008ae0 <__mcmp>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4629      	mov	r1, r5
 80081b4:	4620      	mov	r0, r4
 80081b6:	9209      	str	r2, [sp, #36]	; 0x24
 80081b8:	f000 fa0c 	bl	80085d4 <_Bfree>
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c0:	9d04      	ldr	r5, [sp, #16]
 80081c2:	ea43 0102 	orr.w	r1, r3, r2
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	4319      	orrs	r1, r3
 80081ca:	d110      	bne.n	80081ee <_dtoa_r+0xa7e>
 80081cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081d0:	d029      	beq.n	8008226 <_dtoa_r+0xab6>
 80081d2:	9b05      	ldr	r3, [sp, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dd02      	ble.n	80081de <_dtoa_r+0xa6e>
 80081d8:	9b02      	ldr	r3, [sp, #8]
 80081da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	f883 9000 	strb.w	r9, [r3]
 80081e4:	e774      	b.n	80080d0 <_dtoa_r+0x960>
 80081e6:	4638      	mov	r0, r7
 80081e8:	e7ba      	b.n	8008160 <_dtoa_r+0x9f0>
 80081ea:	2201      	movs	r2, #1
 80081ec:	e7e1      	b.n	80081b2 <_dtoa_r+0xa42>
 80081ee:	9b05      	ldr	r3, [sp, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	db04      	blt.n	80081fe <_dtoa_r+0xa8e>
 80081f4:	9907      	ldr	r1, [sp, #28]
 80081f6:	430b      	orrs	r3, r1
 80081f8:	9906      	ldr	r1, [sp, #24]
 80081fa:	430b      	orrs	r3, r1
 80081fc:	d120      	bne.n	8008240 <_dtoa_r+0xad0>
 80081fe:	2a00      	cmp	r2, #0
 8008200:	dded      	ble.n	80081de <_dtoa_r+0xa6e>
 8008202:	4651      	mov	r1, sl
 8008204:	2201      	movs	r2, #1
 8008206:	4620      	mov	r0, r4
 8008208:	f000 fbfe 	bl	8008a08 <__lshift>
 800820c:	4631      	mov	r1, r6
 800820e:	4682      	mov	sl, r0
 8008210:	f000 fc66 	bl	8008ae0 <__mcmp>
 8008214:	2800      	cmp	r0, #0
 8008216:	dc03      	bgt.n	8008220 <_dtoa_r+0xab0>
 8008218:	d1e1      	bne.n	80081de <_dtoa_r+0xa6e>
 800821a:	f019 0f01 	tst.w	r9, #1
 800821e:	d0de      	beq.n	80081de <_dtoa_r+0xa6e>
 8008220:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008224:	d1d8      	bne.n	80081d8 <_dtoa_r+0xa68>
 8008226:	9a01      	ldr	r2, [sp, #4]
 8008228:	2339      	movs	r3, #57	; 0x39
 800822a:	7013      	strb	r3, [r2, #0]
 800822c:	462b      	mov	r3, r5
 800822e:	461d      	mov	r5, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008236:	2a39      	cmp	r2, #57	; 0x39
 8008238:	d06c      	beq.n	8008314 <_dtoa_r+0xba4>
 800823a:	3201      	adds	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	e747      	b.n	80080d0 <_dtoa_r+0x960>
 8008240:	2a00      	cmp	r2, #0
 8008242:	dd07      	ble.n	8008254 <_dtoa_r+0xae4>
 8008244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008248:	d0ed      	beq.n	8008226 <_dtoa_r+0xab6>
 800824a:	9a01      	ldr	r2, [sp, #4]
 800824c:	f109 0301 	add.w	r3, r9, #1
 8008250:	7013      	strb	r3, [r2, #0]
 8008252:	e73d      	b.n	80080d0 <_dtoa_r+0x960>
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	9a08      	ldr	r2, [sp, #32]
 8008258:	f803 9c01 	strb.w	r9, [r3, #-1]
 800825c:	4293      	cmp	r3, r2
 800825e:	d043      	beq.n	80082e8 <_dtoa_r+0xb78>
 8008260:	4651      	mov	r1, sl
 8008262:	2300      	movs	r3, #0
 8008264:	220a      	movs	r2, #10
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f9d6 	bl	8008618 <__multadd>
 800826c:	45b8      	cmp	r8, r7
 800826e:	4682      	mov	sl, r0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	f04f 020a 	mov.w	r2, #10
 8008278:	4641      	mov	r1, r8
 800827a:	4620      	mov	r0, r4
 800827c:	d107      	bne.n	800828e <_dtoa_r+0xb1e>
 800827e:	f000 f9cb 	bl	8008618 <__multadd>
 8008282:	4680      	mov	r8, r0
 8008284:	4607      	mov	r7, r0
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	3301      	adds	r3, #1
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	e775      	b.n	800817a <_dtoa_r+0xa0a>
 800828e:	f000 f9c3 	bl	8008618 <__multadd>
 8008292:	4639      	mov	r1, r7
 8008294:	4680      	mov	r8, r0
 8008296:	2300      	movs	r3, #0
 8008298:	220a      	movs	r2, #10
 800829a:	4620      	mov	r0, r4
 800829c:	f000 f9bc 	bl	8008618 <__multadd>
 80082a0:	4607      	mov	r7, r0
 80082a2:	e7f0      	b.n	8008286 <_dtoa_r+0xb16>
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	9d00      	ldr	r5, [sp, #0]
 80082aa:	4631      	mov	r1, r6
 80082ac:	4650      	mov	r0, sl
 80082ae:	f7ff f9d7 	bl	8007660 <quorem>
 80082b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	f805 9b01 	strb.w	r9, [r5], #1
 80082bc:	1aea      	subs	r2, r5, r3
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	dd07      	ble.n	80082d4 <_dtoa_r+0xb64>
 80082c4:	4651      	mov	r1, sl
 80082c6:	2300      	movs	r3, #0
 80082c8:	220a      	movs	r2, #10
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f9a4 	bl	8008618 <__multadd>
 80082d0:	4682      	mov	sl, r0
 80082d2:	e7ea      	b.n	80082aa <_dtoa_r+0xb3a>
 80082d4:	9b01      	ldr	r3, [sp, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bfc8      	it	gt
 80082da:	461d      	movgt	r5, r3
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	bfd8      	it	le
 80082e0:	2501      	movle	r5, #1
 80082e2:	441d      	add	r5, r3
 80082e4:	f04f 0800 	mov.w	r8, #0
 80082e8:	4651      	mov	r1, sl
 80082ea:	2201      	movs	r2, #1
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fb8b 	bl	8008a08 <__lshift>
 80082f2:	4631      	mov	r1, r6
 80082f4:	4682      	mov	sl, r0
 80082f6:	f000 fbf3 	bl	8008ae0 <__mcmp>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	dc96      	bgt.n	800822c <_dtoa_r+0xabc>
 80082fe:	d102      	bne.n	8008306 <_dtoa_r+0xb96>
 8008300:	f019 0f01 	tst.w	r9, #1
 8008304:	d192      	bne.n	800822c <_dtoa_r+0xabc>
 8008306:	462b      	mov	r3, r5
 8008308:	461d      	mov	r5, r3
 800830a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800830e:	2a30      	cmp	r2, #48	; 0x30
 8008310:	d0fa      	beq.n	8008308 <_dtoa_r+0xb98>
 8008312:	e6dd      	b.n	80080d0 <_dtoa_r+0x960>
 8008314:	9a00      	ldr	r2, [sp, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d189      	bne.n	800822e <_dtoa_r+0xabe>
 800831a:	f10b 0b01 	add.w	fp, fp, #1
 800831e:	2331      	movs	r3, #49	; 0x31
 8008320:	e796      	b.n	8008250 <_dtoa_r+0xae0>
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <_dtoa_r+0xbdc>)
 8008324:	f7ff ba99 	b.w	800785a <_dtoa_r+0xea>
 8008328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800832a:	2b00      	cmp	r3, #0
 800832c:	f47f aa6d 	bne.w	800780a <_dtoa_r+0x9a>
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <_dtoa_r+0xbe0>)
 8008332:	f7ff ba92 	b.w	800785a <_dtoa_r+0xea>
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	dcb5      	bgt.n	80082a8 <_dtoa_r+0xb38>
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	2b02      	cmp	r3, #2
 8008340:	f73f aeb1 	bgt.w	80080a6 <_dtoa_r+0x936>
 8008344:	e7b0      	b.n	80082a8 <_dtoa_r+0xb38>
 8008346:	bf00      	nop
 8008348:	0800c3e9 	.word	0x0800c3e9
 800834c:	0800c344 	.word	0x0800c344
 8008350:	0800c36d 	.word	0x0800c36d

08008354 <_free_r>:
 8008354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008356:	2900      	cmp	r1, #0
 8008358:	d044      	beq.n	80083e4 <_free_r+0x90>
 800835a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835e:	9001      	str	r0, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f1a1 0404 	sub.w	r4, r1, #4
 8008366:	bfb8      	it	lt
 8008368:	18e4      	addlt	r4, r4, r3
 800836a:	f000 f8e7 	bl	800853c <__malloc_lock>
 800836e:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <_free_r+0x94>)
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	b933      	cbnz	r3, 8008384 <_free_r+0x30>
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	6014      	str	r4, [r2, #0]
 800837a:	b003      	add	sp, #12
 800837c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008380:	f000 b8e2 	b.w	8008548 <__malloc_unlock>
 8008384:	42a3      	cmp	r3, r4
 8008386:	d908      	bls.n	800839a <_free_r+0x46>
 8008388:	6825      	ldr	r5, [r4, #0]
 800838a:	1961      	adds	r1, r4, r5
 800838c:	428b      	cmp	r3, r1
 800838e:	bf01      	itttt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	1949      	addeq	r1, r1, r5
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	e7ed      	b.n	8008376 <_free_r+0x22>
 800839a:	461a      	mov	r2, r3
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b10b      	cbz	r3, 80083a4 <_free_r+0x50>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d9fa      	bls.n	800839a <_free_r+0x46>
 80083a4:	6811      	ldr	r1, [r2, #0]
 80083a6:	1855      	adds	r5, r2, r1
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	d10b      	bne.n	80083c4 <_free_r+0x70>
 80083ac:	6824      	ldr	r4, [r4, #0]
 80083ae:	4421      	add	r1, r4
 80083b0:	1854      	adds	r4, r2, r1
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	d1e0      	bne.n	800837a <_free_r+0x26>
 80083b8:	681c      	ldr	r4, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	440c      	add	r4, r1
 80083c0:	6014      	str	r4, [r2, #0]
 80083c2:	e7da      	b.n	800837a <_free_r+0x26>
 80083c4:	d902      	bls.n	80083cc <_free_r+0x78>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6003      	str	r3, [r0, #0]
 80083ca:	e7d6      	b.n	800837a <_free_r+0x26>
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	1961      	adds	r1, r4, r5
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf04      	itt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	bf04      	itt	eq
 80083dc:	1949      	addeq	r1, r1, r5
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	6054      	str	r4, [r2, #4]
 80083e2:	e7ca      	b.n	800837a <_free_r+0x26>
 80083e4:	b003      	add	sp, #12
 80083e6:	bd30      	pop	{r4, r5, pc}
 80083e8:	20000990 	.word	0x20000990

080083ec <malloc>:
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <malloc+0xc>)
 80083ee:	4601      	mov	r1, r0
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	f000 b823 	b.w	800843c <_malloc_r>
 80083f6:	bf00      	nop
 80083f8:	20000068 	.word	0x20000068

080083fc <sbrk_aligned>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4e0e      	ldr	r6, [pc, #56]	; (8008438 <sbrk_aligned+0x3c>)
 8008400:	460c      	mov	r4, r1
 8008402:	6831      	ldr	r1, [r6, #0]
 8008404:	4605      	mov	r5, r0
 8008406:	b911      	cbnz	r1, 800840e <sbrk_aligned+0x12>
 8008408:	f002 f816 	bl	800a438 <_sbrk_r>
 800840c:	6030      	str	r0, [r6, #0]
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f002 f811 	bl	800a438 <_sbrk_r>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d00a      	beq.n	8008430 <sbrk_aligned+0x34>
 800841a:	1cc4      	adds	r4, r0, #3
 800841c:	f024 0403 	bic.w	r4, r4, #3
 8008420:	42a0      	cmp	r0, r4
 8008422:	d007      	beq.n	8008434 <sbrk_aligned+0x38>
 8008424:	1a21      	subs	r1, r4, r0
 8008426:	4628      	mov	r0, r5
 8008428:	f002 f806 	bl	800a438 <_sbrk_r>
 800842c:	3001      	adds	r0, #1
 800842e:	d101      	bne.n	8008434 <sbrk_aligned+0x38>
 8008430:	f04f 34ff 	mov.w	r4, #4294967295
 8008434:	4620      	mov	r0, r4
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	20000994 	.word	0x20000994

0800843c <_malloc_r>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	1ccd      	adds	r5, r1, #3
 8008442:	f025 0503 	bic.w	r5, r5, #3
 8008446:	3508      	adds	r5, #8
 8008448:	2d0c      	cmp	r5, #12
 800844a:	bf38      	it	cc
 800844c:	250c      	movcc	r5, #12
 800844e:	2d00      	cmp	r5, #0
 8008450:	4607      	mov	r7, r0
 8008452:	db01      	blt.n	8008458 <_malloc_r+0x1c>
 8008454:	42a9      	cmp	r1, r5
 8008456:	d905      	bls.n	8008464 <_malloc_r+0x28>
 8008458:	230c      	movs	r3, #12
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	2600      	movs	r6, #0
 800845e:	4630      	mov	r0, r6
 8008460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008464:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008538 <_malloc_r+0xfc>
 8008468:	f000 f868 	bl	800853c <__malloc_lock>
 800846c:	f8d8 3000 	ldr.w	r3, [r8]
 8008470:	461c      	mov	r4, r3
 8008472:	bb5c      	cbnz	r4, 80084cc <_malloc_r+0x90>
 8008474:	4629      	mov	r1, r5
 8008476:	4638      	mov	r0, r7
 8008478:	f7ff ffc0 	bl	80083fc <sbrk_aligned>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	4604      	mov	r4, r0
 8008480:	d155      	bne.n	800852e <_malloc_r+0xf2>
 8008482:	f8d8 4000 	ldr.w	r4, [r8]
 8008486:	4626      	mov	r6, r4
 8008488:	2e00      	cmp	r6, #0
 800848a:	d145      	bne.n	8008518 <_malloc_r+0xdc>
 800848c:	2c00      	cmp	r4, #0
 800848e:	d048      	beq.n	8008522 <_malloc_r+0xe6>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	4631      	mov	r1, r6
 8008494:	4638      	mov	r0, r7
 8008496:	eb04 0903 	add.w	r9, r4, r3
 800849a:	f001 ffcd 	bl	800a438 <_sbrk_r>
 800849e:	4581      	cmp	r9, r0
 80084a0:	d13f      	bne.n	8008522 <_malloc_r+0xe6>
 80084a2:	6821      	ldr	r1, [r4, #0]
 80084a4:	1a6d      	subs	r5, r5, r1
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ffa7 	bl	80083fc <sbrk_aligned>
 80084ae:	3001      	adds	r0, #1
 80084b0:	d037      	beq.n	8008522 <_malloc_r+0xe6>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	442b      	add	r3, r5
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	f8d8 3000 	ldr.w	r3, [r8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d038      	beq.n	8008532 <_malloc_r+0xf6>
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	42a2      	cmp	r2, r4
 80084c4:	d12b      	bne.n	800851e <_malloc_r+0xe2>
 80084c6:	2200      	movs	r2, #0
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	e00f      	b.n	80084ec <_malloc_r+0xb0>
 80084cc:	6822      	ldr	r2, [r4, #0]
 80084ce:	1b52      	subs	r2, r2, r5
 80084d0:	d41f      	bmi.n	8008512 <_malloc_r+0xd6>
 80084d2:	2a0b      	cmp	r2, #11
 80084d4:	d917      	bls.n	8008506 <_malloc_r+0xca>
 80084d6:	1961      	adds	r1, r4, r5
 80084d8:	42a3      	cmp	r3, r4
 80084da:	6025      	str	r5, [r4, #0]
 80084dc:	bf18      	it	ne
 80084de:	6059      	strne	r1, [r3, #4]
 80084e0:	6863      	ldr	r3, [r4, #4]
 80084e2:	bf08      	it	eq
 80084e4:	f8c8 1000 	streq.w	r1, [r8]
 80084e8:	5162      	str	r2, [r4, r5]
 80084ea:	604b      	str	r3, [r1, #4]
 80084ec:	4638      	mov	r0, r7
 80084ee:	f104 060b 	add.w	r6, r4, #11
 80084f2:	f000 f829 	bl	8008548 <__malloc_unlock>
 80084f6:	f026 0607 	bic.w	r6, r6, #7
 80084fa:	1d23      	adds	r3, r4, #4
 80084fc:	1af2      	subs	r2, r6, r3
 80084fe:	d0ae      	beq.n	800845e <_malloc_r+0x22>
 8008500:	1b9b      	subs	r3, r3, r6
 8008502:	50a3      	str	r3, [r4, r2]
 8008504:	e7ab      	b.n	800845e <_malloc_r+0x22>
 8008506:	42a3      	cmp	r3, r4
 8008508:	6862      	ldr	r2, [r4, #4]
 800850a:	d1dd      	bne.n	80084c8 <_malloc_r+0x8c>
 800850c:	f8c8 2000 	str.w	r2, [r8]
 8008510:	e7ec      	b.n	80084ec <_malloc_r+0xb0>
 8008512:	4623      	mov	r3, r4
 8008514:	6864      	ldr	r4, [r4, #4]
 8008516:	e7ac      	b.n	8008472 <_malloc_r+0x36>
 8008518:	4634      	mov	r4, r6
 800851a:	6876      	ldr	r6, [r6, #4]
 800851c:	e7b4      	b.n	8008488 <_malloc_r+0x4c>
 800851e:	4613      	mov	r3, r2
 8008520:	e7cc      	b.n	80084bc <_malloc_r+0x80>
 8008522:	230c      	movs	r3, #12
 8008524:	603b      	str	r3, [r7, #0]
 8008526:	4638      	mov	r0, r7
 8008528:	f000 f80e 	bl	8008548 <__malloc_unlock>
 800852c:	e797      	b.n	800845e <_malloc_r+0x22>
 800852e:	6025      	str	r5, [r4, #0]
 8008530:	e7dc      	b.n	80084ec <_malloc_r+0xb0>
 8008532:	605b      	str	r3, [r3, #4]
 8008534:	deff      	udf	#255	; 0xff
 8008536:	bf00      	nop
 8008538:	20000990 	.word	0x20000990

0800853c <__malloc_lock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_lock+0x8>)
 800853e:	f7ff b886 	b.w	800764e <__retarget_lock_acquire_recursive>
 8008542:	bf00      	nop
 8008544:	2000098c 	.word	0x2000098c

08008548 <__malloc_unlock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_unlock+0x8>)
 800854a:	f7ff b881 	b.w	8007650 <__retarget_lock_release_recursive>
 800854e:	bf00      	nop
 8008550:	2000098c 	.word	0x2000098c

08008554 <_Balloc>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	69c6      	ldr	r6, [r0, #28]
 8008558:	4604      	mov	r4, r0
 800855a:	460d      	mov	r5, r1
 800855c:	b976      	cbnz	r6, 800857c <_Balloc+0x28>
 800855e:	2010      	movs	r0, #16
 8008560:	f7ff ff44 	bl	80083ec <malloc>
 8008564:	4602      	mov	r2, r0
 8008566:	61e0      	str	r0, [r4, #28]
 8008568:	b920      	cbnz	r0, 8008574 <_Balloc+0x20>
 800856a:	4b18      	ldr	r3, [pc, #96]	; (80085cc <_Balloc+0x78>)
 800856c:	4818      	ldr	r0, [pc, #96]	; (80085d0 <_Balloc+0x7c>)
 800856e:	216b      	movs	r1, #107	; 0x6b
 8008570:	f001 ff8a 	bl	800a488 <__assert_func>
 8008574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008578:	6006      	str	r6, [r0, #0]
 800857a:	60c6      	str	r6, [r0, #12]
 800857c:	69e6      	ldr	r6, [r4, #28]
 800857e:	68f3      	ldr	r3, [r6, #12]
 8008580:	b183      	cbz	r3, 80085a4 <_Balloc+0x50>
 8008582:	69e3      	ldr	r3, [r4, #28]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800858a:	b9b8      	cbnz	r0, 80085bc <_Balloc+0x68>
 800858c:	2101      	movs	r1, #1
 800858e:	fa01 f605 	lsl.w	r6, r1, r5
 8008592:	1d72      	adds	r2, r6, #5
 8008594:	0092      	lsls	r2, r2, #2
 8008596:	4620      	mov	r0, r4
 8008598:	f001 ff94 	bl	800a4c4 <_calloc_r>
 800859c:	b160      	cbz	r0, 80085b8 <_Balloc+0x64>
 800859e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085a2:	e00e      	b.n	80085c2 <_Balloc+0x6e>
 80085a4:	2221      	movs	r2, #33	; 0x21
 80085a6:	2104      	movs	r1, #4
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 ff8b 	bl	800a4c4 <_calloc_r>
 80085ae:	69e3      	ldr	r3, [r4, #28]
 80085b0:	60f0      	str	r0, [r6, #12]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e4      	bne.n	8008582 <_Balloc+0x2e>
 80085b8:	2000      	movs	r0, #0
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	6802      	ldr	r2, [r0, #0]
 80085be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085c2:	2300      	movs	r3, #0
 80085c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c8:	e7f7      	b.n	80085ba <_Balloc+0x66>
 80085ca:	bf00      	nop
 80085cc:	0800c37a 	.word	0x0800c37a
 80085d0:	0800c3fa 	.word	0x0800c3fa

080085d4 <_Bfree>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	69c6      	ldr	r6, [r0, #28]
 80085d8:	4605      	mov	r5, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b976      	cbnz	r6, 80085fc <_Bfree+0x28>
 80085de:	2010      	movs	r0, #16
 80085e0:	f7ff ff04 	bl	80083ec <malloc>
 80085e4:	4602      	mov	r2, r0
 80085e6:	61e8      	str	r0, [r5, #28]
 80085e8:	b920      	cbnz	r0, 80085f4 <_Bfree+0x20>
 80085ea:	4b09      	ldr	r3, [pc, #36]	; (8008610 <_Bfree+0x3c>)
 80085ec:	4809      	ldr	r0, [pc, #36]	; (8008614 <_Bfree+0x40>)
 80085ee:	218f      	movs	r1, #143	; 0x8f
 80085f0:	f001 ff4a 	bl	800a488 <__assert_func>
 80085f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f8:	6006      	str	r6, [r0, #0]
 80085fa:	60c6      	str	r6, [r0, #12]
 80085fc:	b13c      	cbz	r4, 800860e <_Bfree+0x3a>
 80085fe:	69eb      	ldr	r3, [r5, #28]
 8008600:	6862      	ldr	r2, [r4, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008608:	6021      	str	r1, [r4, #0]
 800860a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	0800c37a 	.word	0x0800c37a
 8008614:	0800c3fa 	.word	0x0800c3fa

08008618 <__multadd>:
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	690d      	ldr	r5, [r1, #16]
 800861e:	4607      	mov	r7, r0
 8008620:	460c      	mov	r4, r1
 8008622:	461e      	mov	r6, r3
 8008624:	f101 0c14 	add.w	ip, r1, #20
 8008628:	2000      	movs	r0, #0
 800862a:	f8dc 3000 	ldr.w	r3, [ip]
 800862e:	b299      	uxth	r1, r3
 8008630:	fb02 6101 	mla	r1, r2, r1, r6
 8008634:	0c1e      	lsrs	r6, r3, #16
 8008636:	0c0b      	lsrs	r3, r1, #16
 8008638:	fb02 3306 	mla	r3, r2, r6, r3
 800863c:	b289      	uxth	r1, r1
 800863e:	3001      	adds	r0, #1
 8008640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008644:	4285      	cmp	r5, r0
 8008646:	f84c 1b04 	str.w	r1, [ip], #4
 800864a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800864e:	dcec      	bgt.n	800862a <__multadd+0x12>
 8008650:	b30e      	cbz	r6, 8008696 <__multadd+0x7e>
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	42ab      	cmp	r3, r5
 8008656:	dc19      	bgt.n	800868c <__multadd+0x74>
 8008658:	6861      	ldr	r1, [r4, #4]
 800865a:	4638      	mov	r0, r7
 800865c:	3101      	adds	r1, #1
 800865e:	f7ff ff79 	bl	8008554 <_Balloc>
 8008662:	4680      	mov	r8, r0
 8008664:	b928      	cbnz	r0, 8008672 <__multadd+0x5a>
 8008666:	4602      	mov	r2, r0
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <__multadd+0x84>)
 800866a:	480d      	ldr	r0, [pc, #52]	; (80086a0 <__multadd+0x88>)
 800866c:	21ba      	movs	r1, #186	; 0xba
 800866e:	f001 ff0b 	bl	800a488 <__assert_func>
 8008672:	6922      	ldr	r2, [r4, #16]
 8008674:	3202      	adds	r2, #2
 8008676:	f104 010c 	add.w	r1, r4, #12
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	300c      	adds	r0, #12
 800867e:	f001 feeb 	bl	800a458 <memcpy>
 8008682:	4621      	mov	r1, r4
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ffa5 	bl	80085d4 <_Bfree>
 800868a:	4644      	mov	r4, r8
 800868c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008690:	3501      	adds	r5, #1
 8008692:	615e      	str	r6, [r3, #20]
 8008694:	6125      	str	r5, [r4, #16]
 8008696:	4620      	mov	r0, r4
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	0800c3e9 	.word	0x0800c3e9
 80086a0:	0800c3fa 	.word	0x0800c3fa

080086a4 <__s2b>:
 80086a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	460c      	mov	r4, r1
 80086aa:	4615      	mov	r5, r2
 80086ac:	461f      	mov	r7, r3
 80086ae:	2209      	movs	r2, #9
 80086b0:	3308      	adds	r3, #8
 80086b2:	4606      	mov	r6, r0
 80086b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086b8:	2100      	movs	r1, #0
 80086ba:	2201      	movs	r2, #1
 80086bc:	429a      	cmp	r2, r3
 80086be:	db09      	blt.n	80086d4 <__s2b+0x30>
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7ff ff47 	bl	8008554 <_Balloc>
 80086c6:	b940      	cbnz	r0, 80086da <__s2b+0x36>
 80086c8:	4602      	mov	r2, r0
 80086ca:	4b19      	ldr	r3, [pc, #100]	; (8008730 <__s2b+0x8c>)
 80086cc:	4819      	ldr	r0, [pc, #100]	; (8008734 <__s2b+0x90>)
 80086ce:	21d3      	movs	r1, #211	; 0xd3
 80086d0:	f001 feda 	bl	800a488 <__assert_func>
 80086d4:	0052      	lsls	r2, r2, #1
 80086d6:	3101      	adds	r1, #1
 80086d8:	e7f0      	b.n	80086bc <__s2b+0x18>
 80086da:	9b08      	ldr	r3, [sp, #32]
 80086dc:	6143      	str	r3, [r0, #20]
 80086de:	2d09      	cmp	r5, #9
 80086e0:	f04f 0301 	mov.w	r3, #1
 80086e4:	6103      	str	r3, [r0, #16]
 80086e6:	dd16      	ble.n	8008716 <__s2b+0x72>
 80086e8:	f104 0909 	add.w	r9, r4, #9
 80086ec:	46c8      	mov	r8, r9
 80086ee:	442c      	add	r4, r5
 80086f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086f4:	4601      	mov	r1, r0
 80086f6:	3b30      	subs	r3, #48	; 0x30
 80086f8:	220a      	movs	r2, #10
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7ff ff8c 	bl	8008618 <__multadd>
 8008700:	45a0      	cmp	r8, r4
 8008702:	d1f5      	bne.n	80086f0 <__s2b+0x4c>
 8008704:	f1a5 0408 	sub.w	r4, r5, #8
 8008708:	444c      	add	r4, r9
 800870a:	1b2d      	subs	r5, r5, r4
 800870c:	1963      	adds	r3, r4, r5
 800870e:	42bb      	cmp	r3, r7
 8008710:	db04      	blt.n	800871c <__s2b+0x78>
 8008712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008716:	340a      	adds	r4, #10
 8008718:	2509      	movs	r5, #9
 800871a:	e7f6      	b.n	800870a <__s2b+0x66>
 800871c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008720:	4601      	mov	r1, r0
 8008722:	3b30      	subs	r3, #48	; 0x30
 8008724:	220a      	movs	r2, #10
 8008726:	4630      	mov	r0, r6
 8008728:	f7ff ff76 	bl	8008618 <__multadd>
 800872c:	e7ee      	b.n	800870c <__s2b+0x68>
 800872e:	bf00      	nop
 8008730:	0800c3e9 	.word	0x0800c3e9
 8008734:	0800c3fa 	.word	0x0800c3fa

08008738 <__hi0bits>:
 8008738:	0c03      	lsrs	r3, r0, #16
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	b9d3      	cbnz	r3, 8008774 <__hi0bits+0x3c>
 800873e:	0400      	lsls	r0, r0, #16
 8008740:	2310      	movs	r3, #16
 8008742:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008746:	bf04      	itt	eq
 8008748:	0200      	lsleq	r0, r0, #8
 800874a:	3308      	addeq	r3, #8
 800874c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008750:	bf04      	itt	eq
 8008752:	0100      	lsleq	r0, r0, #4
 8008754:	3304      	addeq	r3, #4
 8008756:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800875a:	bf04      	itt	eq
 800875c:	0080      	lsleq	r0, r0, #2
 800875e:	3302      	addeq	r3, #2
 8008760:	2800      	cmp	r0, #0
 8008762:	db05      	blt.n	8008770 <__hi0bits+0x38>
 8008764:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008768:	f103 0301 	add.w	r3, r3, #1
 800876c:	bf08      	it	eq
 800876e:	2320      	moveq	r3, #32
 8008770:	4618      	mov	r0, r3
 8008772:	4770      	bx	lr
 8008774:	2300      	movs	r3, #0
 8008776:	e7e4      	b.n	8008742 <__hi0bits+0xa>

08008778 <__lo0bits>:
 8008778:	6803      	ldr	r3, [r0, #0]
 800877a:	f013 0207 	ands.w	r2, r3, #7
 800877e:	d00c      	beq.n	800879a <__lo0bits+0x22>
 8008780:	07d9      	lsls	r1, r3, #31
 8008782:	d422      	bmi.n	80087ca <__lo0bits+0x52>
 8008784:	079a      	lsls	r2, r3, #30
 8008786:	bf49      	itett	mi
 8008788:	085b      	lsrmi	r3, r3, #1
 800878a:	089b      	lsrpl	r3, r3, #2
 800878c:	6003      	strmi	r3, [r0, #0]
 800878e:	2201      	movmi	r2, #1
 8008790:	bf5c      	itt	pl
 8008792:	6003      	strpl	r3, [r0, #0]
 8008794:	2202      	movpl	r2, #2
 8008796:	4610      	mov	r0, r2
 8008798:	4770      	bx	lr
 800879a:	b299      	uxth	r1, r3
 800879c:	b909      	cbnz	r1, 80087a2 <__lo0bits+0x2a>
 800879e:	0c1b      	lsrs	r3, r3, #16
 80087a0:	2210      	movs	r2, #16
 80087a2:	b2d9      	uxtb	r1, r3
 80087a4:	b909      	cbnz	r1, 80087aa <__lo0bits+0x32>
 80087a6:	3208      	adds	r2, #8
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	0719      	lsls	r1, r3, #28
 80087ac:	bf04      	itt	eq
 80087ae:	091b      	lsreq	r3, r3, #4
 80087b0:	3204      	addeq	r2, #4
 80087b2:	0799      	lsls	r1, r3, #30
 80087b4:	bf04      	itt	eq
 80087b6:	089b      	lsreq	r3, r3, #2
 80087b8:	3202      	addeq	r2, #2
 80087ba:	07d9      	lsls	r1, r3, #31
 80087bc:	d403      	bmi.n	80087c6 <__lo0bits+0x4e>
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	f102 0201 	add.w	r2, r2, #1
 80087c4:	d003      	beq.n	80087ce <__lo0bits+0x56>
 80087c6:	6003      	str	r3, [r0, #0]
 80087c8:	e7e5      	b.n	8008796 <__lo0bits+0x1e>
 80087ca:	2200      	movs	r2, #0
 80087cc:	e7e3      	b.n	8008796 <__lo0bits+0x1e>
 80087ce:	2220      	movs	r2, #32
 80087d0:	e7e1      	b.n	8008796 <__lo0bits+0x1e>
	...

080087d4 <__i2b>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	460c      	mov	r4, r1
 80087d8:	2101      	movs	r1, #1
 80087da:	f7ff febb 	bl	8008554 <_Balloc>
 80087de:	4602      	mov	r2, r0
 80087e0:	b928      	cbnz	r0, 80087ee <__i2b+0x1a>
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <__i2b+0x24>)
 80087e4:	4805      	ldr	r0, [pc, #20]	; (80087fc <__i2b+0x28>)
 80087e6:	f240 1145 	movw	r1, #325	; 0x145
 80087ea:	f001 fe4d 	bl	800a488 <__assert_func>
 80087ee:	2301      	movs	r3, #1
 80087f0:	6144      	str	r4, [r0, #20]
 80087f2:	6103      	str	r3, [r0, #16]
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	0800c3e9 	.word	0x0800c3e9
 80087fc:	0800c3fa 	.word	0x0800c3fa

08008800 <__multiply>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4691      	mov	r9, r2
 8008806:	690a      	ldr	r2, [r1, #16]
 8008808:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800880c:	429a      	cmp	r2, r3
 800880e:	bfb8      	it	lt
 8008810:	460b      	movlt	r3, r1
 8008812:	460c      	mov	r4, r1
 8008814:	bfbc      	itt	lt
 8008816:	464c      	movlt	r4, r9
 8008818:	4699      	movlt	r9, r3
 800881a:	6927      	ldr	r7, [r4, #16]
 800881c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	6861      	ldr	r1, [r4, #4]
 8008824:	eb07 060a 	add.w	r6, r7, sl
 8008828:	42b3      	cmp	r3, r6
 800882a:	b085      	sub	sp, #20
 800882c:	bfb8      	it	lt
 800882e:	3101      	addlt	r1, #1
 8008830:	f7ff fe90 	bl	8008554 <_Balloc>
 8008834:	b930      	cbnz	r0, 8008844 <__multiply+0x44>
 8008836:	4602      	mov	r2, r0
 8008838:	4b44      	ldr	r3, [pc, #272]	; (800894c <__multiply+0x14c>)
 800883a:	4845      	ldr	r0, [pc, #276]	; (8008950 <__multiply+0x150>)
 800883c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008840:	f001 fe22 	bl	800a488 <__assert_func>
 8008844:	f100 0514 	add.w	r5, r0, #20
 8008848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800884c:	462b      	mov	r3, r5
 800884e:	2200      	movs	r2, #0
 8008850:	4543      	cmp	r3, r8
 8008852:	d321      	bcc.n	8008898 <__multiply+0x98>
 8008854:	f104 0314 	add.w	r3, r4, #20
 8008858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800885c:	f109 0314 	add.w	r3, r9, #20
 8008860:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008864:	9202      	str	r2, [sp, #8]
 8008866:	1b3a      	subs	r2, r7, r4
 8008868:	3a15      	subs	r2, #21
 800886a:	f022 0203 	bic.w	r2, r2, #3
 800886e:	3204      	adds	r2, #4
 8008870:	f104 0115 	add.w	r1, r4, #21
 8008874:	428f      	cmp	r7, r1
 8008876:	bf38      	it	cc
 8008878:	2204      	movcc	r2, #4
 800887a:	9201      	str	r2, [sp, #4]
 800887c:	9a02      	ldr	r2, [sp, #8]
 800887e:	9303      	str	r3, [sp, #12]
 8008880:	429a      	cmp	r2, r3
 8008882:	d80c      	bhi.n	800889e <__multiply+0x9e>
 8008884:	2e00      	cmp	r6, #0
 8008886:	dd03      	ble.n	8008890 <__multiply+0x90>
 8008888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05b      	beq.n	8008948 <__multiply+0x148>
 8008890:	6106      	str	r6, [r0, #16]
 8008892:	b005      	add	sp, #20
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	f843 2b04 	str.w	r2, [r3], #4
 800889c:	e7d8      	b.n	8008850 <__multiply+0x50>
 800889e:	f8b3 a000 	ldrh.w	sl, [r3]
 80088a2:	f1ba 0f00 	cmp.w	sl, #0
 80088a6:	d024      	beq.n	80088f2 <__multiply+0xf2>
 80088a8:	f104 0e14 	add.w	lr, r4, #20
 80088ac:	46a9      	mov	r9, r5
 80088ae:	f04f 0c00 	mov.w	ip, #0
 80088b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088b6:	f8d9 1000 	ldr.w	r1, [r9]
 80088ba:	fa1f fb82 	uxth.w	fp, r2
 80088be:	b289      	uxth	r1, r1
 80088c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80088c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088c8:	f8d9 2000 	ldr.w	r2, [r9]
 80088cc:	4461      	add	r1, ip
 80088ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80088d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088da:	b289      	uxth	r1, r1
 80088dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088e0:	4577      	cmp	r7, lr
 80088e2:	f849 1b04 	str.w	r1, [r9], #4
 80088e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ea:	d8e2      	bhi.n	80088b2 <__multiply+0xb2>
 80088ec:	9a01      	ldr	r2, [sp, #4]
 80088ee:	f845 c002 	str.w	ip, [r5, r2]
 80088f2:	9a03      	ldr	r2, [sp, #12]
 80088f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088f8:	3304      	adds	r3, #4
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	d021      	beq.n	8008944 <__multiply+0x144>
 8008900:	6829      	ldr	r1, [r5, #0]
 8008902:	f104 0c14 	add.w	ip, r4, #20
 8008906:	46ae      	mov	lr, r5
 8008908:	f04f 0a00 	mov.w	sl, #0
 800890c:	f8bc b000 	ldrh.w	fp, [ip]
 8008910:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008914:	fb09 220b 	mla	r2, r9, fp, r2
 8008918:	4452      	add	r2, sl
 800891a:	b289      	uxth	r1, r1
 800891c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008920:	f84e 1b04 	str.w	r1, [lr], #4
 8008924:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008928:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800892c:	f8be 1000 	ldrh.w	r1, [lr]
 8008930:	fb09 110a 	mla	r1, r9, sl, r1
 8008934:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008938:	4567      	cmp	r7, ip
 800893a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800893e:	d8e5      	bhi.n	800890c <__multiply+0x10c>
 8008940:	9a01      	ldr	r2, [sp, #4]
 8008942:	50a9      	str	r1, [r5, r2]
 8008944:	3504      	adds	r5, #4
 8008946:	e799      	b.n	800887c <__multiply+0x7c>
 8008948:	3e01      	subs	r6, #1
 800894a:	e79b      	b.n	8008884 <__multiply+0x84>
 800894c:	0800c3e9 	.word	0x0800c3e9
 8008950:	0800c3fa 	.word	0x0800c3fa

08008954 <__pow5mult>:
 8008954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008958:	4615      	mov	r5, r2
 800895a:	f012 0203 	ands.w	r2, r2, #3
 800895e:	4606      	mov	r6, r0
 8008960:	460f      	mov	r7, r1
 8008962:	d007      	beq.n	8008974 <__pow5mult+0x20>
 8008964:	4c25      	ldr	r4, [pc, #148]	; (80089fc <__pow5mult+0xa8>)
 8008966:	3a01      	subs	r2, #1
 8008968:	2300      	movs	r3, #0
 800896a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800896e:	f7ff fe53 	bl	8008618 <__multadd>
 8008972:	4607      	mov	r7, r0
 8008974:	10ad      	asrs	r5, r5, #2
 8008976:	d03d      	beq.n	80089f4 <__pow5mult+0xa0>
 8008978:	69f4      	ldr	r4, [r6, #28]
 800897a:	b97c      	cbnz	r4, 800899c <__pow5mult+0x48>
 800897c:	2010      	movs	r0, #16
 800897e:	f7ff fd35 	bl	80083ec <malloc>
 8008982:	4602      	mov	r2, r0
 8008984:	61f0      	str	r0, [r6, #28]
 8008986:	b928      	cbnz	r0, 8008994 <__pow5mult+0x40>
 8008988:	4b1d      	ldr	r3, [pc, #116]	; (8008a00 <__pow5mult+0xac>)
 800898a:	481e      	ldr	r0, [pc, #120]	; (8008a04 <__pow5mult+0xb0>)
 800898c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008990:	f001 fd7a 	bl	800a488 <__assert_func>
 8008994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008998:	6004      	str	r4, [r0, #0]
 800899a:	60c4      	str	r4, [r0, #12]
 800899c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80089a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089a4:	b94c      	cbnz	r4, 80089ba <__pow5mult+0x66>
 80089a6:	f240 2171 	movw	r1, #625	; 0x271
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff12 	bl	80087d4 <__i2b>
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089b6:	4604      	mov	r4, r0
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	f04f 0900 	mov.w	r9, #0
 80089be:	07eb      	lsls	r3, r5, #31
 80089c0:	d50a      	bpl.n	80089d8 <__pow5mult+0x84>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4622      	mov	r2, r4
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ff1a 	bl	8008800 <__multiply>
 80089cc:	4639      	mov	r1, r7
 80089ce:	4680      	mov	r8, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff fdff 	bl	80085d4 <_Bfree>
 80089d6:	4647      	mov	r7, r8
 80089d8:	106d      	asrs	r5, r5, #1
 80089da:	d00b      	beq.n	80089f4 <__pow5mult+0xa0>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	b938      	cbnz	r0, 80089f0 <__pow5mult+0x9c>
 80089e0:	4622      	mov	r2, r4
 80089e2:	4621      	mov	r1, r4
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff ff0b 	bl	8008800 <__multiply>
 80089ea:	6020      	str	r0, [r4, #0]
 80089ec:	f8c0 9000 	str.w	r9, [r0]
 80089f0:	4604      	mov	r4, r0
 80089f2:	e7e4      	b.n	80089be <__pow5mult+0x6a>
 80089f4:	4638      	mov	r0, r7
 80089f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fa:	bf00      	nop
 80089fc:	0800c548 	.word	0x0800c548
 8008a00:	0800c37a 	.word	0x0800c37a
 8008a04:	0800c3fa 	.word	0x0800c3fa

08008a08 <__lshift>:
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	6849      	ldr	r1, [r1, #4]
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a20:	f108 0601 	add.w	r6, r8, #1
 8008a24:	42b3      	cmp	r3, r6
 8008a26:	db0b      	blt.n	8008a40 <__lshift+0x38>
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff fd93 	bl	8008554 <_Balloc>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b948      	cbnz	r0, 8008a46 <__lshift+0x3e>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4b28      	ldr	r3, [pc, #160]	; (8008ad8 <__lshift+0xd0>)
 8008a36:	4829      	ldr	r0, [pc, #164]	; (8008adc <__lshift+0xd4>)
 8008a38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a3c:	f001 fd24 	bl	800a488 <__assert_func>
 8008a40:	3101      	adds	r1, #1
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	e7ee      	b.n	8008a24 <__lshift+0x1c>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f100 0114 	add.w	r1, r0, #20
 8008a4c:	f100 0210 	add.w	r2, r0, #16
 8008a50:	4618      	mov	r0, r3
 8008a52:	4553      	cmp	r3, sl
 8008a54:	db33      	blt.n	8008abe <__lshift+0xb6>
 8008a56:	6920      	ldr	r0, [r4, #16]
 8008a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a5c:	f104 0314 	add.w	r3, r4, #20
 8008a60:	f019 091f 	ands.w	r9, r9, #31
 8008a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a6c:	d02b      	beq.n	8008ac6 <__lshift+0xbe>
 8008a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a72:	468a      	mov	sl, r1
 8008a74:	2200      	movs	r2, #0
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	fa00 f009 	lsl.w	r0, r0, r9
 8008a7c:	4310      	orrs	r0, r2
 8008a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a86:	459c      	cmp	ip, r3
 8008a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a8c:	d8f3      	bhi.n	8008a76 <__lshift+0x6e>
 8008a8e:	ebac 0304 	sub.w	r3, ip, r4
 8008a92:	3b15      	subs	r3, #21
 8008a94:	f023 0303 	bic.w	r3, r3, #3
 8008a98:	3304      	adds	r3, #4
 8008a9a:	f104 0015 	add.w	r0, r4, #21
 8008a9e:	4584      	cmp	ip, r0
 8008aa0:	bf38      	it	cc
 8008aa2:	2304      	movcc	r3, #4
 8008aa4:	50ca      	str	r2, [r1, r3]
 8008aa6:	b10a      	cbz	r2, 8008aac <__lshift+0xa4>
 8008aa8:	f108 0602 	add.w	r6, r8, #2
 8008aac:	3e01      	subs	r6, #1
 8008aae:	4638      	mov	r0, r7
 8008ab0:	612e      	str	r6, [r5, #16]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f7ff fd8e 	bl	80085d4 <_Bfree>
 8008ab8:	4628      	mov	r0, r5
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	e7c5      	b.n	8008a52 <__lshift+0x4a>
 8008ac6:	3904      	subs	r1, #4
 8008ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ad0:	459c      	cmp	ip, r3
 8008ad2:	d8f9      	bhi.n	8008ac8 <__lshift+0xc0>
 8008ad4:	e7ea      	b.n	8008aac <__lshift+0xa4>
 8008ad6:	bf00      	nop
 8008ad8:	0800c3e9 	.word	0x0800c3e9
 8008adc:	0800c3fa 	.word	0x0800c3fa

08008ae0 <__mcmp>:
 8008ae0:	b530      	push	{r4, r5, lr}
 8008ae2:	6902      	ldr	r2, [r0, #16]
 8008ae4:	690c      	ldr	r4, [r1, #16]
 8008ae6:	1b12      	subs	r2, r2, r4
 8008ae8:	d10e      	bne.n	8008b08 <__mcmp+0x28>
 8008aea:	f100 0314 	add.w	r3, r0, #20
 8008aee:	3114      	adds	r1, #20
 8008af0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008af4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008af8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008afc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b00:	42a5      	cmp	r5, r4
 8008b02:	d003      	beq.n	8008b0c <__mcmp+0x2c>
 8008b04:	d305      	bcc.n	8008b12 <__mcmp+0x32>
 8008b06:	2201      	movs	r2, #1
 8008b08:	4610      	mov	r0, r2
 8008b0a:	bd30      	pop	{r4, r5, pc}
 8008b0c:	4283      	cmp	r3, r0
 8008b0e:	d3f3      	bcc.n	8008af8 <__mcmp+0x18>
 8008b10:	e7fa      	b.n	8008b08 <__mcmp+0x28>
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	e7f7      	b.n	8008b08 <__mcmp+0x28>

08008b18 <__mdiff>:
 8008b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	4606      	mov	r6, r0
 8008b20:	4611      	mov	r1, r2
 8008b22:	4620      	mov	r0, r4
 8008b24:	4690      	mov	r8, r2
 8008b26:	f7ff ffdb 	bl	8008ae0 <__mcmp>
 8008b2a:	1e05      	subs	r5, r0, #0
 8008b2c:	d110      	bne.n	8008b50 <__mdiff+0x38>
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff fd0f 	bl	8008554 <_Balloc>
 8008b36:	b930      	cbnz	r0, 8008b46 <__mdiff+0x2e>
 8008b38:	4b3a      	ldr	r3, [pc, #232]	; (8008c24 <__mdiff+0x10c>)
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	f240 2137 	movw	r1, #567	; 0x237
 8008b40:	4839      	ldr	r0, [pc, #228]	; (8008c28 <__mdiff+0x110>)
 8008b42:	f001 fca1 	bl	800a488 <__assert_func>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	bfa4      	itt	ge
 8008b52:	4643      	movge	r3, r8
 8008b54:	46a0      	movge	r8, r4
 8008b56:	4630      	mov	r0, r6
 8008b58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b5c:	bfa6      	itte	ge
 8008b5e:	461c      	movge	r4, r3
 8008b60:	2500      	movge	r5, #0
 8008b62:	2501      	movlt	r5, #1
 8008b64:	f7ff fcf6 	bl	8008554 <_Balloc>
 8008b68:	b920      	cbnz	r0, 8008b74 <__mdiff+0x5c>
 8008b6a:	4b2e      	ldr	r3, [pc, #184]	; (8008c24 <__mdiff+0x10c>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f240 2145 	movw	r1, #581	; 0x245
 8008b72:	e7e5      	b.n	8008b40 <__mdiff+0x28>
 8008b74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b78:	6926      	ldr	r6, [r4, #16]
 8008b7a:	60c5      	str	r5, [r0, #12]
 8008b7c:	f104 0914 	add.w	r9, r4, #20
 8008b80:	f108 0514 	add.w	r5, r8, #20
 8008b84:	f100 0e14 	add.w	lr, r0, #20
 8008b88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b90:	f108 0210 	add.w	r2, r8, #16
 8008b94:	46f2      	mov	sl, lr
 8008b96:	2100      	movs	r1, #0
 8008b98:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ba0:	fa11 f88b 	uxtah	r8, r1, fp
 8008ba4:	b299      	uxth	r1, r3
 8008ba6:	0c1b      	lsrs	r3, r3, #16
 8008ba8:	eba8 0801 	sub.w	r8, r8, r1
 8008bac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bb4:	fa1f f888 	uxth.w	r8, r8
 8008bb8:	1419      	asrs	r1, r3, #16
 8008bba:	454e      	cmp	r6, r9
 8008bbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bc0:	f84a 3b04 	str.w	r3, [sl], #4
 8008bc4:	d8e8      	bhi.n	8008b98 <__mdiff+0x80>
 8008bc6:	1b33      	subs	r3, r6, r4
 8008bc8:	3b15      	subs	r3, #21
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	3304      	adds	r3, #4
 8008bd0:	3415      	adds	r4, #21
 8008bd2:	42a6      	cmp	r6, r4
 8008bd4:	bf38      	it	cc
 8008bd6:	2304      	movcc	r3, #4
 8008bd8:	441d      	add	r5, r3
 8008bda:	4473      	add	r3, lr
 8008bdc:	469e      	mov	lr, r3
 8008bde:	462e      	mov	r6, r5
 8008be0:	4566      	cmp	r6, ip
 8008be2:	d30e      	bcc.n	8008c02 <__mdiff+0xea>
 8008be4:	f10c 0203 	add.w	r2, ip, #3
 8008be8:	1b52      	subs	r2, r2, r5
 8008bea:	f022 0203 	bic.w	r2, r2, #3
 8008bee:	3d03      	subs	r5, #3
 8008bf0:	45ac      	cmp	ip, r5
 8008bf2:	bf38      	it	cc
 8008bf4:	2200      	movcc	r2, #0
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008bfc:	b17a      	cbz	r2, 8008c1e <__mdiff+0x106>
 8008bfe:	6107      	str	r7, [r0, #16]
 8008c00:	e7a4      	b.n	8008b4c <__mdiff+0x34>
 8008c02:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c06:	fa11 f288 	uxtah	r2, r1, r8
 8008c0a:	1414      	asrs	r4, r2, #16
 8008c0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c10:	b292      	uxth	r2, r2
 8008c12:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c16:	f84e 2b04 	str.w	r2, [lr], #4
 8008c1a:	1421      	asrs	r1, r4, #16
 8008c1c:	e7e0      	b.n	8008be0 <__mdiff+0xc8>
 8008c1e:	3f01      	subs	r7, #1
 8008c20:	e7ea      	b.n	8008bf8 <__mdiff+0xe0>
 8008c22:	bf00      	nop
 8008c24:	0800c3e9 	.word	0x0800c3e9
 8008c28:	0800c3fa 	.word	0x0800c3fa

08008c2c <__ulp>:
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	ed8d 0b00 	vstr	d0, [sp]
 8008c32:	9a01      	ldr	r2, [sp, #4]
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <__ulp+0x48>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc08      	bgt.n	8008c52 <__ulp+0x26>
 8008c40:	425b      	negs	r3, r3
 8008c42:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008c46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c4a:	da04      	bge.n	8008c56 <__ulp+0x2a>
 8008c4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c50:	4113      	asrs	r3, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	e008      	b.n	8008c68 <__ulp+0x3c>
 8008c56:	f1a2 0314 	sub.w	r3, r2, #20
 8008c5a:	2b1e      	cmp	r3, #30
 8008c5c:	bfda      	itte	le
 8008c5e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008c62:	40da      	lsrle	r2, r3
 8008c64:	2201      	movgt	r2, #1
 8008c66:	2300      	movs	r3, #0
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	ec41 0b10 	vmov	d0, r0, r1
 8008c70:	b002      	add	sp, #8
 8008c72:	4770      	bx	lr
 8008c74:	7ff00000 	.word	0x7ff00000

08008c78 <__b2d>:
 8008c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7c:	6906      	ldr	r6, [r0, #16]
 8008c7e:	f100 0814 	add.w	r8, r0, #20
 8008c82:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c86:	1f37      	subs	r7, r6, #4
 8008c88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f7ff fd53 	bl	8008738 <__hi0bits>
 8008c92:	f1c0 0320 	rsb	r3, r0, #32
 8008c96:	280a      	cmp	r0, #10
 8008c98:	600b      	str	r3, [r1, #0]
 8008c9a:	491b      	ldr	r1, [pc, #108]	; (8008d08 <__b2d+0x90>)
 8008c9c:	dc15      	bgt.n	8008cca <__b2d+0x52>
 8008c9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ca2:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ca6:	45b8      	cmp	r8, r7
 8008ca8:	ea43 0501 	orr.w	r5, r3, r1
 8008cac:	bf34      	ite	cc
 8008cae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cb2:	2300      	movcs	r3, #0
 8008cb4:	3015      	adds	r0, #21
 8008cb6:	fa02 f000 	lsl.w	r0, r2, r0
 8008cba:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cbe:	4303      	orrs	r3, r0
 8008cc0:	461c      	mov	r4, r3
 8008cc2:	ec45 4b10 	vmov	d0, r4, r5
 8008cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cca:	45b8      	cmp	r8, r7
 8008ccc:	bf3a      	itte	cc
 8008cce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cd2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008cd6:	2300      	movcs	r3, #0
 8008cd8:	380b      	subs	r0, #11
 8008cda:	d012      	beq.n	8008d02 <__b2d+0x8a>
 8008cdc:	f1c0 0120 	rsb	r1, r0, #32
 8008ce0:	fa23 f401 	lsr.w	r4, r3, r1
 8008ce4:	4082      	lsls	r2, r0
 8008ce6:	4322      	orrs	r2, r4
 8008ce8:	4547      	cmp	r7, r8
 8008cea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008cee:	bf8c      	ite	hi
 8008cf0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008cf4:	2200      	movls	r2, #0
 8008cf6:	4083      	lsls	r3, r0
 8008cf8:	40ca      	lsrs	r2, r1
 8008cfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	e7de      	b.n	8008cc0 <__b2d+0x48>
 8008d02:	ea42 0501 	orr.w	r5, r2, r1
 8008d06:	e7db      	b.n	8008cc0 <__b2d+0x48>
 8008d08:	3ff00000 	.word	0x3ff00000

08008d0c <__d2b>:
 8008d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	460f      	mov	r7, r1
 8008d12:	2101      	movs	r1, #1
 8008d14:	ec59 8b10 	vmov	r8, r9, d0
 8008d18:	4616      	mov	r6, r2
 8008d1a:	f7ff fc1b 	bl	8008554 <_Balloc>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b930      	cbnz	r0, 8008d30 <__d2b+0x24>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <__d2b+0xac>)
 8008d26:	4825      	ldr	r0, [pc, #148]	; (8008dbc <__d2b+0xb0>)
 8008d28:	f240 310f 	movw	r1, #783	; 0x30f
 8008d2c:	f001 fbac 	bl	800a488 <__assert_func>
 8008d30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d38:	bb2d      	cbnz	r5, 8008d86 <__d2b+0x7a>
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d40:	d026      	beq.n	8008d90 <__d2b+0x84>
 8008d42:	4668      	mov	r0, sp
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	f7ff fd17 	bl	8008778 <__lo0bits>
 8008d4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d4e:	b1e8      	cbz	r0, 8008d8c <__d2b+0x80>
 8008d50:	f1c0 0320 	rsb	r3, r0, #32
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	40c2      	lsrs	r2, r0
 8008d5c:	6163      	str	r3, [r4, #20]
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	61a3      	str	r3, [r4, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf14      	ite	ne
 8008d68:	2202      	movne	r2, #2
 8008d6a:	2201      	moveq	r2, #1
 8008d6c:	6122      	str	r2, [r4, #16]
 8008d6e:	b1bd      	cbz	r5, 8008da0 <__d2b+0x94>
 8008d70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d74:	4405      	add	r5, r0
 8008d76:	603d      	str	r5, [r7, #0]
 8008d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d7c:	6030      	str	r0, [r6, #0]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	b003      	add	sp, #12
 8008d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8a:	e7d6      	b.n	8008d3a <__d2b+0x2e>
 8008d8c:	6161      	str	r1, [r4, #20]
 8008d8e:	e7e7      	b.n	8008d60 <__d2b+0x54>
 8008d90:	a801      	add	r0, sp, #4
 8008d92:	f7ff fcf1 	bl	8008778 <__lo0bits>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	6163      	str	r3, [r4, #20]
 8008d9a:	3020      	adds	r0, #32
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	e7e5      	b.n	8008d6c <__d2b+0x60>
 8008da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008da8:	6038      	str	r0, [r7, #0]
 8008daa:	6918      	ldr	r0, [r3, #16]
 8008dac:	f7ff fcc4 	bl	8008738 <__hi0bits>
 8008db0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008db4:	e7e2      	b.n	8008d7c <__d2b+0x70>
 8008db6:	bf00      	nop
 8008db8:	0800c3e9 	.word	0x0800c3e9
 8008dbc:	0800c3fa 	.word	0x0800c3fa

08008dc0 <__ratio>:
 8008dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4688      	mov	r8, r1
 8008dc6:	4669      	mov	r1, sp
 8008dc8:	4681      	mov	r9, r0
 8008dca:	f7ff ff55 	bl	8008c78 <__b2d>
 8008dce:	a901      	add	r1, sp, #4
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	ec55 4b10 	vmov	r4, r5, d0
 8008dd6:	f7ff ff4f 	bl	8008c78 <__b2d>
 8008dda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008de2:	eba3 0c02 	sub.w	ip, r3, r2
 8008de6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008df0:	ec51 0b10 	vmov	r0, r1, d0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfd6      	itet	le
 8008df8:	460a      	movle	r2, r1
 8008dfa:	462a      	movgt	r2, r5
 8008dfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e00:	468b      	mov	fp, r1
 8008e02:	462f      	mov	r7, r5
 8008e04:	bfd4      	ite	le
 8008e06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e0e:	4620      	mov	r0, r4
 8008e10:	ee10 2a10 	vmov	r2, s0
 8008e14:	465b      	mov	r3, fp
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fd40 	bl	800089c <__aeabi_ddiv>
 8008e1c:	ec41 0b10 	vmov	d0, r0, r1
 8008e20:	b003      	add	sp, #12
 8008e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e26 <__copybits>:
 8008e26:	3901      	subs	r1, #1
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	1149      	asrs	r1, r1, #5
 8008e2c:	6914      	ldr	r4, [r2, #16]
 8008e2e:	3101      	adds	r1, #1
 8008e30:	f102 0314 	add.w	r3, r2, #20
 8008e34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e3c:	1f05      	subs	r5, r0, #4
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	d30c      	bcc.n	8008e5c <__copybits+0x36>
 8008e42:	1aa3      	subs	r3, r4, r2
 8008e44:	3b11      	subs	r3, #17
 8008e46:	f023 0303 	bic.w	r3, r3, #3
 8008e4a:	3211      	adds	r2, #17
 8008e4c:	42a2      	cmp	r2, r4
 8008e4e:	bf88      	it	hi
 8008e50:	2300      	movhi	r3, #0
 8008e52:	4418      	add	r0, r3
 8008e54:	2300      	movs	r3, #0
 8008e56:	4288      	cmp	r0, r1
 8008e58:	d305      	bcc.n	8008e66 <__copybits+0x40>
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e60:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e64:	e7eb      	b.n	8008e3e <__copybits+0x18>
 8008e66:	f840 3b04 	str.w	r3, [r0], #4
 8008e6a:	e7f4      	b.n	8008e56 <__copybits+0x30>

08008e6c <__any_on>:
 8008e6c:	f100 0214 	add.w	r2, r0, #20
 8008e70:	6900      	ldr	r0, [r0, #16]
 8008e72:	114b      	asrs	r3, r1, #5
 8008e74:	4298      	cmp	r0, r3
 8008e76:	b510      	push	{r4, lr}
 8008e78:	db11      	blt.n	8008e9e <__any_on+0x32>
 8008e7a:	dd0a      	ble.n	8008e92 <__any_on+0x26>
 8008e7c:	f011 011f 	ands.w	r1, r1, #31
 8008e80:	d007      	beq.n	8008e92 <__any_on+0x26>
 8008e82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e86:	fa24 f001 	lsr.w	r0, r4, r1
 8008e8a:	fa00 f101 	lsl.w	r1, r0, r1
 8008e8e:	428c      	cmp	r4, r1
 8008e90:	d10b      	bne.n	8008eaa <__any_on+0x3e>
 8008e92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d803      	bhi.n	8008ea2 <__any_on+0x36>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	e7f7      	b.n	8008e92 <__any_on+0x26>
 8008ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d0f5      	beq.n	8008e96 <__any_on+0x2a>
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7f6      	b.n	8008e9c <__any_on+0x30>

08008eae <sulp>:
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	ec45 4b10 	vmov	d0, r4, r5
 8008eb8:	4616      	mov	r6, r2
 8008eba:	f7ff feb7 	bl	8008c2c <__ulp>
 8008ebe:	ec51 0b10 	vmov	r0, r1, d0
 8008ec2:	b17e      	cbz	r6, 8008ee4 <sulp+0x36>
 8008ec4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ec8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dd09      	ble.n	8008ee4 <sulp+0x36>
 8008ed0:	051b      	lsls	r3, r3, #20
 8008ed2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ed6:	2400      	movs	r4, #0
 8008ed8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008edc:	4622      	mov	r2, r4
 8008ede:	462b      	mov	r3, r5
 8008ee0:	f7f7 fbb2 	bl	8000648 <__aeabi_dmul>
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ee8 <_strtod_l>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ed2d 8b02 	vpush	{d8}
 8008ef0:	b09b      	sub	sp, #108	; 0x6c
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	9216      	str	r2, [sp, #88]	; 0x58
 8008efa:	460d      	mov	r5, r1
 8008efc:	f04f 0800 	mov.w	r8, #0
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	460a      	mov	r2, r1
 8008f06:	9215      	str	r2, [sp, #84]	; 0x54
 8008f08:	7811      	ldrb	r1, [r2, #0]
 8008f0a:	292b      	cmp	r1, #43	; 0x2b
 8008f0c:	d04c      	beq.n	8008fa8 <_strtod_l+0xc0>
 8008f0e:	d83a      	bhi.n	8008f86 <_strtod_l+0x9e>
 8008f10:	290d      	cmp	r1, #13
 8008f12:	d834      	bhi.n	8008f7e <_strtod_l+0x96>
 8008f14:	2908      	cmp	r1, #8
 8008f16:	d834      	bhi.n	8008f82 <_strtod_l+0x9a>
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d03d      	beq.n	8008f98 <_strtod_l+0xb0>
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	920a      	str	r2, [sp, #40]	; 0x28
 8008f20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008f22:	7832      	ldrb	r2, [r6, #0]
 8008f24:	2a30      	cmp	r2, #48	; 0x30
 8008f26:	f040 80b4 	bne.w	8009092 <_strtod_l+0x1aa>
 8008f2a:	7872      	ldrb	r2, [r6, #1]
 8008f2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008f30:	2a58      	cmp	r2, #88	; 0x58
 8008f32:	d170      	bne.n	8009016 <_strtod_l+0x12e>
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	ab16      	add	r3, sp, #88	; 0x58
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	4a8e      	ldr	r2, [pc, #568]	; (8009178 <_strtod_l+0x290>)
 8008f40:	ab17      	add	r3, sp, #92	; 0x5c
 8008f42:	a915      	add	r1, sp, #84	; 0x54
 8008f44:	4620      	mov	r0, r4
 8008f46:	f001 fb3b 	bl	800a5c0 <__gethex>
 8008f4a:	f010 070f 	ands.w	r7, r0, #15
 8008f4e:	4605      	mov	r5, r0
 8008f50:	d005      	beq.n	8008f5e <_strtod_l+0x76>
 8008f52:	2f06      	cmp	r7, #6
 8008f54:	d12a      	bne.n	8008fac <_strtod_l+0xc4>
 8008f56:	3601      	adds	r6, #1
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9615      	str	r6, [sp, #84]	; 0x54
 8008f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f040 857f 	bne.w	8009a64 <_strtod_l+0xb7c>
 8008f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f68:	b1db      	cbz	r3, 8008fa2 <_strtod_l+0xba>
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f70:	ec43 2b10 	vmov	d0, r2, r3
 8008f74:	b01b      	add	sp, #108	; 0x6c
 8008f76:	ecbd 8b02 	vpop	{d8}
 8008f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7e:	2920      	cmp	r1, #32
 8008f80:	d1cc      	bne.n	8008f1c <_strtod_l+0x34>
 8008f82:	3201      	adds	r2, #1
 8008f84:	e7bf      	b.n	8008f06 <_strtod_l+0x1e>
 8008f86:	292d      	cmp	r1, #45	; 0x2d
 8008f88:	d1c8      	bne.n	8008f1c <_strtod_l+0x34>
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	910a      	str	r1, [sp, #40]	; 0x28
 8008f8e:	1c51      	adds	r1, r2, #1
 8008f90:	9115      	str	r1, [sp, #84]	; 0x54
 8008f92:	7852      	ldrb	r2, [r2, #1]
 8008f94:	2a00      	cmp	r2, #0
 8008f96:	d1c3      	bne.n	8008f20 <_strtod_l+0x38>
 8008f98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f9a:	9515      	str	r5, [sp, #84]	; 0x54
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 855f 	bne.w	8009a60 <_strtod_l+0xb78>
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	e7e3      	b.n	8008f70 <_strtod_l+0x88>
 8008fa8:	2100      	movs	r1, #0
 8008faa:	e7ef      	b.n	8008f8c <_strtod_l+0xa4>
 8008fac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fae:	b13a      	cbz	r2, 8008fc0 <_strtod_l+0xd8>
 8008fb0:	2135      	movs	r1, #53	; 0x35
 8008fb2:	a818      	add	r0, sp, #96	; 0x60
 8008fb4:	f7ff ff37 	bl	8008e26 <__copybits>
 8008fb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff fb0a 	bl	80085d4 <_Bfree>
 8008fc0:	3f01      	subs	r7, #1
 8008fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fc4:	2f04      	cmp	r7, #4
 8008fc6:	d806      	bhi.n	8008fd6 <_strtod_l+0xee>
 8008fc8:	e8df f007 	tbb	[pc, r7]
 8008fcc:	201d0314 	.word	0x201d0314
 8008fd0:	14          	.byte	0x14
 8008fd1:	00          	.byte	0x00
 8008fd2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008fd6:	05e9      	lsls	r1, r5, #23
 8008fd8:	bf48      	it	mi
 8008fda:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fe2:	0d1b      	lsrs	r3, r3, #20
 8008fe4:	051b      	lsls	r3, r3, #20
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1b9      	bne.n	8008f5e <_strtod_l+0x76>
 8008fea:	f7fe fb05 	bl	80075f8 <__errno>
 8008fee:	2322      	movs	r3, #34	; 0x22
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	e7b4      	b.n	8008f5e <_strtod_l+0x76>
 8008ff4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008ff8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ffc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009000:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009004:	e7e7      	b.n	8008fd6 <_strtod_l+0xee>
 8009006:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009180 <_strtod_l+0x298>
 800900a:	e7e4      	b.n	8008fd6 <_strtod_l+0xee>
 800900c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009010:	f04f 38ff 	mov.w	r8, #4294967295
 8009014:	e7df      	b.n	8008fd6 <_strtod_l+0xee>
 8009016:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	9215      	str	r2, [sp, #84]	; 0x54
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b30      	cmp	r3, #48	; 0x30
 8009020:	d0f9      	beq.n	8009016 <_strtod_l+0x12e>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d09b      	beq.n	8008f5e <_strtod_l+0x76>
 8009026:	2301      	movs	r3, #1
 8009028:	f04f 0a00 	mov.w	sl, #0
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009030:	930b      	str	r3, [sp, #44]	; 0x2c
 8009032:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009036:	46d3      	mov	fp, sl
 8009038:	220a      	movs	r2, #10
 800903a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800903c:	7806      	ldrb	r6, [r0, #0]
 800903e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009042:	b2d9      	uxtb	r1, r3
 8009044:	2909      	cmp	r1, #9
 8009046:	d926      	bls.n	8009096 <_strtod_l+0x1ae>
 8009048:	494c      	ldr	r1, [pc, #304]	; (800917c <_strtod_l+0x294>)
 800904a:	2201      	movs	r2, #1
 800904c:	f001 f9c0 	bl	800a3d0 <strncmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	d030      	beq.n	80090b6 <_strtod_l+0x1ce>
 8009054:	2000      	movs	r0, #0
 8009056:	4632      	mov	r2, r6
 8009058:	9005      	str	r0, [sp, #20]
 800905a:	465e      	mov	r6, fp
 800905c:	4603      	mov	r3, r0
 800905e:	2a65      	cmp	r2, #101	; 0x65
 8009060:	d001      	beq.n	8009066 <_strtod_l+0x17e>
 8009062:	2a45      	cmp	r2, #69	; 0x45
 8009064:	d113      	bne.n	800908e <_strtod_l+0x1a6>
 8009066:	b91e      	cbnz	r6, 8009070 <_strtod_l+0x188>
 8009068:	9a04      	ldr	r2, [sp, #16]
 800906a:	4302      	orrs	r2, r0
 800906c:	d094      	beq.n	8008f98 <_strtod_l+0xb0>
 800906e:	2600      	movs	r6, #0
 8009070:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009072:	1c6a      	adds	r2, r5, #1
 8009074:	9215      	str	r2, [sp, #84]	; 0x54
 8009076:	786a      	ldrb	r2, [r5, #1]
 8009078:	2a2b      	cmp	r2, #43	; 0x2b
 800907a:	d074      	beq.n	8009166 <_strtod_l+0x27e>
 800907c:	2a2d      	cmp	r2, #45	; 0x2d
 800907e:	d078      	beq.n	8009172 <_strtod_l+0x28a>
 8009080:	f04f 0c00 	mov.w	ip, #0
 8009084:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009088:	2909      	cmp	r1, #9
 800908a:	d97f      	bls.n	800918c <_strtod_l+0x2a4>
 800908c:	9515      	str	r5, [sp, #84]	; 0x54
 800908e:	2700      	movs	r7, #0
 8009090:	e09e      	b.n	80091d0 <_strtod_l+0x2e8>
 8009092:	2300      	movs	r3, #0
 8009094:	e7c8      	b.n	8009028 <_strtod_l+0x140>
 8009096:	f1bb 0f08 	cmp.w	fp, #8
 800909a:	bfd8      	it	le
 800909c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800909e:	f100 0001 	add.w	r0, r0, #1
 80090a2:	bfda      	itte	le
 80090a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80090a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80090aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80090ae:	f10b 0b01 	add.w	fp, fp, #1
 80090b2:	9015      	str	r0, [sp, #84]	; 0x54
 80090b4:	e7c1      	b.n	800903a <_strtod_l+0x152>
 80090b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	9215      	str	r2, [sp, #84]	; 0x54
 80090bc:	785a      	ldrb	r2, [r3, #1]
 80090be:	f1bb 0f00 	cmp.w	fp, #0
 80090c2:	d037      	beq.n	8009134 <_strtod_l+0x24c>
 80090c4:	9005      	str	r0, [sp, #20]
 80090c6:	465e      	mov	r6, fp
 80090c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80090cc:	2b09      	cmp	r3, #9
 80090ce:	d912      	bls.n	80090f6 <_strtod_l+0x20e>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e7c4      	b.n	800905e <_strtod_l+0x176>
 80090d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	9215      	str	r2, [sp, #84]	; 0x54
 80090da:	785a      	ldrb	r2, [r3, #1]
 80090dc:	3001      	adds	r0, #1
 80090de:	2a30      	cmp	r2, #48	; 0x30
 80090e0:	d0f8      	beq.n	80090d4 <_strtod_l+0x1ec>
 80090e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80090e6:	2b08      	cmp	r3, #8
 80090e8:	f200 84c1 	bhi.w	8009a6e <_strtod_l+0xb86>
 80090ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ee:	9005      	str	r0, [sp, #20]
 80090f0:	2000      	movs	r0, #0
 80090f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80090f4:	4606      	mov	r6, r0
 80090f6:	3a30      	subs	r2, #48	; 0x30
 80090f8:	f100 0301 	add.w	r3, r0, #1
 80090fc:	d014      	beq.n	8009128 <_strtod_l+0x240>
 80090fe:	9905      	ldr	r1, [sp, #20]
 8009100:	4419      	add	r1, r3
 8009102:	9105      	str	r1, [sp, #20]
 8009104:	4633      	mov	r3, r6
 8009106:	eb00 0c06 	add.w	ip, r0, r6
 800910a:	210a      	movs	r1, #10
 800910c:	4563      	cmp	r3, ip
 800910e:	d113      	bne.n	8009138 <_strtod_l+0x250>
 8009110:	1833      	adds	r3, r6, r0
 8009112:	2b08      	cmp	r3, #8
 8009114:	f106 0601 	add.w	r6, r6, #1
 8009118:	4406      	add	r6, r0
 800911a:	dc1a      	bgt.n	8009152 <_strtod_l+0x26a>
 800911c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800911e:	230a      	movs	r3, #10
 8009120:	fb03 2301 	mla	r3, r3, r1, r2
 8009124:	9309      	str	r3, [sp, #36]	; 0x24
 8009126:	2300      	movs	r3, #0
 8009128:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800912a:	1c51      	adds	r1, r2, #1
 800912c:	9115      	str	r1, [sp, #84]	; 0x54
 800912e:	7852      	ldrb	r2, [r2, #1]
 8009130:	4618      	mov	r0, r3
 8009132:	e7c9      	b.n	80090c8 <_strtod_l+0x1e0>
 8009134:	4658      	mov	r0, fp
 8009136:	e7d2      	b.n	80090de <_strtod_l+0x1f6>
 8009138:	2b08      	cmp	r3, #8
 800913a:	f103 0301 	add.w	r3, r3, #1
 800913e:	dc03      	bgt.n	8009148 <_strtod_l+0x260>
 8009140:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009142:	434f      	muls	r7, r1
 8009144:	9709      	str	r7, [sp, #36]	; 0x24
 8009146:	e7e1      	b.n	800910c <_strtod_l+0x224>
 8009148:	2b10      	cmp	r3, #16
 800914a:	bfd8      	it	le
 800914c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009150:	e7dc      	b.n	800910c <_strtod_l+0x224>
 8009152:	2e10      	cmp	r6, #16
 8009154:	bfdc      	itt	le
 8009156:	230a      	movle	r3, #10
 8009158:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800915c:	e7e3      	b.n	8009126 <_strtod_l+0x23e>
 800915e:	2300      	movs	r3, #0
 8009160:	9305      	str	r3, [sp, #20]
 8009162:	2301      	movs	r3, #1
 8009164:	e780      	b.n	8009068 <_strtod_l+0x180>
 8009166:	f04f 0c00 	mov.w	ip, #0
 800916a:	1caa      	adds	r2, r5, #2
 800916c:	9215      	str	r2, [sp, #84]	; 0x54
 800916e:	78aa      	ldrb	r2, [r5, #2]
 8009170:	e788      	b.n	8009084 <_strtod_l+0x19c>
 8009172:	f04f 0c01 	mov.w	ip, #1
 8009176:	e7f8      	b.n	800916a <_strtod_l+0x282>
 8009178:	0800c558 	.word	0x0800c558
 800917c:	0800c554 	.word	0x0800c554
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009186:	1c51      	adds	r1, r2, #1
 8009188:	9115      	str	r1, [sp, #84]	; 0x54
 800918a:	7852      	ldrb	r2, [r2, #1]
 800918c:	2a30      	cmp	r2, #48	; 0x30
 800918e:	d0f9      	beq.n	8009184 <_strtod_l+0x29c>
 8009190:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009194:	2908      	cmp	r1, #8
 8009196:	f63f af7a 	bhi.w	800908e <_strtod_l+0x1a6>
 800919a:	3a30      	subs	r2, #48	; 0x30
 800919c:	9208      	str	r2, [sp, #32]
 800919e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091a0:	920c      	str	r2, [sp, #48]	; 0x30
 80091a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091a4:	1c57      	adds	r7, r2, #1
 80091a6:	9715      	str	r7, [sp, #84]	; 0x54
 80091a8:	7852      	ldrb	r2, [r2, #1]
 80091aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80091ae:	f1be 0f09 	cmp.w	lr, #9
 80091b2:	d938      	bls.n	8009226 <_strtod_l+0x33e>
 80091b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091b6:	1a7f      	subs	r7, r7, r1
 80091b8:	2f08      	cmp	r7, #8
 80091ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80091be:	dc03      	bgt.n	80091c8 <_strtod_l+0x2e0>
 80091c0:	9908      	ldr	r1, [sp, #32]
 80091c2:	428f      	cmp	r7, r1
 80091c4:	bfa8      	it	ge
 80091c6:	460f      	movge	r7, r1
 80091c8:	f1bc 0f00 	cmp.w	ip, #0
 80091cc:	d000      	beq.n	80091d0 <_strtod_l+0x2e8>
 80091ce:	427f      	negs	r7, r7
 80091d0:	2e00      	cmp	r6, #0
 80091d2:	d14f      	bne.n	8009274 <_strtod_l+0x38c>
 80091d4:	9904      	ldr	r1, [sp, #16]
 80091d6:	4301      	orrs	r1, r0
 80091d8:	f47f aec1 	bne.w	8008f5e <_strtod_l+0x76>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f47f aedb 	bne.w	8008f98 <_strtod_l+0xb0>
 80091e2:	2a69      	cmp	r2, #105	; 0x69
 80091e4:	d029      	beq.n	800923a <_strtod_l+0x352>
 80091e6:	dc26      	bgt.n	8009236 <_strtod_l+0x34e>
 80091e8:	2a49      	cmp	r2, #73	; 0x49
 80091ea:	d026      	beq.n	800923a <_strtod_l+0x352>
 80091ec:	2a4e      	cmp	r2, #78	; 0x4e
 80091ee:	f47f aed3 	bne.w	8008f98 <_strtod_l+0xb0>
 80091f2:	499b      	ldr	r1, [pc, #620]	; (8009460 <_strtod_l+0x578>)
 80091f4:	a815      	add	r0, sp, #84	; 0x54
 80091f6:	f001 fc23 	bl	800aa40 <__match>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f43f aecc 	beq.w	8008f98 <_strtod_l+0xb0>
 8009200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b28      	cmp	r3, #40	; 0x28
 8009206:	d12f      	bne.n	8009268 <_strtod_l+0x380>
 8009208:	4996      	ldr	r1, [pc, #600]	; (8009464 <_strtod_l+0x57c>)
 800920a:	aa18      	add	r2, sp, #96	; 0x60
 800920c:	a815      	add	r0, sp, #84	; 0x54
 800920e:	f001 fc2b 	bl	800aa68 <__hexnan>
 8009212:	2805      	cmp	r0, #5
 8009214:	d128      	bne.n	8009268 <_strtod_l+0x380>
 8009216:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800921c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009220:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009224:	e69b      	b.n	8008f5e <_strtod_l+0x76>
 8009226:	9f08      	ldr	r7, [sp, #32]
 8009228:	210a      	movs	r1, #10
 800922a:	fb01 2107 	mla	r1, r1, r7, r2
 800922e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009232:	9208      	str	r2, [sp, #32]
 8009234:	e7b5      	b.n	80091a2 <_strtod_l+0x2ba>
 8009236:	2a6e      	cmp	r2, #110	; 0x6e
 8009238:	e7d9      	b.n	80091ee <_strtod_l+0x306>
 800923a:	498b      	ldr	r1, [pc, #556]	; (8009468 <_strtod_l+0x580>)
 800923c:	a815      	add	r0, sp, #84	; 0x54
 800923e:	f001 fbff 	bl	800aa40 <__match>
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f aea8 	beq.w	8008f98 <_strtod_l+0xb0>
 8009248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800924a:	4988      	ldr	r1, [pc, #544]	; (800946c <_strtod_l+0x584>)
 800924c:	3b01      	subs	r3, #1
 800924e:	a815      	add	r0, sp, #84	; 0x54
 8009250:	9315      	str	r3, [sp, #84]	; 0x54
 8009252:	f001 fbf5 	bl	800aa40 <__match>
 8009256:	b910      	cbnz	r0, 800925e <_strtod_l+0x376>
 8009258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925a:	3301      	adds	r3, #1
 800925c:	9315      	str	r3, [sp, #84]	; 0x54
 800925e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800947c <_strtod_l+0x594>
 8009262:	f04f 0800 	mov.w	r8, #0
 8009266:	e67a      	b.n	8008f5e <_strtod_l+0x76>
 8009268:	4881      	ldr	r0, [pc, #516]	; (8009470 <_strtod_l+0x588>)
 800926a:	f001 f905 	bl	800a478 <nan>
 800926e:	ec59 8b10 	vmov	r8, r9, d0
 8009272:	e674      	b.n	8008f5e <_strtod_l+0x76>
 8009274:	9b05      	ldr	r3, [sp, #20]
 8009276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009278:	1afb      	subs	r3, r7, r3
 800927a:	f1bb 0f00 	cmp.w	fp, #0
 800927e:	bf08      	it	eq
 8009280:	46b3      	moveq	fp, r6
 8009282:	2e10      	cmp	r6, #16
 8009284:	9308      	str	r3, [sp, #32]
 8009286:	4635      	mov	r5, r6
 8009288:	bfa8      	it	ge
 800928a:	2510      	movge	r5, #16
 800928c:	f7f7 f962 	bl	8000554 <__aeabi_ui2d>
 8009290:	2e09      	cmp	r6, #9
 8009292:	4680      	mov	r8, r0
 8009294:	4689      	mov	r9, r1
 8009296:	dd13      	ble.n	80092c0 <_strtod_l+0x3d8>
 8009298:	4b76      	ldr	r3, [pc, #472]	; (8009474 <_strtod_l+0x58c>)
 800929a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800929e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092a2:	f7f7 f9d1 	bl	8000648 <__aeabi_dmul>
 80092a6:	4680      	mov	r8, r0
 80092a8:	4650      	mov	r0, sl
 80092aa:	4689      	mov	r9, r1
 80092ac:	f7f7 f952 	bl	8000554 <__aeabi_ui2d>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4640      	mov	r0, r8
 80092b6:	4649      	mov	r1, r9
 80092b8:	f7f7 f810 	bl	80002dc <__adddf3>
 80092bc:	4680      	mov	r8, r0
 80092be:	4689      	mov	r9, r1
 80092c0:	2e0f      	cmp	r6, #15
 80092c2:	dc38      	bgt.n	8009336 <_strtod_l+0x44e>
 80092c4:	9b08      	ldr	r3, [sp, #32]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f43f ae49 	beq.w	8008f5e <_strtod_l+0x76>
 80092cc:	dd24      	ble.n	8009318 <_strtod_l+0x430>
 80092ce:	2b16      	cmp	r3, #22
 80092d0:	dc0b      	bgt.n	80092ea <_strtod_l+0x402>
 80092d2:	4968      	ldr	r1, [pc, #416]	; (8009474 <_strtod_l+0x58c>)
 80092d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	f7f7 f9b2 	bl	8000648 <__aeabi_dmul>
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	e639      	b.n	8008f5e <_strtod_l+0x76>
 80092ea:	9a08      	ldr	r2, [sp, #32]
 80092ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80092f0:	4293      	cmp	r3, r2
 80092f2:	db20      	blt.n	8009336 <_strtod_l+0x44e>
 80092f4:	4c5f      	ldr	r4, [pc, #380]	; (8009474 <_strtod_l+0x58c>)
 80092f6:	f1c6 060f 	rsb	r6, r6, #15
 80092fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80092fe:	4642      	mov	r2, r8
 8009300:	464b      	mov	r3, r9
 8009302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009306:	f7f7 f99f 	bl	8000648 <__aeabi_dmul>
 800930a:	9b08      	ldr	r3, [sp, #32]
 800930c:	1b9e      	subs	r6, r3, r6
 800930e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009312:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009316:	e7e3      	b.n	80092e0 <_strtod_l+0x3f8>
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	3316      	adds	r3, #22
 800931c:	db0b      	blt.n	8009336 <_strtod_l+0x44e>
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	1bdf      	subs	r7, r3, r7
 8009322:	4b54      	ldr	r3, [pc, #336]	; (8009474 <_strtod_l+0x58c>)
 8009324:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932c:	4640      	mov	r0, r8
 800932e:	4649      	mov	r1, r9
 8009330:	f7f7 fab4 	bl	800089c <__aeabi_ddiv>
 8009334:	e7d6      	b.n	80092e4 <_strtod_l+0x3fc>
 8009336:	9b08      	ldr	r3, [sp, #32]
 8009338:	1b75      	subs	r5, r6, r5
 800933a:	441d      	add	r5, r3
 800933c:	2d00      	cmp	r5, #0
 800933e:	dd70      	ble.n	8009422 <_strtod_l+0x53a>
 8009340:	f015 030f 	ands.w	r3, r5, #15
 8009344:	d00a      	beq.n	800935c <_strtod_l+0x474>
 8009346:	494b      	ldr	r1, [pc, #300]	; (8009474 <_strtod_l+0x58c>)
 8009348:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800934c:	4642      	mov	r2, r8
 800934e:	464b      	mov	r3, r9
 8009350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009354:	f7f7 f978 	bl	8000648 <__aeabi_dmul>
 8009358:	4680      	mov	r8, r0
 800935a:	4689      	mov	r9, r1
 800935c:	f035 050f 	bics.w	r5, r5, #15
 8009360:	d04d      	beq.n	80093fe <_strtod_l+0x516>
 8009362:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009366:	dd22      	ble.n	80093ae <_strtod_l+0x4c6>
 8009368:	2500      	movs	r5, #0
 800936a:	46ab      	mov	fp, r5
 800936c:	9509      	str	r5, [sp, #36]	; 0x24
 800936e:	9505      	str	r5, [sp, #20]
 8009370:	2322      	movs	r3, #34	; 0x22
 8009372:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800947c <_strtod_l+0x594>
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	f04f 0800 	mov.w	r8, #0
 800937c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	f43f aded 	beq.w	8008f5e <_strtod_l+0x76>
 8009384:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff f924 	bl	80085d4 <_Bfree>
 800938c:	9905      	ldr	r1, [sp, #20]
 800938e:	4620      	mov	r0, r4
 8009390:	f7ff f920 	bl	80085d4 <_Bfree>
 8009394:	4659      	mov	r1, fp
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff f91c 	bl	80085d4 <_Bfree>
 800939c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff f918 	bl	80085d4 <_Bfree>
 80093a4:	4629      	mov	r1, r5
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7ff f914 	bl	80085d4 <_Bfree>
 80093ac:	e5d7      	b.n	8008f5e <_strtod_l+0x76>
 80093ae:	4b32      	ldr	r3, [pc, #200]	; (8009478 <_strtod_l+0x590>)
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	2300      	movs	r3, #0
 80093b4:	112d      	asrs	r5, r5, #4
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	469a      	mov	sl, r3
 80093bc:	2d01      	cmp	r5, #1
 80093be:	dc21      	bgt.n	8009404 <_strtod_l+0x51c>
 80093c0:	b10b      	cbz	r3, 80093c6 <_strtod_l+0x4de>
 80093c2:	4680      	mov	r8, r0
 80093c4:	4689      	mov	r9, r1
 80093c6:	492c      	ldr	r1, [pc, #176]	; (8009478 <_strtod_l+0x590>)
 80093c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80093cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80093d0:	4642      	mov	r2, r8
 80093d2:	464b      	mov	r3, r9
 80093d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d8:	f7f7 f936 	bl	8000648 <__aeabi_dmul>
 80093dc:	4b27      	ldr	r3, [pc, #156]	; (800947c <_strtod_l+0x594>)
 80093de:	460a      	mov	r2, r1
 80093e0:	400b      	ands	r3, r1
 80093e2:	4927      	ldr	r1, [pc, #156]	; (8009480 <_strtod_l+0x598>)
 80093e4:	428b      	cmp	r3, r1
 80093e6:	4680      	mov	r8, r0
 80093e8:	d8be      	bhi.n	8009368 <_strtod_l+0x480>
 80093ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80093ee:	428b      	cmp	r3, r1
 80093f0:	bf86      	itte	hi
 80093f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009484 <_strtod_l+0x59c>
 80093f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80093fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80093fe:	2300      	movs	r3, #0
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	e07b      	b.n	80094fc <_strtod_l+0x614>
 8009404:	07ea      	lsls	r2, r5, #31
 8009406:	d505      	bpl.n	8009414 <_strtod_l+0x52c>
 8009408:	9b04      	ldr	r3, [sp, #16]
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f7 f91b 	bl	8000648 <__aeabi_dmul>
 8009412:	2301      	movs	r3, #1
 8009414:	9a04      	ldr	r2, [sp, #16]
 8009416:	3208      	adds	r2, #8
 8009418:	f10a 0a01 	add.w	sl, sl, #1
 800941c:	106d      	asrs	r5, r5, #1
 800941e:	9204      	str	r2, [sp, #16]
 8009420:	e7cc      	b.n	80093bc <_strtod_l+0x4d4>
 8009422:	d0ec      	beq.n	80093fe <_strtod_l+0x516>
 8009424:	426d      	negs	r5, r5
 8009426:	f015 020f 	ands.w	r2, r5, #15
 800942a:	d00a      	beq.n	8009442 <_strtod_l+0x55a>
 800942c:	4b11      	ldr	r3, [pc, #68]	; (8009474 <_strtod_l+0x58c>)
 800942e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009432:	4640      	mov	r0, r8
 8009434:	4649      	mov	r1, r9
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f7 fa2f 	bl	800089c <__aeabi_ddiv>
 800943e:	4680      	mov	r8, r0
 8009440:	4689      	mov	r9, r1
 8009442:	112d      	asrs	r5, r5, #4
 8009444:	d0db      	beq.n	80093fe <_strtod_l+0x516>
 8009446:	2d1f      	cmp	r5, #31
 8009448:	dd1e      	ble.n	8009488 <_strtod_l+0x5a0>
 800944a:	2500      	movs	r5, #0
 800944c:	46ab      	mov	fp, r5
 800944e:	9509      	str	r5, [sp, #36]	; 0x24
 8009450:	9505      	str	r5, [sp, #20]
 8009452:	2322      	movs	r3, #34	; 0x22
 8009454:	f04f 0800 	mov.w	r8, #0
 8009458:	f04f 0900 	mov.w	r9, #0
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	e78d      	b.n	800937c <_strtod_l+0x494>
 8009460:	0800c341 	.word	0x0800c341
 8009464:	0800c56c 	.word	0x0800c56c
 8009468:	0800c339 	.word	0x0800c339
 800946c:	0800c370 	.word	0x0800c370
 8009470:	0800c6fd 	.word	0x0800c6fd
 8009474:	0800c480 	.word	0x0800c480
 8009478:	0800c458 	.word	0x0800c458
 800947c:	7ff00000 	.word	0x7ff00000
 8009480:	7ca00000 	.word	0x7ca00000
 8009484:	7fefffff 	.word	0x7fefffff
 8009488:	f015 0310 	ands.w	r3, r5, #16
 800948c:	bf18      	it	ne
 800948e:	236a      	movne	r3, #106	; 0x6a
 8009490:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009834 <_strtod_l+0x94c>
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	4640      	mov	r0, r8
 8009498:	4649      	mov	r1, r9
 800949a:	2300      	movs	r3, #0
 800949c:	07ea      	lsls	r2, r5, #31
 800949e:	d504      	bpl.n	80094aa <_strtod_l+0x5c2>
 80094a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80094a4:	f7f7 f8d0 	bl	8000648 <__aeabi_dmul>
 80094a8:	2301      	movs	r3, #1
 80094aa:	106d      	asrs	r5, r5, #1
 80094ac:	f10a 0a08 	add.w	sl, sl, #8
 80094b0:	d1f4      	bne.n	800949c <_strtod_l+0x5b4>
 80094b2:	b10b      	cbz	r3, 80094b8 <_strtod_l+0x5d0>
 80094b4:	4680      	mov	r8, r0
 80094b6:	4689      	mov	r9, r1
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	b1bb      	cbz	r3, 80094ec <_strtod_l+0x604>
 80094bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80094c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	4649      	mov	r1, r9
 80094c8:	dd10      	ble.n	80094ec <_strtod_l+0x604>
 80094ca:	2b1f      	cmp	r3, #31
 80094cc:	f340 811e 	ble.w	800970c <_strtod_l+0x824>
 80094d0:	2b34      	cmp	r3, #52	; 0x34
 80094d2:	bfde      	ittt	le
 80094d4:	f04f 33ff 	movle.w	r3, #4294967295
 80094d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80094dc:	4093      	lslle	r3, r2
 80094de:	f04f 0800 	mov.w	r8, #0
 80094e2:	bfcc      	ite	gt
 80094e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80094e8:	ea03 0901 	andle.w	r9, r3, r1
 80094ec:	2200      	movs	r2, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	f7f7 fb10 	bl	8000b18 <__aeabi_dcmpeq>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1a6      	bne.n	800944a <_strtod_l+0x562>
 80094fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009502:	4633      	mov	r3, r6
 8009504:	465a      	mov	r2, fp
 8009506:	4620      	mov	r0, r4
 8009508:	f7ff f8cc 	bl	80086a4 <__s2b>
 800950c:	9009      	str	r0, [sp, #36]	; 0x24
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f af2a 	beq.w	8009368 <_strtod_l+0x480>
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	9b05      	ldr	r3, [sp, #20]
 8009518:	2a00      	cmp	r2, #0
 800951a:	eba3 0307 	sub.w	r3, r3, r7
 800951e:	bfa8      	it	ge
 8009520:	2300      	movge	r3, #0
 8009522:	930c      	str	r3, [sp, #48]	; 0x30
 8009524:	2500      	movs	r5, #0
 8009526:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800952a:	9312      	str	r3, [sp, #72]	; 0x48
 800952c:	46ab      	mov	fp, r5
 800952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009530:	4620      	mov	r0, r4
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	f7ff f80e 	bl	8008554 <_Balloc>
 8009538:	9005      	str	r0, [sp, #20]
 800953a:	2800      	cmp	r0, #0
 800953c:	f43f af18 	beq.w	8009370 <_strtod_l+0x488>
 8009540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	3202      	adds	r2, #2
 8009546:	f103 010c 	add.w	r1, r3, #12
 800954a:	0092      	lsls	r2, r2, #2
 800954c:	300c      	adds	r0, #12
 800954e:	f000 ff83 	bl	800a458 <memcpy>
 8009552:	ec49 8b10 	vmov	d0, r8, r9
 8009556:	aa18      	add	r2, sp, #96	; 0x60
 8009558:	a917      	add	r1, sp, #92	; 0x5c
 800955a:	4620      	mov	r0, r4
 800955c:	f7ff fbd6 	bl	8008d0c <__d2b>
 8009560:	ec49 8b18 	vmov	d8, r8, r9
 8009564:	9016      	str	r0, [sp, #88]	; 0x58
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f af02 	beq.w	8009370 <_strtod_l+0x488>
 800956c:	2101      	movs	r1, #1
 800956e:	4620      	mov	r0, r4
 8009570:	f7ff f930 	bl	80087d4 <__i2b>
 8009574:	4683      	mov	fp, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f aefa 	beq.w	8009370 <_strtod_l+0x488>
 800957c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800957e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009580:	2e00      	cmp	r6, #0
 8009582:	bfab      	itete	ge
 8009584:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009586:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009588:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800958a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800958e:	bfac      	ite	ge
 8009590:	eb06 0a03 	addge.w	sl, r6, r3
 8009594:	1b9f      	sublt	r7, r3, r6
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	1af6      	subs	r6, r6, r3
 800959a:	4416      	add	r6, r2
 800959c:	4ba0      	ldr	r3, [pc, #640]	; (8009820 <_strtod_l+0x938>)
 800959e:	3e01      	subs	r6, #1
 80095a0:	429e      	cmp	r6, r3
 80095a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80095a6:	f280 80c4 	bge.w	8009732 <_strtod_l+0x84a>
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	2b1f      	cmp	r3, #31
 80095ae:	eba2 0203 	sub.w	r2, r2, r3
 80095b2:	f04f 0101 	mov.w	r1, #1
 80095b6:	f300 80b0 	bgt.w	800971a <_strtod_l+0x832>
 80095ba:	fa01 f303 	lsl.w	r3, r1, r3
 80095be:	930e      	str	r3, [sp, #56]	; 0x38
 80095c0:	2300      	movs	r3, #0
 80095c2:	930d      	str	r3, [sp, #52]	; 0x34
 80095c4:	eb0a 0602 	add.w	r6, sl, r2
 80095c8:	9b04      	ldr	r3, [sp, #16]
 80095ca:	45b2      	cmp	sl, r6
 80095cc:	4417      	add	r7, r2
 80095ce:	441f      	add	r7, r3
 80095d0:	4653      	mov	r3, sl
 80095d2:	bfa8      	it	ge
 80095d4:	4633      	movge	r3, r6
 80095d6:	42bb      	cmp	r3, r7
 80095d8:	bfa8      	it	ge
 80095da:	463b      	movge	r3, r7
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bfc2      	ittt	gt
 80095e0:	1af6      	subgt	r6, r6, r3
 80095e2:	1aff      	subgt	r7, r7, r3
 80095e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80095e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	dd17      	ble.n	800961e <_strtod_l+0x736>
 80095ee:	4659      	mov	r1, fp
 80095f0:	461a      	mov	r2, r3
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff f9ae 	bl	8008954 <__pow5mult>
 80095f8:	4683      	mov	fp, r0
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f43f aeb8 	beq.w	8009370 <_strtod_l+0x488>
 8009600:	4601      	mov	r1, r0
 8009602:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009604:	4620      	mov	r0, r4
 8009606:	f7ff f8fb 	bl	8008800 <__multiply>
 800960a:	900b      	str	r0, [sp, #44]	; 0x2c
 800960c:	2800      	cmp	r0, #0
 800960e:	f43f aeaf 	beq.w	8009370 <_strtod_l+0x488>
 8009612:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009614:	4620      	mov	r0, r4
 8009616:	f7fe ffdd 	bl	80085d4 <_Bfree>
 800961a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800961c:	9316      	str	r3, [sp, #88]	; 0x58
 800961e:	2e00      	cmp	r6, #0
 8009620:	f300 808c 	bgt.w	800973c <_strtod_l+0x854>
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dd08      	ble.n	800963c <_strtod_l+0x754>
 800962a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800962c:	9905      	ldr	r1, [sp, #20]
 800962e:	4620      	mov	r0, r4
 8009630:	f7ff f990 	bl	8008954 <__pow5mult>
 8009634:	9005      	str	r0, [sp, #20]
 8009636:	2800      	cmp	r0, #0
 8009638:	f43f ae9a 	beq.w	8009370 <_strtod_l+0x488>
 800963c:	2f00      	cmp	r7, #0
 800963e:	dd08      	ble.n	8009652 <_strtod_l+0x76a>
 8009640:	9905      	ldr	r1, [sp, #20]
 8009642:	463a      	mov	r2, r7
 8009644:	4620      	mov	r0, r4
 8009646:	f7ff f9df 	bl	8008a08 <__lshift>
 800964a:	9005      	str	r0, [sp, #20]
 800964c:	2800      	cmp	r0, #0
 800964e:	f43f ae8f 	beq.w	8009370 <_strtod_l+0x488>
 8009652:	f1ba 0f00 	cmp.w	sl, #0
 8009656:	dd08      	ble.n	800966a <_strtod_l+0x782>
 8009658:	4659      	mov	r1, fp
 800965a:	4652      	mov	r2, sl
 800965c:	4620      	mov	r0, r4
 800965e:	f7ff f9d3 	bl	8008a08 <__lshift>
 8009662:	4683      	mov	fp, r0
 8009664:	2800      	cmp	r0, #0
 8009666:	f43f ae83 	beq.w	8009370 <_strtod_l+0x488>
 800966a:	9a05      	ldr	r2, [sp, #20]
 800966c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff fa52 	bl	8008b18 <__mdiff>
 8009674:	4605      	mov	r5, r0
 8009676:	2800      	cmp	r0, #0
 8009678:	f43f ae7a 	beq.w	8009370 <_strtod_l+0x488>
 800967c:	68c3      	ldr	r3, [r0, #12]
 800967e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009680:	2300      	movs	r3, #0
 8009682:	60c3      	str	r3, [r0, #12]
 8009684:	4659      	mov	r1, fp
 8009686:	f7ff fa2b 	bl	8008ae0 <__mcmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	da60      	bge.n	8009750 <_strtod_l+0x868>
 800968e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009690:	ea53 0308 	orrs.w	r3, r3, r8
 8009694:	f040 8084 	bne.w	80097a0 <_strtod_l+0x8b8>
 8009698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800969c:	2b00      	cmp	r3, #0
 800969e:	d17f      	bne.n	80097a0 <_strtod_l+0x8b8>
 80096a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096a4:	0d1b      	lsrs	r3, r3, #20
 80096a6:	051b      	lsls	r3, r3, #20
 80096a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80096ac:	d978      	bls.n	80097a0 <_strtod_l+0x8b8>
 80096ae:	696b      	ldr	r3, [r5, #20]
 80096b0:	b913      	cbnz	r3, 80096b8 <_strtod_l+0x7d0>
 80096b2:	692b      	ldr	r3, [r5, #16]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	dd73      	ble.n	80097a0 <_strtod_l+0x8b8>
 80096b8:	4629      	mov	r1, r5
 80096ba:	2201      	movs	r2, #1
 80096bc:	4620      	mov	r0, r4
 80096be:	f7ff f9a3 	bl	8008a08 <__lshift>
 80096c2:	4659      	mov	r1, fp
 80096c4:	4605      	mov	r5, r0
 80096c6:	f7ff fa0b 	bl	8008ae0 <__mcmp>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	dd68      	ble.n	80097a0 <_strtod_l+0x8b8>
 80096ce:	9904      	ldr	r1, [sp, #16]
 80096d0:	4a54      	ldr	r2, [pc, #336]	; (8009824 <_strtod_l+0x93c>)
 80096d2:	464b      	mov	r3, r9
 80096d4:	2900      	cmp	r1, #0
 80096d6:	f000 8084 	beq.w	80097e2 <_strtod_l+0x8fa>
 80096da:	ea02 0109 	and.w	r1, r2, r9
 80096de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096e2:	dc7e      	bgt.n	80097e2 <_strtod_l+0x8fa>
 80096e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096e8:	f77f aeb3 	ble.w	8009452 <_strtod_l+0x56a>
 80096ec:	4b4e      	ldr	r3, [pc, #312]	; (8009828 <_strtod_l+0x940>)
 80096ee:	4640      	mov	r0, r8
 80096f0:	4649      	mov	r1, r9
 80096f2:	2200      	movs	r2, #0
 80096f4:	f7f6 ffa8 	bl	8000648 <__aeabi_dmul>
 80096f8:	4b4a      	ldr	r3, [pc, #296]	; (8009824 <_strtod_l+0x93c>)
 80096fa:	400b      	ands	r3, r1
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	2b00      	cmp	r3, #0
 8009702:	f47f ae3f 	bne.w	8009384 <_strtod_l+0x49c>
 8009706:	2322      	movs	r3, #34	; 0x22
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	e63b      	b.n	8009384 <_strtod_l+0x49c>
 800970c:	f04f 32ff 	mov.w	r2, #4294967295
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
 8009714:	ea03 0808 	and.w	r8, r3, r8
 8009718:	e6e8      	b.n	80094ec <_strtod_l+0x604>
 800971a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800971e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009722:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009726:	36e2      	adds	r6, #226	; 0xe2
 8009728:	fa01 f306 	lsl.w	r3, r1, r6
 800972c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009730:	e748      	b.n	80095c4 <_strtod_l+0x6dc>
 8009732:	2100      	movs	r1, #0
 8009734:	2301      	movs	r3, #1
 8009736:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800973a:	e743      	b.n	80095c4 <_strtod_l+0x6dc>
 800973c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800973e:	4632      	mov	r2, r6
 8009740:	4620      	mov	r0, r4
 8009742:	f7ff f961 	bl	8008a08 <__lshift>
 8009746:	9016      	str	r0, [sp, #88]	; 0x58
 8009748:	2800      	cmp	r0, #0
 800974a:	f47f af6b 	bne.w	8009624 <_strtod_l+0x73c>
 800974e:	e60f      	b.n	8009370 <_strtod_l+0x488>
 8009750:	46ca      	mov	sl, r9
 8009752:	d171      	bne.n	8009838 <_strtod_l+0x950>
 8009754:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009756:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800975a:	b352      	cbz	r2, 80097b2 <_strtod_l+0x8ca>
 800975c:	4a33      	ldr	r2, [pc, #204]	; (800982c <_strtod_l+0x944>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d12a      	bne.n	80097b8 <_strtod_l+0x8d0>
 8009762:	9b04      	ldr	r3, [sp, #16]
 8009764:	4641      	mov	r1, r8
 8009766:	b1fb      	cbz	r3, 80097a8 <_strtod_l+0x8c0>
 8009768:	4b2e      	ldr	r3, [pc, #184]	; (8009824 <_strtod_l+0x93c>)
 800976a:	ea09 0303 	and.w	r3, r9, r3
 800976e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009772:	f04f 32ff 	mov.w	r2, #4294967295
 8009776:	d81a      	bhi.n	80097ae <_strtod_l+0x8c6>
 8009778:	0d1b      	lsrs	r3, r3, #20
 800977a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800977e:	fa02 f303 	lsl.w	r3, r2, r3
 8009782:	4299      	cmp	r1, r3
 8009784:	d118      	bne.n	80097b8 <_strtod_l+0x8d0>
 8009786:	4b2a      	ldr	r3, [pc, #168]	; (8009830 <_strtod_l+0x948>)
 8009788:	459a      	cmp	sl, r3
 800978a:	d102      	bne.n	8009792 <_strtod_l+0x8aa>
 800978c:	3101      	adds	r1, #1
 800978e:	f43f adef 	beq.w	8009370 <_strtod_l+0x488>
 8009792:	4b24      	ldr	r3, [pc, #144]	; (8009824 <_strtod_l+0x93c>)
 8009794:	ea0a 0303 	and.w	r3, sl, r3
 8009798:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800979c:	f04f 0800 	mov.w	r8, #0
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1a2      	bne.n	80096ec <_strtod_l+0x804>
 80097a6:	e5ed      	b.n	8009384 <_strtod_l+0x49c>
 80097a8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ac:	e7e9      	b.n	8009782 <_strtod_l+0x89a>
 80097ae:	4613      	mov	r3, r2
 80097b0:	e7e7      	b.n	8009782 <_strtod_l+0x89a>
 80097b2:	ea53 0308 	orrs.w	r3, r3, r8
 80097b6:	d08a      	beq.n	80096ce <_strtod_l+0x7e6>
 80097b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ba:	b1e3      	cbz	r3, 80097f6 <_strtod_l+0x90e>
 80097bc:	ea13 0f0a 	tst.w	r3, sl
 80097c0:	d0ee      	beq.n	80097a0 <_strtod_l+0x8b8>
 80097c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c4:	9a04      	ldr	r2, [sp, #16]
 80097c6:	4640      	mov	r0, r8
 80097c8:	4649      	mov	r1, r9
 80097ca:	b1c3      	cbz	r3, 80097fe <_strtod_l+0x916>
 80097cc:	f7ff fb6f 	bl	8008eae <sulp>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	ec51 0b18 	vmov	r0, r1, d8
 80097d8:	f7f6 fd80 	bl	80002dc <__adddf3>
 80097dc:	4680      	mov	r8, r0
 80097de:	4689      	mov	r9, r1
 80097e0:	e7de      	b.n	80097a0 <_strtod_l+0x8b8>
 80097e2:	4013      	ands	r3, r2
 80097e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80097ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80097f0:	f04f 38ff 	mov.w	r8, #4294967295
 80097f4:	e7d4      	b.n	80097a0 <_strtod_l+0x8b8>
 80097f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f8:	ea13 0f08 	tst.w	r3, r8
 80097fc:	e7e0      	b.n	80097c0 <_strtod_l+0x8d8>
 80097fe:	f7ff fb56 	bl	8008eae <sulp>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	ec51 0b18 	vmov	r0, r1, d8
 800980a:	f7f6 fd65 	bl	80002d8 <__aeabi_dsub>
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	4680      	mov	r8, r0
 8009814:	4689      	mov	r9, r1
 8009816:	f7f7 f97f 	bl	8000b18 <__aeabi_dcmpeq>
 800981a:	2800      	cmp	r0, #0
 800981c:	d0c0      	beq.n	80097a0 <_strtod_l+0x8b8>
 800981e:	e618      	b.n	8009452 <_strtod_l+0x56a>
 8009820:	fffffc02 	.word	0xfffffc02
 8009824:	7ff00000 	.word	0x7ff00000
 8009828:	39500000 	.word	0x39500000
 800982c:	000fffff 	.word	0x000fffff
 8009830:	7fefffff 	.word	0x7fefffff
 8009834:	0800c580 	.word	0x0800c580
 8009838:	4659      	mov	r1, fp
 800983a:	4628      	mov	r0, r5
 800983c:	f7ff fac0 	bl	8008dc0 <__ratio>
 8009840:	ec57 6b10 	vmov	r6, r7, d0
 8009844:	ee10 0a10 	vmov	r0, s0
 8009848:	2200      	movs	r2, #0
 800984a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800984e:	4639      	mov	r1, r7
 8009850:	f7f7 f976 	bl	8000b40 <__aeabi_dcmple>
 8009854:	2800      	cmp	r0, #0
 8009856:	d071      	beq.n	800993c <_strtod_l+0xa54>
 8009858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d17c      	bne.n	8009958 <_strtod_l+0xa70>
 800985e:	f1b8 0f00 	cmp.w	r8, #0
 8009862:	d15a      	bne.n	800991a <_strtod_l+0xa32>
 8009864:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009868:	2b00      	cmp	r3, #0
 800986a:	d15d      	bne.n	8009928 <_strtod_l+0xa40>
 800986c:	4b90      	ldr	r3, [pc, #576]	; (8009ab0 <_strtod_l+0xbc8>)
 800986e:	2200      	movs	r2, #0
 8009870:	4630      	mov	r0, r6
 8009872:	4639      	mov	r1, r7
 8009874:	f7f7 f95a 	bl	8000b2c <__aeabi_dcmplt>
 8009878:	2800      	cmp	r0, #0
 800987a:	d15c      	bne.n	8009936 <_strtod_l+0xa4e>
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	4b8c      	ldr	r3, [pc, #560]	; (8009ab4 <_strtod_l+0xbcc>)
 8009882:	2200      	movs	r2, #0
 8009884:	f7f6 fee0 	bl	8000648 <__aeabi_dmul>
 8009888:	4606      	mov	r6, r0
 800988a:	460f      	mov	r7, r1
 800988c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009890:	9606      	str	r6, [sp, #24]
 8009892:	9307      	str	r3, [sp, #28]
 8009894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009898:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800989c:	4b86      	ldr	r3, [pc, #536]	; (8009ab8 <_strtod_l+0xbd0>)
 800989e:	ea0a 0303 	and.w	r3, sl, r3
 80098a2:	930d      	str	r3, [sp, #52]	; 0x34
 80098a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098a6:	4b85      	ldr	r3, [pc, #532]	; (8009abc <_strtod_l+0xbd4>)
 80098a8:	429a      	cmp	r2, r3
 80098aa:	f040 8090 	bne.w	80099ce <_strtod_l+0xae6>
 80098ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80098b2:	ec49 8b10 	vmov	d0, r8, r9
 80098b6:	f7ff f9b9 	bl	8008c2c <__ulp>
 80098ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098be:	ec51 0b10 	vmov	r0, r1, d0
 80098c2:	f7f6 fec1 	bl	8000648 <__aeabi_dmul>
 80098c6:	4642      	mov	r2, r8
 80098c8:	464b      	mov	r3, r9
 80098ca:	f7f6 fd07 	bl	80002dc <__adddf3>
 80098ce:	460b      	mov	r3, r1
 80098d0:	4979      	ldr	r1, [pc, #484]	; (8009ab8 <_strtod_l+0xbd0>)
 80098d2:	4a7b      	ldr	r2, [pc, #492]	; (8009ac0 <_strtod_l+0xbd8>)
 80098d4:	4019      	ands	r1, r3
 80098d6:	4291      	cmp	r1, r2
 80098d8:	4680      	mov	r8, r0
 80098da:	d944      	bls.n	8009966 <_strtod_l+0xa7e>
 80098dc:	ee18 2a90 	vmov	r2, s17
 80098e0:	4b78      	ldr	r3, [pc, #480]	; (8009ac4 <_strtod_l+0xbdc>)
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d104      	bne.n	80098f0 <_strtod_l+0xa08>
 80098e6:	ee18 3a10 	vmov	r3, s16
 80098ea:	3301      	adds	r3, #1
 80098ec:	f43f ad40 	beq.w	8009370 <_strtod_l+0x488>
 80098f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009ac4 <_strtod_l+0xbdc>
 80098f4:	f04f 38ff 	mov.w	r8, #4294967295
 80098f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7fe fe6a 	bl	80085d4 <_Bfree>
 8009900:	9905      	ldr	r1, [sp, #20]
 8009902:	4620      	mov	r0, r4
 8009904:	f7fe fe66 	bl	80085d4 <_Bfree>
 8009908:	4659      	mov	r1, fp
 800990a:	4620      	mov	r0, r4
 800990c:	f7fe fe62 	bl	80085d4 <_Bfree>
 8009910:	4629      	mov	r1, r5
 8009912:	4620      	mov	r0, r4
 8009914:	f7fe fe5e 	bl	80085d4 <_Bfree>
 8009918:	e609      	b.n	800952e <_strtod_l+0x646>
 800991a:	f1b8 0f01 	cmp.w	r8, #1
 800991e:	d103      	bne.n	8009928 <_strtod_l+0xa40>
 8009920:	f1b9 0f00 	cmp.w	r9, #0
 8009924:	f43f ad95 	beq.w	8009452 <_strtod_l+0x56a>
 8009928:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009a80 <_strtod_l+0xb98>
 800992c:	4f60      	ldr	r7, [pc, #384]	; (8009ab0 <_strtod_l+0xbc8>)
 800992e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009932:	2600      	movs	r6, #0
 8009934:	e7ae      	b.n	8009894 <_strtod_l+0x9ac>
 8009936:	4f5f      	ldr	r7, [pc, #380]	; (8009ab4 <_strtod_l+0xbcc>)
 8009938:	2600      	movs	r6, #0
 800993a:	e7a7      	b.n	800988c <_strtod_l+0x9a4>
 800993c:	4b5d      	ldr	r3, [pc, #372]	; (8009ab4 <_strtod_l+0xbcc>)
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	2200      	movs	r2, #0
 8009944:	f7f6 fe80 	bl	8000648 <__aeabi_dmul>
 8009948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d09c      	beq.n	800988c <_strtod_l+0x9a4>
 8009952:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009956:	e79d      	b.n	8009894 <_strtod_l+0x9ac>
 8009958:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009a88 <_strtod_l+0xba0>
 800995c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009960:	ec57 6b17 	vmov	r6, r7, d7
 8009964:	e796      	b.n	8009894 <_strtod_l+0x9ac>
 8009966:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	46ca      	mov	sl, r9
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1c2      	bne.n	80098f8 <_strtod_l+0xa10>
 8009972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009978:	0d1b      	lsrs	r3, r3, #20
 800997a:	051b      	lsls	r3, r3, #20
 800997c:	429a      	cmp	r2, r3
 800997e:	d1bb      	bne.n	80098f8 <_strtod_l+0xa10>
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f7 f9c0 	bl	8000d08 <__aeabi_d2lz>
 8009988:	f7f6 fe30 	bl	80005ec <__aeabi_l2d>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f6 fca0 	bl	80002d8 <__aeabi_dsub>
 8009998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800999a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800999e:	ea43 0308 	orr.w	r3, r3, r8
 80099a2:	4313      	orrs	r3, r2
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	d054      	beq.n	8009a54 <_strtod_l+0xb6c>
 80099aa:	a339      	add	r3, pc, #228	; (adr r3, 8009a90 <_strtod_l+0xba8>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f7f7 f8bc 	bl	8000b2c <__aeabi_dcmplt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	f47f ace5 	bne.w	8009384 <_strtod_l+0x49c>
 80099ba:	a337      	add	r3, pc, #220	; (adr r3, 8009a98 <_strtod_l+0xbb0>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f8d0 	bl	8000b68 <__aeabi_dcmpgt>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d095      	beq.n	80098f8 <_strtod_l+0xa10>
 80099cc:	e4da      	b.n	8009384 <_strtod_l+0x49c>
 80099ce:	9b04      	ldr	r3, [sp, #16]
 80099d0:	b333      	cbz	r3, 8009a20 <_strtod_l+0xb38>
 80099d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099d8:	d822      	bhi.n	8009a20 <_strtod_l+0xb38>
 80099da:	a331      	add	r3, pc, #196	; (adr r3, 8009aa0 <_strtod_l+0xbb8>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f8ac 	bl	8000b40 <__aeabi_dcmple>
 80099e8:	b1a0      	cbz	r0, 8009a14 <_strtod_l+0xb2c>
 80099ea:	4639      	mov	r1, r7
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7f7 f903 	bl	8000bf8 <__aeabi_d2uiz>
 80099f2:	2801      	cmp	r0, #1
 80099f4:	bf38      	it	cc
 80099f6:	2001      	movcc	r0, #1
 80099f8:	f7f6 fdac 	bl	8000554 <__aeabi_ui2d>
 80099fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	bb23      	cbnz	r3, 8009a4e <_strtod_l+0xb66>
 8009a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a08:	9010      	str	r0, [sp, #64]	; 0x40
 8009a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8009a0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a24:	eeb0 0a48 	vmov.f32	s0, s16
 8009a28:	eef0 0a68 	vmov.f32	s1, s17
 8009a2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009a30:	f7ff f8fc 	bl	8008c2c <__ulp>
 8009a34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a38:	ec53 2b10 	vmov	r2, r3, d0
 8009a3c:	f7f6 fe04 	bl	8000648 <__aeabi_dmul>
 8009a40:	ec53 2b18 	vmov	r2, r3, d8
 8009a44:	f7f6 fc4a 	bl	80002dc <__adddf3>
 8009a48:	4680      	mov	r8, r0
 8009a4a:	4689      	mov	r9, r1
 8009a4c:	e78d      	b.n	800996a <_strtod_l+0xa82>
 8009a4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009a52:	e7db      	b.n	8009a0c <_strtod_l+0xb24>
 8009a54:	a314      	add	r3, pc, #80	; (adr r3, 8009aa8 <_strtod_l+0xbc0>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f7 f867 	bl	8000b2c <__aeabi_dcmplt>
 8009a5e:	e7b3      	b.n	80099c8 <_strtod_l+0xae0>
 8009a60:	2300      	movs	r3, #0
 8009a62:	930a      	str	r3, [sp, #40]	; 0x28
 8009a64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	f7ff ba7c 	b.w	8008f66 <_strtod_l+0x7e>
 8009a6e:	2a65      	cmp	r2, #101	; 0x65
 8009a70:	f43f ab75 	beq.w	800915e <_strtod_l+0x276>
 8009a74:	2a45      	cmp	r2, #69	; 0x45
 8009a76:	f43f ab72 	beq.w	800915e <_strtod_l+0x276>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f7ff bbaa 	b.w	80091d4 <_strtod_l+0x2ec>
 8009a80:	00000000 	.word	0x00000000
 8009a84:	bff00000 	.word	0xbff00000
 8009a88:	00000000 	.word	0x00000000
 8009a8c:	3ff00000 	.word	0x3ff00000
 8009a90:	94a03595 	.word	0x94a03595
 8009a94:	3fdfffff 	.word	0x3fdfffff
 8009a98:	35afe535 	.word	0x35afe535
 8009a9c:	3fe00000 	.word	0x3fe00000
 8009aa0:	ffc00000 	.word	0xffc00000
 8009aa4:	41dfffff 	.word	0x41dfffff
 8009aa8:	94a03595 	.word	0x94a03595
 8009aac:	3fcfffff 	.word	0x3fcfffff
 8009ab0:	3ff00000 	.word	0x3ff00000
 8009ab4:	3fe00000 	.word	0x3fe00000
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	7fe00000 	.word	0x7fe00000
 8009ac0:	7c9fffff 	.word	0x7c9fffff
 8009ac4:	7fefffff 	.word	0x7fefffff

08009ac8 <_strtod_r>:
 8009ac8:	4b01      	ldr	r3, [pc, #4]	; (8009ad0 <_strtod_r+0x8>)
 8009aca:	f7ff ba0d 	b.w	8008ee8 <_strtod_l>
 8009ace:	bf00      	nop
 8009ad0:	2000006c 	.word	0x2000006c

08009ad4 <_strtol_l.constprop.0>:
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ada:	d001      	beq.n	8009ae0 <_strtol_l.constprop.0+0xc>
 8009adc:	2b24      	cmp	r3, #36	; 0x24
 8009ade:	d906      	bls.n	8009aee <_strtol_l.constprop.0+0x1a>
 8009ae0:	f7fd fd8a 	bl	80075f8 <__errno>
 8009ae4:	2316      	movs	r3, #22
 8009ae6:	6003      	str	r3, [r0, #0]
 8009ae8:	2000      	movs	r0, #0
 8009aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009bd4 <_strtol_l.constprop.0+0x100>
 8009af2:	460d      	mov	r5, r1
 8009af4:	462e      	mov	r6, r5
 8009af6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009afa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009afe:	f017 0708 	ands.w	r7, r7, #8
 8009b02:	d1f7      	bne.n	8009af4 <_strtol_l.constprop.0+0x20>
 8009b04:	2c2d      	cmp	r4, #45	; 0x2d
 8009b06:	d132      	bne.n	8009b6e <_strtol_l.constprop.0+0x9a>
 8009b08:	782c      	ldrb	r4, [r5, #0]
 8009b0a:	2701      	movs	r7, #1
 8009b0c:	1cb5      	adds	r5, r6, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d05b      	beq.n	8009bca <_strtol_l.constprop.0+0xf6>
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d109      	bne.n	8009b2a <_strtol_l.constprop.0+0x56>
 8009b16:	2c30      	cmp	r4, #48	; 0x30
 8009b18:	d107      	bne.n	8009b2a <_strtol_l.constprop.0+0x56>
 8009b1a:	782c      	ldrb	r4, [r5, #0]
 8009b1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b20:	2c58      	cmp	r4, #88	; 0x58
 8009b22:	d14d      	bne.n	8009bc0 <_strtol_l.constprop.0+0xec>
 8009b24:	786c      	ldrb	r4, [r5, #1]
 8009b26:	2310      	movs	r3, #16
 8009b28:	3502      	adds	r5, #2
 8009b2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b32:	f04f 0e00 	mov.w	lr, #0
 8009b36:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b3a:	4676      	mov	r6, lr
 8009b3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009b40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009b44:	f1bc 0f09 	cmp.w	ip, #9
 8009b48:	d816      	bhi.n	8009b78 <_strtol_l.constprop.0+0xa4>
 8009b4a:	4664      	mov	r4, ip
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	dd24      	ble.n	8009b9a <_strtol_l.constprop.0+0xc6>
 8009b50:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b54:	d008      	beq.n	8009b68 <_strtol_l.constprop.0+0x94>
 8009b56:	45b1      	cmp	r9, r6
 8009b58:	d31c      	bcc.n	8009b94 <_strtol_l.constprop.0+0xc0>
 8009b5a:	d101      	bne.n	8009b60 <_strtol_l.constprop.0+0x8c>
 8009b5c:	45a2      	cmp	sl, r4
 8009b5e:	db19      	blt.n	8009b94 <_strtol_l.constprop.0+0xc0>
 8009b60:	fb06 4603 	mla	r6, r6, r3, r4
 8009b64:	f04f 0e01 	mov.w	lr, #1
 8009b68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b6c:	e7e8      	b.n	8009b40 <_strtol_l.constprop.0+0x6c>
 8009b6e:	2c2b      	cmp	r4, #43	; 0x2b
 8009b70:	bf04      	itt	eq
 8009b72:	782c      	ldrbeq	r4, [r5, #0]
 8009b74:	1cb5      	addeq	r5, r6, #2
 8009b76:	e7ca      	b.n	8009b0e <_strtol_l.constprop.0+0x3a>
 8009b78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009b7c:	f1bc 0f19 	cmp.w	ip, #25
 8009b80:	d801      	bhi.n	8009b86 <_strtol_l.constprop.0+0xb2>
 8009b82:	3c37      	subs	r4, #55	; 0x37
 8009b84:	e7e2      	b.n	8009b4c <_strtol_l.constprop.0+0x78>
 8009b86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b8a:	f1bc 0f19 	cmp.w	ip, #25
 8009b8e:	d804      	bhi.n	8009b9a <_strtol_l.constprop.0+0xc6>
 8009b90:	3c57      	subs	r4, #87	; 0x57
 8009b92:	e7db      	b.n	8009b4c <_strtol_l.constprop.0+0x78>
 8009b94:	f04f 3eff 	mov.w	lr, #4294967295
 8009b98:	e7e6      	b.n	8009b68 <_strtol_l.constprop.0+0x94>
 8009b9a:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b9e:	d105      	bne.n	8009bac <_strtol_l.constprop.0+0xd8>
 8009ba0:	2322      	movs	r3, #34	; 0x22
 8009ba2:	6003      	str	r3, [r0, #0]
 8009ba4:	4646      	mov	r6, r8
 8009ba6:	b942      	cbnz	r2, 8009bba <_strtol_l.constprop.0+0xe6>
 8009ba8:	4630      	mov	r0, r6
 8009baa:	e79e      	b.n	8009aea <_strtol_l.constprop.0+0x16>
 8009bac:	b107      	cbz	r7, 8009bb0 <_strtol_l.constprop.0+0xdc>
 8009bae:	4276      	negs	r6, r6
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	d0f9      	beq.n	8009ba8 <_strtol_l.constprop.0+0xd4>
 8009bb4:	f1be 0f00 	cmp.w	lr, #0
 8009bb8:	d000      	beq.n	8009bbc <_strtol_l.constprop.0+0xe8>
 8009bba:	1e69      	subs	r1, r5, #1
 8009bbc:	6011      	str	r1, [r2, #0]
 8009bbe:	e7f3      	b.n	8009ba8 <_strtol_l.constprop.0+0xd4>
 8009bc0:	2430      	movs	r4, #48	; 0x30
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1b1      	bne.n	8009b2a <_strtol_l.constprop.0+0x56>
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	e7af      	b.n	8009b2a <_strtol_l.constprop.0+0x56>
 8009bca:	2c30      	cmp	r4, #48	; 0x30
 8009bcc:	d0a5      	beq.n	8009b1a <_strtol_l.constprop.0+0x46>
 8009bce:	230a      	movs	r3, #10
 8009bd0:	e7ab      	b.n	8009b2a <_strtol_l.constprop.0+0x56>
 8009bd2:	bf00      	nop
 8009bd4:	0800c5a9 	.word	0x0800c5a9

08009bd8 <_strtol_r>:
 8009bd8:	f7ff bf7c 	b.w	8009ad4 <_strtol_l.constprop.0>

08009bdc <__ssputs_r>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	688e      	ldr	r6, [r1, #8]
 8009be2:	461f      	mov	r7, r3
 8009be4:	42be      	cmp	r6, r7
 8009be6:	680b      	ldr	r3, [r1, #0]
 8009be8:	4682      	mov	sl, r0
 8009bea:	460c      	mov	r4, r1
 8009bec:	4690      	mov	r8, r2
 8009bee:	d82c      	bhi.n	8009c4a <__ssputs_r+0x6e>
 8009bf0:	898a      	ldrh	r2, [r1, #12]
 8009bf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bf6:	d026      	beq.n	8009c46 <__ssputs_r+0x6a>
 8009bf8:	6965      	ldr	r5, [r4, #20]
 8009bfa:	6909      	ldr	r1, [r1, #16]
 8009bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c00:	eba3 0901 	sub.w	r9, r3, r1
 8009c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c08:	1c7b      	adds	r3, r7, #1
 8009c0a:	444b      	add	r3, r9
 8009c0c:	106d      	asrs	r5, r5, #1
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	bf38      	it	cc
 8009c12:	461d      	movcc	r5, r3
 8009c14:	0553      	lsls	r3, r2, #21
 8009c16:	d527      	bpl.n	8009c68 <__ssputs_r+0x8c>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7fe fc0f 	bl	800843c <_malloc_r>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	b360      	cbz	r0, 8009c7c <__ssputs_r+0xa0>
 8009c22:	6921      	ldr	r1, [r4, #16]
 8009c24:	464a      	mov	r2, r9
 8009c26:	f000 fc17 	bl	800a458 <memcpy>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	6126      	str	r6, [r4, #16]
 8009c38:	6165      	str	r5, [r4, #20]
 8009c3a:	444e      	add	r6, r9
 8009c3c:	eba5 0509 	sub.w	r5, r5, r9
 8009c40:	6026      	str	r6, [r4, #0]
 8009c42:	60a5      	str	r5, [r4, #8]
 8009c44:	463e      	mov	r6, r7
 8009c46:	42be      	cmp	r6, r7
 8009c48:	d900      	bls.n	8009c4c <__ssputs_r+0x70>
 8009c4a:	463e      	mov	r6, r7
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	4632      	mov	r2, r6
 8009c50:	4641      	mov	r1, r8
 8009c52:	f000 fba3 	bl	800a39c <memmove>
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	1b9b      	subs	r3, r3, r6
 8009c5a:	60a3      	str	r3, [r4, #8]
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	4433      	add	r3, r6
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	2000      	movs	r0, #0
 8009c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c68:	462a      	mov	r2, r5
 8009c6a:	f000 ffaa 	bl	800abc2 <_realloc_r>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d1e0      	bne.n	8009c36 <__ssputs_r+0x5a>
 8009c74:	6921      	ldr	r1, [r4, #16]
 8009c76:	4650      	mov	r0, sl
 8009c78:	f7fe fb6c 	bl	8008354 <_free_r>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	f8ca 3000 	str.w	r3, [sl]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	e7e9      	b.n	8009c64 <__ssputs_r+0x88>

08009c90 <_svfiprintf_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	4698      	mov	r8, r3
 8009c96:	898b      	ldrh	r3, [r1, #12]
 8009c98:	061b      	lsls	r3, r3, #24
 8009c9a:	b09d      	sub	sp, #116	; 0x74
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	d50e      	bpl.n	8009cc2 <_svfiprintf_r+0x32>
 8009ca4:	690b      	ldr	r3, [r1, #16]
 8009ca6:	b963      	cbnz	r3, 8009cc2 <_svfiprintf_r+0x32>
 8009ca8:	2140      	movs	r1, #64	; 0x40
 8009caa:	f7fe fbc7 	bl	800843c <_malloc_r>
 8009cae:	6028      	str	r0, [r5, #0]
 8009cb0:	6128      	str	r0, [r5, #16]
 8009cb2:	b920      	cbnz	r0, 8009cbe <_svfiprintf_r+0x2e>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	e0d0      	b.n	8009e60 <_svfiprintf_r+0x1d0>
 8009cbe:	2340      	movs	r3, #64	; 0x40
 8009cc0:	616b      	str	r3, [r5, #20]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc6:	2320      	movs	r3, #32
 8009cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd0:	2330      	movs	r3, #48	; 0x30
 8009cd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e78 <_svfiprintf_r+0x1e8>
 8009cd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cda:	f04f 0901 	mov.w	r9, #1
 8009cde:	4623      	mov	r3, r4
 8009ce0:	469a      	mov	sl, r3
 8009ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce6:	b10a      	cbz	r2, 8009cec <_svfiprintf_r+0x5c>
 8009ce8:	2a25      	cmp	r2, #37	; 0x25
 8009cea:	d1f9      	bne.n	8009ce0 <_svfiprintf_r+0x50>
 8009cec:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf0:	d00b      	beq.n	8009d0a <_svfiprintf_r+0x7a>
 8009cf2:	465b      	mov	r3, fp
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f7ff ff6f 	bl	8009bdc <__ssputs_r>
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f000 80a9 	beq.w	8009e56 <_svfiprintf_r+0x1c6>
 8009d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d06:	445a      	add	r2, fp
 8009d08:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 80a1 	beq.w	8009e56 <_svfiprintf_r+0x1c6>
 8009d14:	2300      	movs	r3, #0
 8009d16:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1e:	f10a 0a01 	add.w	sl, sl, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	9307      	str	r3, [sp, #28]
 8009d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d2c:	4654      	mov	r4, sl
 8009d2e:	2205      	movs	r2, #5
 8009d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d34:	4850      	ldr	r0, [pc, #320]	; (8009e78 <_svfiprintf_r+0x1e8>)
 8009d36:	f7f6 fa73 	bl	8000220 <memchr>
 8009d3a:	9a04      	ldr	r2, [sp, #16]
 8009d3c:	b9d8      	cbnz	r0, 8009d76 <_svfiprintf_r+0xe6>
 8009d3e:	06d0      	lsls	r0, r2, #27
 8009d40:	bf44      	itt	mi
 8009d42:	2320      	movmi	r3, #32
 8009d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d48:	0711      	lsls	r1, r2, #28
 8009d4a:	bf44      	itt	mi
 8009d4c:	232b      	movmi	r3, #43	; 0x2b
 8009d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d52:	f89a 3000 	ldrb.w	r3, [sl]
 8009d56:	2b2a      	cmp	r3, #42	; 0x2a
 8009d58:	d015      	beq.n	8009d86 <_svfiprintf_r+0xf6>
 8009d5a:	9a07      	ldr	r2, [sp, #28]
 8009d5c:	4654      	mov	r4, sl
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f04f 0c0a 	mov.w	ip, #10
 8009d64:	4621      	mov	r1, r4
 8009d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6a:	3b30      	subs	r3, #48	; 0x30
 8009d6c:	2b09      	cmp	r3, #9
 8009d6e:	d94d      	bls.n	8009e0c <_svfiprintf_r+0x17c>
 8009d70:	b1b0      	cbz	r0, 8009da0 <_svfiprintf_r+0x110>
 8009d72:	9207      	str	r2, [sp, #28]
 8009d74:	e014      	b.n	8009da0 <_svfiprintf_r+0x110>
 8009d76:	eba0 0308 	sub.w	r3, r0, r8
 8009d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	46a2      	mov	sl, r4
 8009d84:	e7d2      	b.n	8009d2c <_svfiprintf_r+0x9c>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	1d19      	adds	r1, r3, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	9103      	str	r1, [sp, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bfbb      	ittet	lt
 8009d92:	425b      	neglt	r3, r3
 8009d94:	f042 0202 	orrlt.w	r2, r2, #2
 8009d98:	9307      	strge	r3, [sp, #28]
 8009d9a:	9307      	strlt	r3, [sp, #28]
 8009d9c:	bfb8      	it	lt
 8009d9e:	9204      	strlt	r2, [sp, #16]
 8009da0:	7823      	ldrb	r3, [r4, #0]
 8009da2:	2b2e      	cmp	r3, #46	; 0x2e
 8009da4:	d10c      	bne.n	8009dc0 <_svfiprintf_r+0x130>
 8009da6:	7863      	ldrb	r3, [r4, #1]
 8009da8:	2b2a      	cmp	r3, #42	; 0x2a
 8009daa:	d134      	bne.n	8009e16 <_svfiprintf_r+0x186>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfb8      	it	lt
 8009db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dbc:	3402      	adds	r4, #2
 8009dbe:	9305      	str	r3, [sp, #20]
 8009dc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e88 <_svfiprintf_r+0x1f8>
 8009dc4:	7821      	ldrb	r1, [r4, #0]
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	4650      	mov	r0, sl
 8009dca:	f7f6 fa29 	bl	8000220 <memchr>
 8009dce:	b138      	cbz	r0, 8009de0 <_svfiprintf_r+0x150>
 8009dd0:	9b04      	ldr	r3, [sp, #16]
 8009dd2:	eba0 000a 	sub.w	r0, r0, sl
 8009dd6:	2240      	movs	r2, #64	; 0x40
 8009dd8:	4082      	lsls	r2, r0
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	3401      	adds	r4, #1
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	4825      	ldr	r0, [pc, #148]	; (8009e7c <_svfiprintf_r+0x1ec>)
 8009de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dea:	2206      	movs	r2, #6
 8009dec:	f7f6 fa18 	bl	8000220 <memchr>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d038      	beq.n	8009e66 <_svfiprintf_r+0x1d6>
 8009df4:	4b22      	ldr	r3, [pc, #136]	; (8009e80 <_svfiprintf_r+0x1f0>)
 8009df6:	bb1b      	cbnz	r3, 8009e40 <_svfiprintf_r+0x1b0>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	4433      	add	r3, r6
 8009e08:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0a:	e768      	b.n	8009cde <_svfiprintf_r+0x4e>
 8009e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e10:	460c      	mov	r4, r1
 8009e12:	2001      	movs	r0, #1
 8009e14:	e7a6      	b.n	8009d64 <_svfiprintf_r+0xd4>
 8009e16:	2300      	movs	r3, #0
 8009e18:	3401      	adds	r4, #1
 8009e1a:	9305      	str	r3, [sp, #20]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f04f 0c0a 	mov.w	ip, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	3a30      	subs	r2, #48	; 0x30
 8009e2a:	2a09      	cmp	r2, #9
 8009e2c:	d903      	bls.n	8009e36 <_svfiprintf_r+0x1a6>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0c6      	beq.n	8009dc0 <_svfiprintf_r+0x130>
 8009e32:	9105      	str	r1, [sp, #20]
 8009e34:	e7c4      	b.n	8009dc0 <_svfiprintf_r+0x130>
 8009e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e7f0      	b.n	8009e22 <_svfiprintf_r+0x192>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <_svfiprintf_r+0x1f4>)
 8009e48:	a904      	add	r1, sp, #16
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f7fc fb7c 	bl	8006548 <_printf_float>
 8009e50:	1c42      	adds	r2, r0, #1
 8009e52:	4606      	mov	r6, r0
 8009e54:	d1d6      	bne.n	8009e04 <_svfiprintf_r+0x174>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	065b      	lsls	r3, r3, #25
 8009e5a:	f53f af2d 	bmi.w	8009cb8 <_svfiprintf_r+0x28>
 8009e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e60:	b01d      	add	sp, #116	; 0x74
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	ab03      	add	r3, sp, #12
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <_svfiprintf_r+0x1f4>)
 8009e6e:	a904      	add	r1, sp, #16
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7fc fe0d 	bl	8006a90 <_printf_i>
 8009e76:	e7eb      	b.n	8009e50 <_svfiprintf_r+0x1c0>
 8009e78:	0800c6a9 	.word	0x0800c6a9
 8009e7c:	0800c6b3 	.word	0x0800c6b3
 8009e80:	08006549 	.word	0x08006549
 8009e84:	08009bdd 	.word	0x08009bdd
 8009e88:	0800c6af 	.word	0x0800c6af

08009e8c <__sfputc_r>:
 8009e8c:	6893      	ldr	r3, [r2, #8]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	b410      	push	{r4}
 8009e94:	6093      	str	r3, [r2, #8]
 8009e96:	da08      	bge.n	8009eaa <__sfputc_r+0x1e>
 8009e98:	6994      	ldr	r4, [r2, #24]
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	db01      	blt.n	8009ea2 <__sfputc_r+0x16>
 8009e9e:	290a      	cmp	r1, #10
 8009ea0:	d103      	bne.n	8009eaa <__sfputc_r+0x1e>
 8009ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea6:	f7fd bac0 	b.w	800742a <__swbuf_r>
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	1c58      	adds	r0, r3, #1
 8009eae:	6010      	str	r0, [r2, #0]
 8009eb0:	7019      	strb	r1, [r3, #0]
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <__sfputs_r>:
 8009eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	18d5      	adds	r5, r2, r3
 8009ec4:	42ac      	cmp	r4, r5
 8009ec6:	d101      	bne.n	8009ecc <__sfputs_r+0x12>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e007      	b.n	8009edc <__sfputs_r+0x22>
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	463a      	mov	r2, r7
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ffda 	bl	8009e8c <__sfputc_r>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d1f3      	bne.n	8009ec4 <__sfputs_r+0xa>
 8009edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee0 <_vfiprintf_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	b09d      	sub	sp, #116	; 0x74
 8009ee8:	4614      	mov	r4, r2
 8009eea:	4698      	mov	r8, r3
 8009eec:	4606      	mov	r6, r0
 8009eee:	b118      	cbz	r0, 8009ef8 <_vfiprintf_r+0x18>
 8009ef0:	6a03      	ldr	r3, [r0, #32]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x18>
 8009ef4:	f7fd f98a 	bl	800720c <__sinit>
 8009ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009efa:	07d9      	lsls	r1, r3, #31
 8009efc:	d405      	bmi.n	8009f0a <_vfiprintf_r+0x2a>
 8009efe:	89ab      	ldrh	r3, [r5, #12]
 8009f00:	059a      	lsls	r2, r3, #22
 8009f02:	d402      	bmi.n	8009f0a <_vfiprintf_r+0x2a>
 8009f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f06:	f7fd fba2 	bl	800764e <__retarget_lock_acquire_recursive>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	071b      	lsls	r3, r3, #28
 8009f0e:	d501      	bpl.n	8009f14 <_vfiprintf_r+0x34>
 8009f10:	692b      	ldr	r3, [r5, #16]
 8009f12:	b99b      	cbnz	r3, 8009f3c <_vfiprintf_r+0x5c>
 8009f14:	4629      	mov	r1, r5
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7fd fac4 	bl	80074a4 <__swsetup_r>
 8009f1c:	b170      	cbz	r0, 8009f3c <_vfiprintf_r+0x5c>
 8009f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f20:	07dc      	lsls	r4, r3, #31
 8009f22:	d504      	bpl.n	8009f2e <_vfiprintf_r+0x4e>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	b01d      	add	sp, #116	; 0x74
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	89ab      	ldrh	r3, [r5, #12]
 8009f30:	0598      	lsls	r0, r3, #22
 8009f32:	d4f7      	bmi.n	8009f24 <_vfiprintf_r+0x44>
 8009f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f36:	f7fd fb8b 	bl	8007650 <__retarget_lock_release_recursive>
 8009f3a:	e7f3      	b.n	8009f24 <_vfiprintf_r+0x44>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f40:	2320      	movs	r3, #32
 8009f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f4a:	2330      	movs	r3, #48	; 0x30
 8009f4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a100 <_vfiprintf_r+0x220>
 8009f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f54:	f04f 0901 	mov.w	r9, #1
 8009f58:	4623      	mov	r3, r4
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f60:	b10a      	cbz	r2, 8009f66 <_vfiprintf_r+0x86>
 8009f62:	2a25      	cmp	r2, #37	; 0x25
 8009f64:	d1f9      	bne.n	8009f5a <_vfiprintf_r+0x7a>
 8009f66:	ebba 0b04 	subs.w	fp, sl, r4
 8009f6a:	d00b      	beq.n	8009f84 <_vfiprintf_r+0xa4>
 8009f6c:	465b      	mov	r3, fp
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7ff ffa1 	bl	8009eba <__sfputs_r>
 8009f78:	3001      	adds	r0, #1
 8009f7a:	f000 80a9 	beq.w	800a0d0 <_vfiprintf_r+0x1f0>
 8009f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f80:	445a      	add	r2, fp
 8009f82:	9209      	str	r2, [sp, #36]	; 0x24
 8009f84:	f89a 3000 	ldrb.w	r3, [sl]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 80a1 	beq.w	800a0d0 <_vfiprintf_r+0x1f0>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f04f 32ff 	mov.w	r2, #4294967295
 8009f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f98:	f10a 0a01 	add.w	sl, sl, #1
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	9307      	str	r3, [sp, #28]
 8009fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fa6:	4654      	mov	r4, sl
 8009fa8:	2205      	movs	r2, #5
 8009faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fae:	4854      	ldr	r0, [pc, #336]	; (800a100 <_vfiprintf_r+0x220>)
 8009fb0:	f7f6 f936 	bl	8000220 <memchr>
 8009fb4:	9a04      	ldr	r2, [sp, #16]
 8009fb6:	b9d8      	cbnz	r0, 8009ff0 <_vfiprintf_r+0x110>
 8009fb8:	06d1      	lsls	r1, r2, #27
 8009fba:	bf44      	itt	mi
 8009fbc:	2320      	movmi	r3, #32
 8009fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc2:	0713      	lsls	r3, r2, #28
 8009fc4:	bf44      	itt	mi
 8009fc6:	232b      	movmi	r3, #43	; 0x2b
 8009fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fd2:	d015      	beq.n	800a000 <_vfiprintf_r+0x120>
 8009fd4:	9a07      	ldr	r2, [sp, #28]
 8009fd6:	4654      	mov	r4, sl
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f04f 0c0a 	mov.w	ip, #10
 8009fde:	4621      	mov	r1, r4
 8009fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe4:	3b30      	subs	r3, #48	; 0x30
 8009fe6:	2b09      	cmp	r3, #9
 8009fe8:	d94d      	bls.n	800a086 <_vfiprintf_r+0x1a6>
 8009fea:	b1b0      	cbz	r0, 800a01a <_vfiprintf_r+0x13a>
 8009fec:	9207      	str	r2, [sp, #28]
 8009fee:	e014      	b.n	800a01a <_vfiprintf_r+0x13a>
 8009ff0:	eba0 0308 	sub.w	r3, r0, r8
 8009ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	46a2      	mov	sl, r4
 8009ffe:	e7d2      	b.n	8009fa6 <_vfiprintf_r+0xc6>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	1d19      	adds	r1, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	9103      	str	r1, [sp, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfbb      	ittet	lt
 800a00c:	425b      	neglt	r3, r3
 800a00e:	f042 0202 	orrlt.w	r2, r2, #2
 800a012:	9307      	strge	r3, [sp, #28]
 800a014:	9307      	strlt	r3, [sp, #28]
 800a016:	bfb8      	it	lt
 800a018:	9204      	strlt	r2, [sp, #16]
 800a01a:	7823      	ldrb	r3, [r4, #0]
 800a01c:	2b2e      	cmp	r3, #46	; 0x2e
 800a01e:	d10c      	bne.n	800a03a <_vfiprintf_r+0x15a>
 800a020:	7863      	ldrb	r3, [r4, #1]
 800a022:	2b2a      	cmp	r3, #42	; 0x2a
 800a024:	d134      	bne.n	800a090 <_vfiprintf_r+0x1b0>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	1d1a      	adds	r2, r3, #4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	9203      	str	r2, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfb8      	it	lt
 800a032:	f04f 33ff 	movlt.w	r3, #4294967295
 800a036:	3402      	adds	r4, #2
 800a038:	9305      	str	r3, [sp, #20]
 800a03a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a110 <_vfiprintf_r+0x230>
 800a03e:	7821      	ldrb	r1, [r4, #0]
 800a040:	2203      	movs	r2, #3
 800a042:	4650      	mov	r0, sl
 800a044:	f7f6 f8ec 	bl	8000220 <memchr>
 800a048:	b138      	cbz	r0, 800a05a <_vfiprintf_r+0x17a>
 800a04a:	9b04      	ldr	r3, [sp, #16]
 800a04c:	eba0 000a 	sub.w	r0, r0, sl
 800a050:	2240      	movs	r2, #64	; 0x40
 800a052:	4082      	lsls	r2, r0
 800a054:	4313      	orrs	r3, r2
 800a056:	3401      	adds	r4, #1
 800a058:	9304      	str	r3, [sp, #16]
 800a05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05e:	4829      	ldr	r0, [pc, #164]	; (800a104 <_vfiprintf_r+0x224>)
 800a060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a064:	2206      	movs	r2, #6
 800a066:	f7f6 f8db 	bl	8000220 <memchr>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d03f      	beq.n	800a0ee <_vfiprintf_r+0x20e>
 800a06e:	4b26      	ldr	r3, [pc, #152]	; (800a108 <_vfiprintf_r+0x228>)
 800a070:	bb1b      	cbnz	r3, 800a0ba <_vfiprintf_r+0x1da>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	3307      	adds	r3, #7
 800a076:	f023 0307 	bic.w	r3, r3, #7
 800a07a:	3308      	adds	r3, #8
 800a07c:	9303      	str	r3, [sp, #12]
 800a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a080:	443b      	add	r3, r7
 800a082:	9309      	str	r3, [sp, #36]	; 0x24
 800a084:	e768      	b.n	8009f58 <_vfiprintf_r+0x78>
 800a086:	fb0c 3202 	mla	r2, ip, r2, r3
 800a08a:	460c      	mov	r4, r1
 800a08c:	2001      	movs	r0, #1
 800a08e:	e7a6      	b.n	8009fde <_vfiprintf_r+0xfe>
 800a090:	2300      	movs	r3, #0
 800a092:	3401      	adds	r4, #1
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	4619      	mov	r1, r3
 800a098:	f04f 0c0a 	mov.w	ip, #10
 800a09c:	4620      	mov	r0, r4
 800a09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a2:	3a30      	subs	r2, #48	; 0x30
 800a0a4:	2a09      	cmp	r2, #9
 800a0a6:	d903      	bls.n	800a0b0 <_vfiprintf_r+0x1d0>
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0c6      	beq.n	800a03a <_vfiprintf_r+0x15a>
 800a0ac:	9105      	str	r1, [sp, #20]
 800a0ae:	e7c4      	b.n	800a03a <_vfiprintf_r+0x15a>
 800a0b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e7f0      	b.n	800a09c <_vfiprintf_r+0x1bc>
 800a0ba:	ab03      	add	r3, sp, #12
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4b12      	ldr	r3, [pc, #72]	; (800a10c <_vfiprintf_r+0x22c>)
 800a0c2:	a904      	add	r1, sp, #16
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7fc fa3f 	bl	8006548 <_printf_float>
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	1c78      	adds	r0, r7, #1
 800a0ce:	d1d6      	bne.n	800a07e <_vfiprintf_r+0x19e>
 800a0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d2:	07d9      	lsls	r1, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <_vfiprintf_r+0x202>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	059a      	lsls	r2, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_vfiprintf_r+0x202>
 800a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0de:	f7fd fab7 	bl	8007650 <__retarget_lock_release_recursive>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	065b      	lsls	r3, r3, #25
 800a0e6:	f53f af1d 	bmi.w	8009f24 <_vfiprintf_r+0x44>
 800a0ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0ec:	e71c      	b.n	8009f28 <_vfiprintf_r+0x48>
 800a0ee:	ab03      	add	r3, sp, #12
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <_vfiprintf_r+0x22c>)
 800a0f6:	a904      	add	r1, sp, #16
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7fc fcc9 	bl	8006a90 <_printf_i>
 800a0fe:	e7e4      	b.n	800a0ca <_vfiprintf_r+0x1ea>
 800a100:	0800c6a9 	.word	0x0800c6a9
 800a104:	0800c6b3 	.word	0x0800c6b3
 800a108:	08006549 	.word	0x08006549
 800a10c:	08009ebb 	.word	0x08009ebb
 800a110:	0800c6af 	.word	0x0800c6af

0800a114 <__sflush_r>:
 800a114:	898a      	ldrh	r2, [r1, #12]
 800a116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	4605      	mov	r5, r0
 800a11c:	0710      	lsls	r0, r2, #28
 800a11e:	460c      	mov	r4, r1
 800a120:	d458      	bmi.n	800a1d4 <__sflush_r+0xc0>
 800a122:	684b      	ldr	r3, [r1, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	dc05      	bgt.n	800a134 <__sflush_r+0x20>
 800a128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dc02      	bgt.n	800a134 <__sflush_r+0x20>
 800a12e:	2000      	movs	r0, #0
 800a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a136:	2e00      	cmp	r6, #0
 800a138:	d0f9      	beq.n	800a12e <__sflush_r+0x1a>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a140:	682f      	ldr	r7, [r5, #0]
 800a142:	6a21      	ldr	r1, [r4, #32]
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	d032      	beq.n	800a1ae <__sflush_r+0x9a>
 800a148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	075a      	lsls	r2, r3, #29
 800a14e:	d505      	bpl.n	800a15c <__sflush_r+0x48>
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	1ac0      	subs	r0, r0, r3
 800a154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a156:	b10b      	cbz	r3, 800a15c <__sflush_r+0x48>
 800a158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a15a:	1ac0      	subs	r0, r0, r3
 800a15c:	2300      	movs	r3, #0
 800a15e:	4602      	mov	r2, r0
 800a160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a162:	6a21      	ldr	r1, [r4, #32]
 800a164:	4628      	mov	r0, r5
 800a166:	47b0      	blx	r6
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	d106      	bne.n	800a17c <__sflush_r+0x68>
 800a16e:	6829      	ldr	r1, [r5, #0]
 800a170:	291d      	cmp	r1, #29
 800a172:	d82b      	bhi.n	800a1cc <__sflush_r+0xb8>
 800a174:	4a29      	ldr	r2, [pc, #164]	; (800a21c <__sflush_r+0x108>)
 800a176:	410a      	asrs	r2, r1
 800a178:	07d6      	lsls	r6, r2, #31
 800a17a:	d427      	bmi.n	800a1cc <__sflush_r+0xb8>
 800a17c:	2200      	movs	r2, #0
 800a17e:	6062      	str	r2, [r4, #4]
 800a180:	04d9      	lsls	r1, r3, #19
 800a182:	6922      	ldr	r2, [r4, #16]
 800a184:	6022      	str	r2, [r4, #0]
 800a186:	d504      	bpl.n	800a192 <__sflush_r+0x7e>
 800a188:	1c42      	adds	r2, r0, #1
 800a18a:	d101      	bne.n	800a190 <__sflush_r+0x7c>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b903      	cbnz	r3, 800a192 <__sflush_r+0x7e>
 800a190:	6560      	str	r0, [r4, #84]	; 0x54
 800a192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a194:	602f      	str	r7, [r5, #0]
 800a196:	2900      	cmp	r1, #0
 800a198:	d0c9      	beq.n	800a12e <__sflush_r+0x1a>
 800a19a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a19e:	4299      	cmp	r1, r3
 800a1a0:	d002      	beq.n	800a1a8 <__sflush_r+0x94>
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7fe f8d6 	bl	8008354 <_free_r>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ac:	e7c0      	b.n	800a130 <__sflush_r+0x1c>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b0      	blx	r6
 800a1b4:	1c41      	adds	r1, r0, #1
 800a1b6:	d1c8      	bne.n	800a14a <__sflush_r+0x36>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0c5      	beq.n	800a14a <__sflush_r+0x36>
 800a1be:	2b1d      	cmp	r3, #29
 800a1c0:	d001      	beq.n	800a1c6 <__sflush_r+0xb2>
 800a1c2:	2b16      	cmp	r3, #22
 800a1c4:	d101      	bne.n	800a1ca <__sflush_r+0xb6>
 800a1c6:	602f      	str	r7, [r5, #0]
 800a1c8:	e7b1      	b.n	800a12e <__sflush_r+0x1a>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	e7ad      	b.n	800a130 <__sflush_r+0x1c>
 800a1d4:	690f      	ldr	r7, [r1, #16]
 800a1d6:	2f00      	cmp	r7, #0
 800a1d8:	d0a9      	beq.n	800a12e <__sflush_r+0x1a>
 800a1da:	0793      	lsls	r3, r2, #30
 800a1dc:	680e      	ldr	r6, [r1, #0]
 800a1de:	bf08      	it	eq
 800a1e0:	694b      	ldreq	r3, [r1, #20]
 800a1e2:	600f      	str	r7, [r1, #0]
 800a1e4:	bf18      	it	ne
 800a1e6:	2300      	movne	r3, #0
 800a1e8:	eba6 0807 	sub.w	r8, r6, r7
 800a1ec:	608b      	str	r3, [r1, #8]
 800a1ee:	f1b8 0f00 	cmp.w	r8, #0
 800a1f2:	dd9c      	ble.n	800a12e <__sflush_r+0x1a>
 800a1f4:	6a21      	ldr	r1, [r4, #32]
 800a1f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1f8:	4643      	mov	r3, r8
 800a1fa:	463a      	mov	r2, r7
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b0      	blx	r6
 800a200:	2800      	cmp	r0, #0
 800a202:	dc06      	bgt.n	800a212 <__sflush_r+0xfe>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	e78e      	b.n	800a130 <__sflush_r+0x1c>
 800a212:	4407      	add	r7, r0
 800a214:	eba8 0800 	sub.w	r8, r8, r0
 800a218:	e7e9      	b.n	800a1ee <__sflush_r+0xda>
 800a21a:	bf00      	nop
 800a21c:	dfbffffe 	.word	0xdfbffffe

0800a220 <_fflush_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	690b      	ldr	r3, [r1, #16]
 800a224:	4605      	mov	r5, r0
 800a226:	460c      	mov	r4, r1
 800a228:	b913      	cbnz	r3, 800a230 <_fflush_r+0x10>
 800a22a:	2500      	movs	r5, #0
 800a22c:	4628      	mov	r0, r5
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	b118      	cbz	r0, 800a23a <_fflush_r+0x1a>
 800a232:	6a03      	ldr	r3, [r0, #32]
 800a234:	b90b      	cbnz	r3, 800a23a <_fflush_r+0x1a>
 800a236:	f7fc ffe9 	bl	800720c <__sinit>
 800a23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f3      	beq.n	800a22a <_fflush_r+0xa>
 800a242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a244:	07d0      	lsls	r0, r2, #31
 800a246:	d404      	bmi.n	800a252 <_fflush_r+0x32>
 800a248:	0599      	lsls	r1, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_fflush_r+0x32>
 800a24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a24e:	f7fd f9fe 	bl	800764e <__retarget_lock_acquire_recursive>
 800a252:	4628      	mov	r0, r5
 800a254:	4621      	mov	r1, r4
 800a256:	f7ff ff5d 	bl	800a114 <__sflush_r>
 800a25a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a25c:	07da      	lsls	r2, r3, #31
 800a25e:	4605      	mov	r5, r0
 800a260:	d4e4      	bmi.n	800a22c <_fflush_r+0xc>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	059b      	lsls	r3, r3, #22
 800a266:	d4e1      	bmi.n	800a22c <_fflush_r+0xc>
 800a268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26a:	f7fd f9f1 	bl	8007650 <__retarget_lock_release_recursive>
 800a26e:	e7dd      	b.n	800a22c <_fflush_r+0xc>

0800a270 <__swhatbuf_r>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	460c      	mov	r4, r1
 800a274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a278:	2900      	cmp	r1, #0
 800a27a:	b096      	sub	sp, #88	; 0x58
 800a27c:	4615      	mov	r5, r2
 800a27e:	461e      	mov	r6, r3
 800a280:	da0d      	bge.n	800a29e <__swhatbuf_r+0x2e>
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a288:	f04f 0100 	mov.w	r1, #0
 800a28c:	bf0c      	ite	eq
 800a28e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a292:	2340      	movne	r3, #64	; 0x40
 800a294:	2000      	movs	r0, #0
 800a296:	6031      	str	r1, [r6, #0]
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	b016      	add	sp, #88	; 0x58
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
 800a29e:	466a      	mov	r2, sp
 800a2a0:	f000 f8a8 	bl	800a3f4 <_fstat_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	dbec      	blt.n	800a282 <__swhatbuf_r+0x12>
 800a2a8:	9901      	ldr	r1, [sp, #4]
 800a2aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a2ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a2b2:	4259      	negs	r1, r3
 800a2b4:	4159      	adcs	r1, r3
 800a2b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ba:	e7eb      	b.n	800a294 <__swhatbuf_r+0x24>

0800a2bc <__smakebuf_r>:
 800a2bc:	898b      	ldrh	r3, [r1, #12]
 800a2be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2c0:	079d      	lsls	r5, r3, #30
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	d507      	bpl.n	800a2d8 <__smakebuf_r+0x1c>
 800a2c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	6163      	str	r3, [r4, #20]
 800a2d4:	b002      	add	sp, #8
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	ab01      	add	r3, sp, #4
 800a2da:	466a      	mov	r2, sp
 800a2dc:	f7ff ffc8 	bl	800a270 <__swhatbuf_r>
 800a2e0:	9900      	ldr	r1, [sp, #0]
 800a2e2:	4605      	mov	r5, r0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7fe f8a9 	bl	800843c <_malloc_r>
 800a2ea:	b948      	cbnz	r0, 800a300 <__smakebuf_r+0x44>
 800a2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f0:	059a      	lsls	r2, r3, #22
 800a2f2:	d4ef      	bmi.n	800a2d4 <__smakebuf_r+0x18>
 800a2f4:	f023 0303 	bic.w	r3, r3, #3
 800a2f8:	f043 0302 	orr.w	r3, r3, #2
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	e7e3      	b.n	800a2c8 <__smakebuf_r+0xc>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	6020      	str	r0, [r4, #0]
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	6163      	str	r3, [r4, #20]
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	6120      	str	r0, [r4, #16]
 800a312:	b15b      	cbz	r3, 800a32c <__smakebuf_r+0x70>
 800a314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f87d 	bl	800a418 <_isatty_r>
 800a31e:	b128      	cbz	r0, 800a32c <__smakebuf_r+0x70>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f023 0303 	bic.w	r3, r3, #3
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	431d      	orrs	r5, r3
 800a330:	81a5      	strh	r5, [r4, #12]
 800a332:	e7cf      	b.n	800a2d4 <__smakebuf_r+0x18>

0800a334 <_putc_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	460d      	mov	r5, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	4606      	mov	r6, r0
 800a33c:	b118      	cbz	r0, 800a346 <_putc_r+0x12>
 800a33e:	6a03      	ldr	r3, [r0, #32]
 800a340:	b90b      	cbnz	r3, 800a346 <_putc_r+0x12>
 800a342:	f7fc ff63 	bl	800720c <__sinit>
 800a346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a348:	07d8      	lsls	r0, r3, #31
 800a34a:	d405      	bmi.n	800a358 <_putc_r+0x24>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	0599      	lsls	r1, r3, #22
 800a350:	d402      	bmi.n	800a358 <_putc_r+0x24>
 800a352:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a354:	f7fd f97b 	bl	800764e <__retarget_lock_acquire_recursive>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	60a3      	str	r3, [r4, #8]
 800a360:	da05      	bge.n	800a36e <_putc_r+0x3a>
 800a362:	69a2      	ldr	r2, [r4, #24]
 800a364:	4293      	cmp	r3, r2
 800a366:	db12      	blt.n	800a38e <_putc_r+0x5a>
 800a368:	b2eb      	uxtb	r3, r5
 800a36a:	2b0a      	cmp	r3, #10
 800a36c:	d00f      	beq.n	800a38e <_putc_r+0x5a>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	6022      	str	r2, [r4, #0]
 800a374:	701d      	strb	r5, [r3, #0]
 800a376:	b2ed      	uxtb	r5, r5
 800a378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a37a:	07da      	lsls	r2, r3, #31
 800a37c:	d405      	bmi.n	800a38a <_putc_r+0x56>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	059b      	lsls	r3, r3, #22
 800a382:	d402      	bmi.n	800a38a <_putc_r+0x56>
 800a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a386:	f7fd f963 	bl	8007650 <__retarget_lock_release_recursive>
 800a38a:	4628      	mov	r0, r5
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	4629      	mov	r1, r5
 800a390:	4622      	mov	r2, r4
 800a392:	4630      	mov	r0, r6
 800a394:	f7fd f849 	bl	800742a <__swbuf_r>
 800a398:	4605      	mov	r5, r0
 800a39a:	e7ed      	b.n	800a378 <_putc_r+0x44>

0800a39c <memmove>:
 800a39c:	4288      	cmp	r0, r1
 800a39e:	b510      	push	{r4, lr}
 800a3a0:	eb01 0402 	add.w	r4, r1, r2
 800a3a4:	d902      	bls.n	800a3ac <memmove+0x10>
 800a3a6:	4284      	cmp	r4, r0
 800a3a8:	4623      	mov	r3, r4
 800a3aa:	d807      	bhi.n	800a3bc <memmove+0x20>
 800a3ac:	1e43      	subs	r3, r0, #1
 800a3ae:	42a1      	cmp	r1, r4
 800a3b0:	d008      	beq.n	800a3c4 <memmove+0x28>
 800a3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ba:	e7f8      	b.n	800a3ae <memmove+0x12>
 800a3bc:	4402      	add	r2, r0
 800a3be:	4601      	mov	r1, r0
 800a3c0:	428a      	cmp	r2, r1
 800a3c2:	d100      	bne.n	800a3c6 <memmove+0x2a>
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3ce:	e7f7      	b.n	800a3c0 <memmove+0x24>

0800a3d0 <strncmp>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	b16a      	cbz	r2, 800a3f0 <strncmp+0x20>
 800a3d4:	3901      	subs	r1, #1
 800a3d6:	1884      	adds	r4, r0, r2
 800a3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d103      	bne.n	800a3ec <strncmp+0x1c>
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d001      	beq.n	800a3ec <strncmp+0x1c>
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d1f5      	bne.n	800a3d8 <strncmp+0x8>
 800a3ec:	1ad0      	subs	r0, r2, r3
 800a3ee:	bd10      	pop	{r4, pc}
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	e7fc      	b.n	800a3ee <strncmp+0x1e>

0800a3f4 <_fstat_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	; (800a414 <_fstat_r+0x20>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4611      	mov	r1, r2
 800a400:	602b      	str	r3, [r5, #0]
 800a402:	f7f8 f9f6 	bl	80027f2 <_fstat>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	d102      	bne.n	800a410 <_fstat_r+0x1c>
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	b103      	cbz	r3, 800a410 <_fstat_r+0x1c>
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	bf00      	nop
 800a414:	20000988 	.word	0x20000988

0800a418 <_isatty_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d06      	ldr	r5, [pc, #24]	; (800a434 <_isatty_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f8 f9f5 	bl	8002812 <_isatty>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_isatty_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_isatty_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	20000988 	.word	0x20000988

0800a438 <_sbrk_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d06      	ldr	r5, [pc, #24]	; (800a454 <_sbrk_r+0x1c>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f8 f9fe 	bl	8002844 <_sbrk>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_sbrk_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_sbrk_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	20000988 	.word	0x20000988

0800a458 <memcpy>:
 800a458:	440a      	add	r2, r1
 800a45a:	4291      	cmp	r1, r2
 800a45c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a460:	d100      	bne.n	800a464 <memcpy+0xc>
 800a462:	4770      	bx	lr
 800a464:	b510      	push	{r4, lr}
 800a466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a46a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a46e:	4291      	cmp	r1, r2
 800a470:	d1f9      	bne.n	800a466 <memcpy+0xe>
 800a472:	bd10      	pop	{r4, pc}
 800a474:	0000      	movs	r0, r0
	...

0800a478 <nan>:
 800a478:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a480 <nan+0x8>
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	00000000 	.word	0x00000000
 800a484:	7ff80000 	.word	0x7ff80000

0800a488 <__assert_func>:
 800a488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a48a:	4614      	mov	r4, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <__assert_func+0x2c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4605      	mov	r5, r0
 800a494:	68d8      	ldr	r0, [r3, #12]
 800a496:	b14c      	cbz	r4, 800a4ac <__assert_func+0x24>
 800a498:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <__assert_func+0x30>)
 800a49a:	9100      	str	r1, [sp, #0]
 800a49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4a0:	4906      	ldr	r1, [pc, #24]	; (800a4bc <__assert_func+0x34>)
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	f000 fbca 	bl	800ac3c <fiprintf>
 800a4a8:	f000 fbda 	bl	800ac60 <abort>
 800a4ac:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <__assert_func+0x38>)
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	e7f3      	b.n	800a49a <__assert_func+0x12>
 800a4b2:	bf00      	nop
 800a4b4:	20000068 	.word	0x20000068
 800a4b8:	0800c6c2 	.word	0x0800c6c2
 800a4bc:	0800c6cf 	.word	0x0800c6cf
 800a4c0:	0800c6fd 	.word	0x0800c6fd

0800a4c4 <_calloc_r>:
 800a4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a4ca:	b94c      	cbnz	r4, 800a4e0 <_calloc_r+0x1c>
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	9201      	str	r2, [sp, #4]
 800a4d0:	f7fd ffb4 	bl	800843c <_malloc_r>
 800a4d4:	9a01      	ldr	r2, [sp, #4]
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	b930      	cbnz	r0, 800a4e8 <_calloc_r+0x24>
 800a4da:	4628      	mov	r0, r5
 800a4dc:	b003      	add	sp, #12
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	220c      	movs	r2, #12
 800a4e2:	6002      	str	r2, [r0, #0]
 800a4e4:	2500      	movs	r5, #0
 800a4e6:	e7f8      	b.n	800a4da <_calloc_r+0x16>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f7fd f833 	bl	8007554 <memset>
 800a4ee:	e7f4      	b.n	800a4da <_calloc_r+0x16>

0800a4f0 <rshift>:
 800a4f0:	6903      	ldr	r3, [r0, #16]
 800a4f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4fe:	f100 0414 	add.w	r4, r0, #20
 800a502:	dd45      	ble.n	800a590 <rshift+0xa0>
 800a504:	f011 011f 	ands.w	r1, r1, #31
 800a508:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a50c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a510:	d10c      	bne.n	800a52c <rshift+0x3c>
 800a512:	f100 0710 	add.w	r7, r0, #16
 800a516:	4629      	mov	r1, r5
 800a518:	42b1      	cmp	r1, r6
 800a51a:	d334      	bcc.n	800a586 <rshift+0x96>
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	1eea      	subs	r2, r5, #3
 800a522:	4296      	cmp	r6, r2
 800a524:	bf38      	it	cc
 800a526:	2300      	movcc	r3, #0
 800a528:	4423      	add	r3, r4
 800a52a:	e015      	b.n	800a558 <rshift+0x68>
 800a52c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a530:	f1c1 0820 	rsb	r8, r1, #32
 800a534:	40cf      	lsrs	r7, r1
 800a536:	f105 0e04 	add.w	lr, r5, #4
 800a53a:	46a1      	mov	r9, r4
 800a53c:	4576      	cmp	r6, lr
 800a53e:	46f4      	mov	ip, lr
 800a540:	d815      	bhi.n	800a56e <rshift+0x7e>
 800a542:	1a9a      	subs	r2, r3, r2
 800a544:	0092      	lsls	r2, r2, #2
 800a546:	3a04      	subs	r2, #4
 800a548:	3501      	adds	r5, #1
 800a54a:	42ae      	cmp	r6, r5
 800a54c:	bf38      	it	cc
 800a54e:	2200      	movcc	r2, #0
 800a550:	18a3      	adds	r3, r4, r2
 800a552:	50a7      	str	r7, [r4, r2]
 800a554:	b107      	cbz	r7, 800a558 <rshift+0x68>
 800a556:	3304      	adds	r3, #4
 800a558:	1b1a      	subs	r2, r3, r4
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a560:	bf08      	it	eq
 800a562:	2300      	moveq	r3, #0
 800a564:	6102      	str	r2, [r0, #16]
 800a566:	bf08      	it	eq
 800a568:	6143      	streq	r3, [r0, #20]
 800a56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a56e:	f8dc c000 	ldr.w	ip, [ip]
 800a572:	fa0c fc08 	lsl.w	ip, ip, r8
 800a576:	ea4c 0707 	orr.w	r7, ip, r7
 800a57a:	f849 7b04 	str.w	r7, [r9], #4
 800a57e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a582:	40cf      	lsrs	r7, r1
 800a584:	e7da      	b.n	800a53c <rshift+0x4c>
 800a586:	f851 cb04 	ldr.w	ip, [r1], #4
 800a58a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a58e:	e7c3      	b.n	800a518 <rshift+0x28>
 800a590:	4623      	mov	r3, r4
 800a592:	e7e1      	b.n	800a558 <rshift+0x68>

0800a594 <__hexdig_fun>:
 800a594:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a598:	2b09      	cmp	r3, #9
 800a59a:	d802      	bhi.n	800a5a2 <__hexdig_fun+0xe>
 800a59c:	3820      	subs	r0, #32
 800a59e:	b2c0      	uxtb	r0, r0
 800a5a0:	4770      	bx	lr
 800a5a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5a6:	2b05      	cmp	r3, #5
 800a5a8:	d801      	bhi.n	800a5ae <__hexdig_fun+0x1a>
 800a5aa:	3847      	subs	r0, #71	; 0x47
 800a5ac:	e7f7      	b.n	800a59e <__hexdig_fun+0xa>
 800a5ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d801      	bhi.n	800a5ba <__hexdig_fun+0x26>
 800a5b6:	3827      	subs	r0, #39	; 0x27
 800a5b8:	e7f1      	b.n	800a59e <__hexdig_fun+0xa>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <__gethex>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	4617      	mov	r7, r2
 800a5c6:	680a      	ldr	r2, [r1, #0]
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	f102 0b02 	add.w	fp, r2, #2
 800a5ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5d6:	4681      	mov	r9, r0
 800a5d8:	468a      	mov	sl, r1
 800a5da:	9302      	str	r3, [sp, #8]
 800a5dc:	32fe      	adds	r2, #254	; 0xfe
 800a5de:	eb02 030b 	add.w	r3, r2, fp
 800a5e2:	46d8      	mov	r8, fp
 800a5e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	2830      	cmp	r0, #48	; 0x30
 800a5ec:	d0f7      	beq.n	800a5de <__gethex+0x1e>
 800a5ee:	f7ff ffd1 	bl	800a594 <__hexdig_fun>
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d138      	bne.n	800a66a <__gethex+0xaa>
 800a5f8:	49a7      	ldr	r1, [pc, #668]	; (800a898 <__gethex+0x2d8>)
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	f7ff fee7 	bl	800a3d0 <strncmp>
 800a602:	4606      	mov	r6, r0
 800a604:	2800      	cmp	r0, #0
 800a606:	d169      	bne.n	800a6dc <__gethex+0x11c>
 800a608:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a60c:	465d      	mov	r5, fp
 800a60e:	f7ff ffc1 	bl	800a594 <__hexdig_fun>
 800a612:	2800      	cmp	r0, #0
 800a614:	d064      	beq.n	800a6e0 <__gethex+0x120>
 800a616:	465a      	mov	r2, fp
 800a618:	7810      	ldrb	r0, [r2, #0]
 800a61a:	2830      	cmp	r0, #48	; 0x30
 800a61c:	4690      	mov	r8, r2
 800a61e:	f102 0201 	add.w	r2, r2, #1
 800a622:	d0f9      	beq.n	800a618 <__gethex+0x58>
 800a624:	f7ff ffb6 	bl	800a594 <__hexdig_fun>
 800a628:	2301      	movs	r3, #1
 800a62a:	fab0 f480 	clz	r4, r0
 800a62e:	0964      	lsrs	r4, r4, #5
 800a630:	465e      	mov	r6, fp
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	4642      	mov	r2, r8
 800a636:	4615      	mov	r5, r2
 800a638:	3201      	adds	r2, #1
 800a63a:	7828      	ldrb	r0, [r5, #0]
 800a63c:	f7ff ffaa 	bl	800a594 <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d1f8      	bne.n	800a636 <__gethex+0x76>
 800a644:	4994      	ldr	r1, [pc, #592]	; (800a898 <__gethex+0x2d8>)
 800a646:	2201      	movs	r2, #1
 800a648:	4628      	mov	r0, r5
 800a64a:	f7ff fec1 	bl	800a3d0 <strncmp>
 800a64e:	b978      	cbnz	r0, 800a670 <__gethex+0xb0>
 800a650:	b946      	cbnz	r6, 800a664 <__gethex+0xa4>
 800a652:	1c6e      	adds	r6, r5, #1
 800a654:	4632      	mov	r2, r6
 800a656:	4615      	mov	r5, r2
 800a658:	3201      	adds	r2, #1
 800a65a:	7828      	ldrb	r0, [r5, #0]
 800a65c:	f7ff ff9a 	bl	800a594 <__hexdig_fun>
 800a660:	2800      	cmp	r0, #0
 800a662:	d1f8      	bne.n	800a656 <__gethex+0x96>
 800a664:	1b73      	subs	r3, r6, r5
 800a666:	009e      	lsls	r6, r3, #2
 800a668:	e004      	b.n	800a674 <__gethex+0xb4>
 800a66a:	2400      	movs	r4, #0
 800a66c:	4626      	mov	r6, r4
 800a66e:	e7e1      	b.n	800a634 <__gethex+0x74>
 800a670:	2e00      	cmp	r6, #0
 800a672:	d1f7      	bne.n	800a664 <__gethex+0xa4>
 800a674:	782b      	ldrb	r3, [r5, #0]
 800a676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a67a:	2b50      	cmp	r3, #80	; 0x50
 800a67c:	d13d      	bne.n	800a6fa <__gethex+0x13a>
 800a67e:	786b      	ldrb	r3, [r5, #1]
 800a680:	2b2b      	cmp	r3, #43	; 0x2b
 800a682:	d02f      	beq.n	800a6e4 <__gethex+0x124>
 800a684:	2b2d      	cmp	r3, #45	; 0x2d
 800a686:	d031      	beq.n	800a6ec <__gethex+0x12c>
 800a688:	1c69      	adds	r1, r5, #1
 800a68a:	f04f 0b00 	mov.w	fp, #0
 800a68e:	7808      	ldrb	r0, [r1, #0]
 800a690:	f7ff ff80 	bl	800a594 <__hexdig_fun>
 800a694:	1e42      	subs	r2, r0, #1
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	2a18      	cmp	r2, #24
 800a69a:	d82e      	bhi.n	800a6fa <__gethex+0x13a>
 800a69c:	f1a0 0210 	sub.w	r2, r0, #16
 800a6a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6a4:	f7ff ff76 	bl	800a594 <__hexdig_fun>
 800a6a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6ac:	fa5f fc8c 	uxtb.w	ip, ip
 800a6b0:	f1bc 0f18 	cmp.w	ip, #24
 800a6b4:	d91d      	bls.n	800a6f2 <__gethex+0x132>
 800a6b6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ba:	d000      	beq.n	800a6be <__gethex+0xfe>
 800a6bc:	4252      	negs	r2, r2
 800a6be:	4416      	add	r6, r2
 800a6c0:	f8ca 1000 	str.w	r1, [sl]
 800a6c4:	b1dc      	cbz	r4, 800a6fe <__gethex+0x13e>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bf14      	ite	ne
 800a6cc:	f04f 0800 	movne.w	r8, #0
 800a6d0:	f04f 0806 	moveq.w	r8, #6
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	b005      	add	sp, #20
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	4645      	mov	r5, r8
 800a6de:	4626      	mov	r6, r4
 800a6e0:	2401      	movs	r4, #1
 800a6e2:	e7c7      	b.n	800a674 <__gethex+0xb4>
 800a6e4:	f04f 0b00 	mov.w	fp, #0
 800a6e8:	1ca9      	adds	r1, r5, #2
 800a6ea:	e7d0      	b.n	800a68e <__gethex+0xce>
 800a6ec:	f04f 0b01 	mov.w	fp, #1
 800a6f0:	e7fa      	b.n	800a6e8 <__gethex+0x128>
 800a6f2:	230a      	movs	r3, #10
 800a6f4:	fb03 0002 	mla	r0, r3, r2, r0
 800a6f8:	e7d0      	b.n	800a69c <__gethex+0xdc>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	e7e0      	b.n	800a6c0 <__gethex+0x100>
 800a6fe:	eba5 0308 	sub.w	r3, r5, r8
 800a702:	3b01      	subs	r3, #1
 800a704:	4621      	mov	r1, r4
 800a706:	2b07      	cmp	r3, #7
 800a708:	dc0a      	bgt.n	800a720 <__gethex+0x160>
 800a70a:	4648      	mov	r0, r9
 800a70c:	f7fd ff22 	bl	8008554 <_Balloc>
 800a710:	4604      	mov	r4, r0
 800a712:	b940      	cbnz	r0, 800a726 <__gethex+0x166>
 800a714:	4b61      	ldr	r3, [pc, #388]	; (800a89c <__gethex+0x2dc>)
 800a716:	4602      	mov	r2, r0
 800a718:	21e4      	movs	r1, #228	; 0xe4
 800a71a:	4861      	ldr	r0, [pc, #388]	; (800a8a0 <__gethex+0x2e0>)
 800a71c:	f7ff feb4 	bl	800a488 <__assert_func>
 800a720:	3101      	adds	r1, #1
 800a722:	105b      	asrs	r3, r3, #1
 800a724:	e7ef      	b.n	800a706 <__gethex+0x146>
 800a726:	f100 0a14 	add.w	sl, r0, #20
 800a72a:	2300      	movs	r3, #0
 800a72c:	495a      	ldr	r1, [pc, #360]	; (800a898 <__gethex+0x2d8>)
 800a72e:	f8cd a004 	str.w	sl, [sp, #4]
 800a732:	469b      	mov	fp, r3
 800a734:	45a8      	cmp	r8, r5
 800a736:	d342      	bcc.n	800a7be <__gethex+0x1fe>
 800a738:	9801      	ldr	r0, [sp, #4]
 800a73a:	f840 bb04 	str.w	fp, [r0], #4
 800a73e:	eba0 000a 	sub.w	r0, r0, sl
 800a742:	1080      	asrs	r0, r0, #2
 800a744:	6120      	str	r0, [r4, #16]
 800a746:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a74a:	4658      	mov	r0, fp
 800a74c:	f7fd fff4 	bl	8008738 <__hi0bits>
 800a750:	683d      	ldr	r5, [r7, #0]
 800a752:	eba8 0000 	sub.w	r0, r8, r0
 800a756:	42a8      	cmp	r0, r5
 800a758:	dd59      	ble.n	800a80e <__gethex+0x24e>
 800a75a:	eba0 0805 	sub.w	r8, r0, r5
 800a75e:	4641      	mov	r1, r8
 800a760:	4620      	mov	r0, r4
 800a762:	f7fe fb83 	bl	8008e6c <__any_on>
 800a766:	4683      	mov	fp, r0
 800a768:	b1b8      	cbz	r0, 800a79a <__gethex+0x1da>
 800a76a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a76e:	1159      	asrs	r1, r3, #5
 800a770:	f003 021f 	and.w	r2, r3, #31
 800a774:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a778:	f04f 0b01 	mov.w	fp, #1
 800a77c:	fa0b f202 	lsl.w	r2, fp, r2
 800a780:	420a      	tst	r2, r1
 800a782:	d00a      	beq.n	800a79a <__gethex+0x1da>
 800a784:	455b      	cmp	r3, fp
 800a786:	dd06      	ble.n	800a796 <__gethex+0x1d6>
 800a788:	f1a8 0102 	sub.w	r1, r8, #2
 800a78c:	4620      	mov	r0, r4
 800a78e:	f7fe fb6d 	bl	8008e6c <__any_on>
 800a792:	2800      	cmp	r0, #0
 800a794:	d138      	bne.n	800a808 <__gethex+0x248>
 800a796:	f04f 0b02 	mov.w	fp, #2
 800a79a:	4641      	mov	r1, r8
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7ff fea7 	bl	800a4f0 <rshift>
 800a7a2:	4446      	add	r6, r8
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	42b3      	cmp	r3, r6
 800a7a8:	da41      	bge.n	800a82e <__gethex+0x26e>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4648      	mov	r0, r9
 800a7ae:	f7fd ff11 	bl	80085d4 <_Bfree>
 800a7b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a7bc:	e78a      	b.n	800a6d4 <__gethex+0x114>
 800a7be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a7c2:	2a2e      	cmp	r2, #46	; 0x2e
 800a7c4:	d014      	beq.n	800a7f0 <__gethex+0x230>
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d106      	bne.n	800a7d8 <__gethex+0x218>
 800a7ca:	9b01      	ldr	r3, [sp, #4]
 800a7cc:	f843 bb04 	str.w	fp, [r3], #4
 800a7d0:	f04f 0b00 	mov.w	fp, #0
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	465b      	mov	r3, fp
 800a7d8:	7828      	ldrb	r0, [r5, #0]
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	f7ff feda 	bl	800a594 <__hexdig_fun>
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	f000 000f 	and.w	r0, r0, #15
 800a7e6:	4098      	lsls	r0, r3
 800a7e8:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	e7a1      	b.n	800a734 <__gethex+0x174>
 800a7f0:	45a8      	cmp	r8, r5
 800a7f2:	d8e8      	bhi.n	800a7c6 <__gethex+0x206>
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	9303      	str	r3, [sp, #12]
 800a7fa:	f7ff fde9 	bl	800a3d0 <strncmp>
 800a7fe:	4926      	ldr	r1, [pc, #152]	; (800a898 <__gethex+0x2d8>)
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	2800      	cmp	r0, #0
 800a804:	d1df      	bne.n	800a7c6 <__gethex+0x206>
 800a806:	e795      	b.n	800a734 <__gethex+0x174>
 800a808:	f04f 0b03 	mov.w	fp, #3
 800a80c:	e7c5      	b.n	800a79a <__gethex+0x1da>
 800a80e:	da0b      	bge.n	800a828 <__gethex+0x268>
 800a810:	eba5 0800 	sub.w	r8, r5, r0
 800a814:	4621      	mov	r1, r4
 800a816:	4642      	mov	r2, r8
 800a818:	4648      	mov	r0, r9
 800a81a:	f7fe f8f5 	bl	8008a08 <__lshift>
 800a81e:	eba6 0608 	sub.w	r6, r6, r8
 800a822:	4604      	mov	r4, r0
 800a824:	f100 0a14 	add.w	sl, r0, #20
 800a828:	f04f 0b00 	mov.w	fp, #0
 800a82c:	e7ba      	b.n	800a7a4 <__gethex+0x1e4>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	42b3      	cmp	r3, r6
 800a832:	dd73      	ble.n	800a91c <__gethex+0x35c>
 800a834:	1b9e      	subs	r6, r3, r6
 800a836:	42b5      	cmp	r5, r6
 800a838:	dc34      	bgt.n	800a8a4 <__gethex+0x2e4>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d023      	beq.n	800a888 <__gethex+0x2c8>
 800a840:	2b03      	cmp	r3, #3
 800a842:	d025      	beq.n	800a890 <__gethex+0x2d0>
 800a844:	2b01      	cmp	r3, #1
 800a846:	d115      	bne.n	800a874 <__gethex+0x2b4>
 800a848:	42b5      	cmp	r5, r6
 800a84a:	d113      	bne.n	800a874 <__gethex+0x2b4>
 800a84c:	2d01      	cmp	r5, #1
 800a84e:	d10b      	bne.n	800a868 <__gethex+0x2a8>
 800a850:	9a02      	ldr	r2, [sp, #8]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	2301      	movs	r3, #1
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	f8ca 3000 	str.w	r3, [sl]
 800a85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a860:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a864:	601c      	str	r4, [r3, #0]
 800a866:	e735      	b.n	800a6d4 <__gethex+0x114>
 800a868:	1e69      	subs	r1, r5, #1
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7fe fafe 	bl	8008e6c <__any_on>
 800a870:	2800      	cmp	r0, #0
 800a872:	d1ed      	bne.n	800a850 <__gethex+0x290>
 800a874:	4621      	mov	r1, r4
 800a876:	4648      	mov	r0, r9
 800a878:	f7fd feac 	bl	80085d4 <_Bfree>
 800a87c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a87e:	2300      	movs	r3, #0
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a886:	e725      	b.n	800a6d4 <__gethex+0x114>
 800a888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1f2      	bne.n	800a874 <__gethex+0x2b4>
 800a88e:	e7df      	b.n	800a850 <__gethex+0x290>
 800a890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1dc      	bne.n	800a850 <__gethex+0x290>
 800a896:	e7ed      	b.n	800a874 <__gethex+0x2b4>
 800a898:	0800c554 	.word	0x0800c554
 800a89c:	0800c3e9 	.word	0x0800c3e9
 800a8a0:	0800c6fe 	.word	0x0800c6fe
 800a8a4:	f106 38ff 	add.w	r8, r6, #4294967295
 800a8a8:	f1bb 0f00 	cmp.w	fp, #0
 800a8ac:	d133      	bne.n	800a916 <__gethex+0x356>
 800a8ae:	f1b8 0f00 	cmp.w	r8, #0
 800a8b2:	d004      	beq.n	800a8be <__gethex+0x2fe>
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7fe fad8 	bl	8008e6c <__any_on>
 800a8bc:	4683      	mov	fp, r0
 800a8be:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8c8:	f008 081f 	and.w	r8, r8, #31
 800a8cc:	fa03 f308 	lsl.w	r3, r3, r8
 800a8d0:	4213      	tst	r3, r2
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	bf18      	it	ne
 800a8d8:	f04b 0b02 	orrne.w	fp, fp, #2
 800a8dc:	1bad      	subs	r5, r5, r6
 800a8de:	f7ff fe07 	bl	800a4f0 <rshift>
 800a8e2:	687e      	ldr	r6, [r7, #4]
 800a8e4:	f04f 0802 	mov.w	r8, #2
 800a8e8:	f1bb 0f00 	cmp.w	fp, #0
 800a8ec:	d04a      	beq.n	800a984 <__gethex+0x3c4>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d016      	beq.n	800a922 <__gethex+0x362>
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d018      	beq.n	800a92a <__gethex+0x36a>
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d109      	bne.n	800a910 <__gethex+0x350>
 800a8fc:	f01b 0f02 	tst.w	fp, #2
 800a900:	d006      	beq.n	800a910 <__gethex+0x350>
 800a902:	f8da 3000 	ldr.w	r3, [sl]
 800a906:	ea4b 0b03 	orr.w	fp, fp, r3
 800a90a:	f01b 0f01 	tst.w	fp, #1
 800a90e:	d10f      	bne.n	800a930 <__gethex+0x370>
 800a910:	f048 0810 	orr.w	r8, r8, #16
 800a914:	e036      	b.n	800a984 <__gethex+0x3c4>
 800a916:	f04f 0b01 	mov.w	fp, #1
 800a91a:	e7d0      	b.n	800a8be <__gethex+0x2fe>
 800a91c:	f04f 0801 	mov.w	r8, #1
 800a920:	e7e2      	b.n	800a8e8 <__gethex+0x328>
 800a922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a924:	f1c3 0301 	rsb	r3, r3, #1
 800a928:	930f      	str	r3, [sp, #60]	; 0x3c
 800a92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0ef      	beq.n	800a910 <__gethex+0x350>
 800a930:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a934:	f104 0214 	add.w	r2, r4, #20
 800a938:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a942:	2300      	movs	r3, #0
 800a944:	4694      	mov	ip, r2
 800a946:	f852 1b04 	ldr.w	r1, [r2], #4
 800a94a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a94e:	d01e      	beq.n	800a98e <__gethex+0x3ce>
 800a950:	3101      	adds	r1, #1
 800a952:	f8cc 1000 	str.w	r1, [ip]
 800a956:	f1b8 0f02 	cmp.w	r8, #2
 800a95a:	f104 0214 	add.w	r2, r4, #20
 800a95e:	d13d      	bne.n	800a9dc <__gethex+0x41c>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	3b01      	subs	r3, #1
 800a964:	42ab      	cmp	r3, r5
 800a966:	d10b      	bne.n	800a980 <__gethex+0x3c0>
 800a968:	1169      	asrs	r1, r5, #5
 800a96a:	2301      	movs	r3, #1
 800a96c:	f005 051f 	and.w	r5, r5, #31
 800a970:	fa03 f505 	lsl.w	r5, r3, r5
 800a974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a978:	421d      	tst	r5, r3
 800a97a:	bf18      	it	ne
 800a97c:	f04f 0801 	movne.w	r8, #1
 800a980:	f048 0820 	orr.w	r8, r8, #32
 800a984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a986:	601c      	str	r4, [r3, #0]
 800a988:	9b02      	ldr	r3, [sp, #8]
 800a98a:	601e      	str	r6, [r3, #0]
 800a98c:	e6a2      	b.n	800a6d4 <__gethex+0x114>
 800a98e:	4290      	cmp	r0, r2
 800a990:	f842 3c04 	str.w	r3, [r2, #-4]
 800a994:	d8d6      	bhi.n	800a944 <__gethex+0x384>
 800a996:	68a2      	ldr	r2, [r4, #8]
 800a998:	4593      	cmp	fp, r2
 800a99a:	db17      	blt.n	800a9cc <__gethex+0x40c>
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	4648      	mov	r0, r9
 800a9a0:	3101      	adds	r1, #1
 800a9a2:	f7fd fdd7 	bl	8008554 <_Balloc>
 800a9a6:	4682      	mov	sl, r0
 800a9a8:	b918      	cbnz	r0, 800a9b2 <__gethex+0x3f2>
 800a9aa:	4b1b      	ldr	r3, [pc, #108]	; (800aa18 <__gethex+0x458>)
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	2184      	movs	r1, #132	; 0x84
 800a9b0:	e6b3      	b.n	800a71a <__gethex+0x15a>
 800a9b2:	6922      	ldr	r2, [r4, #16]
 800a9b4:	3202      	adds	r2, #2
 800a9b6:	f104 010c 	add.w	r1, r4, #12
 800a9ba:	0092      	lsls	r2, r2, #2
 800a9bc:	300c      	adds	r0, #12
 800a9be:	f7ff fd4b 	bl	800a458 <memcpy>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4648      	mov	r0, r9
 800a9c6:	f7fd fe05 	bl	80085d4 <_Bfree>
 800a9ca:	4654      	mov	r4, sl
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	1c51      	adds	r1, r2, #1
 800a9d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9d4:	6121      	str	r1, [r4, #16]
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	6151      	str	r1, [r2, #20]
 800a9da:	e7bc      	b.n	800a956 <__gethex+0x396>
 800a9dc:	6921      	ldr	r1, [r4, #16]
 800a9de:	4559      	cmp	r1, fp
 800a9e0:	dd0b      	ble.n	800a9fa <__gethex+0x43a>
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7ff fd83 	bl	800a4f0 <rshift>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	42b3      	cmp	r3, r6
 800a9f0:	f6ff aedb 	blt.w	800a7aa <__gethex+0x1ea>
 800a9f4:	f04f 0801 	mov.w	r8, #1
 800a9f8:	e7c2      	b.n	800a980 <__gethex+0x3c0>
 800a9fa:	f015 051f 	ands.w	r5, r5, #31
 800a9fe:	d0f9      	beq.n	800a9f4 <__gethex+0x434>
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	441a      	add	r2, r3
 800aa04:	f1c5 0520 	rsb	r5, r5, #32
 800aa08:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aa0c:	f7fd fe94 	bl	8008738 <__hi0bits>
 800aa10:	42a8      	cmp	r0, r5
 800aa12:	dbe6      	blt.n	800a9e2 <__gethex+0x422>
 800aa14:	e7ee      	b.n	800a9f4 <__gethex+0x434>
 800aa16:	bf00      	nop
 800aa18:	0800c3e9 	.word	0x0800c3e9

0800aa1c <L_shift>:
 800aa1c:	f1c2 0208 	rsb	r2, r2, #8
 800aa20:	0092      	lsls	r2, r2, #2
 800aa22:	b570      	push	{r4, r5, r6, lr}
 800aa24:	f1c2 0620 	rsb	r6, r2, #32
 800aa28:	6843      	ldr	r3, [r0, #4]
 800aa2a:	6804      	ldr	r4, [r0, #0]
 800aa2c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa30:	432c      	orrs	r4, r5
 800aa32:	40d3      	lsrs	r3, r2
 800aa34:	6004      	str	r4, [r0, #0]
 800aa36:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa3a:	4288      	cmp	r0, r1
 800aa3c:	d3f4      	bcc.n	800aa28 <L_shift+0xc>
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}

0800aa40 <__match>:
 800aa40:	b530      	push	{r4, r5, lr}
 800aa42:	6803      	ldr	r3, [r0, #0]
 800aa44:	3301      	adds	r3, #1
 800aa46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4a:	b914      	cbnz	r4, 800aa52 <__match+0x12>
 800aa4c:	6003      	str	r3, [r0, #0]
 800aa4e:	2001      	movs	r0, #1
 800aa50:	bd30      	pop	{r4, r5, pc}
 800aa52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa5a:	2d19      	cmp	r5, #25
 800aa5c:	bf98      	it	ls
 800aa5e:	3220      	addls	r2, #32
 800aa60:	42a2      	cmp	r2, r4
 800aa62:	d0f0      	beq.n	800aa46 <__match+0x6>
 800aa64:	2000      	movs	r0, #0
 800aa66:	e7f3      	b.n	800aa50 <__match+0x10>

0800aa68 <__hexnan>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	6801      	ldr	r1, [r0, #0]
 800aa70:	115e      	asrs	r6, r3, #5
 800aa72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa76:	f013 031f 	ands.w	r3, r3, #31
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	bf18      	it	ne
 800aa7e:	3604      	addne	r6, #4
 800aa80:	2500      	movs	r5, #0
 800aa82:	1f37      	subs	r7, r6, #4
 800aa84:	4682      	mov	sl, r0
 800aa86:	4690      	mov	r8, r2
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa8e:	46b9      	mov	r9, r7
 800aa90:	463c      	mov	r4, r7
 800aa92:	9502      	str	r5, [sp, #8]
 800aa94:	46ab      	mov	fp, r5
 800aa96:	784a      	ldrb	r2, [r1, #1]
 800aa98:	1c4b      	adds	r3, r1, #1
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	b342      	cbz	r2, 800aaf0 <__hexnan+0x88>
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	9105      	str	r1, [sp, #20]
 800aaa2:	9204      	str	r2, [sp, #16]
 800aaa4:	f7ff fd76 	bl	800a594 <__hexdig_fun>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d14f      	bne.n	800ab4c <__hexnan+0xe4>
 800aaac:	9a04      	ldr	r2, [sp, #16]
 800aaae:	9905      	ldr	r1, [sp, #20]
 800aab0:	2a20      	cmp	r2, #32
 800aab2:	d818      	bhi.n	800aae6 <__hexnan+0x7e>
 800aab4:	9b02      	ldr	r3, [sp, #8]
 800aab6:	459b      	cmp	fp, r3
 800aab8:	dd13      	ble.n	800aae2 <__hexnan+0x7a>
 800aaba:	454c      	cmp	r4, r9
 800aabc:	d206      	bcs.n	800aacc <__hexnan+0x64>
 800aabe:	2d07      	cmp	r5, #7
 800aac0:	dc04      	bgt.n	800aacc <__hexnan+0x64>
 800aac2:	462a      	mov	r2, r5
 800aac4:	4649      	mov	r1, r9
 800aac6:	4620      	mov	r0, r4
 800aac8:	f7ff ffa8 	bl	800aa1c <L_shift>
 800aacc:	4544      	cmp	r4, r8
 800aace:	d950      	bls.n	800ab72 <__hexnan+0x10a>
 800aad0:	2300      	movs	r3, #0
 800aad2:	f1a4 0904 	sub.w	r9, r4, #4
 800aad6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aada:	f8cd b008 	str.w	fp, [sp, #8]
 800aade:	464c      	mov	r4, r9
 800aae0:	461d      	mov	r5, r3
 800aae2:	9903      	ldr	r1, [sp, #12]
 800aae4:	e7d7      	b.n	800aa96 <__hexnan+0x2e>
 800aae6:	2a29      	cmp	r2, #41	; 0x29
 800aae8:	d155      	bne.n	800ab96 <__hexnan+0x12e>
 800aaea:	3102      	adds	r1, #2
 800aaec:	f8ca 1000 	str.w	r1, [sl]
 800aaf0:	f1bb 0f00 	cmp.w	fp, #0
 800aaf4:	d04f      	beq.n	800ab96 <__hexnan+0x12e>
 800aaf6:	454c      	cmp	r4, r9
 800aaf8:	d206      	bcs.n	800ab08 <__hexnan+0xa0>
 800aafa:	2d07      	cmp	r5, #7
 800aafc:	dc04      	bgt.n	800ab08 <__hexnan+0xa0>
 800aafe:	462a      	mov	r2, r5
 800ab00:	4649      	mov	r1, r9
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7ff ff8a 	bl	800aa1c <L_shift>
 800ab08:	4544      	cmp	r4, r8
 800ab0a:	d934      	bls.n	800ab76 <__hexnan+0x10e>
 800ab0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab10:	4623      	mov	r3, r4
 800ab12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab1a:	429f      	cmp	r7, r3
 800ab1c:	d2f9      	bcs.n	800ab12 <__hexnan+0xaa>
 800ab1e:	1b3b      	subs	r3, r7, r4
 800ab20:	f023 0303 	bic.w	r3, r3, #3
 800ab24:	3304      	adds	r3, #4
 800ab26:	3e03      	subs	r6, #3
 800ab28:	3401      	adds	r4, #1
 800ab2a:	42a6      	cmp	r6, r4
 800ab2c:	bf38      	it	cc
 800ab2e:	2304      	movcc	r3, #4
 800ab30:	4443      	add	r3, r8
 800ab32:	2200      	movs	r2, #0
 800ab34:	f843 2b04 	str.w	r2, [r3], #4
 800ab38:	429f      	cmp	r7, r3
 800ab3a:	d2fb      	bcs.n	800ab34 <__hexnan+0xcc>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	b91b      	cbnz	r3, 800ab48 <__hexnan+0xe0>
 800ab40:	4547      	cmp	r7, r8
 800ab42:	d126      	bne.n	800ab92 <__hexnan+0x12a>
 800ab44:	2301      	movs	r3, #1
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	2005      	movs	r0, #5
 800ab4a:	e025      	b.n	800ab98 <__hexnan+0x130>
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	2d08      	cmp	r5, #8
 800ab50:	f10b 0b01 	add.w	fp, fp, #1
 800ab54:	dd06      	ble.n	800ab64 <__hexnan+0xfc>
 800ab56:	4544      	cmp	r4, r8
 800ab58:	d9c3      	bls.n	800aae2 <__hexnan+0x7a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab60:	2501      	movs	r5, #1
 800ab62:	3c04      	subs	r4, #4
 800ab64:	6822      	ldr	r2, [r4, #0]
 800ab66:	f000 000f 	and.w	r0, r0, #15
 800ab6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab6e:	6020      	str	r0, [r4, #0]
 800ab70:	e7b7      	b.n	800aae2 <__hexnan+0x7a>
 800ab72:	2508      	movs	r5, #8
 800ab74:	e7b5      	b.n	800aae2 <__hexnan+0x7a>
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0df      	beq.n	800ab3c <__hexnan+0xd4>
 800ab7c:	f1c3 0320 	rsb	r3, r3, #32
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295
 800ab84:	40da      	lsrs	r2, r3
 800ab86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab90:	e7d4      	b.n	800ab3c <__hexnan+0xd4>
 800ab92:	3f04      	subs	r7, #4
 800ab94:	e7d2      	b.n	800ab3c <__hexnan+0xd4>
 800ab96:	2004      	movs	r0, #4
 800ab98:	b007      	add	sp, #28
 800ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab9e <__ascii_mbtowc>:
 800ab9e:	b082      	sub	sp, #8
 800aba0:	b901      	cbnz	r1, 800aba4 <__ascii_mbtowc+0x6>
 800aba2:	a901      	add	r1, sp, #4
 800aba4:	b142      	cbz	r2, 800abb8 <__ascii_mbtowc+0x1a>
 800aba6:	b14b      	cbz	r3, 800abbc <__ascii_mbtowc+0x1e>
 800aba8:	7813      	ldrb	r3, [r2, #0]
 800abaa:	600b      	str	r3, [r1, #0]
 800abac:	7812      	ldrb	r2, [r2, #0]
 800abae:	1e10      	subs	r0, r2, #0
 800abb0:	bf18      	it	ne
 800abb2:	2001      	movne	r0, #1
 800abb4:	b002      	add	sp, #8
 800abb6:	4770      	bx	lr
 800abb8:	4610      	mov	r0, r2
 800abba:	e7fb      	b.n	800abb4 <__ascii_mbtowc+0x16>
 800abbc:	f06f 0001 	mvn.w	r0, #1
 800abc0:	e7f8      	b.n	800abb4 <__ascii_mbtowc+0x16>

0800abc2 <_realloc_r>:
 800abc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc6:	4680      	mov	r8, r0
 800abc8:	4614      	mov	r4, r2
 800abca:	460e      	mov	r6, r1
 800abcc:	b921      	cbnz	r1, 800abd8 <_realloc_r+0x16>
 800abce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	4611      	mov	r1, r2
 800abd4:	f7fd bc32 	b.w	800843c <_malloc_r>
 800abd8:	b92a      	cbnz	r2, 800abe6 <_realloc_r+0x24>
 800abda:	f7fd fbbb 	bl	8008354 <_free_r>
 800abde:	4625      	mov	r5, r4
 800abe0:	4628      	mov	r0, r5
 800abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe6:	f000 f842 	bl	800ac6e <_malloc_usable_size_r>
 800abea:	4284      	cmp	r4, r0
 800abec:	4607      	mov	r7, r0
 800abee:	d802      	bhi.n	800abf6 <_realloc_r+0x34>
 800abf0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abf4:	d812      	bhi.n	800ac1c <_realloc_r+0x5a>
 800abf6:	4621      	mov	r1, r4
 800abf8:	4640      	mov	r0, r8
 800abfa:	f7fd fc1f 	bl	800843c <_malloc_r>
 800abfe:	4605      	mov	r5, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d0ed      	beq.n	800abe0 <_realloc_r+0x1e>
 800ac04:	42bc      	cmp	r4, r7
 800ac06:	4622      	mov	r2, r4
 800ac08:	4631      	mov	r1, r6
 800ac0a:	bf28      	it	cs
 800ac0c:	463a      	movcs	r2, r7
 800ac0e:	f7ff fc23 	bl	800a458 <memcpy>
 800ac12:	4631      	mov	r1, r6
 800ac14:	4640      	mov	r0, r8
 800ac16:	f7fd fb9d 	bl	8008354 <_free_r>
 800ac1a:	e7e1      	b.n	800abe0 <_realloc_r+0x1e>
 800ac1c:	4635      	mov	r5, r6
 800ac1e:	e7df      	b.n	800abe0 <_realloc_r+0x1e>

0800ac20 <__ascii_wctomb>:
 800ac20:	b149      	cbz	r1, 800ac36 <__ascii_wctomb+0x16>
 800ac22:	2aff      	cmp	r2, #255	; 0xff
 800ac24:	bf85      	ittet	hi
 800ac26:	238a      	movhi	r3, #138	; 0x8a
 800ac28:	6003      	strhi	r3, [r0, #0]
 800ac2a:	700a      	strbls	r2, [r1, #0]
 800ac2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac30:	bf98      	it	ls
 800ac32:	2001      	movls	r0, #1
 800ac34:	4770      	bx	lr
 800ac36:	4608      	mov	r0, r1
 800ac38:	4770      	bx	lr
	...

0800ac3c <fiprintf>:
 800ac3c:	b40e      	push	{r1, r2, r3}
 800ac3e:	b503      	push	{r0, r1, lr}
 800ac40:	4601      	mov	r1, r0
 800ac42:	ab03      	add	r3, sp, #12
 800ac44:	4805      	ldr	r0, [pc, #20]	; (800ac5c <fiprintf+0x20>)
 800ac46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4a:	6800      	ldr	r0, [r0, #0]
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	f7ff f947 	bl	8009ee0 <_vfiprintf_r>
 800ac52:	b002      	add	sp, #8
 800ac54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac58:	b003      	add	sp, #12
 800ac5a:	4770      	bx	lr
 800ac5c:	20000068 	.word	0x20000068

0800ac60 <abort>:
 800ac60:	b508      	push	{r3, lr}
 800ac62:	2006      	movs	r0, #6
 800ac64:	f000 f834 	bl	800acd0 <raise>
 800ac68:	2001      	movs	r0, #1
 800ac6a:	f7f7 fd73 	bl	8002754 <_exit>

0800ac6e <_malloc_usable_size_r>:
 800ac6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac72:	1f18      	subs	r0, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfbc      	itt	lt
 800ac78:	580b      	ldrlt	r3, [r1, r0]
 800ac7a:	18c0      	addlt	r0, r0, r3
 800ac7c:	4770      	bx	lr

0800ac7e <_raise_r>:
 800ac7e:	291f      	cmp	r1, #31
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4604      	mov	r4, r0
 800ac84:	460d      	mov	r5, r1
 800ac86:	d904      	bls.n	800ac92 <_raise_r+0x14>
 800ac88:	2316      	movs	r3, #22
 800ac8a:	6003      	str	r3, [r0, #0]
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	bd38      	pop	{r3, r4, r5, pc}
 800ac92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac94:	b112      	cbz	r2, 800ac9c <_raise_r+0x1e>
 800ac96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac9a:	b94b      	cbnz	r3, 800acb0 <_raise_r+0x32>
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 f831 	bl	800ad04 <_getpid_r>
 800aca2:	462a      	mov	r2, r5
 800aca4:	4601      	mov	r1, r0
 800aca6:	4620      	mov	r0, r4
 800aca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acac:	f000 b818 	b.w	800ace0 <_kill_r>
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d00a      	beq.n	800acca <_raise_r+0x4c>
 800acb4:	1c59      	adds	r1, r3, #1
 800acb6:	d103      	bne.n	800acc0 <_raise_r+0x42>
 800acb8:	2316      	movs	r3, #22
 800acba:	6003      	str	r3, [r0, #0]
 800acbc:	2001      	movs	r0, #1
 800acbe:	e7e7      	b.n	800ac90 <_raise_r+0x12>
 800acc0:	2400      	movs	r4, #0
 800acc2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acc6:	4628      	mov	r0, r5
 800acc8:	4798      	blx	r3
 800acca:	2000      	movs	r0, #0
 800accc:	e7e0      	b.n	800ac90 <_raise_r+0x12>
	...

0800acd0 <raise>:
 800acd0:	4b02      	ldr	r3, [pc, #8]	; (800acdc <raise+0xc>)
 800acd2:	4601      	mov	r1, r0
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	f7ff bfd2 	b.w	800ac7e <_raise_r>
 800acda:	bf00      	nop
 800acdc:	20000068 	.word	0x20000068

0800ace0 <_kill_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d07      	ldr	r5, [pc, #28]	; (800ad00 <_kill_r+0x20>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	4611      	mov	r1, r2
 800acec:	602b      	str	r3, [r5, #0]
 800acee:	f7f7 fd21 	bl	8002734 <_kill>
 800acf2:	1c43      	adds	r3, r0, #1
 800acf4:	d102      	bne.n	800acfc <_kill_r+0x1c>
 800acf6:	682b      	ldr	r3, [r5, #0]
 800acf8:	b103      	cbz	r3, 800acfc <_kill_r+0x1c>
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	20000988 	.word	0x20000988

0800ad04 <_getpid_r>:
 800ad04:	f7f7 bd0e 	b.w	8002724 <_getpid>

0800ad08 <atan2>:
 800ad08:	f000 b982 	b.w	800b010 <__ieee754_atan2>

0800ad0c <pow>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	ed2d 8b02 	vpush	{d8}
 800ad12:	eeb0 8a40 	vmov.f32	s16, s0
 800ad16:	eef0 8a60 	vmov.f32	s17, s1
 800ad1a:	ec55 4b11 	vmov	r4, r5, d1
 800ad1e:	f000 fa3f 	bl	800b1a0 <__ieee754_pow>
 800ad22:	4622      	mov	r2, r4
 800ad24:	462b      	mov	r3, r5
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	ec57 6b10 	vmov	r6, r7, d0
 800ad2e:	f7f5 ff25 	bl	8000b7c <__aeabi_dcmpun>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d13b      	bne.n	800adae <pow+0xa2>
 800ad36:	ec51 0b18 	vmov	r0, r1, d8
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f7f5 feeb 	bl	8000b18 <__aeabi_dcmpeq>
 800ad42:	b1b8      	cbz	r0, 800ad74 <pow+0x68>
 800ad44:	2200      	movs	r2, #0
 800ad46:	2300      	movs	r3, #0
 800ad48:	4620      	mov	r0, r4
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	f7f5 fee4 	bl	8000b18 <__aeabi_dcmpeq>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d146      	bne.n	800ade2 <pow+0xd6>
 800ad54:	ec45 4b10 	vmov	d0, r4, r5
 800ad58:	f000 f874 	bl	800ae44 <finite>
 800ad5c:	b338      	cbz	r0, 800adae <pow+0xa2>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2300      	movs	r3, #0
 800ad62:	4620      	mov	r0, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	f7f5 fee1 	bl	8000b2c <__aeabi_dcmplt>
 800ad6a:	b300      	cbz	r0, 800adae <pow+0xa2>
 800ad6c:	f7fc fc44 	bl	80075f8 <__errno>
 800ad70:	2322      	movs	r3, #34	; 0x22
 800ad72:	e01b      	b.n	800adac <pow+0xa0>
 800ad74:	ec47 6b10 	vmov	d0, r6, r7
 800ad78:	f000 f864 	bl	800ae44 <finite>
 800ad7c:	b9e0      	cbnz	r0, 800adb8 <pow+0xac>
 800ad7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ad82:	eef0 0a68 	vmov.f32	s1, s17
 800ad86:	f000 f85d 	bl	800ae44 <finite>
 800ad8a:	b1a8      	cbz	r0, 800adb8 <pow+0xac>
 800ad8c:	ec45 4b10 	vmov	d0, r4, r5
 800ad90:	f000 f858 	bl	800ae44 <finite>
 800ad94:	b180      	cbz	r0, 800adb8 <pow+0xac>
 800ad96:	4632      	mov	r2, r6
 800ad98:	463b      	mov	r3, r7
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 feed 	bl	8000b7c <__aeabi_dcmpun>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0e2      	beq.n	800ad6c <pow+0x60>
 800ada6:	f7fc fc27 	bl	80075f8 <__errno>
 800adaa:	2321      	movs	r3, #33	; 0x21
 800adac:	6003      	str	r3, [r0, #0]
 800adae:	ecbd 8b02 	vpop	{d8}
 800adb2:	ec47 6b10 	vmov	d0, r6, r7
 800adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb8:	2200      	movs	r2, #0
 800adba:	2300      	movs	r3, #0
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 feaa 	bl	8000b18 <__aeabi_dcmpeq>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d0f2      	beq.n	800adae <pow+0xa2>
 800adc8:	eeb0 0a48 	vmov.f32	s0, s16
 800adcc:	eef0 0a68 	vmov.f32	s1, s17
 800add0:	f000 f838 	bl	800ae44 <finite>
 800add4:	2800      	cmp	r0, #0
 800add6:	d0ea      	beq.n	800adae <pow+0xa2>
 800add8:	ec45 4b10 	vmov	d0, r4, r5
 800addc:	f000 f832 	bl	800ae44 <finite>
 800ade0:	e7c3      	b.n	800ad6a <pow+0x5e>
 800ade2:	4f01      	ldr	r7, [pc, #4]	; (800ade8 <pow+0xdc>)
 800ade4:	2600      	movs	r6, #0
 800ade6:	e7e2      	b.n	800adae <pow+0xa2>
 800ade8:	3ff00000 	.word	0x3ff00000

0800adec <sqrt>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	ed2d 8b02 	vpush	{d8}
 800adf2:	ec55 4b10 	vmov	r4, r5, d0
 800adf6:	f000 f831 	bl	800ae5c <__ieee754_sqrt>
 800adfa:	4622      	mov	r2, r4
 800adfc:	462b      	mov	r3, r5
 800adfe:	4620      	mov	r0, r4
 800ae00:	4629      	mov	r1, r5
 800ae02:	eeb0 8a40 	vmov.f32	s16, s0
 800ae06:	eef0 8a60 	vmov.f32	s17, s1
 800ae0a:	f7f5 feb7 	bl	8000b7c <__aeabi_dcmpun>
 800ae0e:	b990      	cbnz	r0, 800ae36 <sqrt+0x4a>
 800ae10:	2200      	movs	r2, #0
 800ae12:	2300      	movs	r3, #0
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fe88 	bl	8000b2c <__aeabi_dcmplt>
 800ae1c:	b158      	cbz	r0, 800ae36 <sqrt+0x4a>
 800ae1e:	f7fc fbeb 	bl	80075f8 <__errno>
 800ae22:	2321      	movs	r3, #33	; 0x21
 800ae24:	6003      	str	r3, [r0, #0]
 800ae26:	2200      	movs	r2, #0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f7f5 fd35 	bl	800089c <__aeabi_ddiv>
 800ae32:	ec41 0b18 	vmov	d8, r0, r1
 800ae36:	eeb0 0a48 	vmov.f32	s0, s16
 800ae3a:	eef0 0a68 	vmov.f32	s1, s17
 800ae3e:	ecbd 8b02 	vpop	{d8}
 800ae42:	bd38      	pop	{r3, r4, r5, pc}

0800ae44 <finite>:
 800ae44:	b082      	sub	sp, #8
 800ae46:	ed8d 0b00 	vstr	d0, [sp]
 800ae4a:	9801      	ldr	r0, [sp, #4]
 800ae4c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae50:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae54:	0fc0      	lsrs	r0, r0, #31
 800ae56:	b002      	add	sp, #8
 800ae58:	4770      	bx	lr
	...

0800ae5c <__ieee754_sqrt>:
 800ae5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	ec55 4b10 	vmov	r4, r5, d0
 800ae64:	4e67      	ldr	r6, [pc, #412]	; (800b004 <__ieee754_sqrt+0x1a8>)
 800ae66:	43ae      	bics	r6, r5
 800ae68:	ee10 0a10 	vmov	r0, s0
 800ae6c:	ee10 2a10 	vmov	r2, s0
 800ae70:	4629      	mov	r1, r5
 800ae72:	462b      	mov	r3, r5
 800ae74:	d10d      	bne.n	800ae92 <__ieee754_sqrt+0x36>
 800ae76:	f7f5 fbe7 	bl	8000648 <__aeabi_dmul>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7f5 fa2b 	bl	80002dc <__adddf3>
 800ae86:	4604      	mov	r4, r0
 800ae88:	460d      	mov	r5, r1
 800ae8a:	ec45 4b10 	vmov	d0, r4, r5
 800ae8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae92:	2d00      	cmp	r5, #0
 800ae94:	dc0b      	bgt.n	800aeae <__ieee754_sqrt+0x52>
 800ae96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae9a:	4326      	orrs	r6, r4
 800ae9c:	d0f5      	beq.n	800ae8a <__ieee754_sqrt+0x2e>
 800ae9e:	b135      	cbz	r5, 800aeae <__ieee754_sqrt+0x52>
 800aea0:	f7f5 fa1a 	bl	80002d8 <__aeabi_dsub>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	f7f5 fcf8 	bl	800089c <__aeabi_ddiv>
 800aeac:	e7eb      	b.n	800ae86 <__ieee754_sqrt+0x2a>
 800aeae:	1509      	asrs	r1, r1, #20
 800aeb0:	f000 808d 	beq.w	800afce <__ieee754_sqrt+0x172>
 800aeb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeb8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800aebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aec0:	07c9      	lsls	r1, r1, #31
 800aec2:	bf5c      	itt	pl
 800aec4:	005b      	lslpl	r3, r3, #1
 800aec6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800aeca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aece:	bf58      	it	pl
 800aed0:	0052      	lslpl	r2, r2, #1
 800aed2:	2500      	movs	r5, #0
 800aed4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800aed8:	1076      	asrs	r6, r6, #1
 800aeda:	0052      	lsls	r2, r2, #1
 800aedc:	f04f 0e16 	mov.w	lr, #22
 800aee0:	46ac      	mov	ip, r5
 800aee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aee6:	eb0c 0001 	add.w	r0, ip, r1
 800aeea:	4298      	cmp	r0, r3
 800aeec:	bfde      	ittt	le
 800aeee:	1a1b      	suble	r3, r3, r0
 800aef0:	eb00 0c01 	addle.w	ip, r0, r1
 800aef4:	186d      	addle	r5, r5, r1
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	f1be 0e01 	subs.w	lr, lr, #1
 800aefc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800af00:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af04:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800af08:	d1ed      	bne.n	800aee6 <__ieee754_sqrt+0x8a>
 800af0a:	4674      	mov	r4, lr
 800af0c:	2720      	movs	r7, #32
 800af0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800af12:	4563      	cmp	r3, ip
 800af14:	eb01 000e 	add.w	r0, r1, lr
 800af18:	dc02      	bgt.n	800af20 <__ieee754_sqrt+0xc4>
 800af1a:	d113      	bne.n	800af44 <__ieee754_sqrt+0xe8>
 800af1c:	4290      	cmp	r0, r2
 800af1e:	d811      	bhi.n	800af44 <__ieee754_sqrt+0xe8>
 800af20:	2800      	cmp	r0, #0
 800af22:	eb00 0e01 	add.w	lr, r0, r1
 800af26:	da57      	bge.n	800afd8 <__ieee754_sqrt+0x17c>
 800af28:	f1be 0f00 	cmp.w	lr, #0
 800af2c:	db54      	blt.n	800afd8 <__ieee754_sqrt+0x17c>
 800af2e:	f10c 0801 	add.w	r8, ip, #1
 800af32:	eba3 030c 	sub.w	r3, r3, ip
 800af36:	4290      	cmp	r0, r2
 800af38:	bf88      	it	hi
 800af3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800af3e:	1a12      	subs	r2, r2, r0
 800af40:	440c      	add	r4, r1
 800af42:	46c4      	mov	ip, r8
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	3f01      	subs	r7, #1
 800af48:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800af4c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800af54:	d1dd      	bne.n	800af12 <__ieee754_sqrt+0xb6>
 800af56:	4313      	orrs	r3, r2
 800af58:	d01b      	beq.n	800af92 <__ieee754_sqrt+0x136>
 800af5a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b008 <__ieee754_sqrt+0x1ac>
 800af5e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b00c <__ieee754_sqrt+0x1b0>
 800af62:	e9da 0100 	ldrd	r0, r1, [sl]
 800af66:	e9db 2300 	ldrd	r2, r3, [fp]
 800af6a:	f7f5 f9b5 	bl	80002d8 <__aeabi_dsub>
 800af6e:	e9da 8900 	ldrd	r8, r9, [sl]
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	f7f5 fde1 	bl	8000b40 <__aeabi_dcmple>
 800af7e:	b140      	cbz	r0, 800af92 <__ieee754_sqrt+0x136>
 800af80:	f1b4 3fff 	cmp.w	r4, #4294967295
 800af84:	e9da 0100 	ldrd	r0, r1, [sl]
 800af88:	e9db 2300 	ldrd	r2, r3, [fp]
 800af8c:	d126      	bne.n	800afdc <__ieee754_sqrt+0x180>
 800af8e:	3501      	adds	r5, #1
 800af90:	463c      	mov	r4, r7
 800af92:	106a      	asrs	r2, r5, #1
 800af94:	0863      	lsrs	r3, r4, #1
 800af96:	07e9      	lsls	r1, r5, #31
 800af98:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800af9c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800afa0:	bf48      	it	mi
 800afa2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800afa6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800afaa:	461c      	mov	r4, r3
 800afac:	e76d      	b.n	800ae8a <__ieee754_sqrt+0x2e>
 800afae:	0ad3      	lsrs	r3, r2, #11
 800afb0:	3815      	subs	r0, #21
 800afb2:	0552      	lsls	r2, r2, #21
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0fa      	beq.n	800afae <__ieee754_sqrt+0x152>
 800afb8:	02dc      	lsls	r4, r3, #11
 800afba:	d50a      	bpl.n	800afd2 <__ieee754_sqrt+0x176>
 800afbc:	f1c1 0420 	rsb	r4, r1, #32
 800afc0:	fa22 f404 	lsr.w	r4, r2, r4
 800afc4:	1e4d      	subs	r5, r1, #1
 800afc6:	408a      	lsls	r2, r1
 800afc8:	4323      	orrs	r3, r4
 800afca:	1b41      	subs	r1, r0, r5
 800afcc:	e772      	b.n	800aeb4 <__ieee754_sqrt+0x58>
 800afce:	4608      	mov	r0, r1
 800afd0:	e7f0      	b.n	800afb4 <__ieee754_sqrt+0x158>
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	3101      	adds	r1, #1
 800afd6:	e7ef      	b.n	800afb8 <__ieee754_sqrt+0x15c>
 800afd8:	46e0      	mov	r8, ip
 800afda:	e7aa      	b.n	800af32 <__ieee754_sqrt+0xd6>
 800afdc:	f7f5 f97e 	bl	80002dc <__adddf3>
 800afe0:	e9da 8900 	ldrd	r8, r9, [sl]
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 fd9e 	bl	8000b2c <__aeabi_dcmplt>
 800aff0:	b120      	cbz	r0, 800affc <__ieee754_sqrt+0x1a0>
 800aff2:	1ca0      	adds	r0, r4, #2
 800aff4:	bf08      	it	eq
 800aff6:	3501      	addeq	r5, #1
 800aff8:	3402      	adds	r4, #2
 800affa:	e7ca      	b.n	800af92 <__ieee754_sqrt+0x136>
 800affc:	3401      	adds	r4, #1
 800affe:	f024 0401 	bic.w	r4, r4, #1
 800b002:	e7c6      	b.n	800af92 <__ieee754_sqrt+0x136>
 800b004:	7ff00000 	.word	0x7ff00000
 800b008:	200001d8 	.word	0x200001d8
 800b00c:	200001e0 	.word	0x200001e0

0800b010 <__ieee754_atan2>:
 800b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b014:	ec57 6b11 	vmov	r6, r7, d1
 800b018:	4273      	negs	r3, r6
 800b01a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b198 <__ieee754_atan2+0x188>
 800b01e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b022:	4333      	orrs	r3, r6
 800b024:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b028:	4543      	cmp	r3, r8
 800b02a:	ec51 0b10 	vmov	r0, r1, d0
 800b02e:	ee11 5a10 	vmov	r5, s2
 800b032:	d80a      	bhi.n	800b04a <__ieee754_atan2+0x3a>
 800b034:	4244      	negs	r4, r0
 800b036:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b03a:	4304      	orrs	r4, r0
 800b03c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b040:	4544      	cmp	r4, r8
 800b042:	ee10 9a10 	vmov	r9, s0
 800b046:	468e      	mov	lr, r1
 800b048:	d907      	bls.n	800b05a <__ieee754_atan2+0x4a>
 800b04a:	4632      	mov	r2, r6
 800b04c:	463b      	mov	r3, r7
 800b04e:	f7f5 f945 	bl	80002dc <__adddf3>
 800b052:	ec41 0b10 	vmov	d0, r0, r1
 800b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b05e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b062:	4334      	orrs	r4, r6
 800b064:	d103      	bne.n	800b06e <__ieee754_atan2+0x5e>
 800b066:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b06a:	f000 bdc5 	b.w	800bbf8 <atan>
 800b06e:	17bc      	asrs	r4, r7, #30
 800b070:	f004 0402 	and.w	r4, r4, #2
 800b074:	ea53 0909 	orrs.w	r9, r3, r9
 800b078:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b07c:	d107      	bne.n	800b08e <__ieee754_atan2+0x7e>
 800b07e:	2c02      	cmp	r4, #2
 800b080:	d05f      	beq.n	800b142 <__ieee754_atan2+0x132>
 800b082:	2c03      	cmp	r4, #3
 800b084:	d1e5      	bne.n	800b052 <__ieee754_atan2+0x42>
 800b086:	a140      	add	r1, pc, #256	; (adr r1, 800b188 <__ieee754_atan2+0x178>)
 800b088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08c:	e7e1      	b.n	800b052 <__ieee754_atan2+0x42>
 800b08e:	4315      	orrs	r5, r2
 800b090:	d106      	bne.n	800b0a0 <__ieee754_atan2+0x90>
 800b092:	f1be 0f00 	cmp.w	lr, #0
 800b096:	da5f      	bge.n	800b158 <__ieee754_atan2+0x148>
 800b098:	a13d      	add	r1, pc, #244	; (adr r1, 800b190 <__ieee754_atan2+0x180>)
 800b09a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09e:	e7d8      	b.n	800b052 <__ieee754_atan2+0x42>
 800b0a0:	4542      	cmp	r2, r8
 800b0a2:	d10f      	bne.n	800b0c4 <__ieee754_atan2+0xb4>
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0aa:	d107      	bne.n	800b0bc <__ieee754_atan2+0xac>
 800b0ac:	2c02      	cmp	r4, #2
 800b0ae:	d84c      	bhi.n	800b14a <__ieee754_atan2+0x13a>
 800b0b0:	4b33      	ldr	r3, [pc, #204]	; (800b180 <__ieee754_atan2+0x170>)
 800b0b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0ba:	e7ca      	b.n	800b052 <__ieee754_atan2+0x42>
 800b0bc:	2c02      	cmp	r4, #2
 800b0be:	d848      	bhi.n	800b152 <__ieee754_atan2+0x142>
 800b0c0:	4b30      	ldr	r3, [pc, #192]	; (800b184 <__ieee754_atan2+0x174>)
 800b0c2:	e7f6      	b.n	800b0b2 <__ieee754_atan2+0xa2>
 800b0c4:	4543      	cmp	r3, r8
 800b0c6:	d0e4      	beq.n	800b092 <__ieee754_atan2+0x82>
 800b0c8:	1a9b      	subs	r3, r3, r2
 800b0ca:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b0ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0d2:	da1e      	bge.n	800b112 <__ieee754_atan2+0x102>
 800b0d4:	2f00      	cmp	r7, #0
 800b0d6:	da01      	bge.n	800b0dc <__ieee754_atan2+0xcc>
 800b0d8:	323c      	adds	r2, #60	; 0x3c
 800b0da:	db1e      	blt.n	800b11a <__ieee754_atan2+0x10a>
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	f7f5 fbdc 	bl	800089c <__aeabi_ddiv>
 800b0e4:	ec41 0b10 	vmov	d0, r0, r1
 800b0e8:	f000 ff26 	bl	800bf38 <fabs>
 800b0ec:	f000 fd84 	bl	800bbf8 <atan>
 800b0f0:	ec51 0b10 	vmov	r0, r1, d0
 800b0f4:	2c01      	cmp	r4, #1
 800b0f6:	d013      	beq.n	800b120 <__ieee754_atan2+0x110>
 800b0f8:	2c02      	cmp	r4, #2
 800b0fa:	d015      	beq.n	800b128 <__ieee754_atan2+0x118>
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d0a8      	beq.n	800b052 <__ieee754_atan2+0x42>
 800b100:	a317      	add	r3, pc, #92	; (adr r3, 800b160 <__ieee754_atan2+0x150>)
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	f7f5 f8e7 	bl	80002d8 <__aeabi_dsub>
 800b10a:	a317      	add	r3, pc, #92	; (adr r3, 800b168 <__ieee754_atan2+0x158>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	e014      	b.n	800b13c <__ieee754_atan2+0x12c>
 800b112:	a117      	add	r1, pc, #92	; (adr r1, 800b170 <__ieee754_atan2+0x160>)
 800b114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b118:	e7ec      	b.n	800b0f4 <__ieee754_atan2+0xe4>
 800b11a:	2000      	movs	r0, #0
 800b11c:	2100      	movs	r1, #0
 800b11e:	e7e9      	b.n	800b0f4 <__ieee754_atan2+0xe4>
 800b120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b124:	4619      	mov	r1, r3
 800b126:	e794      	b.n	800b052 <__ieee754_atan2+0x42>
 800b128:	a30d      	add	r3, pc, #52	; (adr r3, 800b160 <__ieee754_atan2+0x150>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	f7f5 f8d3 	bl	80002d8 <__aeabi_dsub>
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	a10c      	add	r1, pc, #48	; (adr r1, 800b168 <__ieee754_atan2+0x158>)
 800b138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13c:	f7f5 f8cc 	bl	80002d8 <__aeabi_dsub>
 800b140:	e787      	b.n	800b052 <__ieee754_atan2+0x42>
 800b142:	a109      	add	r1, pc, #36	; (adr r1, 800b168 <__ieee754_atan2+0x158>)
 800b144:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b148:	e783      	b.n	800b052 <__ieee754_atan2+0x42>
 800b14a:	a10b      	add	r1, pc, #44	; (adr r1, 800b178 <__ieee754_atan2+0x168>)
 800b14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b150:	e77f      	b.n	800b052 <__ieee754_atan2+0x42>
 800b152:	2000      	movs	r0, #0
 800b154:	2100      	movs	r1, #0
 800b156:	e77c      	b.n	800b052 <__ieee754_atan2+0x42>
 800b158:	a105      	add	r1, pc, #20	; (adr r1, 800b170 <__ieee754_atan2+0x160>)
 800b15a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15e:	e778      	b.n	800b052 <__ieee754_atan2+0x42>
 800b160:	33145c07 	.word	0x33145c07
 800b164:	3ca1a626 	.word	0x3ca1a626
 800b168:	54442d18 	.word	0x54442d18
 800b16c:	400921fb 	.word	0x400921fb
 800b170:	54442d18 	.word	0x54442d18
 800b174:	3ff921fb 	.word	0x3ff921fb
 800b178:	54442d18 	.word	0x54442d18
 800b17c:	3fe921fb 	.word	0x3fe921fb
 800b180:	0800c760 	.word	0x0800c760
 800b184:	0800c778 	.word	0x0800c778
 800b188:	54442d18 	.word	0x54442d18
 800b18c:	c00921fb 	.word	0xc00921fb
 800b190:	54442d18 	.word	0x54442d18
 800b194:	bff921fb 	.word	0xbff921fb
 800b198:	7ff00000 	.word	0x7ff00000
 800b19c:	00000000 	.word	0x00000000

0800b1a0 <__ieee754_pow>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	ed2d 8b06 	vpush	{d8-d10}
 800b1a8:	b089      	sub	sp, #36	; 0x24
 800b1aa:	ed8d 1b00 	vstr	d1, [sp]
 800b1ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b1b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b1b6:	ea58 0102 	orrs.w	r1, r8, r2
 800b1ba:	ec57 6b10 	vmov	r6, r7, d0
 800b1be:	d115      	bne.n	800b1ec <__ieee754_pow+0x4c>
 800b1c0:	19b3      	adds	r3, r6, r6
 800b1c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b1c6:	4152      	adcs	r2, r2
 800b1c8:	4299      	cmp	r1, r3
 800b1ca:	4b89      	ldr	r3, [pc, #548]	; (800b3f0 <__ieee754_pow+0x250>)
 800b1cc:	4193      	sbcs	r3, r2
 800b1ce:	f080 84d1 	bcs.w	800bb74 <__ieee754_pow+0x9d4>
 800b1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f5 f87f 	bl	80002dc <__adddf3>
 800b1de:	ec41 0b10 	vmov	d0, r0, r1
 800b1e2:	b009      	add	sp, #36	; 0x24
 800b1e4:	ecbd 8b06 	vpop	{d8-d10}
 800b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ec:	4b81      	ldr	r3, [pc, #516]	; (800b3f4 <__ieee754_pow+0x254>)
 800b1ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b1f2:	429c      	cmp	r4, r3
 800b1f4:	ee10 aa10 	vmov	sl, s0
 800b1f8:	463d      	mov	r5, r7
 800b1fa:	dc06      	bgt.n	800b20a <__ieee754_pow+0x6a>
 800b1fc:	d101      	bne.n	800b202 <__ieee754_pow+0x62>
 800b1fe:	2e00      	cmp	r6, #0
 800b200:	d1e7      	bne.n	800b1d2 <__ieee754_pow+0x32>
 800b202:	4598      	cmp	r8, r3
 800b204:	dc01      	bgt.n	800b20a <__ieee754_pow+0x6a>
 800b206:	d10f      	bne.n	800b228 <__ieee754_pow+0x88>
 800b208:	b172      	cbz	r2, 800b228 <__ieee754_pow+0x88>
 800b20a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b20e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b212:	ea55 050a 	orrs.w	r5, r5, sl
 800b216:	d1dc      	bne.n	800b1d2 <__ieee754_pow+0x32>
 800b218:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b21c:	18db      	adds	r3, r3, r3
 800b21e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b222:	4152      	adcs	r2, r2
 800b224:	429d      	cmp	r5, r3
 800b226:	e7d0      	b.n	800b1ca <__ieee754_pow+0x2a>
 800b228:	2d00      	cmp	r5, #0
 800b22a:	da3b      	bge.n	800b2a4 <__ieee754_pow+0x104>
 800b22c:	4b72      	ldr	r3, [pc, #456]	; (800b3f8 <__ieee754_pow+0x258>)
 800b22e:	4598      	cmp	r8, r3
 800b230:	dc51      	bgt.n	800b2d6 <__ieee754_pow+0x136>
 800b232:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b236:	4598      	cmp	r8, r3
 800b238:	f340 84ab 	ble.w	800bb92 <__ieee754_pow+0x9f2>
 800b23c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b240:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b244:	2b14      	cmp	r3, #20
 800b246:	dd0f      	ble.n	800b268 <__ieee754_pow+0xc8>
 800b248:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b24c:	fa22 f103 	lsr.w	r1, r2, r3
 800b250:	fa01 f303 	lsl.w	r3, r1, r3
 800b254:	4293      	cmp	r3, r2
 800b256:	f040 849c 	bne.w	800bb92 <__ieee754_pow+0x9f2>
 800b25a:	f001 0101 	and.w	r1, r1, #1
 800b25e:	f1c1 0302 	rsb	r3, r1, #2
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	b182      	cbz	r2, 800b288 <__ieee754_pow+0xe8>
 800b266:	e05f      	b.n	800b328 <__ieee754_pow+0x188>
 800b268:	2a00      	cmp	r2, #0
 800b26a:	d15b      	bne.n	800b324 <__ieee754_pow+0x184>
 800b26c:	f1c3 0314 	rsb	r3, r3, #20
 800b270:	fa48 f103 	asr.w	r1, r8, r3
 800b274:	fa01 f303 	lsl.w	r3, r1, r3
 800b278:	4543      	cmp	r3, r8
 800b27a:	f040 8487 	bne.w	800bb8c <__ieee754_pow+0x9ec>
 800b27e:	f001 0101 	and.w	r1, r1, #1
 800b282:	f1c1 0302 	rsb	r3, r1, #2
 800b286:	9304      	str	r3, [sp, #16]
 800b288:	4b5c      	ldr	r3, [pc, #368]	; (800b3fc <__ieee754_pow+0x25c>)
 800b28a:	4598      	cmp	r8, r3
 800b28c:	d132      	bne.n	800b2f4 <__ieee754_pow+0x154>
 800b28e:	f1b9 0f00 	cmp.w	r9, #0
 800b292:	f280 8477 	bge.w	800bb84 <__ieee754_pow+0x9e4>
 800b296:	4959      	ldr	r1, [pc, #356]	; (800b3fc <__ieee754_pow+0x25c>)
 800b298:	4632      	mov	r2, r6
 800b29a:	463b      	mov	r3, r7
 800b29c:	2000      	movs	r0, #0
 800b29e:	f7f5 fafd 	bl	800089c <__aeabi_ddiv>
 800b2a2:	e79c      	b.n	800b1de <__ieee754_pow+0x3e>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9304      	str	r3, [sp, #16]
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	d13d      	bne.n	800b328 <__ieee754_pow+0x188>
 800b2ac:	4b51      	ldr	r3, [pc, #324]	; (800b3f4 <__ieee754_pow+0x254>)
 800b2ae:	4598      	cmp	r8, r3
 800b2b0:	d1ea      	bne.n	800b288 <__ieee754_pow+0xe8>
 800b2b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b2b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b2be:	f000 8459 	beq.w	800bb74 <__ieee754_pow+0x9d4>
 800b2c2:	4b4f      	ldr	r3, [pc, #316]	; (800b400 <__ieee754_pow+0x260>)
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	dd08      	ble.n	800b2da <__ieee754_pow+0x13a>
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	f2c0 8456 	blt.w	800bb7c <__ieee754_pow+0x9dc>
 800b2d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2d4:	e783      	b.n	800b1de <__ieee754_pow+0x3e>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e7e5      	b.n	800b2a6 <__ieee754_pow+0x106>
 800b2da:	f1b9 0f00 	cmp.w	r9, #0
 800b2de:	f04f 0000 	mov.w	r0, #0
 800b2e2:	f04f 0100 	mov.w	r1, #0
 800b2e6:	f6bf af7a 	bge.w	800b1de <__ieee754_pow+0x3e>
 800b2ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2f2:	e774      	b.n	800b1de <__ieee754_pow+0x3e>
 800b2f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b2f8:	d106      	bne.n	800b308 <__ieee754_pow+0x168>
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	463b      	mov	r3, r7
 800b2fe:	4630      	mov	r0, r6
 800b300:	4639      	mov	r1, r7
 800b302:	f7f5 f9a1 	bl	8000648 <__aeabi_dmul>
 800b306:	e76a      	b.n	800b1de <__ieee754_pow+0x3e>
 800b308:	4b3e      	ldr	r3, [pc, #248]	; (800b404 <__ieee754_pow+0x264>)
 800b30a:	4599      	cmp	r9, r3
 800b30c:	d10c      	bne.n	800b328 <__ieee754_pow+0x188>
 800b30e:	2d00      	cmp	r5, #0
 800b310:	db0a      	blt.n	800b328 <__ieee754_pow+0x188>
 800b312:	ec47 6b10 	vmov	d0, r6, r7
 800b316:	b009      	add	sp, #36	; 0x24
 800b318:	ecbd 8b06 	vpop	{d8-d10}
 800b31c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	f7ff bd9c 	b.w	800ae5c <__ieee754_sqrt>
 800b324:	2300      	movs	r3, #0
 800b326:	9304      	str	r3, [sp, #16]
 800b328:	ec47 6b10 	vmov	d0, r6, r7
 800b32c:	f000 fe04 	bl	800bf38 <fabs>
 800b330:	ec51 0b10 	vmov	r0, r1, d0
 800b334:	f1ba 0f00 	cmp.w	sl, #0
 800b338:	d129      	bne.n	800b38e <__ieee754_pow+0x1ee>
 800b33a:	b124      	cbz	r4, 800b346 <__ieee754_pow+0x1a6>
 800b33c:	4b2f      	ldr	r3, [pc, #188]	; (800b3fc <__ieee754_pow+0x25c>)
 800b33e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b342:	429a      	cmp	r2, r3
 800b344:	d123      	bne.n	800b38e <__ieee754_pow+0x1ee>
 800b346:	f1b9 0f00 	cmp.w	r9, #0
 800b34a:	da05      	bge.n	800b358 <__ieee754_pow+0x1b8>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	2000      	movs	r0, #0
 800b352:	492a      	ldr	r1, [pc, #168]	; (800b3fc <__ieee754_pow+0x25c>)
 800b354:	f7f5 faa2 	bl	800089c <__aeabi_ddiv>
 800b358:	2d00      	cmp	r5, #0
 800b35a:	f6bf af40 	bge.w	800b1de <__ieee754_pow+0x3e>
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b364:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b368:	431c      	orrs	r4, r3
 800b36a:	d108      	bne.n	800b37e <__ieee754_pow+0x1de>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4610      	mov	r0, r2
 800b372:	4619      	mov	r1, r3
 800b374:	f7f4 ffb0 	bl	80002d8 <__aeabi_dsub>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	e78f      	b.n	800b29e <__ieee754_pow+0xfe>
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	2b01      	cmp	r3, #1
 800b382:	f47f af2c 	bne.w	800b1de <__ieee754_pow+0x3e>
 800b386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b38a:	4619      	mov	r1, r3
 800b38c:	e727      	b.n	800b1de <__ieee754_pow+0x3e>
 800b38e:	0feb      	lsrs	r3, r5, #31
 800b390:	3b01      	subs	r3, #1
 800b392:	9306      	str	r3, [sp, #24]
 800b394:	9a06      	ldr	r2, [sp, #24]
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	4313      	orrs	r3, r2
 800b39a:	d102      	bne.n	800b3a2 <__ieee754_pow+0x202>
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	e7e6      	b.n	800b370 <__ieee754_pow+0x1d0>
 800b3a2:	4b19      	ldr	r3, [pc, #100]	; (800b408 <__ieee754_pow+0x268>)
 800b3a4:	4598      	cmp	r8, r3
 800b3a6:	f340 80fb 	ble.w	800b5a0 <__ieee754_pow+0x400>
 800b3aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b3ae:	4598      	cmp	r8, r3
 800b3b0:	4b13      	ldr	r3, [pc, #76]	; (800b400 <__ieee754_pow+0x260>)
 800b3b2:	dd0c      	ble.n	800b3ce <__ieee754_pow+0x22e>
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	dc0f      	bgt.n	800b3d8 <__ieee754_pow+0x238>
 800b3b8:	f1b9 0f00 	cmp.w	r9, #0
 800b3bc:	da0f      	bge.n	800b3de <__ieee754_pow+0x23e>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	b009      	add	sp, #36	; 0x24
 800b3c2:	ecbd 8b06 	vpop	{d8-d10}
 800b3c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ca:	f000 be66 	b.w	800c09a <__math_oflow>
 800b3ce:	429c      	cmp	r4, r3
 800b3d0:	dbf2      	blt.n	800b3b8 <__ieee754_pow+0x218>
 800b3d2:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <__ieee754_pow+0x25c>)
 800b3d4:	429c      	cmp	r4, r3
 800b3d6:	dd19      	ble.n	800b40c <__ieee754_pow+0x26c>
 800b3d8:	f1b9 0f00 	cmp.w	r9, #0
 800b3dc:	dcef      	bgt.n	800b3be <__ieee754_pow+0x21e>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	b009      	add	sp, #36	; 0x24
 800b3e2:	ecbd 8b06 	vpop	{d8-d10}
 800b3e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	f000 be4d 	b.w	800c088 <__math_uflow>
 800b3ee:	bf00      	nop
 800b3f0:	fff00000 	.word	0xfff00000
 800b3f4:	7ff00000 	.word	0x7ff00000
 800b3f8:	433fffff 	.word	0x433fffff
 800b3fc:	3ff00000 	.word	0x3ff00000
 800b400:	3fefffff 	.word	0x3fefffff
 800b404:	3fe00000 	.word	0x3fe00000
 800b408:	41e00000 	.word	0x41e00000
 800b40c:	4b60      	ldr	r3, [pc, #384]	; (800b590 <__ieee754_pow+0x3f0>)
 800b40e:	2200      	movs	r2, #0
 800b410:	f7f4 ff62 	bl	80002d8 <__aeabi_dsub>
 800b414:	a354      	add	r3, pc, #336	; (adr r3, 800b568 <__ieee754_pow+0x3c8>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	4604      	mov	r4, r0
 800b41c:	460d      	mov	r5, r1
 800b41e:	f7f5 f913 	bl	8000648 <__aeabi_dmul>
 800b422:	a353      	add	r3, pc, #332	; (adr r3, 800b570 <__ieee754_pow+0x3d0>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	4606      	mov	r6, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	4620      	mov	r0, r4
 800b42e:	4629      	mov	r1, r5
 800b430:	f7f5 f90a 	bl	8000648 <__aeabi_dmul>
 800b434:	4b57      	ldr	r3, [pc, #348]	; (800b594 <__ieee754_pow+0x3f4>)
 800b436:	4682      	mov	sl, r0
 800b438:	468b      	mov	fp, r1
 800b43a:	2200      	movs	r2, #0
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f5 f902 	bl	8000648 <__aeabi_dmul>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	a14b      	add	r1, pc, #300	; (adr r1, 800b578 <__ieee754_pow+0x3d8>)
 800b44a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b44e:	f7f4 ff43 	bl	80002d8 <__aeabi_dsub>
 800b452:	4622      	mov	r2, r4
 800b454:	462b      	mov	r3, r5
 800b456:	f7f5 f8f7 	bl	8000648 <__aeabi_dmul>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	2000      	movs	r0, #0
 800b460:	494d      	ldr	r1, [pc, #308]	; (800b598 <__ieee754_pow+0x3f8>)
 800b462:	f7f4 ff39 	bl	80002d8 <__aeabi_dsub>
 800b466:	4622      	mov	r2, r4
 800b468:	4680      	mov	r8, r0
 800b46a:	4689      	mov	r9, r1
 800b46c:	462b      	mov	r3, r5
 800b46e:	4620      	mov	r0, r4
 800b470:	4629      	mov	r1, r5
 800b472:	f7f5 f8e9 	bl	8000648 <__aeabi_dmul>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f5 f8e3 	bl	8000648 <__aeabi_dmul>
 800b482:	a33f      	add	r3, pc, #252	; (adr r3, 800b580 <__ieee754_pow+0x3e0>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7f5 f8de 	bl	8000648 <__aeabi_dmul>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4650      	mov	r0, sl
 800b492:	4659      	mov	r1, fp
 800b494:	f7f4 ff20 	bl	80002d8 <__aeabi_dsub>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4680      	mov	r8, r0
 800b49e:	4689      	mov	r9, r1
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f4 ff1a 	bl	80002dc <__adddf3>
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	f7f4 ff11 	bl	80002d8 <__aeabi_dsub>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	4649      	mov	r1, r9
 800b4be:	f7f4 ff0b 	bl	80002d8 <__aeabi_dsub>
 800b4c2:	9b04      	ldr	r3, [sp, #16]
 800b4c4:	9a06      	ldr	r2, [sp, #24]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	4682      	mov	sl, r0
 800b4cc:	468b      	mov	fp, r1
 800b4ce:	f040 81e7 	bne.w	800b8a0 <__ieee754_pow+0x700>
 800b4d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b588 <__ieee754_pow+0x3e8>
 800b4d6:	eeb0 8a47 	vmov.f32	s16, s14
 800b4da:	eef0 8a67 	vmov.f32	s17, s15
 800b4de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4ec:	f7f4 fef4 	bl	80002d8 <__aeabi_dsub>
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	f7f5 f8a8 	bl	8000648 <__aeabi_dmul>
 800b4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4689      	mov	r9, r1
 800b500:	4650      	mov	r0, sl
 800b502:	4659      	mov	r1, fp
 800b504:	f7f5 f8a0 	bl	8000648 <__aeabi_dmul>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f4 fee4 	bl	80002dc <__adddf3>
 800b514:	4632      	mov	r2, r6
 800b516:	463b      	mov	r3, r7
 800b518:	4680      	mov	r8, r0
 800b51a:	4689      	mov	r9, r1
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	f7f5 f892 	bl	8000648 <__aeabi_dmul>
 800b524:	460b      	mov	r3, r1
 800b526:	4604      	mov	r4, r0
 800b528:	460d      	mov	r5, r1
 800b52a:	4602      	mov	r2, r0
 800b52c:	4649      	mov	r1, r9
 800b52e:	4640      	mov	r0, r8
 800b530:	f7f4 fed4 	bl	80002dc <__adddf3>
 800b534:	4b19      	ldr	r3, [pc, #100]	; (800b59c <__ieee754_pow+0x3fc>)
 800b536:	4299      	cmp	r1, r3
 800b538:	ec45 4b19 	vmov	d9, r4, r5
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	468b      	mov	fp, r1
 800b542:	f340 82f0 	ble.w	800bb26 <__ieee754_pow+0x986>
 800b546:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b54a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b54e:	4303      	orrs	r3, r0
 800b550:	f000 81e4 	beq.w	800b91c <__ieee754_pow+0x77c>
 800b554:	ec51 0b18 	vmov	r0, r1, d8
 800b558:	2200      	movs	r2, #0
 800b55a:	2300      	movs	r3, #0
 800b55c:	f7f5 fae6 	bl	8000b2c <__aeabi_dcmplt>
 800b560:	3800      	subs	r0, #0
 800b562:	bf18      	it	ne
 800b564:	2001      	movne	r0, #1
 800b566:	e72b      	b.n	800b3c0 <__ieee754_pow+0x220>
 800b568:	60000000 	.word	0x60000000
 800b56c:	3ff71547 	.word	0x3ff71547
 800b570:	f85ddf44 	.word	0xf85ddf44
 800b574:	3e54ae0b 	.word	0x3e54ae0b
 800b578:	55555555 	.word	0x55555555
 800b57c:	3fd55555 	.word	0x3fd55555
 800b580:	652b82fe 	.word	0x652b82fe
 800b584:	3ff71547 	.word	0x3ff71547
 800b588:	00000000 	.word	0x00000000
 800b58c:	bff00000 	.word	0xbff00000
 800b590:	3ff00000 	.word	0x3ff00000
 800b594:	3fd00000 	.word	0x3fd00000
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	408fffff 	.word	0x408fffff
 800b5a0:	4bd5      	ldr	r3, [pc, #852]	; (800b8f8 <__ieee754_pow+0x758>)
 800b5a2:	402b      	ands	r3, r5
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	b92b      	cbnz	r3, 800b5b4 <__ieee754_pow+0x414>
 800b5a8:	4bd4      	ldr	r3, [pc, #848]	; (800b8fc <__ieee754_pow+0x75c>)
 800b5aa:	f7f5 f84d 	bl	8000648 <__aeabi_dmul>
 800b5ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	1523      	asrs	r3, r4, #20
 800b5b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5ba:	4413      	add	r3, r2
 800b5bc:	9305      	str	r3, [sp, #20]
 800b5be:	4bd0      	ldr	r3, [pc, #832]	; (800b900 <__ieee754_pow+0x760>)
 800b5c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5c8:	429c      	cmp	r4, r3
 800b5ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5ce:	dd08      	ble.n	800b5e2 <__ieee754_pow+0x442>
 800b5d0:	4bcc      	ldr	r3, [pc, #816]	; (800b904 <__ieee754_pow+0x764>)
 800b5d2:	429c      	cmp	r4, r3
 800b5d4:	f340 8162 	ble.w	800b89c <__ieee754_pow+0x6fc>
 800b5d8:	9b05      	ldr	r3, [sp, #20]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5e2:	2400      	movs	r4, #0
 800b5e4:	00e3      	lsls	r3, r4, #3
 800b5e6:	9307      	str	r3, [sp, #28]
 800b5e8:	4bc7      	ldr	r3, [pc, #796]	; (800b908 <__ieee754_pow+0x768>)
 800b5ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5ee:	ed93 7b00 	vldr	d7, [r3]
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	ec53 2b17 	vmov	r2, r3, d7
 800b5f8:	eeb0 9a47 	vmov.f32	s18, s14
 800b5fc:	eef0 9a67 	vmov.f32	s19, s15
 800b600:	4682      	mov	sl, r0
 800b602:	f7f4 fe69 	bl	80002d8 <__aeabi_dsub>
 800b606:	4652      	mov	r2, sl
 800b608:	4606      	mov	r6, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	462b      	mov	r3, r5
 800b60e:	ec51 0b19 	vmov	r0, r1, d9
 800b612:	f7f4 fe63 	bl	80002dc <__adddf3>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	2000      	movs	r0, #0
 800b61c:	49bb      	ldr	r1, [pc, #748]	; (800b90c <__ieee754_pow+0x76c>)
 800b61e:	f7f5 f93d 	bl	800089c <__aeabi_ddiv>
 800b622:	ec41 0b1a 	vmov	d10, r0, r1
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4630      	mov	r0, r6
 800b62c:	4639      	mov	r1, r7
 800b62e:	f7f5 f80b 	bl	8000648 <__aeabi_dmul>
 800b632:	2300      	movs	r3, #0
 800b634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b638:	9302      	str	r3, [sp, #8]
 800b63a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b63e:	46ab      	mov	fp, r5
 800b640:	106d      	asrs	r5, r5, #1
 800b642:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b646:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b64a:	ec41 0b18 	vmov	d8, r0, r1
 800b64e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b652:	2200      	movs	r2, #0
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	4614      	mov	r4, r2
 800b65a:	461d      	mov	r5, r3
 800b65c:	f7f4 fff4 	bl	8000648 <__aeabi_dmul>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4630      	mov	r0, r6
 800b666:	4639      	mov	r1, r7
 800b668:	f7f4 fe36 	bl	80002d8 <__aeabi_dsub>
 800b66c:	ec53 2b19 	vmov	r2, r3, d9
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	4620      	mov	r0, r4
 800b676:	4629      	mov	r1, r5
 800b678:	f7f4 fe2e 	bl	80002d8 <__aeabi_dsub>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4650      	mov	r0, sl
 800b682:	4659      	mov	r1, fp
 800b684:	f7f4 fe28 	bl	80002d8 <__aeabi_dsub>
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	f7f4 ffdc 	bl	8000648 <__aeabi_dmul>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4630      	mov	r0, r6
 800b696:	4639      	mov	r1, r7
 800b698:	f7f4 fe1e 	bl	80002d8 <__aeabi_dsub>
 800b69c:	ec53 2b1a 	vmov	r2, r3, d10
 800b6a0:	f7f4 ffd2 	bl	8000648 <__aeabi_dmul>
 800b6a4:	ec53 2b18 	vmov	r2, r3, d8
 800b6a8:	ec41 0b19 	vmov	d9, r0, r1
 800b6ac:	ec51 0b18 	vmov	r0, r1, d8
 800b6b0:	f7f4 ffca 	bl	8000648 <__aeabi_dmul>
 800b6b4:	a37c      	add	r3, pc, #496	; (adr r3, 800b8a8 <__ieee754_pow+0x708>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	f7f4 ffc3 	bl	8000648 <__aeabi_dmul>
 800b6c2:	a37b      	add	r3, pc, #492	; (adr r3, 800b8b0 <__ieee754_pow+0x710>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fe08 	bl	80002dc <__adddf3>
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f7f4 ffba 	bl	8000648 <__aeabi_dmul>
 800b6d4:	a378      	add	r3, pc, #480	; (adr r3, 800b8b8 <__ieee754_pow+0x718>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fdff 	bl	80002dc <__adddf3>
 800b6de:	4622      	mov	r2, r4
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	f7f4 ffb1 	bl	8000648 <__aeabi_dmul>
 800b6e6:	a376      	add	r3, pc, #472	; (adr r3, 800b8c0 <__ieee754_pow+0x720>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fdf6 	bl	80002dc <__adddf3>
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	462b      	mov	r3, r5
 800b6f4:	f7f4 ffa8 	bl	8000648 <__aeabi_dmul>
 800b6f8:	a373      	add	r3, pc, #460	; (adr r3, 800b8c8 <__ieee754_pow+0x728>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f4 fded 	bl	80002dc <__adddf3>
 800b702:	4622      	mov	r2, r4
 800b704:	462b      	mov	r3, r5
 800b706:	f7f4 ff9f 	bl	8000648 <__aeabi_dmul>
 800b70a:	a371      	add	r3, pc, #452	; (adr r3, 800b8d0 <__ieee754_pow+0x730>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fde4 	bl	80002dc <__adddf3>
 800b714:	4622      	mov	r2, r4
 800b716:	4606      	mov	r6, r0
 800b718:	460f      	mov	r7, r1
 800b71a:	462b      	mov	r3, r5
 800b71c:	4620      	mov	r0, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	f7f4 ff92 	bl	8000648 <__aeabi_dmul>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4630      	mov	r0, r6
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f4 ff8c 	bl	8000648 <__aeabi_dmul>
 800b730:	4642      	mov	r2, r8
 800b732:	4604      	mov	r4, r0
 800b734:	460d      	mov	r5, r1
 800b736:	464b      	mov	r3, r9
 800b738:	ec51 0b18 	vmov	r0, r1, d8
 800b73c:	f7f4 fdce 	bl	80002dc <__adddf3>
 800b740:	ec53 2b19 	vmov	r2, r3, d9
 800b744:	f7f4 ff80 	bl	8000648 <__aeabi_dmul>
 800b748:	4622      	mov	r2, r4
 800b74a:	462b      	mov	r3, r5
 800b74c:	f7f4 fdc6 	bl	80002dc <__adddf3>
 800b750:	4642      	mov	r2, r8
 800b752:	4682      	mov	sl, r0
 800b754:	468b      	mov	fp, r1
 800b756:	464b      	mov	r3, r9
 800b758:	4640      	mov	r0, r8
 800b75a:	4649      	mov	r1, r9
 800b75c:	f7f4 ff74 	bl	8000648 <__aeabi_dmul>
 800b760:	4b6b      	ldr	r3, [pc, #428]	; (800b910 <__ieee754_pow+0x770>)
 800b762:	2200      	movs	r2, #0
 800b764:	4606      	mov	r6, r0
 800b766:	460f      	mov	r7, r1
 800b768:	f7f4 fdb8 	bl	80002dc <__adddf3>
 800b76c:	4652      	mov	r2, sl
 800b76e:	465b      	mov	r3, fp
 800b770:	f7f4 fdb4 	bl	80002dc <__adddf3>
 800b774:	2000      	movs	r0, #0
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4640      	mov	r0, r8
 800b780:	4649      	mov	r1, r9
 800b782:	f7f4 ff61 	bl	8000648 <__aeabi_dmul>
 800b786:	4b62      	ldr	r3, [pc, #392]	; (800b910 <__ieee754_pow+0x770>)
 800b788:	4680      	mov	r8, r0
 800b78a:	4689      	mov	r9, r1
 800b78c:	2200      	movs	r2, #0
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f4 fda1 	bl	80002d8 <__aeabi_dsub>
 800b796:	4632      	mov	r2, r6
 800b798:	463b      	mov	r3, r7
 800b79a:	f7f4 fd9d 	bl	80002d8 <__aeabi_dsub>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	4659      	mov	r1, fp
 800b7a6:	f7f4 fd97 	bl	80002d8 <__aeabi_dsub>
 800b7aa:	ec53 2b18 	vmov	r2, r3, d8
 800b7ae:	f7f4 ff4b 	bl	8000648 <__aeabi_dmul>
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	460f      	mov	r7, r1
 800b7b8:	462b      	mov	r3, r5
 800b7ba:	ec51 0b19 	vmov	r0, r1, d9
 800b7be:	f7f4 ff43 	bl	8000648 <__aeabi_dmul>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	f7f4 fd87 	bl	80002dc <__adddf3>
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460f      	mov	r7, r1
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 fd7f 	bl	80002dc <__adddf3>
 800b7de:	a33e      	add	r3, pc, #248	; (adr r3, 800b8d8 <__ieee754_pow+0x738>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	f7f4 ff2d 	bl	8000648 <__aeabi_dmul>
 800b7ee:	4642      	mov	r2, r8
 800b7f0:	ec41 0b18 	vmov	d8, r0, r1
 800b7f4:	464b      	mov	r3, r9
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f4 fd6d 	bl	80002d8 <__aeabi_dsub>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4630      	mov	r0, r6
 800b804:	4639      	mov	r1, r7
 800b806:	f7f4 fd67 	bl	80002d8 <__aeabi_dsub>
 800b80a:	a335      	add	r3, pc, #212	; (adr r3, 800b8e0 <__ieee754_pow+0x740>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 ff1a 	bl	8000648 <__aeabi_dmul>
 800b814:	a334      	add	r3, pc, #208	; (adr r3, 800b8e8 <__ieee754_pow+0x748>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	4606      	mov	r6, r0
 800b81c:	460f      	mov	r7, r1
 800b81e:	4620      	mov	r0, r4
 800b820:	4629      	mov	r1, r5
 800b822:	f7f4 ff11 	bl	8000648 <__aeabi_dmul>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f4 fd55 	bl	80002dc <__adddf3>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	4b37      	ldr	r3, [pc, #220]	; (800b914 <__ieee754_pow+0x774>)
 800b836:	4413      	add	r3, r2
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f7f4 fd4e 	bl	80002dc <__adddf3>
 800b840:	4682      	mov	sl, r0
 800b842:	9805      	ldr	r0, [sp, #20]
 800b844:	468b      	mov	fp, r1
 800b846:	f7f4 fe95 	bl	8000574 <__aeabi_i2d>
 800b84a:	9a07      	ldr	r2, [sp, #28]
 800b84c:	4b32      	ldr	r3, [pc, #200]	; (800b918 <__ieee754_pow+0x778>)
 800b84e:	4413      	add	r3, r2
 800b850:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	4652      	mov	r2, sl
 800b85a:	465b      	mov	r3, fp
 800b85c:	ec51 0b18 	vmov	r0, r1, d8
 800b860:	f7f4 fd3c 	bl	80002dc <__adddf3>
 800b864:	4642      	mov	r2, r8
 800b866:	464b      	mov	r3, r9
 800b868:	f7f4 fd38 	bl	80002dc <__adddf3>
 800b86c:	4632      	mov	r2, r6
 800b86e:	463b      	mov	r3, r7
 800b870:	f7f4 fd34 	bl	80002dc <__adddf3>
 800b874:	2000      	movs	r0, #0
 800b876:	4632      	mov	r2, r6
 800b878:	463b      	mov	r3, r7
 800b87a:	4604      	mov	r4, r0
 800b87c:	460d      	mov	r5, r1
 800b87e:	f7f4 fd2b 	bl	80002d8 <__aeabi_dsub>
 800b882:	4642      	mov	r2, r8
 800b884:	464b      	mov	r3, r9
 800b886:	f7f4 fd27 	bl	80002d8 <__aeabi_dsub>
 800b88a:	ec53 2b18 	vmov	r2, r3, d8
 800b88e:	f7f4 fd23 	bl	80002d8 <__aeabi_dsub>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4650      	mov	r0, sl
 800b898:	4659      	mov	r1, fp
 800b89a:	e610      	b.n	800b4be <__ieee754_pow+0x31e>
 800b89c:	2401      	movs	r4, #1
 800b89e:	e6a1      	b.n	800b5e4 <__ieee754_pow+0x444>
 800b8a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b8f0 <__ieee754_pow+0x750>
 800b8a4:	e617      	b.n	800b4d6 <__ieee754_pow+0x336>
 800b8a6:	bf00      	nop
 800b8a8:	4a454eef 	.word	0x4a454eef
 800b8ac:	3fca7e28 	.word	0x3fca7e28
 800b8b0:	93c9db65 	.word	0x93c9db65
 800b8b4:	3fcd864a 	.word	0x3fcd864a
 800b8b8:	a91d4101 	.word	0xa91d4101
 800b8bc:	3fd17460 	.word	0x3fd17460
 800b8c0:	518f264d 	.word	0x518f264d
 800b8c4:	3fd55555 	.word	0x3fd55555
 800b8c8:	db6fabff 	.word	0xdb6fabff
 800b8cc:	3fdb6db6 	.word	0x3fdb6db6
 800b8d0:	33333303 	.word	0x33333303
 800b8d4:	3fe33333 	.word	0x3fe33333
 800b8d8:	e0000000 	.word	0xe0000000
 800b8dc:	3feec709 	.word	0x3feec709
 800b8e0:	dc3a03fd 	.word	0xdc3a03fd
 800b8e4:	3feec709 	.word	0x3feec709
 800b8e8:	145b01f5 	.word	0x145b01f5
 800b8ec:	be3e2fe0 	.word	0xbe3e2fe0
 800b8f0:	00000000 	.word	0x00000000
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	7ff00000 	.word	0x7ff00000
 800b8fc:	43400000 	.word	0x43400000
 800b900:	0003988e 	.word	0x0003988e
 800b904:	000bb679 	.word	0x000bb679
 800b908:	0800c790 	.word	0x0800c790
 800b90c:	3ff00000 	.word	0x3ff00000
 800b910:	40080000 	.word	0x40080000
 800b914:	0800c7b0 	.word	0x0800c7b0
 800b918:	0800c7a0 	.word	0x0800c7a0
 800b91c:	a3b3      	add	r3, pc, #716	; (adr r3, 800bbec <__ieee754_pow+0xa4c>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	f7f4 fcd9 	bl	80002dc <__adddf3>
 800b92a:	4622      	mov	r2, r4
 800b92c:	ec41 0b1a 	vmov	d10, r0, r1
 800b930:	462b      	mov	r3, r5
 800b932:	4630      	mov	r0, r6
 800b934:	4639      	mov	r1, r7
 800b936:	f7f4 fccf 	bl	80002d8 <__aeabi_dsub>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	ec51 0b1a 	vmov	r0, r1, d10
 800b942:	f7f5 f911 	bl	8000b68 <__aeabi_dcmpgt>
 800b946:	2800      	cmp	r0, #0
 800b948:	f47f ae04 	bne.w	800b554 <__ieee754_pow+0x3b4>
 800b94c:	4aa2      	ldr	r2, [pc, #648]	; (800bbd8 <__ieee754_pow+0xa38>)
 800b94e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b952:	4293      	cmp	r3, r2
 800b954:	f340 8107 	ble.w	800bb66 <__ieee754_pow+0x9c6>
 800b958:	151b      	asrs	r3, r3, #20
 800b95a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b95e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b962:	fa4a fa03 	asr.w	sl, sl, r3
 800b966:	44da      	add	sl, fp
 800b968:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b96c:	489b      	ldr	r0, [pc, #620]	; (800bbdc <__ieee754_pow+0xa3c>)
 800b96e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b972:	4108      	asrs	r0, r1
 800b974:	ea00 030a 	and.w	r3, r0, sl
 800b978:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b97c:	f1c1 0114 	rsb	r1, r1, #20
 800b980:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b984:	fa4a fa01 	asr.w	sl, sl, r1
 800b988:	f1bb 0f00 	cmp.w	fp, #0
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	4620      	mov	r0, r4
 800b992:	4629      	mov	r1, r5
 800b994:	bfb8      	it	lt
 800b996:	f1ca 0a00 	rsblt	sl, sl, #0
 800b99a:	f7f4 fc9d 	bl	80002d8 <__aeabi_dsub>
 800b99e:	ec41 0b19 	vmov	d9, r0, r1
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	ec51 0b19 	vmov	r0, r1, d9
 800b9aa:	f7f4 fc97 	bl	80002dc <__adddf3>
 800b9ae:	a37a      	add	r3, pc, #488	; (adr r3, 800bb98 <__ieee754_pow+0x9f8>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	f7f4 fe45 	bl	8000648 <__aeabi_dmul>
 800b9be:	ec53 2b19 	vmov	r2, r3, d9
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	460f      	mov	r7, r1
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7f4 fc85 	bl	80002d8 <__aeabi_dsub>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	f7f4 fc7f 	bl	80002d8 <__aeabi_dsub>
 800b9da:	a371      	add	r3, pc, #452	; (adr r3, 800bba0 <__ieee754_pow+0xa00>)
 800b9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e0:	f7f4 fe32 	bl	8000648 <__aeabi_dmul>
 800b9e4:	a370      	add	r3, pc, #448	; (adr r3, 800bba8 <__ieee754_pow+0xa08>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	4680      	mov	r8, r0
 800b9ec:	4689      	mov	r9, r1
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7f4 fe29 	bl	8000648 <__aeabi_dmul>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fc6d 	bl	80002dc <__adddf3>
 800ba02:	4604      	mov	r4, r0
 800ba04:	460d      	mov	r5, r1
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	f7f4 fc65 	bl	80002dc <__adddf3>
 800ba12:	4632      	mov	r2, r6
 800ba14:	463b      	mov	r3, r7
 800ba16:	4680      	mov	r8, r0
 800ba18:	4689      	mov	r9, r1
 800ba1a:	f7f4 fc5d 	bl	80002d8 <__aeabi_dsub>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4620      	mov	r0, r4
 800ba24:	4629      	mov	r1, r5
 800ba26:	f7f4 fc57 	bl	80002d8 <__aeabi_dsub>
 800ba2a:	4642      	mov	r2, r8
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	460f      	mov	r7, r1
 800ba30:	464b      	mov	r3, r9
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f4 fe07 	bl	8000648 <__aeabi_dmul>
 800ba3a:	a35d      	add	r3, pc, #372	; (adr r3, 800bbb0 <__ieee754_pow+0xa10>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	4604      	mov	r4, r0
 800ba42:	460d      	mov	r5, r1
 800ba44:	f7f4 fe00 	bl	8000648 <__aeabi_dmul>
 800ba48:	a35b      	add	r3, pc, #364	; (adr r3, 800bbb8 <__ieee754_pow+0xa18>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f7f4 fc43 	bl	80002d8 <__aeabi_dsub>
 800ba52:	4622      	mov	r2, r4
 800ba54:	462b      	mov	r3, r5
 800ba56:	f7f4 fdf7 	bl	8000648 <__aeabi_dmul>
 800ba5a:	a359      	add	r3, pc, #356	; (adr r3, 800bbc0 <__ieee754_pow+0xa20>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7f4 fc3c 	bl	80002dc <__adddf3>
 800ba64:	4622      	mov	r2, r4
 800ba66:	462b      	mov	r3, r5
 800ba68:	f7f4 fdee 	bl	8000648 <__aeabi_dmul>
 800ba6c:	a356      	add	r3, pc, #344	; (adr r3, 800bbc8 <__ieee754_pow+0xa28>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fc31 	bl	80002d8 <__aeabi_dsub>
 800ba76:	4622      	mov	r2, r4
 800ba78:	462b      	mov	r3, r5
 800ba7a:	f7f4 fde5 	bl	8000648 <__aeabi_dmul>
 800ba7e:	a354      	add	r3, pc, #336	; (adr r3, 800bbd0 <__ieee754_pow+0xa30>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 fc2a 	bl	80002dc <__adddf3>
 800ba88:	4622      	mov	r2, r4
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	f7f4 fddc 	bl	8000648 <__aeabi_dmul>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4640      	mov	r0, r8
 800ba96:	4649      	mov	r1, r9
 800ba98:	f7f4 fc1e 	bl	80002d8 <__aeabi_dsub>
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	460d      	mov	r5, r1
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	4640      	mov	r0, r8
 800baa6:	4649      	mov	r1, r9
 800baa8:	f7f4 fdce 	bl	8000648 <__aeabi_dmul>
 800baac:	2200      	movs	r2, #0
 800baae:	ec41 0b19 	vmov	d9, r0, r1
 800bab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fc0d 	bl	80002d8 <__aeabi_dsub>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	ec51 0b19 	vmov	r0, r1, d9
 800bac6:	f7f4 fee9 	bl	800089c <__aeabi_ddiv>
 800baca:	4632      	mov	r2, r6
 800bacc:	4604      	mov	r4, r0
 800bace:	460d      	mov	r5, r1
 800bad0:	463b      	mov	r3, r7
 800bad2:	4640      	mov	r0, r8
 800bad4:	4649      	mov	r1, r9
 800bad6:	f7f4 fdb7 	bl	8000648 <__aeabi_dmul>
 800bada:	4632      	mov	r2, r6
 800badc:	463b      	mov	r3, r7
 800bade:	f7f4 fbfd 	bl	80002dc <__adddf3>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f4 fbf5 	bl	80002d8 <__aeabi_dsub>
 800baee:	4642      	mov	r2, r8
 800baf0:	464b      	mov	r3, r9
 800baf2:	f7f4 fbf1 	bl	80002d8 <__aeabi_dsub>
 800baf6:	460b      	mov	r3, r1
 800baf8:	4602      	mov	r2, r0
 800bafa:	4939      	ldr	r1, [pc, #228]	; (800bbe0 <__ieee754_pow+0xa40>)
 800bafc:	2000      	movs	r0, #0
 800bafe:	f7f4 fbeb 	bl	80002d8 <__aeabi_dsub>
 800bb02:	ec41 0b10 	vmov	d0, r0, r1
 800bb06:	ee10 3a90 	vmov	r3, s1
 800bb0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb12:	da2b      	bge.n	800bb6c <__ieee754_pow+0x9cc>
 800bb14:	4650      	mov	r0, sl
 800bb16:	f000 fa1b 	bl	800bf50 <scalbn>
 800bb1a:	ec51 0b10 	vmov	r0, r1, d0
 800bb1e:	ec53 2b18 	vmov	r2, r3, d8
 800bb22:	f7ff bbee 	b.w	800b302 <__ieee754_pow+0x162>
 800bb26:	4b2f      	ldr	r3, [pc, #188]	; (800bbe4 <__ieee754_pow+0xa44>)
 800bb28:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb2c:	429e      	cmp	r6, r3
 800bb2e:	f77f af0d 	ble.w	800b94c <__ieee754_pow+0x7ac>
 800bb32:	4b2d      	ldr	r3, [pc, #180]	; (800bbe8 <__ieee754_pow+0xa48>)
 800bb34:	440b      	add	r3, r1
 800bb36:	4303      	orrs	r3, r0
 800bb38:	d009      	beq.n	800bb4e <__ieee754_pow+0x9ae>
 800bb3a:	ec51 0b18 	vmov	r0, r1, d8
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2300      	movs	r3, #0
 800bb42:	f7f4 fff3 	bl	8000b2c <__aeabi_dcmplt>
 800bb46:	3800      	subs	r0, #0
 800bb48:	bf18      	it	ne
 800bb4a:	2001      	movne	r0, #1
 800bb4c:	e448      	b.n	800b3e0 <__ieee754_pow+0x240>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	462b      	mov	r3, r5
 800bb52:	f7f4 fbc1 	bl	80002d8 <__aeabi_dsub>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	f7f4 fffb 	bl	8000b54 <__aeabi_dcmpge>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f43f aef4 	beq.w	800b94c <__ieee754_pow+0x7ac>
 800bb64:	e7e9      	b.n	800bb3a <__ieee754_pow+0x99a>
 800bb66:	f04f 0a00 	mov.w	sl, #0
 800bb6a:	e71a      	b.n	800b9a2 <__ieee754_pow+0x802>
 800bb6c:	ec51 0b10 	vmov	r0, r1, d0
 800bb70:	4619      	mov	r1, r3
 800bb72:	e7d4      	b.n	800bb1e <__ieee754_pow+0x97e>
 800bb74:	491a      	ldr	r1, [pc, #104]	; (800bbe0 <__ieee754_pow+0xa40>)
 800bb76:	2000      	movs	r0, #0
 800bb78:	f7ff bb31 	b.w	800b1de <__ieee754_pow+0x3e>
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f7ff bb2d 	b.w	800b1de <__ieee754_pow+0x3e>
 800bb84:	4630      	mov	r0, r6
 800bb86:	4639      	mov	r1, r7
 800bb88:	f7ff bb29 	b.w	800b1de <__ieee754_pow+0x3e>
 800bb8c:	9204      	str	r2, [sp, #16]
 800bb8e:	f7ff bb7b 	b.w	800b288 <__ieee754_pow+0xe8>
 800bb92:	2300      	movs	r3, #0
 800bb94:	f7ff bb65 	b.w	800b262 <__ieee754_pow+0xc2>
 800bb98:	00000000 	.word	0x00000000
 800bb9c:	3fe62e43 	.word	0x3fe62e43
 800bba0:	fefa39ef 	.word	0xfefa39ef
 800bba4:	3fe62e42 	.word	0x3fe62e42
 800bba8:	0ca86c39 	.word	0x0ca86c39
 800bbac:	be205c61 	.word	0xbe205c61
 800bbb0:	72bea4d0 	.word	0x72bea4d0
 800bbb4:	3e663769 	.word	0x3e663769
 800bbb8:	c5d26bf1 	.word	0xc5d26bf1
 800bbbc:	3ebbbd41 	.word	0x3ebbbd41
 800bbc0:	af25de2c 	.word	0xaf25de2c
 800bbc4:	3f11566a 	.word	0x3f11566a
 800bbc8:	16bebd93 	.word	0x16bebd93
 800bbcc:	3f66c16c 	.word	0x3f66c16c
 800bbd0:	5555553e 	.word	0x5555553e
 800bbd4:	3fc55555 	.word	0x3fc55555
 800bbd8:	3fe00000 	.word	0x3fe00000
 800bbdc:	fff00000 	.word	0xfff00000
 800bbe0:	3ff00000 	.word	0x3ff00000
 800bbe4:	4090cbff 	.word	0x4090cbff
 800bbe8:	3f6f3400 	.word	0x3f6f3400
 800bbec:	652b82fe 	.word	0x652b82fe
 800bbf0:	3c971547 	.word	0x3c971547
 800bbf4:	00000000 	.word	0x00000000

0800bbf8 <atan>:
 800bbf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	ec55 4b10 	vmov	r4, r5, d0
 800bc00:	4bc3      	ldr	r3, [pc, #780]	; (800bf10 <atan+0x318>)
 800bc02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc06:	429e      	cmp	r6, r3
 800bc08:	46ab      	mov	fp, r5
 800bc0a:	dd18      	ble.n	800bc3e <atan+0x46>
 800bc0c:	4bc1      	ldr	r3, [pc, #772]	; (800bf14 <atan+0x31c>)
 800bc0e:	429e      	cmp	r6, r3
 800bc10:	dc01      	bgt.n	800bc16 <atan+0x1e>
 800bc12:	d109      	bne.n	800bc28 <atan+0x30>
 800bc14:	b144      	cbz	r4, 800bc28 <atan+0x30>
 800bc16:	4622      	mov	r2, r4
 800bc18:	462b      	mov	r3, r5
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	f7f4 fb5d 	bl	80002dc <__adddf3>
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	e006      	b.n	800bc36 <atan+0x3e>
 800bc28:	f1bb 0f00 	cmp.w	fp, #0
 800bc2c:	f300 8131 	bgt.w	800be92 <atan+0x29a>
 800bc30:	a59b      	add	r5, pc, #620	; (adr r5, 800bea0 <atan+0x2a8>)
 800bc32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc36:	ec45 4b10 	vmov	d0, r4, r5
 800bc3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3e:	4bb6      	ldr	r3, [pc, #728]	; (800bf18 <atan+0x320>)
 800bc40:	429e      	cmp	r6, r3
 800bc42:	dc14      	bgt.n	800bc6e <atan+0x76>
 800bc44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc48:	429e      	cmp	r6, r3
 800bc4a:	dc0d      	bgt.n	800bc68 <atan+0x70>
 800bc4c:	a396      	add	r3, pc, #600	; (adr r3, 800bea8 <atan+0x2b0>)
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	ee10 0a10 	vmov	r0, s0
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f4 fb40 	bl	80002dc <__adddf3>
 800bc5c:	4baf      	ldr	r3, [pc, #700]	; (800bf1c <atan+0x324>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f7f4 ff82 	bl	8000b68 <__aeabi_dcmpgt>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1e6      	bne.n	800bc36 <atan+0x3e>
 800bc68:	f04f 3aff 	mov.w	sl, #4294967295
 800bc6c:	e02b      	b.n	800bcc6 <atan+0xce>
 800bc6e:	f000 f963 	bl	800bf38 <fabs>
 800bc72:	4bab      	ldr	r3, [pc, #684]	; (800bf20 <atan+0x328>)
 800bc74:	429e      	cmp	r6, r3
 800bc76:	ec55 4b10 	vmov	r4, r5, d0
 800bc7a:	f300 80bf 	bgt.w	800bdfc <atan+0x204>
 800bc7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc82:	429e      	cmp	r6, r3
 800bc84:	f300 80a0 	bgt.w	800bdc8 <atan+0x1d0>
 800bc88:	ee10 2a10 	vmov	r2, s0
 800bc8c:	ee10 0a10 	vmov	r0, s0
 800bc90:	462b      	mov	r3, r5
 800bc92:	4629      	mov	r1, r5
 800bc94:	f7f4 fb22 	bl	80002dc <__adddf3>
 800bc98:	4ba0      	ldr	r3, [pc, #640]	; (800bf1c <atan+0x324>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f7f4 fb1c 	bl	80002d8 <__aeabi_dsub>
 800bca0:	2200      	movs	r2, #0
 800bca2:	4606      	mov	r6, r0
 800bca4:	460f      	mov	r7, r1
 800bca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcaa:	4620      	mov	r0, r4
 800bcac:	4629      	mov	r1, r5
 800bcae:	f7f4 fb15 	bl	80002dc <__adddf3>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	f7f4 fdef 	bl	800089c <__aeabi_ddiv>
 800bcbe:	f04f 0a00 	mov.w	sl, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	460d      	mov	r5, r1
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	462b      	mov	r3, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fcbb 	bl	8000648 <__aeabi_dmul>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4680      	mov	r8, r0
 800bcd8:	4689      	mov	r9, r1
 800bcda:	f7f4 fcb5 	bl	8000648 <__aeabi_dmul>
 800bcde:	a374      	add	r3, pc, #464	; (adr r3, 800beb0 <atan+0x2b8>)
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	4606      	mov	r6, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	f7f4 fcae 	bl	8000648 <__aeabi_dmul>
 800bcec:	a372      	add	r3, pc, #456	; (adr r3, 800beb8 <atan+0x2c0>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 faf3 	bl	80002dc <__adddf3>
 800bcf6:	4632      	mov	r2, r6
 800bcf8:	463b      	mov	r3, r7
 800bcfa:	f7f4 fca5 	bl	8000648 <__aeabi_dmul>
 800bcfe:	a370      	add	r3, pc, #448	; (adr r3, 800bec0 <atan+0x2c8>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 faea 	bl	80002dc <__adddf3>
 800bd08:	4632      	mov	r2, r6
 800bd0a:	463b      	mov	r3, r7
 800bd0c:	f7f4 fc9c 	bl	8000648 <__aeabi_dmul>
 800bd10:	a36d      	add	r3, pc, #436	; (adr r3, 800bec8 <atan+0x2d0>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	f7f4 fae1 	bl	80002dc <__adddf3>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	f7f4 fc93 	bl	8000648 <__aeabi_dmul>
 800bd22:	a36b      	add	r3, pc, #428	; (adr r3, 800bed0 <atan+0x2d8>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fad8 	bl	80002dc <__adddf3>
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	463b      	mov	r3, r7
 800bd30:	f7f4 fc8a 	bl	8000648 <__aeabi_dmul>
 800bd34:	a368      	add	r3, pc, #416	; (adr r3, 800bed8 <atan+0x2e0>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 facf 	bl	80002dc <__adddf3>
 800bd3e:	4642      	mov	r2, r8
 800bd40:	464b      	mov	r3, r9
 800bd42:	f7f4 fc81 	bl	8000648 <__aeabi_dmul>
 800bd46:	a366      	add	r3, pc, #408	; (adr r3, 800bee0 <atan+0x2e8>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	4689      	mov	r9, r1
 800bd50:	4630      	mov	r0, r6
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 fc78 	bl	8000648 <__aeabi_dmul>
 800bd58:	a363      	add	r3, pc, #396	; (adr r3, 800bee8 <atan+0x2f0>)
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	f7f4 fabb 	bl	80002d8 <__aeabi_dsub>
 800bd62:	4632      	mov	r2, r6
 800bd64:	463b      	mov	r3, r7
 800bd66:	f7f4 fc6f 	bl	8000648 <__aeabi_dmul>
 800bd6a:	a361      	add	r3, pc, #388	; (adr r3, 800bef0 <atan+0x2f8>)
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	f7f4 fab2 	bl	80002d8 <__aeabi_dsub>
 800bd74:	4632      	mov	r2, r6
 800bd76:	463b      	mov	r3, r7
 800bd78:	f7f4 fc66 	bl	8000648 <__aeabi_dmul>
 800bd7c:	a35e      	add	r3, pc, #376	; (adr r3, 800bef8 <atan+0x300>)
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	f7f4 faa9 	bl	80002d8 <__aeabi_dsub>
 800bd86:	4632      	mov	r2, r6
 800bd88:	463b      	mov	r3, r7
 800bd8a:	f7f4 fc5d 	bl	8000648 <__aeabi_dmul>
 800bd8e:	a35c      	add	r3, pc, #368	; (adr r3, 800bf00 <atan+0x308>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 faa0 	bl	80002d8 <__aeabi_dsub>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	f7f4 fc54 	bl	8000648 <__aeabi_dmul>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f4 fa98 	bl	80002dc <__adddf3>
 800bdac:	4622      	mov	r2, r4
 800bdae:	462b      	mov	r3, r5
 800bdb0:	f7f4 fc4a 	bl	8000648 <__aeabi_dmul>
 800bdb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	d14b      	bne.n	800be56 <atan+0x25e>
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7f4 fa89 	bl	80002d8 <__aeabi_dsub>
 800bdc6:	e72c      	b.n	800bc22 <atan+0x2a>
 800bdc8:	ee10 0a10 	vmov	r0, s0
 800bdcc:	4b53      	ldr	r3, [pc, #332]	; (800bf1c <atan+0x324>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa81 	bl	80002d8 <__aeabi_dsub>
 800bdd6:	4b51      	ldr	r3, [pc, #324]	; (800bf1c <atan+0x324>)
 800bdd8:	4606      	mov	r6, r0
 800bdda:	460f      	mov	r7, r1
 800bddc:	2200      	movs	r2, #0
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fa7b 	bl	80002dc <__adddf3>
 800bde6:	4602      	mov	r2, r0
 800bde8:	460b      	mov	r3, r1
 800bdea:	4630      	mov	r0, r6
 800bdec:	4639      	mov	r1, r7
 800bdee:	f7f4 fd55 	bl	800089c <__aeabi_ddiv>
 800bdf2:	f04f 0a01 	mov.w	sl, #1
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	460d      	mov	r5, r1
 800bdfa:	e764      	b.n	800bcc6 <atan+0xce>
 800bdfc:	4b49      	ldr	r3, [pc, #292]	; (800bf24 <atan+0x32c>)
 800bdfe:	429e      	cmp	r6, r3
 800be00:	da1d      	bge.n	800be3e <atan+0x246>
 800be02:	ee10 0a10 	vmov	r0, s0
 800be06:	4b48      	ldr	r3, [pc, #288]	; (800bf28 <atan+0x330>)
 800be08:	2200      	movs	r2, #0
 800be0a:	4629      	mov	r1, r5
 800be0c:	f7f4 fa64 	bl	80002d8 <__aeabi_dsub>
 800be10:	4b45      	ldr	r3, [pc, #276]	; (800bf28 <atan+0x330>)
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	2200      	movs	r2, #0
 800be18:	4620      	mov	r0, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 fc14 	bl	8000648 <__aeabi_dmul>
 800be20:	4b3e      	ldr	r3, [pc, #248]	; (800bf1c <atan+0x324>)
 800be22:	2200      	movs	r2, #0
 800be24:	f7f4 fa5a 	bl	80002dc <__adddf3>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4630      	mov	r0, r6
 800be2e:	4639      	mov	r1, r7
 800be30:	f7f4 fd34 	bl	800089c <__aeabi_ddiv>
 800be34:	f04f 0a02 	mov.w	sl, #2
 800be38:	4604      	mov	r4, r0
 800be3a:	460d      	mov	r5, r1
 800be3c:	e743      	b.n	800bcc6 <atan+0xce>
 800be3e:	462b      	mov	r3, r5
 800be40:	ee10 2a10 	vmov	r2, s0
 800be44:	4939      	ldr	r1, [pc, #228]	; (800bf2c <atan+0x334>)
 800be46:	2000      	movs	r0, #0
 800be48:	f7f4 fd28 	bl	800089c <__aeabi_ddiv>
 800be4c:	f04f 0a03 	mov.w	sl, #3
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	e737      	b.n	800bcc6 <atan+0xce>
 800be56:	4b36      	ldr	r3, [pc, #216]	; (800bf30 <atan+0x338>)
 800be58:	4e36      	ldr	r6, [pc, #216]	; (800bf34 <atan+0x33c>)
 800be5a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	f7f4 fa39 	bl	80002d8 <__aeabi_dsub>
 800be66:	4622      	mov	r2, r4
 800be68:	462b      	mov	r3, r5
 800be6a:	f7f4 fa35 	bl	80002d8 <__aeabi_dsub>
 800be6e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be7a:	f7f4 fa2d 	bl	80002d8 <__aeabi_dsub>
 800be7e:	f1bb 0f00 	cmp.w	fp, #0
 800be82:	4604      	mov	r4, r0
 800be84:	460d      	mov	r5, r1
 800be86:	f6bf aed6 	bge.w	800bc36 <atan+0x3e>
 800be8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be8e:	461d      	mov	r5, r3
 800be90:	e6d1      	b.n	800bc36 <atan+0x3e>
 800be92:	a51d      	add	r5, pc, #116	; (adr r5, 800bf08 <atan+0x310>)
 800be94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be98:	e6cd      	b.n	800bc36 <atan+0x3e>
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w
 800bea0:	54442d18 	.word	0x54442d18
 800bea4:	bff921fb 	.word	0xbff921fb
 800bea8:	8800759c 	.word	0x8800759c
 800beac:	7e37e43c 	.word	0x7e37e43c
 800beb0:	e322da11 	.word	0xe322da11
 800beb4:	3f90ad3a 	.word	0x3f90ad3a
 800beb8:	24760deb 	.word	0x24760deb
 800bebc:	3fa97b4b 	.word	0x3fa97b4b
 800bec0:	a0d03d51 	.word	0xa0d03d51
 800bec4:	3fb10d66 	.word	0x3fb10d66
 800bec8:	c54c206e 	.word	0xc54c206e
 800becc:	3fb745cd 	.word	0x3fb745cd
 800bed0:	920083ff 	.word	0x920083ff
 800bed4:	3fc24924 	.word	0x3fc24924
 800bed8:	5555550d 	.word	0x5555550d
 800bedc:	3fd55555 	.word	0x3fd55555
 800bee0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bee4:	bfa2b444 	.word	0xbfa2b444
 800bee8:	52defd9a 	.word	0x52defd9a
 800beec:	3fadde2d 	.word	0x3fadde2d
 800bef0:	af749a6d 	.word	0xaf749a6d
 800bef4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bef8:	fe231671 	.word	0xfe231671
 800befc:	3fbc71c6 	.word	0x3fbc71c6
 800bf00:	9998ebc4 	.word	0x9998ebc4
 800bf04:	3fc99999 	.word	0x3fc99999
 800bf08:	54442d18 	.word	0x54442d18
 800bf0c:	3ff921fb 	.word	0x3ff921fb
 800bf10:	440fffff 	.word	0x440fffff
 800bf14:	7ff00000 	.word	0x7ff00000
 800bf18:	3fdbffff 	.word	0x3fdbffff
 800bf1c:	3ff00000 	.word	0x3ff00000
 800bf20:	3ff2ffff 	.word	0x3ff2ffff
 800bf24:	40038000 	.word	0x40038000
 800bf28:	3ff80000 	.word	0x3ff80000
 800bf2c:	bff00000 	.word	0xbff00000
 800bf30:	0800c7e0 	.word	0x0800c7e0
 800bf34:	0800c7c0 	.word	0x0800c7c0

0800bf38 <fabs>:
 800bf38:	ec51 0b10 	vmov	r0, r1, d0
 800bf3c:	ee10 2a10 	vmov	r2, s0
 800bf40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf44:	ec43 2b10 	vmov	d0, r2, r3
 800bf48:	4770      	bx	lr
 800bf4a:	0000      	movs	r0, r0
 800bf4c:	0000      	movs	r0, r0
	...

0800bf50 <scalbn>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	ec55 4b10 	vmov	r4, r5, d0
 800bf56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	462b      	mov	r3, r5
 800bf5e:	b999      	cbnz	r1, 800bf88 <scalbn+0x38>
 800bf60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf64:	4323      	orrs	r3, r4
 800bf66:	d03f      	beq.n	800bfe8 <scalbn+0x98>
 800bf68:	4b35      	ldr	r3, [pc, #212]	; (800c040 <scalbn+0xf0>)
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	ee10 0a10 	vmov	r0, s0
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 fb69 	bl	8000648 <__aeabi_dmul>
 800bf76:	4b33      	ldr	r3, [pc, #204]	; (800c044 <scalbn+0xf4>)
 800bf78:	429e      	cmp	r6, r3
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	460d      	mov	r5, r1
 800bf7e:	da10      	bge.n	800bfa2 <scalbn+0x52>
 800bf80:	a327      	add	r3, pc, #156	; (adr r3, 800c020 <scalbn+0xd0>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	e01f      	b.n	800bfc8 <scalbn+0x78>
 800bf88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bf8c:	4291      	cmp	r1, r2
 800bf8e:	d10c      	bne.n	800bfaa <scalbn+0x5a>
 800bf90:	ee10 2a10 	vmov	r2, s0
 800bf94:	4620      	mov	r0, r4
 800bf96:	4629      	mov	r1, r5
 800bf98:	f7f4 f9a0 	bl	80002dc <__adddf3>
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	e022      	b.n	800bfe8 <scalbn+0x98>
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bfa8:	3936      	subs	r1, #54	; 0x36
 800bfaa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bfae:	4296      	cmp	r6, r2
 800bfb0:	dd0d      	ble.n	800bfce <scalbn+0x7e>
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	a11c      	add	r1, pc, #112	; (adr r1, 800c028 <scalbn+0xd8>)
 800bfb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfba:	da02      	bge.n	800bfc2 <scalbn+0x72>
 800bfbc:	a11c      	add	r1, pc, #112	; (adr r1, 800c030 <scalbn+0xe0>)
 800bfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc2:	a319      	add	r3, pc, #100	; (adr r3, 800c028 <scalbn+0xd8>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 fb3e 	bl	8000648 <__aeabi_dmul>
 800bfcc:	e7e6      	b.n	800bf9c <scalbn+0x4c>
 800bfce:	1872      	adds	r2, r6, r1
 800bfd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bfd4:	428a      	cmp	r2, r1
 800bfd6:	dcec      	bgt.n	800bfb2 <scalbn+0x62>
 800bfd8:	2a00      	cmp	r2, #0
 800bfda:	dd08      	ble.n	800bfee <scalbn+0x9e>
 800bfdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfe0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bfe8:	ec45 4b10 	vmov	d0, r4, r5
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
 800bfee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bff2:	da08      	bge.n	800c006 <scalbn+0xb6>
 800bff4:	2d00      	cmp	r5, #0
 800bff6:	a10a      	add	r1, pc, #40	; (adr r1, 800c020 <scalbn+0xd0>)
 800bff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bffc:	dac0      	bge.n	800bf80 <scalbn+0x30>
 800bffe:	a10e      	add	r1, pc, #56	; (adr r1, 800c038 <scalbn+0xe8>)
 800c000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c004:	e7bc      	b.n	800bf80 <scalbn+0x30>
 800c006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c00a:	3236      	adds	r2, #54	; 0x36
 800c00c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c010:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c014:	4620      	mov	r0, r4
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <scalbn+0xf8>)
 800c018:	2200      	movs	r2, #0
 800c01a:	e7d5      	b.n	800bfc8 <scalbn+0x78>
 800c01c:	f3af 8000 	nop.w
 800c020:	c2f8f359 	.word	0xc2f8f359
 800c024:	01a56e1f 	.word	0x01a56e1f
 800c028:	8800759c 	.word	0x8800759c
 800c02c:	7e37e43c 	.word	0x7e37e43c
 800c030:	8800759c 	.word	0x8800759c
 800c034:	fe37e43c 	.word	0xfe37e43c
 800c038:	c2f8f359 	.word	0xc2f8f359
 800c03c:	81a56e1f 	.word	0x81a56e1f
 800c040:	43500000 	.word	0x43500000
 800c044:	ffff3cb0 	.word	0xffff3cb0
 800c048:	3c900000 	.word	0x3c900000

0800c04c <with_errno>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	4604      	mov	r4, r0
 800c050:	460d      	mov	r5, r1
 800c052:	4616      	mov	r6, r2
 800c054:	f7fb fad0 	bl	80075f8 <__errno>
 800c058:	4629      	mov	r1, r5
 800c05a:	6006      	str	r6, [r0, #0]
 800c05c:	4620      	mov	r0, r4
 800c05e:	bd70      	pop	{r4, r5, r6, pc}

0800c060 <xflow>:
 800c060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c062:	4614      	mov	r4, r2
 800c064:	461d      	mov	r5, r3
 800c066:	b108      	cbz	r0, 800c06c <xflow+0xc>
 800c068:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c06c:	e9cd 2300 	strd	r2, r3, [sp]
 800c070:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c074:	4620      	mov	r0, r4
 800c076:	4629      	mov	r1, r5
 800c078:	f7f4 fae6 	bl	8000648 <__aeabi_dmul>
 800c07c:	2222      	movs	r2, #34	; 0x22
 800c07e:	b003      	add	sp, #12
 800c080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c084:	f7ff bfe2 	b.w	800c04c <with_errno>

0800c088 <__math_uflow>:
 800c088:	b508      	push	{r3, lr}
 800c08a:	2200      	movs	r2, #0
 800c08c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c090:	f7ff ffe6 	bl	800c060 <xflow>
 800c094:	ec41 0b10 	vmov	d0, r0, r1
 800c098:	bd08      	pop	{r3, pc}

0800c09a <__math_oflow>:
 800c09a:	b508      	push	{r3, lr}
 800c09c:	2200      	movs	r2, #0
 800c09e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c0a2:	f7ff ffdd 	bl	800c060 <xflow>
 800c0a6:	ec41 0b10 	vmov	d0, r0, r1
 800c0aa:	bd08      	pop	{r3, pc}

0800c0ac <_init>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr

0800c0b8 <_fini>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr
