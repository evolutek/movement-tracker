
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d600  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d8  0800d7e0  0800d7e0  0001d7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eeb8  0800eeb8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eeb8  0800eeb8  0001eeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eec0  0800eec0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eec0  0800eec0  0001eec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eec4  0800eec4  0001eec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800eec8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  200001f0  0800f0b8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800f0b8  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e6c  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000376d  00000000  00000000  0003a0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001048  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e77  00000000  00000000  0003fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac68  00000000  00000000  00061c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce25e  00000000  00000000  0007c88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007484  00000000  00000000  0014aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00151f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d7c8 	.word	0x0800d7c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800d7c8 	.word	0x0800d7c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <delay_us>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

__STATIC_INLINE void delay_us(uint32_t us)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <delay_us+0x3c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <delay_us+0x40>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <delay_us+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8001062:	bf00      	nop
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <delay_us+0x44>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8fa      	bhi.n	8001064 <delay_us+0x24>
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000008 	.word	0x20000008
 8001080:	431bde83 	.word	0x431bde83
 8001084:	e0001000 	.word	0xe0001000

08001088 <_enable_slave>:

static bool _debug = 0;

/*============================ Private ============================*/

static inline void _enable_slave(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f002 fbc1 	bl	800381c <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <_disable_slave>:

static inline void _disable_slave(){
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f002 fbb6 	bl	800381c <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_read_register>:

static uint8_t _read_register(uint8_t ADNS_REG_addr){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  _enable_slave();
 80010be:	f7ff ffe3 	bl	8001088 <_enable_slave>

  ADNS_REG_addr &= 0x7f;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);// send adress of the register, with MSBit = 0 to indicate it's a read
 80010cc:	1df9      	adds	r1, r7, #7
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <_read_register+0x58>)
 80010d4:	f003 fefb 	bl	8004ece <HAL_SPI_Transmit>

  delay_us(100); // tSRAD
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f7ff ffb1 	bl	8001040 <delay_us>

  uint8_t data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&hspi1, &data, 1, 100);// read data
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <_read_register+0x58>)
 80010ec:	f004 f85d 	bl	80051aa <HAL_SPI_Receive>

  delay_us(1); // tSCLK-_ncs for read operation is 120ns
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ffa5 	bl	8001040 <delay_us>
  _disable_slave();
 80010f6:	f7ff ffd2 	bl	800109e <_disable_slave>
  delay_us(19); //  tSRW/tSRR (=20us) minus tSCLK-_ncs
 80010fa:	2013      	movs	r0, #19
 80010fc:	f7ff ffa0 	bl	8001040 <delay_us>

  return data;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000428 	.word	0x20000428

08001110 <_write_register>:

static void _write_register(uint8_t ADNS_REG_addr, uint8_t data){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	_enable_slave();
 8001120:	f7ff ffb2 	bl	8001088 <_enable_slave>

	ADNS_REG_addr |= 0x80;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112a:	b2db      	uxtb	r3, r3
 800112c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);//send adress of the register, with MSBit = 1 to indicate it's a write
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	2364      	movs	r3, #100	; 0x64
 8001132:	2201      	movs	r2, #1
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <_write_register+0x50>)
 8001136:	f003 feca 	bl	8004ece <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &data, 1, 100);//send data
 800113a:	1db9      	adds	r1, r7, #6
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <_write_register+0x50>)
 8001142:	f003 fec4 	bl	8004ece <HAL_SPI_Transmit>

    delay_us(20); // tSCLK-_ncs for write operation
 8001146:	2014      	movs	r0, #20
 8001148:	f7ff ff7a 	bl	8001040 <delay_us>
    _disable_slave();
 800114c:	f7ff ffa7 	bl	800109e <_disable_slave>
    delay_us(100); // tSWW/tSWR (=120us) minus tSCLK-_ncs. Could be shortened, but is looks like a safe lower bound
 8001150:	2064      	movs	r0, #100	; 0x64
 8001152:	f7ff ff75 	bl	8001040 <delay_us>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000428 	.word	0x20000428

08001164 <_upload_firmware>:

static void _upload_firmware(){// send the firmware to the chip, cf p.18 of the datasheet
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  if (_debug) printf("Uploading optical sensors's firmware... \n");
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <_upload_firmware+0x8c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <_upload_firmware+0x14>
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <_upload_firmware+0x90>)
 8001174:	f006 fc68 	bl	8007a48 <puts>

  _write_register(ADNS_REG_Configuration_IV, 0x02); // set the configuration_IV register in 3k firmware mode   bit 1 = 1 for 3k mode, other bits are reserved
 8001178:	2102      	movs	r1, #2
 800117a:	2039      	movs	r0, #57	; 0x39
 800117c:	f7ff ffc8 	bl	8001110 <_write_register>

  _write_register(ADNS_REG_SROM_Enable, 0x1d);// write 0x1d in SROM_enable reg for initializing
 8001180:	211d      	movs	r1, #29
 8001182:	2013      	movs	r0, #19
 8001184:	f7ff ffc4 	bl	8001110 <_write_register>

  HAL_Delay(10);// wait for more than one frame period assuming that the frame rate is as low as 100fps... even if it should never be that low
 8001188:	200a      	movs	r0, #10
 800118a:	f001 febf 	bl	8002f0c <HAL_Delay>

  _write_register(ADNS_REG_SROM_Enable, 0x18); // write 0x18 to SROM_enable to start SROM download
 800118e:	2118      	movs	r1, #24
 8001190:	2013      	movs	r0, #19
 8001192:	f7ff ffbd 	bl	8001110 <_write_register>

  // write the SROM file (=firmware data)
  _enable_slave();
 8001196:	f7ff ff77 	bl	8001088 <_enable_slave>

  uint8_t buffer = ADNS_REG_SROM_Load_Burst | 0x80;
 800119a:	23e2      	movs	r3, #226	; 0xe2
 800119c:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 800119e:	1cf9      	adds	r1, r7, #3
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2201      	movs	r2, #1
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <_upload_firmware+0x94>)
 80011a6:	f003 fe92 	bl	8004ece <HAL_SPI_Transmit>

  delay_us(15);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f7ff ff48 	bl	8001040 <delay_us>

  // send all uint8_ts of the firmware (on ne peut pas utiliser la fonction transmit directement, car il faut respecter le délais de 15us)
  uint8_t c;
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	e010      	b.n	80011d8 <_upload_firmware+0x74>
    c = _adns_firmware_data[i];
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <_upload_firmware+0x98>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	70bb      	strb	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, &c, 1, 100);
 80011c0:	1cb9      	adds	r1, r7, #2
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	2201      	movs	r2, #1
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <_upload_firmware+0x94>)
 80011c8:	f003 fe81 	bl	8004ece <HAL_SPI_Transmit>
    delay_us(15);
 80011cc:	200f      	movs	r0, #15
 80011ce:	f7ff ff37 	bl	8001040 <delay_us>
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f640 32fd 	movw	r2, #3069	; 0xbfd
 80011de:	4293      	cmp	r3, r2
 80011e0:	dde9      	ble.n	80011b6 <_upload_firmware+0x52>
  }

  _disable_slave();
 80011e2:	f7ff ff5c 	bl	800109e <_disable_slave>
  }
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000224 	.word	0x20000224
 80011f4:	0800d7e0 	.word	0x0800d7e0
 80011f8:	20000428 	.word	0x20000428
 80011fc:	0800dbd8 	.word	0x0800dbd8

08001200 <_display_registers>:

static void _display_registers(void){ // display basic information of the module (primarely to check communication)
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08f      	sub	sp, #60	; 0x3c
 8001204:	af00      	add	r7, sp, #0
	int oreg[7] = {0x00,0x3F,0x2A,0x02};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	232a      	movs	r3, #42	; 0x2a
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	char* oregname[] = {"Product_ID","Inverse_Product_ID","SROM_Version","Motion"};
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <_display_registers+0xc0>)
 8001228:	f107 0408 	add.w	r4, r7, #8
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t regres;

	_enable_slave();
 8001232:	f7ff ff29 	bl	8001088 <_enable_slave>

	printf("ADNS9800 Registers : \n");
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <_display_registers+0xc4>)
 8001238:	f006 fc06 	bl	8007a48 <puts>
	for(int i=0; i<4; i++){
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
 8001240:	e034      	b.n	80012ac <_display_registers+0xac>
		uint8_t buffer = oreg[i];
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	443b      	add	r3, r7
 800124a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	71bb      	strb	r3, [r7, #6]
		HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 8001252:	1db9      	adds	r1, r7, #6
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2201      	movs	r2, #1
 8001258:	481b      	ldr	r0, [pc, #108]	; (80012c8 <_display_registers+0xc8>)
 800125a:	f003 fe38 	bl	8004ece <HAL_SPI_Transmit>
		HAL_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f001 fe54 	bl	8002f0c <HAL_Delay>

		printf(oregname[i]);
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3338      	adds	r3, #56	; 0x38
 800126a:	443b      	add	r3, r7
 800126c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001270:	4618      	mov	r0, r3
 8001272:	f006 fb7b 	bl	800796c <iprintf>
		printf(" (at adress 0x%02X) :", oreg[i]);
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	3338      	adds	r3, #56	; 0x38
 800127c:	443b      	add	r3, r7
 800127e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001282:	4619      	mov	r1, r3
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <_display_registers+0xcc>)
 8001286:	f006 fb71 	bl	800796c <iprintf>

		HAL_SPI_Receive(&hspi1, &regres, 1, 100);
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2201      	movs	r2, #1
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <_display_registers+0xc8>)
 8001292:	f003 ff8a 	bl	80051aa <HAL_SPI_Receive>
		printf(" 0x%02X \n",regres);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <_display_registers+0xd0>)
 800129c:	f006 fb66 	bl	800796c <iprintf>

		HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f001 fe33 	bl	8002f0c <HAL_Delay>
	for(int i=0; i<4; i++){
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	3301      	adds	r3, #1
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	ddc7      	ble.n	8001242 <_display_registers+0x42>
	}
	_disable_slave();
 80012b2:	f7ff fef4 	bl	800109e <_disable_slave>
}
 80012b6:	bf00      	nop
 80012b8:	373c      	adds	r7, #60	; 0x3c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800d880 	.word	0x0800d880
 80012c4:	0800d80c 	.word	0x0800d80c
 80012c8:	20000428 	.word	0x20000428
 80012cc:	0800d824 	.word	0x0800d824
 80012d0:	0800d83c 	.word	0x0800d83c

080012d4 <_convert_from_comp>:

static long _convert_from_comp(long b){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  //Convert from 2's complement
  if(b & 0x8000){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <_convert_from_comp+0x1e>
    b = -1 * ((b ^ 0xffff) + 1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 80012ec:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 80012f0:	607b      	str	r3, [r7, #4]
    }
  return b;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_update_pointer>:

static void _update_pointer(void){
 8001300:	b598      	push	{r3, r4, r7, lr}
 8001302:	af00      	add	r7, sp, #0
	_enable_slave();
 8001304:	f7ff fec0 	bl	8001088 <_enable_slave>
	raw_data[0] = (_read_register(ADNS_REG_delta_x_L) | (_read_register(ADNS_REG_delta_x_H) << 8));
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff fed3 	bl	80010b4 <_read_register>
 800130e:	4603      	mov	r3, r0
 8001310:	461c      	mov	r4, r3
 8001312:	2004      	movs	r0, #4
 8001314:	f7ff fece 	bl	80010b4 <_read_register>
 8001318:	4603      	mov	r3, r0
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4323      	orrs	r3, r4
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <_update_pointer+0x44>)
 8001320:	6013      	str	r3, [r2, #0]
	raw_data[1] = (_read_register(ADNS_REG_delta_y_L) | (_read_register(ADNS_REG_delta_y_H) << 8));
 8001322:	2005      	movs	r0, #5
 8001324:	f7ff fec6 	bl	80010b4 <_read_register>
 8001328:	4603      	mov	r3, r0
 800132a:	461c      	mov	r4, r3
 800132c:	2006      	movs	r0, #6
 800132e:	f7ff fec1 	bl	80010b4 <_read_register>
 8001332:	4603      	mov	r3, r0
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4323      	orrs	r3, r4
 8001338:	4a02      	ldr	r2, [pc, #8]	; (8001344 <_update_pointer+0x44>)
 800133a:	6053      	str	r3, [r2, #4]
	_disable_slave();
 800133c:	f7ff feaf 	bl	800109e <_disable_slave>
}
 8001340:	bf00      	nop
 8001342:	bd98      	pop	{r3, r4, r7, pc}
 8001344:	2000020c 	.word	0x2000020c

08001348 <adnsInit>:
/*============================ Public ============================*/

void adnsInit(){ // see datasheet page 20
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	//SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
	_disable_slave(); // ensure that the serial port is reset
 800134e:	f7ff fea6 	bl	800109e <_disable_slave>
	_enable_slave(); // ensure that the serial port is reset
 8001352:	f7ff fe99 	bl	8001088 <_enable_slave>
	_disable_slave(); // ensure that the serial port is reset
 8001356:	f7ff fea2 	bl	800109e <_disable_slave>
	_write_register(ADNS_REG_Power_Up_Reset, 0x5a); // force reset
 800135a:	215a      	movs	r1, #90	; 0x5a
 800135c:	203a      	movs	r0, #58	; 0x3a
 800135e:	f7ff fed7 	bl	8001110 <_write_register>
	HAL_Delay(50); // wait for it to reboot
 8001362:	2032      	movs	r0, #50	; 0x32
 8001364:	f001 fdd2 	bl	8002f0c <HAL_Delay>
	// read registers 0x02 to 0x06 (and discard the data)
	_read_register(ADNS_REG_Motion);
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff fea3 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_L);
 800136e:	2003      	movs	r0, #3
 8001370:	f7ff fea0 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_H);
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff fe9d 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_L);
 800137a:	2005      	movs	r0, #5
 800137c:	f7ff fe9a 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_H);
 8001380:	2006      	movs	r0, #6
 8001382:	f7ff fe97 	bl	80010b4 <_read_register>
	// upload the firmware
	_upload_firmware();
 8001386:	f7ff feed 	bl	8001164 <_upload_firmware>
	HAL_Delay(10);
 800138a:	200a      	movs	r0, #10
 800138c:	f001 fdbe 	bl	8002f0c <HAL_Delay>
	// enable laser(bit 0 = 0b), in normal mode (bits 3,2,1 = 000b)
	// reading the actual value of the register is important because the real
	// default value is different from what is said in the datasheet, and if you
	// change the reserved bytess (like by writing 0x00...) it would not work.
	uint8_t laser_ctrl0 = _read_register(ADNS_REG_LASER_CTRL0);
 8001390:	2020      	movs	r0, #32
 8001392:	f7ff fe8f 	bl	80010b4 <_read_register>
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	_write_register(ADNS_REG_LASER_CTRL0, laser_ctrl0 & 0xf0 );
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f023 030f 	bic.w	r3, r3, #15
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4619      	mov	r1, r3
 80013a4:	2020      	movs	r0, #32
 80013a6:	f7ff feb3 	bl	8001110 <_write_register>

	HAL_Delay(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f001 fdae 	bl	8002f0c <HAL_Delay>

	if (_debug) printf("Optical chip started up \n");
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <adnsInit+0xc0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <adnsInit+0x76>
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <adnsInit+0xc4>)
 80013ba:	f006 fb45 	bl	8007a48 <puts>

	if (_debug) _display_registers();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <adnsInit+0xc0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <adnsInit+0x82>
 80013c6:	f7ff ff1b 	bl	8001200 <_display_registers>
	if (_debug) printf("coef is set to %.4f dots per millimeter \n", _units_per_millimeter);
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <adnsInit+0xc0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <adnsInit+0x9e>
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <adnsInit+0xc8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8de 	bl	8000598 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <adnsInit+0xcc>)
 80013e2:	f006 fac3 	bl	800796c <iprintf>
	HAL_Delay(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f001 fd90 	bl	8002f0c <HAL_Delay>

	_disable_slave();
 80013ec:	f7ff fe57 	bl	800109e <_disable_slave>

	if(_debug) printf("ADNS9800 initialization done \n");
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <adnsInit+0xc0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <adnsInit+0xb6>
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <adnsInit+0xd0>)
 80013fa:	f006 fb25 	bl	8007a48 <puts>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000224 	.word	0x20000224
 800140c:	0800d890 	.word	0x0800d890
 8001410:	20000000 	.word	0x20000000
 8001414:	0800d8ac 	.word	0x0800d8ac
 8001418:	0800d8d8 	.word	0x0800d8d8

0800141c <adnsUpdate>:

bool adnsUpdate(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	//SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));

	_update_pointer();
 8001420:	f7ff ff6e 	bl	8001300 <_update_pointer>

	raw_delta[0] = _convert_from_comp(raw_data[0]);
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <adnsUpdate+0x7c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff53 	bl	80012d4 <_convert_from_comp>
 800142e:	4603      	mov	r3, r0
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <adnsUpdate+0x80>)
 8001432:	6013      	str	r3, [r2, #0]
	raw_delta[1] = - _convert_from_comp(raw_data[1]);
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <adnsUpdate+0x7c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff4b 	bl	80012d4 <_convert_from_comp>
 800143e:	4603      	mov	r3, r0
 8001440:	425b      	negs	r3, r3
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <adnsUpdate+0x80>)
 8001444:	6053      	str	r3, [r2, #4]

	if (raw_delta[0] == 0 && raw_delta[1] == 0) return 0;
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <adnsUpdate+0x80>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d105      	bne.n	800145a <adnsUpdate+0x3e>
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <adnsUpdate+0x80>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <adnsUpdate+0x3e>
 8001456:	2300      	movs	r3, #0
 8001458:	e01c      	b.n	8001494 <adnsUpdate+0x78>

	mm_delta[0] = raw_delta[0] / _units_per_millimeter;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <adnsUpdate+0x80>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <adnsUpdate+0x84>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <adnsUpdate+0x88>)
 8001472:	edc3 7a00 	vstr	s15, [r3]
	mm_delta[1] = raw_delta[1] / _units_per_millimeter;
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <adnsUpdate+0x80>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <adnsUpdate+0x84>)
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <adnsUpdate+0x88>)
 800148e:	edc3 7a01 	vstr	s15, [r3, #4]

	return 1;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000020c 	.word	0x2000020c
 800149c:	20000214 	.word	0x20000214
 80014a0:	20000000 	.word	0x20000000
 80014a4:	2000021c 	.word	0x2000021c

080014a8 <adnsX>:
void adnsSetDebugReports(bool state){
	printf("Reports for the ADNS 9800 are now set to %d \n", state);
	_debug = state;
}

float adnsX(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	return mm_delta[0];
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <adnsX+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	ee07 3a90 	vmov	s15, r3
}
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	2000021c 	.word	0x2000021c

080014c4 <adnsY>:

float adnsY(void){
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	return mm_delta[1];
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <adnsY+0x18>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	ee07 3a90 	vmov	s15, r3
}
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	2000021c 	.word	0x2000021c

080014e0 <print_header>:
//static int16_t angular_velocity_Q1 = 10;
//static int16_t gravity_Q1 = 8;

/*============================ Debug ============================*/

void print_header(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
		//Print the four byte header
		printf("Header:");
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <print_header+0x50>)
 80014e8:	f006 fa40 	bl	800796c <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	e014      	b.n	800151c <print_header+0x3c>
		{
			printf(" ");
 80014f2:	2020      	movs	r0, #32
 80014f4:	f006 fa4c 	bl	8007990 <putchar>
			if (shtpHeader[x] < 0x10)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <print_header+0x54>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d802      	bhi.n	8001508 <print_header+0x28>
				printf("0");
 8001502:	2030      	movs	r0, #48	; 0x30
 8001504:	f006 fa44 	bl	8007990 <putchar>
			printf("%01X",shtpHeader[x]);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <print_header+0x54>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <print_header+0x58>)
 8001512:	f006 fa2b 	bl	800796c <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	3301      	adds	r3, #1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d9e7      	bls.n	80014f2 <print_header+0x12>
		}
		printf("\n");
 8001522:	200a      	movs	r0, #10
 8001524:	f006 fa34 	bl	8007990 <putchar>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	0800d928 	.word	0x0800d928
 8001534:	20000228 	.word	0x20000228
 8001538:	0800d930 	.word	0x0800d930

0800153c <print_packet>:
void print_packet(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <print_packet+0x114>)
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <print_packet+0x114>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	80fb      	strh	r3, [r7, #6]

	//Print the four byte header
	print_header();
 8001556:	f7ff ffc3 	bl	80014e0 <print_header>

	uint16_t printLength = packetLength - 4;
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	3b04      	subs	r3, #4
 800155e:	80bb      	strh	r3, [r7, #4]
	if (printLength > 40){printLength = 40; printf("(Shortened) ");} //Artificial limit. We don't want the phone book.
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	2b28      	cmp	r3, #40	; 0x28
 8001564:	d904      	bls.n	8001570 <print_packet+0x34>
 8001566:	2328      	movs	r3, #40	; 0x28
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <print_packet+0x118>)
 800156c:	f006 f9fe 	bl	800796c <iprintf>

	if (packetLength & 1 << 15){
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	2b00      	cmp	r3, #0
 8001576:	da06      	bge.n	8001586 <print_packet+0x4a>
			printf("[Continued] ");
 8001578:	4837      	ldr	r0, [pc, #220]	; (8001658 <print_packet+0x11c>)
 800157a:	f006 f9f7 	bl	800796c <iprintf>
			packetLength &= ~(1 << 15);
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001584:	80fb      	strh	r3, [r7, #6]
		}
	printf("Body:");
 8001586:	4835      	ldr	r0, [pc, #212]	; (800165c <print_packet+0x120>)
 8001588:	f006 f9f0 	bl	800796c <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 800158c:	2300      	movs	r3, #0
 800158e:	70fb      	strb	r3, [r7, #3]
 8001590:	e014      	b.n	80015bc <print_packet+0x80>
	{
		printf(" ");
 8001592:	2020      	movs	r0, #32
 8001594:	f006 f9fc 	bl	8007990 <putchar>
		if (shtpData[x] < 0x10)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <print_packet+0x124>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d802      	bhi.n	80015a8 <print_packet+0x6c>
			printf("0");
 80015a2:	2030      	movs	r0, #48	; 0x30
 80015a4:	f006 f9f4 	bl	8007990 <putchar>
		printf("%01X",shtpData[x]);
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <print_packet+0x124>)
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	4619      	mov	r1, r3
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <print_packet+0x128>)
 80015b2:	f006 f9db 	bl	800796c <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	3301      	adds	r3, #1
 80015ba:	70fb      	strb	r3, [r7, #3]
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d8e5      	bhi.n	8001592 <print_packet+0x56>
	}

	printf("\n");
 80015c6:	200a      	movs	r0, #10
 80015c8:	f006 f9e2 	bl	8007990 <putchar>

	printf("Length: %u ", packetLength);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4825      	ldr	r0, [pc, #148]	; (8001668 <print_packet+0x12c>)
 80015d2:	f006 f9cb 	bl	800796c <iprintf>

	printf("Channel: ");
 80015d6:	4825      	ldr	r0, [pc, #148]	; (800166c <print_packet+0x130>)
 80015d8:	f006 f9c8 	bl	800796c <iprintf>
	switch (shtpHeader[2]){
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <print_packet+0x114>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d827      	bhi.n	8001634 <print_packet+0xf8>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <print_packet+0xb0>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001605 	.word	0x08001605
 80015f0:	0800160d 	.word	0x0800160d
 80015f4:	08001615 	.word	0x08001615
 80015f8:	0800161d 	.word	0x0800161d
 80015fc:	08001625 	.word	0x08001625
 8001600:	0800162d 	.word	0x0800162d
		case 0: printf("Command"); break;
 8001604:	481a      	ldr	r0, [pc, #104]	; (8001670 <print_packet+0x134>)
 8001606:	f006 f9b1 	bl	800796c <iprintf>
 800160a:	e01a      	b.n	8001642 <print_packet+0x106>
		case 1: printf("Executable"); break;
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <print_packet+0x138>)
 800160e:	f006 f9ad 	bl	800796c <iprintf>
 8001612:	e016      	b.n	8001642 <print_packet+0x106>
		case 2: printf("Control"); break;
 8001614:	4818      	ldr	r0, [pc, #96]	; (8001678 <print_packet+0x13c>)
 8001616:	f006 f9a9 	bl	800796c <iprintf>
 800161a:	e012      	b.n	8001642 <print_packet+0x106>
		case 3: printf("Sensor-report"); break;
 800161c:	4817      	ldr	r0, [pc, #92]	; (800167c <print_packet+0x140>)
 800161e:	f006 f9a5 	bl	800796c <iprintf>
 8001622:	e00e      	b.n	8001642 <print_packet+0x106>
		case 4: printf("Wake-report"); break;
 8001624:	4816      	ldr	r0, [pc, #88]	; (8001680 <print_packet+0x144>)
 8001626:	f006 f9a1 	bl	800796c <iprintf>
 800162a:	e00a      	b.n	8001642 <print_packet+0x106>
		case 5: printf("Gyro-vector"); break;
 800162c:	4815      	ldr	r0, [pc, #84]	; (8001684 <print_packet+0x148>)
 800162e:	f006 f99d 	bl	800796c <iprintf>
 8001632:	e006      	b.n	8001642 <print_packet+0x106>
		default: printf("Raw header : %hu", shtpHeader[2]); break;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <print_packet+0x114>)
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	4619      	mov	r1, r3
 800163a:	4813      	ldr	r0, [pc, #76]	; (8001688 <print_packet+0x14c>)
 800163c:	f006 f996 	bl	800796c <iprintf>
 8001640:	bf00      	nop
	}
	printf("\n");
 8001642:	200a      	movs	r0, #10
 8001644:	f006 f9a4 	bl	8007990 <putchar>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000228 	.word	0x20000228
 8001654:	0800d938 	.word	0x0800d938
 8001658:	0800d948 	.word	0x0800d948
 800165c:	0800d958 	.word	0x0800d958
 8001660:	2000022c 	.word	0x2000022c
 8001664:	0800d930 	.word	0x0800d930
 8001668:	0800d960 	.word	0x0800d960
 800166c:	0800d96c 	.word	0x0800d96c
 8001670:	0800d978 	.word	0x0800d978
 8001674:	0800d980 	.word	0x0800d980
 8001678:	0800d98c 	.word	0x0800d98c
 800167c:	0800d994 	.word	0x0800d994
 8001680:	0800d9a4 	.word	0x0800d9a4
 8001684:	0800d9b0 	.word	0x0800d9b0
 8001688:	0800d9bc 	.word	0x0800d9bc

0800168c <_enable_slave>:

/*============================ Hardware abstraction ============================*/

static inline void _enable_slave(){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2110      	movs	r1, #16
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f002 f8c0 	bl	800381c <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_disable_slave>:
static inline void _disable_slave(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2110      	movs	r1, #16
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f002 f8b6 	bl	800381c <HAL_GPIO_WritePin>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_reset_slave_blocking>:
static inline void _reset_slave_blocking(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2101      	movs	r1, #1
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f002 f8ac 	bl	800381c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016c4:	200a      	movs	r0, #10
 80016c6:	f001 fc21 	bl	8002f0c <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2101      	movs	r1, #1
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f002 f8a3 	bl	800381c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016d6:	200a      	movs	r0, #10
 80016d8:	f001 fc18 	bl	8002f0c <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2101      	movs	r1, #1
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e4:	f002 f89a 	bl	800381c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f001 fc0f 	bl	8002f0c <HAL_Delay>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_sensor_awaiting>:
static inline bool _sensor_awaiting(){
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin);
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f002 f875 	bl	80037ec <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}

08001712 <_wait_for_int_blocking_timeout>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
static bool _wait_for_int_blocking_timeout(uint16_t timeout){
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
	for (uint16_t counter = 0; counter < timeout; counter++){
 800171c:	2300      	movs	r3, #0
 800171e:	81fb      	strh	r3, [r7, #14]
 8001720:	e010      	b.n	8001744 <_wait_for_int_blocking_timeout+0x32>
		if (!HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin))
 8001722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f002 f85f 	bl	80037ec <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <_wait_for_int_blocking_timeout+0x26>
			return (true);
 8001734:	2301      	movs	r3, #1
 8001736:	e00a      	b.n	800174e <_wait_for_int_blocking_timeout+0x3c>
		HAL_Delay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f001 fbe7 	bl	8002f0c <HAL_Delay>
	for (uint16_t counter = 0; counter < timeout; counter++){
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	3301      	adds	r3, #1
 8001742:	81fb      	strh	r3, [r7, #14]
 8001744:	89fa      	ldrh	r2, [r7, #14]
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	429a      	cmp	r2, r3
 800174a:	d3ea      	bcc.n	8001722 <_wait_for_int_blocking_timeout+0x10>
	}
	return (false);
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_wait_for_int_blocking>:
static bool _wait_for_int_blocking(){
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
	return _wait_for_int_blocking_timeout(BNO_STANDARD_INT_TIMEOUT);
 800175a:	20fa      	movs	r0, #250	; 0xfa
 800175c:	f7ff ffd9 	bl	8001712 <_wait_for_int_blocking_timeout>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <_receive_packet>:

/*============================ Low Level ============================*/

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
static bool _receive_packet(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 800176e:	f7ff ffc0 	bl	80016f2 <_sensor_awaiting>
 8001772:	4603      	mov	r3, r0
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <_receive_packet+0x1a>
		return (false); //Data is not available
 800177e:	2300      	movs	r3, #0
 8001780:	e057      	b.n	8001832 <_receive_packet+0xca>

	//Get first four bytes to find out how much data we need to read
	_enable_slave();
 8001782:	f7ff ff83 	bl	800168c <_enable_slave>

	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(&hspi1, shtpHeader, 4, 500);
 8001786:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800178a:	2204      	movs	r2, #4
 800178c:	492b      	ldr	r1, [pc, #172]	; (800183c <_receive_packet+0xd4>)
 800178e:	482c      	ldr	r0, [pc, #176]	; (8001840 <_receive_packet+0xd8>)
 8001790:	f003 fd0b 	bl	80051aa <HAL_SPI_Receive>
	shtpHeader[2] : channelNumber;
	shtpHeader[3] : sequenceNumber;
	*/

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = (((uint16_t)shtpHeader[1]/*MSB*/) << 8) | ((uint16_t)shtpHeader[0]/*LSB*/);
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <_receive_packet+0xd4>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <_receive_packet+0xd4>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017ae:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit

	if (dataLength == 0){
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10b      	bne.n	80017ce <_receive_packet+0x66>
		if (_debug) printf("Packet empty !");
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <_receive_packet+0xdc>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <_receive_packet+0x5e>
 80017c0:	4821      	ldr	r0, [pc, #132]	; (8001848 <_receive_packet+0xe0>)
 80017c2:	f006 f8d3 	bl	800796c <iprintf>
		_disable_slave();
 80017c6:	f7ff ff6b 	bl	80016a0 <_disable_slave>
		return (false); //All done
 80017ca:	2300      	movs	r3, #0
 80017cc:	e031      	b.n	8001832 <_receive_packet+0xca>
	}

	dataLength -= 4; //Remove the header bytes from the data count
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	3b04      	subs	r3, #4
 80017d2:	80fb      	strh	r3, [r7, #6]

	//Read incoming data into the shtpData array
	if (dataLength > BNO_MAX_PACKET_SIZE)  dataLength = BNO_MAX_PACKET_SIZE;
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017da:	d902      	bls.n	80017e2 <_receive_packet+0x7a>
 80017dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017e0:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1,shtpData, dataLength, 500);
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017e8:	4918      	ldr	r1, [pc, #96]	; (800184c <_receive_packet+0xe4>)
 80017ea:	4815      	ldr	r0, [pc, #84]	; (8001840 <_receive_packet+0xd8>)
 80017ec:	f003 fcdd 	bl	80051aa <HAL_SPI_Receive>

	_disable_slave(); //Release BNO080
 80017f0:	f7ff ff56 	bl	80016a0 <_disable_slave>

	if(_debug == 2){printf("New packet retrieved :\n");print_packet();}
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_receive_packet+0xdc>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d104      	bne.n	8001808 <_receive_packet+0xa0>
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <_receive_packet+0xe8>)
 8001800:	f006 f922 	bl	8007a48 <puts>
 8001804:	f7ff fe9a 	bl	800153c <print_packet>
	// Quickly check for reset complete packet. No need for a seperate parser.
	// This function is also called after soft reset, so we need to catch this
	// packet here otherwise we need to check for the reset packet in multiple
	// places.

	if (shtpHeader[2] == CHANNEL_EXECUTABLE && shtpData[0] == BNO_EXECUTABLE_RESET_COMPLETE && _debug){
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <_receive_packet+0xd4>)
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	2201      	movs	r2, #1
 800180e:	4293      	cmp	r3, r2
 8001810:	d10e      	bne.n	8001830 <_receive_packet+0xc8>
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <_receive_packet+0xe4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10a      	bne.n	8001830 <_receive_packet+0xc8>
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <_receive_packet+0xdc>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <_receive_packet+0xc8>
		printf("OUCH !!! The IMU has just been reset ! Reason : %d \n",shtpData[1]);
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <_receive_packet+0xe4>)
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	4619      	mov	r1, r3
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <_receive_packet+0xec>)
 800182c:	f006 f89e 	bl	800796c <iprintf>
	}


	return (true); //We're done!
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000228 	.word	0x20000228
 8001840:	20000428 	.word	0x20000428
 8001844:	20000226 	.word	0x20000226
 8001848:	0800d9d0 	.word	0x0800d9d0
 800184c:	2000022c 	.word	0x2000022c
 8001850:	0800d9e0 	.word	0x0800d9e0
 8001854:	0800d9f8 	.word	0x0800d9f8

08001858 <_send_packet>:
static bool _send_packet(uint8_t channelNumber, uint8_t dataLength){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	3304      	adds	r3, #4
 800186c:	73fb      	strb	r3, [r7, #15]

	//Wait for BNO080 to indicate it is available for communication
	if (_wait_for_int_blocking() == false)
 800186e:	f7ff ff72 	bl	8001756 <_wait_for_int_blocking>
 8001872:	4603      	mov	r3, r0
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <_send_packet+0x2a>
		return false;
 800187e:	2300      	movs	r3, #0
 8001880:	e025      	b.n	80018ce <_send_packet+0x76>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode 3
	_enable_slave();
 8001882:	f7ff ff03 	bl	800168c <_enable_slave>

	//Send the 4 byte packet header
	uint8_t header_buffer[4];
	header_buffer[0] = (packetLength & 0xFF); //Packet length LSB
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	723b      	strb	r3, [r7, #8]
	header_buffer[1] = (packetLength >> 8); //Packet length MSB
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	121b      	asrs	r3, r3, #8
 800188e:	b2db      	uxtb	r3, r3
 8001890:	727b      	strb	r3, [r7, #9]
	header_buffer[2] = channelNumber;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	72bb      	strb	r3, [r7, #10]
	header_buffer[3] = (sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <_send_packet+0x80>)
 800189a:	5cd2      	ldrb	r2, [r2, r3]
 800189c:	1c51      	adds	r1, r2, #1
 800189e:	b2c8      	uxtb	r0, r1
 80018a0:	490d      	ldr	r1, [pc, #52]	; (80018d8 <_send_packet+0x80>)
 80018a2:	54c8      	strb	r0, [r1, r3]
 80018a4:	4613      	mov	r3, r2
 80018a6:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi1, header_buffer, 4, 500);
 80018a8:	f107 0108 	add.w	r1, r7, #8
 80018ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b0:	2204      	movs	r2, #4
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <_send_packet+0x84>)
 80018b4:	f003 fb0b 	bl	8004ece <HAL_SPI_Transmit>

	//Send the user's data packet
	HAL_SPI_Transmit(&hspi1, shtpData, dataLength, 500);
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <_send_packet+0x88>)
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <_send_packet+0x84>)
 80018c4:	f003 fb03 	bl	8004ece <HAL_SPI_Transmit>

	_disable_slave();
 80018c8:	f7ff feea 	bl	80016a0 <_disable_slave>

	return (true);
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000358 	.word	0x20000358
 80018dc:	20000428 	.word	0x20000428
 80018e0:	2000022c 	.word	0x2000022c

080018e4 <_set_feature_command>:

static void _set_feature_command(uint8_t reportID, uint16_t millisBetweenReports, uint32_t specificConfig){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	603a      	str	r2, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	460b      	mov	r3, r1
 80018f2:	80bb      	strh	r3, [r7, #4]

	long microsBetweenReports = (long)millisBetweenReports * 1000L;
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	60fb      	str	r3, [r7, #12]

	shtpData[0] = BNO_SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <_set_feature_command+0xb0>)
 8001902:	22fd      	movs	r2, #253	; 0xfd
 8001904:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001906:	4a23      	ldr	r2, [pc, #140]	; (8001994 <_set_feature_command+0xb0>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <_set_feature_command+0xb0>)
 800190e:	2200      	movs	r2, #0
 8001910:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <_set_feature_command+0xb0>)
 8001914:	2200      	movs	r2, #0
 8001916:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <_set_feature_command+0xb0>)
 800191a:	2200      	movs	r2, #0
 800191c:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <_set_feature_command+0xb0>)
 8001924:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	121b      	asrs	r3, r3, #8
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <_set_feature_command+0xb0>)
 800192e:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	141b      	asrs	r3, r3, #16
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <_set_feature_command+0xb0>)
 8001938:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	0e1b      	lsrs	r3, r3, #24
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <_set_feature_command+0xb0>)
 8001942:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_set_feature_command+0xb0>)
 8001946:	2200      	movs	r2, #0
 8001948:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <_set_feature_command+0xb0>)
 800194c:	2200      	movs	r2, #0
 800194e:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_set_feature_command+0xb0>)
 8001952:	2200      	movs	r2, #0
 8001954:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <_set_feature_command+0xb0>)
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <_set_feature_command+0xb0>)
 8001962:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <_set_feature_command+0xb0>)
 800196c:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_set_feature_command+0xb0>)
 8001976:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	0e1b      	lsrs	r3, r3, #24
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <_set_feature_command+0xb0>)
 8001980:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	_send_packet(CHANNEL_CONTROL, 17);
 8001982:	2302      	movs	r3, #2
 8001984:	2111      	movs	r1, #17
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff66 	bl	8001858 <_send_packet>
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000022c 	.word	0x2000022c

08001998 <_quaternion_to_float>:

static float _quaternion_to_float(int16_t fixedPointValue, uint8_t qPoint){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	80fb      	strh	r3, [r7, #6]
 80019a4:	4613      	mov	r3, r2
 80019a6:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, -qPoint);
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	425b      	negs	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdd9 	bl	8000574 <__aeabi_i2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b11 	vmov	d1, r2, r3
 80019ca:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001a08 <_quaternion_to_float+0x70>
 80019ce:	f009 fd19 	bl	800b404 <pow>
 80019d2:	ec55 4b10 	vmov	r4, r5, d0
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fe30 	bl	8000648 <__aeabi_dmul>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f922 	bl	8000c38 <__aeabi_d2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	ee07 3a90 	vmov	s15, r3
}
 80019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40000000 	.word	0x40000000

08001a10 <_parse_input_report>:
//shtpData[4:5]: i/accel x/gyro x/etc
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
static uint16_t _parse_input_report(void){
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001a16:	4b7c      	ldr	r3, [pc, #496]	; (8001c08 <_parse_input_report+0x1f8>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <_parse_input_report+0x1f8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	817b      	strh	r3, [r7, #10]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a2e:	817b      	strh	r3, [r7, #10]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	3b04      	subs	r3, #4
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	817b      	strh	r3, [r7, #10]

	timeStamp = ((uint32_t)shtpData[4] << (24)) | ((uint32_t)shtpData[3] << (16)) | ((uint32_t)shtpData[2] << (8)) | ((uint32_t)shtpData[1]);
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a3a:	791b      	ldrb	r3, [r3, #4]
 8001a3c:	061a      	lsls	r2, r3, #24
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4b71      	ldr	r3, [pc, #452]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	4a6f      	ldr	r2, [pc, #444]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a50:	7852      	ldrb	r2, [r2, #1]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <_parse_input_report+0x200>)
 8001a56:	6013      	str	r3, [r2, #0]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <_parse_input_report+0x1f8>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d155      	bne.n	8001b0e <_parse_input_report+0xfe>
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
 8001a62:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <_parse_input_report+0x204>)
 8001a78:	801a      	strh	r2, [r3, #0]
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a84:	789b      	ldrb	r3, [r3, #2]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <_parse_input_report+0x208>)
 8001a90:	801a      	strh	r2, [r3, #0]
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a94:	795b      	ldrb	r3, [r3, #5]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <_parse_input_report+0x1fc>)
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <_parse_input_report+0x20c>)
 8001aa8:	801a      	strh	r2, [r3, #0]
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <_parse_input_report+0x1fc>)
 8001aac:	79db      	ldrb	r3, [r3, #7]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <_parse_input_report+0x1fc>)
 8001ab4:	799b      	ldrb	r3, [r3, #6]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <_parse_input_report+0x210>)
 8001ac0:	801a      	strh	r2, [r3, #0]
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
 8001ac2:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <_parse_input_report+0x1fc>)
 8001ac4:	7a5b      	ldrb	r3, [r3, #9]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <_parse_input_report+0x1fc>)
 8001acc:	7a1b      	ldrb	r3, [r3, #8]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <_parse_input_report+0x214>)
 8001ad8:	801a      	strh	r2, [r3, #0]
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <_parse_input_report+0x1fc>)
 8001adc:	7adb      	ldrb	r3, [r3, #11]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <_parse_input_report+0x1fc>)
 8001ae4:	7a9b      	ldrb	r3, [r3, #10]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <_parse_input_report+0x218>)
 8001af0:	801a      	strh	r2, [r3, #0]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <_parse_input_report+0x1fc>)
 8001af4:	7b5b      	ldrb	r3, [r3, #13]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <_parse_input_report+0x1fc>)
 8001afc:	7b1b      	ldrb	r3, [r3, #12]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <_parse_input_report+0x21c>)
 8001b08:	801a      	strh	r2, [r3, #0]

		return BNO_REPORTID_GYRO_INTEGRATED_ROTATION_VECTOR;
 8001b0a:	232a      	movs	r3, #42	; 0x2a
 8001b0c:	e075      	b.n	8001bfa <_parse_input_report+0x1ea>
	}

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b10:	79db      	ldrb	r3, [r3, #7]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	727b      	strb	r3, [r7, #9]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b1a:	7a9b      	ldrb	r3, [r3, #10]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b22:	7a5b      	ldrb	r3, [r3, #9]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b2e:	7b1b      	ldrb	r3, [r3, #12]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b36:	7adb      	ldrb	r3, [r3, #11]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b42:	7b9b      	ldrb	r3, [r3, #14]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b4a:	7b5b      	ldrb	r3, [r3, #13]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	81fb      	strh	r3, [r7, #14]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001b58:	2300      	movs	r3, #0
 8001b5a:	81bb      	strh	r3, [r7, #12]
	uint16_t data6 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	803b      	strh	r3, [r7, #0]

	if (dataLength > 14)
 8001b60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b64:	2b0e      	cmp	r3, #14
 8001b66:	dd09      	ble.n	8001b7c <_parse_input_report+0x16c>
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b6a:	7c1b      	ldrb	r3, [r3, #16]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b72:	7bdb      	ldrb	r3, [r3, #15]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	81fb      	strh	r3, [r7, #14]
	if (dataLength > 16)
 8001b7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	dd09      	ble.n	8001b98 <_parse_input_report+0x188>
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b86:	7c9b      	ldrb	r3, [r3, #18]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <_parse_input_report+0x1fc>)
 8001b8e:	7c5b      	ldrb	r3, [r3, #17]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	81bb      	strh	r3, [r7, #12]
	if (dataLength > 18)
 8001b98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	dd09      	ble.n	8001bb4 <_parse_input_report+0x1a4>
		data6 = (uint16_t)shtpData[20] << 8 | shtpData[19];
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <_parse_input_report+0x1fc>)
 8001ba2:	7d1b      	ldrb	r3, [r3, #20]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <_parse_input_report+0x1fc>)
 8001baa:	7cdb      	ldrb	r3, [r3, #19]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	803b      	strh	r3, [r7, #0]


	//Store these generic values to their proper global variable
	switch (shtpData[5]){
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <_parse_input_report+0x1fc>)
 8001bb6:	795b      	ldrb	r3, [r3, #5]
 8001bb8:	2b29      	cmp	r3, #41	; 0x29
 8001bba:	dc1d      	bgt.n	8001bf8 <_parse_input_report+0x1e8>
 8001bbc:	2b28      	cmp	r3, #40	; 0x28
 8001bbe:	da03      	bge.n	8001bc8 <_parse_input_report+0x1b8>
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d001      	beq.n	8001bc8 <_parse_input_report+0x1b8>
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d117      	bne.n	8001bf8 <_parse_input_report+0x1e8>
	*/
	case (BNO_REPORTID_AR_VR_STABILIZED_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR):
	case (BNO_REPORTID_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_ROTATION_VECTOR):
		quatAccuracy = status;
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <_parse_input_report+0x220>)
 8001bce:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <_parse_input_report+0x204>)
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <_parse_input_report+0x208>)
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <_parse_input_report+0x20c>)
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <_parse_input_report+0x210>)
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	8013      	strh	r3, [r2, #0]
		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <_parse_input_report+0x224>)
 8001bea:	89bb      	ldrh	r3, [r7, #12]
 8001bec:	8013      	strh	r3, [r2, #0]
		break;
 8001bee:	bf00      	nop
	*/
	default :
		return 0;
	}

	return shtpData[5];
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <_parse_input_report+0x1fc>)
 8001bf2:	795b      	ldrb	r3, [r3, #5]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	e000      	b.n	8001bfa <_parse_input_report+0x1ea>
		return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000228 	.word	0x20000228
 8001c0c:	2000022c 	.word	0x2000022c
 8001c10:	20000370 	.word	0x20000370
 8001c14:	2000035e 	.word	0x2000035e
 8001c18:	20000360 	.word	0x20000360
 8001c1c:	20000362 	.word	0x20000362
 8001c20:	20000364 	.word	0x20000364
 8001c24:	2000036a 	.word	0x2000036a
 8001c28:	2000036c 	.word	0x2000036c
 8001c2c:	2000036e 	.word	0x2000036e
 8001c30:	20000368 	.word	0x20000368
 8001c34:	20000366 	.word	0x20000366

08001c38 <_parse_command_report>:
//shtpData[5 + 4]: R4
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
static uint16_t _parse_command_report(void){
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	switch(shtpData[0]){
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <_parse_command_report+0x3c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2bf1      	cmp	r3, #241	; 0xf1
 8001c44:	d10d      	bne.n	8001c62 <_parse_command_report+0x2a>
	case BNO_SHTP_REPORT_COMMAND_RESPONSE :
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <_parse_command_report+0x3c>)
 8001c48:	789b      	ldrb	r3, [r3, #2]
 8001c4a:	71fb      	strb	r3, [r7, #7]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	2b07      	cmp	r3, #7
 8001c50:	d103      	bne.n	8001c5a <_parse_command_report+0x22>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_parse_command_report+0x3c>)
 8001c54:	795a      	ldrb	r2, [r3, #5]
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_parse_command_report+0x40>)
 8001c58:	701a      	strb	r2, [r3, #0]
		}
		return shtpData[0];
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <_parse_command_report+0x3c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	e001      	b.n	8001c66 <_parse_command_report+0x2e>

	default :
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
		break;
 8001c62:	bf00      	nop
	}


	//TODO additional feature reports may be strung together. Parse them all.
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000022c 	.word	0x2000022c
 8001c78:	20000374 	.word	0x20000374

08001c7c <bno_setup>:

/*============================ High Level (Public) ============================*/

bool bno_setup(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
	_disable_slave();
 8001c82:	f7ff fd0d 	bl	80016a0 <_disable_slave>
	_reset_slave_blocking();
 8001c86:	f7ff fd15 	bl	80016b4 <_reset_slave_blocking>
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	_wait_for_int_blocking(); //Wait for assertion of INT before reading advert message.
 8001c8a:	f7ff fd64 	bl	8001756 <_wait_for_int_blocking>
	_receive_packet();
 8001c8e:	f7ff fd6b 	bl	8001768 <_receive_packet>
	_wait_for_int_blocking(); //Advert message is too long to be handled at once, repeat
 8001c92:	f7ff fd60 	bl	8001756 <_wait_for_int_blocking>
	_receive_packet();
 8001c96:	f7ff fd67 	bl	8001768 <_receive_packet>
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	_wait_for_int_blocking(); //Wait for assertion of INT before reading Init response
 8001c9a:	f7ff fd5c 	bl	8001756 <_wait_for_int_blocking>
	_receive_packet();
 8001c9e:	f7ff fd63 	bl	8001768 <_receive_packet>

	//Check communication with device
	shtpData[0] = BNO_SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <bno_setup+0x114>)
 8001ca4:	22f9      	movs	r2, #249	; 0xf9
 8001ca6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <bno_setup+0x114>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	if(!_send_packet(CHANNEL_CONTROL, 2)){
 8001cae:	2302      	movs	r3, #2
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fdd0 	bl	8001858 <_send_packet>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <bno_setup+0x5c>
		if(_debug) printf("Send command to the BNO085 failed");
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <bno_setup+0x118>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <bno_setup+0x58>
 8001cce:	4832      	ldr	r0, [pc, #200]	; (8001d98 <bno_setup+0x11c>)
 8001cd0:	f005 fe4c 	bl	800796c <iprintf>
		return false;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e056      	b.n	8001d86 <bno_setup+0x10a>
	}

	//Now we wait for response
	_wait_for_int_blocking();
 8001cd8:	f7ff fd3d 	bl	8001756 <_wait_for_int_blocking>
	_receive_packet();
 8001cdc:	f7ff fd44 	bl	8001768 <_receive_packet>
	if (shtpData[0] == BNO_SHTP_REPORT_PRODUCT_ID_RESPONSE){
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <bno_setup+0x114>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2bf8      	cmp	r3, #248	; 0xf8
 8001ce6:	d14d      	bne.n	8001d84 <bno_setup+0x108>
		if (_debug){
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <bno_setup+0x118>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d046      	beq.n	8001d80 <bno_setup+0x104>
			printf("Reset has occured (as expected at startup): %d\n", shtpData[1]);
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <bno_setup+0x114>)
 8001cf4:	785b      	ldrb	r3, [r3, #1]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4828      	ldr	r0, [pc, #160]	; (8001d9c <bno_setup+0x120>)
 8001cfa:	f005 fe37 	bl	800796c <iprintf>
			printf("SW Version Major: 0x%04X", shtpData[2]);
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <bno_setup+0x114>)
 8001d00:	789b      	ldrb	r3, [r3, #2]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4826      	ldr	r0, [pc, #152]	; (8001da0 <bno_setup+0x124>)
 8001d06:	f005 fe31 	bl	800796c <iprintf>
			printf(" SW Version Minor: 0x%04X \n", shtpData[3]);
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <bno_setup+0x114>)
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4824      	ldr	r0, [pc, #144]	; (8001da4 <bno_setup+0x128>)
 8001d12:	f005 fe2b 	bl	800796c <iprintf>
			uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <bno_setup+0x114>)
 8001d18:	79db      	ldrb	r3, [r3, #7]
 8001d1a:	061a      	lsls	r2, r3, #24
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <bno_setup+0x114>)
 8001d1e:	799b      	ldrb	r3, [r3, #6]
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	431a      	orrs	r2, r3
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <bno_setup+0x114>)
 8001d26:	795b      	ldrb	r3, [r3, #5]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <bno_setup+0x114>)
 8001d2e:	7912      	ldrb	r2, [r2, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
			printf("SW Part Number: %ld \n",SW_Part_Number);
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	481c      	ldr	r0, [pc, #112]	; (8001da8 <bno_setup+0x12c>)
 8001d38:	f005 fe18 	bl	800796c <iprintf>
			uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <bno_setup+0x114>)
 8001d3e:	7adb      	ldrb	r3, [r3, #11]
 8001d40:	061a      	lsls	r2, r3, #24
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <bno_setup+0x114>)
 8001d44:	7a9b      	ldrb	r3, [r3, #10]
 8001d46:	041b      	lsls	r3, r3, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <bno_setup+0x114>)
 8001d4c:	7a5b      	ldrb	r3, [r3, #9]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4313      	orrs	r3, r2
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <bno_setup+0x114>)
 8001d54:	7a12      	ldrb	r2, [r2, #8]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60bb      	str	r3, [r7, #8]
			printf("SW Build Number: %ld \n", SW_Build_Number);
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	4813      	ldr	r0, [pc, #76]	; (8001dac <bno_setup+0x130>)
 8001d5e:	f005 fe05 	bl	800796c <iprintf>
			uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <bno_setup+0x114>)
 8001d64:	7b5b      	ldrb	r3, [r3, #13]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <bno_setup+0x114>)
 8001d6c:	7b1b      	ldrb	r3, [r3, #12]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	80fb      	strh	r3, [r7, #6]
			printf("SW Version Patch: %d \n",SW_Version_Patch);
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <bno_setup+0x134>)
 8001d7c:	f005 fdf6 	bl	800796c <iprintf>
		}
		return (true);
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <bno_setup+0x10a>
	}
	return (false); //Something went wrong
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000022c 	.word	0x2000022c
 8001d94:	20000226 	.word	0x20000226
 8001d98:	0800da30 	.word	0x0800da30
 8001d9c:	0800da54 	.word	0x0800da54
 8001da0:	0800da84 	.word	0x0800da84
 8001da4:	0800daa0 	.word	0x0800daa0
 8001da8:	0800dabc 	.word	0x0800dabc
 8001dac:	0800dad4 	.word	0x0800dad4
 8001db0:	0800daec 	.word	0x0800daec

08001db4 <bno_enable_rotation_vector>:

void bno_enable_rotation_vector(uint16_t millisBetweenReports){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
	_set_feature_command(BNO_REPORTID_ROTATION_VECTOR, millisBetweenReports, 0);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	2005      	movs	r0, #5
 8001dc6:	f7ff fd8d 	bl	80018e4 <_set_feature_command>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <bno_get_readings>:

uint16_t bno_get_readings(void){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

	if (_receive_packet() == true){
 8001dd8:	f7ff fcc6 	bl	8001768 <_receive_packet>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01a      	beq.n	8001e18 <bno_get_readings+0x44>
		//Check to see if this packet is a sensor reporting its data to us
		if ((shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == BNO_SHTP_REPORT_BASE_TIMESTAMP) || shtpHeader[2] == CHANNEL_GYRO)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <bno_get_readings+0x4c>)
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	2203      	movs	r2, #3
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d103      	bne.n	8001df4 <bno_get_readings+0x20>
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <bno_get_readings+0x50>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2bfb      	cmp	r3, #251	; 0xfb
 8001df2:	d004      	beq.n	8001dfe <bno_get_readings+0x2a>
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <bno_get_readings+0x4c>)
 8001df6:	789b      	ldrb	r3, [r3, #2]
 8001df8:	2205      	movs	r2, #5
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d103      	bne.n	8001e06 <bno_get_readings+0x32>
			return _parse_input_report(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001dfe:	f7ff fe07 	bl	8001a10 <_parse_input_report>
 8001e02:	4603      	mov	r3, r0
 8001e04:	e009      	b.n	8001e1a <bno_get_readings+0x46>
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <bno_get_readings+0x4c>)
 8001e08:	789b      	ldrb	r3, [r3, #2]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d103      	bne.n	8001e18 <bno_get_readings+0x44>
			return _parse_command_report(); //This will update responses to commands, calibrationStatus, etc.
 8001e10:	f7ff ff12 	bl	8001c38 <_parse_command_report>
 8001e14:	4603      	mov	r3, r0
 8001e16:	e000      	b.n	8001e1a <bno_get_readings+0x46>
	}
	return 0;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000228 	.word	0x20000228
 8001e24:	2000022c 	.word	0x2000022c

08001e28 <bno_get_yaw>:

float bno_get_yaw(void){
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
	 // get quaternion arguments
	float dqw = _quaternion_to_float(rawQuatReal, rotationVector_Q1);
 8001e2e:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <bno_get_yaw+0x1ac>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4a68      	ldr	r2, [pc, #416]	; (8001fd8 <bno_get_yaw+0x1b0>)
 8001e36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fdaa 	bl	8001998 <_quaternion_to_float>
 8001e44:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float dqx = _quaternion_to_float(rawQuatI, rotationVector_Q1);
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <bno_get_yaw+0x1b4>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <bno_get_yaw+0x1b0>)
 8001e50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fd9d 	bl	8001998 <_quaternion_to_float>
 8001e5e:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqy = _quaternion_to_float(rawQuatJ, rotationVector_Q1);
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <bno_get_yaw+0x1b8>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	4a5b      	ldr	r2, [pc, #364]	; (8001fd8 <bno_get_yaw+0x1b0>)
 8001e6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fd90 	bl	8001998 <_quaternion_to_float>
 8001e78:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqz = _quaternion_to_float(rawQuatK, rotationVector_Q1);
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <bno_get_yaw+0x1bc>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <bno_get_yaw+0x1b0>)
 8001e84:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd83 	bl	8001998 <_quaternion_to_float>
 8001e92:	ed87 0a06 	vstr	s0, [r7, #24]

	//printf("%d %d %d %d \n", rawQuatReal,rawQuatI,rawQuatJ,rawQuatK);

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8001e96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e9a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eaa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	ee17 0a90 	vmov	r0, s15
 8001ec6:	f7fe fb67 	bl	8000598 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	ec43 2b10 	vmov	d0, r2, r3
 8001ed2:	f009 fb07 	bl	800b4e4 <sqrt>
 8001ed6:	ec53 2b10 	vmov	r2, r3, d0
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe feab 	bl	8000c38 <__aeabi_d2f>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	617b      	str	r3, [r7, #20]
	dqw = dqw/norm;
 8001ee6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001eea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dqx = dqx/norm;
 8001ef6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001efa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f02:	edc7 7a08 	vstr	s15, [r7, #32]
	dqy = dqy/norm;
 8001f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	edc7 7a07 	vstr	s15, [r7, #28]
	dqz = dqz/norm;
 8001f16:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	edc7 7a06 	vstr	s15, [r7, #24]

	float ysqr = dqy * dqy;
 8001f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f2e:	edc7 7a04 	vstr	s15, [r7, #16]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 8001f32:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f52:	edc7 7a03 	vstr	s15, [r7, #12]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8001f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f5a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	ee17 0a90 	vmov	r0, s15
 8001f6a:	f7fe fb15 	bl	8000598 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	f7fe f9b3 	bl	80002dc <__adddf3>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	f04f 0000 	mov.w	r0, #0
 8001f7e:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <bno_get_yaw+0x1c0>)
 8001f80:	f7fe f9aa 	bl	80002d8 <__aeabi_dsub>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe54 	bl	8000c38 <__aeabi_d2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60bb      	str	r3, [r7, #8]
	float yaw = atan2(t3, t4);
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7fe faff 	bl	8000598 <__aeabi_f2d>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	460d      	mov	r5, r1
 8001f9e:	68b8      	ldr	r0, [r7, #8]
 8001fa0:	f7fe fafa 	bl	8000598 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	ec43 2b11 	vmov	d1, r2, r3
 8001fac:	ec45 4b10 	vmov	d0, r4, r5
 8001fb0:	f009 fa26 	bl	800b400 <atan2>
 8001fb4:	ec53 2b10 	vmov	r2, r3, d0
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fe3c 	bl	8000c38 <__aeabi_d2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	607b      	str	r3, [r7, #4]

	return (yaw);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	ee07 3a90 	vmov	s15, r3
}
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd4:	20000364 	.word	0x20000364
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	2000035e 	.word	0x2000035e
 8001fe0:	20000360 	.word	0x20000360
 8001fe4:	20000362 	.word	0x20000362
 8001fe8:	3ff00000 	.word	0x3ff00000

08001fec <DWT_Init>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <DWT_Init+0x28>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <DWT_Init+0x28>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <DWT_Init+0x2c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a05      	ldr	r2, [pc, #20]	; (8002018 <DWT_Init+0x2c>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000edf0 	.word	0xe000edf0
 8002018:	e0001000 	.word	0xe0001000

0800201c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002026:	1df9      	adds	r1, r7, #7
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	2201      	movs	r2, #1
 800202e:	4804      	ldr	r0, [pc, #16]	; (8002040 <__io_putchar+0x24>)
 8002030:	f003 fe0a 	bl	8005c48 <HAL_UART_Transmit>
	return ch;
 8002034:	79fb      	ldrb	r3, [r7, #7]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000048c 	.word	0x2000048c

08002044 <__io_getchar>:

int __io_getchar(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	char ch;
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 1);
 800204a:	1df9      	adds	r1, r7, #7
 800204c:	2301      	movs	r3, #1
 800204e:	2201      	movs	r2, #1
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <__io_getchar+0x1c>)
 8002052:	f003 fe8f 	bl	8005d74 <HAL_UART_Receive>
	return ch;
 8002056:	79fb      	ldrb	r3, [r7, #7]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000048c 	.word	0x2000048c

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002068:	f000 fedf 	bl	8002e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206c:	f000 f82a 	bl	80020c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002070:	f000 f9ae 	bl	80023d0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8002074:	f000 f874 	bl	8002160 <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8002078:	f000 f982 	bl	8002380 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800207c:	f000 f8b6 	bl	80021ec <MX_I2C2_Init>
  MX_SPI1_Init();
 8002080:	f000 f8f4 	bl	800226c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002084:	f000 f930 	bl	80022e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8002088:	f7ff ffb0 	bl	8001fec <DWT_Init>
  printf("=== HAL init done, proceeding ... ===\n");
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <main+0x58>)
 800208e:	f005 fcdb 	bl	8007a48 <puts>
  HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f001 fbbe 	bl	800381c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2110      	movs	r1, #16
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a8:	f001 fbb8 	bl	800381c <HAL_GPIO_WritePin>
  setup();
 80020ac:	f000 fa2c 	bl	8002508 <setup>
  printf("=== User init done, proceeding ... ===\n");
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <main+0x5c>)
 80020b2:	f005 fcc9 	bl	8007a48 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80020b6:	f000 fa4f 	bl	8002558 <loop>
 80020ba:	e7fc      	b.n	80020b6 <main+0x52>
 80020bc:	0800db04 	.word	0x0800db04
 80020c0:	0800db2c 	.word	0x0800db2c

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b094      	sub	sp, #80	; 0x50
 80020c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	f107 0318 	add.w	r3, r7, #24
 80020ce:	2238      	movs	r2, #56	; 0x38
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f005 fdb8 	bl	8007c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020ea:	f001 fe21 	bl	8003d30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80020ee:	2322      	movs	r3, #34	; 0x22
 80020f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80020fc:	2301      	movs	r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002100:	2302      	movs	r3, #2
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002104:	2302      	movs	r3, #2
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002108:	2301      	movs	r3, #1
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800210c:	230c      	movs	r3, #12
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002110:	2302      	movs	r3, #2
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002114:	2302      	movs	r3, #2
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002118:	2304      	movs	r3, #4
 800211a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	4618      	mov	r0, r3
 8002122:	f001 feb9 	bl	8003e98 <HAL_RCC_OscConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800212c:	f000 f9e6 	bl	80024fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002130:	230f      	movs	r3, #15
 8002132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002134:	2303      	movs	r3, #3
 8002136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f002 f9bd 	bl	80044c8 <HAL_RCC_ClockConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002154:	f000 f9d2 	bl	80024fc <Error_Handler>
  }
}
 8002158:	bf00      	nop
 800215a:	3750      	adds	r7, #80	; 0x50
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <MX_FDCAN2_Init+0x88>)
 8002168:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 800217e:	2200      	movs	r2, #0
 8002180:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 8002184:	2200      	movs	r2, #0
 8002186:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 800218a:	2200      	movs	r2, #0
 800218c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 8002190:	2210      	movs	r2, #16
 8002192:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 8002196:	2201      	movs	r2, #1
 8002198:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 800219c:	2202      	movs	r2, #2
 800219e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021a2:	2202      	movs	r2, #2
 80021a4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_FDCAN2_Init+0x84>)
 80021d2:	f000 ffcd 	bl	8003170 <HAL_FDCAN_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80021dc:	f000 f98e 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000378 	.word	0x20000378
 80021e8:	40006800 	.word	0x40006800

080021ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <MX_I2C2_Init+0x74>)
 80021f2:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <MX_I2C2_Init+0x78>)
 80021f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <MX_I2C2_Init+0x74>)
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <MX_I2C2_Init+0x7c>)
 80021fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 132;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <MX_I2C2_Init+0x74>)
 80021fe:	2284      	movs	r2, #132	; 0x84
 8002200:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <MX_I2C2_Init+0x74>)
 8002204:	2201      	movs	r2, #1
 8002206:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <MX_I2C2_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <MX_I2C2_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <MX_I2C2_Init+0x74>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <MX_I2C2_Init+0x74>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_I2C2_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002226:	480e      	ldr	r0, [pc, #56]	; (8002260 <MX_I2C2_Init+0x74>)
 8002228:	f001 fb33 	bl	8003892 <HAL_I2C_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002232:	f000 f963 	bl	80024fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002236:	2100      	movs	r1, #0
 8002238:	4809      	ldr	r0, [pc, #36]	; (8002260 <MX_I2C2_Init+0x74>)
 800223a:	f001 fbd3 	bl	80039e4 <HAL_I2CEx_ConfigAnalogFilter>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002244:	f000 f95a 	bl	80024fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002248:	2100      	movs	r1, #0
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_I2C2_Init+0x74>)
 800224c:	f001 fc15 	bl	8003a7a <HAL_I2CEx_ConfigDigitalFilter>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002256:	f000 f951 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200003dc 	.word	0x200003dc
 8002264:	40005800 	.word	0x40005800
 8002268:	2010091a 	.word	0x2010091a

0800226c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_SPI1_Init+0x78>)
 8002274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800227c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002286:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800228a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_SPI1_Init+0x74>)
 800228e:	2202      	movs	r2, #2
 8002290:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002294:	2201      	movs	r2, #1
 8002296:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_SPI1_Init+0x74>)
 800229a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022a2:	2218      	movs	r2, #24
 80022a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022ba:	2207      	movs	r2, #7
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022cc:	f002 fd54 	bl	8004d78 <HAL_SPI_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f000 f911 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000428 	.word	0x20000428
 80022e4:	40013000 	.word	0x40013000

080022e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <MX_USART2_UART_Init+0x90>)
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <MX_USART2_UART_Init+0x94>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_USART2_UART_Init+0x90>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_USART2_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <MX_USART2_UART_Init+0x90>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MX_USART2_UART_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART2_UART_Init+0x90>)
 800232c:	2200      	movs	r2, #0
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002330:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002332:	f003 fc39 	bl	8005ba8 <HAL_UART_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800233c:	f000 f8de 	bl	80024fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002340:	2100      	movs	r1, #0
 8002342:	480d      	ldr	r0, [pc, #52]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002344:	f004 fad4 	bl	80068f0 <HAL_UARTEx_SetTxFifoThreshold>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800234e:	f000 f8d5 	bl	80024fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002352:	2100      	movs	r1, #0
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002356:	f004 fb09 	bl	800696c <HAL_UARTEx_SetRxFifoThreshold>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002360:	f000 f8cc 	bl	80024fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_USART2_UART_Init+0x90>)
 8002366:	f004 fa8a 	bl	800687e <HAL_UARTEx_DisableFifoMode>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002370:	f000 f8c4 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000048c 	.word	0x2000048c
 800237c:	40004400 	.word	0x40004400

08002380 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <MX_USB_PCD_Init+0x4c>)
 8002388:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 800238c:	2208      	movs	r2, #8
 800238e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 8002392:	2202      	movs	r2, #2
 8002394:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 8002398:	2202      	movs	r2, #2
 800239a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80023a8:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80023b4:	4804      	ldr	r0, [pc, #16]	; (80023c8 <MX_USB_PCD_Init+0x48>)
 80023b6:	f001 fbac 	bl	8003b12 <HAL_PCD_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80023c0:	f000 f89c 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2000051c 	.word	0x2000051c
 80023cc:	40005c00 	.word	0x40005c00

080023d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
 80023e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <MX_GPIO_Init+0x124>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	4a42      	ldr	r2, [pc, #264]	; (80024f4 <MX_GPIO_Init+0x124>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f2:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <MX_GPIO_Init+0x124>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <MX_GPIO_Init+0x124>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	4a3c      	ldr	r2, [pc, #240]	; (80024f4 <MX_GPIO_Init+0x124>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240a:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <MX_GPIO_Init+0x124>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	f240 4111 	movw	r1, #1041	; 0x411
 800241c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002420:	f001 f9fc 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	2110      	movs	r1, #16
 8002428:	4833      	ldr	r0, [pc, #204]	; (80024f8 <MX_GPIO_Init+0x128>)
 800242a:	f001 f9f7 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_IMU_Pin */
  GPIO_InitStruct.Pin = RST_IMU_Pin;
 800242e:	2301      	movs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_IMU_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f001 f84e 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_INT_Pin */
  GPIO_InitStruct.Pin = AU_INT_Pin;
 800244c:	2302      	movs	r3, #2
 800244e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002450:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002456:	2302      	movs	r3, #2
 8002458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_INT_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f001 f840 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_ADNS_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_ADNS_Pin;
 8002468:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800246c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002484:	f001 f830 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ANDS_Pin */
  GPIO_InitStruct.Pin = INT_ANDS_Pin;
 8002488:	2301      	movs	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002492:	2301      	movs	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ANDS_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4619      	mov	r1, r3
 800249c:	4816      	ldr	r0, [pc, #88]	; (80024f8 <MX_GPIO_Init+0x128>)
 800249e:	f001 f823 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024bc:	f001 f814 	bl	80034e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 80024c0:	2310      	movs	r3, #16
 80024c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4619      	mov	r1, r3
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <MX_GPIO_Init+0x128>)
 80024d8:	f001 f806 	bl	80034e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2028      	movs	r0, #40	; 0x28
 80024e2:	f000 fe10 	bl	8003106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024e6:	2028      	movs	r0, #40	; 0x28
 80024e8:	f000 fe27 	bl	800313a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	48000400 	.word	0x48000400

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>
	...

08002508 <setup>:



//TODO : remove the interrupt capability for IMU_INT

void setup(void){
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	//adnsEnableDebugReports();
	adnsInit();
 800250c:	f7fe ff1c 	bl	8001348 <adnsInit>
	printf("ADNS should now be initialized\n");
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <setup+0x3c>)
 8002512:	f005 fa99 	bl	8007a48 <puts>

	if(bno_setup()) printf("IMU initialized successfully\n");
 8002516:	f7ff fbb1 	bl	8001c7c <bno_setup>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <setup+0x20>
 8002520:	4809      	ldr	r0, [pc, #36]	; (8002548 <setup+0x40>)
 8002522:	f005 fa91 	bl	8007a48 <puts>
 8002526:	e002      	b.n	800252e <setup+0x26>
	else printf("=== Could NOT initialize the BNO085 ! ===\n");
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <setup+0x44>)
 800252a:	f005 fa8d 	bl	8007a48 <puts>
	bno_enable_rotation_vector(40);
 800252e:	2028      	movs	r0, #40	; 0x28
 8002530:	f7ff fc40 	bl	8001db4 <bno_enable_rotation_vector>

	last_poll_time = getCurrentTime();
 8002534:	f000 fc1c 	bl	8002d70 <getCurrentTime>
 8002538:	4603      	mov	r3, r0
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <setup+0x48>)
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	0800db54 	.word	0x0800db54
 8002548:	0800db74 	.word	0x0800db74
 800254c:	0800db94 	.word	0x0800db94
 8002550:	20000810 	.word	0x20000810
 8002554:	00000000 	.word	0x00000000

08002558 <loop>:

void loop(void){
 8002558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af04      	add	r7, sp, #16
	if (isTimeDeltaElapsed(last_poll_time, POLL_RATE)){
 8002560:	4b97      	ldr	r3, [pc, #604]	; (80027c0 <loop+0x268>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2127      	movs	r1, #39	; 0x27
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fc1f 	bl	8002daa <isTimeDeltaElapsed>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 811e 	beq.w	80027b0 <loop+0x258>
		last_poll_time = getCurrentTime();
 8002574:	f000 fbfc 	bl	8002d70 <getCurrentTime>
 8002578:	4603      	mov	r3, r0
 800257a:	4a91      	ldr	r2, [pc, #580]	; (80027c0 <loop+0x268>)
 800257c:	6013      	str	r3, [r2, #0]
		if(bno_get_readings()){
 800257e:	f7ff fc29 	bl	8001dd4 <bno_get_readings>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8113 	beq.w	80027b0 <loop+0x258>
			if (first_read) {delta_theta = bno_get_yaw();first_read = false;}
 800258a:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <loop+0x26c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <loop+0x50>
 8002592:	f7ff fc49 	bl	8001e28 <bno_get_yaw>
 8002596:	eef0 7a40 	vmov.f32	s15, s0
 800259a:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <loop+0x270>)
 800259c:	edc3 7a00 	vstr	s15, [r3]
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <loop+0x26c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e006      	b.n	80025b6 <loop+0x5e>
			else raw_theta = bno_get_yaw();
 80025a8:	f7ff fc3e 	bl	8001e28 <bno_get_yaw>
 80025ac:	eef0 7a40 	vmov.f32	s15, s0
 80025b0:	4b86      	ldr	r3, [pc, #536]	; (80027cc <loop+0x274>)
 80025b2:	edc3 7a00 	vstr	s15, [r3]

			theta = raw_theta - delta_theta;
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <loop+0x274>)
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <loop+0x270>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <loop+0x278>)
 80025c8:	edc3 7a00 	vstr	s15, [r3]

			if(adnsUpdate() != 0){
 80025cc:	f7fe ff26 	bl	800141c <adnsUpdate>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80ec 	beq.w	80027b0 <loop+0x258>

				//j'ai l'impression qu'il drop des packets de l'adns

				delta_adns_x = adnsX(); delta_adns_y = adnsY();
 80025d8:	f7fe ff66 	bl	80014a8 <adnsX>
 80025dc:	eef0 7a40 	vmov.f32	s15, s0
 80025e0:	4b7c      	ldr	r3, [pc, #496]	; (80027d4 <loop+0x27c>)
 80025e2:	edc3 7a00 	vstr	s15, [r3]
 80025e6:	f7fe ff6d 	bl	80014c4 <adnsY>
 80025ea:	eef0 7a40 	vmov.f32	s15, s0
 80025ee:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <loop+0x280>)
 80025f0:	edc3 7a00 	vstr	s15, [r3]

				delta_x = delta_adns_x*cos(theta+MVT_RELATIVE_ANGLE) - delta_adns_y*sin(theta+MVT_RELATIVE_ANGLE);
 80025f4:	4b77      	ldr	r3, [pc, #476]	; (80027d4 <loop+0x27c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffcd 	bl	8000598 <__aeabi_f2d>
 80025fe:	4604      	mov	r4, r0
 8002600:	460d      	mov	r5, r1
 8002602:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <loop+0x278>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ffc6 	bl	8000598 <__aeabi_f2d>
 800260c:	a36a      	add	r3, pc, #424	; (adr r3, 80027b8 <loop+0x260>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fd fe61 	bl	80002d8 <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	ec43 2b17 	vmov	d7, r2, r3
 800261e:	eeb0 0a47 	vmov.f32	s0, s14
 8002622:	eef0 0a67 	vmov.f32	s1, s15
 8002626:	f008 ff8b 	bl	800b540 <cos>
 800262a:	ec53 2b10 	vmov	r2, r3, d0
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	f7fe f809 	bl	8000648 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4690      	mov	r8, r2
 800263c:	4699      	mov	r9, r3
 800263e:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <loop+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffa8 	bl	8000598 <__aeabi_f2d>
 8002648:	4604      	mov	r4, r0
 800264a:	460d      	mov	r5, r1
 800264c:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <loop+0x278>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ffa1 	bl	8000598 <__aeabi_f2d>
 8002656:	a358      	add	r3, pc, #352	; (adr r3, 80027b8 <loop+0x260>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fd fe3c 	bl	80002d8 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	ec43 2b17 	vmov	d7, r2, r3
 8002668:	eeb0 0a47 	vmov.f32	s0, s14
 800266c:	eef0 0a67 	vmov.f32	s1, s15
 8002670:	f008 ffba 	bl	800b5e8 <sin>
 8002674:	ec53 2b10 	vmov	r2, r3, d0
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd ffe4 	bl	8000648 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4640      	mov	r0, r8
 8002686:	4649      	mov	r1, r9
 8002688:	f7fd fe26 	bl	80002d8 <__aeabi_dsub>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fad0 	bl	8000c38 <__aeabi_d2f>
 8002698:	4603      	mov	r3, r0
 800269a:	4a50      	ldr	r2, [pc, #320]	; (80027dc <loop+0x284>)
 800269c:	6013      	str	r3, [r2, #0]
				delta_y = delta_adns_x*sin(theta+MVT_RELATIVE_ANGLE) + delta_adns_y*cos(theta+MVT_RELATIVE_ANGLE);
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <loop+0x27c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff78 	bl	8000598 <__aeabi_f2d>
 80026a8:	4604      	mov	r4, r0
 80026aa:	460d      	mov	r5, r1
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <loop+0x278>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff71 	bl	8000598 <__aeabi_f2d>
 80026b6:	a340      	add	r3, pc, #256	; (adr r3, 80027b8 <loop+0x260>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd fe0c 	bl	80002d8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	ec43 2b17 	vmov	d7, r2, r3
 80026c8:	eeb0 0a47 	vmov.f32	s0, s14
 80026cc:	eef0 0a67 	vmov.f32	s1, s15
 80026d0:	f008 ff8a 	bl	800b5e8 <sin>
 80026d4:	ec53 2b10 	vmov	r2, r3, d0
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd ffb4 	bl	8000648 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4690      	mov	r8, r2
 80026e6:	4699      	mov	r9, r3
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <loop+0x280>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ff53 	bl	8000598 <__aeabi_f2d>
 80026f2:	4604      	mov	r4, r0
 80026f4:	460d      	mov	r5, r1
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <loop+0x278>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff4c 	bl	8000598 <__aeabi_f2d>
 8002700:	a32d      	add	r3, pc, #180	; (adr r3, 80027b8 <loop+0x260>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fd fde7 	bl	80002d8 <__aeabi_dsub>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	ec43 2b17 	vmov	d7, r2, r3
 8002712:	eeb0 0a47 	vmov.f32	s0, s14
 8002716:	eef0 0a67 	vmov.f32	s1, s15
 800271a:	f008 ff11 	bl	800b540 <cos>
 800271e:	ec53 2b10 	vmov	r2, r3, d0
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f7fd ff8f 	bl	8000648 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4640      	mov	r0, r8
 8002730:	4649      	mov	r1, r9
 8002732:	f7fd fdd3 	bl	80002dc <__adddf3>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f7fe fa7b 	bl	8000c38 <__aeabi_d2f>
 8002742:	4603      	mov	r3, r0
 8002744:	4a26      	ldr	r2, [pc, #152]	; (80027e0 <loop+0x288>)
 8002746:	6013      	str	r3, [r2, #0]
				x += delta_x;
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <loop+0x28c>)
 800274a:	ed93 7a00 	vldr	s14, [r3]
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <loop+0x284>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <loop+0x28c>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
				y += delta_y;
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <loop+0x290>)
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <loop+0x288>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <loop+0x290>)
 8002770:	edc3 7a00 	vstr	s15, [r3]
				printf("x %.2f y %.2f t %.2f \n",x,y,theta);
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <loop+0x28c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd ff0d 	bl	8000598 <__aeabi_f2d>
 800277e:	4680      	mov	r8, r0
 8002780:	4689      	mov	r9, r1
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <loop+0x290>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd ff06 	bl	8000598 <__aeabi_f2d>
 800278c:	4604      	mov	r4, r0
 800278e:	460d      	mov	r5, r1
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <loop+0x278>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd feff 	bl	8000598 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027a2:	e9cd 4500 	strd	r4, r5, [sp]
 80027a6:	4642      	mov	r2, r8
 80027a8:	464b      	mov	r3, r9
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <loop+0x294>)
 80027ac:	f005 f8de 	bl	800796c <iprintf>
		printf("R %d\n", n);
	*/

	//HAL_I2C_Slave_Transmit_IT(hi2c2, 0x52, data_buffer, 10);

}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027b8:	b9f559b4 	.word	0xb9f559b4
 80027bc:	3fad8ada 	.word	0x3fad8ada
 80027c0:	20000810 	.word	0x20000810
 80027c4:	20000006 	.word	0x20000006
 80027c8:	20000824 	.word	0x20000824
 80027cc:	20000820 	.word	0x20000820
 80027d0:	2000081c 	.word	0x2000081c
 80027d4:	20000814 	.word	0x20000814
 80027d8:	20000818 	.word	0x20000818
 80027dc:	20000828 	.word	0x20000828
 80027e0:	2000082c 	.word	0x2000082c
 80027e4:	20000830 	.word	0x20000830
 80027e8:	20000834 	.word	0x20000834
 80027ec:	0800dbc0 	.word	0x0800dbc0

080027f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_MspInit+0x44>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_MspInit+0x44>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6613      	str	r3, [r2, #96]	; 0x60
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_MspInit+0x44>)
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_MspInit+0x44>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a08      	ldr	r2, [pc, #32]	; (8002834 <HAL_MspInit+0x44>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_MspInit+0x44>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002826:	f001 fb27 	bl	8003e78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b09e      	sub	sp, #120	; 0x78
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2250      	movs	r2, #80	; 0x50
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f005 f9f5 	bl	8007c48 <memset>
  if(hfdcan->Instance==FDCAN2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_FDCAN_MspInit+0xa8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d137      	bne.n	80028d8 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800286e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4618      	mov	r0, r3
 800287a:	f002 f841 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002884:	f7ff fe3a 	bl	80024fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_FDCAN_MspInit+0xac>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_FDCAN_MspInit+0xac>)
 800288e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002892:	6593      	str	r3, [r2, #88]	; 0x58
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_FDCAN_MspInit+0xac>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_FDCAN_MspInit+0xac>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <HAL_FDCAN_MspInit+0xac>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_FDCAN_MspInit+0xac>)
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80028b8:	2360      	movs	r3, #96	; 0x60
 80028ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80028c8:	2309      	movs	r3, #9
 80028ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028d0:	4619      	mov	r1, r3
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <HAL_FDCAN_MspInit+0xb0>)
 80028d4:	f000 fe08 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3778      	adds	r7, #120	; 0x78
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40006800 	.word	0x40006800
 80028e4:	40021000 	.word	0x40021000
 80028e8:	48000400 	.word	0x48000400

080028ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b09e      	sub	sp, #120	; 0x78
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2250      	movs	r2, #80	; 0x50
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f005 f99b 	bl	8007c48 <memset>
  if(hi2c->Instance==I2C2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <HAL_I2C_MspInit+0xb8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d13f      	bne.n	800299c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002920:	2300      	movs	r3, #0
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4618      	mov	r0, r3
 800292a:	f001 ffe9 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002934:	f7ff fde2 	bl	80024fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_I2C_MspInit+0xbc>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_I2C_MspInit+0xbc>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_I2C_MspInit+0xbc>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002954:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002956:	2312      	movs	r3, #18
 8002958:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002962:	2304      	movs	r3, #4
 8002964:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002970:	f000 fdba 	bl	80034e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_I2C_MspInit+0xbc>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_I2C_MspInit+0xbc>)
 800297a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_I2C_MspInit+0xbc>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	2021      	movs	r0, #33	; 0x21
 8002992:	f000 fbb8 	bl	8003106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002996:	2021      	movs	r0, #33	; 0x21
 8002998:	f000 fbcf 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800299c:	bf00      	nop
 800299e:	3778      	adds	r7, #120	; 0x78
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40005800 	.word	0x40005800
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_SPI_MspInit+0x7c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d128      	bne.n	8002a20 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d8:	6613      	str	r3, [r2, #96]	; 0x60
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <HAL_SPI_MspInit+0x80>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029fe:	23e0      	movs	r3, #224	; 0xe0
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a0e:	2305      	movs	r3, #5
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1c:	f000 fd64 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3728      	adds	r7, #40	; 0x28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013000 	.word	0x40013000
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b09e      	sub	sp, #120	; 0x78
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2250      	movs	r2, #80	; 0x50
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f005 f8f9 	bl	8007c48 <memset>
  if(huart->Instance==USART2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_UART_MspInit+0xa8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d136      	bne.n	8002ace <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a60:	2302      	movs	r3, #2
 8002a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 ff47 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a78:	f7ff fd40 	bl	80024fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_UART_MspInit+0xac>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a16      	ldr	r2, [pc, #88]	; (8002adc <HAL_UART_MspInit+0xac>)
 8002a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_UART_MspInit+0xac>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_UART_MspInit+0xac>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	4a10      	ldr	r2, [pc, #64]	; (8002adc <HAL_UART_MspInit+0xac>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_UART_MspInit+0xac>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aac:	230c      	movs	r3, #12
 8002aae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002abc:	2307      	movs	r3, #7
 8002abe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f000 fd0d 	bl	80034e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ace:	bf00      	nop
 8002ad0:	3778      	adds	r7, #120	; 0x78
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40004400 	.word	0x40004400
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b098      	sub	sp, #96	; 0x60
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	2250      	movs	r2, #80	; 0x50
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f005 f8a9 	bl	8007c48 <memset>
  if(hpcd->Instance==USB)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <HAL_PCD_MspInit+0x60>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d11a      	bne.n	8002b36 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002b06:	2300      	movs	r3, #0
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b0a:	f107 0310 	add.w	r3, r7, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f001 fef6 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002b1a:	f7ff fcef 	bl	80024fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_PCD_MspInit+0x64>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <HAL_PCD_MspInit+0x64>)
 8002b24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_PCD_MspInit+0x64>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002b36:	bf00      	nop
 8002b38:	3760      	adds	r7, #96	; 0x60
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40005c00 	.word	0x40005c00
 8002b44:	40021000 	.word	0x40021000

08002b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <NMI_Handler+0x4>

08002b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <HardFault_Handler+0x4>

08002b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <MemManage_Handler+0x4>

08002b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b5e:	e7fe      	b.n	8002b5e <BusFault_Handler+0x4>

08002b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <UsageFault_Handler+0x4>

08002b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b94:	f000 f99c 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <I2C2_EV_IRQHandler+0x10>)
 8002ba2:	f000 ff05 	bl	80039b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200003dc 	.word	0x200003dc

08002bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IMU_Pin);
 8002bb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bb8:	f000 fe48 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bda:	f005 f887 	bl	8007cec <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c02:	e7fe      	b.n	8002c02 <_exit+0x12>

08002c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e00a      	b.n	8002c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c16:	f7ff fa15 	bl	8002044 <__io_getchar>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	b2ca      	uxtb	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf0      	blt.n	8002c16 <_read+0x12>
  }

  return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e009      	b.n	8002c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f9df 	bl	800201c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf1      	blt.n	8002c50 <_write+0x12>
  }
  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_close>:

int _close(int file)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_isatty>:

int _isatty(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f004 ffec 	bl	8007cec <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2001c000 	.word	0x2001c000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	20000838 	.word	0x20000838
 8002d48:	20000990 	.word	0x20000990

08002d4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <SystemInit+0x20>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <SystemInit+0x20>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <getCurrentTime>:
#include "stm32g4xx_hal.h"
#include "time.h"

timestamp_t getCurrentTime(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8002d74:	f000 f8be 	bl	8002ef4 <HAL_GetTick>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <getElapsedTime>:

timestamp_t getElapsedTime(timestamp_t a, timestamp_t b)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
    if (a < b) return (b - a);
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d203      	bcs.n	8002d98 <getElapsedTime+0x1a>
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	e002      	b.n	8002d9e <getElapsedTime+0x20>
    else return (a - b);
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <isTimeDeltaElapsed>:

bool isTimeDeltaElapsed(timestamp_t t, timestamp_t delta)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
    return (getElapsedTime(t, getCurrentTime()) >= delta);
 8002db4:	f7ff ffdc 	bl	8002d70 <getCurrentTime>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffde 	bl	8002d7e <getElapsedTime>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	bf94      	ite	ls
 8002dca:	2301      	movls	r3, #1
 8002dcc:	2300      	movhi	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ddc:	480d      	ldr	r0, [pc, #52]	; (8002e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <LoopForever+0xe>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df4:	4c0b      	ldr	r4, [pc, #44]	; (8002e24 <LoopForever+0x16>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e02:	f7ff ffa3 	bl	8002d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e06:	f004 ff77 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e0a:	f7ff f92b 	bl	8002064 <main>

08002e0e <LoopForever>:

LoopForever:
    b LoopForever
 8002e0e:	e7fe      	b.n	8002e0e <LoopForever>
  ldr   r0, =_estack
 8002e10:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e18:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002e1c:	0800eec8 	.word	0x0800eec8
  ldr r2, =_sbss
 8002e20:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002e24:	2000098c 	.word	0x2000098c

08002e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <ADC1_2_IRQHandler>

08002e2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f000 f95b 	bl	80030f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e3a:	200f      	movs	r0, #15
 8002e3c:	f000 f80e 	bl	8002e5c <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	e001      	b.n	8002e50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e4c:	f7ff fcd0 	bl	80027f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e50:	79fb      	ldrb	r3, [r7, #7]

}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_InitTick+0x68>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d022      	beq.n	8002eb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_InitTick+0x6c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_InitTick+0x68>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f966 	bl	8003156 <HAL_SYSTICK_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d809      	bhi.n	8002eaa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e96:	2200      	movs	r2, #0
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9e:	f000 f932 	bl	8003106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <HAL_InitTick+0x70>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e007      	b.n	8002eba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	e004      	b.n	8002eba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e001      	b.n	8002eba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000010 	.word	0x20000010
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_IncTick+0x1c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_IncTick+0x20>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_IncTick+0x1c>)
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	2000083c 	.word	0x2000083c
 8002ef0:	20000010 	.word	0x20000010

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	2000083c 	.word	0x2000083c

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ffee 	bl	8002ef4 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d004      	beq.n	8002f30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_Delay+0x40>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f30:	bf00      	nop
 8002f32:	f7ff ffdf 	bl	8002ef4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d8f7      	bhi.n	8002f32 <HAL_Delay+0x26>
  {
  }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000010 	.word	0x20000010

08002f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 0307 	and.w	r3, r3, #7
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	db0b      	blt.n	8002fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <__NVIC_EnableIRQ+0x38>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000e100 	.word	0xe000e100

08002ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	; (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	; 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f1c3 0307 	rsb	r3, r3, #7
 800305e:	2b04      	cmp	r3, #4
 8003060:	bf28      	it	cs
 8003062:	2304      	movcs	r3, #4
 8003064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3304      	adds	r3, #4
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <NVIC_EncodePriority+0x30>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3b03      	subs	r3, #3
 8003072:	e000      	b.n	8003076 <NVIC_EncodePriority+0x32>
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	f04f 32ff 	mov.w	r2, #4294967295
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	401a      	ands	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800308c:	f04f 31ff 	mov.w	r1, #4294967295
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43d9      	mvns	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	4313      	orrs	r3, r2
         );
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030bc:	d301      	bcc.n	80030c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030be:	2301      	movs	r3, #1
 80030c0:	e00f      	b.n	80030e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <SysTick_Config+0x40>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ca:	210f      	movs	r1, #15
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	f7ff ff8e 	bl	8002ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <SysTick_Config+0x40>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <SysTick_Config+0x40>)
 80030dc:	2207      	movs	r2, #7
 80030de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	e000e010 	.word	0xe000e010

080030f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff29 	bl	8002f50 <__NVIC_SetPriorityGrouping>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff40 	bl	8002f98 <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff90 	bl	8003044 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5f 	bl	8002ff0 <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff33 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa4 	bl	80030ac <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e147      	b.n	8003412 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fb4e 	bl	8002838 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0210 	bic.w	r2, r2, #16
 80031aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ac:	f7ff fea2 	bl	8002ef4 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031b2:	e012      	b.n	80031da <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031b4:	f7ff fe9e 	bl	8002ef4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d90b      	bls.n	80031da <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e11b      	b.n	8003412 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d0e5      	beq.n	80031b4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f8:	f7ff fe7c 	bl	8002ef4 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031fe:	e012      	b.n	8003226 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003200:	f7ff fe78 	bl	8002ef4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d90b      	bls.n	8003226 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2203      	movs	r2, #3
 800321e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0f5      	b.n	8003412 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0e5      	beq.n	8003200 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0202 	orr.w	r2, r2, #2
 8003242:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a74      	ldr	r2, [pc, #464]	; (800341c <HAL_FDCAN_Init+0x2ac>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d103      	bne.n	8003256 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800324e:	4a74      	ldr	r2, [pc, #464]	; (8003420 <HAL_FDCAN_Init+0x2b0>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7c1b      	ldrb	r3, [r3, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326c:	619a      	str	r2, [r3, #24]
 800326e:	e007      	b.n	8003280 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7c5b      	ldrb	r3, [r3, #17]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003296:	619a      	str	r2, [r3, #24]
 8003298:	e007      	b.n	80032aa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c9b      	ldrb	r3, [r3, #18]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c0:	619a      	str	r2, [r3, #24]
 80032c2:	e007      	b.n	80032d4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80032f8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0210 	bic.w	r2, r2, #16
 8003308:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d108      	bne.n	8003324 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0204 	orr.w	r2, r2, #4
 8003320:	619a      	str	r2, [r3, #24]
 8003322:	e02c      	b.n	800337e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d028      	beq.n	800337e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d01c      	beq.n	800336e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003342:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0210 	orr.w	r2, r2, #16
 8003352:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d110      	bne.n	800337e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	619a      	str	r2, [r3, #24]
 800336c:	e007      	b.n	800337e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0220 	orr.w	r2, r2, #32
 800337c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	3b01      	subs	r3, #1
 8003384:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	3b01      	subs	r3, #1
 800338c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800338e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003396:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	3b01      	subs	r3, #1
 80033a0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033a6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033a8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b2:	d115      	bne.n	80033e0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	3b01      	subs	r3, #1
 80033c0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033c2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	3b01      	subs	r3, #1
 80033ca:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033cc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	3b01      	subs	r3, #1
 80033d6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033dc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033de:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f814 	bl	8003424 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40006400 	.word	0x40006400
 8003420:	40006500 	.word	0x40006500

08003424 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800342e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d103      	bne.n	8003442 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003440:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003450:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003476:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	061a      	lsls	r2, r3, #24
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e005      	b.n	80034c4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d3f3      	bcc.n	80034b8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	4000a400 	.word	0x4000a400
 80034e4:	40006800 	.word	0x40006800

080034e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034f6:	e15a      	b.n	80037ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 814c 	beq.w	80037a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d005      	beq.n	8003528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003524:	2b02      	cmp	r3, #2
 8003526:	d130      	bne.n	800358a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800355e:	2201      	movs	r2, #1
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 0201 	and.w	r2, r3, #1
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b03      	cmp	r3, #3
 8003594:	d017      	beq.n	80035c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d123      	bne.n	800361a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	08da      	lsrs	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3208      	adds	r2, #8
 8003614:	6939      	ldr	r1, [r7, #16]
 8003616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2203      	movs	r2, #3
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0203 	and.w	r2, r3, #3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80a6 	beq.w	80037a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365c:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_GPIO_Init+0x2e4>)
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_GPIO_Init+0x2e4>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6613      	str	r3, [r2, #96]	; 0x60
 8003668:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_GPIO_Init+0x2e4>)
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003674:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_GPIO_Init+0x2e8>)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800369e:	d01f      	beq.n	80036e0 <HAL_GPIO_Init+0x1f8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a4c      	ldr	r2, [pc, #304]	; (80037d4 <HAL_GPIO_Init+0x2ec>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d019      	beq.n	80036dc <HAL_GPIO_Init+0x1f4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a4b      	ldr	r2, [pc, #300]	; (80037d8 <HAL_GPIO_Init+0x2f0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d013      	beq.n	80036d8 <HAL_GPIO_Init+0x1f0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_GPIO_Init+0x2f4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00d      	beq.n	80036d4 <HAL_GPIO_Init+0x1ec>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <HAL_GPIO_Init+0x2f8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <HAL_GPIO_Init+0x1e8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a48      	ldr	r2, [pc, #288]	; (80037e4 <HAL_GPIO_Init+0x2fc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_GPIO_Init+0x1e4>
 80036c8:	2305      	movs	r3, #5
 80036ca:	e00a      	b.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036cc:	2306      	movs	r3, #6
 80036ce:	e008      	b.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036d0:	2304      	movs	r3, #4
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036d4:	2303      	movs	r3, #3
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036d8:	2302      	movs	r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_Init+0x1fa>
 80036e0:	2300      	movs	r3, #0
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f2:	4937      	ldr	r1, [pc, #220]	; (80037d0 <HAL_GPIO_Init+0x2e8>)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_GPIO_Init+0x300>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003724:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <HAL_GPIO_Init+0x300>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_GPIO_Init+0x300>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800374e:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_GPIO_Init+0x300>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_GPIO_Init+0x300>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_GPIO_Init+0x300>)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_GPIO_Init+0x300>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_GPIO_Init+0x300>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f ae9d 	bne.w	80034f8 <HAL_GPIO_Init+0x10>
  }
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40010000 	.word	0x40010000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48000c00 	.word	0x48000c00
 80037e0:	48001000 	.word	0x48001000
 80037e4:	48001400 	.word	0x48001400
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003838:	e002      	b.n	8003840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f806 	bl	800387c <HAL_GPIO_EXTI_Callback>
  }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40010400 	.word	0x40010400

0800387c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e081      	b.n	80039a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff f817 	bl	80028ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2224      	movs	r2, #36	; 0x24
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	e006      	b.n	800391a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003918:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d104      	bne.n	800392c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800392a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69d9      	ldr	r1, [r3, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
  }
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d138      	bne.n	8003a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e032      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	; 0x24
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d139      	bne.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e033      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2224      	movs	r2, #36	; 0x24
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b14:	b08b      	sub	sp, #44	; 0x2c
 8003b16:	af06      	add	r7, sp, #24
 8003b18:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0d7      	b.n	8003cd4 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fe ffd1 	bl	8002ae0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 ff9a 	bl	8006a84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e04c      	b.n	8003bf0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	3301      	adds	r3, #1
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	b298      	uxth	r0, r3
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	440b      	add	r3, r1
 8003b92:	3336      	adds	r3, #54	; 0x36
 8003b94:	4602      	mov	r2, r0
 8003b96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3303      	adds	r3, #3
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	3338      	adds	r3, #56	; 0x38
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	333c      	adds	r3, #60	; 0x3c
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	3340      	adds	r3, #64	; 0x40
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	3301      	adds	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3ad      	bcc.n	8003b56 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e044      	b.n	8003c8a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	440b      	add	r3, r1
 8003c50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	3301      	adds	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3b5      	bcc.n	8003c00 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	687e      	ldr	r6, [r7, #4]
 8003c9c:	466d      	mov	r5, sp
 8003c9e:	f106 0410 	add.w	r4, r6, #16
 8003ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	602b      	str	r3, [r5, #0]
 8003caa:	1d33      	adds	r3, r6, #4
 8003cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f002 ff03 	bl	8006aba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d102      	bne.n	8003cd2 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f805 	bl	8003cdc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cdc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d141      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d131      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d4c:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d52:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d64:	4a41      	ldr	r2, [pc, #260]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d6c:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2232      	movs	r2, #50	; 0x32
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a3f      	ldr	r2, [pc, #252]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d82:	e002      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d102      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9e:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d158      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e057      	b.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc0:	e04d      	b.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d141      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d131      	bne.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd8:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de8:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2232      	movs	r2, #50	; 0x32
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0e:	e002      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d102      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f2      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d112      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e011      	b.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e4c:	e007      	b.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e56:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	20000008 	.word	0x20000008
 8003e74:	431bde83 	.word	0x431bde83

08003e78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e86:	6093      	str	r3, [r2, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e306      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b97      	ldr	r3, [pc, #604]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec0:	4b94      	ldr	r3, [pc, #592]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3e>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_OscConfig+0x44>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b8d      	ldr	r3, [pc, #564]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x108>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d157      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2e1      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x74>
 8003efe:	4b85      	ldr	r3, [pc, #532]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a84      	ldr	r2, [pc, #528]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e01d      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x98>
 8003f16:	4b7f      	ldr	r3, [pc, #508]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7e      	ldr	r2, [pc, #504]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b7c      	ldr	r3, [pc, #496]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7b      	ldr	r2, [pc, #492]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f30:	4b78      	ldr	r3, [pc, #480]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b75      	ldr	r3, [pc, #468]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a74      	ldr	r2, [pc, #464]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe ffd0 	bl	8002ef4 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fe ffcc 	bl	8002ef4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2a6      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0xc0>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe ffbc 	bl	8002ef4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fe ffb8 	bl	8002ef4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e292      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f92:	4b60      	ldr	r3, [pc, #384]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0xe8>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d075      	beq.n	800409a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fae:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb8:	4b56      	ldr	r3, [pc, #344]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_OscConfig+0x136>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x13c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11f      	bne.n	8004014 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_OscConfig+0x154>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e265      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b49      	ldr	r3, [pc, #292]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4946      	ldr	r1, [pc, #280]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004000:	4b45      	ldr	r3, [pc, #276]	; (8004118 <HAL_RCC_OscConfig+0x280>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe ff29 	bl	8002e5c <HAL_InitTick>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d043      	beq.n	8004098 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e251      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3c      	ldr	r2, [pc, #240]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe ff64 	bl	8002ef4 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe ff60 	bl	8002ef4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e23a      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	492d      	ldr	r1, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
 8004062:	e01a      	b.n	800409a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800406a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe ff40 	bl	8002ef4 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fe ff3c 	bl	8002ef4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e216      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1e0>
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d041      	beq.n	800412a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe ff19 	bl	8002ef4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe ff15 	bl	8002ef4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1ef      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0ef      	beq.n	80040c6 <HAL_RCC_OscConfig+0x22e>
 80040e6:	e020      	b.n	800412a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fe fefc 	bl	8002ef4 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040fe:	e00d      	b.n	800411c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fe fef8 	bl	8002ef4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d906      	bls.n	800411c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1d2      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800411c:	4b8c      	ldr	r3, [pc, #560]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ea      	bne.n	8004100 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80a6 	beq.w	8004284 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800413c:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x2b4>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x2b6>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	4a7e      	ldr	r2, [pc, #504]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6593      	str	r3, [r2, #88]	; 0x58
 800415e:	4b7c      	ldr	r3, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	4b79      	ldr	r3, [pc, #484]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417a:	4b76      	ldr	r3, [pc, #472]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a75      	ldr	r2, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fe feb5 	bl	8002ef4 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe feb1 	bl	8002ef4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e18b      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a0:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <HAL_RCC_OscConfig+0x4bc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d108      	bne.n	80041c6 <HAL_RCC_OscConfig+0x32e>
 80041b4:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a65      	ldr	r2, [pc, #404]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c4:	e024      	b.n	8004210 <HAL_RCC_OscConfig+0x378>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d110      	bne.n	80041f0 <HAL_RCC_OscConfig+0x358>
 80041ce:	4b60      	ldr	r3, [pc, #384]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	4a5e      	ldr	r2, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_OscConfig+0x378>
 80041f0:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	4a56      	ldr	r2, [pc, #344]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d016      	beq.n	8004246 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fe fe6c 	bl	8002ef4 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421e:	e00a      	b.n	8004236 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fe fe68 	bl	8002ef4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	; 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e140      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004236:	4b46      	ldr	r3, [pc, #280]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ed      	beq.n	8004220 <HAL_RCC_OscConfig+0x388>
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fe fe55 	bl	8002ef4 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe fe51 	bl	8002ef4 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e129      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ed      	bne.n	800424e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a34      	ldr	r2, [pc, #208]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03c      	beq.n	800430a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fe fe24 	bl	8002ef4 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b0:	f7fe fe20 	bl	8002ef4 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0fa      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <HAL_RCC_OscConfig+0x418>
 80042d0:	e01b      	b.n	800430a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042d2:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fe fe07 	bl	8002ef4 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ea:	f7fe fe03 	bl	8002ef4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0dd      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1ef      	bne.n	80042ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80d1 	beq.w	80044b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b0c      	cmp	r3, #12
 800431e:	f000 808b 	beq.w	8004438 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d15e      	bne.n	80043e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <HAL_RCC_OscConfig+0x4b8>)
 8004330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fe fddd 	bl	8002ef4 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433c:	e00c      	b.n	8004358 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433e:	f7fe fdd9 	bl	8002ef4 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d905      	bls.n	8004358 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0b3      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
 8004350:	40021000 	.word	0x40021000
 8004354:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ec      	bne.n	800433e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004364:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCC_OscConfig+0x62c>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6a11      	ldr	r1, [r2, #32]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004374:	3a01      	subs	r2, #1
 8004376:	0112      	lsls	r2, r2, #4
 8004378:	4311      	orrs	r1, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800437e:	0212      	lsls	r2, r2, #8
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0552      	lsls	r2, r2, #21
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004392:	0852      	lsrs	r2, r2, #1
 8004394:	3a01      	subs	r2, #1
 8004396:	0652      	lsls	r2, r2, #25
 8004398:	4311      	orrs	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800439e:	06d2      	lsls	r2, r2, #27
 80043a0:	430a      	orrs	r2, r1
 80043a2:	4947      	ldr	r1, [pc, #284]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a44      	ldr	r2, [pc, #272]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b42      	ldr	r3, [pc, #264]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a41      	ldr	r2, [pc, #260]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe fd98 	bl	8002ef4 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fe fd94 	bl	8002ef4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e06e      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x530>
 80043e6:	e066      	b.n	80044b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e8:	4b35      	ldr	r3, [pc, #212]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043f4:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 8004406:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800440a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fe fd70 	bl	8002ef4 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe fd6c 	bl	8002ef4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e046      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442a:	4b25      	ldr	r3, [pc, #148]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x580>
 8004436:	e03e      	b.n	80044b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e039      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <HAL_RCC_OscConfig+0x628>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	429a      	cmp	r2, r3
 8004456:	d12c      	bne.n	80044b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	3b01      	subs	r3, #1
 8004464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d123      	bne.n	80044b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d11b      	bne.n	80044b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d113      	bne.n	80044b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	3b01      	subs	r3, #1
 8004498:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	3b01      	subs	r3, #1
 80044ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	019f800c 	.word	0x019f800c

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e11e      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e0:	4b91      	ldr	r3, [pc, #580]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d910      	bls.n	8004510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b8e      	ldr	r3, [pc, #568]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	498c      	ldr	r1, [pc, #560]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b8a      	ldr	r3, [pc, #552]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e106      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d073      	beq.n	8004604 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d129      	bne.n	8004578 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004524:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0f4      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004534:	f000 f99e 	bl	8004874 <RCC_GetSysClockFreqFromPLLSource>
 8004538:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4a7c      	ldr	r2, [pc, #496]	; (8004730 <HAL_RCC_ClockConfig+0x268>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d93f      	bls.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d033      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	d12f      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004562:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456a:	4a70      	ldr	r2, [pc, #448]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e024      	b.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d107      	bne.n	8004590 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004580:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0c6      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0be      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045a0:	f000 f8ce 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4a61      	ldr	r2, [pc, #388]	; (8004730 <HAL_RCC_ClockConfig+0x268>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d909      	bls.n	80045c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b6:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b5a      	ldr	r3, [pc, #360]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4957      	ldr	r1, [pc, #348]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fe fc8e 	bl	8002ef4 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fe fc8a 	bl	8002ef4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e095      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b4e      	ldr	r3, [pc, #312]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d023      	beq.n	8004658 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800461c:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a42      	ldr	r2, [pc, #264]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004626:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004634:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800463c:	4a3b      	ldr	r2, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 800463e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004642:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4936      	ldr	r1, [pc, #216]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
 8004656:	e008      	b.n	800466a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d105      	bne.n	800466a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4a32      	ldr	r2, [pc, #200]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 8004664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004668:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d21d      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 020f 	bic.w	r2, r3, #15
 8004680:	4929      	ldr	r1, [pc, #164]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004688:	f7fe fc34 	bl	8002ef4 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004690:	f7fe fc30 	bl	8002ef4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e03b      	b.n	800471e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x260>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1ed      	bne.n	8004690 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4917      	ldr	r1, [pc, #92]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490f      	ldr	r1, [pc, #60]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f2:	f000 f825 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <HAL_RCC_ClockConfig+0x264>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	490c      	ldr	r1, [pc, #48]	; (8004734 <HAL_RCC_ClockConfig+0x26c>)
 8004704:	5ccb      	ldrb	r3, [r1, r3]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x270>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x274>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fba0 	bl	8002e5c <HAL_InitTick>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	04c4b400 	.word	0x04c4b400
 8004734:	0800e7d8 	.word	0x0800e7d8
 8004738:	20000008 	.word	0x20000008
 800473c:	2000000c 	.word	0x2000000c

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d102      	bne.n	8004758 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	e047      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d102      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004764:	4b26      	ldr	r3, [pc, #152]	; (8004800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	e03e      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d136      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	3301      	adds	r3, #1
 800478c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d10c      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004794:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800479e:	68d2      	ldr	r2, [r2, #12]
 80047a0:	0a12      	lsrs	r2, r2, #8
 80047a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	617b      	str	r3, [r7, #20]
      break;
 80047ac:	e00c      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	0a12      	lsrs	r2, r2, #8
 80047bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
      break;
 80047c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	0e5b      	lsrs	r3, r3, #25
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	3301      	adds	r3, #1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e001      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047e8:	693b      	ldr	r3, [r7, #16]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCC_GetHCLKFreq+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000008 	.word	0x20000008

0800481c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004820:	f7ff fff0 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	0800e7e8 	.word	0x0800e7e8

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800484c:	f7ff ffda 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0adb      	lsrs	r3, r3, #11
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	0800e7e8 	.word	0x0800e7e8

08004874 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800487a:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d10c      	bne.n	80048b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004898:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a2:	68d2      	ldr	r2, [r2, #12]
 80048a4:	0a12      	lsrs	r2, r2, #8
 80048a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	617b      	str	r3, [r7, #20]
    break;
 80048b0:	e00c      	b.n	80048cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048bc:	68d2      	ldr	r2, [r2, #12]
 80048be:	0a12      	lsrs	r2, r2, #8
 80048c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
    break;
 80048ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0e5b      	lsrs	r3, r3, #25
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	3301      	adds	r3, #1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048e6:	687b      	ldr	r3, [r7, #4]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40021000 	.word	0x40021000
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	00f42400 	.word	0x00f42400

08004900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004908:	2300      	movs	r3, #0
 800490a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800490c:	2300      	movs	r3, #0
 800490e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8098 	beq.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	6593      	str	r3, [r2, #88]	; 0x58
 800493a:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004946:	2301      	movs	r3, #1
 8004948:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494a:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a39      	ldr	r2, [pc, #228]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004956:	f7fe facd 	bl	8002ef4 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495c:	e009      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495e:	f7fe fac9 	bl	8002ef4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d902      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	74fb      	strb	r3, [r7, #19]
        break;
 8004970:	e005      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ef      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d159      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004984:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	429a      	cmp	r2, r3
 800499e:	d019      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a0:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049cc:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d016      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fe fa89 	bl	8002ef4 <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e4:	e00b      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fe fa85 	bl	8002ef4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d902      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	74fb      	strb	r3, [r7, #19]
            break;
 80049fc:	e006      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ec      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a20:	4903      	ldr	r1, [pc, #12]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a28:	e008      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	74bb      	strb	r3, [r7, #18]
 8004a2e:	e005      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3c:	7c7b      	ldrb	r3, [r7, #17]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	4aa6      	ldr	r2, [pc, #664]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5a:	4ba1      	ldr	r3, [pc, #644]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 0203 	bic.w	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	499d      	ldr	r1, [pc, #628]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a7c:	4b98      	ldr	r3, [pc, #608]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 020c 	bic.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	4995      	ldr	r1, [pc, #596]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a9e:	4b90      	ldr	r3, [pc, #576]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	498c      	ldr	r1, [pc, #560]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ac0:	4b87      	ldr	r3, [pc, #540]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	4984      	ldr	r1, [pc, #528]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ae2:	4b7f      	ldr	r3, [pc, #508]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	497b      	ldr	r1, [pc, #492]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	4973      	ldr	r1, [pc, #460]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b26:	4b6e      	ldr	r3, [pc, #440]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	496a      	ldr	r1, [pc, #424]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b48:	4b65      	ldr	r3, [pc, #404]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4962      	ldr	r1, [pc, #392]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	4959      	ldr	r1, [pc, #356]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8c:	4b54      	ldr	r3, [pc, #336]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	4951      	ldr	r1, [pc, #324]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d015      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bae:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4948      	ldr	r1, [pc, #288]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bcc:	d105      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bce:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d015      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	493a      	ldr	r1, [pc, #232]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c04:	d105      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c10:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d015      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	492c      	ldr	r1, [pc, #176]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3e:	4b28      	ldr	r3, [pc, #160]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c48:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d015      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	491e      	ldr	r1, [pc, #120]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c74:	d105      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c80:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d015      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	4910      	ldr	r1, [pc, #64]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cac:	d105      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	4902      	ldr	r1, [pc, #8]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	e001      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cec:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	4918      	ldr	r1, [pc, #96]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d24:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	490a      	ldr	r1, [pc, #40]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000

08004d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e09d      	b.n	8004ec6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d108      	bne.n	8004da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9a:	d009      	beq.n	8004db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61da      	str	r2, [r3, #28]
 8004da2:	e005      	b.n	8004db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fd fdee 	bl	80029ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df0:	d902      	bls.n	8004df8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e002      	b.n	8004dfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e06:	d007      	beq.n	8004e18 <HAL_SPI_Init+0xa0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	ea42 0103 	orr.w	r1, r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	f003 0204 	and.w	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b088      	sub	sp, #32
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_SPI_Transmit+0x22>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e158      	b.n	80051a2 <HAL_SPI_Transmit+0x2d4>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef8:	f7fd fffc 	bl	8002ef4 <HAL_GetTick>
 8004efc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f12:	e13d      	b.n	8005190 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_SPI_Transmit+0x52>
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f24:	e134      	b.n	8005190 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f70:	d10f      	bne.n	8004f92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d007      	beq.n	8004fb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb8:	d94b      	bls.n	8005052 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Transmit+0xfa>
 8004fc2:	8afb      	ldrh	r3, [r7, #22]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d13e      	bne.n	8005046 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	881a      	ldrh	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fec:	e02b      	b.n	8005046 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d112      	bne.n	8005022 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	1c9a      	adds	r2, r3, #2
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005020:	e011      	b.n	8005046 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005022:	f7fd ff67 	bl	8002ef4 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d803      	bhi.n	800503a <HAL_SPI_Transmit+0x16c>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d102      	bne.n	8005040 <HAL_SPI_Transmit+0x172>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005044:	e0a4      	b.n	8005190 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ce      	bne.n	8004fee <HAL_SPI_Transmit+0x120>
 8005050:	e07c      	b.n	800514c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Transmit+0x192>
 800505a:	8afb      	ldrh	r3, [r7, #22]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d170      	bne.n	8005142 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	d912      	bls.n	8005090 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	1c9a      	adds	r2, r3, #2
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b02      	subs	r3, #2
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508e:	e058      	b.n	8005142 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	7812      	ldrb	r2, [r2, #0]
 800509c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050b6:	e044      	b.n	8005142 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d12b      	bne.n	800511e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d912      	bls.n	80050f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b02      	subs	r3, #2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050f4:	e025      	b.n	8005142 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800511c:	e011      	b.n	8005142 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800511e:	f7fd fee9 	bl	8002ef4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d803      	bhi.n	8005136 <HAL_SPI_Transmit+0x268>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d102      	bne.n	800513c <HAL_SPI_Transmit+0x26e>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d102      	bne.n	8005142 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005140:	e026      	b.n	8005190 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1b5      	bne.n	80050b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fce3 	bl	8005b1c <SPI_EndRxTxTransaction>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e000      	b.n	8005190 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800518e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b088      	sub	sp, #32
 80051ae:	af02      	add	r7, sp, #8
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c6:	d112      	bne.n	80051ee <HAL_SPI_Receive+0x44>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10e      	bne.n	80051ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2204      	movs	r2, #4
 80051d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f910 	bl	800540a <HAL_SPI_TransmitReceive>
 80051ea:	4603      	mov	r3, r0
 80051ec:	e109      	b.n	8005402 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_SPI_Receive+0x52>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e102      	b.n	8005402 <HAL_SPI_Receive+0x258>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005204:	f7fd fe76 	bl	8002ef4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d002      	beq.n	800521c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005216:	2302      	movs	r3, #2
 8005218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800521a:	e0e9      	b.n	80053f0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_SPI_Receive+0x7e>
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800522c:	e0e0      	b.n	80053f0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2204      	movs	r2, #4
 8005232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005278:	d908      	bls.n	800528c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	e007      	b.n	800529c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d10f      	bne.n	80052c6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d007      	beq.n	80052e4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052ec:	d867      	bhi.n	80053be <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052ee:	e030      	b.n	8005352 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d117      	bne.n	800532e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f103 020c 	add.w	r2, r3, #12
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800532c:	e011      	b.n	8005352 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532e:	f7fd fde1 	bl	8002ef4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d803      	bhi.n	8005346 <HAL_SPI_Receive+0x19c>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d102      	bne.n	800534c <HAL_SPI_Receive+0x1a2>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005350:	e04e      	b.n	80053f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1c8      	bne.n	80052f0 <HAL_SPI_Receive+0x146>
 800535e:	e034      	b.n	80053ca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d115      	bne.n	800539a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	b292      	uxth	r2, r2
 800537a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005398:	e011      	b.n	80053be <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539a:	f7fd fdab 	bl	8002ef4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d803      	bhi.n	80053b2 <HAL_SPI_Receive+0x208>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_Receive+0x20e>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053bc:	e018      	b.n	80053f0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1ca      	bne.n	8005360 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fb4c 	bl	8005a6c <SPI_EndRxTransaction>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	75fb      	strb	r3, [r7, #23]
 80053ec:	e000      	b.n	80053f0 <HAL_SPI_Receive+0x246>
  }

error :
 80053ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b08a      	sub	sp, #40	; 0x28
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005418:	2301      	movs	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x26>
 800542c:	2302      	movs	r3, #2
 800542e:	e1fb      	b.n	8005828 <HAL_SPI_TransmitReceive+0x41e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005438:	f7fd fd5c 	bl	8002ef4 <HAL_GetTick>
 800543c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005444:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800544c:	887b      	ldrh	r3, [r7, #2]
 800544e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005450:	887b      	ldrh	r3, [r7, #2]
 8005452:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005454:	7efb      	ldrb	r3, [r7, #27]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d00e      	beq.n	8005478 <HAL_SPI_TransmitReceive+0x6e>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005460:	d106      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x66>
 800546a:	7efb      	ldrb	r3, [r7, #27]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d003      	beq.n	8005478 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005470:	2302      	movs	r3, #2
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005476:	e1cd      	b.n	8005814 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_SPI_TransmitReceive+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_TransmitReceive+0x80>
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005490:	e1c0      	b.n	8005814 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b04      	cmp	r3, #4
 800549c:	d003      	beq.n	80054a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2205      	movs	r2, #5
 80054a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	887a      	ldrh	r2, [r7, #2]
 80054b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	887a      	ldrh	r2, [r7, #2]
 80054be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	887a      	ldrh	r2, [r7, #2]
 80054d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e8:	d802      	bhi.n	80054f0 <HAL_SPI_TransmitReceive+0xe6>
 80054ea:	8a3b      	ldrh	r3, [r7, #16]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d908      	bls.n	8005502 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	e007      	b.n	8005512 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005510:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d007      	beq.n	8005530 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005538:	d97c      	bls.n	8005634 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x13e>
 8005542:	8a7b      	ldrh	r3, [r7, #18]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d169      	bne.n	800561c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800556c:	e056      	b.n	800561c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d11b      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x1aa>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0x1aa>
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2b01      	cmp	r3, #1
 800558a:	d113      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	881a      	ldrh	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	1c9a      	adds	r2, r3, #2
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d11c      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x1f2>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	b292      	uxth	r2, r2
 80055da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055f8:	2301      	movs	r3, #1
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055fc:	f7fd fc7a 	bl	8002ef4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005608:	429a      	cmp	r2, r3
 800560a:	d807      	bhi.n	800561c <HAL_SPI_TransmitReceive+0x212>
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d003      	beq.n	800561c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800561a:	e0fb      	b.n	8005814 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1a3      	bne.n	800556e <HAL_SPI_TransmitReceive+0x164>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d19d      	bne.n	800556e <HAL_SPI_TransmitReceive+0x164>
 8005632:	e0df      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x23a>
 800563c:	8a7b      	ldrh	r3, [r7, #18]
 800563e:	2b01      	cmp	r3, #1
 8005640:	f040 80cb 	bne.w	80057da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d912      	bls.n	8005674 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	881a      	ldrh	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	1c9a      	adds	r2, r3, #2
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b02      	subs	r3, #2
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005672:	e0b2      	b.n	80057da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	7812      	ldrb	r2, [r2, #0]
 8005680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800569a:	e09e      	b.n	80057da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d134      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x30a>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02f      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x30a>
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d12c      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d912      	bls.n	80056ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	1c9a      	adds	r2, r3, #2
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b02      	subs	r3, #2
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056e8:	e012      	b.n	8005710 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	7812      	ldrb	r2, [r2, #0]
 80056f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d148      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x3aa>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d042      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d923      	bls.n	8005782 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	b292      	uxth	r2, r2
 8005746:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b02      	subs	r3, #2
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d81f      	bhi.n	80057b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800577e:	605a      	str	r2, [r3, #4]
 8005780:	e016      	b.n	80057b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f103 020c 	add.w	r2, r3, #12
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057b4:	f7fd fb9e 	bl	8002ef4 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d803      	bhi.n	80057cc <HAL_SPI_TransmitReceive+0x3c2>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_TransmitReceive+0x3c8>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80057d8:	e01c      	b.n	8005814 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f af5b 	bne.w	800569c <HAL_SPI_TransmitReceive+0x292>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f47f af54 	bne.w	800569c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f98f 	bl	8005b1c <SPI_EndRxTxTransaction>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	661a      	str	r2, [r3, #96]	; 0x60
 8005810:	e000      	b.n	8005814 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005828:	4618      	mov	r0, r3
 800582a:	3728      	adds	r7, #40	; 0x28
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005840:	f7fd fb58 	bl	8002ef4 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005850:	f7fd fb50 	bl	8002ef4 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	015b      	lsls	r3, r3, #5
 800585c:	0d1b      	lsrs	r3, r3, #20
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005866:	e054      	b.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d050      	beq.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005870:	f7fd fb40 	bl	8002ef4 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d902      	bls.n	8005886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d13d      	bne.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589e:	d111      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a8:	d004      	beq.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b2:	d107      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058cc:	d10f      	bne.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e017      	b.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3b01      	subs	r3, #1
 8005910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	429a      	cmp	r2, r3
 800592e:	d19b      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000008 	.word	0x20000008

08005940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005952:	f7fd facf 	bl	8002ef4 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	4413      	add	r3, r2
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005962:	f7fd fac7 	bl	8002ef4 <HAL_GetTick>
 8005966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005970:	4b3d      	ldr	r3, [pc, #244]	; (8005a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00da      	lsls	r2, r3, #3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	0d1b      	lsrs	r3, r3, #20
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005988:	e060      	b.n	8005a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005990:	d107      	bne.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d050      	beq.n	8005a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059aa:	f7fd faa3 	bl	8002ef4 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d902      	bls.n	80059c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d13d      	bne.n	8005a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d8:	d111      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e2:	d004      	beq.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ec:	d107      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a06:	d10f      	bne.n	8005a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e010      	b.n	8005a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d196      	bne.n	800598a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000008 	.word	0x20000008

08005a6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a80:	d111      	bne.n	8005aa6 <SPI_EndRxTransaction+0x3a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8a:	d004      	beq.n	8005a96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	d107      	bne.n	8005aa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff febd 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e023      	b.n	8005b14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad4:	d11d      	bne.n	8005b12 <SPI_EndRxTransaction+0xa6>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ade:	d004      	beq.n	8005aea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae8:	d113      	bne.n	8005b12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ff22 	bl	8005940 <SPI_WaitFifoStateUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e000      	b.n	8005b14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ff03 	bl	8005940 <SPI_WaitFifoStateUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e027      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fe68 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e014      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fedc 	bl	8005940 <SPI_WaitFifoStateUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e000      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e042      	b.n	8005c40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fc ff2f 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	; 0x24
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f996 	bl	8005f1c <UART_SetConfig>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e022      	b.n	8005c40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fc86 	bl	8006514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fd0d 	bl	8006658 <UART_CheckIdleState>
 8005c3e:	4603      	mov	r3, r0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	f040 8083 	bne.w	8005d6a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Transmit+0x28>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e07b      	b.n	8005d6c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Transmit+0x3a>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e074      	b.n	8005d6c <HAL_UART_Transmit+0x124>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2221      	movs	r2, #33	; 0x21
 8005c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c9a:	f7fd f92b 	bl	8002ef4 <HAL_GetTick>
 8005c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb8:	d108      	bne.n	8005ccc <HAL_UART_Transmit+0x84>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	e003      	b.n	8005cd4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005cdc:	e02c      	b.n	8005d38 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 fd00 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e039      	b.n	8005d6c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10b      	bne.n	8005d16 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3302      	adds	r3, #2
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e007      	b.n	8005d26 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	781a      	ldrb	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	3301      	adds	r3, #1
 8005d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1cc      	bne.n	8005cde <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2140      	movs	r1, #64	; 0x40
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fccd 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e006      	b.n	8005d6c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	f040 80c0 	bne.w	8005f10 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_UART_Receive+0x28>
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0b8      	b.n	8005f12 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_UART_Receive+0x3a>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e0b1      	b.n	8005f12 <HAL_UART_Receive+0x19e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2222      	movs	r2, #34	; 0x22
 8005dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dcc:	f7fd f892 	bl	8002ef4 <HAL_GetTick>
 8005dd0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	88fa      	ldrh	r2, [r7, #6]
 8005dde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dea:	d10e      	bne.n	8005e0a <HAL_UART_Receive+0x96>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <HAL_UART_Receive+0x8c>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dfe:	e02d      	b.n	8005e5c <HAL_UART_Receive+0xe8>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	22ff      	movs	r2, #255	; 0xff
 8005e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e08:	e028      	b.n	8005e5c <HAL_UART_Receive+0xe8>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10d      	bne.n	8005e2e <HAL_UART_Receive+0xba>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <HAL_UART_Receive+0xb0>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e22:	e01b      	b.n	8005e5c <HAL_UART_Receive+0xe8>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	227f      	movs	r2, #127	; 0x7f
 8005e28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e2c:	e016      	b.n	8005e5c <HAL_UART_Receive+0xe8>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e36:	d10d      	bne.n	8005e54 <HAL_UART_Receive+0xe0>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <HAL_UART_Receive+0xd6>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	227f      	movs	r2, #127	; 0x7f
 8005e44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e48:	e008      	b.n	8005e5c <HAL_UART_Receive+0xe8>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	223f      	movs	r2, #63	; 0x3f
 8005e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e52:	e003      	b.n	8005e5c <HAL_UART_Receive+0xe8>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6c:	d108      	bne.n	8005e80 <HAL_UART_Receive+0x10c>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	e003      	b.n	8005e88 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e90:	e032      	b.n	8005ef8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2120      	movs	r1, #32
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fc26 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e032      	b.n	8005f12 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10c      	bne.n	8005ecc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	8a7b      	ldrh	r3, [r7, #18]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	3302      	adds	r3, #2
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e00c      	b.n	8005ee6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	8a7b      	ldrh	r3, [r7, #18]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	4013      	ands	r3, r2
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1c6      	bne.n	8005e92 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e000      	b.n	8005f12 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005f10:	2302      	movs	r3, #2
  }
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f20:	b08c      	sub	sp, #48	; 0x30
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4baa      	ldr	r3, [pc, #680]	; (80061f4 <UART_SetConfig+0x2d8>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a9f      	ldr	r2, [pc, #636]	; (80061f8 <UART_SetConfig+0x2dc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f84:	4313      	orrs	r3, r2
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	f023 010f 	bic.w	r1, r3, #15
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a90      	ldr	r2, [pc, #576]	; (80061fc <UART_SetConfig+0x2e0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d125      	bne.n	800600c <UART_SetConfig+0xf0>
 8005fc0:	4b8f      	ldr	r3, [pc, #572]	; (8006200 <UART_SetConfig+0x2e4>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d81a      	bhi.n	8006004 <UART_SetConfig+0xe8>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <UART_SetConfig+0xb8>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	08005fed 	.word	0x08005fed
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fea:	e116      	b.n	800621a <UART_SetConfig+0x2fe>
 8005fec:	2302      	movs	r3, #2
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff2:	e112      	b.n	800621a <UART_SetConfig+0x2fe>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ffa:	e10e      	b.n	800621a <UART_SetConfig+0x2fe>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006002:	e10a      	b.n	800621a <UART_SetConfig+0x2fe>
 8006004:	2310      	movs	r3, #16
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600a:	e106      	b.n	800621a <UART_SetConfig+0x2fe>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a7c      	ldr	r2, [pc, #496]	; (8006204 <UART_SetConfig+0x2e8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d138      	bne.n	8006088 <UART_SetConfig+0x16c>
 8006016:	4b7a      	ldr	r3, [pc, #488]	; (8006200 <UART_SetConfig+0x2e4>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f003 030c 	and.w	r3, r3, #12
 8006020:	2b0c      	cmp	r3, #12
 8006022:	d82d      	bhi.n	8006080 <UART_SetConfig+0x164>
 8006024:	a201      	add	r2, pc, #4	; (adr r2, 800602c <UART_SetConfig+0x110>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	08006061 	.word	0x08006061
 8006030:	08006081 	.word	0x08006081
 8006034:	08006081 	.word	0x08006081
 8006038:	08006081 	.word	0x08006081
 800603c:	08006071 	.word	0x08006071
 8006040:	08006081 	.word	0x08006081
 8006044:	08006081 	.word	0x08006081
 8006048:	08006081 	.word	0x08006081
 800604c:	08006069 	.word	0x08006069
 8006050:	08006081 	.word	0x08006081
 8006054:	08006081 	.word	0x08006081
 8006058:	08006081 	.word	0x08006081
 800605c:	08006079 	.word	0x08006079
 8006060:	2300      	movs	r3, #0
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e0d8      	b.n	800621a <UART_SetConfig+0x2fe>
 8006068:	2302      	movs	r3, #2
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e0d4      	b.n	800621a <UART_SetConfig+0x2fe>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e0d0      	b.n	800621a <UART_SetConfig+0x2fe>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607e:	e0cc      	b.n	800621a <UART_SetConfig+0x2fe>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006086:	e0c8      	b.n	800621a <UART_SetConfig+0x2fe>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a5e      	ldr	r2, [pc, #376]	; (8006208 <UART_SetConfig+0x2ec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d125      	bne.n	80060de <UART_SetConfig+0x1c2>
 8006092:	4b5b      	ldr	r3, [pc, #364]	; (8006200 <UART_SetConfig+0x2e4>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800609c:	2b30      	cmp	r3, #48	; 0x30
 800609e:	d016      	beq.n	80060ce <UART_SetConfig+0x1b2>
 80060a0:	2b30      	cmp	r3, #48	; 0x30
 80060a2:	d818      	bhi.n	80060d6 <UART_SetConfig+0x1ba>
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d00a      	beq.n	80060be <UART_SetConfig+0x1a2>
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d814      	bhi.n	80060d6 <UART_SetConfig+0x1ba>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <UART_SetConfig+0x19a>
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d008      	beq.n	80060c6 <UART_SetConfig+0x1aa>
 80060b4:	e00f      	b.n	80060d6 <UART_SetConfig+0x1ba>
 80060b6:	2300      	movs	r3, #0
 80060b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060bc:	e0ad      	b.n	800621a <UART_SetConfig+0x2fe>
 80060be:	2302      	movs	r3, #2
 80060c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c4:	e0a9      	b.n	800621a <UART_SetConfig+0x2fe>
 80060c6:	2304      	movs	r3, #4
 80060c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060cc:	e0a5      	b.n	800621a <UART_SetConfig+0x2fe>
 80060ce:	2308      	movs	r3, #8
 80060d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d4:	e0a1      	b.n	800621a <UART_SetConfig+0x2fe>
 80060d6:	2310      	movs	r3, #16
 80060d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060dc:	e09d      	b.n	800621a <UART_SetConfig+0x2fe>
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a4a      	ldr	r2, [pc, #296]	; (800620c <UART_SetConfig+0x2f0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d125      	bne.n	8006134 <UART_SetConfig+0x218>
 80060e8:	4b45      	ldr	r3, [pc, #276]	; (8006200 <UART_SetConfig+0x2e4>)
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060f2:	2bc0      	cmp	r3, #192	; 0xc0
 80060f4:	d016      	beq.n	8006124 <UART_SetConfig+0x208>
 80060f6:	2bc0      	cmp	r3, #192	; 0xc0
 80060f8:	d818      	bhi.n	800612c <UART_SetConfig+0x210>
 80060fa:	2b80      	cmp	r3, #128	; 0x80
 80060fc:	d00a      	beq.n	8006114 <UART_SetConfig+0x1f8>
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d814      	bhi.n	800612c <UART_SetConfig+0x210>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <UART_SetConfig+0x1f0>
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d008      	beq.n	800611c <UART_SetConfig+0x200>
 800610a:	e00f      	b.n	800612c <UART_SetConfig+0x210>
 800610c:	2300      	movs	r3, #0
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006112:	e082      	b.n	800621a <UART_SetConfig+0x2fe>
 8006114:	2302      	movs	r3, #2
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611a:	e07e      	b.n	800621a <UART_SetConfig+0x2fe>
 800611c:	2304      	movs	r3, #4
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006122:	e07a      	b.n	800621a <UART_SetConfig+0x2fe>
 8006124:	2308      	movs	r3, #8
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612a:	e076      	b.n	800621a <UART_SetConfig+0x2fe>
 800612c:	2310      	movs	r3, #16
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006132:	e072      	b.n	800621a <UART_SetConfig+0x2fe>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a35      	ldr	r2, [pc, #212]	; (8006210 <UART_SetConfig+0x2f4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d12a      	bne.n	8006194 <UART_SetConfig+0x278>
 800613e:	4b30      	ldr	r3, [pc, #192]	; (8006200 <UART_SetConfig+0x2e4>)
 8006140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614c:	d01a      	beq.n	8006184 <UART_SetConfig+0x268>
 800614e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006152:	d81b      	bhi.n	800618c <UART_SetConfig+0x270>
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d00c      	beq.n	8006174 <UART_SetConfig+0x258>
 800615a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800615e:	d815      	bhi.n	800618c <UART_SetConfig+0x270>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <UART_SetConfig+0x250>
 8006164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006168:	d008      	beq.n	800617c <UART_SetConfig+0x260>
 800616a:	e00f      	b.n	800618c <UART_SetConfig+0x270>
 800616c:	2300      	movs	r3, #0
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006172:	e052      	b.n	800621a <UART_SetConfig+0x2fe>
 8006174:	2302      	movs	r3, #2
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617a:	e04e      	b.n	800621a <UART_SetConfig+0x2fe>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006182:	e04a      	b.n	800621a <UART_SetConfig+0x2fe>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618a:	e046      	b.n	800621a <UART_SetConfig+0x2fe>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006192:	e042      	b.n	800621a <UART_SetConfig+0x2fe>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <UART_SetConfig+0x2dc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d13a      	bne.n	8006214 <UART_SetConfig+0x2f8>
 800619e:	4b18      	ldr	r3, [pc, #96]	; (8006200 <UART_SetConfig+0x2e4>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ac:	d01a      	beq.n	80061e4 <UART_SetConfig+0x2c8>
 80061ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b2:	d81b      	bhi.n	80061ec <UART_SetConfig+0x2d0>
 80061b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b8:	d00c      	beq.n	80061d4 <UART_SetConfig+0x2b8>
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061be:	d815      	bhi.n	80061ec <UART_SetConfig+0x2d0>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <UART_SetConfig+0x2b0>
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c8:	d008      	beq.n	80061dc <UART_SetConfig+0x2c0>
 80061ca:	e00f      	b.n	80061ec <UART_SetConfig+0x2d0>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d2:	e022      	b.n	800621a <UART_SetConfig+0x2fe>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061da:	e01e      	b.n	800621a <UART_SetConfig+0x2fe>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e2:	e01a      	b.n	800621a <UART_SetConfig+0x2fe>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ea:	e016      	b.n	800621a <UART_SetConfig+0x2fe>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f2:	e012      	b.n	800621a <UART_SetConfig+0x2fe>
 80061f4:	cfff69f3 	.word	0xcfff69f3
 80061f8:	40008000 	.word	0x40008000
 80061fc:	40013800 	.word	0x40013800
 8006200:	40021000 	.word	0x40021000
 8006204:	40004400 	.word	0x40004400
 8006208:	40004800 	.word	0x40004800
 800620c:	40004c00 	.word	0x40004c00
 8006210:	40005000 	.word	0x40005000
 8006214:	2310      	movs	r3, #16
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4aae      	ldr	r2, [pc, #696]	; (80064d8 <UART_SetConfig+0x5bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	f040 8097 	bne.w	8006354 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006226:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800622a:	2b08      	cmp	r3, #8
 800622c:	d823      	bhi.n	8006276 <UART_SetConfig+0x35a>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0x318>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006259 	.word	0x08006259
 8006238:	08006277 	.word	0x08006277
 800623c:	08006261 	.word	0x08006261
 8006240:	08006277 	.word	0x08006277
 8006244:	08006267 	.word	0x08006267
 8006248:	08006277 	.word	0x08006277
 800624c:	08006277 	.word	0x08006277
 8006250:	08006277 	.word	0x08006277
 8006254:	0800626f 	.word	0x0800626f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006258:	f7fe fae0 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 800625c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800625e:	e010      	b.n	8006282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006260:	4b9e      	ldr	r3, [pc, #632]	; (80064dc <UART_SetConfig+0x5c0>)
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006264:	e00d      	b.n	8006282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006266:	f7fe fa6b 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800626c:	e009      	b.n	8006282 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006274:	e005      	b.n	8006282 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8130 	beq.w	80064ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	4a94      	ldr	r2, [pc, #592]	; (80064e0 <UART_SetConfig+0x5c4>)
 8006290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006294:	461a      	mov	r2, r3
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	fbb3 f3f2 	udiv	r3, r3, r2
 800629c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d305      	bcc.n	80062ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d903      	bls.n	80062c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062c0:	e113      	b.n	80064ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2200      	movs	r2, #0
 80062c6:	60bb      	str	r3, [r7, #8]
 80062c8:	60fa      	str	r2, [r7, #12]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	4a84      	ldr	r2, [pc, #528]	; (80064e0 <UART_SetConfig+0x5c4>)
 80062d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2200      	movs	r2, #0
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062e4:	f7fa fcf8 	bl	8000cd8 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	020b      	lsls	r3, r1, #8
 80062fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062fe:	0202      	lsls	r2, r0, #8
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	6849      	ldr	r1, [r1, #4]
 8006304:	0849      	lsrs	r1, r1, #1
 8006306:	2000      	movs	r0, #0
 8006308:	460c      	mov	r4, r1
 800630a:	4605      	mov	r5, r0
 800630c:	eb12 0804 	adds.w	r8, r2, r4
 8006310:	eb43 0905 	adc.w	r9, r3, r5
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	469a      	mov	sl, r3
 800631c:	4693      	mov	fp, r2
 800631e:	4652      	mov	r2, sl
 8006320:	465b      	mov	r3, fp
 8006322:	4640      	mov	r0, r8
 8006324:	4649      	mov	r1, r9
 8006326:	f7fa fcd7 	bl	8000cd8 <__aeabi_uldivmod>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4613      	mov	r3, r2
 8006330:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006338:	d308      	bcc.n	800634c <UART_SetConfig+0x430>
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006340:	d204      	bcs.n	800634c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	e0ce      	b.n	80064ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006352:	e0ca      	b.n	80064ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d166      	bne.n	800642c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800635e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006362:	2b08      	cmp	r3, #8
 8006364:	d827      	bhi.n	80063b6 <UART_SetConfig+0x49a>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <UART_SetConfig+0x450>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006391 	.word	0x08006391
 8006370:	08006399 	.word	0x08006399
 8006374:	080063a1 	.word	0x080063a1
 8006378:	080063b7 	.word	0x080063b7
 800637c:	080063a7 	.word	0x080063a7
 8006380:	080063b7 	.word	0x080063b7
 8006384:	080063b7 	.word	0x080063b7
 8006388:	080063b7 	.word	0x080063b7
 800638c:	080063af 	.word	0x080063af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006390:	f7fe fa44 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8006394:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006396:	e014      	b.n	80063c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006398:	f7fe fa56 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 800639c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800639e:	e010      	b.n	80063c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a0:	4b4e      	ldr	r3, [pc, #312]	; (80064dc <UART_SetConfig+0x5c0>)
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063a4:	e00d      	b.n	80063c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a6:	f7fe f9cb 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80063aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ac:	e009      	b.n	80063c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063b4:	e005      	b.n	80063c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8090 	beq.w	80064ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	4a44      	ldr	r2, [pc, #272]	; (80064e0 <UART_SetConfig+0x5c4>)
 80063d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063dc:	005a      	lsls	r2, r3, #1
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	441a      	add	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d916      	bls.n	8006424 <UART_SetConfig+0x508>
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fc:	d212      	bcs.n	8006424 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f023 030f 	bic.w	r3, r3, #15
 8006406:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	b29a      	uxth	r2, r3
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	4313      	orrs	r3, r2
 8006418:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	8bfa      	ldrh	r2, [r7, #30]
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e062      	b.n	80064ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800642a:	e05e      	b.n	80064ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800642c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006430:	2b08      	cmp	r3, #8
 8006432:	d828      	bhi.n	8006486 <UART_SetConfig+0x56a>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x520>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	08006461 	.word	0x08006461
 8006440:	08006469 	.word	0x08006469
 8006444:	08006471 	.word	0x08006471
 8006448:	08006487 	.word	0x08006487
 800644c:	08006477 	.word	0x08006477
 8006450:	08006487 	.word	0x08006487
 8006454:	08006487 	.word	0x08006487
 8006458:	08006487 	.word	0x08006487
 800645c:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fe f9dc 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8006464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006466:	e014      	b.n	8006492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7fe f9ee 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 800646c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800646e:	e010      	b.n	8006492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <UART_SetConfig+0x5c0>)
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006474:	e00d      	b.n	8006492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fe f963 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 800647a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006490:	bf00      	nop
    }

    if (pclk != 0U)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d028      	beq.n	80064ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <UART_SetConfig+0x5c4>)
 800649e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	441a      	add	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	d910      	bls.n	80064e4 <UART_SetConfig+0x5c8>
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c8:	d20c      	bcs.n	80064e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60da      	str	r2, [r3, #12]
 80064d4:	e009      	b.n	80064ea <UART_SetConfig+0x5ce>
 80064d6:	bf00      	nop
 80064d8:	40008000 	.word	0x40008000
 80064dc:	00f42400 	.word	0x00f42400
 80064e0:	0800e7f0 	.word	0x0800e7f0
      }
      else
      {
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2200      	movs	r2, #0
 80064fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006506:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800650a:	4618      	mov	r0, r3
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01a      	beq.n	800662a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006612:	d10a      	bne.n	800662a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006668:	f7fc fc44 	bl	8002ef4 <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b08      	cmp	r3, #8
 800667a:	d10e      	bne.n	800669a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800667c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f82f 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e025      	b.n	80066e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d10e      	bne.n	80066c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f819 	bl	80066ee <UART_WaitOnFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e00f      	b.n	80066e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b09c      	sub	sp, #112	; 0x70
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fe:	e0a9      	b.n	8006854 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	f000 80a5 	beq.w	8006854 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670a:	f7fc fbf3 	bl	8002ef4 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006716:	429a      	cmp	r2, r3
 8006718:	d302      	bcc.n	8006720 <UART_WaitOnFlagUntilTimeout+0x32>
 800671a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671c:	2b00      	cmp	r3, #0
 800671e:	d140      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006734:	667b      	str	r3, [r7, #100]	; 0x64
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800673e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006740:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006744:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800674c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e6      	bne.n	8006720 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	663b      	str	r3, [r7, #96]	; 0x60
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006772:	64ba      	str	r2, [r7, #72]	; 0x48
 8006774:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e5      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e069      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d051      	beq.n	8006854 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d149      	bne.n	8006854 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	613b      	str	r3, [r7, #16]
   return(result);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	66bb      	str	r3, [r7, #104]	; 0x68
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800681c:	623a      	str	r2, [r7, #32]
 800681e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	69f9      	ldr	r1, [r7, #28]
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	61bb      	str	r3, [r7, #24]
   return(result);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e5      	bne.n	80067fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e010      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4013      	ands	r3, r2
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	bf0c      	ite	eq
 8006864:	2301      	moveq	r3, #1
 8006866:	2300      	movne	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	429a      	cmp	r2, r3
 8006870:	f43f af46 	beq.w	8006700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3770      	adds	r7, #112	; 0x70
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UARTEx_DisableFifoMode+0x16>
 8006890:	2302      	movs	r3, #2
 8006892:	e027      	b.n	80068e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	; 0x24
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006904:	2302      	movs	r3, #2
 8006906:	e02d      	b.n	8006964 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2224      	movs	r2, #36	; 0x24
 8006914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f84f 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006980:	2302      	movs	r3, #2
 8006982:	e02d      	b.n	80069e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2224      	movs	r2, #36	; 0x24
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f811 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d108      	bne.n	8006a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a08:	e031      	b.n	8006a6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a0e:	2308      	movs	r3, #8
 8006a10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0e5b      	lsrs	r3, r3, #25
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	0f5b      	lsrs	r3, r3, #29
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	7b3a      	ldrb	r2, [r7, #12]
 8006a36:	4911      	ldr	r1, [pc, #68]	; (8006a7c <UARTEx_SetNbDataToProcess+0x94>)
 8006a38:	5c8a      	ldrb	r2, [r1, r2]
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a3e:	7b3a      	ldrb	r2, [r7, #12]
 8006a40:	490f      	ldr	r1, [pc, #60]	; (8006a80 <UARTEx_SetNbDataToProcess+0x98>)
 8006a42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	7b7a      	ldrb	r2, [r7, #13]
 8006a54:	4909      	ldr	r1, [pc, #36]	; (8006a7c <UARTEx_SetNbDataToProcess+0x94>)
 8006a56:	5c8a      	ldrb	r2, [r1, r2]
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a5c:	7b7a      	ldrb	r2, [r7, #13]
 8006a5e:	4908      	ldr	r1, [pc, #32]	; (8006a80 <UARTEx_SetNbDataToProcess+0x98>)
 8006a60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	0800e808 	.word	0x0800e808
 8006a80:	0800e810 	.word	0x0800e810

08006a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a8c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006a90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006aba:	b084      	sub	sp, #16
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	f107 0014 	add.w	r0, r7, #20
 8006ac8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	b004      	add	sp, #16
 8006afa:	4770      	bx	lr

08006afc <__cvt>:
 8006afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	ec55 4b10 	vmov	r4, r5, d0
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	460e      	mov	r6, r1
 8006b08:	4619      	mov	r1, r3
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	bfbb      	ittet	lt
 8006b0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b12:	461d      	movlt	r5, r3
 8006b14:	2300      	movge	r3, #0
 8006b16:	232d      	movlt	r3, #45	; 0x2d
 8006b18:	700b      	strb	r3, [r1, #0]
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b20:	4691      	mov	r9, r2
 8006b22:	f023 0820 	bic.w	r8, r3, #32
 8006b26:	bfbc      	itt	lt
 8006b28:	4622      	movlt	r2, r4
 8006b2a:	4614      	movlt	r4, r2
 8006b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b30:	d005      	beq.n	8006b3e <__cvt+0x42>
 8006b32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b36:	d100      	bne.n	8006b3a <__cvt+0x3e>
 8006b38:	3601      	adds	r6, #1
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	e000      	b.n	8006b40 <__cvt+0x44>
 8006b3e:	2103      	movs	r1, #3
 8006b40:	ab03      	add	r3, sp, #12
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	ab02      	add	r3, sp, #8
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	ec45 4b10 	vmov	d0, r4, r5
 8006b4c:	4653      	mov	r3, sl
 8006b4e:	4632      	mov	r2, r6
 8006b50:	f001 f98a 	bl	8007e68 <_dtoa_r>
 8006b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b58:	4607      	mov	r7, r0
 8006b5a:	d102      	bne.n	8006b62 <__cvt+0x66>
 8006b5c:	f019 0f01 	tst.w	r9, #1
 8006b60:	d022      	beq.n	8006ba8 <__cvt+0xac>
 8006b62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b66:	eb07 0906 	add.w	r9, r7, r6
 8006b6a:	d110      	bne.n	8006b8e <__cvt+0x92>
 8006b6c:	783b      	ldrb	r3, [r7, #0]
 8006b6e:	2b30      	cmp	r3, #48	; 0x30
 8006b70:	d10a      	bne.n	8006b88 <__cvt+0x8c>
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4620      	mov	r0, r4
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7f9 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 8006b7e:	b918      	cbnz	r0, 8006b88 <__cvt+0x8c>
 8006b80:	f1c6 0601 	rsb	r6, r6, #1
 8006b84:	f8ca 6000 	str.w	r6, [sl]
 8006b88:	f8da 3000 	ldr.w	r3, [sl]
 8006b8c:	4499      	add	r9, r3
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2300      	movs	r3, #0
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 8006b9a:	b108      	cbz	r0, 8006ba0 <__cvt+0xa4>
 8006b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ba0:	2230      	movs	r2, #48	; 0x30
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	454b      	cmp	r3, r9
 8006ba6:	d307      	bcc.n	8006bb8 <__cvt+0xbc>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bac:	1bdb      	subs	r3, r3, r7
 8006bae:	4638      	mov	r0, r7
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	b004      	add	sp, #16
 8006bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e7f0      	b.n	8006ba2 <__cvt+0xa6>

08006bc0 <__exponent>:
 8006bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	bfb8      	it	lt
 8006bc8:	4249      	neglt	r1, r1
 8006bca:	f803 2b02 	strb.w	r2, [r3], #2
 8006bce:	bfb4      	ite	lt
 8006bd0:	222d      	movlt	r2, #45	; 0x2d
 8006bd2:	222b      	movge	r2, #43	; 0x2b
 8006bd4:	2909      	cmp	r1, #9
 8006bd6:	7042      	strb	r2, [r0, #1]
 8006bd8:	dd2a      	ble.n	8006c30 <__exponent+0x70>
 8006bda:	f10d 0207 	add.w	r2, sp, #7
 8006bde:	4617      	mov	r7, r2
 8006be0:	260a      	movs	r6, #10
 8006be2:	4694      	mov	ip, r2
 8006be4:	fb91 f5f6 	sdiv	r5, r1, r6
 8006be8:	fb06 1415 	mls	r4, r6, r5, r1
 8006bec:	3430      	adds	r4, #48	; 0x30
 8006bee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	2c63      	cmp	r4, #99	; 0x63
 8006bf6:	f102 32ff 	add.w	r2, r2, #4294967295
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	dcf1      	bgt.n	8006be2 <__exponent+0x22>
 8006bfe:	3130      	adds	r1, #48	; 0x30
 8006c00:	f1ac 0402 	sub.w	r4, ip, #2
 8006c04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c08:	1c41      	adds	r1, r0, #1
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	42ba      	cmp	r2, r7
 8006c0e:	d30a      	bcc.n	8006c26 <__exponent+0x66>
 8006c10:	f10d 0209 	add.w	r2, sp, #9
 8006c14:	eba2 020c 	sub.w	r2, r2, ip
 8006c18:	42bc      	cmp	r4, r7
 8006c1a:	bf88      	it	hi
 8006c1c:	2200      	movhi	r2, #0
 8006c1e:	4413      	add	r3, r2
 8006c20:	1a18      	subs	r0, r3, r0
 8006c22:	b003      	add	sp, #12
 8006c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c2e:	e7ed      	b.n	8006c0c <__exponent+0x4c>
 8006c30:	2330      	movs	r3, #48	; 0x30
 8006c32:	3130      	adds	r1, #48	; 0x30
 8006c34:	7083      	strb	r3, [r0, #2]
 8006c36:	70c1      	strb	r1, [r0, #3]
 8006c38:	1d03      	adds	r3, r0, #4
 8006c3a:	e7f1      	b.n	8006c20 <__exponent+0x60>

08006c3c <_printf_float>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	ed2d 8b02 	vpush	{d8}
 8006c44:	b08d      	sub	sp, #52	; 0x34
 8006c46:	460c      	mov	r4, r1
 8006c48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	461f      	mov	r7, r3
 8006c50:	4605      	mov	r5, r0
 8006c52:	f001 f801 	bl	8007c58 <_localeconv_r>
 8006c56:	f8d0 a000 	ldr.w	sl, [r0]
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f7f9 fb30 	bl	80002c0 <strlen>
 8006c60:	2300      	movs	r3, #0
 8006c62:	930a      	str	r3, [sp, #40]	; 0x28
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	9305      	str	r3, [sp, #20]
 8006c68:	f8d8 3000 	ldr.w	r3, [r8]
 8006c6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c70:	3307      	adds	r3, #7
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	f103 0208 	add.w	r2, r3, #8
 8006c7a:	f8c8 2000 	str.w	r2, [r8]
 8006c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c8c:	ee08 0a10 	vmov	s16, r0
 8006c90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c98:	4b9e      	ldr	r3, [pc, #632]	; (8006f14 <_printf_float+0x2d8>)
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	f7f9 ff6d 	bl	8000b7c <__aeabi_dcmpun>
 8006ca2:	bb88      	cbnz	r0, 8006d08 <_printf_float+0xcc>
 8006ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ca8:	4b9a      	ldr	r3, [pc, #616]	; (8006f14 <_printf_float+0x2d8>)
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cae:	f7f9 ff47 	bl	8000b40 <__aeabi_dcmple>
 8006cb2:	bb48      	cbnz	r0, 8006d08 <_printf_float+0xcc>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff36 	bl	8000b2c <__aeabi_dcmplt>
 8006cc0:	b110      	cbz	r0, 8006cc8 <_printf_float+0x8c>
 8006cc2:	232d      	movs	r3, #45	; 0x2d
 8006cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc8:	4a93      	ldr	r2, [pc, #588]	; (8006f18 <_printf_float+0x2dc>)
 8006cca:	4b94      	ldr	r3, [pc, #592]	; (8006f1c <_printf_float+0x2e0>)
 8006ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cd0:	bf94      	ite	ls
 8006cd2:	4690      	movls	r8, r2
 8006cd4:	4698      	movhi	r8, r3
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	9b05      	ldr	r3, [sp, #20]
 8006cdc:	f023 0304 	bic.w	r3, r3, #4
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	f04f 0900 	mov.w	r9, #0
 8006ce6:	9700      	str	r7, [sp, #0]
 8006ce8:	4633      	mov	r3, r6
 8006cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f9da 	bl	80070a8 <_printf_common>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f040 8090 	bne.w	8006e1a <_printf_float+0x1de>
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	b00d      	add	sp, #52	; 0x34
 8006d00:	ecbd 8b02 	vpop	{d8}
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4649      	mov	r1, r9
 8006d10:	f7f9 ff34 	bl	8000b7c <__aeabi_dcmpun>
 8006d14:	b140      	cbz	r0, 8006d28 <_printf_float+0xec>
 8006d16:	464b      	mov	r3, r9
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfbc      	itt	lt
 8006d1c:	232d      	movlt	r3, #45	; 0x2d
 8006d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d22:	4a7f      	ldr	r2, [pc, #508]	; (8006f20 <_printf_float+0x2e4>)
 8006d24:	4b7f      	ldr	r3, [pc, #508]	; (8006f24 <_printf_float+0x2e8>)
 8006d26:	e7d1      	b.n	8006ccc <_printf_float+0x90>
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d2e:	9206      	str	r2, [sp, #24]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	d13f      	bne.n	8006db4 <_printf_float+0x178>
 8006d34:	2306      	movs	r3, #6
 8006d36:	6063      	str	r3, [r4, #4]
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d40:	2300      	movs	r3, #0
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	ab0a      	add	r3, sp, #40	; 0x28
 8006d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d4a:	ab09      	add	r3, sp, #36	; 0x24
 8006d4c:	ec49 8b10 	vmov	d0, r8, r9
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	6022      	str	r2, [r4, #0]
 8006d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7ff fecf 	bl	8006afc <__cvt>
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d62:	2b47      	cmp	r3, #71	; 0x47
 8006d64:	4680      	mov	r8, r0
 8006d66:	d108      	bne.n	8006d7a <_printf_float+0x13e>
 8006d68:	1cc8      	adds	r0, r1, #3
 8006d6a:	db02      	blt.n	8006d72 <_printf_float+0x136>
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	dd41      	ble.n	8006df6 <_printf_float+0x1ba>
 8006d72:	f1ab 0302 	sub.w	r3, fp, #2
 8006d76:	fa5f fb83 	uxtb.w	fp, r3
 8006d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d7e:	d820      	bhi.n	8006dc2 <_printf_float+0x186>
 8006d80:	3901      	subs	r1, #1
 8006d82:	465a      	mov	r2, fp
 8006d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d88:	9109      	str	r1, [sp, #36]	; 0x24
 8006d8a:	f7ff ff19 	bl	8006bc0 <__exponent>
 8006d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d90:	1813      	adds	r3, r2, r0
 8006d92:	2a01      	cmp	r2, #1
 8006d94:	4681      	mov	r9, r0
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	dc02      	bgt.n	8006da0 <_printf_float+0x164>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	07d2      	lsls	r2, r2, #31
 8006d9e:	d501      	bpl.n	8006da4 <_printf_float+0x168>
 8006da0:	3301      	adds	r3, #1
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d09c      	beq.n	8006ce6 <_printf_float+0xaa>
 8006dac:	232d      	movs	r3, #45	; 0x2d
 8006dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db2:	e798      	b.n	8006ce6 <_printf_float+0xaa>
 8006db4:	9a06      	ldr	r2, [sp, #24]
 8006db6:	2a47      	cmp	r2, #71	; 0x47
 8006db8:	d1be      	bne.n	8006d38 <_printf_float+0xfc>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1bc      	bne.n	8006d38 <_printf_float+0xfc>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7b9      	b.n	8006d36 <_printf_float+0xfa>
 8006dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006dc6:	d118      	bne.n	8006dfa <_printf_float+0x1be>
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	dd0b      	ble.n	8006de6 <_printf_float+0x1aa>
 8006dce:	6121      	str	r1, [r4, #16]
 8006dd0:	b913      	cbnz	r3, 8006dd8 <_printf_float+0x19c>
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	07d0      	lsls	r0, r2, #31
 8006dd6:	d502      	bpl.n	8006dde <_printf_float+0x1a2>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	440b      	add	r3, r1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8006de0:	f04f 0900 	mov.w	r9, #0
 8006de4:	e7de      	b.n	8006da4 <_printf_float+0x168>
 8006de6:	b913      	cbnz	r3, 8006dee <_printf_float+0x1b2>
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	07d2      	lsls	r2, r2, #31
 8006dec:	d501      	bpl.n	8006df2 <_printf_float+0x1b6>
 8006dee:	3302      	adds	r3, #2
 8006df0:	e7f4      	b.n	8006ddc <_printf_float+0x1a0>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e7f2      	b.n	8006ddc <_printf_float+0x1a0>
 8006df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	db05      	blt.n	8006e0c <_printf_float+0x1d0>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	6121      	str	r1, [r4, #16]
 8006e04:	07d8      	lsls	r0, r3, #31
 8006e06:	d5ea      	bpl.n	8006dde <_printf_float+0x1a2>
 8006e08:	1c4b      	adds	r3, r1, #1
 8006e0a:	e7e7      	b.n	8006ddc <_printf_float+0x1a0>
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	bfd4      	ite	le
 8006e10:	f1c1 0202 	rsble	r2, r1, #2
 8006e14:	2201      	movgt	r2, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	e7e0      	b.n	8006ddc <_printf_float+0x1a0>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	055a      	lsls	r2, r3, #21
 8006e1e:	d407      	bmi.n	8006e30 <_printf_float+0x1f4>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	4642      	mov	r2, r8
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d12c      	bne.n	8006e88 <_printf_float+0x24c>
 8006e2e:	e764      	b.n	8006cfa <_printf_float+0xbe>
 8006e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e34:	f240 80e0 	bls.w	8006ff8 <_printf_float+0x3bc>
 8006e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f7f9 fe6a 	bl	8000b18 <__aeabi_dcmpeq>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d034      	beq.n	8006eb2 <_printf_float+0x276>
 8006e48:	4a37      	ldr	r2, [pc, #220]	; (8006f28 <_printf_float+0x2ec>)
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f af51 	beq.w	8006cfa <_printf_float+0xbe>
 8006e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	db02      	blt.n	8006e66 <_printf_float+0x22a>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	07d8      	lsls	r0, r3, #31
 8006e64:	d510      	bpl.n	8006e88 <_printf_float+0x24c>
 8006e66:	ee18 3a10 	vmov	r3, s16
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af41 	beq.w	8006cfa <_printf_float+0xbe>
 8006e78:	f04f 0800 	mov.w	r8, #0
 8006e7c:	f104 091a 	add.w	r9, r4, #26
 8006e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e82:	3b01      	subs	r3, #1
 8006e84:	4543      	cmp	r3, r8
 8006e86:	dc09      	bgt.n	8006e9c <_printf_float+0x260>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	079b      	lsls	r3, r3, #30
 8006e8c:	f100 8107 	bmi.w	800709e <_printf_float+0x462>
 8006e90:	68e0      	ldr	r0, [r4, #12]
 8006e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e94:	4298      	cmp	r0, r3
 8006e96:	bfb8      	it	lt
 8006e98:	4618      	movlt	r0, r3
 8006e9a:	e730      	b.n	8006cfe <_printf_float+0xc2>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	464a      	mov	r2, r9
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af27 	beq.w	8006cfa <_printf_float+0xbe>
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	e7e6      	b.n	8006e80 <_printf_float+0x244>
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dc39      	bgt.n	8006f2c <_printf_float+0x2f0>
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <_printf_float+0x2ec>)
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f af19 	beq.w	8006cfa <_printf_float+0xbe>
 8006ec8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	d102      	bne.n	8006ed6 <_printf_float+0x29a>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	07d9      	lsls	r1, r3, #31
 8006ed4:	d5d8      	bpl.n	8006e88 <_printf_float+0x24c>
 8006ed6:	ee18 3a10 	vmov	r3, s16
 8006eda:	4652      	mov	r2, sl
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f af09 	beq.w	8006cfa <_printf_float+0xbe>
 8006ee8:	f04f 0900 	mov.w	r9, #0
 8006eec:	f104 0a1a 	add.w	sl, r4, #26
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	425b      	negs	r3, r3
 8006ef4:	454b      	cmp	r3, r9
 8006ef6:	dc01      	bgt.n	8006efc <_printf_float+0x2c0>
 8006ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efa:	e792      	b.n	8006e22 <_printf_float+0x1e6>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4652      	mov	r2, sl
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f aef7 	beq.w	8006cfa <_printf_float+0xbe>
 8006f0c:	f109 0901 	add.w	r9, r9, #1
 8006f10:	e7ee      	b.n	8006ef0 <_printf_float+0x2b4>
 8006f12:	bf00      	nop
 8006f14:	7fefffff 	.word	0x7fefffff
 8006f18:	0800e818 	.word	0x0800e818
 8006f1c:	0800e81c 	.word	0x0800e81c
 8006f20:	0800e820 	.word	0x0800e820
 8006f24:	0800e824 	.word	0x0800e824
 8006f28:	0800e828 	.word	0x0800e828
 8006f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bfa8      	it	ge
 8006f34:	461a      	movge	r2, r3
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	4691      	mov	r9, r2
 8006f3a:	dc37      	bgt.n	8006fac <_printf_float+0x370>
 8006f3c:	f04f 0b00 	mov.w	fp, #0
 8006f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f44:	f104 021a 	add.w	r2, r4, #26
 8006f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	eba3 0309 	sub.w	r3, r3, r9
 8006f50:	455b      	cmp	r3, fp
 8006f52:	dc33      	bgt.n	8006fbc <_printf_float+0x380>
 8006f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	db3b      	blt.n	8006fd4 <_printf_float+0x398>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d438      	bmi.n	8006fd4 <_printf_float+0x398>
 8006f62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f66:	eba2 0903 	sub.w	r9, r2, r3
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	1ad2      	subs	r2, r2, r3
 8006f6e:	4591      	cmp	r9, r2
 8006f70:	bfa8      	it	ge
 8006f72:	4691      	movge	r9, r2
 8006f74:	f1b9 0f00 	cmp.w	r9, #0
 8006f78:	dc35      	bgt.n	8006fe6 <_printf_float+0x3aa>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f82:	f104 0a1a 	add.w	sl, r4, #26
 8006f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	eba3 0309 	sub.w	r3, r3, r9
 8006f90:	4543      	cmp	r3, r8
 8006f92:	f77f af79 	ble.w	8006e88 <_printf_float+0x24c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f aeaa 	beq.w	8006cfa <_printf_float+0xbe>
 8006fa6:	f108 0801 	add.w	r8, r8, #1
 8006faa:	e7ec      	b.n	8006f86 <_printf_float+0x34a>
 8006fac:	4613      	mov	r3, r2
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d1c0      	bne.n	8006f3c <_printf_float+0x300>
 8006fba:	e69e      	b.n	8006cfa <_printf_float+0xbe>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	9205      	str	r2, [sp, #20]
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	f43f ae97 	beq.w	8006cfa <_printf_float+0xbe>
 8006fcc:	9a05      	ldr	r2, [sp, #20]
 8006fce:	f10b 0b01 	add.w	fp, fp, #1
 8006fd2:	e7b9      	b.n	8006f48 <_printf_float+0x30c>
 8006fd4:	ee18 3a10 	vmov	r3, s16
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d1be      	bne.n	8006f62 <_printf_float+0x326>
 8006fe4:	e689      	b.n	8006cfa <_printf_float+0xbe>
 8006fe6:	9a05      	ldr	r2, [sp, #20]
 8006fe8:	464b      	mov	r3, r9
 8006fea:	4442      	add	r2, r8
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d1c1      	bne.n	8006f7a <_printf_float+0x33e>
 8006ff6:	e680      	b.n	8006cfa <_printf_float+0xbe>
 8006ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffa:	2a01      	cmp	r2, #1
 8006ffc:	dc01      	bgt.n	8007002 <_printf_float+0x3c6>
 8006ffe:	07db      	lsls	r3, r3, #31
 8007000:	d53a      	bpl.n	8007078 <_printf_float+0x43c>
 8007002:	2301      	movs	r3, #1
 8007004:	4642      	mov	r2, r8
 8007006:	4631      	mov	r1, r6
 8007008:	4628      	mov	r0, r5
 800700a:	47b8      	blx	r7
 800700c:	3001      	adds	r0, #1
 800700e:	f43f ae74 	beq.w	8006cfa <_printf_float+0xbe>
 8007012:	ee18 3a10 	vmov	r3, s16
 8007016:	4652      	mov	r2, sl
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f ae6b 	beq.w	8006cfa <_printf_float+0xbe>
 8007024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007030:	f7f9 fd72 	bl	8000b18 <__aeabi_dcmpeq>
 8007034:	b9d8      	cbnz	r0, 800706e <_printf_float+0x432>
 8007036:	f10a 33ff 	add.w	r3, sl, #4294967295
 800703a:	f108 0201 	add.w	r2, r8, #1
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	d10e      	bne.n	8007066 <_printf_float+0x42a>
 8007048:	e657      	b.n	8006cfa <_printf_float+0xbe>
 800704a:	2301      	movs	r3, #1
 800704c:	4652      	mov	r2, sl
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f ae50 	beq.w	8006cfa <_printf_float+0xbe>
 800705a:	f108 0801 	add.w	r8, r8, #1
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	3b01      	subs	r3, #1
 8007062:	4543      	cmp	r3, r8
 8007064:	dcf1      	bgt.n	800704a <_printf_float+0x40e>
 8007066:	464b      	mov	r3, r9
 8007068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800706c:	e6da      	b.n	8006e24 <_printf_float+0x1e8>
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	f104 0a1a 	add.w	sl, r4, #26
 8007076:	e7f2      	b.n	800705e <_printf_float+0x422>
 8007078:	2301      	movs	r3, #1
 800707a:	4642      	mov	r2, r8
 800707c:	e7df      	b.n	800703e <_printf_float+0x402>
 800707e:	2301      	movs	r3, #1
 8007080:	464a      	mov	r2, r9
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	47b8      	blx	r7
 8007088:	3001      	adds	r0, #1
 800708a:	f43f ae36 	beq.w	8006cfa <_printf_float+0xbe>
 800708e:	f108 0801 	add.w	r8, r8, #1
 8007092:	68e3      	ldr	r3, [r4, #12]
 8007094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007096:	1a5b      	subs	r3, r3, r1
 8007098:	4543      	cmp	r3, r8
 800709a:	dcf0      	bgt.n	800707e <_printf_float+0x442>
 800709c:	e6f8      	b.n	8006e90 <_printf_float+0x254>
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	f104 0919 	add.w	r9, r4, #25
 80070a6:	e7f4      	b.n	8007092 <_printf_float+0x456>

080070a8 <_printf_common>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	4616      	mov	r6, r2
 80070ae:	4699      	mov	r9, r3
 80070b0:	688a      	ldr	r2, [r1, #8]
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	bfb8      	it	lt
 80070bc:	4613      	movlt	r3, r2
 80070be:	6033      	str	r3, [r6, #0]
 80070c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c4:	4607      	mov	r7, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	b10a      	cbz	r2, 80070ce <_printf_common+0x26>
 80070ca:	3301      	adds	r3, #1
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	0699      	lsls	r1, r3, #26
 80070d2:	bf42      	ittt	mi
 80070d4:	6833      	ldrmi	r3, [r6, #0]
 80070d6:	3302      	addmi	r3, #2
 80070d8:	6033      	strmi	r3, [r6, #0]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	f015 0506 	ands.w	r5, r5, #6
 80070e0:	d106      	bne.n	80070f0 <_printf_common+0x48>
 80070e2:	f104 0a19 	add.w	sl, r4, #25
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dc26      	bgt.n	800713e <_printf_common+0x96>
 80070f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f4:	1e13      	subs	r3, r2, #0
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	0692      	lsls	r2, r2, #26
 80070fe:	d42b      	bmi.n	8007158 <_printf_common+0xb0>
 8007100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007104:	4649      	mov	r1, r9
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	3001      	adds	r0, #1
 800710c:	d01e      	beq.n	800714c <_printf_common+0xa4>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	6922      	ldr	r2, [r4, #16]
 8007112:	f003 0306 	and.w	r3, r3, #6
 8007116:	2b04      	cmp	r3, #4
 8007118:	bf02      	ittt	eq
 800711a:	68e5      	ldreq	r5, [r4, #12]
 800711c:	6833      	ldreq	r3, [r6, #0]
 800711e:	1aed      	subeq	r5, r5, r3
 8007120:	68a3      	ldr	r3, [r4, #8]
 8007122:	bf0c      	ite	eq
 8007124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007128:	2500      	movne	r5, #0
 800712a:	4293      	cmp	r3, r2
 800712c:	bfc4      	itt	gt
 800712e:	1a9b      	subgt	r3, r3, r2
 8007130:	18ed      	addgt	r5, r5, r3
 8007132:	2600      	movs	r6, #0
 8007134:	341a      	adds	r4, #26
 8007136:	42b5      	cmp	r5, r6
 8007138:	d11a      	bne.n	8007170 <_printf_common+0xc8>
 800713a:	2000      	movs	r0, #0
 800713c:	e008      	b.n	8007150 <_printf_common+0xa8>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4649      	mov	r1, r9
 8007144:	4638      	mov	r0, r7
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d103      	bne.n	8007154 <_printf_common+0xac>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	3501      	adds	r5, #1
 8007156:	e7c6      	b.n	80070e6 <_printf_common+0x3e>
 8007158:	18e1      	adds	r1, r4, r3
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	2030      	movs	r0, #48	; 0x30
 800715e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007162:	4422      	add	r2, r4
 8007164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800716c:	3302      	adds	r3, #2
 800716e:	e7c7      	b.n	8007100 <_printf_common+0x58>
 8007170:	2301      	movs	r3, #1
 8007172:	4622      	mov	r2, r4
 8007174:	4649      	mov	r1, r9
 8007176:	4638      	mov	r0, r7
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d0e6      	beq.n	800714c <_printf_common+0xa4>
 800717e:	3601      	adds	r6, #1
 8007180:	e7d9      	b.n	8007136 <_printf_common+0x8e>
	...

08007184 <_printf_i>:
 8007184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	7e0f      	ldrb	r7, [r1, #24]
 800718a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800718c:	2f78      	cmp	r7, #120	; 0x78
 800718e:	4691      	mov	r9, r2
 8007190:	4680      	mov	r8, r0
 8007192:	460c      	mov	r4, r1
 8007194:	469a      	mov	sl, r3
 8007196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800719a:	d807      	bhi.n	80071ac <_printf_i+0x28>
 800719c:	2f62      	cmp	r7, #98	; 0x62
 800719e:	d80a      	bhi.n	80071b6 <_printf_i+0x32>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	f000 80d4 	beq.w	800734e <_printf_i+0x1ca>
 80071a6:	2f58      	cmp	r7, #88	; 0x58
 80071a8:	f000 80c0 	beq.w	800732c <_printf_i+0x1a8>
 80071ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b4:	e03a      	b.n	800722c <_printf_i+0xa8>
 80071b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ba:	2b15      	cmp	r3, #21
 80071bc:	d8f6      	bhi.n	80071ac <_printf_i+0x28>
 80071be:	a101      	add	r1, pc, #4	; (adr r1, 80071c4 <_printf_i+0x40>)
 80071c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	08007231 	.word	0x08007231
 80071cc:	080071ad 	.word	0x080071ad
 80071d0:	080071ad 	.word	0x080071ad
 80071d4:	080071ad 	.word	0x080071ad
 80071d8:	080071ad 	.word	0x080071ad
 80071dc:	08007231 	.word	0x08007231
 80071e0:	080071ad 	.word	0x080071ad
 80071e4:	080071ad 	.word	0x080071ad
 80071e8:	080071ad 	.word	0x080071ad
 80071ec:	080071ad 	.word	0x080071ad
 80071f0:	08007335 	.word	0x08007335
 80071f4:	0800725d 	.word	0x0800725d
 80071f8:	080072ef 	.word	0x080072ef
 80071fc:	080071ad 	.word	0x080071ad
 8007200:	080071ad 	.word	0x080071ad
 8007204:	08007357 	.word	0x08007357
 8007208:	080071ad 	.word	0x080071ad
 800720c:	0800725d 	.word	0x0800725d
 8007210:	080071ad 	.word	0x080071ad
 8007214:	080071ad 	.word	0x080071ad
 8007218:	080072f7 	.word	0x080072f7
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	602a      	str	r2, [r5, #0]
 8007224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800722c:	2301      	movs	r3, #1
 800722e:	e09f      	b.n	8007370 <_printf_i+0x1ec>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	682b      	ldr	r3, [r5, #0]
 8007234:	0607      	lsls	r7, r0, #24
 8007236:	f103 0104 	add.w	r1, r3, #4
 800723a:	6029      	str	r1, [r5, #0]
 800723c:	d501      	bpl.n	8007242 <_printf_i+0xbe>
 800723e:	681e      	ldr	r6, [r3, #0]
 8007240:	e003      	b.n	800724a <_printf_i+0xc6>
 8007242:	0646      	lsls	r6, r0, #25
 8007244:	d5fb      	bpl.n	800723e <_printf_i+0xba>
 8007246:	f9b3 6000 	ldrsh.w	r6, [r3]
 800724a:	2e00      	cmp	r6, #0
 800724c:	da03      	bge.n	8007256 <_printf_i+0xd2>
 800724e:	232d      	movs	r3, #45	; 0x2d
 8007250:	4276      	negs	r6, r6
 8007252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007256:	485a      	ldr	r0, [pc, #360]	; (80073c0 <_printf_i+0x23c>)
 8007258:	230a      	movs	r3, #10
 800725a:	e012      	b.n	8007282 <_printf_i+0xfe>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	6820      	ldr	r0, [r4, #0]
 8007260:	1d19      	adds	r1, r3, #4
 8007262:	6029      	str	r1, [r5, #0]
 8007264:	0605      	lsls	r5, r0, #24
 8007266:	d501      	bpl.n	800726c <_printf_i+0xe8>
 8007268:	681e      	ldr	r6, [r3, #0]
 800726a:	e002      	b.n	8007272 <_printf_i+0xee>
 800726c:	0641      	lsls	r1, r0, #25
 800726e:	d5fb      	bpl.n	8007268 <_printf_i+0xe4>
 8007270:	881e      	ldrh	r6, [r3, #0]
 8007272:	4853      	ldr	r0, [pc, #332]	; (80073c0 <_printf_i+0x23c>)
 8007274:	2f6f      	cmp	r7, #111	; 0x6f
 8007276:	bf0c      	ite	eq
 8007278:	2308      	moveq	r3, #8
 800727a:	230a      	movne	r3, #10
 800727c:	2100      	movs	r1, #0
 800727e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007282:	6865      	ldr	r5, [r4, #4]
 8007284:	60a5      	str	r5, [r4, #8]
 8007286:	2d00      	cmp	r5, #0
 8007288:	bfa2      	ittt	ge
 800728a:	6821      	ldrge	r1, [r4, #0]
 800728c:	f021 0104 	bicge.w	r1, r1, #4
 8007290:	6021      	strge	r1, [r4, #0]
 8007292:	b90e      	cbnz	r6, 8007298 <_printf_i+0x114>
 8007294:	2d00      	cmp	r5, #0
 8007296:	d04b      	beq.n	8007330 <_printf_i+0x1ac>
 8007298:	4615      	mov	r5, r2
 800729a:	fbb6 f1f3 	udiv	r1, r6, r3
 800729e:	fb03 6711 	mls	r7, r3, r1, r6
 80072a2:	5dc7      	ldrb	r7, [r0, r7]
 80072a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072a8:	4637      	mov	r7, r6
 80072aa:	42bb      	cmp	r3, r7
 80072ac:	460e      	mov	r6, r1
 80072ae:	d9f4      	bls.n	800729a <_printf_i+0x116>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d10b      	bne.n	80072cc <_printf_i+0x148>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07de      	lsls	r6, r3, #31
 80072b8:	d508      	bpl.n	80072cc <_printf_i+0x148>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	6861      	ldr	r1, [r4, #4]
 80072be:	4299      	cmp	r1, r3
 80072c0:	bfde      	ittt	le
 80072c2:	2330      	movle	r3, #48	; 0x30
 80072c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072cc:	1b52      	subs	r2, r2, r5
 80072ce:	6122      	str	r2, [r4, #16]
 80072d0:	f8cd a000 	str.w	sl, [sp]
 80072d4:	464b      	mov	r3, r9
 80072d6:	aa03      	add	r2, sp, #12
 80072d8:	4621      	mov	r1, r4
 80072da:	4640      	mov	r0, r8
 80072dc:	f7ff fee4 	bl	80070a8 <_printf_common>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d14a      	bne.n	800737a <_printf_i+0x1f6>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	b004      	add	sp, #16
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	f043 0320 	orr.w	r3, r3, #32
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	4833      	ldr	r0, [pc, #204]	; (80073c4 <_printf_i+0x240>)
 80072f8:	2778      	movs	r7, #120	; 0x78
 80072fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	6829      	ldr	r1, [r5, #0]
 8007302:	061f      	lsls	r7, r3, #24
 8007304:	f851 6b04 	ldr.w	r6, [r1], #4
 8007308:	d402      	bmi.n	8007310 <_printf_i+0x18c>
 800730a:	065f      	lsls	r7, r3, #25
 800730c:	bf48      	it	mi
 800730e:	b2b6      	uxthmi	r6, r6
 8007310:	07df      	lsls	r7, r3, #31
 8007312:	bf48      	it	mi
 8007314:	f043 0320 	orrmi.w	r3, r3, #32
 8007318:	6029      	str	r1, [r5, #0]
 800731a:	bf48      	it	mi
 800731c:	6023      	strmi	r3, [r4, #0]
 800731e:	b91e      	cbnz	r6, 8007328 <_printf_i+0x1a4>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	f023 0320 	bic.w	r3, r3, #32
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	2310      	movs	r3, #16
 800732a:	e7a7      	b.n	800727c <_printf_i+0xf8>
 800732c:	4824      	ldr	r0, [pc, #144]	; (80073c0 <_printf_i+0x23c>)
 800732e:	e7e4      	b.n	80072fa <_printf_i+0x176>
 8007330:	4615      	mov	r5, r2
 8007332:	e7bd      	b.n	80072b0 <_printf_i+0x12c>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	6826      	ldr	r6, [r4, #0]
 8007338:	6961      	ldr	r1, [r4, #20]
 800733a:	1d18      	adds	r0, r3, #4
 800733c:	6028      	str	r0, [r5, #0]
 800733e:	0635      	lsls	r5, r6, #24
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	d501      	bpl.n	8007348 <_printf_i+0x1c4>
 8007344:	6019      	str	r1, [r3, #0]
 8007346:	e002      	b.n	800734e <_printf_i+0x1ca>
 8007348:	0670      	lsls	r0, r6, #25
 800734a:	d5fb      	bpl.n	8007344 <_printf_i+0x1c0>
 800734c:	8019      	strh	r1, [r3, #0]
 800734e:	2300      	movs	r3, #0
 8007350:	6123      	str	r3, [r4, #16]
 8007352:	4615      	mov	r5, r2
 8007354:	e7bc      	b.n	80072d0 <_printf_i+0x14c>
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	1d1a      	adds	r2, r3, #4
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	681d      	ldr	r5, [r3, #0]
 800735e:	6862      	ldr	r2, [r4, #4]
 8007360:	2100      	movs	r1, #0
 8007362:	4628      	mov	r0, r5
 8007364:	f7f8 ff5c 	bl	8000220 <memchr>
 8007368:	b108      	cbz	r0, 800736e <_printf_i+0x1ea>
 800736a:	1b40      	subs	r0, r0, r5
 800736c:	6060      	str	r0, [r4, #4]
 800736e:	6863      	ldr	r3, [r4, #4]
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	2300      	movs	r3, #0
 8007374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007378:	e7aa      	b.n	80072d0 <_printf_i+0x14c>
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	462a      	mov	r2, r5
 800737e:	4649      	mov	r1, r9
 8007380:	4640      	mov	r0, r8
 8007382:	47d0      	blx	sl
 8007384:	3001      	adds	r0, #1
 8007386:	d0ad      	beq.n	80072e4 <_printf_i+0x160>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	079b      	lsls	r3, r3, #30
 800738c:	d413      	bmi.n	80073b6 <_printf_i+0x232>
 800738e:	68e0      	ldr	r0, [r4, #12]
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	4298      	cmp	r0, r3
 8007394:	bfb8      	it	lt
 8007396:	4618      	movlt	r0, r3
 8007398:	e7a6      	b.n	80072e8 <_printf_i+0x164>
 800739a:	2301      	movs	r3, #1
 800739c:	4632      	mov	r2, r6
 800739e:	4649      	mov	r1, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	47d0      	blx	sl
 80073a4:	3001      	adds	r0, #1
 80073a6:	d09d      	beq.n	80072e4 <_printf_i+0x160>
 80073a8:	3501      	adds	r5, #1
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	9903      	ldr	r1, [sp, #12]
 80073ae:	1a5b      	subs	r3, r3, r1
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dcf2      	bgt.n	800739a <_printf_i+0x216>
 80073b4:	e7eb      	b.n	800738e <_printf_i+0x20a>
 80073b6:	2500      	movs	r5, #0
 80073b8:	f104 0619 	add.w	r6, r4, #25
 80073bc:	e7f5      	b.n	80073aa <_printf_i+0x226>
 80073be:	bf00      	nop
 80073c0:	0800e82a 	.word	0x0800e82a
 80073c4:	0800e83b 	.word	0x0800e83b

080073c8 <_scanf_float>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b087      	sub	sp, #28
 80073ce:	4617      	mov	r7, r2
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	688b      	ldr	r3, [r1, #8]
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073da:	bf83      	ittte	hi
 80073dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80073e0:	195b      	addhi	r3, r3, r5
 80073e2:	9302      	strhi	r3, [sp, #8]
 80073e4:	2300      	movls	r3, #0
 80073e6:	bf86      	itte	hi
 80073e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80073ec:	608b      	strhi	r3, [r1, #8]
 80073ee:	9302      	strls	r3, [sp, #8]
 80073f0:	680b      	ldr	r3, [r1, #0]
 80073f2:	468b      	mov	fp, r1
 80073f4:	2500      	movs	r5, #0
 80073f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80073fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007402:	4680      	mov	r8, r0
 8007404:	460c      	mov	r4, r1
 8007406:	465e      	mov	r6, fp
 8007408:	46aa      	mov	sl, r5
 800740a:	46a9      	mov	r9, r5
 800740c:	9501      	str	r5, [sp, #4]
 800740e:	68a2      	ldr	r2, [r4, #8]
 8007410:	b152      	cbz	r2, 8007428 <_scanf_float+0x60>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b4e      	cmp	r3, #78	; 0x4e
 8007418:	d864      	bhi.n	80074e4 <_scanf_float+0x11c>
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d83c      	bhi.n	8007498 <_scanf_float+0xd0>
 800741e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007422:	b2c8      	uxtb	r0, r1
 8007424:	280e      	cmp	r0, #14
 8007426:	d93a      	bls.n	800749e <_scanf_float+0xd6>
 8007428:	f1b9 0f00 	cmp.w	r9, #0
 800742c:	d003      	beq.n	8007436 <_scanf_float+0x6e>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800743a:	f1ba 0f01 	cmp.w	sl, #1
 800743e:	f200 8113 	bhi.w	8007668 <_scanf_float+0x2a0>
 8007442:	455e      	cmp	r6, fp
 8007444:	f200 8105 	bhi.w	8007652 <_scanf_float+0x28a>
 8007448:	2501      	movs	r5, #1
 800744a:	4628      	mov	r0, r5
 800744c:	b007      	add	sp, #28
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007456:	2a0d      	cmp	r2, #13
 8007458:	d8e6      	bhi.n	8007428 <_scanf_float+0x60>
 800745a:	a101      	add	r1, pc, #4	; (adr r1, 8007460 <_scanf_float+0x98>)
 800745c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007460:	0800759f 	.word	0x0800759f
 8007464:	08007429 	.word	0x08007429
 8007468:	08007429 	.word	0x08007429
 800746c:	08007429 	.word	0x08007429
 8007470:	080075ff 	.word	0x080075ff
 8007474:	080075d7 	.word	0x080075d7
 8007478:	08007429 	.word	0x08007429
 800747c:	08007429 	.word	0x08007429
 8007480:	080075ad 	.word	0x080075ad
 8007484:	08007429 	.word	0x08007429
 8007488:	08007429 	.word	0x08007429
 800748c:	08007429 	.word	0x08007429
 8007490:	08007429 	.word	0x08007429
 8007494:	08007565 	.word	0x08007565
 8007498:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800749c:	e7db      	b.n	8007456 <_scanf_float+0x8e>
 800749e:	290e      	cmp	r1, #14
 80074a0:	d8c2      	bhi.n	8007428 <_scanf_float+0x60>
 80074a2:	a001      	add	r0, pc, #4	; (adr r0, 80074a8 <_scanf_float+0xe0>)
 80074a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074a8:	08007557 	.word	0x08007557
 80074ac:	08007429 	.word	0x08007429
 80074b0:	08007557 	.word	0x08007557
 80074b4:	080075eb 	.word	0x080075eb
 80074b8:	08007429 	.word	0x08007429
 80074bc:	08007505 	.word	0x08007505
 80074c0:	08007541 	.word	0x08007541
 80074c4:	08007541 	.word	0x08007541
 80074c8:	08007541 	.word	0x08007541
 80074cc:	08007541 	.word	0x08007541
 80074d0:	08007541 	.word	0x08007541
 80074d4:	08007541 	.word	0x08007541
 80074d8:	08007541 	.word	0x08007541
 80074dc:	08007541 	.word	0x08007541
 80074e0:	08007541 	.word	0x08007541
 80074e4:	2b6e      	cmp	r3, #110	; 0x6e
 80074e6:	d809      	bhi.n	80074fc <_scanf_float+0x134>
 80074e8:	2b60      	cmp	r3, #96	; 0x60
 80074ea:	d8b2      	bhi.n	8007452 <_scanf_float+0x8a>
 80074ec:	2b54      	cmp	r3, #84	; 0x54
 80074ee:	d077      	beq.n	80075e0 <_scanf_float+0x218>
 80074f0:	2b59      	cmp	r3, #89	; 0x59
 80074f2:	d199      	bne.n	8007428 <_scanf_float+0x60>
 80074f4:	2d07      	cmp	r5, #7
 80074f6:	d197      	bne.n	8007428 <_scanf_float+0x60>
 80074f8:	2508      	movs	r5, #8
 80074fa:	e029      	b.n	8007550 <_scanf_float+0x188>
 80074fc:	2b74      	cmp	r3, #116	; 0x74
 80074fe:	d06f      	beq.n	80075e0 <_scanf_float+0x218>
 8007500:	2b79      	cmp	r3, #121	; 0x79
 8007502:	e7f6      	b.n	80074f2 <_scanf_float+0x12a>
 8007504:	6821      	ldr	r1, [r4, #0]
 8007506:	05c8      	lsls	r0, r1, #23
 8007508:	d51a      	bpl.n	8007540 <_scanf_float+0x178>
 800750a:	9b02      	ldr	r3, [sp, #8]
 800750c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007510:	6021      	str	r1, [r4, #0]
 8007512:	f109 0901 	add.w	r9, r9, #1
 8007516:	b11b      	cbz	r3, 8007520 <_scanf_float+0x158>
 8007518:	3b01      	subs	r3, #1
 800751a:	3201      	adds	r2, #1
 800751c:	9302      	str	r3, [sp, #8]
 800751e:	60a2      	str	r2, [r4, #8]
 8007520:	68a3      	ldr	r3, [r4, #8]
 8007522:	3b01      	subs	r3, #1
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	3301      	adds	r3, #1
 800752a:	6123      	str	r3, [r4, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3b01      	subs	r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	607b      	str	r3, [r7, #4]
 8007534:	f340 8084 	ble.w	8007640 <_scanf_float+0x278>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	3301      	adds	r3, #1
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	e766      	b.n	800740e <_scanf_float+0x46>
 8007540:	eb1a 0f05 	cmn.w	sl, r5
 8007544:	f47f af70 	bne.w	8007428 <_scanf_float+0x60>
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800754e:	6022      	str	r2, [r4, #0]
 8007550:	f806 3b01 	strb.w	r3, [r6], #1
 8007554:	e7e4      	b.n	8007520 <_scanf_float+0x158>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	0610      	lsls	r0, r2, #24
 800755a:	f57f af65 	bpl.w	8007428 <_scanf_float+0x60>
 800755e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007562:	e7f4      	b.n	800754e <_scanf_float+0x186>
 8007564:	f1ba 0f00 	cmp.w	sl, #0
 8007568:	d10e      	bne.n	8007588 <_scanf_float+0x1c0>
 800756a:	f1b9 0f00 	cmp.w	r9, #0
 800756e:	d10e      	bne.n	800758e <_scanf_float+0x1c6>
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007576:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800757a:	d108      	bne.n	800758e <_scanf_float+0x1c6>
 800757c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007580:	6022      	str	r2, [r4, #0]
 8007582:	f04f 0a01 	mov.w	sl, #1
 8007586:	e7e3      	b.n	8007550 <_scanf_float+0x188>
 8007588:	f1ba 0f02 	cmp.w	sl, #2
 800758c:	d055      	beq.n	800763a <_scanf_float+0x272>
 800758e:	2d01      	cmp	r5, #1
 8007590:	d002      	beq.n	8007598 <_scanf_float+0x1d0>
 8007592:	2d04      	cmp	r5, #4
 8007594:	f47f af48 	bne.w	8007428 <_scanf_float+0x60>
 8007598:	3501      	adds	r5, #1
 800759a:	b2ed      	uxtb	r5, r5
 800759c:	e7d8      	b.n	8007550 <_scanf_float+0x188>
 800759e:	f1ba 0f01 	cmp.w	sl, #1
 80075a2:	f47f af41 	bne.w	8007428 <_scanf_float+0x60>
 80075a6:	f04f 0a02 	mov.w	sl, #2
 80075aa:	e7d1      	b.n	8007550 <_scanf_float+0x188>
 80075ac:	b97d      	cbnz	r5, 80075ce <_scanf_float+0x206>
 80075ae:	f1b9 0f00 	cmp.w	r9, #0
 80075b2:	f47f af3c 	bne.w	800742e <_scanf_float+0x66>
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80075bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80075c0:	f47f af39 	bne.w	8007436 <_scanf_float+0x6e>
 80075c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075c8:	6022      	str	r2, [r4, #0]
 80075ca:	2501      	movs	r5, #1
 80075cc:	e7c0      	b.n	8007550 <_scanf_float+0x188>
 80075ce:	2d03      	cmp	r5, #3
 80075d0:	d0e2      	beq.n	8007598 <_scanf_float+0x1d0>
 80075d2:	2d05      	cmp	r5, #5
 80075d4:	e7de      	b.n	8007594 <_scanf_float+0x1cc>
 80075d6:	2d02      	cmp	r5, #2
 80075d8:	f47f af26 	bne.w	8007428 <_scanf_float+0x60>
 80075dc:	2503      	movs	r5, #3
 80075de:	e7b7      	b.n	8007550 <_scanf_float+0x188>
 80075e0:	2d06      	cmp	r5, #6
 80075e2:	f47f af21 	bne.w	8007428 <_scanf_float+0x60>
 80075e6:	2507      	movs	r5, #7
 80075e8:	e7b2      	b.n	8007550 <_scanf_float+0x188>
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	0591      	lsls	r1, r2, #22
 80075ee:	f57f af1b 	bpl.w	8007428 <_scanf_float+0x60>
 80075f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80075fc:	e7a8      	b.n	8007550 <_scanf_float+0x188>
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007604:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007608:	d006      	beq.n	8007618 <_scanf_float+0x250>
 800760a:	0550      	lsls	r0, r2, #21
 800760c:	f57f af0c 	bpl.w	8007428 <_scanf_float+0x60>
 8007610:	f1b9 0f00 	cmp.w	r9, #0
 8007614:	f43f af0f 	beq.w	8007436 <_scanf_float+0x6e>
 8007618:	0591      	lsls	r1, r2, #22
 800761a:	bf58      	it	pl
 800761c:	9901      	ldrpl	r1, [sp, #4]
 800761e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007622:	bf58      	it	pl
 8007624:	eba9 0101 	subpl.w	r1, r9, r1
 8007628:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800762c:	bf58      	it	pl
 800762e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007632:	6022      	str	r2, [r4, #0]
 8007634:	f04f 0900 	mov.w	r9, #0
 8007638:	e78a      	b.n	8007550 <_scanf_float+0x188>
 800763a:	f04f 0a03 	mov.w	sl, #3
 800763e:	e787      	b.n	8007550 <_scanf_float+0x188>
 8007640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007644:	4639      	mov	r1, r7
 8007646:	4640      	mov	r0, r8
 8007648:	4798      	blx	r3
 800764a:	2800      	cmp	r0, #0
 800764c:	f43f aedf 	beq.w	800740e <_scanf_float+0x46>
 8007650:	e6ea      	b.n	8007428 <_scanf_float+0x60>
 8007652:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800765a:	463a      	mov	r2, r7
 800765c:	4640      	mov	r0, r8
 800765e:	4798      	blx	r3
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	3b01      	subs	r3, #1
 8007664:	6123      	str	r3, [r4, #16]
 8007666:	e6ec      	b.n	8007442 <_scanf_float+0x7a>
 8007668:	1e6b      	subs	r3, r5, #1
 800766a:	2b06      	cmp	r3, #6
 800766c:	d825      	bhi.n	80076ba <_scanf_float+0x2f2>
 800766e:	2d02      	cmp	r5, #2
 8007670:	d836      	bhi.n	80076e0 <_scanf_float+0x318>
 8007672:	455e      	cmp	r6, fp
 8007674:	f67f aee8 	bls.w	8007448 <_scanf_float+0x80>
 8007678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800767c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007680:	463a      	mov	r2, r7
 8007682:	4640      	mov	r0, r8
 8007684:	4798      	blx	r3
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	3b01      	subs	r3, #1
 800768a:	6123      	str	r3, [r4, #16]
 800768c:	e7f1      	b.n	8007672 <_scanf_float+0x2aa>
 800768e:	9802      	ldr	r0, [sp, #8]
 8007690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007694:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007698:	9002      	str	r0, [sp, #8]
 800769a:	463a      	mov	r2, r7
 800769c:	4640      	mov	r0, r8
 800769e:	4798      	blx	r3
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076aa:	fa5f fa8a 	uxtb.w	sl, sl
 80076ae:	f1ba 0f02 	cmp.w	sl, #2
 80076b2:	d1ec      	bne.n	800768e <_scanf_float+0x2c6>
 80076b4:	3d03      	subs	r5, #3
 80076b6:	b2ed      	uxtb	r5, r5
 80076b8:	1b76      	subs	r6, r6, r5
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	05da      	lsls	r2, r3, #23
 80076be:	d52f      	bpl.n	8007720 <_scanf_float+0x358>
 80076c0:	055b      	lsls	r3, r3, #21
 80076c2:	d510      	bpl.n	80076e6 <_scanf_float+0x31e>
 80076c4:	455e      	cmp	r6, fp
 80076c6:	f67f aebf 	bls.w	8007448 <_scanf_float+0x80>
 80076ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076d2:	463a      	mov	r2, r7
 80076d4:	4640      	mov	r0, r8
 80076d6:	4798      	blx	r3
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	3b01      	subs	r3, #1
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	e7f1      	b.n	80076c4 <_scanf_float+0x2fc>
 80076e0:	46aa      	mov	sl, r5
 80076e2:	9602      	str	r6, [sp, #8]
 80076e4:	e7df      	b.n	80076a6 <_scanf_float+0x2de>
 80076e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	2965      	cmp	r1, #101	; 0x65
 80076ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80076f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80076f6:	6123      	str	r3, [r4, #16]
 80076f8:	d00c      	beq.n	8007714 <_scanf_float+0x34c>
 80076fa:	2945      	cmp	r1, #69	; 0x45
 80076fc:	d00a      	beq.n	8007714 <_scanf_float+0x34c>
 80076fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007702:	463a      	mov	r2, r7
 8007704:	4640      	mov	r0, r8
 8007706:	4798      	blx	r3
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800770e:	3b01      	subs	r3, #1
 8007710:	1eb5      	subs	r5, r6, #2
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007718:	463a      	mov	r2, r7
 800771a:	4640      	mov	r0, r8
 800771c:	4798      	blx	r3
 800771e:	462e      	mov	r6, r5
 8007720:	6825      	ldr	r5, [r4, #0]
 8007722:	f015 0510 	ands.w	r5, r5, #16
 8007726:	d158      	bne.n	80077da <_scanf_float+0x412>
 8007728:	7035      	strb	r5, [r6, #0]
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007734:	d11c      	bne.n	8007770 <_scanf_float+0x3a8>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	454b      	cmp	r3, r9
 800773a:	eba3 0209 	sub.w	r2, r3, r9
 800773e:	d124      	bne.n	800778a <_scanf_float+0x3c2>
 8007740:	2200      	movs	r2, #0
 8007742:	4659      	mov	r1, fp
 8007744:	4640      	mov	r0, r8
 8007746:	f002 fd3b 	bl	800a1c0 <_strtod_r>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	6821      	ldr	r1, [r4, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f011 0f02 	tst.w	r1, #2
 8007754:	ec57 6b10 	vmov	r6, r7, d0
 8007758:	f103 0204 	add.w	r2, r3, #4
 800775c:	d020      	beq.n	80077a0 <_scanf_float+0x3d8>
 800775e:	9903      	ldr	r1, [sp, #12]
 8007760:	600a      	str	r2, [r1, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	e9c3 6700 	strd	r6, r7, [r3]
 8007768:	68e3      	ldr	r3, [r4, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60e3      	str	r3, [r4, #12]
 800776e:	e66c      	b.n	800744a <_scanf_float+0x82>
 8007770:	9b04      	ldr	r3, [sp, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0e4      	beq.n	8007740 <_scanf_float+0x378>
 8007776:	9905      	ldr	r1, [sp, #20]
 8007778:	230a      	movs	r3, #10
 800777a:	462a      	mov	r2, r5
 800777c:	3101      	adds	r1, #1
 800777e:	4640      	mov	r0, r8
 8007780:	f002 fda6 	bl	800a2d0 <_strtol_r>
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	9e05      	ldr	r6, [sp, #20]
 8007788:	1ac2      	subs	r2, r0, r3
 800778a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800778e:	429e      	cmp	r6, r3
 8007790:	bf28      	it	cs
 8007792:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007796:	4912      	ldr	r1, [pc, #72]	; (80077e0 <_scanf_float+0x418>)
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f95d 	bl	8007a58 <siprintf>
 800779e:	e7cf      	b.n	8007740 <_scanf_float+0x378>
 80077a0:	f011 0f04 	tst.w	r1, #4
 80077a4:	9903      	ldr	r1, [sp, #12]
 80077a6:	600a      	str	r2, [r1, #0]
 80077a8:	d1db      	bne.n	8007762 <_scanf_float+0x39a>
 80077aa:	f8d3 8000 	ldr.w	r8, [r3]
 80077ae:	ee10 2a10 	vmov	r2, s0
 80077b2:	ee10 0a10 	vmov	r0, s0
 80077b6:	463b      	mov	r3, r7
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f9df 	bl	8000b7c <__aeabi_dcmpun>
 80077be:	b128      	cbz	r0, 80077cc <_scanf_float+0x404>
 80077c0:	4808      	ldr	r0, [pc, #32]	; (80077e4 <_scanf_float+0x41c>)
 80077c2:	f000 fac1 	bl	8007d48 <nanf>
 80077c6:	ed88 0a00 	vstr	s0, [r8]
 80077ca:	e7cd      	b.n	8007768 <_scanf_float+0x3a0>
 80077cc:	4630      	mov	r0, r6
 80077ce:	4639      	mov	r1, r7
 80077d0:	f7f9 fa32 	bl	8000c38 <__aeabi_d2f>
 80077d4:	f8c8 0000 	str.w	r0, [r8]
 80077d8:	e7c6      	b.n	8007768 <_scanf_float+0x3a0>
 80077da:	2500      	movs	r5, #0
 80077dc:	e635      	b.n	800744a <_scanf_float+0x82>
 80077de:	bf00      	nop
 80077e0:	0800e84c 	.word	0x0800e84c
 80077e4:	0800ebdd 	.word	0x0800ebdd

080077e8 <std>:
 80077e8:	2300      	movs	r3, #0
 80077ea:	b510      	push	{r4, lr}
 80077ec:	4604      	mov	r4, r0
 80077ee:	e9c0 3300 	strd	r3, r3, [r0]
 80077f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077f6:	6083      	str	r3, [r0, #8]
 80077f8:	8181      	strh	r1, [r0, #12]
 80077fa:	6643      	str	r3, [r0, #100]	; 0x64
 80077fc:	81c2      	strh	r2, [r0, #14]
 80077fe:	6183      	str	r3, [r0, #24]
 8007800:	4619      	mov	r1, r3
 8007802:	2208      	movs	r2, #8
 8007804:	305c      	adds	r0, #92	; 0x5c
 8007806:	f000 fa1f 	bl	8007c48 <memset>
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <std+0x58>)
 800780c:	6263      	str	r3, [r4, #36]	; 0x24
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <std+0x5c>)
 8007810:	62a3      	str	r3, [r4, #40]	; 0x28
 8007812:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <std+0x60>)
 8007814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <std+0x64>)
 8007818:	6323      	str	r3, [r4, #48]	; 0x30
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <std+0x68>)
 800781c:	6224      	str	r4, [r4, #32]
 800781e:	429c      	cmp	r4, r3
 8007820:	d006      	beq.n	8007830 <std+0x48>
 8007822:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007826:	4294      	cmp	r4, r2
 8007828:	d002      	beq.n	8007830 <std+0x48>
 800782a:	33d0      	adds	r3, #208	; 0xd0
 800782c:	429c      	cmp	r4, r3
 800782e:	d105      	bne.n	800783c <std+0x54>
 8007830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f000 ba82 	b.w	8007d40 <__retarget_lock_init_recursive>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	08007a99 	.word	0x08007a99
 8007844:	08007abb 	.word	0x08007abb
 8007848:	08007af3 	.word	0x08007af3
 800784c:	08007b17 	.word	0x08007b17
 8007850:	20000840 	.word	0x20000840

08007854 <stdio_exit_handler>:
 8007854:	4a02      	ldr	r2, [pc, #8]	; (8007860 <stdio_exit_handler+0xc>)
 8007856:	4903      	ldr	r1, [pc, #12]	; (8007864 <stdio_exit_handler+0x10>)
 8007858:	4803      	ldr	r0, [pc, #12]	; (8007868 <stdio_exit_handler+0x14>)
 800785a:	f000 b869 	b.w	8007930 <_fwalk_sglue>
 800785e:	bf00      	nop
 8007860:	20000014 	.word	0x20000014
 8007864:	0800a919 	.word	0x0800a919
 8007868:	20000020 	.word	0x20000020

0800786c <cleanup_stdio>:
 800786c:	6841      	ldr	r1, [r0, #4]
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <cleanup_stdio+0x34>)
 8007870:	4299      	cmp	r1, r3
 8007872:	b510      	push	{r4, lr}
 8007874:	4604      	mov	r4, r0
 8007876:	d001      	beq.n	800787c <cleanup_stdio+0x10>
 8007878:	f003 f84e 	bl	800a918 <_fflush_r>
 800787c:	68a1      	ldr	r1, [r4, #8]
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <cleanup_stdio+0x38>)
 8007880:	4299      	cmp	r1, r3
 8007882:	d002      	beq.n	800788a <cleanup_stdio+0x1e>
 8007884:	4620      	mov	r0, r4
 8007886:	f003 f847 	bl	800a918 <_fflush_r>
 800788a:	68e1      	ldr	r1, [r4, #12]
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <cleanup_stdio+0x3c>)
 800788e:	4299      	cmp	r1, r3
 8007890:	d004      	beq.n	800789c <cleanup_stdio+0x30>
 8007892:	4620      	mov	r0, r4
 8007894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007898:	f003 b83e 	b.w	800a918 <_fflush_r>
 800789c:	bd10      	pop	{r4, pc}
 800789e:	bf00      	nop
 80078a0:	20000840 	.word	0x20000840
 80078a4:	200008a8 	.word	0x200008a8
 80078a8:	20000910 	.word	0x20000910

080078ac <global_stdio_init.part.0>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <global_stdio_init.part.0+0x30>)
 80078b0:	4c0b      	ldr	r4, [pc, #44]	; (80078e0 <global_stdio_init.part.0+0x34>)
 80078b2:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <global_stdio_init.part.0+0x38>)
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	4620      	mov	r0, r4
 80078b8:	2200      	movs	r2, #0
 80078ba:	2104      	movs	r1, #4
 80078bc:	f7ff ff94 	bl	80077e8 <std>
 80078c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078c4:	2201      	movs	r2, #1
 80078c6:	2109      	movs	r1, #9
 80078c8:	f7ff ff8e 	bl	80077e8 <std>
 80078cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078d0:	2202      	movs	r2, #2
 80078d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d6:	2112      	movs	r1, #18
 80078d8:	f7ff bf86 	b.w	80077e8 <std>
 80078dc:	20000978 	.word	0x20000978
 80078e0:	20000840 	.word	0x20000840
 80078e4:	08007855 	.word	0x08007855

080078e8 <__sfp_lock_acquire>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sfp_lock_acquire+0x8>)
 80078ea:	f000 ba2a 	b.w	8007d42 <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000981 	.word	0x20000981

080078f4 <__sfp_lock_release>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__sfp_lock_release+0x8>)
 80078f6:	f000 ba25 	b.w	8007d44 <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	20000981 	.word	0x20000981

08007900 <__sinit>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	f7ff fff0 	bl	80078e8 <__sfp_lock_acquire>
 8007908:	6a23      	ldr	r3, [r4, #32]
 800790a:	b11b      	cbz	r3, 8007914 <__sinit+0x14>
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f7ff bff0 	b.w	80078f4 <__sfp_lock_release>
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <__sinit+0x28>)
 8007916:	6223      	str	r3, [r4, #32]
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <__sinit+0x2c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f5      	bne.n	800790c <__sinit+0xc>
 8007920:	f7ff ffc4 	bl	80078ac <global_stdio_init.part.0>
 8007924:	e7f2      	b.n	800790c <__sinit+0xc>
 8007926:	bf00      	nop
 8007928:	0800786d 	.word	0x0800786d
 800792c:	20000978 	.word	0x20000978

08007930 <_fwalk_sglue>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4607      	mov	r7, r0
 8007936:	4688      	mov	r8, r1
 8007938:	4614      	mov	r4, r2
 800793a:	2600      	movs	r6, #0
 800793c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007940:	f1b9 0901 	subs.w	r9, r9, #1
 8007944:	d505      	bpl.n	8007952 <_fwalk_sglue+0x22>
 8007946:	6824      	ldr	r4, [r4, #0]
 8007948:	2c00      	cmp	r4, #0
 800794a:	d1f7      	bne.n	800793c <_fwalk_sglue+0xc>
 800794c:	4630      	mov	r0, r6
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d907      	bls.n	8007968 <_fwalk_sglue+0x38>
 8007958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795c:	3301      	adds	r3, #1
 800795e:	d003      	beq.n	8007968 <_fwalk_sglue+0x38>
 8007960:	4629      	mov	r1, r5
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	4306      	orrs	r6, r0
 8007968:	3568      	adds	r5, #104	; 0x68
 800796a:	e7e9      	b.n	8007940 <_fwalk_sglue+0x10>

0800796c <iprintf>:
 800796c:	b40f      	push	{r0, r1, r2, r3}
 800796e:	b507      	push	{r0, r1, r2, lr}
 8007970:	4906      	ldr	r1, [pc, #24]	; (800798c <iprintf+0x20>)
 8007972:	ab04      	add	r3, sp, #16
 8007974:	6808      	ldr	r0, [r1, #0]
 8007976:	f853 2b04 	ldr.w	r2, [r3], #4
 800797a:	6881      	ldr	r1, [r0, #8]
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	f002 fe2b 	bl	800a5d8 <_vfiprintf_r>
 8007982:	b003      	add	sp, #12
 8007984:	f85d eb04 	ldr.w	lr, [sp], #4
 8007988:	b004      	add	sp, #16
 800798a:	4770      	bx	lr
 800798c:	2000006c 	.word	0x2000006c

08007990 <putchar>:
 8007990:	4b02      	ldr	r3, [pc, #8]	; (800799c <putchar+0xc>)
 8007992:	4601      	mov	r1, r0
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	6882      	ldr	r2, [r0, #8]
 8007998:	f003 b848 	b.w	800aa2c <_putc_r>
 800799c:	2000006c 	.word	0x2000006c

080079a0 <_puts_r>:
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b570      	push	{r4, r5, r6, lr}
 80079a4:	6884      	ldr	r4, [r0, #8]
 80079a6:	4605      	mov	r5, r0
 80079a8:	460e      	mov	r6, r1
 80079aa:	b90b      	cbnz	r3, 80079b0 <_puts_r+0x10>
 80079ac:	f7ff ffa8 	bl	8007900 <__sinit>
 80079b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079b2:	07db      	lsls	r3, r3, #31
 80079b4:	d405      	bmi.n	80079c2 <_puts_r+0x22>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	0598      	lsls	r0, r3, #22
 80079ba:	d402      	bmi.n	80079c2 <_puts_r+0x22>
 80079bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079be:	f000 f9c0 	bl	8007d42 <__retarget_lock_acquire_recursive>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	0719      	lsls	r1, r3, #28
 80079c6:	d513      	bpl.n	80079f0 <_puts_r+0x50>
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	b18b      	cbz	r3, 80079f0 <_puts_r+0x50>
 80079cc:	3e01      	subs	r6, #1
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079d4:	3b01      	subs	r3, #1
 80079d6:	60a3      	str	r3, [r4, #8]
 80079d8:	b9e9      	cbnz	r1, 8007a16 <_puts_r+0x76>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da2e      	bge.n	8007a3c <_puts_r+0x9c>
 80079de:	4622      	mov	r2, r4
 80079e0:	210a      	movs	r1, #10
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 f89b 	bl	8007b1e <__swbuf_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d007      	beq.n	80079fc <_puts_r+0x5c>
 80079ec:	250a      	movs	r5, #10
 80079ee:	e007      	b.n	8007a00 <_puts_r+0x60>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f8d0 	bl	8007b98 <__swsetup_r>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d0e7      	beq.n	80079cc <_puts_r+0x2c>
 80079fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a02:	07da      	lsls	r2, r3, #31
 8007a04:	d405      	bmi.n	8007a12 <_puts_r+0x72>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	059b      	lsls	r3, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_puts_r+0x72>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0e:	f000 f999 	bl	8007d44 <__retarget_lock_release_recursive>
 8007a12:	4628      	mov	r0, r5
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da04      	bge.n	8007a24 <_puts_r+0x84>
 8007a1a:	69a2      	ldr	r2, [r4, #24]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	dc06      	bgt.n	8007a2e <_puts_r+0x8e>
 8007a20:	290a      	cmp	r1, #10
 8007a22:	d004      	beq.n	8007a2e <_puts_r+0x8e>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	7019      	strb	r1, [r3, #0]
 8007a2c:	e7cf      	b.n	80079ce <_puts_r+0x2e>
 8007a2e:	4622      	mov	r2, r4
 8007a30:	4628      	mov	r0, r5
 8007a32:	f000 f874 	bl	8007b1e <__swbuf_r>
 8007a36:	3001      	adds	r0, #1
 8007a38:	d1c9      	bne.n	80079ce <_puts_r+0x2e>
 8007a3a:	e7df      	b.n	80079fc <_puts_r+0x5c>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	250a      	movs	r5, #10
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	701d      	strb	r5, [r3, #0]
 8007a46:	e7db      	b.n	8007a00 <_puts_r+0x60>

08007a48 <puts>:
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <puts+0xc>)
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	f7ff bfa7 	b.w	80079a0 <_puts_r>
 8007a52:	bf00      	nop
 8007a54:	2000006c 	.word	0x2000006c

08007a58 <siprintf>:
 8007a58:	b40e      	push	{r1, r2, r3}
 8007a5a:	b500      	push	{lr}
 8007a5c:	b09c      	sub	sp, #112	; 0x70
 8007a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a60:	9002      	str	r0, [sp, #8]
 8007a62:	9006      	str	r0, [sp, #24]
 8007a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a68:	4809      	ldr	r0, [pc, #36]	; (8007a90 <siprintf+0x38>)
 8007a6a:	9107      	str	r1, [sp, #28]
 8007a6c:	9104      	str	r1, [sp, #16]
 8007a6e:	4909      	ldr	r1, [pc, #36]	; (8007a94 <siprintf+0x3c>)
 8007a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a74:	9105      	str	r1, [sp, #20]
 8007a76:	6800      	ldr	r0, [r0, #0]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	a902      	add	r1, sp, #8
 8007a7c:	f002 fc84 	bl	800a388 <_svfiprintf_r>
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	2200      	movs	r2, #0
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	b01c      	add	sp, #112	; 0x70
 8007a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a8c:	b003      	add	sp, #12
 8007a8e:	4770      	bx	lr
 8007a90:	2000006c 	.word	0x2000006c
 8007a94:	ffff0208 	.word	0xffff0208

08007a98 <__sread>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa0:	f000 f900 	bl	8007ca4 <_read_r>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	bfab      	itete	ge
 8007aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8007aac:	181b      	addge	r3, r3, r0
 8007aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ab2:	bfac      	ite	ge
 8007ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ab6:	81a3      	strhlt	r3, [r4, #12]
 8007ab8:	bd10      	pop	{r4, pc}

08007aba <__swrite>:
 8007aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007abe:	461f      	mov	r7, r3
 8007ac0:	898b      	ldrh	r3, [r1, #12]
 8007ac2:	05db      	lsls	r3, r3, #23
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	4616      	mov	r6, r2
 8007aca:	d505      	bpl.n	8007ad8 <__swrite+0x1e>
 8007acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f000 f8d4 	bl	8007c80 <_lseek_r>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	4628      	mov	r0, r5
 8007aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aee:	f000 b8eb 	b.w	8007cc8 <_write_r>

08007af2 <__sseek>:
 8007af2:	b510      	push	{r4, lr}
 8007af4:	460c      	mov	r4, r1
 8007af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afa:	f000 f8c1 	bl	8007c80 <_lseek_r>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	bf15      	itete	ne
 8007b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b0e:	81a3      	strheq	r3, [r4, #12]
 8007b10:	bf18      	it	ne
 8007b12:	81a3      	strhne	r3, [r4, #12]
 8007b14:	bd10      	pop	{r4, pc}

08007b16 <__sclose>:
 8007b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1a:	f000 b8a1 	b.w	8007c60 <_close_r>

08007b1e <__swbuf_r>:
 8007b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b20:	460e      	mov	r6, r1
 8007b22:	4614      	mov	r4, r2
 8007b24:	4605      	mov	r5, r0
 8007b26:	b118      	cbz	r0, 8007b30 <__swbuf_r+0x12>
 8007b28:	6a03      	ldr	r3, [r0, #32]
 8007b2a:	b90b      	cbnz	r3, 8007b30 <__swbuf_r+0x12>
 8007b2c:	f7ff fee8 	bl	8007900 <__sinit>
 8007b30:	69a3      	ldr	r3, [r4, #24]
 8007b32:	60a3      	str	r3, [r4, #8]
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	071a      	lsls	r2, r3, #28
 8007b38:	d525      	bpl.n	8007b86 <__swbuf_r+0x68>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	b31b      	cbz	r3, 8007b86 <__swbuf_r+0x68>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	6922      	ldr	r2, [r4, #16]
 8007b42:	1a98      	subs	r0, r3, r2
 8007b44:	6963      	ldr	r3, [r4, #20]
 8007b46:	b2f6      	uxtb	r6, r6
 8007b48:	4283      	cmp	r3, r0
 8007b4a:	4637      	mov	r7, r6
 8007b4c:	dc04      	bgt.n	8007b58 <__swbuf_r+0x3a>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4628      	mov	r0, r5
 8007b52:	f002 fee1 	bl	800a918 <_fflush_r>
 8007b56:	b9e0      	cbnz	r0, 8007b92 <__swbuf_r+0x74>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	60a3      	str	r3, [r4, #8]
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	701e      	strb	r6, [r3, #0]
 8007b66:	6962      	ldr	r2, [r4, #20]
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d004      	beq.n	8007b78 <__swbuf_r+0x5a>
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	07db      	lsls	r3, r3, #31
 8007b72:	d506      	bpl.n	8007b82 <__swbuf_r+0x64>
 8007b74:	2e0a      	cmp	r6, #10
 8007b76:	d104      	bne.n	8007b82 <__swbuf_r+0x64>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f002 fecc 	bl	800a918 <_fflush_r>
 8007b80:	b938      	cbnz	r0, 8007b92 <__swbuf_r+0x74>
 8007b82:	4638      	mov	r0, r7
 8007b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 f805 	bl	8007b98 <__swsetup_r>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0d5      	beq.n	8007b3e <__swbuf_r+0x20>
 8007b92:	f04f 37ff 	mov.w	r7, #4294967295
 8007b96:	e7f4      	b.n	8007b82 <__swbuf_r+0x64>

08007b98 <__swsetup_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <__swsetup_r+0xac>)
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	b118      	cbz	r0, 8007bac <__swsetup_r+0x14>
 8007ba4:	6a03      	ldr	r3, [r0, #32]
 8007ba6:	b90b      	cbnz	r3, 8007bac <__swsetup_r+0x14>
 8007ba8:	f7ff feaa 	bl	8007900 <__sinit>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb2:	0718      	lsls	r0, r3, #28
 8007bb4:	d422      	bmi.n	8007bfc <__swsetup_r+0x64>
 8007bb6:	06d9      	lsls	r1, r3, #27
 8007bb8:	d407      	bmi.n	8007bca <__swsetup_r+0x32>
 8007bba:	2309      	movs	r3, #9
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e034      	b.n	8007c34 <__swsetup_r+0x9c>
 8007bca:	0758      	lsls	r0, r3, #29
 8007bcc:	d512      	bpl.n	8007bf4 <__swsetup_r+0x5c>
 8007bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd0:	b141      	cbz	r1, 8007be4 <__swsetup_r+0x4c>
 8007bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d002      	beq.n	8007be0 <__swsetup_r+0x48>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 ff36 	bl	8008a4c <_free_r>
 8007be0:	2300      	movs	r3, #0
 8007be2:	6363      	str	r3, [r4, #52]	; 0x34
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	2300      	movs	r3, #0
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f043 0308 	orr.w	r3, r3, #8
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	b94b      	cbnz	r3, 8007c14 <__swsetup_r+0x7c>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0a:	d003      	beq.n	8007c14 <__swsetup_r+0x7c>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f002 fed0 	bl	800a9b4 <__smakebuf_r>
 8007c14:	89a0      	ldrh	r0, [r4, #12]
 8007c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c1a:	f010 0301 	ands.w	r3, r0, #1
 8007c1e:	d00a      	beq.n	8007c36 <__swsetup_r+0x9e>
 8007c20:	2300      	movs	r3, #0
 8007c22:	60a3      	str	r3, [r4, #8]
 8007c24:	6963      	ldr	r3, [r4, #20]
 8007c26:	425b      	negs	r3, r3
 8007c28:	61a3      	str	r3, [r4, #24]
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	b943      	cbnz	r3, 8007c40 <__swsetup_r+0xa8>
 8007c2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c32:	d1c4      	bne.n	8007bbe <__swsetup_r+0x26>
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	0781      	lsls	r1, r0, #30
 8007c38:	bf58      	it	pl
 8007c3a:	6963      	ldrpl	r3, [r4, #20]
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	e7f4      	b.n	8007c2a <__swsetup_r+0x92>
 8007c40:	2000      	movs	r0, #0
 8007c42:	e7f7      	b.n	8007c34 <__swsetup_r+0x9c>
 8007c44:	2000006c 	.word	0x2000006c

08007c48 <memset>:
 8007c48:	4402      	add	r2, r0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d100      	bne.n	8007c52 <memset+0xa>
 8007c50:	4770      	bx	lr
 8007c52:	f803 1b01 	strb.w	r1, [r3], #1
 8007c56:	e7f9      	b.n	8007c4c <memset+0x4>

08007c58 <_localeconv_r>:
 8007c58:	4800      	ldr	r0, [pc, #0]	; (8007c5c <_localeconv_r+0x4>)
 8007c5a:	4770      	bx	lr
 8007c5c:	20000160 	.word	0x20000160

08007c60 <_close_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d06      	ldr	r5, [pc, #24]	; (8007c7c <_close_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7fb f803 	bl	8002c76 <_close>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_close_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_close_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	2000097c 	.word	0x2000097c

08007c80 <_lseek_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_lseek_r+0x20>)
 8007c84:	4604      	mov	r4, r0
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7fb f818 	bl	8002cc4 <_lseek>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_lseek_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_lseek_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	2000097c 	.word	0x2000097c

08007ca4 <_read_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d07      	ldr	r5, [pc, #28]	; (8007cc4 <_read_r+0x20>)
 8007ca8:	4604      	mov	r4, r0
 8007caa:	4608      	mov	r0, r1
 8007cac:	4611      	mov	r1, r2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7fa ffa6 	bl	8002c04 <_read>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_read_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_read_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	2000097c 	.word	0x2000097c

08007cc8 <_write_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_write_r+0x20>)
 8007ccc:	4604      	mov	r4, r0
 8007cce:	4608      	mov	r0, r1
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7fa ffb1 	bl	8002c3e <_write>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_write_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_write_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	2000097c 	.word	0x2000097c

08007cec <__errno>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <__errno+0x8>)
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	2000006c 	.word	0x2000006c

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4d0d      	ldr	r5, [pc, #52]	; (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	; (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1b64      	subs	r4, r4, r5
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2600      	movs	r6, #0
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4d0b      	ldr	r5, [pc, #44]	; (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	; (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f005 fd5c 	bl	800d7c8 <_init>
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2600      	movs	r6, #0
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	0800eec0 	.word	0x0800eec0
 8007d34:	0800eec0 	.word	0x0800eec0
 8007d38:	0800eec0 	.word	0x0800eec0
 8007d3c:	0800eec4 	.word	0x0800eec4

08007d40 <__retarget_lock_init_recursive>:
 8007d40:	4770      	bx	lr

08007d42 <__retarget_lock_acquire_recursive>:
 8007d42:	4770      	bx	lr

08007d44 <__retarget_lock_release_recursive>:
 8007d44:	4770      	bx	lr
	...

08007d48 <nanf>:
 8007d48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d50 <nanf+0x8>
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	7fc00000 	.word	0x7fc00000

08007d54 <quorem>:
 8007d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	6903      	ldr	r3, [r0, #16]
 8007d5a:	690c      	ldr	r4, [r1, #16]
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	4607      	mov	r7, r0
 8007d60:	db7e      	blt.n	8007e60 <quorem+0x10c>
 8007d62:	3c01      	subs	r4, #1
 8007d64:	f101 0814 	add.w	r8, r1, #20
 8007d68:	f100 0514 	add.w	r5, r0, #20
 8007d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d86:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d8a:	d331      	bcc.n	8007df0 <quorem+0x9c>
 8007d8c:	f04f 0e00 	mov.w	lr, #0
 8007d90:	4640      	mov	r0, r8
 8007d92:	46ac      	mov	ip, r5
 8007d94:	46f2      	mov	sl, lr
 8007d96:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d9a:	b293      	uxth	r3, r2
 8007d9c:	fb06 e303 	mla	r3, r6, r3, lr
 8007da0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007da4:	0c1a      	lsrs	r2, r3, #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ebaa 0303 	sub.w	r3, sl, r3
 8007dac:	f8dc a000 	ldr.w	sl, [ip]
 8007db0:	fa13 f38a 	uxtah	r3, r3, sl
 8007db4:	fb06 220e 	mla	r2, r6, lr, r2
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dc0:	b292      	uxth	r2, r2
 8007dc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dca:	f8bd 3000 	ldrh.w	r3, [sp]
 8007dce:	4581      	cmp	r9, r0
 8007dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd4:	f84c 3b04 	str.w	r3, [ip], #4
 8007dd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ddc:	d2db      	bcs.n	8007d96 <quorem+0x42>
 8007dde:	f855 300b 	ldr.w	r3, [r5, fp]
 8007de2:	b92b      	cbnz	r3, 8007df0 <quorem+0x9c>
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	3b04      	subs	r3, #4
 8007de8:	429d      	cmp	r5, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	d32c      	bcc.n	8007e48 <quorem+0xf4>
 8007dee:	613c      	str	r4, [r7, #16]
 8007df0:	4638      	mov	r0, r7
 8007df2:	f001 f9f1 	bl	80091d8 <__mcmp>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	db22      	blt.n	8007e40 <quorem+0xec>
 8007dfa:	3601      	adds	r6, #1
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e04:	f8d1 c000 	ldr.w	ip, [r1]
 8007e08:	b293      	uxth	r3, r2
 8007e0a:	1ac3      	subs	r3, r0, r3
 8007e0c:	0c12      	lsrs	r2, r2, #16
 8007e0e:	fa13 f38c 	uxtah	r3, r3, ip
 8007e12:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007e16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e20:	45c1      	cmp	r9, r8
 8007e22:	f841 3b04 	str.w	r3, [r1], #4
 8007e26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e2a:	d2e9      	bcs.n	8007e00 <quorem+0xac>
 8007e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e34:	b922      	cbnz	r2, 8007e40 <quorem+0xec>
 8007e36:	3b04      	subs	r3, #4
 8007e38:	429d      	cmp	r5, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	d30a      	bcc.n	8007e54 <quorem+0x100>
 8007e3e:	613c      	str	r4, [r7, #16]
 8007e40:	4630      	mov	r0, r6
 8007e42:	b003      	add	sp, #12
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	d1ce      	bne.n	8007dee <quorem+0x9a>
 8007e50:	3c01      	subs	r4, #1
 8007e52:	e7c9      	b.n	8007de8 <quorem+0x94>
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	3b04      	subs	r3, #4
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	d1f0      	bne.n	8007e3e <quorem+0xea>
 8007e5c:	3c01      	subs	r4, #1
 8007e5e:	e7eb      	b.n	8007e38 <quorem+0xe4>
 8007e60:	2000      	movs	r0, #0
 8007e62:	e7ee      	b.n	8007e42 <quorem+0xee>
 8007e64:	0000      	movs	r0, r0
	...

08007e68 <_dtoa_r>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	ed2d 8b04 	vpush	{d8-d9}
 8007e70:	69c5      	ldr	r5, [r0, #28]
 8007e72:	b093      	sub	sp, #76	; 0x4c
 8007e74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e78:	ec57 6b10 	vmov	r6, r7, d0
 8007e7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e80:	9107      	str	r1, [sp, #28]
 8007e82:	4604      	mov	r4, r0
 8007e84:	920a      	str	r2, [sp, #40]	; 0x28
 8007e86:	930d      	str	r3, [sp, #52]	; 0x34
 8007e88:	b975      	cbnz	r5, 8007ea8 <_dtoa_r+0x40>
 8007e8a:	2010      	movs	r0, #16
 8007e8c:	f000 fe2a 	bl	8008ae4 <malloc>
 8007e90:	4602      	mov	r2, r0
 8007e92:	61e0      	str	r0, [r4, #28]
 8007e94:	b920      	cbnz	r0, 8007ea0 <_dtoa_r+0x38>
 8007e96:	4bae      	ldr	r3, [pc, #696]	; (8008150 <_dtoa_r+0x2e8>)
 8007e98:	21ef      	movs	r1, #239	; 0xef
 8007e9a:	48ae      	ldr	r0, [pc, #696]	; (8008154 <_dtoa_r+0x2ec>)
 8007e9c:	f002 fe70 	bl	800ab80 <__assert_func>
 8007ea0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ea4:	6005      	str	r5, [r0, #0]
 8007ea6:	60c5      	str	r5, [r0, #12]
 8007ea8:	69e3      	ldr	r3, [r4, #28]
 8007eaa:	6819      	ldr	r1, [r3, #0]
 8007eac:	b151      	cbz	r1, 8007ec4 <_dtoa_r+0x5c>
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	604a      	str	r2, [r1, #4]
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4093      	lsls	r3, r2
 8007eb6:	608b      	str	r3, [r1, #8]
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 ff07 	bl	8008ccc <_Bfree>
 8007ebe:	69e3      	ldr	r3, [r4, #28]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	1e3b      	subs	r3, r7, #0
 8007ec6:	bfbb      	ittet	lt
 8007ec8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ecc:	9303      	strlt	r3, [sp, #12]
 8007ece:	2300      	movge	r3, #0
 8007ed0:	2201      	movlt	r2, #1
 8007ed2:	bfac      	ite	ge
 8007ed4:	f8c8 3000 	strge.w	r3, [r8]
 8007ed8:	f8c8 2000 	strlt.w	r2, [r8]
 8007edc:	4b9e      	ldr	r3, [pc, #632]	; (8008158 <_dtoa_r+0x2f0>)
 8007ede:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ee2:	ea33 0308 	bics.w	r3, r3, r8
 8007ee6:	d11b      	bne.n	8007f20 <_dtoa_r+0xb8>
 8007ee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eea:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ef4:	4333      	orrs	r3, r6
 8007ef6:	f000 8593 	beq.w	8008a20 <_dtoa_r+0xbb8>
 8007efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007efc:	b963      	cbnz	r3, 8007f18 <_dtoa_r+0xb0>
 8007efe:	4b97      	ldr	r3, [pc, #604]	; (800815c <_dtoa_r+0x2f4>)
 8007f00:	e027      	b.n	8007f52 <_dtoa_r+0xea>
 8007f02:	4b97      	ldr	r3, [pc, #604]	; (8008160 <_dtoa_r+0x2f8>)
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	9800      	ldr	r0, [sp, #0]
 8007f0e:	b013      	add	sp, #76	; 0x4c
 8007f10:	ecbd 8b04 	vpop	{d8-d9}
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	4b90      	ldr	r3, [pc, #576]	; (800815c <_dtoa_r+0x2f4>)
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	3303      	adds	r3, #3
 8007f1e:	e7f3      	b.n	8007f08 <_dtoa_r+0xa0>
 8007f20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f24:	2200      	movs	r2, #0
 8007f26:	ec51 0b17 	vmov	r0, r1, d7
 8007f2a:	eeb0 8a47 	vmov.f32	s16, s14
 8007f2e:	eef0 8a67 	vmov.f32	s17, s15
 8007f32:	2300      	movs	r3, #0
 8007f34:	f7f8 fdf0 	bl	8000b18 <__aeabi_dcmpeq>
 8007f38:	4681      	mov	r9, r0
 8007f3a:	b160      	cbz	r0, 8007f56 <_dtoa_r+0xee>
 8007f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f3e:	2301      	movs	r3, #1
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8568 	beq.w	8008a1a <_dtoa_r+0xbb2>
 8007f4a:	4b86      	ldr	r3, [pc, #536]	; (8008164 <_dtoa_r+0x2fc>)
 8007f4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	e7da      	b.n	8007f0c <_dtoa_r+0xa4>
 8007f56:	aa10      	add	r2, sp, #64	; 0x40
 8007f58:	a911      	add	r1, sp, #68	; 0x44
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f60:	eef0 0a68 	vmov.f32	s1, s17
 8007f64:	f001 fa4e 	bl	8009404 <__d2b>
 8007f68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	2d00      	cmp	r5, #0
 8007f70:	d07f      	beq.n	8008072 <_dtoa_r+0x20a>
 8007f72:	ee18 3a90 	vmov	r3, s17
 8007f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f7e:	ec51 0b18 	vmov	r0, r1, d8
 8007f82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f8e:	4619      	mov	r1, r3
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b75      	ldr	r3, [pc, #468]	; (8008168 <_dtoa_r+0x300>)
 8007f94:	f7f8 f9a0 	bl	80002d8 <__aeabi_dsub>
 8007f98:	a367      	add	r3, pc, #412	; (adr r3, 8008138 <_dtoa_r+0x2d0>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 fb53 	bl	8000648 <__aeabi_dmul>
 8007fa2:	a367      	add	r3, pc, #412	; (adr r3, 8008140 <_dtoa_r+0x2d8>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f998 	bl	80002dc <__adddf3>
 8007fac:	4606      	mov	r6, r0
 8007fae:	4628      	mov	r0, r5
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	f7f8 fadf 	bl	8000574 <__aeabi_i2d>
 8007fb6:	a364      	add	r3, pc, #400	; (adr r3, 8008148 <_dtoa_r+0x2e0>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 fb44 	bl	8000648 <__aeabi_dmul>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	f7f8 f988 	bl	80002dc <__adddf3>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	460f      	mov	r7, r1
 8007fd0:	f7f8 fdea 	bl	8000ba8 <__aeabi_d2iz>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4683      	mov	fp, r0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	f7f8 fda5 	bl	8000b2c <__aeabi_dcmplt>
 8007fe2:	b148      	cbz	r0, 8007ff8 <_dtoa_r+0x190>
 8007fe4:	4658      	mov	r0, fp
 8007fe6:	f7f8 fac5 	bl	8000574 <__aeabi_i2d>
 8007fea:	4632      	mov	r2, r6
 8007fec:	463b      	mov	r3, r7
 8007fee:	f7f8 fd93 	bl	8000b18 <__aeabi_dcmpeq>
 8007ff2:	b908      	cbnz	r0, 8007ff8 <_dtoa_r+0x190>
 8007ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ff8:	f1bb 0f16 	cmp.w	fp, #22
 8007ffc:	d857      	bhi.n	80080ae <_dtoa_r+0x246>
 8007ffe:	4b5b      	ldr	r3, [pc, #364]	; (800816c <_dtoa_r+0x304>)
 8008000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	ec51 0b18 	vmov	r0, r1, d8
 800800c:	f7f8 fd8e 	bl	8000b2c <__aeabi_dcmplt>
 8008010:	2800      	cmp	r0, #0
 8008012:	d04e      	beq.n	80080b2 <_dtoa_r+0x24a>
 8008014:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008018:	2300      	movs	r3, #0
 800801a:	930c      	str	r3, [sp, #48]	; 0x30
 800801c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800801e:	1b5b      	subs	r3, r3, r5
 8008020:	1e5a      	subs	r2, r3, #1
 8008022:	bf45      	ittet	mi
 8008024:	f1c3 0301 	rsbmi	r3, r3, #1
 8008028:	9305      	strmi	r3, [sp, #20]
 800802a:	2300      	movpl	r3, #0
 800802c:	2300      	movmi	r3, #0
 800802e:	9206      	str	r2, [sp, #24]
 8008030:	bf54      	ite	pl
 8008032:	9305      	strpl	r3, [sp, #20]
 8008034:	9306      	strmi	r3, [sp, #24]
 8008036:	f1bb 0f00 	cmp.w	fp, #0
 800803a:	db3c      	blt.n	80080b6 <_dtoa_r+0x24e>
 800803c:	9b06      	ldr	r3, [sp, #24]
 800803e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008042:	445b      	add	r3, fp
 8008044:	9306      	str	r3, [sp, #24]
 8008046:	2300      	movs	r3, #0
 8008048:	9308      	str	r3, [sp, #32]
 800804a:	9b07      	ldr	r3, [sp, #28]
 800804c:	2b09      	cmp	r3, #9
 800804e:	d868      	bhi.n	8008122 <_dtoa_r+0x2ba>
 8008050:	2b05      	cmp	r3, #5
 8008052:	bfc4      	itt	gt
 8008054:	3b04      	subgt	r3, #4
 8008056:	9307      	strgt	r3, [sp, #28]
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	f1a3 0302 	sub.w	r3, r3, #2
 800805e:	bfcc      	ite	gt
 8008060:	2500      	movgt	r5, #0
 8008062:	2501      	movle	r5, #1
 8008064:	2b03      	cmp	r3, #3
 8008066:	f200 8085 	bhi.w	8008174 <_dtoa_r+0x30c>
 800806a:	e8df f003 	tbb	[pc, r3]
 800806e:	3b2e      	.short	0x3b2e
 8008070:	5839      	.short	0x5839
 8008072:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008076:	441d      	add	r5, r3
 8008078:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800807c:	2b20      	cmp	r3, #32
 800807e:	bfc1      	itttt	gt
 8008080:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008084:	fa08 f803 	lslgt.w	r8, r8, r3
 8008088:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800808c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008090:	bfd6      	itet	le
 8008092:	f1c3 0320 	rsble	r3, r3, #32
 8008096:	ea48 0003 	orrgt.w	r0, r8, r3
 800809a:	fa06 f003 	lslle.w	r0, r6, r3
 800809e:	f7f8 fa59 	bl	8000554 <__aeabi_ui2d>
 80080a2:	2201      	movs	r2, #1
 80080a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80080a8:	3d01      	subs	r5, #1
 80080aa:	920e      	str	r2, [sp, #56]	; 0x38
 80080ac:	e76f      	b.n	8007f8e <_dtoa_r+0x126>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7b3      	b.n	800801a <_dtoa_r+0x1b2>
 80080b2:	900c      	str	r0, [sp, #48]	; 0x30
 80080b4:	e7b2      	b.n	800801c <_dtoa_r+0x1b4>
 80080b6:	9b05      	ldr	r3, [sp, #20]
 80080b8:	eba3 030b 	sub.w	r3, r3, fp
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	f1cb 0300 	rsb	r3, fp, #0
 80080c2:	9308      	str	r3, [sp, #32]
 80080c4:	2300      	movs	r3, #0
 80080c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080c8:	e7bf      	b.n	800804a <_dtoa_r+0x1e2>
 80080ca:	2300      	movs	r3, #0
 80080cc:	9309      	str	r3, [sp, #36]	; 0x24
 80080ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dc52      	bgt.n	800817a <_dtoa_r+0x312>
 80080d4:	2301      	movs	r3, #1
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	461a      	mov	r2, r3
 80080dc:	920a      	str	r2, [sp, #40]	; 0x28
 80080de:	e00b      	b.n	80080f8 <_dtoa_r+0x290>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e7f3      	b.n	80080cc <_dtoa_r+0x264>
 80080e4:	2300      	movs	r3, #0
 80080e6:	9309      	str	r3, [sp, #36]	; 0x24
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	445b      	add	r3, fp
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	3301      	adds	r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	bfb8      	it	lt
 80080f6:	2301      	movlt	r3, #1
 80080f8:	69e0      	ldr	r0, [r4, #28]
 80080fa:	2100      	movs	r1, #0
 80080fc:	2204      	movs	r2, #4
 80080fe:	f102 0614 	add.w	r6, r2, #20
 8008102:	429e      	cmp	r6, r3
 8008104:	d93d      	bls.n	8008182 <_dtoa_r+0x31a>
 8008106:	6041      	str	r1, [r0, #4]
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fd9f 	bl	8008c4c <_Balloc>
 800810e:	9000      	str	r0, [sp, #0]
 8008110:	2800      	cmp	r0, #0
 8008112:	d139      	bne.n	8008188 <_dtoa_r+0x320>
 8008114:	4b16      	ldr	r3, [pc, #88]	; (8008170 <_dtoa_r+0x308>)
 8008116:	4602      	mov	r2, r0
 8008118:	f240 11af 	movw	r1, #431	; 0x1af
 800811c:	e6bd      	b.n	8007e9a <_dtoa_r+0x32>
 800811e:	2301      	movs	r3, #1
 8008120:	e7e1      	b.n	80080e6 <_dtoa_r+0x27e>
 8008122:	2501      	movs	r5, #1
 8008124:	2300      	movs	r3, #0
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	9509      	str	r5, [sp, #36]	; 0x24
 800812a:	f04f 33ff 	mov.w	r3, #4294967295
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	2200      	movs	r2, #0
 8008134:	2312      	movs	r3, #18
 8008136:	e7d1      	b.n	80080dc <_dtoa_r+0x274>
 8008138:	636f4361 	.word	0x636f4361
 800813c:	3fd287a7 	.word	0x3fd287a7
 8008140:	8b60c8b3 	.word	0x8b60c8b3
 8008144:	3fc68a28 	.word	0x3fc68a28
 8008148:	509f79fb 	.word	0x509f79fb
 800814c:	3fd34413 	.word	0x3fd34413
 8008150:	0800e85e 	.word	0x0800e85e
 8008154:	0800e875 	.word	0x0800e875
 8008158:	7ff00000 	.word	0x7ff00000
 800815c:	0800e85a 	.word	0x0800e85a
 8008160:	0800e851 	.word	0x0800e851
 8008164:	0800e829 	.word	0x0800e829
 8008168:	3ff80000 	.word	0x3ff80000
 800816c:	0800e960 	.word	0x0800e960
 8008170:	0800e8cd 	.word	0x0800e8cd
 8008174:	2301      	movs	r3, #1
 8008176:	9309      	str	r3, [sp, #36]	; 0x24
 8008178:	e7d7      	b.n	800812a <_dtoa_r+0x2c2>
 800817a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	e7ba      	b.n	80080f8 <_dtoa_r+0x290>
 8008182:	3101      	adds	r1, #1
 8008184:	0052      	lsls	r2, r2, #1
 8008186:	e7ba      	b.n	80080fe <_dtoa_r+0x296>
 8008188:	69e3      	ldr	r3, [r4, #28]
 800818a:	9a00      	ldr	r2, [sp, #0]
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	2b0e      	cmp	r3, #14
 8008192:	f200 80a8 	bhi.w	80082e6 <_dtoa_r+0x47e>
 8008196:	2d00      	cmp	r5, #0
 8008198:	f000 80a5 	beq.w	80082e6 <_dtoa_r+0x47e>
 800819c:	f1bb 0f00 	cmp.w	fp, #0
 80081a0:	dd38      	ble.n	8008214 <_dtoa_r+0x3ac>
 80081a2:	4bc0      	ldr	r3, [pc, #768]	; (80084a4 <_dtoa_r+0x63c>)
 80081a4:	f00b 020f 	and.w	r2, fp, #15
 80081a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80081b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80081b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80081b8:	d019      	beq.n	80081ee <_dtoa_r+0x386>
 80081ba:	4bbb      	ldr	r3, [pc, #748]	; (80084a8 <_dtoa_r+0x640>)
 80081bc:	ec51 0b18 	vmov	r0, r1, d8
 80081c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081c4:	f7f8 fb6a 	bl	800089c <__aeabi_ddiv>
 80081c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081cc:	f008 080f 	and.w	r8, r8, #15
 80081d0:	2503      	movs	r5, #3
 80081d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80084a8 <_dtoa_r+0x640>
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	d10a      	bne.n	80081f2 <_dtoa_r+0x38a>
 80081dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e0:	4632      	mov	r2, r6
 80081e2:	463b      	mov	r3, r7
 80081e4:	f7f8 fb5a 	bl	800089c <__aeabi_ddiv>
 80081e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ec:	e02b      	b.n	8008246 <_dtoa_r+0x3de>
 80081ee:	2502      	movs	r5, #2
 80081f0:	e7ef      	b.n	80081d2 <_dtoa_r+0x36a>
 80081f2:	f018 0f01 	tst.w	r8, #1
 80081f6:	d008      	beq.n	800820a <_dtoa_r+0x3a2>
 80081f8:	4630      	mov	r0, r6
 80081fa:	4639      	mov	r1, r7
 80081fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008200:	f7f8 fa22 	bl	8000648 <__aeabi_dmul>
 8008204:	3501      	adds	r5, #1
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800820e:	f109 0908 	add.w	r9, r9, #8
 8008212:	e7e0      	b.n	80081d6 <_dtoa_r+0x36e>
 8008214:	f000 809f 	beq.w	8008356 <_dtoa_r+0x4ee>
 8008218:	f1cb 0600 	rsb	r6, fp, #0
 800821c:	4ba1      	ldr	r3, [pc, #644]	; (80084a4 <_dtoa_r+0x63c>)
 800821e:	4fa2      	ldr	r7, [pc, #648]	; (80084a8 <_dtoa_r+0x640>)
 8008220:	f006 020f 	and.w	r2, r6, #15
 8008224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	ec51 0b18 	vmov	r0, r1, d8
 8008230:	f7f8 fa0a 	bl	8000648 <__aeabi_dmul>
 8008234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008238:	1136      	asrs	r6, r6, #4
 800823a:	2300      	movs	r3, #0
 800823c:	2502      	movs	r5, #2
 800823e:	2e00      	cmp	r6, #0
 8008240:	d17e      	bne.n	8008340 <_dtoa_r+0x4d8>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1d0      	bne.n	80081e8 <_dtoa_r+0x380>
 8008246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008248:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8084 	beq.w	800835a <_dtoa_r+0x4f2>
 8008252:	4b96      	ldr	r3, [pc, #600]	; (80084ac <_dtoa_r+0x644>)
 8008254:	2200      	movs	r2, #0
 8008256:	4640      	mov	r0, r8
 8008258:	4649      	mov	r1, r9
 800825a:	f7f8 fc67 	bl	8000b2c <__aeabi_dcmplt>
 800825e:	2800      	cmp	r0, #0
 8008260:	d07b      	beq.n	800835a <_dtoa_r+0x4f2>
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d078      	beq.n	800835a <_dtoa_r+0x4f2>
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	dd39      	ble.n	80082e2 <_dtoa_r+0x47a>
 800826e:	4b90      	ldr	r3, [pc, #576]	; (80084b0 <_dtoa_r+0x648>)
 8008270:	2200      	movs	r2, #0
 8008272:	4640      	mov	r0, r8
 8008274:	4649      	mov	r1, r9
 8008276:	f7f8 f9e7 	bl	8000648 <__aeabi_dmul>
 800827a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800827e:	9e01      	ldr	r6, [sp, #4]
 8008280:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008284:	3501      	adds	r5, #1
 8008286:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800828a:	4628      	mov	r0, r5
 800828c:	f7f8 f972 	bl	8000574 <__aeabi_i2d>
 8008290:	4642      	mov	r2, r8
 8008292:	464b      	mov	r3, r9
 8008294:	f7f8 f9d8 	bl	8000648 <__aeabi_dmul>
 8008298:	4b86      	ldr	r3, [pc, #536]	; (80084b4 <_dtoa_r+0x64c>)
 800829a:	2200      	movs	r2, #0
 800829c:	f7f8 f81e 	bl	80002dc <__adddf3>
 80082a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80082a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082a8:	9303      	str	r3, [sp, #12]
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	d158      	bne.n	8008360 <_dtoa_r+0x4f8>
 80082ae:	4b82      	ldr	r3, [pc, #520]	; (80084b8 <_dtoa_r+0x650>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f8 f80f 	bl	80002d8 <__aeabi_dsub>
 80082ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082be:	4680      	mov	r8, r0
 80082c0:	4689      	mov	r9, r1
 80082c2:	f7f8 fc51 	bl	8000b68 <__aeabi_dcmpgt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f040 8296 	bne.w	80087f8 <_dtoa_r+0x990>
 80082cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082d0:	4640      	mov	r0, r8
 80082d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082d6:	4649      	mov	r1, r9
 80082d8:	f7f8 fc28 	bl	8000b2c <__aeabi_dcmplt>
 80082dc:	2800      	cmp	r0, #0
 80082de:	f040 8289 	bne.w	80087f4 <_dtoa_r+0x98c>
 80082e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f2c0 814e 	blt.w	800858a <_dtoa_r+0x722>
 80082ee:	f1bb 0f0e 	cmp.w	fp, #14
 80082f2:	f300 814a 	bgt.w	800858a <_dtoa_r+0x722>
 80082f6:	4b6b      	ldr	r3, [pc, #428]	; (80084a4 <_dtoa_r+0x63c>)
 80082f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	f280 80dc 	bge.w	80084c0 <_dtoa_r+0x658>
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f300 80d8 	bgt.w	80084c0 <_dtoa_r+0x658>
 8008310:	f040 826f 	bne.w	80087f2 <_dtoa_r+0x98a>
 8008314:	4b68      	ldr	r3, [pc, #416]	; (80084b8 <_dtoa_r+0x650>)
 8008316:	2200      	movs	r2, #0
 8008318:	4640      	mov	r0, r8
 800831a:	4649      	mov	r1, r9
 800831c:	f7f8 f994 	bl	8000648 <__aeabi_dmul>
 8008320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008324:	f7f8 fc16 	bl	8000b54 <__aeabi_dcmpge>
 8008328:	9e04      	ldr	r6, [sp, #16]
 800832a:	4637      	mov	r7, r6
 800832c:	2800      	cmp	r0, #0
 800832e:	f040 8245 	bne.w	80087bc <_dtoa_r+0x954>
 8008332:	9d00      	ldr	r5, [sp, #0]
 8008334:	2331      	movs	r3, #49	; 0x31
 8008336:	f805 3b01 	strb.w	r3, [r5], #1
 800833a:	f10b 0b01 	add.w	fp, fp, #1
 800833e:	e241      	b.n	80087c4 <_dtoa_r+0x95c>
 8008340:	07f2      	lsls	r2, r6, #31
 8008342:	d505      	bpl.n	8008350 <_dtoa_r+0x4e8>
 8008344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008348:	f7f8 f97e 	bl	8000648 <__aeabi_dmul>
 800834c:	3501      	adds	r5, #1
 800834e:	2301      	movs	r3, #1
 8008350:	1076      	asrs	r6, r6, #1
 8008352:	3708      	adds	r7, #8
 8008354:	e773      	b.n	800823e <_dtoa_r+0x3d6>
 8008356:	2502      	movs	r5, #2
 8008358:	e775      	b.n	8008246 <_dtoa_r+0x3de>
 800835a:	9e04      	ldr	r6, [sp, #16]
 800835c:	465f      	mov	r7, fp
 800835e:	e792      	b.n	8008286 <_dtoa_r+0x41e>
 8008360:	9900      	ldr	r1, [sp, #0]
 8008362:	4b50      	ldr	r3, [pc, #320]	; (80084a4 <_dtoa_r+0x63c>)
 8008364:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008368:	4431      	add	r1, r6
 800836a:	9102      	str	r1, [sp, #8]
 800836c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800836e:	eeb0 9a47 	vmov.f32	s18, s14
 8008372:	eef0 9a67 	vmov.f32	s19, s15
 8008376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800837a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800837e:	2900      	cmp	r1, #0
 8008380:	d044      	beq.n	800840c <_dtoa_r+0x5a4>
 8008382:	494e      	ldr	r1, [pc, #312]	; (80084bc <_dtoa_r+0x654>)
 8008384:	2000      	movs	r0, #0
 8008386:	f7f8 fa89 	bl	800089c <__aeabi_ddiv>
 800838a:	ec53 2b19 	vmov	r2, r3, d9
 800838e:	f7f7 ffa3 	bl	80002d8 <__aeabi_dsub>
 8008392:	9d00      	ldr	r5, [sp, #0]
 8008394:	ec41 0b19 	vmov	d9, r0, r1
 8008398:	4649      	mov	r1, r9
 800839a:	4640      	mov	r0, r8
 800839c:	f7f8 fc04 	bl	8000ba8 <__aeabi_d2iz>
 80083a0:	4606      	mov	r6, r0
 80083a2:	f7f8 f8e7 	bl	8000574 <__aeabi_i2d>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4640      	mov	r0, r8
 80083ac:	4649      	mov	r1, r9
 80083ae:	f7f7 ff93 	bl	80002d8 <__aeabi_dsub>
 80083b2:	3630      	adds	r6, #48	; 0x30
 80083b4:	f805 6b01 	strb.w	r6, [r5], #1
 80083b8:	ec53 2b19 	vmov	r2, r3, d9
 80083bc:	4680      	mov	r8, r0
 80083be:	4689      	mov	r9, r1
 80083c0:	f7f8 fbb4 	bl	8000b2c <__aeabi_dcmplt>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d164      	bne.n	8008492 <_dtoa_r+0x62a>
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	4937      	ldr	r1, [pc, #220]	; (80084ac <_dtoa_r+0x644>)
 80083ce:	2000      	movs	r0, #0
 80083d0:	f7f7 ff82 	bl	80002d8 <__aeabi_dsub>
 80083d4:	ec53 2b19 	vmov	r2, r3, d9
 80083d8:	f7f8 fba8 	bl	8000b2c <__aeabi_dcmplt>
 80083dc:	2800      	cmp	r0, #0
 80083de:	f040 80b6 	bne.w	800854e <_dtoa_r+0x6e6>
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	429d      	cmp	r5, r3
 80083e6:	f43f af7c 	beq.w	80082e2 <_dtoa_r+0x47a>
 80083ea:	4b31      	ldr	r3, [pc, #196]	; (80084b0 <_dtoa_r+0x648>)
 80083ec:	ec51 0b19 	vmov	r0, r1, d9
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7f8 f929 	bl	8000648 <__aeabi_dmul>
 80083f6:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <_dtoa_r+0x648>)
 80083f8:	ec41 0b19 	vmov	d9, r0, r1
 80083fc:	2200      	movs	r2, #0
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 f921 	bl	8000648 <__aeabi_dmul>
 8008406:	4680      	mov	r8, r0
 8008408:	4689      	mov	r9, r1
 800840a:	e7c5      	b.n	8008398 <_dtoa_r+0x530>
 800840c:	ec51 0b17 	vmov	r0, r1, d7
 8008410:	f7f8 f91a 	bl	8000648 <__aeabi_dmul>
 8008414:	9b02      	ldr	r3, [sp, #8]
 8008416:	9d00      	ldr	r5, [sp, #0]
 8008418:	930f      	str	r3, [sp, #60]	; 0x3c
 800841a:	ec41 0b19 	vmov	d9, r0, r1
 800841e:	4649      	mov	r1, r9
 8008420:	4640      	mov	r0, r8
 8008422:	f7f8 fbc1 	bl	8000ba8 <__aeabi_d2iz>
 8008426:	4606      	mov	r6, r0
 8008428:	f7f8 f8a4 	bl	8000574 <__aeabi_i2d>
 800842c:	3630      	adds	r6, #48	; 0x30
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	f7f7 ff4f 	bl	80002d8 <__aeabi_dsub>
 800843a:	f805 6b01 	strb.w	r6, [r5], #1
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	429d      	cmp	r5, r3
 8008442:	4680      	mov	r8, r0
 8008444:	4689      	mov	r9, r1
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	d124      	bne.n	8008496 <_dtoa_r+0x62e>
 800844c:	4b1b      	ldr	r3, [pc, #108]	; (80084bc <_dtoa_r+0x654>)
 800844e:	ec51 0b19 	vmov	r0, r1, d9
 8008452:	f7f7 ff43 	bl	80002dc <__adddf3>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	f7f8 fb83 	bl	8000b68 <__aeabi_dcmpgt>
 8008462:	2800      	cmp	r0, #0
 8008464:	d173      	bne.n	800854e <_dtoa_r+0x6e6>
 8008466:	ec53 2b19 	vmov	r2, r3, d9
 800846a:	4914      	ldr	r1, [pc, #80]	; (80084bc <_dtoa_r+0x654>)
 800846c:	2000      	movs	r0, #0
 800846e:	f7f7 ff33 	bl	80002d8 <__aeabi_dsub>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	f7f8 fb57 	bl	8000b2c <__aeabi_dcmplt>
 800847e:	2800      	cmp	r0, #0
 8008480:	f43f af2f 	beq.w	80082e2 <_dtoa_r+0x47a>
 8008484:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008486:	1e6b      	subs	r3, r5, #1
 8008488:	930f      	str	r3, [sp, #60]	; 0x3c
 800848a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800848e:	2b30      	cmp	r3, #48	; 0x30
 8008490:	d0f8      	beq.n	8008484 <_dtoa_r+0x61c>
 8008492:	46bb      	mov	fp, r7
 8008494:	e04a      	b.n	800852c <_dtoa_r+0x6c4>
 8008496:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <_dtoa_r+0x648>)
 8008498:	f7f8 f8d6 	bl	8000648 <__aeabi_dmul>
 800849c:	4680      	mov	r8, r0
 800849e:	4689      	mov	r9, r1
 80084a0:	e7bd      	b.n	800841e <_dtoa_r+0x5b6>
 80084a2:	bf00      	nop
 80084a4:	0800e960 	.word	0x0800e960
 80084a8:	0800e938 	.word	0x0800e938
 80084ac:	3ff00000 	.word	0x3ff00000
 80084b0:	40240000 	.word	0x40240000
 80084b4:	401c0000 	.word	0x401c0000
 80084b8:	40140000 	.word	0x40140000
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084c4:	9d00      	ldr	r5, [sp, #0]
 80084c6:	4642      	mov	r2, r8
 80084c8:	464b      	mov	r3, r9
 80084ca:	4630      	mov	r0, r6
 80084cc:	4639      	mov	r1, r7
 80084ce:	f7f8 f9e5 	bl	800089c <__aeabi_ddiv>
 80084d2:	f7f8 fb69 	bl	8000ba8 <__aeabi_d2iz>
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	f7f8 f84c 	bl	8000574 <__aeabi_i2d>
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	f7f8 f8b2 	bl	8000648 <__aeabi_dmul>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f7 fef4 	bl	80002d8 <__aeabi_dsub>
 80084f0:	9e01      	ldr	r6, [sp, #4]
 80084f2:	9f04      	ldr	r7, [sp, #16]
 80084f4:	3630      	adds	r6, #48	; 0x30
 80084f6:	f805 6b01 	strb.w	r6, [r5], #1
 80084fa:	9e00      	ldr	r6, [sp, #0]
 80084fc:	1bae      	subs	r6, r5, r6
 80084fe:	42b7      	cmp	r7, r6
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	d134      	bne.n	8008570 <_dtoa_r+0x708>
 8008506:	f7f7 fee9 	bl	80002dc <__adddf3>
 800850a:	4642      	mov	r2, r8
 800850c:	464b      	mov	r3, r9
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	f7f8 fb29 	bl	8000b68 <__aeabi_dcmpgt>
 8008516:	b9c8      	cbnz	r0, 800854c <_dtoa_r+0x6e4>
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f7f8 fafa 	bl	8000b18 <__aeabi_dcmpeq>
 8008524:	b110      	cbz	r0, 800852c <_dtoa_r+0x6c4>
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	07db      	lsls	r3, r3, #31
 800852a:	d40f      	bmi.n	800854c <_dtoa_r+0x6e4>
 800852c:	4651      	mov	r1, sl
 800852e:	4620      	mov	r0, r4
 8008530:	f000 fbcc 	bl	8008ccc <_Bfree>
 8008534:	2300      	movs	r3, #0
 8008536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008538:	702b      	strb	r3, [r5, #0]
 800853a:	f10b 0301 	add.w	r3, fp, #1
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008542:	2b00      	cmp	r3, #0
 8008544:	f43f ace2 	beq.w	8007f0c <_dtoa_r+0xa4>
 8008548:	601d      	str	r5, [r3, #0]
 800854a:	e4df      	b.n	8007f0c <_dtoa_r+0xa4>
 800854c:	465f      	mov	r7, fp
 800854e:	462b      	mov	r3, r5
 8008550:	461d      	mov	r5, r3
 8008552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008556:	2a39      	cmp	r2, #57	; 0x39
 8008558:	d106      	bne.n	8008568 <_dtoa_r+0x700>
 800855a:	9a00      	ldr	r2, [sp, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d1f7      	bne.n	8008550 <_dtoa_r+0x6e8>
 8008560:	9900      	ldr	r1, [sp, #0]
 8008562:	2230      	movs	r2, #48	; 0x30
 8008564:	3701      	adds	r7, #1
 8008566:	700a      	strb	r2, [r1, #0]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	3201      	adds	r2, #1
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	e790      	b.n	8008492 <_dtoa_r+0x62a>
 8008570:	4ba3      	ldr	r3, [pc, #652]	; (8008800 <_dtoa_r+0x998>)
 8008572:	2200      	movs	r2, #0
 8008574:	f7f8 f868 	bl	8000648 <__aeabi_dmul>
 8008578:	2200      	movs	r2, #0
 800857a:	2300      	movs	r3, #0
 800857c:	4606      	mov	r6, r0
 800857e:	460f      	mov	r7, r1
 8008580:	f7f8 faca 	bl	8000b18 <__aeabi_dcmpeq>
 8008584:	2800      	cmp	r0, #0
 8008586:	d09e      	beq.n	80084c6 <_dtoa_r+0x65e>
 8008588:	e7d0      	b.n	800852c <_dtoa_r+0x6c4>
 800858a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858c:	2a00      	cmp	r2, #0
 800858e:	f000 80ca 	beq.w	8008726 <_dtoa_r+0x8be>
 8008592:	9a07      	ldr	r2, [sp, #28]
 8008594:	2a01      	cmp	r2, #1
 8008596:	f300 80ad 	bgt.w	80086f4 <_dtoa_r+0x88c>
 800859a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800859c:	2a00      	cmp	r2, #0
 800859e:	f000 80a5 	beq.w	80086ec <_dtoa_r+0x884>
 80085a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085a6:	9e08      	ldr	r6, [sp, #32]
 80085a8:	9d05      	ldr	r5, [sp, #20]
 80085aa:	9a05      	ldr	r2, [sp, #20]
 80085ac:	441a      	add	r2, r3
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	2101      	movs	r1, #1
 80085b4:	441a      	add	r2, r3
 80085b6:	4620      	mov	r0, r4
 80085b8:	9206      	str	r2, [sp, #24]
 80085ba:	f000 fc87 	bl	8008ecc <__i2b>
 80085be:	4607      	mov	r7, r0
 80085c0:	b165      	cbz	r5, 80085dc <_dtoa_r+0x774>
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dd09      	ble.n	80085dc <_dtoa_r+0x774>
 80085c8:	42ab      	cmp	r3, r5
 80085ca:	9a05      	ldr	r2, [sp, #20]
 80085cc:	bfa8      	it	ge
 80085ce:	462b      	movge	r3, r5
 80085d0:	1ad2      	subs	r2, r2, r3
 80085d2:	9205      	str	r2, [sp, #20]
 80085d4:	9a06      	ldr	r2, [sp, #24]
 80085d6:	1aed      	subs	r5, r5, r3
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	9306      	str	r3, [sp, #24]
 80085dc:	9b08      	ldr	r3, [sp, #32]
 80085de:	b1f3      	cbz	r3, 800861e <_dtoa_r+0x7b6>
 80085e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 80a3 	beq.w	800872e <_dtoa_r+0x8c6>
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	dd10      	ble.n	800860e <_dtoa_r+0x7a6>
 80085ec:	4639      	mov	r1, r7
 80085ee:	4632      	mov	r2, r6
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fd2b 	bl	800904c <__pow5mult>
 80085f6:	4652      	mov	r2, sl
 80085f8:	4601      	mov	r1, r0
 80085fa:	4607      	mov	r7, r0
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fc7b 	bl	8008ef8 <__multiply>
 8008602:	4651      	mov	r1, sl
 8008604:	4680      	mov	r8, r0
 8008606:	4620      	mov	r0, r4
 8008608:	f000 fb60 	bl	8008ccc <_Bfree>
 800860c:	46c2      	mov	sl, r8
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	1b9a      	subs	r2, r3, r6
 8008612:	d004      	beq.n	800861e <_dtoa_r+0x7b6>
 8008614:	4651      	mov	r1, sl
 8008616:	4620      	mov	r0, r4
 8008618:	f000 fd18 	bl	800904c <__pow5mult>
 800861c:	4682      	mov	sl, r0
 800861e:	2101      	movs	r1, #1
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fc53 	bl	8008ecc <__i2b>
 8008626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	4606      	mov	r6, r0
 800862c:	f340 8081 	ble.w	8008732 <_dtoa_r+0x8ca>
 8008630:	461a      	mov	r2, r3
 8008632:	4601      	mov	r1, r0
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fd09 	bl	800904c <__pow5mult>
 800863a:	9b07      	ldr	r3, [sp, #28]
 800863c:	2b01      	cmp	r3, #1
 800863e:	4606      	mov	r6, r0
 8008640:	dd7a      	ble.n	8008738 <_dtoa_r+0x8d0>
 8008642:	f04f 0800 	mov.w	r8, #0
 8008646:	6933      	ldr	r3, [r6, #16]
 8008648:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800864c:	6918      	ldr	r0, [r3, #16]
 800864e:	f000 fbef 	bl	8008e30 <__hi0bits>
 8008652:	f1c0 0020 	rsb	r0, r0, #32
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	4418      	add	r0, r3
 800865a:	f010 001f 	ands.w	r0, r0, #31
 800865e:	f000 8094 	beq.w	800878a <_dtoa_r+0x922>
 8008662:	f1c0 0320 	rsb	r3, r0, #32
 8008666:	2b04      	cmp	r3, #4
 8008668:	f340 8085 	ble.w	8008776 <_dtoa_r+0x90e>
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	f1c0 001c 	rsb	r0, r0, #28
 8008672:	4403      	add	r3, r0
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	9b06      	ldr	r3, [sp, #24]
 8008678:	4403      	add	r3, r0
 800867a:	4405      	add	r5, r0
 800867c:	9306      	str	r3, [sp, #24]
 800867e:	9b05      	ldr	r3, [sp, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	dd05      	ble.n	8008690 <_dtoa_r+0x828>
 8008684:	4651      	mov	r1, sl
 8008686:	461a      	mov	r2, r3
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fd39 	bl	8009100 <__lshift>
 800868e:	4682      	mov	sl, r0
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	dd05      	ble.n	80086a2 <_dtoa_r+0x83a>
 8008696:	4631      	mov	r1, r6
 8008698:	461a      	mov	r2, r3
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fd30 	bl	8009100 <__lshift>
 80086a0:	4606      	mov	r6, r0
 80086a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d072      	beq.n	800878e <_dtoa_r+0x926>
 80086a8:	4631      	mov	r1, r6
 80086aa:	4650      	mov	r0, sl
 80086ac:	f000 fd94 	bl	80091d8 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	da6c      	bge.n	800878e <_dtoa_r+0x926>
 80086b4:	2300      	movs	r3, #0
 80086b6:	4651      	mov	r1, sl
 80086b8:	220a      	movs	r2, #10
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fb28 	bl	8008d10 <__multadd>
 80086c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086c6:	4682      	mov	sl, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 81b0 	beq.w	8008a2e <_dtoa_r+0xbc6>
 80086ce:	2300      	movs	r3, #0
 80086d0:	4639      	mov	r1, r7
 80086d2:	220a      	movs	r2, #10
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 fb1b 	bl	8008d10 <__multadd>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	4607      	mov	r7, r0
 80086e0:	f300 8096 	bgt.w	8008810 <_dtoa_r+0x9a8>
 80086e4:	9b07      	ldr	r3, [sp, #28]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	dc59      	bgt.n	800879e <_dtoa_r+0x936>
 80086ea:	e091      	b.n	8008810 <_dtoa_r+0x9a8>
 80086ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086f2:	e758      	b.n	80085a6 <_dtoa_r+0x73e>
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	1e5e      	subs	r6, r3, #1
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	42b3      	cmp	r3, r6
 80086fc:	bfbf      	itttt	lt
 80086fe:	9b08      	ldrlt	r3, [sp, #32]
 8008700:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008702:	9608      	strlt	r6, [sp, #32]
 8008704:	1af3      	sublt	r3, r6, r3
 8008706:	bfb4      	ite	lt
 8008708:	18d2      	addlt	r2, r2, r3
 800870a:	1b9e      	subge	r6, r3, r6
 800870c:	9b04      	ldr	r3, [sp, #16]
 800870e:	bfbc      	itt	lt
 8008710:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008712:	2600      	movlt	r6, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfb7      	itett	lt
 8008718:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800871c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008720:	1a9d      	sublt	r5, r3, r2
 8008722:	2300      	movlt	r3, #0
 8008724:	e741      	b.n	80085aa <_dtoa_r+0x742>
 8008726:	9e08      	ldr	r6, [sp, #32]
 8008728:	9d05      	ldr	r5, [sp, #20]
 800872a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800872c:	e748      	b.n	80085c0 <_dtoa_r+0x758>
 800872e:	9a08      	ldr	r2, [sp, #32]
 8008730:	e770      	b.n	8008614 <_dtoa_r+0x7ac>
 8008732:	9b07      	ldr	r3, [sp, #28]
 8008734:	2b01      	cmp	r3, #1
 8008736:	dc19      	bgt.n	800876c <_dtoa_r+0x904>
 8008738:	9b02      	ldr	r3, [sp, #8]
 800873a:	b9bb      	cbnz	r3, 800876c <_dtoa_r+0x904>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008742:	b99b      	cbnz	r3, 800876c <_dtoa_r+0x904>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800874a:	0d1b      	lsrs	r3, r3, #20
 800874c:	051b      	lsls	r3, r3, #20
 800874e:	b183      	cbz	r3, 8008772 <_dtoa_r+0x90a>
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	3301      	adds	r3, #1
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	3301      	adds	r3, #1
 800875a:	9306      	str	r3, [sp, #24]
 800875c:	f04f 0801 	mov.w	r8, #1
 8008760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008762:	2b00      	cmp	r3, #0
 8008764:	f47f af6f 	bne.w	8008646 <_dtoa_r+0x7de>
 8008768:	2001      	movs	r0, #1
 800876a:	e774      	b.n	8008656 <_dtoa_r+0x7ee>
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	e7f6      	b.n	8008760 <_dtoa_r+0x8f8>
 8008772:	4698      	mov	r8, r3
 8008774:	e7f4      	b.n	8008760 <_dtoa_r+0x8f8>
 8008776:	d082      	beq.n	800867e <_dtoa_r+0x816>
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	331c      	adds	r3, #28
 800877c:	441a      	add	r2, r3
 800877e:	9205      	str	r2, [sp, #20]
 8008780:	9a06      	ldr	r2, [sp, #24]
 8008782:	441a      	add	r2, r3
 8008784:	441d      	add	r5, r3
 8008786:	9206      	str	r2, [sp, #24]
 8008788:	e779      	b.n	800867e <_dtoa_r+0x816>
 800878a:	4603      	mov	r3, r0
 800878c:	e7f4      	b.n	8008778 <_dtoa_r+0x910>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dc37      	bgt.n	8008804 <_dtoa_r+0x99c>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	2b02      	cmp	r3, #2
 8008798:	dd34      	ble.n	8008804 <_dtoa_r+0x99c>
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	9b01      	ldr	r3, [sp, #4]
 80087a0:	b963      	cbnz	r3, 80087bc <_dtoa_r+0x954>
 80087a2:	4631      	mov	r1, r6
 80087a4:	2205      	movs	r2, #5
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 fab2 	bl	8008d10 <__multadd>
 80087ac:	4601      	mov	r1, r0
 80087ae:	4606      	mov	r6, r0
 80087b0:	4650      	mov	r0, sl
 80087b2:	f000 fd11 	bl	80091d8 <__mcmp>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f73f adbb 	bgt.w	8008332 <_dtoa_r+0x4ca>
 80087bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087be:	9d00      	ldr	r5, [sp, #0]
 80087c0:	ea6f 0b03 	mvn.w	fp, r3
 80087c4:	f04f 0800 	mov.w	r8, #0
 80087c8:	4631      	mov	r1, r6
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fa7e 	bl	8008ccc <_Bfree>
 80087d0:	2f00      	cmp	r7, #0
 80087d2:	f43f aeab 	beq.w	800852c <_dtoa_r+0x6c4>
 80087d6:	f1b8 0f00 	cmp.w	r8, #0
 80087da:	d005      	beq.n	80087e8 <_dtoa_r+0x980>
 80087dc:	45b8      	cmp	r8, r7
 80087de:	d003      	beq.n	80087e8 <_dtoa_r+0x980>
 80087e0:	4641      	mov	r1, r8
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fa72 	bl	8008ccc <_Bfree>
 80087e8:	4639      	mov	r1, r7
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fa6e 	bl	8008ccc <_Bfree>
 80087f0:	e69c      	b.n	800852c <_dtoa_r+0x6c4>
 80087f2:	2600      	movs	r6, #0
 80087f4:	4637      	mov	r7, r6
 80087f6:	e7e1      	b.n	80087bc <_dtoa_r+0x954>
 80087f8:	46bb      	mov	fp, r7
 80087fa:	4637      	mov	r7, r6
 80087fc:	e599      	b.n	8008332 <_dtoa_r+0x4ca>
 80087fe:	bf00      	nop
 8008800:	40240000 	.word	0x40240000
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80c8 	beq.w	800899c <_dtoa_r+0xb34>
 800880c:	9b04      	ldr	r3, [sp, #16]
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	2d00      	cmp	r5, #0
 8008812:	dd05      	ble.n	8008820 <_dtoa_r+0x9b8>
 8008814:	4639      	mov	r1, r7
 8008816:	462a      	mov	r2, r5
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fc71 	bl	8009100 <__lshift>
 800881e:	4607      	mov	r7, r0
 8008820:	f1b8 0f00 	cmp.w	r8, #0
 8008824:	d05b      	beq.n	80088de <_dtoa_r+0xa76>
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fa0f 	bl	8008c4c <_Balloc>
 800882e:	4605      	mov	r5, r0
 8008830:	b928      	cbnz	r0, 800883e <_dtoa_r+0x9d6>
 8008832:	4b83      	ldr	r3, [pc, #524]	; (8008a40 <_dtoa_r+0xbd8>)
 8008834:	4602      	mov	r2, r0
 8008836:	f240 21ef 	movw	r1, #751	; 0x2ef
 800883a:	f7ff bb2e 	b.w	8007e9a <_dtoa_r+0x32>
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	3202      	adds	r2, #2
 8008842:	0092      	lsls	r2, r2, #2
 8008844:	f107 010c 	add.w	r1, r7, #12
 8008848:	300c      	adds	r0, #12
 800884a:	f002 f981 	bl	800ab50 <memcpy>
 800884e:	2201      	movs	r2, #1
 8008850:	4629      	mov	r1, r5
 8008852:	4620      	mov	r0, r4
 8008854:	f000 fc54 	bl	8009100 <__lshift>
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008862:	4413      	add	r3, r2
 8008864:	9308      	str	r3, [sp, #32]
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	46b8      	mov	r8, r7
 800886e:	9306      	str	r3, [sp, #24]
 8008870:	4607      	mov	r7, r0
 8008872:	9b04      	ldr	r3, [sp, #16]
 8008874:	4631      	mov	r1, r6
 8008876:	3b01      	subs	r3, #1
 8008878:	4650      	mov	r0, sl
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	f7ff fa6a 	bl	8007d54 <quorem>
 8008880:	4641      	mov	r1, r8
 8008882:	9002      	str	r0, [sp, #8]
 8008884:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008888:	4650      	mov	r0, sl
 800888a:	f000 fca5 	bl	80091d8 <__mcmp>
 800888e:	463a      	mov	r2, r7
 8008890:	9005      	str	r0, [sp, #20]
 8008892:	4631      	mov	r1, r6
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fcbb 	bl	8009210 <__mdiff>
 800889a:	68c2      	ldr	r2, [r0, #12]
 800889c:	4605      	mov	r5, r0
 800889e:	bb02      	cbnz	r2, 80088e2 <_dtoa_r+0xa7a>
 80088a0:	4601      	mov	r1, r0
 80088a2:	4650      	mov	r0, sl
 80088a4:	f000 fc98 	bl	80091d8 <__mcmp>
 80088a8:	4602      	mov	r2, r0
 80088aa:	4629      	mov	r1, r5
 80088ac:	4620      	mov	r0, r4
 80088ae:	9209      	str	r2, [sp, #36]	; 0x24
 80088b0:	f000 fa0c 	bl	8008ccc <_Bfree>
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088b8:	9d04      	ldr	r5, [sp, #16]
 80088ba:	ea43 0102 	orr.w	r1, r3, r2
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	4319      	orrs	r1, r3
 80088c2:	d110      	bne.n	80088e6 <_dtoa_r+0xa7e>
 80088c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088c8:	d029      	beq.n	800891e <_dtoa_r+0xab6>
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd02      	ble.n	80088d6 <_dtoa_r+0xa6e>
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	f883 9000 	strb.w	r9, [r3]
 80088dc:	e774      	b.n	80087c8 <_dtoa_r+0x960>
 80088de:	4638      	mov	r0, r7
 80088e0:	e7ba      	b.n	8008858 <_dtoa_r+0x9f0>
 80088e2:	2201      	movs	r2, #1
 80088e4:	e7e1      	b.n	80088aa <_dtoa_r+0xa42>
 80088e6:	9b05      	ldr	r3, [sp, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	db04      	blt.n	80088f6 <_dtoa_r+0xa8e>
 80088ec:	9907      	ldr	r1, [sp, #28]
 80088ee:	430b      	orrs	r3, r1
 80088f0:	9906      	ldr	r1, [sp, #24]
 80088f2:	430b      	orrs	r3, r1
 80088f4:	d120      	bne.n	8008938 <_dtoa_r+0xad0>
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	dded      	ble.n	80088d6 <_dtoa_r+0xa6e>
 80088fa:	4651      	mov	r1, sl
 80088fc:	2201      	movs	r2, #1
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 fbfe 	bl	8009100 <__lshift>
 8008904:	4631      	mov	r1, r6
 8008906:	4682      	mov	sl, r0
 8008908:	f000 fc66 	bl	80091d8 <__mcmp>
 800890c:	2800      	cmp	r0, #0
 800890e:	dc03      	bgt.n	8008918 <_dtoa_r+0xab0>
 8008910:	d1e1      	bne.n	80088d6 <_dtoa_r+0xa6e>
 8008912:	f019 0f01 	tst.w	r9, #1
 8008916:	d0de      	beq.n	80088d6 <_dtoa_r+0xa6e>
 8008918:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800891c:	d1d8      	bne.n	80088d0 <_dtoa_r+0xa68>
 800891e:	9a01      	ldr	r2, [sp, #4]
 8008920:	2339      	movs	r3, #57	; 0x39
 8008922:	7013      	strb	r3, [r2, #0]
 8008924:	462b      	mov	r3, r5
 8008926:	461d      	mov	r5, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800892e:	2a39      	cmp	r2, #57	; 0x39
 8008930:	d06c      	beq.n	8008a0c <_dtoa_r+0xba4>
 8008932:	3201      	adds	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	e747      	b.n	80087c8 <_dtoa_r+0x960>
 8008938:	2a00      	cmp	r2, #0
 800893a:	dd07      	ble.n	800894c <_dtoa_r+0xae4>
 800893c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008940:	d0ed      	beq.n	800891e <_dtoa_r+0xab6>
 8008942:	9a01      	ldr	r2, [sp, #4]
 8008944:	f109 0301 	add.w	r3, r9, #1
 8008948:	7013      	strb	r3, [r2, #0]
 800894a:	e73d      	b.n	80087c8 <_dtoa_r+0x960>
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	9a08      	ldr	r2, [sp, #32]
 8008950:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008954:	4293      	cmp	r3, r2
 8008956:	d043      	beq.n	80089e0 <_dtoa_r+0xb78>
 8008958:	4651      	mov	r1, sl
 800895a:	2300      	movs	r3, #0
 800895c:	220a      	movs	r2, #10
 800895e:	4620      	mov	r0, r4
 8008960:	f000 f9d6 	bl	8008d10 <__multadd>
 8008964:	45b8      	cmp	r8, r7
 8008966:	4682      	mov	sl, r0
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	f04f 020a 	mov.w	r2, #10
 8008970:	4641      	mov	r1, r8
 8008972:	4620      	mov	r0, r4
 8008974:	d107      	bne.n	8008986 <_dtoa_r+0xb1e>
 8008976:	f000 f9cb 	bl	8008d10 <__multadd>
 800897a:	4680      	mov	r8, r0
 800897c:	4607      	mov	r7, r0
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	3301      	adds	r3, #1
 8008982:	9304      	str	r3, [sp, #16]
 8008984:	e775      	b.n	8008872 <_dtoa_r+0xa0a>
 8008986:	f000 f9c3 	bl	8008d10 <__multadd>
 800898a:	4639      	mov	r1, r7
 800898c:	4680      	mov	r8, r0
 800898e:	2300      	movs	r3, #0
 8008990:	220a      	movs	r2, #10
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f9bc 	bl	8008d10 <__multadd>
 8008998:	4607      	mov	r7, r0
 800899a:	e7f0      	b.n	800897e <_dtoa_r+0xb16>
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	9d00      	ldr	r5, [sp, #0]
 80089a2:	4631      	mov	r1, r6
 80089a4:	4650      	mov	r0, sl
 80089a6:	f7ff f9d5 	bl	8007d54 <quorem>
 80089aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	f805 9b01 	strb.w	r9, [r5], #1
 80089b4:	1aea      	subs	r2, r5, r3
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	dd07      	ble.n	80089cc <_dtoa_r+0xb64>
 80089bc:	4651      	mov	r1, sl
 80089be:	2300      	movs	r3, #0
 80089c0:	220a      	movs	r2, #10
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f9a4 	bl	8008d10 <__multadd>
 80089c8:	4682      	mov	sl, r0
 80089ca:	e7ea      	b.n	80089a2 <_dtoa_r+0xb3a>
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfc8      	it	gt
 80089d2:	461d      	movgt	r5, r3
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	bfd8      	it	le
 80089d8:	2501      	movle	r5, #1
 80089da:	441d      	add	r5, r3
 80089dc:	f04f 0800 	mov.w	r8, #0
 80089e0:	4651      	mov	r1, sl
 80089e2:	2201      	movs	r2, #1
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fb8b 	bl	8009100 <__lshift>
 80089ea:	4631      	mov	r1, r6
 80089ec:	4682      	mov	sl, r0
 80089ee:	f000 fbf3 	bl	80091d8 <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	dc96      	bgt.n	8008924 <_dtoa_r+0xabc>
 80089f6:	d102      	bne.n	80089fe <_dtoa_r+0xb96>
 80089f8:	f019 0f01 	tst.w	r9, #1
 80089fc:	d192      	bne.n	8008924 <_dtoa_r+0xabc>
 80089fe:	462b      	mov	r3, r5
 8008a00:	461d      	mov	r5, r3
 8008a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a06:	2a30      	cmp	r2, #48	; 0x30
 8008a08:	d0fa      	beq.n	8008a00 <_dtoa_r+0xb98>
 8008a0a:	e6dd      	b.n	80087c8 <_dtoa_r+0x960>
 8008a0c:	9a00      	ldr	r2, [sp, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d189      	bne.n	8008926 <_dtoa_r+0xabe>
 8008a12:	f10b 0b01 	add.w	fp, fp, #1
 8008a16:	2331      	movs	r3, #49	; 0x31
 8008a18:	e796      	b.n	8008948 <_dtoa_r+0xae0>
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <_dtoa_r+0xbdc>)
 8008a1c:	f7ff ba99 	b.w	8007f52 <_dtoa_r+0xea>
 8008a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f47f aa6d 	bne.w	8007f02 <_dtoa_r+0x9a>
 8008a28:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <_dtoa_r+0xbe0>)
 8008a2a:	f7ff ba92 	b.w	8007f52 <_dtoa_r+0xea>
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dcb5      	bgt.n	80089a0 <_dtoa_r+0xb38>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	f73f aeb1 	bgt.w	800879e <_dtoa_r+0x936>
 8008a3c:	e7b0      	b.n	80089a0 <_dtoa_r+0xb38>
 8008a3e:	bf00      	nop
 8008a40:	0800e8cd 	.word	0x0800e8cd
 8008a44:	0800e828 	.word	0x0800e828
 8008a48:	0800e851 	.word	0x0800e851

08008a4c <_free_r>:
 8008a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d044      	beq.n	8008adc <_free_r+0x90>
 8008a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a56:	9001      	str	r0, [sp, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a5e:	bfb8      	it	lt
 8008a60:	18e4      	addlt	r4, r4, r3
 8008a62:	f000 f8e7 	bl	8008c34 <__malloc_lock>
 8008a66:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <_free_r+0x94>)
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	b933      	cbnz	r3, 8008a7c <_free_r+0x30>
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	6014      	str	r4, [r2, #0]
 8008a72:	b003      	add	sp, #12
 8008a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a78:	f000 b8e2 	b.w	8008c40 <__malloc_unlock>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d908      	bls.n	8008a92 <_free_r+0x46>
 8008a80:	6825      	ldr	r5, [r4, #0]
 8008a82:	1961      	adds	r1, r4, r5
 8008a84:	428b      	cmp	r3, r1
 8008a86:	bf01      	itttt	eq
 8008a88:	6819      	ldreq	r1, [r3, #0]
 8008a8a:	685b      	ldreq	r3, [r3, #4]
 8008a8c:	1949      	addeq	r1, r1, r5
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	e7ed      	b.n	8008a6e <_free_r+0x22>
 8008a92:	461a      	mov	r2, r3
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	b10b      	cbz	r3, 8008a9c <_free_r+0x50>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d9fa      	bls.n	8008a92 <_free_r+0x46>
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	1855      	adds	r5, r2, r1
 8008aa0:	42a5      	cmp	r5, r4
 8008aa2:	d10b      	bne.n	8008abc <_free_r+0x70>
 8008aa4:	6824      	ldr	r4, [r4, #0]
 8008aa6:	4421      	add	r1, r4
 8008aa8:	1854      	adds	r4, r2, r1
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	d1e0      	bne.n	8008a72 <_free_r+0x26>
 8008ab0:	681c      	ldr	r4, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	6053      	str	r3, [r2, #4]
 8008ab6:	440c      	add	r4, r1
 8008ab8:	6014      	str	r4, [r2, #0]
 8008aba:	e7da      	b.n	8008a72 <_free_r+0x26>
 8008abc:	d902      	bls.n	8008ac4 <_free_r+0x78>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	e7d6      	b.n	8008a72 <_free_r+0x26>
 8008ac4:	6825      	ldr	r5, [r4, #0]
 8008ac6:	1961      	adds	r1, r4, r5
 8008ac8:	428b      	cmp	r3, r1
 8008aca:	bf04      	itt	eq
 8008acc:	6819      	ldreq	r1, [r3, #0]
 8008ace:	685b      	ldreq	r3, [r3, #4]
 8008ad0:	6063      	str	r3, [r4, #4]
 8008ad2:	bf04      	itt	eq
 8008ad4:	1949      	addeq	r1, r1, r5
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	6054      	str	r4, [r2, #4]
 8008ada:	e7ca      	b.n	8008a72 <_free_r+0x26>
 8008adc:	b003      	add	sp, #12
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	20000984 	.word	0x20000984

08008ae4 <malloc>:
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <malloc+0xc>)
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	f000 b823 	b.w	8008b34 <_malloc_r>
 8008aee:	bf00      	nop
 8008af0:	2000006c 	.word	0x2000006c

08008af4 <sbrk_aligned>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	4e0e      	ldr	r6, [pc, #56]	; (8008b30 <sbrk_aligned+0x3c>)
 8008af8:	460c      	mov	r4, r1
 8008afa:	6831      	ldr	r1, [r6, #0]
 8008afc:	4605      	mov	r5, r0
 8008afe:	b911      	cbnz	r1, 8008b06 <sbrk_aligned+0x12>
 8008b00:	f002 f816 	bl	800ab30 <_sbrk_r>
 8008b04:	6030      	str	r0, [r6, #0]
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f002 f811 	bl	800ab30 <_sbrk_r>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d00a      	beq.n	8008b28 <sbrk_aligned+0x34>
 8008b12:	1cc4      	adds	r4, r0, #3
 8008b14:	f024 0403 	bic.w	r4, r4, #3
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d007      	beq.n	8008b2c <sbrk_aligned+0x38>
 8008b1c:	1a21      	subs	r1, r4, r0
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f002 f806 	bl	800ab30 <_sbrk_r>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d101      	bne.n	8008b2c <sbrk_aligned+0x38>
 8008b28:	f04f 34ff 	mov.w	r4, #4294967295
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	20000988 	.word	0x20000988

08008b34 <_malloc_r>:
 8008b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b38:	1ccd      	adds	r5, r1, #3
 8008b3a:	f025 0503 	bic.w	r5, r5, #3
 8008b3e:	3508      	adds	r5, #8
 8008b40:	2d0c      	cmp	r5, #12
 8008b42:	bf38      	it	cc
 8008b44:	250c      	movcc	r5, #12
 8008b46:	2d00      	cmp	r5, #0
 8008b48:	4607      	mov	r7, r0
 8008b4a:	db01      	blt.n	8008b50 <_malloc_r+0x1c>
 8008b4c:	42a9      	cmp	r1, r5
 8008b4e:	d905      	bls.n	8008b5c <_malloc_r+0x28>
 8008b50:	230c      	movs	r3, #12
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	2600      	movs	r6, #0
 8008b56:	4630      	mov	r0, r6
 8008b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c30 <_malloc_r+0xfc>
 8008b60:	f000 f868 	bl	8008c34 <__malloc_lock>
 8008b64:	f8d8 3000 	ldr.w	r3, [r8]
 8008b68:	461c      	mov	r4, r3
 8008b6a:	bb5c      	cbnz	r4, 8008bc4 <_malloc_r+0x90>
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f7ff ffc0 	bl	8008af4 <sbrk_aligned>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	4604      	mov	r4, r0
 8008b78:	d155      	bne.n	8008c26 <_malloc_r+0xf2>
 8008b7a:	f8d8 4000 	ldr.w	r4, [r8]
 8008b7e:	4626      	mov	r6, r4
 8008b80:	2e00      	cmp	r6, #0
 8008b82:	d145      	bne.n	8008c10 <_malloc_r+0xdc>
 8008b84:	2c00      	cmp	r4, #0
 8008b86:	d048      	beq.n	8008c1a <_malloc_r+0xe6>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	eb04 0903 	add.w	r9, r4, r3
 8008b92:	f001 ffcd 	bl	800ab30 <_sbrk_r>
 8008b96:	4581      	cmp	r9, r0
 8008b98:	d13f      	bne.n	8008c1a <_malloc_r+0xe6>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	1a6d      	subs	r5, r5, r1
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7ff ffa7 	bl	8008af4 <sbrk_aligned>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d037      	beq.n	8008c1a <_malloc_r+0xe6>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	442b      	add	r3, r5
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d038      	beq.n	8008c2a <_malloc_r+0xf6>
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	42a2      	cmp	r2, r4
 8008bbc:	d12b      	bne.n	8008c16 <_malloc_r+0xe2>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	e00f      	b.n	8008be4 <_malloc_r+0xb0>
 8008bc4:	6822      	ldr	r2, [r4, #0]
 8008bc6:	1b52      	subs	r2, r2, r5
 8008bc8:	d41f      	bmi.n	8008c0a <_malloc_r+0xd6>
 8008bca:	2a0b      	cmp	r2, #11
 8008bcc:	d917      	bls.n	8008bfe <_malloc_r+0xca>
 8008bce:	1961      	adds	r1, r4, r5
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	6025      	str	r5, [r4, #0]
 8008bd4:	bf18      	it	ne
 8008bd6:	6059      	strne	r1, [r3, #4]
 8008bd8:	6863      	ldr	r3, [r4, #4]
 8008bda:	bf08      	it	eq
 8008bdc:	f8c8 1000 	streq.w	r1, [r8]
 8008be0:	5162      	str	r2, [r4, r5]
 8008be2:	604b      	str	r3, [r1, #4]
 8008be4:	4638      	mov	r0, r7
 8008be6:	f104 060b 	add.w	r6, r4, #11
 8008bea:	f000 f829 	bl	8008c40 <__malloc_unlock>
 8008bee:	f026 0607 	bic.w	r6, r6, #7
 8008bf2:	1d23      	adds	r3, r4, #4
 8008bf4:	1af2      	subs	r2, r6, r3
 8008bf6:	d0ae      	beq.n	8008b56 <_malloc_r+0x22>
 8008bf8:	1b9b      	subs	r3, r3, r6
 8008bfa:	50a3      	str	r3, [r4, r2]
 8008bfc:	e7ab      	b.n	8008b56 <_malloc_r+0x22>
 8008bfe:	42a3      	cmp	r3, r4
 8008c00:	6862      	ldr	r2, [r4, #4]
 8008c02:	d1dd      	bne.n	8008bc0 <_malloc_r+0x8c>
 8008c04:	f8c8 2000 	str.w	r2, [r8]
 8008c08:	e7ec      	b.n	8008be4 <_malloc_r+0xb0>
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	6864      	ldr	r4, [r4, #4]
 8008c0e:	e7ac      	b.n	8008b6a <_malloc_r+0x36>
 8008c10:	4634      	mov	r4, r6
 8008c12:	6876      	ldr	r6, [r6, #4]
 8008c14:	e7b4      	b.n	8008b80 <_malloc_r+0x4c>
 8008c16:	4613      	mov	r3, r2
 8008c18:	e7cc      	b.n	8008bb4 <_malloc_r+0x80>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f000 f80e 	bl	8008c40 <__malloc_unlock>
 8008c24:	e797      	b.n	8008b56 <_malloc_r+0x22>
 8008c26:	6025      	str	r5, [r4, #0]
 8008c28:	e7dc      	b.n	8008be4 <_malloc_r+0xb0>
 8008c2a:	605b      	str	r3, [r3, #4]
 8008c2c:	deff      	udf	#255	; 0xff
 8008c2e:	bf00      	nop
 8008c30:	20000984 	.word	0x20000984

08008c34 <__malloc_lock>:
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <__malloc_lock+0x8>)
 8008c36:	f7ff b884 	b.w	8007d42 <__retarget_lock_acquire_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	20000980 	.word	0x20000980

08008c40 <__malloc_unlock>:
 8008c40:	4801      	ldr	r0, [pc, #4]	; (8008c48 <__malloc_unlock+0x8>)
 8008c42:	f7ff b87f 	b.w	8007d44 <__retarget_lock_release_recursive>
 8008c46:	bf00      	nop
 8008c48:	20000980 	.word	0x20000980

08008c4c <_Balloc>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	69c6      	ldr	r6, [r0, #28]
 8008c50:	4604      	mov	r4, r0
 8008c52:	460d      	mov	r5, r1
 8008c54:	b976      	cbnz	r6, 8008c74 <_Balloc+0x28>
 8008c56:	2010      	movs	r0, #16
 8008c58:	f7ff ff44 	bl	8008ae4 <malloc>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	61e0      	str	r0, [r4, #28]
 8008c60:	b920      	cbnz	r0, 8008c6c <_Balloc+0x20>
 8008c62:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <_Balloc+0x78>)
 8008c64:	4818      	ldr	r0, [pc, #96]	; (8008cc8 <_Balloc+0x7c>)
 8008c66:	216b      	movs	r1, #107	; 0x6b
 8008c68:	f001 ff8a 	bl	800ab80 <__assert_func>
 8008c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c70:	6006      	str	r6, [r0, #0]
 8008c72:	60c6      	str	r6, [r0, #12]
 8008c74:	69e6      	ldr	r6, [r4, #28]
 8008c76:	68f3      	ldr	r3, [r6, #12]
 8008c78:	b183      	cbz	r3, 8008c9c <_Balloc+0x50>
 8008c7a:	69e3      	ldr	r3, [r4, #28]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c82:	b9b8      	cbnz	r0, 8008cb4 <_Balloc+0x68>
 8008c84:	2101      	movs	r1, #1
 8008c86:	fa01 f605 	lsl.w	r6, r1, r5
 8008c8a:	1d72      	adds	r2, r6, #5
 8008c8c:	0092      	lsls	r2, r2, #2
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f001 ff94 	bl	800abbc <_calloc_r>
 8008c94:	b160      	cbz	r0, 8008cb0 <_Balloc+0x64>
 8008c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c9a:	e00e      	b.n	8008cba <_Balloc+0x6e>
 8008c9c:	2221      	movs	r2, #33	; 0x21
 8008c9e:	2104      	movs	r1, #4
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f001 ff8b 	bl	800abbc <_calloc_r>
 8008ca6:	69e3      	ldr	r3, [r4, #28]
 8008ca8:	60f0      	str	r0, [r6, #12]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e4      	bne.n	8008c7a <_Balloc+0x2e>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	6802      	ldr	r2, [r0, #0]
 8008cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cc0:	e7f7      	b.n	8008cb2 <_Balloc+0x66>
 8008cc2:	bf00      	nop
 8008cc4:	0800e85e 	.word	0x0800e85e
 8008cc8:	0800e8de 	.word	0x0800e8de

08008ccc <_Bfree>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	69c6      	ldr	r6, [r0, #28]
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b976      	cbnz	r6, 8008cf4 <_Bfree+0x28>
 8008cd6:	2010      	movs	r0, #16
 8008cd8:	f7ff ff04 	bl	8008ae4 <malloc>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	61e8      	str	r0, [r5, #28]
 8008ce0:	b920      	cbnz	r0, 8008cec <_Bfree+0x20>
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <_Bfree+0x3c>)
 8008ce4:	4809      	ldr	r0, [pc, #36]	; (8008d0c <_Bfree+0x40>)
 8008ce6:	218f      	movs	r1, #143	; 0x8f
 8008ce8:	f001 ff4a 	bl	800ab80 <__assert_func>
 8008cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cf0:	6006      	str	r6, [r0, #0]
 8008cf2:	60c6      	str	r6, [r0, #12]
 8008cf4:	b13c      	cbz	r4, 8008d06 <_Bfree+0x3a>
 8008cf6:	69eb      	ldr	r3, [r5, #28]
 8008cf8:	6862      	ldr	r2, [r4, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d00:	6021      	str	r1, [r4, #0]
 8008d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	0800e85e 	.word	0x0800e85e
 8008d0c:	0800e8de 	.word	0x0800e8de

08008d10 <__multadd>:
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	690d      	ldr	r5, [r1, #16]
 8008d16:	4607      	mov	r7, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	461e      	mov	r6, r3
 8008d1c:	f101 0c14 	add.w	ip, r1, #20
 8008d20:	2000      	movs	r0, #0
 8008d22:	f8dc 3000 	ldr.w	r3, [ip]
 8008d26:	b299      	uxth	r1, r3
 8008d28:	fb02 6101 	mla	r1, r2, r1, r6
 8008d2c:	0c1e      	lsrs	r6, r3, #16
 8008d2e:	0c0b      	lsrs	r3, r1, #16
 8008d30:	fb02 3306 	mla	r3, r2, r6, r3
 8008d34:	b289      	uxth	r1, r1
 8008d36:	3001      	adds	r0, #1
 8008d38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d3c:	4285      	cmp	r5, r0
 8008d3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d46:	dcec      	bgt.n	8008d22 <__multadd+0x12>
 8008d48:	b30e      	cbz	r6, 8008d8e <__multadd+0x7e>
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dc19      	bgt.n	8008d84 <__multadd+0x74>
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	4638      	mov	r0, r7
 8008d54:	3101      	adds	r1, #1
 8008d56:	f7ff ff79 	bl	8008c4c <_Balloc>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	b928      	cbnz	r0, 8008d6a <__multadd+0x5a>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <__multadd+0x84>)
 8008d62:	480d      	ldr	r0, [pc, #52]	; (8008d98 <__multadd+0x88>)
 8008d64:	21ba      	movs	r1, #186	; 0xba
 8008d66:	f001 ff0b 	bl	800ab80 <__assert_func>
 8008d6a:	6922      	ldr	r2, [r4, #16]
 8008d6c:	3202      	adds	r2, #2
 8008d6e:	f104 010c 	add.w	r1, r4, #12
 8008d72:	0092      	lsls	r2, r2, #2
 8008d74:	300c      	adds	r0, #12
 8008d76:	f001 feeb 	bl	800ab50 <memcpy>
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff ffa5 	bl	8008ccc <_Bfree>
 8008d82:	4644      	mov	r4, r8
 8008d84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d88:	3501      	adds	r5, #1
 8008d8a:	615e      	str	r6, [r3, #20]
 8008d8c:	6125      	str	r5, [r4, #16]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d94:	0800e8cd 	.word	0x0800e8cd
 8008d98:	0800e8de 	.word	0x0800e8de

08008d9c <__s2b>:
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da0:	460c      	mov	r4, r1
 8008da2:	4615      	mov	r5, r2
 8008da4:	461f      	mov	r7, r3
 8008da6:	2209      	movs	r2, #9
 8008da8:	3308      	adds	r3, #8
 8008daa:	4606      	mov	r6, r0
 8008dac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008db0:	2100      	movs	r1, #0
 8008db2:	2201      	movs	r2, #1
 8008db4:	429a      	cmp	r2, r3
 8008db6:	db09      	blt.n	8008dcc <__s2b+0x30>
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7ff ff47 	bl	8008c4c <_Balloc>
 8008dbe:	b940      	cbnz	r0, 8008dd2 <__s2b+0x36>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	4b19      	ldr	r3, [pc, #100]	; (8008e28 <__s2b+0x8c>)
 8008dc4:	4819      	ldr	r0, [pc, #100]	; (8008e2c <__s2b+0x90>)
 8008dc6:	21d3      	movs	r1, #211	; 0xd3
 8008dc8:	f001 feda 	bl	800ab80 <__assert_func>
 8008dcc:	0052      	lsls	r2, r2, #1
 8008dce:	3101      	adds	r1, #1
 8008dd0:	e7f0      	b.n	8008db4 <__s2b+0x18>
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	6143      	str	r3, [r0, #20]
 8008dd6:	2d09      	cmp	r5, #9
 8008dd8:	f04f 0301 	mov.w	r3, #1
 8008ddc:	6103      	str	r3, [r0, #16]
 8008dde:	dd16      	ble.n	8008e0e <__s2b+0x72>
 8008de0:	f104 0909 	add.w	r9, r4, #9
 8008de4:	46c8      	mov	r8, r9
 8008de6:	442c      	add	r4, r5
 8008de8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008dec:	4601      	mov	r1, r0
 8008dee:	3b30      	subs	r3, #48	; 0x30
 8008df0:	220a      	movs	r2, #10
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ff8c 	bl	8008d10 <__multadd>
 8008df8:	45a0      	cmp	r8, r4
 8008dfa:	d1f5      	bne.n	8008de8 <__s2b+0x4c>
 8008dfc:	f1a5 0408 	sub.w	r4, r5, #8
 8008e00:	444c      	add	r4, r9
 8008e02:	1b2d      	subs	r5, r5, r4
 8008e04:	1963      	adds	r3, r4, r5
 8008e06:	42bb      	cmp	r3, r7
 8008e08:	db04      	blt.n	8008e14 <__s2b+0x78>
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	340a      	adds	r4, #10
 8008e10:	2509      	movs	r5, #9
 8008e12:	e7f6      	b.n	8008e02 <__s2b+0x66>
 8008e14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e18:	4601      	mov	r1, r0
 8008e1a:	3b30      	subs	r3, #48	; 0x30
 8008e1c:	220a      	movs	r2, #10
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f7ff ff76 	bl	8008d10 <__multadd>
 8008e24:	e7ee      	b.n	8008e04 <__s2b+0x68>
 8008e26:	bf00      	nop
 8008e28:	0800e8cd 	.word	0x0800e8cd
 8008e2c:	0800e8de 	.word	0x0800e8de

08008e30 <__hi0bits>:
 8008e30:	0c03      	lsrs	r3, r0, #16
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	b9d3      	cbnz	r3, 8008e6c <__hi0bits+0x3c>
 8008e36:	0400      	lsls	r0, r0, #16
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e3e:	bf04      	itt	eq
 8008e40:	0200      	lsleq	r0, r0, #8
 8008e42:	3308      	addeq	r3, #8
 8008e44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e48:	bf04      	itt	eq
 8008e4a:	0100      	lsleq	r0, r0, #4
 8008e4c:	3304      	addeq	r3, #4
 8008e4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e52:	bf04      	itt	eq
 8008e54:	0080      	lsleq	r0, r0, #2
 8008e56:	3302      	addeq	r3, #2
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	db05      	blt.n	8008e68 <__hi0bits+0x38>
 8008e5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e60:	f103 0301 	add.w	r3, r3, #1
 8008e64:	bf08      	it	eq
 8008e66:	2320      	moveq	r3, #32
 8008e68:	4618      	mov	r0, r3
 8008e6a:	4770      	bx	lr
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e7e4      	b.n	8008e3a <__hi0bits+0xa>

08008e70 <__lo0bits>:
 8008e70:	6803      	ldr	r3, [r0, #0]
 8008e72:	f013 0207 	ands.w	r2, r3, #7
 8008e76:	d00c      	beq.n	8008e92 <__lo0bits+0x22>
 8008e78:	07d9      	lsls	r1, r3, #31
 8008e7a:	d422      	bmi.n	8008ec2 <__lo0bits+0x52>
 8008e7c:	079a      	lsls	r2, r3, #30
 8008e7e:	bf49      	itett	mi
 8008e80:	085b      	lsrmi	r3, r3, #1
 8008e82:	089b      	lsrpl	r3, r3, #2
 8008e84:	6003      	strmi	r3, [r0, #0]
 8008e86:	2201      	movmi	r2, #1
 8008e88:	bf5c      	itt	pl
 8008e8a:	6003      	strpl	r3, [r0, #0]
 8008e8c:	2202      	movpl	r2, #2
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4770      	bx	lr
 8008e92:	b299      	uxth	r1, r3
 8008e94:	b909      	cbnz	r1, 8008e9a <__lo0bits+0x2a>
 8008e96:	0c1b      	lsrs	r3, r3, #16
 8008e98:	2210      	movs	r2, #16
 8008e9a:	b2d9      	uxtb	r1, r3
 8008e9c:	b909      	cbnz	r1, 8008ea2 <__lo0bits+0x32>
 8008e9e:	3208      	adds	r2, #8
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	0719      	lsls	r1, r3, #28
 8008ea4:	bf04      	itt	eq
 8008ea6:	091b      	lsreq	r3, r3, #4
 8008ea8:	3204      	addeq	r2, #4
 8008eaa:	0799      	lsls	r1, r3, #30
 8008eac:	bf04      	itt	eq
 8008eae:	089b      	lsreq	r3, r3, #2
 8008eb0:	3202      	addeq	r2, #2
 8008eb2:	07d9      	lsls	r1, r3, #31
 8008eb4:	d403      	bmi.n	8008ebe <__lo0bits+0x4e>
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	f102 0201 	add.w	r2, r2, #1
 8008ebc:	d003      	beq.n	8008ec6 <__lo0bits+0x56>
 8008ebe:	6003      	str	r3, [r0, #0]
 8008ec0:	e7e5      	b.n	8008e8e <__lo0bits+0x1e>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	e7e3      	b.n	8008e8e <__lo0bits+0x1e>
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	e7e1      	b.n	8008e8e <__lo0bits+0x1e>
	...

08008ecc <__i2b>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	460c      	mov	r4, r1
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	f7ff febb 	bl	8008c4c <_Balloc>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <__i2b+0x1a>
 8008eda:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <__i2b+0x24>)
 8008edc:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <__i2b+0x28>)
 8008ede:	f240 1145 	movw	r1, #325	; 0x145
 8008ee2:	f001 fe4d 	bl	800ab80 <__assert_func>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	6144      	str	r4, [r0, #20]
 8008eea:	6103      	str	r3, [r0, #16]
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800e8cd 	.word	0x0800e8cd
 8008ef4:	0800e8de 	.word	0x0800e8de

08008ef8 <__multiply>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	4691      	mov	r9, r2
 8008efe:	690a      	ldr	r2, [r1, #16]
 8008f00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	bfb8      	it	lt
 8008f08:	460b      	movlt	r3, r1
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	bfbc      	itt	lt
 8008f0e:	464c      	movlt	r4, r9
 8008f10:	4699      	movlt	r9, r3
 8008f12:	6927      	ldr	r7, [r4, #16]
 8008f14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f18:	68a3      	ldr	r3, [r4, #8]
 8008f1a:	6861      	ldr	r1, [r4, #4]
 8008f1c:	eb07 060a 	add.w	r6, r7, sl
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	b085      	sub	sp, #20
 8008f24:	bfb8      	it	lt
 8008f26:	3101      	addlt	r1, #1
 8008f28:	f7ff fe90 	bl	8008c4c <_Balloc>
 8008f2c:	b930      	cbnz	r0, 8008f3c <__multiply+0x44>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b44      	ldr	r3, [pc, #272]	; (8009044 <__multiply+0x14c>)
 8008f32:	4845      	ldr	r0, [pc, #276]	; (8009048 <__multiply+0x150>)
 8008f34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008f38:	f001 fe22 	bl	800ab80 <__assert_func>
 8008f3c:	f100 0514 	add.w	r5, r0, #20
 8008f40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f44:	462b      	mov	r3, r5
 8008f46:	2200      	movs	r2, #0
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	d321      	bcc.n	8008f90 <__multiply+0x98>
 8008f4c:	f104 0314 	add.w	r3, r4, #20
 8008f50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f54:	f109 0314 	add.w	r3, r9, #20
 8008f58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f5c:	9202      	str	r2, [sp, #8]
 8008f5e:	1b3a      	subs	r2, r7, r4
 8008f60:	3a15      	subs	r2, #21
 8008f62:	f022 0203 	bic.w	r2, r2, #3
 8008f66:	3204      	adds	r2, #4
 8008f68:	f104 0115 	add.w	r1, r4, #21
 8008f6c:	428f      	cmp	r7, r1
 8008f6e:	bf38      	it	cc
 8008f70:	2204      	movcc	r2, #4
 8008f72:	9201      	str	r2, [sp, #4]
 8008f74:	9a02      	ldr	r2, [sp, #8]
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d80c      	bhi.n	8008f96 <__multiply+0x9e>
 8008f7c:	2e00      	cmp	r6, #0
 8008f7e:	dd03      	ble.n	8008f88 <__multiply+0x90>
 8008f80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05b      	beq.n	8009040 <__multiply+0x148>
 8008f88:	6106      	str	r6, [r0, #16]
 8008f8a:	b005      	add	sp, #20
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f90:	f843 2b04 	str.w	r2, [r3], #4
 8008f94:	e7d8      	b.n	8008f48 <__multiply+0x50>
 8008f96:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f9a:	f1ba 0f00 	cmp.w	sl, #0
 8008f9e:	d024      	beq.n	8008fea <__multiply+0xf2>
 8008fa0:	f104 0e14 	add.w	lr, r4, #20
 8008fa4:	46a9      	mov	r9, r5
 8008fa6:	f04f 0c00 	mov.w	ip, #0
 8008faa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fae:	f8d9 1000 	ldr.w	r1, [r9]
 8008fb2:	fa1f fb82 	uxth.w	fp, r2
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8008fc4:	4461      	add	r1, ip
 8008fc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fca:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fd2:	b289      	uxth	r1, r1
 8008fd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fd8:	4577      	cmp	r7, lr
 8008fda:	f849 1b04 	str.w	r1, [r9], #4
 8008fde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fe2:	d8e2      	bhi.n	8008faa <__multiply+0xb2>
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	f845 c002 	str.w	ip, [r5, r2]
 8008fea:	9a03      	ldr	r2, [sp, #12]
 8008fec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	f1b9 0f00 	cmp.w	r9, #0
 8008ff6:	d021      	beq.n	800903c <__multiply+0x144>
 8008ff8:	6829      	ldr	r1, [r5, #0]
 8008ffa:	f104 0c14 	add.w	ip, r4, #20
 8008ffe:	46ae      	mov	lr, r5
 8009000:	f04f 0a00 	mov.w	sl, #0
 8009004:	f8bc b000 	ldrh.w	fp, [ip]
 8009008:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800900c:	fb09 220b 	mla	r2, r9, fp, r2
 8009010:	4452      	add	r2, sl
 8009012:	b289      	uxth	r1, r1
 8009014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009018:	f84e 1b04 	str.w	r1, [lr], #4
 800901c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009020:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009024:	f8be 1000 	ldrh.w	r1, [lr]
 8009028:	fb09 110a 	mla	r1, r9, sl, r1
 800902c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009030:	4567      	cmp	r7, ip
 8009032:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009036:	d8e5      	bhi.n	8009004 <__multiply+0x10c>
 8009038:	9a01      	ldr	r2, [sp, #4]
 800903a:	50a9      	str	r1, [r5, r2]
 800903c:	3504      	adds	r5, #4
 800903e:	e799      	b.n	8008f74 <__multiply+0x7c>
 8009040:	3e01      	subs	r6, #1
 8009042:	e79b      	b.n	8008f7c <__multiply+0x84>
 8009044:	0800e8cd 	.word	0x0800e8cd
 8009048:	0800e8de 	.word	0x0800e8de

0800904c <__pow5mult>:
 800904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009050:	4615      	mov	r5, r2
 8009052:	f012 0203 	ands.w	r2, r2, #3
 8009056:	4606      	mov	r6, r0
 8009058:	460f      	mov	r7, r1
 800905a:	d007      	beq.n	800906c <__pow5mult+0x20>
 800905c:	4c25      	ldr	r4, [pc, #148]	; (80090f4 <__pow5mult+0xa8>)
 800905e:	3a01      	subs	r2, #1
 8009060:	2300      	movs	r3, #0
 8009062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009066:	f7ff fe53 	bl	8008d10 <__multadd>
 800906a:	4607      	mov	r7, r0
 800906c:	10ad      	asrs	r5, r5, #2
 800906e:	d03d      	beq.n	80090ec <__pow5mult+0xa0>
 8009070:	69f4      	ldr	r4, [r6, #28]
 8009072:	b97c      	cbnz	r4, 8009094 <__pow5mult+0x48>
 8009074:	2010      	movs	r0, #16
 8009076:	f7ff fd35 	bl	8008ae4 <malloc>
 800907a:	4602      	mov	r2, r0
 800907c:	61f0      	str	r0, [r6, #28]
 800907e:	b928      	cbnz	r0, 800908c <__pow5mult+0x40>
 8009080:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <__pow5mult+0xac>)
 8009082:	481e      	ldr	r0, [pc, #120]	; (80090fc <__pow5mult+0xb0>)
 8009084:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009088:	f001 fd7a 	bl	800ab80 <__assert_func>
 800908c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009090:	6004      	str	r4, [r0, #0]
 8009092:	60c4      	str	r4, [r0, #12]
 8009094:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800909c:	b94c      	cbnz	r4, 80090b2 <__pow5mult+0x66>
 800909e:	f240 2171 	movw	r1, #625	; 0x271
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff12 	bl	8008ecc <__i2b>
 80090a8:	2300      	movs	r3, #0
 80090aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ae:	4604      	mov	r4, r0
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	07eb      	lsls	r3, r5, #31
 80090b8:	d50a      	bpl.n	80090d0 <__pow5mult+0x84>
 80090ba:	4639      	mov	r1, r7
 80090bc:	4622      	mov	r2, r4
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff1a 	bl	8008ef8 <__multiply>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4680      	mov	r8, r0
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff fdff 	bl	8008ccc <_Bfree>
 80090ce:	4647      	mov	r7, r8
 80090d0:	106d      	asrs	r5, r5, #1
 80090d2:	d00b      	beq.n	80090ec <__pow5mult+0xa0>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	b938      	cbnz	r0, 80090e8 <__pow5mult+0x9c>
 80090d8:	4622      	mov	r2, r4
 80090da:	4621      	mov	r1, r4
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff ff0b 	bl	8008ef8 <__multiply>
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	f8c0 9000 	str.w	r9, [r0]
 80090e8:	4604      	mov	r4, r0
 80090ea:	e7e4      	b.n	80090b6 <__pow5mult+0x6a>
 80090ec:	4638      	mov	r0, r7
 80090ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f2:	bf00      	nop
 80090f4:	0800ea28 	.word	0x0800ea28
 80090f8:	0800e85e 	.word	0x0800e85e
 80090fc:	0800e8de 	.word	0x0800e8de

08009100 <__lshift>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	6849      	ldr	r1, [r1, #4]
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	4607      	mov	r7, r0
 8009112:	4691      	mov	r9, r2
 8009114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009118:	f108 0601 	add.w	r6, r8, #1
 800911c:	42b3      	cmp	r3, r6
 800911e:	db0b      	blt.n	8009138 <__lshift+0x38>
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff fd93 	bl	8008c4c <_Balloc>
 8009126:	4605      	mov	r5, r0
 8009128:	b948      	cbnz	r0, 800913e <__lshift+0x3e>
 800912a:	4602      	mov	r2, r0
 800912c:	4b28      	ldr	r3, [pc, #160]	; (80091d0 <__lshift+0xd0>)
 800912e:	4829      	ldr	r0, [pc, #164]	; (80091d4 <__lshift+0xd4>)
 8009130:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009134:	f001 fd24 	bl	800ab80 <__assert_func>
 8009138:	3101      	adds	r1, #1
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	e7ee      	b.n	800911c <__lshift+0x1c>
 800913e:	2300      	movs	r3, #0
 8009140:	f100 0114 	add.w	r1, r0, #20
 8009144:	f100 0210 	add.w	r2, r0, #16
 8009148:	4618      	mov	r0, r3
 800914a:	4553      	cmp	r3, sl
 800914c:	db33      	blt.n	80091b6 <__lshift+0xb6>
 800914e:	6920      	ldr	r0, [r4, #16]
 8009150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009154:	f104 0314 	add.w	r3, r4, #20
 8009158:	f019 091f 	ands.w	r9, r9, #31
 800915c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009160:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009164:	d02b      	beq.n	80091be <__lshift+0xbe>
 8009166:	f1c9 0e20 	rsb	lr, r9, #32
 800916a:	468a      	mov	sl, r1
 800916c:	2200      	movs	r2, #0
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	fa00 f009 	lsl.w	r0, r0, r9
 8009174:	4310      	orrs	r0, r2
 8009176:	f84a 0b04 	str.w	r0, [sl], #4
 800917a:	f853 2b04 	ldr.w	r2, [r3], #4
 800917e:	459c      	cmp	ip, r3
 8009180:	fa22 f20e 	lsr.w	r2, r2, lr
 8009184:	d8f3      	bhi.n	800916e <__lshift+0x6e>
 8009186:	ebac 0304 	sub.w	r3, ip, r4
 800918a:	3b15      	subs	r3, #21
 800918c:	f023 0303 	bic.w	r3, r3, #3
 8009190:	3304      	adds	r3, #4
 8009192:	f104 0015 	add.w	r0, r4, #21
 8009196:	4584      	cmp	ip, r0
 8009198:	bf38      	it	cc
 800919a:	2304      	movcc	r3, #4
 800919c:	50ca      	str	r2, [r1, r3]
 800919e:	b10a      	cbz	r2, 80091a4 <__lshift+0xa4>
 80091a0:	f108 0602 	add.w	r6, r8, #2
 80091a4:	3e01      	subs	r6, #1
 80091a6:	4638      	mov	r0, r7
 80091a8:	612e      	str	r6, [r5, #16]
 80091aa:	4621      	mov	r1, r4
 80091ac:	f7ff fd8e 	bl	8008ccc <_Bfree>
 80091b0:	4628      	mov	r0, r5
 80091b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091ba:	3301      	adds	r3, #1
 80091bc:	e7c5      	b.n	800914a <__lshift+0x4a>
 80091be:	3904      	subs	r1, #4
 80091c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80091c8:	459c      	cmp	ip, r3
 80091ca:	d8f9      	bhi.n	80091c0 <__lshift+0xc0>
 80091cc:	e7ea      	b.n	80091a4 <__lshift+0xa4>
 80091ce:	bf00      	nop
 80091d0:	0800e8cd 	.word	0x0800e8cd
 80091d4:	0800e8de 	.word	0x0800e8de

080091d8 <__mcmp>:
 80091d8:	b530      	push	{r4, r5, lr}
 80091da:	6902      	ldr	r2, [r0, #16]
 80091dc:	690c      	ldr	r4, [r1, #16]
 80091de:	1b12      	subs	r2, r2, r4
 80091e0:	d10e      	bne.n	8009200 <__mcmp+0x28>
 80091e2:	f100 0314 	add.w	r3, r0, #20
 80091e6:	3114      	adds	r1, #20
 80091e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091f8:	42a5      	cmp	r5, r4
 80091fa:	d003      	beq.n	8009204 <__mcmp+0x2c>
 80091fc:	d305      	bcc.n	800920a <__mcmp+0x32>
 80091fe:	2201      	movs	r2, #1
 8009200:	4610      	mov	r0, r2
 8009202:	bd30      	pop	{r4, r5, pc}
 8009204:	4283      	cmp	r3, r0
 8009206:	d3f3      	bcc.n	80091f0 <__mcmp+0x18>
 8009208:	e7fa      	b.n	8009200 <__mcmp+0x28>
 800920a:	f04f 32ff 	mov.w	r2, #4294967295
 800920e:	e7f7      	b.n	8009200 <__mcmp+0x28>

08009210 <__mdiff>:
 8009210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	460c      	mov	r4, r1
 8009216:	4606      	mov	r6, r0
 8009218:	4611      	mov	r1, r2
 800921a:	4620      	mov	r0, r4
 800921c:	4690      	mov	r8, r2
 800921e:	f7ff ffdb 	bl	80091d8 <__mcmp>
 8009222:	1e05      	subs	r5, r0, #0
 8009224:	d110      	bne.n	8009248 <__mdiff+0x38>
 8009226:	4629      	mov	r1, r5
 8009228:	4630      	mov	r0, r6
 800922a:	f7ff fd0f 	bl	8008c4c <_Balloc>
 800922e:	b930      	cbnz	r0, 800923e <__mdiff+0x2e>
 8009230:	4b3a      	ldr	r3, [pc, #232]	; (800931c <__mdiff+0x10c>)
 8009232:	4602      	mov	r2, r0
 8009234:	f240 2137 	movw	r1, #567	; 0x237
 8009238:	4839      	ldr	r0, [pc, #228]	; (8009320 <__mdiff+0x110>)
 800923a:	f001 fca1 	bl	800ab80 <__assert_func>
 800923e:	2301      	movs	r3, #1
 8009240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	bfa4      	itt	ge
 800924a:	4643      	movge	r3, r8
 800924c:	46a0      	movge	r8, r4
 800924e:	4630      	mov	r0, r6
 8009250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009254:	bfa6      	itte	ge
 8009256:	461c      	movge	r4, r3
 8009258:	2500      	movge	r5, #0
 800925a:	2501      	movlt	r5, #1
 800925c:	f7ff fcf6 	bl	8008c4c <_Balloc>
 8009260:	b920      	cbnz	r0, 800926c <__mdiff+0x5c>
 8009262:	4b2e      	ldr	r3, [pc, #184]	; (800931c <__mdiff+0x10c>)
 8009264:	4602      	mov	r2, r0
 8009266:	f240 2145 	movw	r1, #581	; 0x245
 800926a:	e7e5      	b.n	8009238 <__mdiff+0x28>
 800926c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009270:	6926      	ldr	r6, [r4, #16]
 8009272:	60c5      	str	r5, [r0, #12]
 8009274:	f104 0914 	add.w	r9, r4, #20
 8009278:	f108 0514 	add.w	r5, r8, #20
 800927c:	f100 0e14 	add.w	lr, r0, #20
 8009280:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009284:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009288:	f108 0210 	add.w	r2, r8, #16
 800928c:	46f2      	mov	sl, lr
 800928e:	2100      	movs	r1, #0
 8009290:	f859 3b04 	ldr.w	r3, [r9], #4
 8009294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009298:	fa11 f88b 	uxtah	r8, r1, fp
 800929c:	b299      	uxth	r1, r3
 800929e:	0c1b      	lsrs	r3, r3, #16
 80092a0:	eba8 0801 	sub.w	r8, r8, r1
 80092a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092ac:	fa1f f888 	uxth.w	r8, r8
 80092b0:	1419      	asrs	r1, r3, #16
 80092b2:	454e      	cmp	r6, r9
 80092b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092b8:	f84a 3b04 	str.w	r3, [sl], #4
 80092bc:	d8e8      	bhi.n	8009290 <__mdiff+0x80>
 80092be:	1b33      	subs	r3, r6, r4
 80092c0:	3b15      	subs	r3, #21
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	3304      	adds	r3, #4
 80092c8:	3415      	adds	r4, #21
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	bf38      	it	cc
 80092ce:	2304      	movcc	r3, #4
 80092d0:	441d      	add	r5, r3
 80092d2:	4473      	add	r3, lr
 80092d4:	469e      	mov	lr, r3
 80092d6:	462e      	mov	r6, r5
 80092d8:	4566      	cmp	r6, ip
 80092da:	d30e      	bcc.n	80092fa <__mdiff+0xea>
 80092dc:	f10c 0203 	add.w	r2, ip, #3
 80092e0:	1b52      	subs	r2, r2, r5
 80092e2:	f022 0203 	bic.w	r2, r2, #3
 80092e6:	3d03      	subs	r5, #3
 80092e8:	45ac      	cmp	ip, r5
 80092ea:	bf38      	it	cc
 80092ec:	2200      	movcc	r2, #0
 80092ee:	4413      	add	r3, r2
 80092f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80092f4:	b17a      	cbz	r2, 8009316 <__mdiff+0x106>
 80092f6:	6107      	str	r7, [r0, #16]
 80092f8:	e7a4      	b.n	8009244 <__mdiff+0x34>
 80092fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80092fe:	fa11 f288 	uxtah	r2, r1, r8
 8009302:	1414      	asrs	r4, r2, #16
 8009304:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009308:	b292      	uxth	r2, r2
 800930a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800930e:	f84e 2b04 	str.w	r2, [lr], #4
 8009312:	1421      	asrs	r1, r4, #16
 8009314:	e7e0      	b.n	80092d8 <__mdiff+0xc8>
 8009316:	3f01      	subs	r7, #1
 8009318:	e7ea      	b.n	80092f0 <__mdiff+0xe0>
 800931a:	bf00      	nop
 800931c:	0800e8cd 	.word	0x0800e8cd
 8009320:	0800e8de 	.word	0x0800e8de

08009324 <__ulp>:
 8009324:	b082      	sub	sp, #8
 8009326:	ed8d 0b00 	vstr	d0, [sp]
 800932a:	9a01      	ldr	r2, [sp, #4]
 800932c:	4b0f      	ldr	r3, [pc, #60]	; (800936c <__ulp+0x48>)
 800932e:	4013      	ands	r3, r2
 8009330:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009334:	2b00      	cmp	r3, #0
 8009336:	dc08      	bgt.n	800934a <__ulp+0x26>
 8009338:	425b      	negs	r3, r3
 800933a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800933e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009342:	da04      	bge.n	800934e <__ulp+0x2a>
 8009344:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009348:	4113      	asrs	r3, r2
 800934a:	2200      	movs	r2, #0
 800934c:	e008      	b.n	8009360 <__ulp+0x3c>
 800934e:	f1a2 0314 	sub.w	r3, r2, #20
 8009352:	2b1e      	cmp	r3, #30
 8009354:	bfda      	itte	le
 8009356:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800935a:	40da      	lsrle	r2, r3
 800935c:	2201      	movgt	r2, #1
 800935e:	2300      	movs	r3, #0
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	ec41 0b10 	vmov	d0, r0, r1
 8009368:	b002      	add	sp, #8
 800936a:	4770      	bx	lr
 800936c:	7ff00000 	.word	0x7ff00000

08009370 <__b2d>:
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	6906      	ldr	r6, [r0, #16]
 8009376:	f100 0814 	add.w	r8, r0, #20
 800937a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800937e:	1f37      	subs	r7, r6, #4
 8009380:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009384:	4610      	mov	r0, r2
 8009386:	f7ff fd53 	bl	8008e30 <__hi0bits>
 800938a:	f1c0 0320 	rsb	r3, r0, #32
 800938e:	280a      	cmp	r0, #10
 8009390:	600b      	str	r3, [r1, #0]
 8009392:	491b      	ldr	r1, [pc, #108]	; (8009400 <__b2d+0x90>)
 8009394:	dc15      	bgt.n	80093c2 <__b2d+0x52>
 8009396:	f1c0 0c0b 	rsb	ip, r0, #11
 800939a:	fa22 f30c 	lsr.w	r3, r2, ip
 800939e:	45b8      	cmp	r8, r7
 80093a0:	ea43 0501 	orr.w	r5, r3, r1
 80093a4:	bf34      	ite	cc
 80093a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093aa:	2300      	movcs	r3, #0
 80093ac:	3015      	adds	r0, #21
 80093ae:	fa02 f000 	lsl.w	r0, r2, r0
 80093b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80093b6:	4303      	orrs	r3, r0
 80093b8:	461c      	mov	r4, r3
 80093ba:	ec45 4b10 	vmov	d0, r4, r5
 80093be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c2:	45b8      	cmp	r8, r7
 80093c4:	bf3a      	itte	cc
 80093c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80093ce:	2300      	movcs	r3, #0
 80093d0:	380b      	subs	r0, #11
 80093d2:	d012      	beq.n	80093fa <__b2d+0x8a>
 80093d4:	f1c0 0120 	rsb	r1, r0, #32
 80093d8:	fa23 f401 	lsr.w	r4, r3, r1
 80093dc:	4082      	lsls	r2, r0
 80093de:	4322      	orrs	r2, r4
 80093e0:	4547      	cmp	r7, r8
 80093e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80093e6:	bf8c      	ite	hi
 80093e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80093ec:	2200      	movls	r2, #0
 80093ee:	4083      	lsls	r3, r0
 80093f0:	40ca      	lsrs	r2, r1
 80093f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80093f6:	4313      	orrs	r3, r2
 80093f8:	e7de      	b.n	80093b8 <__b2d+0x48>
 80093fa:	ea42 0501 	orr.w	r5, r2, r1
 80093fe:	e7db      	b.n	80093b8 <__b2d+0x48>
 8009400:	3ff00000 	.word	0x3ff00000

08009404 <__d2b>:
 8009404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009408:	460f      	mov	r7, r1
 800940a:	2101      	movs	r1, #1
 800940c:	ec59 8b10 	vmov	r8, r9, d0
 8009410:	4616      	mov	r6, r2
 8009412:	f7ff fc1b 	bl	8008c4c <_Balloc>
 8009416:	4604      	mov	r4, r0
 8009418:	b930      	cbnz	r0, 8009428 <__d2b+0x24>
 800941a:	4602      	mov	r2, r0
 800941c:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <__d2b+0xac>)
 800941e:	4825      	ldr	r0, [pc, #148]	; (80094b4 <__d2b+0xb0>)
 8009420:	f240 310f 	movw	r1, #783	; 0x30f
 8009424:	f001 fbac 	bl	800ab80 <__assert_func>
 8009428:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800942c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009430:	bb2d      	cbnz	r5, 800947e <__d2b+0x7a>
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	f1b8 0300 	subs.w	r3, r8, #0
 8009438:	d026      	beq.n	8009488 <__d2b+0x84>
 800943a:	4668      	mov	r0, sp
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	f7ff fd17 	bl	8008e70 <__lo0bits>
 8009442:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009446:	b1e8      	cbz	r0, 8009484 <__d2b+0x80>
 8009448:	f1c0 0320 	rsb	r3, r0, #32
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	430b      	orrs	r3, r1
 8009452:	40c2      	lsrs	r2, r0
 8009454:	6163      	str	r3, [r4, #20]
 8009456:	9201      	str	r2, [sp, #4]
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	61a3      	str	r3, [r4, #24]
 800945c:	2b00      	cmp	r3, #0
 800945e:	bf14      	ite	ne
 8009460:	2202      	movne	r2, #2
 8009462:	2201      	moveq	r2, #1
 8009464:	6122      	str	r2, [r4, #16]
 8009466:	b1bd      	cbz	r5, 8009498 <__d2b+0x94>
 8009468:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800946c:	4405      	add	r5, r0
 800946e:	603d      	str	r5, [r7, #0]
 8009470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009474:	6030      	str	r0, [r6, #0]
 8009476:	4620      	mov	r0, r4
 8009478:	b003      	add	sp, #12
 800947a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009482:	e7d6      	b.n	8009432 <__d2b+0x2e>
 8009484:	6161      	str	r1, [r4, #20]
 8009486:	e7e7      	b.n	8009458 <__d2b+0x54>
 8009488:	a801      	add	r0, sp, #4
 800948a:	f7ff fcf1 	bl	8008e70 <__lo0bits>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	6163      	str	r3, [r4, #20]
 8009492:	3020      	adds	r0, #32
 8009494:	2201      	movs	r2, #1
 8009496:	e7e5      	b.n	8009464 <__d2b+0x60>
 8009498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800949c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094a0:	6038      	str	r0, [r7, #0]
 80094a2:	6918      	ldr	r0, [r3, #16]
 80094a4:	f7ff fcc4 	bl	8008e30 <__hi0bits>
 80094a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ac:	e7e2      	b.n	8009474 <__d2b+0x70>
 80094ae:	bf00      	nop
 80094b0:	0800e8cd 	.word	0x0800e8cd
 80094b4:	0800e8de 	.word	0x0800e8de

080094b8 <__ratio>:
 80094b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094bc:	4688      	mov	r8, r1
 80094be:	4669      	mov	r1, sp
 80094c0:	4681      	mov	r9, r0
 80094c2:	f7ff ff55 	bl	8009370 <__b2d>
 80094c6:	a901      	add	r1, sp, #4
 80094c8:	4640      	mov	r0, r8
 80094ca:	ec55 4b10 	vmov	r4, r5, d0
 80094ce:	f7ff ff4f 	bl	8009370 <__b2d>
 80094d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094da:	eba3 0c02 	sub.w	ip, r3, r2
 80094de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094e8:	ec51 0b10 	vmov	r0, r1, d0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bfd6      	itet	le
 80094f0:	460a      	movle	r2, r1
 80094f2:	462a      	movgt	r2, r5
 80094f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094f8:	468b      	mov	fp, r1
 80094fa:	462f      	mov	r7, r5
 80094fc:	bfd4      	ite	le
 80094fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009502:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009506:	4620      	mov	r0, r4
 8009508:	ee10 2a10 	vmov	r2, s0
 800950c:	465b      	mov	r3, fp
 800950e:	4639      	mov	r1, r7
 8009510:	f7f7 f9c4 	bl	800089c <__aeabi_ddiv>
 8009514:	ec41 0b10 	vmov	d0, r0, r1
 8009518:	b003      	add	sp, #12
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800951e <__copybits>:
 800951e:	3901      	subs	r1, #1
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	1149      	asrs	r1, r1, #5
 8009524:	6914      	ldr	r4, [r2, #16]
 8009526:	3101      	adds	r1, #1
 8009528:	f102 0314 	add.w	r3, r2, #20
 800952c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009530:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009534:	1f05      	subs	r5, r0, #4
 8009536:	42a3      	cmp	r3, r4
 8009538:	d30c      	bcc.n	8009554 <__copybits+0x36>
 800953a:	1aa3      	subs	r3, r4, r2
 800953c:	3b11      	subs	r3, #17
 800953e:	f023 0303 	bic.w	r3, r3, #3
 8009542:	3211      	adds	r2, #17
 8009544:	42a2      	cmp	r2, r4
 8009546:	bf88      	it	hi
 8009548:	2300      	movhi	r3, #0
 800954a:	4418      	add	r0, r3
 800954c:	2300      	movs	r3, #0
 800954e:	4288      	cmp	r0, r1
 8009550:	d305      	bcc.n	800955e <__copybits+0x40>
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	f853 6b04 	ldr.w	r6, [r3], #4
 8009558:	f845 6f04 	str.w	r6, [r5, #4]!
 800955c:	e7eb      	b.n	8009536 <__copybits+0x18>
 800955e:	f840 3b04 	str.w	r3, [r0], #4
 8009562:	e7f4      	b.n	800954e <__copybits+0x30>

08009564 <__any_on>:
 8009564:	f100 0214 	add.w	r2, r0, #20
 8009568:	6900      	ldr	r0, [r0, #16]
 800956a:	114b      	asrs	r3, r1, #5
 800956c:	4298      	cmp	r0, r3
 800956e:	b510      	push	{r4, lr}
 8009570:	db11      	blt.n	8009596 <__any_on+0x32>
 8009572:	dd0a      	ble.n	800958a <__any_on+0x26>
 8009574:	f011 011f 	ands.w	r1, r1, #31
 8009578:	d007      	beq.n	800958a <__any_on+0x26>
 800957a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800957e:	fa24 f001 	lsr.w	r0, r4, r1
 8009582:	fa00 f101 	lsl.w	r1, r0, r1
 8009586:	428c      	cmp	r4, r1
 8009588:	d10b      	bne.n	80095a2 <__any_on+0x3e>
 800958a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800958e:	4293      	cmp	r3, r2
 8009590:	d803      	bhi.n	800959a <__any_on+0x36>
 8009592:	2000      	movs	r0, #0
 8009594:	bd10      	pop	{r4, pc}
 8009596:	4603      	mov	r3, r0
 8009598:	e7f7      	b.n	800958a <__any_on+0x26>
 800959a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800959e:	2900      	cmp	r1, #0
 80095a0:	d0f5      	beq.n	800958e <__any_on+0x2a>
 80095a2:	2001      	movs	r0, #1
 80095a4:	e7f6      	b.n	8009594 <__any_on+0x30>

080095a6 <sulp>:
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	4616      	mov	r6, r2
 80095b2:	f7ff feb7 	bl	8009324 <__ulp>
 80095b6:	ec51 0b10 	vmov	r0, r1, d0
 80095ba:	b17e      	cbz	r6, 80095dc <sulp+0x36>
 80095bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80095c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd09      	ble.n	80095dc <sulp+0x36>
 80095c8:	051b      	lsls	r3, r3, #20
 80095ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095ce:	2400      	movs	r4, #0
 80095d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095d4:	4622      	mov	r2, r4
 80095d6:	462b      	mov	r3, r5
 80095d8:	f7f7 f836 	bl	8000648 <__aeabi_dmul>
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080095e0 <_strtod_l>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	ed2d 8b02 	vpush	{d8}
 80095e8:	b09b      	sub	sp, #108	; 0x6c
 80095ea:	4604      	mov	r4, r0
 80095ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80095ee:	2200      	movs	r2, #0
 80095f0:	9216      	str	r2, [sp, #88]	; 0x58
 80095f2:	460d      	mov	r5, r1
 80095f4:	f04f 0800 	mov.w	r8, #0
 80095f8:	f04f 0900 	mov.w	r9, #0
 80095fc:	460a      	mov	r2, r1
 80095fe:	9215      	str	r2, [sp, #84]	; 0x54
 8009600:	7811      	ldrb	r1, [r2, #0]
 8009602:	292b      	cmp	r1, #43	; 0x2b
 8009604:	d04c      	beq.n	80096a0 <_strtod_l+0xc0>
 8009606:	d83a      	bhi.n	800967e <_strtod_l+0x9e>
 8009608:	290d      	cmp	r1, #13
 800960a:	d834      	bhi.n	8009676 <_strtod_l+0x96>
 800960c:	2908      	cmp	r1, #8
 800960e:	d834      	bhi.n	800967a <_strtod_l+0x9a>
 8009610:	2900      	cmp	r1, #0
 8009612:	d03d      	beq.n	8009690 <_strtod_l+0xb0>
 8009614:	2200      	movs	r2, #0
 8009616:	920a      	str	r2, [sp, #40]	; 0x28
 8009618:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800961a:	7832      	ldrb	r2, [r6, #0]
 800961c:	2a30      	cmp	r2, #48	; 0x30
 800961e:	f040 80b4 	bne.w	800978a <_strtod_l+0x1aa>
 8009622:	7872      	ldrb	r2, [r6, #1]
 8009624:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009628:	2a58      	cmp	r2, #88	; 0x58
 800962a:	d170      	bne.n	800970e <_strtod_l+0x12e>
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	ab16      	add	r3, sp, #88	; 0x58
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	4a8e      	ldr	r2, [pc, #568]	; (8009870 <_strtod_l+0x290>)
 8009638:	ab17      	add	r3, sp, #92	; 0x5c
 800963a:	a915      	add	r1, sp, #84	; 0x54
 800963c:	4620      	mov	r0, r4
 800963e:	f001 fb3b 	bl	800acb8 <__gethex>
 8009642:	f010 070f 	ands.w	r7, r0, #15
 8009646:	4605      	mov	r5, r0
 8009648:	d005      	beq.n	8009656 <_strtod_l+0x76>
 800964a:	2f06      	cmp	r7, #6
 800964c:	d12a      	bne.n	80096a4 <_strtod_l+0xc4>
 800964e:	3601      	adds	r6, #1
 8009650:	2300      	movs	r3, #0
 8009652:	9615      	str	r6, [sp, #84]	; 0x54
 8009654:	930a      	str	r3, [sp, #40]	; 0x28
 8009656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 857f 	bne.w	800a15c <_strtod_l+0xb7c>
 800965e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009660:	b1db      	cbz	r3, 800969a <_strtod_l+0xba>
 8009662:	4642      	mov	r2, r8
 8009664:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009668:	ec43 2b10 	vmov	d0, r2, r3
 800966c:	b01b      	add	sp, #108	; 0x6c
 800966e:	ecbd 8b02 	vpop	{d8}
 8009672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009676:	2920      	cmp	r1, #32
 8009678:	d1cc      	bne.n	8009614 <_strtod_l+0x34>
 800967a:	3201      	adds	r2, #1
 800967c:	e7bf      	b.n	80095fe <_strtod_l+0x1e>
 800967e:	292d      	cmp	r1, #45	; 0x2d
 8009680:	d1c8      	bne.n	8009614 <_strtod_l+0x34>
 8009682:	2101      	movs	r1, #1
 8009684:	910a      	str	r1, [sp, #40]	; 0x28
 8009686:	1c51      	adds	r1, r2, #1
 8009688:	9115      	str	r1, [sp, #84]	; 0x54
 800968a:	7852      	ldrb	r2, [r2, #1]
 800968c:	2a00      	cmp	r2, #0
 800968e:	d1c3      	bne.n	8009618 <_strtod_l+0x38>
 8009690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009692:	9515      	str	r5, [sp, #84]	; 0x54
 8009694:	2b00      	cmp	r3, #0
 8009696:	f040 855f 	bne.w	800a158 <_strtod_l+0xb78>
 800969a:	4642      	mov	r2, r8
 800969c:	464b      	mov	r3, r9
 800969e:	e7e3      	b.n	8009668 <_strtod_l+0x88>
 80096a0:	2100      	movs	r1, #0
 80096a2:	e7ef      	b.n	8009684 <_strtod_l+0xa4>
 80096a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096a6:	b13a      	cbz	r2, 80096b8 <_strtod_l+0xd8>
 80096a8:	2135      	movs	r1, #53	; 0x35
 80096aa:	a818      	add	r0, sp, #96	; 0x60
 80096ac:	f7ff ff37 	bl	800951e <__copybits>
 80096b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096b2:	4620      	mov	r0, r4
 80096b4:	f7ff fb0a 	bl	8008ccc <_Bfree>
 80096b8:	3f01      	subs	r7, #1
 80096ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096bc:	2f04      	cmp	r7, #4
 80096be:	d806      	bhi.n	80096ce <_strtod_l+0xee>
 80096c0:	e8df f007 	tbb	[pc, r7]
 80096c4:	201d0314 	.word	0x201d0314
 80096c8:	14          	.byte	0x14
 80096c9:	00          	.byte	0x00
 80096ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80096ce:	05e9      	lsls	r1, r5, #23
 80096d0:	bf48      	it	mi
 80096d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80096d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096da:	0d1b      	lsrs	r3, r3, #20
 80096dc:	051b      	lsls	r3, r3, #20
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1b9      	bne.n	8009656 <_strtod_l+0x76>
 80096e2:	f7fe fb03 	bl	8007cec <__errno>
 80096e6:	2322      	movs	r3, #34	; 0x22
 80096e8:	6003      	str	r3, [r0, #0]
 80096ea:	e7b4      	b.n	8009656 <_strtod_l+0x76>
 80096ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80096f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80096fc:	e7e7      	b.n	80096ce <_strtod_l+0xee>
 80096fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009878 <_strtod_l+0x298>
 8009702:	e7e4      	b.n	80096ce <_strtod_l+0xee>
 8009704:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009708:	f04f 38ff 	mov.w	r8, #4294967295
 800970c:	e7df      	b.n	80096ce <_strtod_l+0xee>
 800970e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	9215      	str	r2, [sp, #84]	; 0x54
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b30      	cmp	r3, #48	; 0x30
 8009718:	d0f9      	beq.n	800970e <_strtod_l+0x12e>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d09b      	beq.n	8009656 <_strtod_l+0x76>
 800971e:	2301      	movs	r3, #1
 8009720:	f04f 0a00 	mov.w	sl, #0
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009728:	930b      	str	r3, [sp, #44]	; 0x2c
 800972a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800972e:	46d3      	mov	fp, sl
 8009730:	220a      	movs	r2, #10
 8009732:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009734:	7806      	ldrb	r6, [r0, #0]
 8009736:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800973a:	b2d9      	uxtb	r1, r3
 800973c:	2909      	cmp	r1, #9
 800973e:	d926      	bls.n	800978e <_strtod_l+0x1ae>
 8009740:	494c      	ldr	r1, [pc, #304]	; (8009874 <_strtod_l+0x294>)
 8009742:	2201      	movs	r2, #1
 8009744:	f001 f9c0 	bl	800aac8 <strncmp>
 8009748:	2800      	cmp	r0, #0
 800974a:	d030      	beq.n	80097ae <_strtod_l+0x1ce>
 800974c:	2000      	movs	r0, #0
 800974e:	4632      	mov	r2, r6
 8009750:	9005      	str	r0, [sp, #20]
 8009752:	465e      	mov	r6, fp
 8009754:	4603      	mov	r3, r0
 8009756:	2a65      	cmp	r2, #101	; 0x65
 8009758:	d001      	beq.n	800975e <_strtod_l+0x17e>
 800975a:	2a45      	cmp	r2, #69	; 0x45
 800975c:	d113      	bne.n	8009786 <_strtod_l+0x1a6>
 800975e:	b91e      	cbnz	r6, 8009768 <_strtod_l+0x188>
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	4302      	orrs	r2, r0
 8009764:	d094      	beq.n	8009690 <_strtod_l+0xb0>
 8009766:	2600      	movs	r6, #0
 8009768:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800976a:	1c6a      	adds	r2, r5, #1
 800976c:	9215      	str	r2, [sp, #84]	; 0x54
 800976e:	786a      	ldrb	r2, [r5, #1]
 8009770:	2a2b      	cmp	r2, #43	; 0x2b
 8009772:	d074      	beq.n	800985e <_strtod_l+0x27e>
 8009774:	2a2d      	cmp	r2, #45	; 0x2d
 8009776:	d078      	beq.n	800986a <_strtod_l+0x28a>
 8009778:	f04f 0c00 	mov.w	ip, #0
 800977c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009780:	2909      	cmp	r1, #9
 8009782:	d97f      	bls.n	8009884 <_strtod_l+0x2a4>
 8009784:	9515      	str	r5, [sp, #84]	; 0x54
 8009786:	2700      	movs	r7, #0
 8009788:	e09e      	b.n	80098c8 <_strtod_l+0x2e8>
 800978a:	2300      	movs	r3, #0
 800978c:	e7c8      	b.n	8009720 <_strtod_l+0x140>
 800978e:	f1bb 0f08 	cmp.w	fp, #8
 8009792:	bfd8      	it	le
 8009794:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009796:	f100 0001 	add.w	r0, r0, #1
 800979a:	bfda      	itte	le
 800979c:	fb02 3301 	mlale	r3, r2, r1, r3
 80097a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80097a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80097a6:	f10b 0b01 	add.w	fp, fp, #1
 80097aa:	9015      	str	r0, [sp, #84]	; 0x54
 80097ac:	e7c1      	b.n	8009732 <_strtod_l+0x152>
 80097ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	9215      	str	r2, [sp, #84]	; 0x54
 80097b4:	785a      	ldrb	r2, [r3, #1]
 80097b6:	f1bb 0f00 	cmp.w	fp, #0
 80097ba:	d037      	beq.n	800982c <_strtod_l+0x24c>
 80097bc:	9005      	str	r0, [sp, #20]
 80097be:	465e      	mov	r6, fp
 80097c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097c4:	2b09      	cmp	r3, #9
 80097c6:	d912      	bls.n	80097ee <_strtod_l+0x20e>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7c4      	b.n	8009756 <_strtod_l+0x176>
 80097cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	9215      	str	r2, [sp, #84]	; 0x54
 80097d2:	785a      	ldrb	r2, [r3, #1]
 80097d4:	3001      	adds	r0, #1
 80097d6:	2a30      	cmp	r2, #48	; 0x30
 80097d8:	d0f8      	beq.n	80097cc <_strtod_l+0x1ec>
 80097da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097de:	2b08      	cmp	r3, #8
 80097e0:	f200 84c1 	bhi.w	800a166 <_strtod_l+0xb86>
 80097e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097e6:	9005      	str	r0, [sp, #20]
 80097e8:	2000      	movs	r0, #0
 80097ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ec:	4606      	mov	r6, r0
 80097ee:	3a30      	subs	r2, #48	; 0x30
 80097f0:	f100 0301 	add.w	r3, r0, #1
 80097f4:	d014      	beq.n	8009820 <_strtod_l+0x240>
 80097f6:	9905      	ldr	r1, [sp, #20]
 80097f8:	4419      	add	r1, r3
 80097fa:	9105      	str	r1, [sp, #20]
 80097fc:	4633      	mov	r3, r6
 80097fe:	eb00 0c06 	add.w	ip, r0, r6
 8009802:	210a      	movs	r1, #10
 8009804:	4563      	cmp	r3, ip
 8009806:	d113      	bne.n	8009830 <_strtod_l+0x250>
 8009808:	1833      	adds	r3, r6, r0
 800980a:	2b08      	cmp	r3, #8
 800980c:	f106 0601 	add.w	r6, r6, #1
 8009810:	4406      	add	r6, r0
 8009812:	dc1a      	bgt.n	800984a <_strtod_l+0x26a>
 8009814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009816:	230a      	movs	r3, #10
 8009818:	fb03 2301 	mla	r3, r3, r1, r2
 800981c:	9309      	str	r3, [sp, #36]	; 0x24
 800981e:	2300      	movs	r3, #0
 8009820:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009822:	1c51      	adds	r1, r2, #1
 8009824:	9115      	str	r1, [sp, #84]	; 0x54
 8009826:	7852      	ldrb	r2, [r2, #1]
 8009828:	4618      	mov	r0, r3
 800982a:	e7c9      	b.n	80097c0 <_strtod_l+0x1e0>
 800982c:	4658      	mov	r0, fp
 800982e:	e7d2      	b.n	80097d6 <_strtod_l+0x1f6>
 8009830:	2b08      	cmp	r3, #8
 8009832:	f103 0301 	add.w	r3, r3, #1
 8009836:	dc03      	bgt.n	8009840 <_strtod_l+0x260>
 8009838:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800983a:	434f      	muls	r7, r1
 800983c:	9709      	str	r7, [sp, #36]	; 0x24
 800983e:	e7e1      	b.n	8009804 <_strtod_l+0x224>
 8009840:	2b10      	cmp	r3, #16
 8009842:	bfd8      	it	le
 8009844:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009848:	e7dc      	b.n	8009804 <_strtod_l+0x224>
 800984a:	2e10      	cmp	r6, #16
 800984c:	bfdc      	itt	le
 800984e:	230a      	movle	r3, #10
 8009850:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009854:	e7e3      	b.n	800981e <_strtod_l+0x23e>
 8009856:	2300      	movs	r3, #0
 8009858:	9305      	str	r3, [sp, #20]
 800985a:	2301      	movs	r3, #1
 800985c:	e780      	b.n	8009760 <_strtod_l+0x180>
 800985e:	f04f 0c00 	mov.w	ip, #0
 8009862:	1caa      	adds	r2, r5, #2
 8009864:	9215      	str	r2, [sp, #84]	; 0x54
 8009866:	78aa      	ldrb	r2, [r5, #2]
 8009868:	e788      	b.n	800977c <_strtod_l+0x19c>
 800986a:	f04f 0c01 	mov.w	ip, #1
 800986e:	e7f8      	b.n	8009862 <_strtod_l+0x282>
 8009870:	0800ea38 	.word	0x0800ea38
 8009874:	0800ea34 	.word	0x0800ea34
 8009878:	7ff00000 	.word	0x7ff00000
 800987c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800987e:	1c51      	adds	r1, r2, #1
 8009880:	9115      	str	r1, [sp, #84]	; 0x54
 8009882:	7852      	ldrb	r2, [r2, #1]
 8009884:	2a30      	cmp	r2, #48	; 0x30
 8009886:	d0f9      	beq.n	800987c <_strtod_l+0x29c>
 8009888:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800988c:	2908      	cmp	r1, #8
 800988e:	f63f af7a 	bhi.w	8009786 <_strtod_l+0x1a6>
 8009892:	3a30      	subs	r2, #48	; 0x30
 8009894:	9208      	str	r2, [sp, #32]
 8009896:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009898:	920c      	str	r2, [sp, #48]	; 0x30
 800989a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800989c:	1c57      	adds	r7, r2, #1
 800989e:	9715      	str	r7, [sp, #84]	; 0x54
 80098a0:	7852      	ldrb	r2, [r2, #1]
 80098a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80098a6:	f1be 0f09 	cmp.w	lr, #9
 80098aa:	d938      	bls.n	800991e <_strtod_l+0x33e>
 80098ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098ae:	1a7f      	subs	r7, r7, r1
 80098b0:	2f08      	cmp	r7, #8
 80098b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80098b6:	dc03      	bgt.n	80098c0 <_strtod_l+0x2e0>
 80098b8:	9908      	ldr	r1, [sp, #32]
 80098ba:	428f      	cmp	r7, r1
 80098bc:	bfa8      	it	ge
 80098be:	460f      	movge	r7, r1
 80098c0:	f1bc 0f00 	cmp.w	ip, #0
 80098c4:	d000      	beq.n	80098c8 <_strtod_l+0x2e8>
 80098c6:	427f      	negs	r7, r7
 80098c8:	2e00      	cmp	r6, #0
 80098ca:	d14f      	bne.n	800996c <_strtod_l+0x38c>
 80098cc:	9904      	ldr	r1, [sp, #16]
 80098ce:	4301      	orrs	r1, r0
 80098d0:	f47f aec1 	bne.w	8009656 <_strtod_l+0x76>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f47f aedb 	bne.w	8009690 <_strtod_l+0xb0>
 80098da:	2a69      	cmp	r2, #105	; 0x69
 80098dc:	d029      	beq.n	8009932 <_strtod_l+0x352>
 80098de:	dc26      	bgt.n	800992e <_strtod_l+0x34e>
 80098e0:	2a49      	cmp	r2, #73	; 0x49
 80098e2:	d026      	beq.n	8009932 <_strtod_l+0x352>
 80098e4:	2a4e      	cmp	r2, #78	; 0x4e
 80098e6:	f47f aed3 	bne.w	8009690 <_strtod_l+0xb0>
 80098ea:	499b      	ldr	r1, [pc, #620]	; (8009b58 <_strtod_l+0x578>)
 80098ec:	a815      	add	r0, sp, #84	; 0x54
 80098ee:	f001 fc23 	bl	800b138 <__match>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f aecc 	beq.w	8009690 <_strtod_l+0xb0>
 80098f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b28      	cmp	r3, #40	; 0x28
 80098fe:	d12f      	bne.n	8009960 <_strtod_l+0x380>
 8009900:	4996      	ldr	r1, [pc, #600]	; (8009b5c <_strtod_l+0x57c>)
 8009902:	aa18      	add	r2, sp, #96	; 0x60
 8009904:	a815      	add	r0, sp, #84	; 0x54
 8009906:	f001 fc2b 	bl	800b160 <__hexnan>
 800990a:	2805      	cmp	r0, #5
 800990c:	d128      	bne.n	8009960 <_strtod_l+0x380>
 800990e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009914:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009918:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800991c:	e69b      	b.n	8009656 <_strtod_l+0x76>
 800991e:	9f08      	ldr	r7, [sp, #32]
 8009920:	210a      	movs	r1, #10
 8009922:	fb01 2107 	mla	r1, r1, r7, r2
 8009926:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800992a:	9208      	str	r2, [sp, #32]
 800992c:	e7b5      	b.n	800989a <_strtod_l+0x2ba>
 800992e:	2a6e      	cmp	r2, #110	; 0x6e
 8009930:	e7d9      	b.n	80098e6 <_strtod_l+0x306>
 8009932:	498b      	ldr	r1, [pc, #556]	; (8009b60 <_strtod_l+0x580>)
 8009934:	a815      	add	r0, sp, #84	; 0x54
 8009936:	f001 fbff 	bl	800b138 <__match>
 800993a:	2800      	cmp	r0, #0
 800993c:	f43f aea8 	beq.w	8009690 <_strtod_l+0xb0>
 8009940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009942:	4988      	ldr	r1, [pc, #544]	; (8009b64 <_strtod_l+0x584>)
 8009944:	3b01      	subs	r3, #1
 8009946:	a815      	add	r0, sp, #84	; 0x54
 8009948:	9315      	str	r3, [sp, #84]	; 0x54
 800994a:	f001 fbf5 	bl	800b138 <__match>
 800994e:	b910      	cbnz	r0, 8009956 <_strtod_l+0x376>
 8009950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009952:	3301      	adds	r3, #1
 8009954:	9315      	str	r3, [sp, #84]	; 0x54
 8009956:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009b74 <_strtod_l+0x594>
 800995a:	f04f 0800 	mov.w	r8, #0
 800995e:	e67a      	b.n	8009656 <_strtod_l+0x76>
 8009960:	4881      	ldr	r0, [pc, #516]	; (8009b68 <_strtod_l+0x588>)
 8009962:	f001 f905 	bl	800ab70 <nan>
 8009966:	ec59 8b10 	vmov	r8, r9, d0
 800996a:	e674      	b.n	8009656 <_strtod_l+0x76>
 800996c:	9b05      	ldr	r3, [sp, #20]
 800996e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009970:	1afb      	subs	r3, r7, r3
 8009972:	f1bb 0f00 	cmp.w	fp, #0
 8009976:	bf08      	it	eq
 8009978:	46b3      	moveq	fp, r6
 800997a:	2e10      	cmp	r6, #16
 800997c:	9308      	str	r3, [sp, #32]
 800997e:	4635      	mov	r5, r6
 8009980:	bfa8      	it	ge
 8009982:	2510      	movge	r5, #16
 8009984:	f7f6 fde6 	bl	8000554 <__aeabi_ui2d>
 8009988:	2e09      	cmp	r6, #9
 800998a:	4680      	mov	r8, r0
 800998c:	4689      	mov	r9, r1
 800998e:	dd13      	ble.n	80099b8 <_strtod_l+0x3d8>
 8009990:	4b76      	ldr	r3, [pc, #472]	; (8009b6c <_strtod_l+0x58c>)
 8009992:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009996:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800999a:	f7f6 fe55 	bl	8000648 <__aeabi_dmul>
 800999e:	4680      	mov	r8, r0
 80099a0:	4650      	mov	r0, sl
 80099a2:	4689      	mov	r9, r1
 80099a4:	f7f6 fdd6 	bl	8000554 <__aeabi_ui2d>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f6 fc94 	bl	80002dc <__adddf3>
 80099b4:	4680      	mov	r8, r0
 80099b6:	4689      	mov	r9, r1
 80099b8:	2e0f      	cmp	r6, #15
 80099ba:	dc38      	bgt.n	8009a2e <_strtod_l+0x44e>
 80099bc:	9b08      	ldr	r3, [sp, #32]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f43f ae49 	beq.w	8009656 <_strtod_l+0x76>
 80099c4:	dd24      	ble.n	8009a10 <_strtod_l+0x430>
 80099c6:	2b16      	cmp	r3, #22
 80099c8:	dc0b      	bgt.n	80099e2 <_strtod_l+0x402>
 80099ca:	4968      	ldr	r1, [pc, #416]	; (8009b6c <_strtod_l+0x58c>)
 80099cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d4:	4642      	mov	r2, r8
 80099d6:	464b      	mov	r3, r9
 80099d8:	f7f6 fe36 	bl	8000648 <__aeabi_dmul>
 80099dc:	4680      	mov	r8, r0
 80099de:	4689      	mov	r9, r1
 80099e0:	e639      	b.n	8009656 <_strtod_l+0x76>
 80099e2:	9a08      	ldr	r2, [sp, #32]
 80099e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80099e8:	4293      	cmp	r3, r2
 80099ea:	db20      	blt.n	8009a2e <_strtod_l+0x44e>
 80099ec:	4c5f      	ldr	r4, [pc, #380]	; (8009b6c <_strtod_l+0x58c>)
 80099ee:	f1c6 060f 	rsb	r6, r6, #15
 80099f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80099f6:	4642      	mov	r2, r8
 80099f8:	464b      	mov	r3, r9
 80099fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099fe:	f7f6 fe23 	bl	8000648 <__aeabi_dmul>
 8009a02:	9b08      	ldr	r3, [sp, #32]
 8009a04:	1b9e      	subs	r6, r3, r6
 8009a06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009a0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a0e:	e7e3      	b.n	80099d8 <_strtod_l+0x3f8>
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	3316      	adds	r3, #22
 8009a14:	db0b      	blt.n	8009a2e <_strtod_l+0x44e>
 8009a16:	9b05      	ldr	r3, [sp, #20]
 8009a18:	1bdf      	subs	r7, r3, r7
 8009a1a:	4b54      	ldr	r3, [pc, #336]	; (8009b6c <_strtod_l+0x58c>)
 8009a1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a24:	4640      	mov	r0, r8
 8009a26:	4649      	mov	r1, r9
 8009a28:	f7f6 ff38 	bl	800089c <__aeabi_ddiv>
 8009a2c:	e7d6      	b.n	80099dc <_strtod_l+0x3fc>
 8009a2e:	9b08      	ldr	r3, [sp, #32]
 8009a30:	1b75      	subs	r5, r6, r5
 8009a32:	441d      	add	r5, r3
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	dd70      	ble.n	8009b1a <_strtod_l+0x53a>
 8009a38:	f015 030f 	ands.w	r3, r5, #15
 8009a3c:	d00a      	beq.n	8009a54 <_strtod_l+0x474>
 8009a3e:	494b      	ldr	r1, [pc, #300]	; (8009b6c <_strtod_l+0x58c>)
 8009a40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4c:	f7f6 fdfc 	bl	8000648 <__aeabi_dmul>
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	f035 050f 	bics.w	r5, r5, #15
 8009a58:	d04d      	beq.n	8009af6 <_strtod_l+0x516>
 8009a5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009a5e:	dd22      	ble.n	8009aa6 <_strtod_l+0x4c6>
 8009a60:	2500      	movs	r5, #0
 8009a62:	46ab      	mov	fp, r5
 8009a64:	9509      	str	r5, [sp, #36]	; 0x24
 8009a66:	9505      	str	r5, [sp, #20]
 8009a68:	2322      	movs	r3, #34	; 0x22
 8009a6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009b74 <_strtod_l+0x594>
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	f04f 0800 	mov.w	r8, #0
 8009a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f43f aded 	beq.w	8009656 <_strtod_l+0x76>
 8009a7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7ff f924 	bl	8008ccc <_Bfree>
 8009a84:	9905      	ldr	r1, [sp, #20]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7ff f920 	bl	8008ccc <_Bfree>
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff f91c 	bl	8008ccc <_Bfree>
 8009a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7ff f918 	bl	8008ccc <_Bfree>
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f7ff f914 	bl	8008ccc <_Bfree>
 8009aa4:	e5d7      	b.n	8009656 <_strtod_l+0x76>
 8009aa6:	4b32      	ldr	r3, [pc, #200]	; (8009b70 <_strtod_l+0x590>)
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	112d      	asrs	r5, r5, #4
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	469a      	mov	sl, r3
 8009ab4:	2d01      	cmp	r5, #1
 8009ab6:	dc21      	bgt.n	8009afc <_strtod_l+0x51c>
 8009ab8:	b10b      	cbz	r3, 8009abe <_strtod_l+0x4de>
 8009aba:	4680      	mov	r8, r0
 8009abc:	4689      	mov	r9, r1
 8009abe:	492c      	ldr	r1, [pc, #176]	; (8009b70 <_strtod_l+0x590>)
 8009ac0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009ac4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009ac8:	4642      	mov	r2, r8
 8009aca:	464b      	mov	r3, r9
 8009acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad0:	f7f6 fdba 	bl	8000648 <__aeabi_dmul>
 8009ad4:	4b27      	ldr	r3, [pc, #156]	; (8009b74 <_strtod_l+0x594>)
 8009ad6:	460a      	mov	r2, r1
 8009ad8:	400b      	ands	r3, r1
 8009ada:	4927      	ldr	r1, [pc, #156]	; (8009b78 <_strtod_l+0x598>)
 8009adc:	428b      	cmp	r3, r1
 8009ade:	4680      	mov	r8, r0
 8009ae0:	d8be      	bhi.n	8009a60 <_strtod_l+0x480>
 8009ae2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ae6:	428b      	cmp	r3, r1
 8009ae8:	bf86      	itte	hi
 8009aea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009b7c <_strtod_l+0x59c>
 8009aee:	f04f 38ff 	movhi.w	r8, #4294967295
 8009af2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009af6:	2300      	movs	r3, #0
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	e07b      	b.n	8009bf4 <_strtod_l+0x614>
 8009afc:	07ea      	lsls	r2, r5, #31
 8009afe:	d505      	bpl.n	8009b0c <_strtod_l+0x52c>
 8009b00:	9b04      	ldr	r3, [sp, #16]
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fd9f 	bl	8000648 <__aeabi_dmul>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	9a04      	ldr	r2, [sp, #16]
 8009b0e:	3208      	adds	r2, #8
 8009b10:	f10a 0a01 	add.w	sl, sl, #1
 8009b14:	106d      	asrs	r5, r5, #1
 8009b16:	9204      	str	r2, [sp, #16]
 8009b18:	e7cc      	b.n	8009ab4 <_strtod_l+0x4d4>
 8009b1a:	d0ec      	beq.n	8009af6 <_strtod_l+0x516>
 8009b1c:	426d      	negs	r5, r5
 8009b1e:	f015 020f 	ands.w	r2, r5, #15
 8009b22:	d00a      	beq.n	8009b3a <_strtod_l+0x55a>
 8009b24:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <_strtod_l+0x58c>)
 8009b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 feb3 	bl	800089c <__aeabi_ddiv>
 8009b36:	4680      	mov	r8, r0
 8009b38:	4689      	mov	r9, r1
 8009b3a:	112d      	asrs	r5, r5, #4
 8009b3c:	d0db      	beq.n	8009af6 <_strtod_l+0x516>
 8009b3e:	2d1f      	cmp	r5, #31
 8009b40:	dd1e      	ble.n	8009b80 <_strtod_l+0x5a0>
 8009b42:	2500      	movs	r5, #0
 8009b44:	46ab      	mov	fp, r5
 8009b46:	9509      	str	r5, [sp, #36]	; 0x24
 8009b48:	9505      	str	r5, [sp, #20]
 8009b4a:	2322      	movs	r3, #34	; 0x22
 8009b4c:	f04f 0800 	mov.w	r8, #0
 8009b50:	f04f 0900 	mov.w	r9, #0
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	e78d      	b.n	8009a74 <_strtod_l+0x494>
 8009b58:	0800e825 	.word	0x0800e825
 8009b5c:	0800ea4c 	.word	0x0800ea4c
 8009b60:	0800e81d 	.word	0x0800e81d
 8009b64:	0800e854 	.word	0x0800e854
 8009b68:	0800ebdd 	.word	0x0800ebdd
 8009b6c:	0800e960 	.word	0x0800e960
 8009b70:	0800e938 	.word	0x0800e938
 8009b74:	7ff00000 	.word	0x7ff00000
 8009b78:	7ca00000 	.word	0x7ca00000
 8009b7c:	7fefffff 	.word	0x7fefffff
 8009b80:	f015 0310 	ands.w	r3, r5, #16
 8009b84:	bf18      	it	ne
 8009b86:	236a      	movne	r3, #106	; 0x6a
 8009b88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009f2c <_strtod_l+0x94c>
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	2300      	movs	r3, #0
 8009b94:	07ea      	lsls	r2, r5, #31
 8009b96:	d504      	bpl.n	8009ba2 <_strtod_l+0x5c2>
 8009b98:	e9da 2300 	ldrd	r2, r3, [sl]
 8009b9c:	f7f6 fd54 	bl	8000648 <__aeabi_dmul>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	106d      	asrs	r5, r5, #1
 8009ba4:	f10a 0a08 	add.w	sl, sl, #8
 8009ba8:	d1f4      	bne.n	8009b94 <_strtod_l+0x5b4>
 8009baa:	b10b      	cbz	r3, 8009bb0 <_strtod_l+0x5d0>
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	b1bb      	cbz	r3, 8009be4 <_strtod_l+0x604>
 8009bb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009bb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	dd10      	ble.n	8009be4 <_strtod_l+0x604>
 8009bc2:	2b1f      	cmp	r3, #31
 8009bc4:	f340 811e 	ble.w	8009e04 <_strtod_l+0x824>
 8009bc8:	2b34      	cmp	r3, #52	; 0x34
 8009bca:	bfde      	ittt	le
 8009bcc:	f04f 33ff 	movle.w	r3, #4294967295
 8009bd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009bd4:	4093      	lslle	r3, r2
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	bfcc      	ite	gt
 8009bdc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009be0:	ea03 0901 	andle.w	r9, r3, r1
 8009be4:	2200      	movs	r2, #0
 8009be6:	2300      	movs	r3, #0
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	f7f6 ff94 	bl	8000b18 <__aeabi_dcmpeq>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1a6      	bne.n	8009b42 <_strtod_l+0x562>
 8009bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bfa:	4633      	mov	r3, r6
 8009bfc:	465a      	mov	r2, fp
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7ff f8cc 	bl	8008d9c <__s2b>
 8009c04:	9009      	str	r0, [sp, #36]	; 0x24
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f43f af2a 	beq.w	8009a60 <_strtod_l+0x480>
 8009c0c:	9a08      	ldr	r2, [sp, #32]
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	eba3 0307 	sub.w	r3, r3, r7
 8009c16:	bfa8      	it	ge
 8009c18:	2300      	movge	r3, #0
 8009c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c22:	9312      	str	r3, [sp, #72]	; 0x48
 8009c24:	46ab      	mov	fp, r5
 8009c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c28:	4620      	mov	r0, r4
 8009c2a:	6859      	ldr	r1, [r3, #4]
 8009c2c:	f7ff f80e 	bl	8008c4c <_Balloc>
 8009c30:	9005      	str	r0, [sp, #20]
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f43f af18 	beq.w	8009a68 <_strtod_l+0x488>
 8009c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	3202      	adds	r2, #2
 8009c3e:	f103 010c 	add.w	r1, r3, #12
 8009c42:	0092      	lsls	r2, r2, #2
 8009c44:	300c      	adds	r0, #12
 8009c46:	f000 ff83 	bl	800ab50 <memcpy>
 8009c4a:	ec49 8b10 	vmov	d0, r8, r9
 8009c4e:	aa18      	add	r2, sp, #96	; 0x60
 8009c50:	a917      	add	r1, sp, #92	; 0x5c
 8009c52:	4620      	mov	r0, r4
 8009c54:	f7ff fbd6 	bl	8009404 <__d2b>
 8009c58:	ec49 8b18 	vmov	d8, r8, r9
 8009c5c:	9016      	str	r0, [sp, #88]	; 0x58
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f43f af02 	beq.w	8009a68 <_strtod_l+0x488>
 8009c64:	2101      	movs	r1, #1
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff f930 	bl	8008ecc <__i2b>
 8009c6c:	4683      	mov	fp, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f43f aefa 	beq.w	8009a68 <_strtod_l+0x488>
 8009c74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009c76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c78:	2e00      	cmp	r6, #0
 8009c7a:	bfab      	itete	ge
 8009c7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009c7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009c80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009c86:	bfac      	ite	ge
 8009c88:	eb06 0a03 	addge.w	sl, r6, r3
 8009c8c:	1b9f      	sublt	r7, r3, r6
 8009c8e:	9b04      	ldr	r3, [sp, #16]
 8009c90:	1af6      	subs	r6, r6, r3
 8009c92:	4416      	add	r6, r2
 8009c94:	4ba0      	ldr	r3, [pc, #640]	; (8009f18 <_strtod_l+0x938>)
 8009c96:	3e01      	subs	r6, #1
 8009c98:	429e      	cmp	r6, r3
 8009c9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c9e:	f280 80c4 	bge.w	8009e2a <_strtod_l+0x84a>
 8009ca2:	1b9b      	subs	r3, r3, r6
 8009ca4:	2b1f      	cmp	r3, #31
 8009ca6:	eba2 0203 	sub.w	r2, r2, r3
 8009caa:	f04f 0101 	mov.w	r1, #1
 8009cae:	f300 80b0 	bgt.w	8009e12 <_strtod_l+0x832>
 8009cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8009cb8:	2300      	movs	r3, #0
 8009cba:	930d      	str	r3, [sp, #52]	; 0x34
 8009cbc:	eb0a 0602 	add.w	r6, sl, r2
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	45b2      	cmp	sl, r6
 8009cc4:	4417      	add	r7, r2
 8009cc6:	441f      	add	r7, r3
 8009cc8:	4653      	mov	r3, sl
 8009cca:	bfa8      	it	ge
 8009ccc:	4633      	movge	r3, r6
 8009cce:	42bb      	cmp	r3, r7
 8009cd0:	bfa8      	it	ge
 8009cd2:	463b      	movge	r3, r7
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfc2      	ittt	gt
 8009cd8:	1af6      	subgt	r6, r6, r3
 8009cda:	1aff      	subgt	r7, r7, r3
 8009cdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dd17      	ble.n	8009d16 <_strtod_l+0x736>
 8009ce6:	4659      	mov	r1, fp
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff f9ae 	bl	800904c <__pow5mult>
 8009cf0:	4683      	mov	fp, r0
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	f43f aeb8 	beq.w	8009a68 <_strtod_l+0x488>
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff f8fb 	bl	8008ef8 <__multiply>
 8009d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f43f aeaf 	beq.w	8009a68 <_strtod_l+0x488>
 8009d0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f7fe ffdd 	bl	8008ccc <_Bfree>
 8009d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d14:	9316      	str	r3, [sp, #88]	; 0x58
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	f300 808c 	bgt.w	8009e34 <_strtod_l+0x854>
 8009d1c:	9b08      	ldr	r3, [sp, #32]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dd08      	ble.n	8009d34 <_strtod_l+0x754>
 8009d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d24:	9905      	ldr	r1, [sp, #20]
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7ff f990 	bl	800904c <__pow5mult>
 8009d2c:	9005      	str	r0, [sp, #20]
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f43f ae9a 	beq.w	8009a68 <_strtod_l+0x488>
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	dd08      	ble.n	8009d4a <_strtod_l+0x76a>
 8009d38:	9905      	ldr	r1, [sp, #20]
 8009d3a:	463a      	mov	r2, r7
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7ff f9df 	bl	8009100 <__lshift>
 8009d42:	9005      	str	r0, [sp, #20]
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f43f ae8f 	beq.w	8009a68 <_strtod_l+0x488>
 8009d4a:	f1ba 0f00 	cmp.w	sl, #0
 8009d4e:	dd08      	ble.n	8009d62 <_strtod_l+0x782>
 8009d50:	4659      	mov	r1, fp
 8009d52:	4652      	mov	r2, sl
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7ff f9d3 	bl	8009100 <__lshift>
 8009d5a:	4683      	mov	fp, r0
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	f43f ae83 	beq.w	8009a68 <_strtod_l+0x488>
 8009d62:	9a05      	ldr	r2, [sp, #20]
 8009d64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7ff fa52 	bl	8009210 <__mdiff>
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f43f ae7a 	beq.w	8009a68 <_strtod_l+0x488>
 8009d74:	68c3      	ldr	r3, [r0, #12]
 8009d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60c3      	str	r3, [r0, #12]
 8009d7c:	4659      	mov	r1, fp
 8009d7e:	f7ff fa2b 	bl	80091d8 <__mcmp>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	da60      	bge.n	8009e48 <_strtod_l+0x868>
 8009d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d88:	ea53 0308 	orrs.w	r3, r3, r8
 8009d8c:	f040 8084 	bne.w	8009e98 <_strtod_l+0x8b8>
 8009d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d17f      	bne.n	8009e98 <_strtod_l+0x8b8>
 8009d98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d9c:	0d1b      	lsrs	r3, r3, #20
 8009d9e:	051b      	lsls	r3, r3, #20
 8009da0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009da4:	d978      	bls.n	8009e98 <_strtod_l+0x8b8>
 8009da6:	696b      	ldr	r3, [r5, #20]
 8009da8:	b913      	cbnz	r3, 8009db0 <_strtod_l+0x7d0>
 8009daa:	692b      	ldr	r3, [r5, #16]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	dd73      	ble.n	8009e98 <_strtod_l+0x8b8>
 8009db0:	4629      	mov	r1, r5
 8009db2:	2201      	movs	r2, #1
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7ff f9a3 	bl	8009100 <__lshift>
 8009dba:	4659      	mov	r1, fp
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	f7ff fa0b 	bl	80091d8 <__mcmp>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	dd68      	ble.n	8009e98 <_strtod_l+0x8b8>
 8009dc6:	9904      	ldr	r1, [sp, #16]
 8009dc8:	4a54      	ldr	r2, [pc, #336]	; (8009f1c <_strtod_l+0x93c>)
 8009dca:	464b      	mov	r3, r9
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	f000 8084 	beq.w	8009eda <_strtod_l+0x8fa>
 8009dd2:	ea02 0109 	and.w	r1, r2, r9
 8009dd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009dda:	dc7e      	bgt.n	8009eda <_strtod_l+0x8fa>
 8009ddc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009de0:	f77f aeb3 	ble.w	8009b4a <_strtod_l+0x56a>
 8009de4:	4b4e      	ldr	r3, [pc, #312]	; (8009f20 <_strtod_l+0x940>)
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	2200      	movs	r2, #0
 8009dec:	f7f6 fc2c 	bl	8000648 <__aeabi_dmul>
 8009df0:	4b4a      	ldr	r3, [pc, #296]	; (8009f1c <_strtod_l+0x93c>)
 8009df2:	400b      	ands	r3, r1
 8009df4:	4680      	mov	r8, r0
 8009df6:	4689      	mov	r9, r1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f47f ae3f 	bne.w	8009a7c <_strtod_l+0x49c>
 8009dfe:	2322      	movs	r3, #34	; 0x22
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	e63b      	b.n	8009a7c <_strtod_l+0x49c>
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	ea03 0808 	and.w	r8, r3, r8
 8009e10:	e6e8      	b.n	8009be4 <_strtod_l+0x604>
 8009e12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009e16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009e1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009e1e:	36e2      	adds	r6, #226	; 0xe2
 8009e20:	fa01 f306 	lsl.w	r3, r1, r6
 8009e24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009e28:	e748      	b.n	8009cbc <_strtod_l+0x6dc>
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009e32:	e743      	b.n	8009cbc <_strtod_l+0x6dc>
 8009e34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e36:	4632      	mov	r2, r6
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f7ff f961 	bl	8009100 <__lshift>
 8009e3e:	9016      	str	r0, [sp, #88]	; 0x58
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f47f af6b 	bne.w	8009d1c <_strtod_l+0x73c>
 8009e46:	e60f      	b.n	8009a68 <_strtod_l+0x488>
 8009e48:	46ca      	mov	sl, r9
 8009e4a:	d171      	bne.n	8009f30 <_strtod_l+0x950>
 8009e4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e52:	b352      	cbz	r2, 8009eaa <_strtod_l+0x8ca>
 8009e54:	4a33      	ldr	r2, [pc, #204]	; (8009f24 <_strtod_l+0x944>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d12a      	bne.n	8009eb0 <_strtod_l+0x8d0>
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	4641      	mov	r1, r8
 8009e5e:	b1fb      	cbz	r3, 8009ea0 <_strtod_l+0x8c0>
 8009e60:	4b2e      	ldr	r3, [pc, #184]	; (8009f1c <_strtod_l+0x93c>)
 8009e62:	ea09 0303 	and.w	r3, r9, r3
 8009e66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	d81a      	bhi.n	8009ea6 <_strtod_l+0x8c6>
 8009e70:	0d1b      	lsrs	r3, r3, #20
 8009e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e76:	fa02 f303 	lsl.w	r3, r2, r3
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d118      	bne.n	8009eb0 <_strtod_l+0x8d0>
 8009e7e:	4b2a      	ldr	r3, [pc, #168]	; (8009f28 <_strtod_l+0x948>)
 8009e80:	459a      	cmp	sl, r3
 8009e82:	d102      	bne.n	8009e8a <_strtod_l+0x8aa>
 8009e84:	3101      	adds	r1, #1
 8009e86:	f43f adef 	beq.w	8009a68 <_strtod_l+0x488>
 8009e8a:	4b24      	ldr	r3, [pc, #144]	; (8009f1c <_strtod_l+0x93c>)
 8009e8c:	ea0a 0303 	and.w	r3, sl, r3
 8009e90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009e94:	f04f 0800 	mov.w	r8, #0
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1a2      	bne.n	8009de4 <_strtod_l+0x804>
 8009e9e:	e5ed      	b.n	8009a7c <_strtod_l+0x49c>
 8009ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea4:	e7e9      	b.n	8009e7a <_strtod_l+0x89a>
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	e7e7      	b.n	8009e7a <_strtod_l+0x89a>
 8009eaa:	ea53 0308 	orrs.w	r3, r3, r8
 8009eae:	d08a      	beq.n	8009dc6 <_strtod_l+0x7e6>
 8009eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eb2:	b1e3      	cbz	r3, 8009eee <_strtod_l+0x90e>
 8009eb4:	ea13 0f0a 	tst.w	r3, sl
 8009eb8:	d0ee      	beq.n	8009e98 <_strtod_l+0x8b8>
 8009eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ebc:	9a04      	ldr	r2, [sp, #16]
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	b1c3      	cbz	r3, 8009ef6 <_strtod_l+0x916>
 8009ec4:	f7ff fb6f 	bl	80095a6 <sulp>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	ec51 0b18 	vmov	r0, r1, d8
 8009ed0:	f7f6 fa04 	bl	80002dc <__adddf3>
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	e7de      	b.n	8009e98 <_strtod_l+0x8b8>
 8009eda:	4013      	ands	r3, r2
 8009edc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ee0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ee4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009ee8:	f04f 38ff 	mov.w	r8, #4294967295
 8009eec:	e7d4      	b.n	8009e98 <_strtod_l+0x8b8>
 8009eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ef0:	ea13 0f08 	tst.w	r3, r8
 8009ef4:	e7e0      	b.n	8009eb8 <_strtod_l+0x8d8>
 8009ef6:	f7ff fb56 	bl	80095a6 <sulp>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	ec51 0b18 	vmov	r0, r1, d8
 8009f02:	f7f6 f9e9 	bl	80002d8 <__aeabi_dsub>
 8009f06:	2200      	movs	r2, #0
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	4689      	mov	r9, r1
 8009f0e:	f7f6 fe03 	bl	8000b18 <__aeabi_dcmpeq>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d0c0      	beq.n	8009e98 <_strtod_l+0x8b8>
 8009f16:	e618      	b.n	8009b4a <_strtod_l+0x56a>
 8009f18:	fffffc02 	.word	0xfffffc02
 8009f1c:	7ff00000 	.word	0x7ff00000
 8009f20:	39500000 	.word	0x39500000
 8009f24:	000fffff 	.word	0x000fffff
 8009f28:	7fefffff 	.word	0x7fefffff
 8009f2c:	0800ea60 	.word	0x0800ea60
 8009f30:	4659      	mov	r1, fp
 8009f32:	4628      	mov	r0, r5
 8009f34:	f7ff fac0 	bl	80094b8 <__ratio>
 8009f38:	ec57 6b10 	vmov	r6, r7, d0
 8009f3c:	ee10 0a10 	vmov	r0, s0
 8009f40:	2200      	movs	r2, #0
 8009f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f46:	4639      	mov	r1, r7
 8009f48:	f7f6 fdfa 	bl	8000b40 <__aeabi_dcmple>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d071      	beq.n	800a034 <_strtod_l+0xa54>
 8009f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d17c      	bne.n	800a050 <_strtod_l+0xa70>
 8009f56:	f1b8 0f00 	cmp.w	r8, #0
 8009f5a:	d15a      	bne.n	800a012 <_strtod_l+0xa32>
 8009f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d15d      	bne.n	800a020 <_strtod_l+0xa40>
 8009f64:	4b90      	ldr	r3, [pc, #576]	; (800a1a8 <_strtod_l+0xbc8>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	4630      	mov	r0, r6
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	f7f6 fdde 	bl	8000b2c <__aeabi_dcmplt>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d15c      	bne.n	800a02e <_strtod_l+0xa4e>
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <_strtod_l+0xbcc>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f7f6 fb64 	bl	8000648 <__aeabi_dmul>
 8009f80:	4606      	mov	r6, r0
 8009f82:	460f      	mov	r7, r1
 8009f84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009f88:	9606      	str	r6, [sp, #24]
 8009f8a:	9307      	str	r3, [sp, #28]
 8009f8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009f94:	4b86      	ldr	r3, [pc, #536]	; (800a1b0 <_strtod_l+0xbd0>)
 8009f96:	ea0a 0303 	and.w	r3, sl, r3
 8009f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f9e:	4b85      	ldr	r3, [pc, #532]	; (800a1b4 <_strtod_l+0xbd4>)
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	f040 8090 	bne.w	800a0c6 <_strtod_l+0xae6>
 8009fa6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009faa:	ec49 8b10 	vmov	d0, r8, r9
 8009fae:	f7ff f9b9 	bl	8009324 <__ulp>
 8009fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fb6:	ec51 0b10 	vmov	r0, r1, d0
 8009fba:	f7f6 fb45 	bl	8000648 <__aeabi_dmul>
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	f7f6 f98b 	bl	80002dc <__adddf3>
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4979      	ldr	r1, [pc, #484]	; (800a1b0 <_strtod_l+0xbd0>)
 8009fca:	4a7b      	ldr	r2, [pc, #492]	; (800a1b8 <_strtod_l+0xbd8>)
 8009fcc:	4019      	ands	r1, r3
 8009fce:	4291      	cmp	r1, r2
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	d944      	bls.n	800a05e <_strtod_l+0xa7e>
 8009fd4:	ee18 2a90 	vmov	r2, s17
 8009fd8:	4b78      	ldr	r3, [pc, #480]	; (800a1bc <_strtod_l+0xbdc>)
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d104      	bne.n	8009fe8 <_strtod_l+0xa08>
 8009fde:	ee18 3a10 	vmov	r3, s16
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	f43f ad40 	beq.w	8009a68 <_strtod_l+0x488>
 8009fe8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a1bc <_strtod_l+0xbdc>
 8009fec:	f04f 38ff 	mov.w	r8, #4294967295
 8009ff0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7fe fe6a 	bl	8008ccc <_Bfree>
 8009ff8:	9905      	ldr	r1, [sp, #20]
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f7fe fe66 	bl	8008ccc <_Bfree>
 800a000:	4659      	mov	r1, fp
 800a002:	4620      	mov	r0, r4
 800a004:	f7fe fe62 	bl	8008ccc <_Bfree>
 800a008:	4629      	mov	r1, r5
 800a00a:	4620      	mov	r0, r4
 800a00c:	f7fe fe5e 	bl	8008ccc <_Bfree>
 800a010:	e609      	b.n	8009c26 <_strtod_l+0x646>
 800a012:	f1b8 0f01 	cmp.w	r8, #1
 800a016:	d103      	bne.n	800a020 <_strtod_l+0xa40>
 800a018:	f1b9 0f00 	cmp.w	r9, #0
 800a01c:	f43f ad95 	beq.w	8009b4a <_strtod_l+0x56a>
 800a020:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a178 <_strtod_l+0xb98>
 800a024:	4f60      	ldr	r7, [pc, #384]	; (800a1a8 <_strtod_l+0xbc8>)
 800a026:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a02a:	2600      	movs	r6, #0
 800a02c:	e7ae      	b.n	8009f8c <_strtod_l+0x9ac>
 800a02e:	4f5f      	ldr	r7, [pc, #380]	; (800a1ac <_strtod_l+0xbcc>)
 800a030:	2600      	movs	r6, #0
 800a032:	e7a7      	b.n	8009f84 <_strtod_l+0x9a4>
 800a034:	4b5d      	ldr	r3, [pc, #372]	; (800a1ac <_strtod_l+0xbcc>)
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	2200      	movs	r2, #0
 800a03c:	f7f6 fb04 	bl	8000648 <__aeabi_dmul>
 800a040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a042:	4606      	mov	r6, r0
 800a044:	460f      	mov	r7, r1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d09c      	beq.n	8009f84 <_strtod_l+0x9a4>
 800a04a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a04e:	e79d      	b.n	8009f8c <_strtod_l+0x9ac>
 800a050:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a180 <_strtod_l+0xba0>
 800a054:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a058:	ec57 6b17 	vmov	r6, r7, d7
 800a05c:	e796      	b.n	8009f8c <_strtod_l+0x9ac>
 800a05e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	46ca      	mov	sl, r9
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1c2      	bne.n	8009ff0 <_strtod_l+0xa10>
 800a06a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a06e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a070:	0d1b      	lsrs	r3, r3, #20
 800a072:	051b      	lsls	r3, r3, #20
 800a074:	429a      	cmp	r2, r3
 800a076:	d1bb      	bne.n	8009ff0 <_strtod_l+0xa10>
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 fe44 	bl	8000d08 <__aeabi_d2lz>
 800a080:	f7f6 fab4 	bl	80005ec <__aeabi_l2d>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 f924 	bl	80002d8 <__aeabi_dsub>
 800a090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a096:	ea43 0308 	orr.w	r3, r3, r8
 800a09a:	4313      	orrs	r3, r2
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	d054      	beq.n	800a14c <_strtod_l+0xb6c>
 800a0a2:	a339      	add	r3, pc, #228	; (adr r3, 800a188 <_strtod_l+0xba8>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7f6 fd40 	bl	8000b2c <__aeabi_dcmplt>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f47f ace5 	bne.w	8009a7c <_strtod_l+0x49c>
 800a0b2:	a337      	add	r3, pc, #220	; (adr r3, 800a190 <_strtod_l+0xbb0>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 fd54 	bl	8000b68 <__aeabi_dcmpgt>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d095      	beq.n	8009ff0 <_strtod_l+0xa10>
 800a0c4:	e4da      	b.n	8009a7c <_strtod_l+0x49c>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	b333      	cbz	r3, 800a118 <_strtod_l+0xb38>
 800a0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0d0:	d822      	bhi.n	800a118 <_strtod_l+0xb38>
 800a0d2:	a331      	add	r3, pc, #196	; (adr r3, 800a198 <_strtod_l+0xbb8>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 fd30 	bl	8000b40 <__aeabi_dcmple>
 800a0e0:	b1a0      	cbz	r0, 800a10c <_strtod_l+0xb2c>
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7f6 fd87 	bl	8000bf8 <__aeabi_d2uiz>
 800a0ea:	2801      	cmp	r0, #1
 800a0ec:	bf38      	it	cc
 800a0ee:	2001      	movcc	r0, #1
 800a0f0:	f7f6 fa30 	bl	8000554 <__aeabi_ui2d>
 800a0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	bb23      	cbnz	r3, 800a146 <_strtod_l+0xb66>
 800a0fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a100:	9010      	str	r0, [sp, #64]	; 0x40
 800a102:	9311      	str	r3, [sp, #68]	; 0x44
 800a104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a108:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a110:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	930f      	str	r3, [sp, #60]	; 0x3c
 800a118:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a11c:	eeb0 0a48 	vmov.f32	s0, s16
 800a120:	eef0 0a68 	vmov.f32	s1, s17
 800a124:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a128:	f7ff f8fc 	bl	8009324 <__ulp>
 800a12c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a130:	ec53 2b10 	vmov	r2, r3, d0
 800a134:	f7f6 fa88 	bl	8000648 <__aeabi_dmul>
 800a138:	ec53 2b18 	vmov	r2, r3, d8
 800a13c:	f7f6 f8ce 	bl	80002dc <__adddf3>
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	e78d      	b.n	800a062 <_strtod_l+0xa82>
 800a146:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a14a:	e7db      	b.n	800a104 <_strtod_l+0xb24>
 800a14c:	a314      	add	r3, pc, #80	; (adr r3, 800a1a0 <_strtod_l+0xbc0>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7f6 fceb 	bl	8000b2c <__aeabi_dcmplt>
 800a156:	e7b3      	b.n	800a0c0 <_strtod_l+0xae0>
 800a158:	2300      	movs	r3, #0
 800a15a:	930a      	str	r3, [sp, #40]	; 0x28
 800a15c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a15e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	f7ff ba7c 	b.w	800965e <_strtod_l+0x7e>
 800a166:	2a65      	cmp	r2, #101	; 0x65
 800a168:	f43f ab75 	beq.w	8009856 <_strtod_l+0x276>
 800a16c:	2a45      	cmp	r2, #69	; 0x45
 800a16e:	f43f ab72 	beq.w	8009856 <_strtod_l+0x276>
 800a172:	2301      	movs	r3, #1
 800a174:	f7ff bbaa 	b.w	80098cc <_strtod_l+0x2ec>
 800a178:	00000000 	.word	0x00000000
 800a17c:	bff00000 	.word	0xbff00000
 800a180:	00000000 	.word	0x00000000
 800a184:	3ff00000 	.word	0x3ff00000
 800a188:	94a03595 	.word	0x94a03595
 800a18c:	3fdfffff 	.word	0x3fdfffff
 800a190:	35afe535 	.word	0x35afe535
 800a194:	3fe00000 	.word	0x3fe00000
 800a198:	ffc00000 	.word	0xffc00000
 800a19c:	41dfffff 	.word	0x41dfffff
 800a1a0:	94a03595 	.word	0x94a03595
 800a1a4:	3fcfffff 	.word	0x3fcfffff
 800a1a8:	3ff00000 	.word	0x3ff00000
 800a1ac:	3fe00000 	.word	0x3fe00000
 800a1b0:	7ff00000 	.word	0x7ff00000
 800a1b4:	7fe00000 	.word	0x7fe00000
 800a1b8:	7c9fffff 	.word	0x7c9fffff
 800a1bc:	7fefffff 	.word	0x7fefffff

0800a1c0 <_strtod_r>:
 800a1c0:	4b01      	ldr	r3, [pc, #4]	; (800a1c8 <_strtod_r+0x8>)
 800a1c2:	f7ff ba0d 	b.w	80095e0 <_strtod_l>
 800a1c6:	bf00      	nop
 800a1c8:	20000070 	.word	0x20000070

0800a1cc <_strtol_l.constprop.0>:
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d2:	d001      	beq.n	800a1d8 <_strtol_l.constprop.0+0xc>
 800a1d4:	2b24      	cmp	r3, #36	; 0x24
 800a1d6:	d906      	bls.n	800a1e6 <_strtol_l.constprop.0+0x1a>
 800a1d8:	f7fd fd88 	bl	8007cec <__errno>
 800a1dc:	2316      	movs	r3, #22
 800a1de:	6003      	str	r3, [r0, #0]
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2cc <_strtol_l.constprop.0+0x100>
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	462e      	mov	r6, r5
 800a1ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a1f6:	f017 0708 	ands.w	r7, r7, #8
 800a1fa:	d1f7      	bne.n	800a1ec <_strtol_l.constprop.0+0x20>
 800a1fc:	2c2d      	cmp	r4, #45	; 0x2d
 800a1fe:	d132      	bne.n	800a266 <_strtol_l.constprop.0+0x9a>
 800a200:	782c      	ldrb	r4, [r5, #0]
 800a202:	2701      	movs	r7, #1
 800a204:	1cb5      	adds	r5, r6, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d05b      	beq.n	800a2c2 <_strtol_l.constprop.0+0xf6>
 800a20a:	2b10      	cmp	r3, #16
 800a20c:	d109      	bne.n	800a222 <_strtol_l.constprop.0+0x56>
 800a20e:	2c30      	cmp	r4, #48	; 0x30
 800a210:	d107      	bne.n	800a222 <_strtol_l.constprop.0+0x56>
 800a212:	782c      	ldrb	r4, [r5, #0]
 800a214:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a218:	2c58      	cmp	r4, #88	; 0x58
 800a21a:	d14d      	bne.n	800a2b8 <_strtol_l.constprop.0+0xec>
 800a21c:	786c      	ldrb	r4, [r5, #1]
 800a21e:	2310      	movs	r3, #16
 800a220:	3502      	adds	r5, #2
 800a222:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a226:	f108 38ff 	add.w	r8, r8, #4294967295
 800a22a:	f04f 0e00 	mov.w	lr, #0
 800a22e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a232:	4676      	mov	r6, lr
 800a234:	fb03 8a19 	mls	sl, r3, r9, r8
 800a238:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a23c:	f1bc 0f09 	cmp.w	ip, #9
 800a240:	d816      	bhi.n	800a270 <_strtol_l.constprop.0+0xa4>
 800a242:	4664      	mov	r4, ip
 800a244:	42a3      	cmp	r3, r4
 800a246:	dd24      	ble.n	800a292 <_strtol_l.constprop.0+0xc6>
 800a248:	f1be 3fff 	cmp.w	lr, #4294967295
 800a24c:	d008      	beq.n	800a260 <_strtol_l.constprop.0+0x94>
 800a24e:	45b1      	cmp	r9, r6
 800a250:	d31c      	bcc.n	800a28c <_strtol_l.constprop.0+0xc0>
 800a252:	d101      	bne.n	800a258 <_strtol_l.constprop.0+0x8c>
 800a254:	45a2      	cmp	sl, r4
 800a256:	db19      	blt.n	800a28c <_strtol_l.constprop.0+0xc0>
 800a258:	fb06 4603 	mla	r6, r6, r3, r4
 800a25c:	f04f 0e01 	mov.w	lr, #1
 800a260:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a264:	e7e8      	b.n	800a238 <_strtol_l.constprop.0+0x6c>
 800a266:	2c2b      	cmp	r4, #43	; 0x2b
 800a268:	bf04      	itt	eq
 800a26a:	782c      	ldrbeq	r4, [r5, #0]
 800a26c:	1cb5      	addeq	r5, r6, #2
 800a26e:	e7ca      	b.n	800a206 <_strtol_l.constprop.0+0x3a>
 800a270:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a274:	f1bc 0f19 	cmp.w	ip, #25
 800a278:	d801      	bhi.n	800a27e <_strtol_l.constprop.0+0xb2>
 800a27a:	3c37      	subs	r4, #55	; 0x37
 800a27c:	e7e2      	b.n	800a244 <_strtol_l.constprop.0+0x78>
 800a27e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a282:	f1bc 0f19 	cmp.w	ip, #25
 800a286:	d804      	bhi.n	800a292 <_strtol_l.constprop.0+0xc6>
 800a288:	3c57      	subs	r4, #87	; 0x57
 800a28a:	e7db      	b.n	800a244 <_strtol_l.constprop.0+0x78>
 800a28c:	f04f 3eff 	mov.w	lr, #4294967295
 800a290:	e7e6      	b.n	800a260 <_strtol_l.constprop.0+0x94>
 800a292:	f1be 3fff 	cmp.w	lr, #4294967295
 800a296:	d105      	bne.n	800a2a4 <_strtol_l.constprop.0+0xd8>
 800a298:	2322      	movs	r3, #34	; 0x22
 800a29a:	6003      	str	r3, [r0, #0]
 800a29c:	4646      	mov	r6, r8
 800a29e:	b942      	cbnz	r2, 800a2b2 <_strtol_l.constprop.0+0xe6>
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	e79e      	b.n	800a1e2 <_strtol_l.constprop.0+0x16>
 800a2a4:	b107      	cbz	r7, 800a2a8 <_strtol_l.constprop.0+0xdc>
 800a2a6:	4276      	negs	r6, r6
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	d0f9      	beq.n	800a2a0 <_strtol_l.constprop.0+0xd4>
 800a2ac:	f1be 0f00 	cmp.w	lr, #0
 800a2b0:	d000      	beq.n	800a2b4 <_strtol_l.constprop.0+0xe8>
 800a2b2:	1e69      	subs	r1, r5, #1
 800a2b4:	6011      	str	r1, [r2, #0]
 800a2b6:	e7f3      	b.n	800a2a0 <_strtol_l.constprop.0+0xd4>
 800a2b8:	2430      	movs	r4, #48	; 0x30
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1b1      	bne.n	800a222 <_strtol_l.constprop.0+0x56>
 800a2be:	2308      	movs	r3, #8
 800a2c0:	e7af      	b.n	800a222 <_strtol_l.constprop.0+0x56>
 800a2c2:	2c30      	cmp	r4, #48	; 0x30
 800a2c4:	d0a5      	beq.n	800a212 <_strtol_l.constprop.0+0x46>
 800a2c6:	230a      	movs	r3, #10
 800a2c8:	e7ab      	b.n	800a222 <_strtol_l.constprop.0+0x56>
 800a2ca:	bf00      	nop
 800a2cc:	0800ea89 	.word	0x0800ea89

0800a2d0 <_strtol_r>:
 800a2d0:	f7ff bf7c 	b.w	800a1cc <_strtol_l.constprop.0>

0800a2d4 <__ssputs_r>:
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	688e      	ldr	r6, [r1, #8]
 800a2da:	461f      	mov	r7, r3
 800a2dc:	42be      	cmp	r6, r7
 800a2de:	680b      	ldr	r3, [r1, #0]
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	4690      	mov	r8, r2
 800a2e6:	d82c      	bhi.n	800a342 <__ssputs_r+0x6e>
 800a2e8:	898a      	ldrh	r2, [r1, #12]
 800a2ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2ee:	d026      	beq.n	800a33e <__ssputs_r+0x6a>
 800a2f0:	6965      	ldr	r5, [r4, #20]
 800a2f2:	6909      	ldr	r1, [r1, #16]
 800a2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2f8:	eba3 0901 	sub.w	r9, r3, r1
 800a2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a300:	1c7b      	adds	r3, r7, #1
 800a302:	444b      	add	r3, r9
 800a304:	106d      	asrs	r5, r5, #1
 800a306:	429d      	cmp	r5, r3
 800a308:	bf38      	it	cc
 800a30a:	461d      	movcc	r5, r3
 800a30c:	0553      	lsls	r3, r2, #21
 800a30e:	d527      	bpl.n	800a360 <__ssputs_r+0x8c>
 800a310:	4629      	mov	r1, r5
 800a312:	f7fe fc0f 	bl	8008b34 <_malloc_r>
 800a316:	4606      	mov	r6, r0
 800a318:	b360      	cbz	r0, 800a374 <__ssputs_r+0xa0>
 800a31a:	6921      	ldr	r1, [r4, #16]
 800a31c:	464a      	mov	r2, r9
 800a31e:	f000 fc17 	bl	800ab50 <memcpy>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32c:	81a3      	strh	r3, [r4, #12]
 800a32e:	6126      	str	r6, [r4, #16]
 800a330:	6165      	str	r5, [r4, #20]
 800a332:	444e      	add	r6, r9
 800a334:	eba5 0509 	sub.w	r5, r5, r9
 800a338:	6026      	str	r6, [r4, #0]
 800a33a:	60a5      	str	r5, [r4, #8]
 800a33c:	463e      	mov	r6, r7
 800a33e:	42be      	cmp	r6, r7
 800a340:	d900      	bls.n	800a344 <__ssputs_r+0x70>
 800a342:	463e      	mov	r6, r7
 800a344:	6820      	ldr	r0, [r4, #0]
 800a346:	4632      	mov	r2, r6
 800a348:	4641      	mov	r1, r8
 800a34a:	f000 fba3 	bl	800aa94 <memmove>
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	1b9b      	subs	r3, r3, r6
 800a352:	60a3      	str	r3, [r4, #8]
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	4433      	add	r3, r6
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	2000      	movs	r0, #0
 800a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a360:	462a      	mov	r2, r5
 800a362:	f000 ffaa 	bl	800b2ba <_realloc_r>
 800a366:	4606      	mov	r6, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	d1e0      	bne.n	800a32e <__ssputs_r+0x5a>
 800a36c:	6921      	ldr	r1, [r4, #16]
 800a36e:	4650      	mov	r0, sl
 800a370:	f7fe fb6c 	bl	8008a4c <_free_r>
 800a374:	230c      	movs	r3, #12
 800a376:	f8ca 3000 	str.w	r3, [sl]
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	f04f 30ff 	mov.w	r0, #4294967295
 800a386:	e7e9      	b.n	800a35c <__ssputs_r+0x88>

0800a388 <_svfiprintf_r>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	4698      	mov	r8, r3
 800a38e:	898b      	ldrh	r3, [r1, #12]
 800a390:	061b      	lsls	r3, r3, #24
 800a392:	b09d      	sub	sp, #116	; 0x74
 800a394:	4607      	mov	r7, r0
 800a396:	460d      	mov	r5, r1
 800a398:	4614      	mov	r4, r2
 800a39a:	d50e      	bpl.n	800a3ba <_svfiprintf_r+0x32>
 800a39c:	690b      	ldr	r3, [r1, #16]
 800a39e:	b963      	cbnz	r3, 800a3ba <_svfiprintf_r+0x32>
 800a3a0:	2140      	movs	r1, #64	; 0x40
 800a3a2:	f7fe fbc7 	bl	8008b34 <_malloc_r>
 800a3a6:	6028      	str	r0, [r5, #0]
 800a3a8:	6128      	str	r0, [r5, #16]
 800a3aa:	b920      	cbnz	r0, 800a3b6 <_svfiprintf_r+0x2e>
 800a3ac:	230c      	movs	r3, #12
 800a3ae:	603b      	str	r3, [r7, #0]
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	e0d0      	b.n	800a558 <_svfiprintf_r+0x1d0>
 800a3b6:	2340      	movs	r3, #64	; 0x40
 800a3b8:	616b      	str	r3, [r5, #20]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3be:	2320      	movs	r3, #32
 800a3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c8:	2330      	movs	r3, #48	; 0x30
 800a3ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a570 <_svfiprintf_r+0x1e8>
 800a3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3d2:	f04f 0901 	mov.w	r9, #1
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	469a      	mov	sl, r3
 800a3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3de:	b10a      	cbz	r2, 800a3e4 <_svfiprintf_r+0x5c>
 800a3e0:	2a25      	cmp	r2, #37	; 0x25
 800a3e2:	d1f9      	bne.n	800a3d8 <_svfiprintf_r+0x50>
 800a3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e8:	d00b      	beq.n	800a402 <_svfiprintf_r+0x7a>
 800a3ea:	465b      	mov	r3, fp
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	f7ff ff6f 	bl	800a2d4 <__ssputs_r>
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f000 80a9 	beq.w	800a54e <_svfiprintf_r+0x1c6>
 800a3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3fe:	445a      	add	r2, fp
 800a400:	9209      	str	r2, [sp, #36]	; 0x24
 800a402:	f89a 3000 	ldrb.w	r3, [sl]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 80a1 	beq.w	800a54e <_svfiprintf_r+0x1c6>
 800a40c:	2300      	movs	r3, #0
 800a40e:	f04f 32ff 	mov.w	r2, #4294967295
 800a412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a416:	f10a 0a01 	add.w	sl, sl, #1
 800a41a:	9304      	str	r3, [sp, #16]
 800a41c:	9307      	str	r3, [sp, #28]
 800a41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a422:	931a      	str	r3, [sp, #104]	; 0x68
 800a424:	4654      	mov	r4, sl
 800a426:	2205      	movs	r2, #5
 800a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42c:	4850      	ldr	r0, [pc, #320]	; (800a570 <_svfiprintf_r+0x1e8>)
 800a42e:	f7f5 fef7 	bl	8000220 <memchr>
 800a432:	9a04      	ldr	r2, [sp, #16]
 800a434:	b9d8      	cbnz	r0, 800a46e <_svfiprintf_r+0xe6>
 800a436:	06d0      	lsls	r0, r2, #27
 800a438:	bf44      	itt	mi
 800a43a:	2320      	movmi	r3, #32
 800a43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a440:	0711      	lsls	r1, r2, #28
 800a442:	bf44      	itt	mi
 800a444:	232b      	movmi	r3, #43	; 0x2b
 800a446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a44a:	f89a 3000 	ldrb.w	r3, [sl]
 800a44e:	2b2a      	cmp	r3, #42	; 0x2a
 800a450:	d015      	beq.n	800a47e <_svfiprintf_r+0xf6>
 800a452:	9a07      	ldr	r2, [sp, #28]
 800a454:	4654      	mov	r4, sl
 800a456:	2000      	movs	r0, #0
 800a458:	f04f 0c0a 	mov.w	ip, #10
 800a45c:	4621      	mov	r1, r4
 800a45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a462:	3b30      	subs	r3, #48	; 0x30
 800a464:	2b09      	cmp	r3, #9
 800a466:	d94d      	bls.n	800a504 <_svfiprintf_r+0x17c>
 800a468:	b1b0      	cbz	r0, 800a498 <_svfiprintf_r+0x110>
 800a46a:	9207      	str	r2, [sp, #28]
 800a46c:	e014      	b.n	800a498 <_svfiprintf_r+0x110>
 800a46e:	eba0 0308 	sub.w	r3, r0, r8
 800a472:	fa09 f303 	lsl.w	r3, r9, r3
 800a476:	4313      	orrs	r3, r2
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	46a2      	mov	sl, r4
 800a47c:	e7d2      	b.n	800a424 <_svfiprintf_r+0x9c>
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	1d19      	adds	r1, r3, #4
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	9103      	str	r1, [sp, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	bfbb      	ittet	lt
 800a48a:	425b      	neglt	r3, r3
 800a48c:	f042 0202 	orrlt.w	r2, r2, #2
 800a490:	9307      	strge	r3, [sp, #28]
 800a492:	9307      	strlt	r3, [sp, #28]
 800a494:	bfb8      	it	lt
 800a496:	9204      	strlt	r2, [sp, #16]
 800a498:	7823      	ldrb	r3, [r4, #0]
 800a49a:	2b2e      	cmp	r3, #46	; 0x2e
 800a49c:	d10c      	bne.n	800a4b8 <_svfiprintf_r+0x130>
 800a49e:	7863      	ldrb	r3, [r4, #1]
 800a4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a2:	d134      	bne.n	800a50e <_svfiprintf_r+0x186>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	1d1a      	adds	r2, r3, #4
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	9203      	str	r2, [sp, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bfb8      	it	lt
 800a4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4b4:	3402      	adds	r4, #2
 800a4b6:	9305      	str	r3, [sp, #20]
 800a4b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a580 <_svfiprintf_r+0x1f8>
 800a4bc:	7821      	ldrb	r1, [r4, #0]
 800a4be:	2203      	movs	r2, #3
 800a4c0:	4650      	mov	r0, sl
 800a4c2:	f7f5 fead 	bl	8000220 <memchr>
 800a4c6:	b138      	cbz	r0, 800a4d8 <_svfiprintf_r+0x150>
 800a4c8:	9b04      	ldr	r3, [sp, #16]
 800a4ca:	eba0 000a 	sub.w	r0, r0, sl
 800a4ce:	2240      	movs	r2, #64	; 0x40
 800a4d0:	4082      	lsls	r2, r0
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	4825      	ldr	r0, [pc, #148]	; (800a574 <_svfiprintf_r+0x1ec>)
 800a4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4e2:	2206      	movs	r2, #6
 800a4e4:	f7f5 fe9c 	bl	8000220 <memchr>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d038      	beq.n	800a55e <_svfiprintf_r+0x1d6>
 800a4ec:	4b22      	ldr	r3, [pc, #136]	; (800a578 <_svfiprintf_r+0x1f0>)
 800a4ee:	bb1b      	cbnz	r3, 800a538 <_svfiprintf_r+0x1b0>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	3307      	adds	r3, #7
 800a4f4:	f023 0307 	bic.w	r3, r3, #7
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	9303      	str	r3, [sp, #12]
 800a4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fe:	4433      	add	r3, r6
 800a500:	9309      	str	r3, [sp, #36]	; 0x24
 800a502:	e768      	b.n	800a3d6 <_svfiprintf_r+0x4e>
 800a504:	fb0c 3202 	mla	r2, ip, r2, r3
 800a508:	460c      	mov	r4, r1
 800a50a:	2001      	movs	r0, #1
 800a50c:	e7a6      	b.n	800a45c <_svfiprintf_r+0xd4>
 800a50e:	2300      	movs	r3, #0
 800a510:	3401      	adds	r4, #1
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	4619      	mov	r1, r3
 800a516:	f04f 0c0a 	mov.w	ip, #10
 800a51a:	4620      	mov	r0, r4
 800a51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a520:	3a30      	subs	r2, #48	; 0x30
 800a522:	2a09      	cmp	r2, #9
 800a524:	d903      	bls.n	800a52e <_svfiprintf_r+0x1a6>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0c6      	beq.n	800a4b8 <_svfiprintf_r+0x130>
 800a52a:	9105      	str	r1, [sp, #20]
 800a52c:	e7c4      	b.n	800a4b8 <_svfiprintf_r+0x130>
 800a52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a532:	4604      	mov	r4, r0
 800a534:	2301      	movs	r3, #1
 800a536:	e7f0      	b.n	800a51a <_svfiprintf_r+0x192>
 800a538:	ab03      	add	r3, sp, #12
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	462a      	mov	r2, r5
 800a53e:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <_svfiprintf_r+0x1f4>)
 800a540:	a904      	add	r1, sp, #16
 800a542:	4638      	mov	r0, r7
 800a544:	f7fc fb7a 	bl	8006c3c <_printf_float>
 800a548:	1c42      	adds	r2, r0, #1
 800a54a:	4606      	mov	r6, r0
 800a54c:	d1d6      	bne.n	800a4fc <_svfiprintf_r+0x174>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	065b      	lsls	r3, r3, #25
 800a552:	f53f af2d 	bmi.w	800a3b0 <_svfiprintf_r+0x28>
 800a556:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a558:	b01d      	add	sp, #116	; 0x74
 800a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55e:	ab03      	add	r3, sp, #12
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	462a      	mov	r2, r5
 800a564:	4b05      	ldr	r3, [pc, #20]	; (800a57c <_svfiprintf_r+0x1f4>)
 800a566:	a904      	add	r1, sp, #16
 800a568:	4638      	mov	r0, r7
 800a56a:	f7fc fe0b 	bl	8007184 <_printf_i>
 800a56e:	e7eb      	b.n	800a548 <_svfiprintf_r+0x1c0>
 800a570:	0800eb89 	.word	0x0800eb89
 800a574:	0800eb93 	.word	0x0800eb93
 800a578:	08006c3d 	.word	0x08006c3d
 800a57c:	0800a2d5 	.word	0x0800a2d5
 800a580:	0800eb8f 	.word	0x0800eb8f

0800a584 <__sfputc_r>:
 800a584:	6893      	ldr	r3, [r2, #8]
 800a586:	3b01      	subs	r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	b410      	push	{r4}
 800a58c:	6093      	str	r3, [r2, #8]
 800a58e:	da08      	bge.n	800a5a2 <__sfputc_r+0x1e>
 800a590:	6994      	ldr	r4, [r2, #24]
 800a592:	42a3      	cmp	r3, r4
 800a594:	db01      	blt.n	800a59a <__sfputc_r+0x16>
 800a596:	290a      	cmp	r1, #10
 800a598:	d103      	bne.n	800a5a2 <__sfputc_r+0x1e>
 800a59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a59e:	f7fd babe 	b.w	8007b1e <__swbuf_r>
 800a5a2:	6813      	ldr	r3, [r2, #0]
 800a5a4:	1c58      	adds	r0, r3, #1
 800a5a6:	6010      	str	r0, [r2, #0]
 800a5a8:	7019      	strb	r1, [r3, #0]
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <__sfputs_r>:
 800a5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	18d5      	adds	r5, r2, r3
 800a5bc:	42ac      	cmp	r4, r5
 800a5be:	d101      	bne.n	800a5c4 <__sfputs_r+0x12>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e007      	b.n	800a5d4 <__sfputs_r+0x22>
 800a5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c8:	463a      	mov	r2, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7ff ffda 	bl	800a584 <__sfputc_r>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d1f3      	bne.n	800a5bc <__sfputs_r+0xa>
 800a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5d8 <_vfiprintf_r>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	460d      	mov	r5, r1
 800a5de:	b09d      	sub	sp, #116	; 0x74
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	4698      	mov	r8, r3
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	b118      	cbz	r0, 800a5f0 <_vfiprintf_r+0x18>
 800a5e8:	6a03      	ldr	r3, [r0, #32]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <_vfiprintf_r+0x18>
 800a5ec:	f7fd f988 	bl	8007900 <__sinit>
 800a5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f2:	07d9      	lsls	r1, r3, #31
 800a5f4:	d405      	bmi.n	800a602 <_vfiprintf_r+0x2a>
 800a5f6:	89ab      	ldrh	r3, [r5, #12]
 800a5f8:	059a      	lsls	r2, r3, #22
 800a5fa:	d402      	bmi.n	800a602 <_vfiprintf_r+0x2a>
 800a5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5fe:	f7fd fba0 	bl	8007d42 <__retarget_lock_acquire_recursive>
 800a602:	89ab      	ldrh	r3, [r5, #12]
 800a604:	071b      	lsls	r3, r3, #28
 800a606:	d501      	bpl.n	800a60c <_vfiprintf_r+0x34>
 800a608:	692b      	ldr	r3, [r5, #16]
 800a60a:	b99b      	cbnz	r3, 800a634 <_vfiprintf_r+0x5c>
 800a60c:	4629      	mov	r1, r5
 800a60e:	4630      	mov	r0, r6
 800a610:	f7fd fac2 	bl	8007b98 <__swsetup_r>
 800a614:	b170      	cbz	r0, 800a634 <_vfiprintf_r+0x5c>
 800a616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a618:	07dc      	lsls	r4, r3, #31
 800a61a:	d504      	bpl.n	800a626 <_vfiprintf_r+0x4e>
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	b01d      	add	sp, #116	; 0x74
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	89ab      	ldrh	r3, [r5, #12]
 800a628:	0598      	lsls	r0, r3, #22
 800a62a:	d4f7      	bmi.n	800a61c <_vfiprintf_r+0x44>
 800a62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a62e:	f7fd fb89 	bl	8007d44 <__retarget_lock_release_recursive>
 800a632:	e7f3      	b.n	800a61c <_vfiprintf_r+0x44>
 800a634:	2300      	movs	r3, #0
 800a636:	9309      	str	r3, [sp, #36]	; 0x24
 800a638:	2320      	movs	r3, #32
 800a63a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a63e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a642:	2330      	movs	r3, #48	; 0x30
 800a644:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a7f8 <_vfiprintf_r+0x220>
 800a648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a64c:	f04f 0901 	mov.w	r9, #1
 800a650:	4623      	mov	r3, r4
 800a652:	469a      	mov	sl, r3
 800a654:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a658:	b10a      	cbz	r2, 800a65e <_vfiprintf_r+0x86>
 800a65a:	2a25      	cmp	r2, #37	; 0x25
 800a65c:	d1f9      	bne.n	800a652 <_vfiprintf_r+0x7a>
 800a65e:	ebba 0b04 	subs.w	fp, sl, r4
 800a662:	d00b      	beq.n	800a67c <_vfiprintf_r+0xa4>
 800a664:	465b      	mov	r3, fp
 800a666:	4622      	mov	r2, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7ff ffa1 	bl	800a5b2 <__sfputs_r>
 800a670:	3001      	adds	r0, #1
 800a672:	f000 80a9 	beq.w	800a7c8 <_vfiprintf_r+0x1f0>
 800a676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a678:	445a      	add	r2, fp
 800a67a:	9209      	str	r2, [sp, #36]	; 0x24
 800a67c:	f89a 3000 	ldrb.w	r3, [sl]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80a1 	beq.w	800a7c8 <_vfiprintf_r+0x1f0>
 800a686:	2300      	movs	r3, #0
 800a688:	f04f 32ff 	mov.w	r2, #4294967295
 800a68c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a690:	f10a 0a01 	add.w	sl, sl, #1
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	9307      	str	r3, [sp, #28]
 800a698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a69c:	931a      	str	r3, [sp, #104]	; 0x68
 800a69e:	4654      	mov	r4, sl
 800a6a0:	2205      	movs	r2, #5
 800a6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a6:	4854      	ldr	r0, [pc, #336]	; (800a7f8 <_vfiprintf_r+0x220>)
 800a6a8:	f7f5 fdba 	bl	8000220 <memchr>
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	b9d8      	cbnz	r0, 800a6e8 <_vfiprintf_r+0x110>
 800a6b0:	06d1      	lsls	r1, r2, #27
 800a6b2:	bf44      	itt	mi
 800a6b4:	2320      	movmi	r3, #32
 800a6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ba:	0713      	lsls	r3, r2, #28
 800a6bc:	bf44      	itt	mi
 800a6be:	232b      	movmi	r3, #43	; 0x2b
 800a6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ca:	d015      	beq.n	800a6f8 <_vfiprintf_r+0x120>
 800a6cc:	9a07      	ldr	r2, [sp, #28]
 800a6ce:	4654      	mov	r4, sl
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	f04f 0c0a 	mov.w	ip, #10
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6dc:	3b30      	subs	r3, #48	; 0x30
 800a6de:	2b09      	cmp	r3, #9
 800a6e0:	d94d      	bls.n	800a77e <_vfiprintf_r+0x1a6>
 800a6e2:	b1b0      	cbz	r0, 800a712 <_vfiprintf_r+0x13a>
 800a6e4:	9207      	str	r2, [sp, #28]
 800a6e6:	e014      	b.n	800a712 <_vfiprintf_r+0x13a>
 800a6e8:	eba0 0308 	sub.w	r3, r0, r8
 800a6ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	9304      	str	r3, [sp, #16]
 800a6f4:	46a2      	mov	sl, r4
 800a6f6:	e7d2      	b.n	800a69e <_vfiprintf_r+0xc6>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	1d19      	adds	r1, r3, #4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	9103      	str	r1, [sp, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	bfbb      	ittet	lt
 800a704:	425b      	neglt	r3, r3
 800a706:	f042 0202 	orrlt.w	r2, r2, #2
 800a70a:	9307      	strge	r3, [sp, #28]
 800a70c:	9307      	strlt	r3, [sp, #28]
 800a70e:	bfb8      	it	lt
 800a710:	9204      	strlt	r2, [sp, #16]
 800a712:	7823      	ldrb	r3, [r4, #0]
 800a714:	2b2e      	cmp	r3, #46	; 0x2e
 800a716:	d10c      	bne.n	800a732 <_vfiprintf_r+0x15a>
 800a718:	7863      	ldrb	r3, [r4, #1]
 800a71a:	2b2a      	cmp	r3, #42	; 0x2a
 800a71c:	d134      	bne.n	800a788 <_vfiprintf_r+0x1b0>
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	1d1a      	adds	r2, r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	9203      	str	r2, [sp, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfb8      	it	lt
 800a72a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a72e:	3402      	adds	r4, #2
 800a730:	9305      	str	r3, [sp, #20]
 800a732:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a808 <_vfiprintf_r+0x230>
 800a736:	7821      	ldrb	r1, [r4, #0]
 800a738:	2203      	movs	r2, #3
 800a73a:	4650      	mov	r0, sl
 800a73c:	f7f5 fd70 	bl	8000220 <memchr>
 800a740:	b138      	cbz	r0, 800a752 <_vfiprintf_r+0x17a>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	eba0 000a 	sub.w	r0, r0, sl
 800a748:	2240      	movs	r2, #64	; 0x40
 800a74a:	4082      	lsls	r2, r0
 800a74c:	4313      	orrs	r3, r2
 800a74e:	3401      	adds	r4, #1
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a756:	4829      	ldr	r0, [pc, #164]	; (800a7fc <_vfiprintf_r+0x224>)
 800a758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a75c:	2206      	movs	r2, #6
 800a75e:	f7f5 fd5f 	bl	8000220 <memchr>
 800a762:	2800      	cmp	r0, #0
 800a764:	d03f      	beq.n	800a7e6 <_vfiprintf_r+0x20e>
 800a766:	4b26      	ldr	r3, [pc, #152]	; (800a800 <_vfiprintf_r+0x228>)
 800a768:	bb1b      	cbnz	r3, 800a7b2 <_vfiprintf_r+0x1da>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	3307      	adds	r3, #7
 800a76e:	f023 0307 	bic.w	r3, r3, #7
 800a772:	3308      	adds	r3, #8
 800a774:	9303      	str	r3, [sp, #12]
 800a776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a778:	443b      	add	r3, r7
 800a77a:	9309      	str	r3, [sp, #36]	; 0x24
 800a77c:	e768      	b.n	800a650 <_vfiprintf_r+0x78>
 800a77e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a782:	460c      	mov	r4, r1
 800a784:	2001      	movs	r0, #1
 800a786:	e7a6      	b.n	800a6d6 <_vfiprintf_r+0xfe>
 800a788:	2300      	movs	r3, #0
 800a78a:	3401      	adds	r4, #1
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	4619      	mov	r1, r3
 800a790:	f04f 0c0a 	mov.w	ip, #10
 800a794:	4620      	mov	r0, r4
 800a796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79a:	3a30      	subs	r2, #48	; 0x30
 800a79c:	2a09      	cmp	r2, #9
 800a79e:	d903      	bls.n	800a7a8 <_vfiprintf_r+0x1d0>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0c6      	beq.n	800a732 <_vfiprintf_r+0x15a>
 800a7a4:	9105      	str	r1, [sp, #20]
 800a7a6:	e7c4      	b.n	800a732 <_vfiprintf_r+0x15a>
 800a7a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e7f0      	b.n	800a794 <_vfiprintf_r+0x1bc>
 800a7b2:	ab03      	add	r3, sp, #12
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4b12      	ldr	r3, [pc, #72]	; (800a804 <_vfiprintf_r+0x22c>)
 800a7ba:	a904      	add	r1, sp, #16
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7fc fa3d 	bl	8006c3c <_printf_float>
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	1c78      	adds	r0, r7, #1
 800a7c6:	d1d6      	bne.n	800a776 <_vfiprintf_r+0x19e>
 800a7c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ca:	07d9      	lsls	r1, r3, #31
 800a7cc:	d405      	bmi.n	800a7da <_vfiprintf_r+0x202>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	059a      	lsls	r2, r3, #22
 800a7d2:	d402      	bmi.n	800a7da <_vfiprintf_r+0x202>
 800a7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7d6:	f7fd fab5 	bl	8007d44 <__retarget_lock_release_recursive>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	065b      	lsls	r3, r3, #25
 800a7de:	f53f af1d 	bmi.w	800a61c <_vfiprintf_r+0x44>
 800a7e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7e4:	e71c      	b.n	800a620 <_vfiprintf_r+0x48>
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4b05      	ldr	r3, [pc, #20]	; (800a804 <_vfiprintf_r+0x22c>)
 800a7ee:	a904      	add	r1, sp, #16
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7fc fcc7 	bl	8007184 <_printf_i>
 800a7f6:	e7e4      	b.n	800a7c2 <_vfiprintf_r+0x1ea>
 800a7f8:	0800eb89 	.word	0x0800eb89
 800a7fc:	0800eb93 	.word	0x0800eb93
 800a800:	08006c3d 	.word	0x08006c3d
 800a804:	0800a5b3 	.word	0x0800a5b3
 800a808:	0800eb8f 	.word	0x0800eb8f

0800a80c <__sflush_r>:
 800a80c:	898a      	ldrh	r2, [r1, #12]
 800a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	4605      	mov	r5, r0
 800a814:	0710      	lsls	r0, r2, #28
 800a816:	460c      	mov	r4, r1
 800a818:	d458      	bmi.n	800a8cc <__sflush_r+0xc0>
 800a81a:	684b      	ldr	r3, [r1, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc05      	bgt.n	800a82c <__sflush_r+0x20>
 800a820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	dc02      	bgt.n	800a82c <__sflush_r+0x20>
 800a826:	2000      	movs	r0, #0
 800a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d0f9      	beq.n	800a826 <__sflush_r+0x1a>
 800a832:	2300      	movs	r3, #0
 800a834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a838:	682f      	ldr	r7, [r5, #0]
 800a83a:	6a21      	ldr	r1, [r4, #32]
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	d032      	beq.n	800a8a6 <__sflush_r+0x9a>
 800a840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	075a      	lsls	r2, r3, #29
 800a846:	d505      	bpl.n	800a854 <__sflush_r+0x48>
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	1ac0      	subs	r0, r0, r3
 800a84c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a84e:	b10b      	cbz	r3, 800a854 <__sflush_r+0x48>
 800a850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a852:	1ac0      	subs	r0, r0, r3
 800a854:	2300      	movs	r3, #0
 800a856:	4602      	mov	r2, r0
 800a858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a85a:	6a21      	ldr	r1, [r4, #32]
 800a85c:	4628      	mov	r0, r5
 800a85e:	47b0      	blx	r6
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	d106      	bne.n	800a874 <__sflush_r+0x68>
 800a866:	6829      	ldr	r1, [r5, #0]
 800a868:	291d      	cmp	r1, #29
 800a86a:	d82b      	bhi.n	800a8c4 <__sflush_r+0xb8>
 800a86c:	4a29      	ldr	r2, [pc, #164]	; (800a914 <__sflush_r+0x108>)
 800a86e:	410a      	asrs	r2, r1
 800a870:	07d6      	lsls	r6, r2, #31
 800a872:	d427      	bmi.n	800a8c4 <__sflush_r+0xb8>
 800a874:	2200      	movs	r2, #0
 800a876:	6062      	str	r2, [r4, #4]
 800a878:	04d9      	lsls	r1, r3, #19
 800a87a:	6922      	ldr	r2, [r4, #16]
 800a87c:	6022      	str	r2, [r4, #0]
 800a87e:	d504      	bpl.n	800a88a <__sflush_r+0x7e>
 800a880:	1c42      	adds	r2, r0, #1
 800a882:	d101      	bne.n	800a888 <__sflush_r+0x7c>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b903      	cbnz	r3, 800a88a <__sflush_r+0x7e>
 800a888:	6560      	str	r0, [r4, #84]	; 0x54
 800a88a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a88c:	602f      	str	r7, [r5, #0]
 800a88e:	2900      	cmp	r1, #0
 800a890:	d0c9      	beq.n	800a826 <__sflush_r+0x1a>
 800a892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a896:	4299      	cmp	r1, r3
 800a898:	d002      	beq.n	800a8a0 <__sflush_r+0x94>
 800a89a:	4628      	mov	r0, r5
 800a89c:	f7fe f8d6 	bl	8008a4c <_free_r>
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a8a4:	e7c0      	b.n	800a828 <__sflush_r+0x1c>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b0      	blx	r6
 800a8ac:	1c41      	adds	r1, r0, #1
 800a8ae:	d1c8      	bne.n	800a842 <__sflush_r+0x36>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c5      	beq.n	800a842 <__sflush_r+0x36>
 800a8b6:	2b1d      	cmp	r3, #29
 800a8b8:	d001      	beq.n	800a8be <__sflush_r+0xb2>
 800a8ba:	2b16      	cmp	r3, #22
 800a8bc:	d101      	bne.n	800a8c2 <__sflush_r+0xb6>
 800a8be:	602f      	str	r7, [r5, #0]
 800a8c0:	e7b1      	b.n	800a826 <__sflush_r+0x1a>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	e7ad      	b.n	800a828 <__sflush_r+0x1c>
 800a8cc:	690f      	ldr	r7, [r1, #16]
 800a8ce:	2f00      	cmp	r7, #0
 800a8d0:	d0a9      	beq.n	800a826 <__sflush_r+0x1a>
 800a8d2:	0793      	lsls	r3, r2, #30
 800a8d4:	680e      	ldr	r6, [r1, #0]
 800a8d6:	bf08      	it	eq
 800a8d8:	694b      	ldreq	r3, [r1, #20]
 800a8da:	600f      	str	r7, [r1, #0]
 800a8dc:	bf18      	it	ne
 800a8de:	2300      	movne	r3, #0
 800a8e0:	eba6 0807 	sub.w	r8, r6, r7
 800a8e4:	608b      	str	r3, [r1, #8]
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	dd9c      	ble.n	800a826 <__sflush_r+0x1a>
 800a8ec:	6a21      	ldr	r1, [r4, #32]
 800a8ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8f0:	4643      	mov	r3, r8
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b0      	blx	r6
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	dc06      	bgt.n	800a90a <__sflush_r+0xfe>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e78e      	b.n	800a828 <__sflush_r+0x1c>
 800a90a:	4407      	add	r7, r0
 800a90c:	eba8 0800 	sub.w	r8, r8, r0
 800a910:	e7e9      	b.n	800a8e6 <__sflush_r+0xda>
 800a912:	bf00      	nop
 800a914:	dfbffffe 	.word	0xdfbffffe

0800a918 <_fflush_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	690b      	ldr	r3, [r1, #16]
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b913      	cbnz	r3, 800a928 <_fflush_r+0x10>
 800a922:	2500      	movs	r5, #0
 800a924:	4628      	mov	r0, r5
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	b118      	cbz	r0, 800a932 <_fflush_r+0x1a>
 800a92a:	6a03      	ldr	r3, [r0, #32]
 800a92c:	b90b      	cbnz	r3, 800a932 <_fflush_r+0x1a>
 800a92e:	f7fc ffe7 	bl	8007900 <__sinit>
 800a932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0f3      	beq.n	800a922 <_fflush_r+0xa>
 800a93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a93c:	07d0      	lsls	r0, r2, #31
 800a93e:	d404      	bmi.n	800a94a <_fflush_r+0x32>
 800a940:	0599      	lsls	r1, r3, #22
 800a942:	d402      	bmi.n	800a94a <_fflush_r+0x32>
 800a944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a946:	f7fd f9fc 	bl	8007d42 <__retarget_lock_acquire_recursive>
 800a94a:	4628      	mov	r0, r5
 800a94c:	4621      	mov	r1, r4
 800a94e:	f7ff ff5d 	bl	800a80c <__sflush_r>
 800a952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a954:	07da      	lsls	r2, r3, #31
 800a956:	4605      	mov	r5, r0
 800a958:	d4e4      	bmi.n	800a924 <_fflush_r+0xc>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	059b      	lsls	r3, r3, #22
 800a95e:	d4e1      	bmi.n	800a924 <_fflush_r+0xc>
 800a960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a962:	f7fd f9ef 	bl	8007d44 <__retarget_lock_release_recursive>
 800a966:	e7dd      	b.n	800a924 <_fflush_r+0xc>

0800a968 <__swhatbuf_r>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a970:	2900      	cmp	r1, #0
 800a972:	b096      	sub	sp, #88	; 0x58
 800a974:	4615      	mov	r5, r2
 800a976:	461e      	mov	r6, r3
 800a978:	da0d      	bge.n	800a996 <__swhatbuf_r+0x2e>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a980:	f04f 0100 	mov.w	r1, #0
 800a984:	bf0c      	ite	eq
 800a986:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a98a:	2340      	movne	r3, #64	; 0x40
 800a98c:	2000      	movs	r0, #0
 800a98e:	6031      	str	r1, [r6, #0]
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	b016      	add	sp, #88	; 0x58
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	466a      	mov	r2, sp
 800a998:	f000 f8a8 	bl	800aaec <_fstat_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	dbec      	blt.n	800a97a <__swhatbuf_r+0x12>
 800a9a0:	9901      	ldr	r1, [sp, #4]
 800a9a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a9a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a9aa:	4259      	negs	r1, r3
 800a9ac:	4159      	adcs	r1, r3
 800a9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9b2:	e7eb      	b.n	800a98c <__swhatbuf_r+0x24>

0800a9b4 <__smakebuf_r>:
 800a9b4:	898b      	ldrh	r3, [r1, #12]
 800a9b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9b8:	079d      	lsls	r5, r3, #30
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460c      	mov	r4, r1
 800a9be:	d507      	bpl.n	800a9d0 <__smakebuf_r+0x1c>
 800a9c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	6123      	str	r3, [r4, #16]
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	6163      	str	r3, [r4, #20]
 800a9cc:	b002      	add	sp, #8
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	ab01      	add	r3, sp, #4
 800a9d2:	466a      	mov	r2, sp
 800a9d4:	f7ff ffc8 	bl	800a968 <__swhatbuf_r>
 800a9d8:	9900      	ldr	r1, [sp, #0]
 800a9da:	4605      	mov	r5, r0
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7fe f8a9 	bl	8008b34 <_malloc_r>
 800a9e2:	b948      	cbnz	r0, 800a9f8 <__smakebuf_r+0x44>
 800a9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e8:	059a      	lsls	r2, r3, #22
 800a9ea:	d4ef      	bmi.n	800a9cc <__smakebuf_r+0x18>
 800a9ec:	f023 0303 	bic.w	r3, r3, #3
 800a9f0:	f043 0302 	orr.w	r3, r3, #2
 800a9f4:	81a3      	strh	r3, [r4, #12]
 800a9f6:	e7e3      	b.n	800a9c0 <__smakebuf_r+0xc>
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	6020      	str	r0, [r4, #0]
 800a9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	9b00      	ldr	r3, [sp, #0]
 800aa04:	6163      	str	r3, [r4, #20]
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	6120      	str	r0, [r4, #16]
 800aa0a:	b15b      	cbz	r3, 800aa24 <__smakebuf_r+0x70>
 800aa0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa10:	4630      	mov	r0, r6
 800aa12:	f000 f87d 	bl	800ab10 <_isatty_r>
 800aa16:	b128      	cbz	r0, 800aa24 <__smakebuf_r+0x70>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	f023 0303 	bic.w	r3, r3, #3
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	431d      	orrs	r5, r3
 800aa28:	81a5      	strh	r5, [r4, #12]
 800aa2a:	e7cf      	b.n	800a9cc <__smakebuf_r+0x18>

0800aa2c <_putc_r>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	460d      	mov	r5, r1
 800aa30:	4614      	mov	r4, r2
 800aa32:	4606      	mov	r6, r0
 800aa34:	b118      	cbz	r0, 800aa3e <_putc_r+0x12>
 800aa36:	6a03      	ldr	r3, [r0, #32]
 800aa38:	b90b      	cbnz	r3, 800aa3e <_putc_r+0x12>
 800aa3a:	f7fc ff61 	bl	8007900 <__sinit>
 800aa3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa40:	07d8      	lsls	r0, r3, #31
 800aa42:	d405      	bmi.n	800aa50 <_putc_r+0x24>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	0599      	lsls	r1, r3, #22
 800aa48:	d402      	bmi.n	800aa50 <_putc_r+0x24>
 800aa4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa4c:	f7fd f979 	bl	8007d42 <__retarget_lock_acquire_recursive>
 800aa50:	68a3      	ldr	r3, [r4, #8]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	60a3      	str	r3, [r4, #8]
 800aa58:	da05      	bge.n	800aa66 <_putc_r+0x3a>
 800aa5a:	69a2      	ldr	r2, [r4, #24]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	db12      	blt.n	800aa86 <_putc_r+0x5a>
 800aa60:	b2eb      	uxtb	r3, r5
 800aa62:	2b0a      	cmp	r3, #10
 800aa64:	d00f      	beq.n	800aa86 <_putc_r+0x5a>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	6022      	str	r2, [r4, #0]
 800aa6c:	701d      	strb	r5, [r3, #0]
 800aa6e:	b2ed      	uxtb	r5, r5
 800aa70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa72:	07da      	lsls	r2, r3, #31
 800aa74:	d405      	bmi.n	800aa82 <_putc_r+0x56>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	059b      	lsls	r3, r3, #22
 800aa7a:	d402      	bmi.n	800aa82 <_putc_r+0x56>
 800aa7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa7e:	f7fd f961 	bl	8007d44 <__retarget_lock_release_recursive>
 800aa82:	4628      	mov	r0, r5
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
 800aa86:	4629      	mov	r1, r5
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f7fd f847 	bl	8007b1e <__swbuf_r>
 800aa90:	4605      	mov	r5, r0
 800aa92:	e7ed      	b.n	800aa70 <_putc_r+0x44>

0800aa94 <memmove>:
 800aa94:	4288      	cmp	r0, r1
 800aa96:	b510      	push	{r4, lr}
 800aa98:	eb01 0402 	add.w	r4, r1, r2
 800aa9c:	d902      	bls.n	800aaa4 <memmove+0x10>
 800aa9e:	4284      	cmp	r4, r0
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	d807      	bhi.n	800aab4 <memmove+0x20>
 800aaa4:	1e43      	subs	r3, r0, #1
 800aaa6:	42a1      	cmp	r1, r4
 800aaa8:	d008      	beq.n	800aabc <memmove+0x28>
 800aaaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aab2:	e7f8      	b.n	800aaa6 <memmove+0x12>
 800aab4:	4402      	add	r2, r0
 800aab6:	4601      	mov	r1, r0
 800aab8:	428a      	cmp	r2, r1
 800aaba:	d100      	bne.n	800aabe <memmove+0x2a>
 800aabc:	bd10      	pop	{r4, pc}
 800aabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aac6:	e7f7      	b.n	800aab8 <memmove+0x24>

0800aac8 <strncmp>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	b16a      	cbz	r2, 800aae8 <strncmp+0x20>
 800aacc:	3901      	subs	r1, #1
 800aace:	1884      	adds	r4, r0, r2
 800aad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aad8:	429a      	cmp	r2, r3
 800aada:	d103      	bne.n	800aae4 <strncmp+0x1c>
 800aadc:	42a0      	cmp	r0, r4
 800aade:	d001      	beq.n	800aae4 <strncmp+0x1c>
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	d1f5      	bne.n	800aad0 <strncmp+0x8>
 800aae4:	1ad0      	subs	r0, r2, r3
 800aae6:	bd10      	pop	{r4, pc}
 800aae8:	4610      	mov	r0, r2
 800aaea:	e7fc      	b.n	800aae6 <strncmp+0x1e>

0800aaec <_fstat_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4d07      	ldr	r5, [pc, #28]	; (800ab0c <_fstat_r+0x20>)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	f7f8 f8c8 	bl	8002c8e <_fstat>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d102      	bne.n	800ab08 <_fstat_r+0x1c>
 800ab02:	682b      	ldr	r3, [r5, #0]
 800ab04:	b103      	cbz	r3, 800ab08 <_fstat_r+0x1c>
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop
 800ab0c:	2000097c 	.word	0x2000097c

0800ab10 <_isatty_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d06      	ldr	r5, [pc, #24]	; (800ab2c <_isatty_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7f8 f8c7 	bl	8002cae <_isatty>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_isatty_r+0x1a>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_isatty_r+0x1a>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	2000097c 	.word	0x2000097c

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	; (800ab4c <_sbrk_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f8 f8d0 	bl	8002ce0 <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	2000097c 	.word	0x2000097c

0800ab50 <memcpy>:
 800ab50:	440a      	add	r2, r1
 800ab52:	4291      	cmp	r1, r2
 800ab54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab58:	d100      	bne.n	800ab5c <memcpy+0xc>
 800ab5a:	4770      	bx	lr
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab66:	4291      	cmp	r1, r2
 800ab68:	d1f9      	bne.n	800ab5e <memcpy+0xe>
 800ab6a:	bd10      	pop	{r4, pc}
 800ab6c:	0000      	movs	r0, r0
	...

0800ab70 <nan>:
 800ab70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab78 <nan+0x8>
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	7ff80000 	.word	0x7ff80000

0800ab80 <__assert_func>:
 800ab80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab82:	4614      	mov	r4, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <__assert_func+0x2c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	68d8      	ldr	r0, [r3, #12]
 800ab8e:	b14c      	cbz	r4, 800aba4 <__assert_func+0x24>
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <__assert_func+0x30>)
 800ab92:	9100      	str	r1, [sp, #0]
 800ab94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab98:	4906      	ldr	r1, [pc, #24]	; (800abb4 <__assert_func+0x34>)
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	f000 fbca 	bl	800b334 <fiprintf>
 800aba0:	f000 fbda 	bl	800b358 <abort>
 800aba4:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <__assert_func+0x38>)
 800aba6:	461c      	mov	r4, r3
 800aba8:	e7f3      	b.n	800ab92 <__assert_func+0x12>
 800abaa:	bf00      	nop
 800abac:	2000006c 	.word	0x2000006c
 800abb0:	0800eba2 	.word	0x0800eba2
 800abb4:	0800ebaf 	.word	0x0800ebaf
 800abb8:	0800ebdd 	.word	0x0800ebdd

0800abbc <_calloc_r>:
 800abbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abbe:	fba1 2402 	umull	r2, r4, r1, r2
 800abc2:	b94c      	cbnz	r4, 800abd8 <_calloc_r+0x1c>
 800abc4:	4611      	mov	r1, r2
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	f7fd ffb4 	bl	8008b34 <_malloc_r>
 800abcc:	9a01      	ldr	r2, [sp, #4]
 800abce:	4605      	mov	r5, r0
 800abd0:	b930      	cbnz	r0, 800abe0 <_calloc_r+0x24>
 800abd2:	4628      	mov	r0, r5
 800abd4:	b003      	add	sp, #12
 800abd6:	bd30      	pop	{r4, r5, pc}
 800abd8:	220c      	movs	r2, #12
 800abda:	6002      	str	r2, [r0, #0]
 800abdc:	2500      	movs	r5, #0
 800abde:	e7f8      	b.n	800abd2 <_calloc_r+0x16>
 800abe0:	4621      	mov	r1, r4
 800abe2:	f7fd f831 	bl	8007c48 <memset>
 800abe6:	e7f4      	b.n	800abd2 <_calloc_r+0x16>

0800abe8 <rshift>:
 800abe8:	6903      	ldr	r3, [r0, #16]
 800abea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abf6:	f100 0414 	add.w	r4, r0, #20
 800abfa:	dd45      	ble.n	800ac88 <rshift+0xa0>
 800abfc:	f011 011f 	ands.w	r1, r1, #31
 800ac00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac08:	d10c      	bne.n	800ac24 <rshift+0x3c>
 800ac0a:	f100 0710 	add.w	r7, r0, #16
 800ac0e:	4629      	mov	r1, r5
 800ac10:	42b1      	cmp	r1, r6
 800ac12:	d334      	bcc.n	800ac7e <rshift+0x96>
 800ac14:	1a9b      	subs	r3, r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	1eea      	subs	r2, r5, #3
 800ac1a:	4296      	cmp	r6, r2
 800ac1c:	bf38      	it	cc
 800ac1e:	2300      	movcc	r3, #0
 800ac20:	4423      	add	r3, r4
 800ac22:	e015      	b.n	800ac50 <rshift+0x68>
 800ac24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac28:	f1c1 0820 	rsb	r8, r1, #32
 800ac2c:	40cf      	lsrs	r7, r1
 800ac2e:	f105 0e04 	add.w	lr, r5, #4
 800ac32:	46a1      	mov	r9, r4
 800ac34:	4576      	cmp	r6, lr
 800ac36:	46f4      	mov	ip, lr
 800ac38:	d815      	bhi.n	800ac66 <rshift+0x7e>
 800ac3a:	1a9a      	subs	r2, r3, r2
 800ac3c:	0092      	lsls	r2, r2, #2
 800ac3e:	3a04      	subs	r2, #4
 800ac40:	3501      	adds	r5, #1
 800ac42:	42ae      	cmp	r6, r5
 800ac44:	bf38      	it	cc
 800ac46:	2200      	movcc	r2, #0
 800ac48:	18a3      	adds	r3, r4, r2
 800ac4a:	50a7      	str	r7, [r4, r2]
 800ac4c:	b107      	cbz	r7, 800ac50 <rshift+0x68>
 800ac4e:	3304      	adds	r3, #4
 800ac50:	1b1a      	subs	r2, r3, r4
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac58:	bf08      	it	eq
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	6102      	str	r2, [r0, #16]
 800ac5e:	bf08      	it	eq
 800ac60:	6143      	streq	r3, [r0, #20]
 800ac62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac66:	f8dc c000 	ldr.w	ip, [ip]
 800ac6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac6e:	ea4c 0707 	orr.w	r7, ip, r7
 800ac72:	f849 7b04 	str.w	r7, [r9], #4
 800ac76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac7a:	40cf      	lsrs	r7, r1
 800ac7c:	e7da      	b.n	800ac34 <rshift+0x4c>
 800ac7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac82:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac86:	e7c3      	b.n	800ac10 <rshift+0x28>
 800ac88:	4623      	mov	r3, r4
 800ac8a:	e7e1      	b.n	800ac50 <rshift+0x68>

0800ac8c <__hexdig_fun>:
 800ac8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac90:	2b09      	cmp	r3, #9
 800ac92:	d802      	bhi.n	800ac9a <__hexdig_fun+0xe>
 800ac94:	3820      	subs	r0, #32
 800ac96:	b2c0      	uxtb	r0, r0
 800ac98:	4770      	bx	lr
 800ac9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	d801      	bhi.n	800aca6 <__hexdig_fun+0x1a>
 800aca2:	3847      	subs	r0, #71	; 0x47
 800aca4:	e7f7      	b.n	800ac96 <__hexdig_fun+0xa>
 800aca6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800acaa:	2b05      	cmp	r3, #5
 800acac:	d801      	bhi.n	800acb2 <__hexdig_fun+0x26>
 800acae:	3827      	subs	r0, #39	; 0x27
 800acb0:	e7f1      	b.n	800ac96 <__hexdig_fun+0xa>
 800acb2:	2000      	movs	r0, #0
 800acb4:	4770      	bx	lr
	...

0800acb8 <__gethex>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	4617      	mov	r7, r2
 800acbe:	680a      	ldr	r2, [r1, #0]
 800acc0:	b085      	sub	sp, #20
 800acc2:	f102 0b02 	add.w	fp, r2, #2
 800acc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800acca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800acce:	4681      	mov	r9, r0
 800acd0:	468a      	mov	sl, r1
 800acd2:	9302      	str	r3, [sp, #8]
 800acd4:	32fe      	adds	r2, #254	; 0xfe
 800acd6:	eb02 030b 	add.w	r3, r2, fp
 800acda:	46d8      	mov	r8, fp
 800acdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	2830      	cmp	r0, #48	; 0x30
 800ace4:	d0f7      	beq.n	800acd6 <__gethex+0x1e>
 800ace6:	f7ff ffd1 	bl	800ac8c <__hexdig_fun>
 800acea:	4604      	mov	r4, r0
 800acec:	2800      	cmp	r0, #0
 800acee:	d138      	bne.n	800ad62 <__gethex+0xaa>
 800acf0:	49a7      	ldr	r1, [pc, #668]	; (800af90 <__gethex+0x2d8>)
 800acf2:	2201      	movs	r2, #1
 800acf4:	4640      	mov	r0, r8
 800acf6:	f7ff fee7 	bl	800aac8 <strncmp>
 800acfa:	4606      	mov	r6, r0
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d169      	bne.n	800add4 <__gethex+0x11c>
 800ad00:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ad04:	465d      	mov	r5, fp
 800ad06:	f7ff ffc1 	bl	800ac8c <__hexdig_fun>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d064      	beq.n	800add8 <__gethex+0x120>
 800ad0e:	465a      	mov	r2, fp
 800ad10:	7810      	ldrb	r0, [r2, #0]
 800ad12:	2830      	cmp	r0, #48	; 0x30
 800ad14:	4690      	mov	r8, r2
 800ad16:	f102 0201 	add.w	r2, r2, #1
 800ad1a:	d0f9      	beq.n	800ad10 <__gethex+0x58>
 800ad1c:	f7ff ffb6 	bl	800ac8c <__hexdig_fun>
 800ad20:	2301      	movs	r3, #1
 800ad22:	fab0 f480 	clz	r4, r0
 800ad26:	0964      	lsrs	r4, r4, #5
 800ad28:	465e      	mov	r6, fp
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	4642      	mov	r2, r8
 800ad2e:	4615      	mov	r5, r2
 800ad30:	3201      	adds	r2, #1
 800ad32:	7828      	ldrb	r0, [r5, #0]
 800ad34:	f7ff ffaa 	bl	800ac8c <__hexdig_fun>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d1f8      	bne.n	800ad2e <__gethex+0x76>
 800ad3c:	4994      	ldr	r1, [pc, #592]	; (800af90 <__gethex+0x2d8>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	4628      	mov	r0, r5
 800ad42:	f7ff fec1 	bl	800aac8 <strncmp>
 800ad46:	b978      	cbnz	r0, 800ad68 <__gethex+0xb0>
 800ad48:	b946      	cbnz	r6, 800ad5c <__gethex+0xa4>
 800ad4a:	1c6e      	adds	r6, r5, #1
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	4615      	mov	r5, r2
 800ad50:	3201      	adds	r2, #1
 800ad52:	7828      	ldrb	r0, [r5, #0]
 800ad54:	f7ff ff9a 	bl	800ac8c <__hexdig_fun>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d1f8      	bne.n	800ad4e <__gethex+0x96>
 800ad5c:	1b73      	subs	r3, r6, r5
 800ad5e:	009e      	lsls	r6, r3, #2
 800ad60:	e004      	b.n	800ad6c <__gethex+0xb4>
 800ad62:	2400      	movs	r4, #0
 800ad64:	4626      	mov	r6, r4
 800ad66:	e7e1      	b.n	800ad2c <__gethex+0x74>
 800ad68:	2e00      	cmp	r6, #0
 800ad6a:	d1f7      	bne.n	800ad5c <__gethex+0xa4>
 800ad6c:	782b      	ldrb	r3, [r5, #0]
 800ad6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad72:	2b50      	cmp	r3, #80	; 0x50
 800ad74:	d13d      	bne.n	800adf2 <__gethex+0x13a>
 800ad76:	786b      	ldrb	r3, [r5, #1]
 800ad78:	2b2b      	cmp	r3, #43	; 0x2b
 800ad7a:	d02f      	beq.n	800addc <__gethex+0x124>
 800ad7c:	2b2d      	cmp	r3, #45	; 0x2d
 800ad7e:	d031      	beq.n	800ade4 <__gethex+0x12c>
 800ad80:	1c69      	adds	r1, r5, #1
 800ad82:	f04f 0b00 	mov.w	fp, #0
 800ad86:	7808      	ldrb	r0, [r1, #0]
 800ad88:	f7ff ff80 	bl	800ac8c <__hexdig_fun>
 800ad8c:	1e42      	subs	r2, r0, #1
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	2a18      	cmp	r2, #24
 800ad92:	d82e      	bhi.n	800adf2 <__gethex+0x13a>
 800ad94:	f1a0 0210 	sub.w	r2, r0, #16
 800ad98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad9c:	f7ff ff76 	bl	800ac8c <__hexdig_fun>
 800ada0:	f100 3cff 	add.w	ip, r0, #4294967295
 800ada4:	fa5f fc8c 	uxtb.w	ip, ip
 800ada8:	f1bc 0f18 	cmp.w	ip, #24
 800adac:	d91d      	bls.n	800adea <__gethex+0x132>
 800adae:	f1bb 0f00 	cmp.w	fp, #0
 800adb2:	d000      	beq.n	800adb6 <__gethex+0xfe>
 800adb4:	4252      	negs	r2, r2
 800adb6:	4416      	add	r6, r2
 800adb8:	f8ca 1000 	str.w	r1, [sl]
 800adbc:	b1dc      	cbz	r4, 800adf6 <__gethex+0x13e>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bf14      	ite	ne
 800adc4:	f04f 0800 	movne.w	r8, #0
 800adc8:	f04f 0806 	moveq.w	r8, #6
 800adcc:	4640      	mov	r0, r8
 800adce:	b005      	add	sp, #20
 800add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add4:	4645      	mov	r5, r8
 800add6:	4626      	mov	r6, r4
 800add8:	2401      	movs	r4, #1
 800adda:	e7c7      	b.n	800ad6c <__gethex+0xb4>
 800addc:	f04f 0b00 	mov.w	fp, #0
 800ade0:	1ca9      	adds	r1, r5, #2
 800ade2:	e7d0      	b.n	800ad86 <__gethex+0xce>
 800ade4:	f04f 0b01 	mov.w	fp, #1
 800ade8:	e7fa      	b.n	800ade0 <__gethex+0x128>
 800adea:	230a      	movs	r3, #10
 800adec:	fb03 0002 	mla	r0, r3, r2, r0
 800adf0:	e7d0      	b.n	800ad94 <__gethex+0xdc>
 800adf2:	4629      	mov	r1, r5
 800adf4:	e7e0      	b.n	800adb8 <__gethex+0x100>
 800adf6:	eba5 0308 	sub.w	r3, r5, r8
 800adfa:	3b01      	subs	r3, #1
 800adfc:	4621      	mov	r1, r4
 800adfe:	2b07      	cmp	r3, #7
 800ae00:	dc0a      	bgt.n	800ae18 <__gethex+0x160>
 800ae02:	4648      	mov	r0, r9
 800ae04:	f7fd ff22 	bl	8008c4c <_Balloc>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	b940      	cbnz	r0, 800ae1e <__gethex+0x166>
 800ae0c:	4b61      	ldr	r3, [pc, #388]	; (800af94 <__gethex+0x2dc>)
 800ae0e:	4602      	mov	r2, r0
 800ae10:	21e4      	movs	r1, #228	; 0xe4
 800ae12:	4861      	ldr	r0, [pc, #388]	; (800af98 <__gethex+0x2e0>)
 800ae14:	f7ff feb4 	bl	800ab80 <__assert_func>
 800ae18:	3101      	adds	r1, #1
 800ae1a:	105b      	asrs	r3, r3, #1
 800ae1c:	e7ef      	b.n	800adfe <__gethex+0x146>
 800ae1e:	f100 0a14 	add.w	sl, r0, #20
 800ae22:	2300      	movs	r3, #0
 800ae24:	495a      	ldr	r1, [pc, #360]	; (800af90 <__gethex+0x2d8>)
 800ae26:	f8cd a004 	str.w	sl, [sp, #4]
 800ae2a:	469b      	mov	fp, r3
 800ae2c:	45a8      	cmp	r8, r5
 800ae2e:	d342      	bcc.n	800aeb6 <__gethex+0x1fe>
 800ae30:	9801      	ldr	r0, [sp, #4]
 800ae32:	f840 bb04 	str.w	fp, [r0], #4
 800ae36:	eba0 000a 	sub.w	r0, r0, sl
 800ae3a:	1080      	asrs	r0, r0, #2
 800ae3c:	6120      	str	r0, [r4, #16]
 800ae3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ae42:	4658      	mov	r0, fp
 800ae44:	f7fd fff4 	bl	8008e30 <__hi0bits>
 800ae48:	683d      	ldr	r5, [r7, #0]
 800ae4a:	eba8 0000 	sub.w	r0, r8, r0
 800ae4e:	42a8      	cmp	r0, r5
 800ae50:	dd59      	ble.n	800af06 <__gethex+0x24e>
 800ae52:	eba0 0805 	sub.w	r8, r0, r5
 800ae56:	4641      	mov	r1, r8
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f7fe fb83 	bl	8009564 <__any_on>
 800ae5e:	4683      	mov	fp, r0
 800ae60:	b1b8      	cbz	r0, 800ae92 <__gethex+0x1da>
 800ae62:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae66:	1159      	asrs	r1, r3, #5
 800ae68:	f003 021f 	and.w	r2, r3, #31
 800ae6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae70:	f04f 0b01 	mov.w	fp, #1
 800ae74:	fa0b f202 	lsl.w	r2, fp, r2
 800ae78:	420a      	tst	r2, r1
 800ae7a:	d00a      	beq.n	800ae92 <__gethex+0x1da>
 800ae7c:	455b      	cmp	r3, fp
 800ae7e:	dd06      	ble.n	800ae8e <__gethex+0x1d6>
 800ae80:	f1a8 0102 	sub.w	r1, r8, #2
 800ae84:	4620      	mov	r0, r4
 800ae86:	f7fe fb6d 	bl	8009564 <__any_on>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d138      	bne.n	800af00 <__gethex+0x248>
 800ae8e:	f04f 0b02 	mov.w	fp, #2
 800ae92:	4641      	mov	r1, r8
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7ff fea7 	bl	800abe8 <rshift>
 800ae9a:	4446      	add	r6, r8
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	42b3      	cmp	r3, r6
 800aea0:	da41      	bge.n	800af26 <__gethex+0x26e>
 800aea2:	4621      	mov	r1, r4
 800aea4:	4648      	mov	r0, r9
 800aea6:	f7fd ff11 	bl	8008ccc <_Bfree>
 800aeaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeac:	2300      	movs	r3, #0
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800aeb4:	e78a      	b.n	800adcc <__gethex+0x114>
 800aeb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800aeba:	2a2e      	cmp	r2, #46	; 0x2e
 800aebc:	d014      	beq.n	800aee8 <__gethex+0x230>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	d106      	bne.n	800aed0 <__gethex+0x218>
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	f843 bb04 	str.w	fp, [r3], #4
 800aec8:	f04f 0b00 	mov.w	fp, #0
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	465b      	mov	r3, fp
 800aed0:	7828      	ldrb	r0, [r5, #0]
 800aed2:	9303      	str	r3, [sp, #12]
 800aed4:	f7ff feda 	bl	800ac8c <__hexdig_fun>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	f000 000f 	and.w	r0, r0, #15
 800aede:	4098      	lsls	r0, r3
 800aee0:	ea4b 0b00 	orr.w	fp, fp, r0
 800aee4:	3304      	adds	r3, #4
 800aee6:	e7a1      	b.n	800ae2c <__gethex+0x174>
 800aee8:	45a8      	cmp	r8, r5
 800aeea:	d8e8      	bhi.n	800aebe <__gethex+0x206>
 800aeec:	2201      	movs	r2, #1
 800aeee:	4628      	mov	r0, r5
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	f7ff fde9 	bl	800aac8 <strncmp>
 800aef6:	4926      	ldr	r1, [pc, #152]	; (800af90 <__gethex+0x2d8>)
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1df      	bne.n	800aebe <__gethex+0x206>
 800aefe:	e795      	b.n	800ae2c <__gethex+0x174>
 800af00:	f04f 0b03 	mov.w	fp, #3
 800af04:	e7c5      	b.n	800ae92 <__gethex+0x1da>
 800af06:	da0b      	bge.n	800af20 <__gethex+0x268>
 800af08:	eba5 0800 	sub.w	r8, r5, r0
 800af0c:	4621      	mov	r1, r4
 800af0e:	4642      	mov	r2, r8
 800af10:	4648      	mov	r0, r9
 800af12:	f7fe f8f5 	bl	8009100 <__lshift>
 800af16:	eba6 0608 	sub.w	r6, r6, r8
 800af1a:	4604      	mov	r4, r0
 800af1c:	f100 0a14 	add.w	sl, r0, #20
 800af20:	f04f 0b00 	mov.w	fp, #0
 800af24:	e7ba      	b.n	800ae9c <__gethex+0x1e4>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	42b3      	cmp	r3, r6
 800af2a:	dd73      	ble.n	800b014 <__gethex+0x35c>
 800af2c:	1b9e      	subs	r6, r3, r6
 800af2e:	42b5      	cmp	r5, r6
 800af30:	dc34      	bgt.n	800af9c <__gethex+0x2e4>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d023      	beq.n	800af80 <__gethex+0x2c8>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d025      	beq.n	800af88 <__gethex+0x2d0>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d115      	bne.n	800af6c <__gethex+0x2b4>
 800af40:	42b5      	cmp	r5, r6
 800af42:	d113      	bne.n	800af6c <__gethex+0x2b4>
 800af44:	2d01      	cmp	r5, #1
 800af46:	d10b      	bne.n	800af60 <__gethex+0x2a8>
 800af48:	9a02      	ldr	r2, [sp, #8]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	2301      	movs	r3, #1
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	f8ca 3000 	str.w	r3, [sl]
 800af56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af58:	f04f 0862 	mov.w	r8, #98	; 0x62
 800af5c:	601c      	str	r4, [r3, #0]
 800af5e:	e735      	b.n	800adcc <__gethex+0x114>
 800af60:	1e69      	subs	r1, r5, #1
 800af62:	4620      	mov	r0, r4
 800af64:	f7fe fafe 	bl	8009564 <__any_on>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1ed      	bne.n	800af48 <__gethex+0x290>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4648      	mov	r0, r9
 800af70:	f7fd feac 	bl	8008ccc <_Bfree>
 800af74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af76:	2300      	movs	r3, #0
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800af7e:	e725      	b.n	800adcc <__gethex+0x114>
 800af80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f2      	bne.n	800af6c <__gethex+0x2b4>
 800af86:	e7df      	b.n	800af48 <__gethex+0x290>
 800af88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1dc      	bne.n	800af48 <__gethex+0x290>
 800af8e:	e7ed      	b.n	800af6c <__gethex+0x2b4>
 800af90:	0800ea34 	.word	0x0800ea34
 800af94:	0800e8cd 	.word	0x0800e8cd
 800af98:	0800ebde 	.word	0x0800ebde
 800af9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800afa0:	f1bb 0f00 	cmp.w	fp, #0
 800afa4:	d133      	bne.n	800b00e <__gethex+0x356>
 800afa6:	f1b8 0f00 	cmp.w	r8, #0
 800afaa:	d004      	beq.n	800afb6 <__gethex+0x2fe>
 800afac:	4641      	mov	r1, r8
 800afae:	4620      	mov	r0, r4
 800afb0:	f7fe fad8 	bl	8009564 <__any_on>
 800afb4:	4683      	mov	fp, r0
 800afb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800afba:	2301      	movs	r3, #1
 800afbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800afc0:	f008 081f 	and.w	r8, r8, #31
 800afc4:	fa03 f308 	lsl.w	r3, r3, r8
 800afc8:	4213      	tst	r3, r2
 800afca:	4631      	mov	r1, r6
 800afcc:	4620      	mov	r0, r4
 800afce:	bf18      	it	ne
 800afd0:	f04b 0b02 	orrne.w	fp, fp, #2
 800afd4:	1bad      	subs	r5, r5, r6
 800afd6:	f7ff fe07 	bl	800abe8 <rshift>
 800afda:	687e      	ldr	r6, [r7, #4]
 800afdc:	f04f 0802 	mov.w	r8, #2
 800afe0:	f1bb 0f00 	cmp.w	fp, #0
 800afe4:	d04a      	beq.n	800b07c <__gethex+0x3c4>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d016      	beq.n	800b01a <__gethex+0x362>
 800afec:	2b03      	cmp	r3, #3
 800afee:	d018      	beq.n	800b022 <__gethex+0x36a>
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d109      	bne.n	800b008 <__gethex+0x350>
 800aff4:	f01b 0f02 	tst.w	fp, #2
 800aff8:	d006      	beq.n	800b008 <__gethex+0x350>
 800affa:	f8da 3000 	ldr.w	r3, [sl]
 800affe:	ea4b 0b03 	orr.w	fp, fp, r3
 800b002:	f01b 0f01 	tst.w	fp, #1
 800b006:	d10f      	bne.n	800b028 <__gethex+0x370>
 800b008:	f048 0810 	orr.w	r8, r8, #16
 800b00c:	e036      	b.n	800b07c <__gethex+0x3c4>
 800b00e:	f04f 0b01 	mov.w	fp, #1
 800b012:	e7d0      	b.n	800afb6 <__gethex+0x2fe>
 800b014:	f04f 0801 	mov.w	r8, #1
 800b018:	e7e2      	b.n	800afe0 <__gethex+0x328>
 800b01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b01c:	f1c3 0301 	rsb	r3, r3, #1
 800b020:	930f      	str	r3, [sp, #60]	; 0x3c
 800b022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0ef      	beq.n	800b008 <__gethex+0x350>
 800b028:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b02c:	f104 0214 	add.w	r2, r4, #20
 800b030:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b03a:	2300      	movs	r3, #0
 800b03c:	4694      	mov	ip, r2
 800b03e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b042:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b046:	d01e      	beq.n	800b086 <__gethex+0x3ce>
 800b048:	3101      	adds	r1, #1
 800b04a:	f8cc 1000 	str.w	r1, [ip]
 800b04e:	f1b8 0f02 	cmp.w	r8, #2
 800b052:	f104 0214 	add.w	r2, r4, #20
 800b056:	d13d      	bne.n	800b0d4 <__gethex+0x41c>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	42ab      	cmp	r3, r5
 800b05e:	d10b      	bne.n	800b078 <__gethex+0x3c0>
 800b060:	1169      	asrs	r1, r5, #5
 800b062:	2301      	movs	r3, #1
 800b064:	f005 051f 	and.w	r5, r5, #31
 800b068:	fa03 f505 	lsl.w	r5, r3, r5
 800b06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b070:	421d      	tst	r5, r3
 800b072:	bf18      	it	ne
 800b074:	f04f 0801 	movne.w	r8, #1
 800b078:	f048 0820 	orr.w	r8, r8, #32
 800b07c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b07e:	601c      	str	r4, [r3, #0]
 800b080:	9b02      	ldr	r3, [sp, #8]
 800b082:	601e      	str	r6, [r3, #0]
 800b084:	e6a2      	b.n	800adcc <__gethex+0x114>
 800b086:	4290      	cmp	r0, r2
 800b088:	f842 3c04 	str.w	r3, [r2, #-4]
 800b08c:	d8d6      	bhi.n	800b03c <__gethex+0x384>
 800b08e:	68a2      	ldr	r2, [r4, #8]
 800b090:	4593      	cmp	fp, r2
 800b092:	db17      	blt.n	800b0c4 <__gethex+0x40c>
 800b094:	6861      	ldr	r1, [r4, #4]
 800b096:	4648      	mov	r0, r9
 800b098:	3101      	adds	r1, #1
 800b09a:	f7fd fdd7 	bl	8008c4c <_Balloc>
 800b09e:	4682      	mov	sl, r0
 800b0a0:	b918      	cbnz	r0, 800b0aa <__gethex+0x3f2>
 800b0a2:	4b1b      	ldr	r3, [pc, #108]	; (800b110 <__gethex+0x458>)
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	2184      	movs	r1, #132	; 0x84
 800b0a8:	e6b3      	b.n	800ae12 <__gethex+0x15a>
 800b0aa:	6922      	ldr	r2, [r4, #16]
 800b0ac:	3202      	adds	r2, #2
 800b0ae:	f104 010c 	add.w	r1, r4, #12
 800b0b2:	0092      	lsls	r2, r2, #2
 800b0b4:	300c      	adds	r0, #12
 800b0b6:	f7ff fd4b 	bl	800ab50 <memcpy>
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f7fd fe05 	bl	8008ccc <_Bfree>
 800b0c2:	4654      	mov	r4, sl
 800b0c4:	6922      	ldr	r2, [r4, #16]
 800b0c6:	1c51      	adds	r1, r2, #1
 800b0c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b0cc:	6121      	str	r1, [r4, #16]
 800b0ce:	2101      	movs	r1, #1
 800b0d0:	6151      	str	r1, [r2, #20]
 800b0d2:	e7bc      	b.n	800b04e <__gethex+0x396>
 800b0d4:	6921      	ldr	r1, [r4, #16]
 800b0d6:	4559      	cmp	r1, fp
 800b0d8:	dd0b      	ble.n	800b0f2 <__gethex+0x43a>
 800b0da:	2101      	movs	r1, #1
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f7ff fd83 	bl	800abe8 <rshift>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	3601      	adds	r6, #1
 800b0e6:	42b3      	cmp	r3, r6
 800b0e8:	f6ff aedb 	blt.w	800aea2 <__gethex+0x1ea>
 800b0ec:	f04f 0801 	mov.w	r8, #1
 800b0f0:	e7c2      	b.n	800b078 <__gethex+0x3c0>
 800b0f2:	f015 051f 	ands.w	r5, r5, #31
 800b0f6:	d0f9      	beq.n	800b0ec <__gethex+0x434>
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	441a      	add	r2, r3
 800b0fc:	f1c5 0520 	rsb	r5, r5, #32
 800b100:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b104:	f7fd fe94 	bl	8008e30 <__hi0bits>
 800b108:	42a8      	cmp	r0, r5
 800b10a:	dbe6      	blt.n	800b0da <__gethex+0x422>
 800b10c:	e7ee      	b.n	800b0ec <__gethex+0x434>
 800b10e:	bf00      	nop
 800b110:	0800e8cd 	.word	0x0800e8cd

0800b114 <L_shift>:
 800b114:	f1c2 0208 	rsb	r2, r2, #8
 800b118:	0092      	lsls	r2, r2, #2
 800b11a:	b570      	push	{r4, r5, r6, lr}
 800b11c:	f1c2 0620 	rsb	r6, r2, #32
 800b120:	6843      	ldr	r3, [r0, #4]
 800b122:	6804      	ldr	r4, [r0, #0]
 800b124:	fa03 f506 	lsl.w	r5, r3, r6
 800b128:	432c      	orrs	r4, r5
 800b12a:	40d3      	lsrs	r3, r2
 800b12c:	6004      	str	r4, [r0, #0]
 800b12e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b132:	4288      	cmp	r0, r1
 800b134:	d3f4      	bcc.n	800b120 <L_shift+0xc>
 800b136:	bd70      	pop	{r4, r5, r6, pc}

0800b138 <__match>:
 800b138:	b530      	push	{r4, r5, lr}
 800b13a:	6803      	ldr	r3, [r0, #0]
 800b13c:	3301      	adds	r3, #1
 800b13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b142:	b914      	cbnz	r4, 800b14a <__match+0x12>
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	2001      	movs	r0, #1
 800b148:	bd30      	pop	{r4, r5, pc}
 800b14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b14e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b152:	2d19      	cmp	r5, #25
 800b154:	bf98      	it	ls
 800b156:	3220      	addls	r2, #32
 800b158:	42a2      	cmp	r2, r4
 800b15a:	d0f0      	beq.n	800b13e <__match+0x6>
 800b15c:	2000      	movs	r0, #0
 800b15e:	e7f3      	b.n	800b148 <__match+0x10>

0800b160 <__hexnan>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	680b      	ldr	r3, [r1, #0]
 800b166:	6801      	ldr	r1, [r0, #0]
 800b168:	115e      	asrs	r6, r3, #5
 800b16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b16e:	f013 031f 	ands.w	r3, r3, #31
 800b172:	b087      	sub	sp, #28
 800b174:	bf18      	it	ne
 800b176:	3604      	addne	r6, #4
 800b178:	2500      	movs	r5, #0
 800b17a:	1f37      	subs	r7, r6, #4
 800b17c:	4682      	mov	sl, r0
 800b17e:	4690      	mov	r8, r2
 800b180:	9301      	str	r3, [sp, #4]
 800b182:	f846 5c04 	str.w	r5, [r6, #-4]
 800b186:	46b9      	mov	r9, r7
 800b188:	463c      	mov	r4, r7
 800b18a:	9502      	str	r5, [sp, #8]
 800b18c:	46ab      	mov	fp, r5
 800b18e:	784a      	ldrb	r2, [r1, #1]
 800b190:	1c4b      	adds	r3, r1, #1
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	b342      	cbz	r2, 800b1e8 <__hexnan+0x88>
 800b196:	4610      	mov	r0, r2
 800b198:	9105      	str	r1, [sp, #20]
 800b19a:	9204      	str	r2, [sp, #16]
 800b19c:	f7ff fd76 	bl	800ac8c <__hexdig_fun>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d14f      	bne.n	800b244 <__hexnan+0xe4>
 800b1a4:	9a04      	ldr	r2, [sp, #16]
 800b1a6:	9905      	ldr	r1, [sp, #20]
 800b1a8:	2a20      	cmp	r2, #32
 800b1aa:	d818      	bhi.n	800b1de <__hexnan+0x7e>
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	459b      	cmp	fp, r3
 800b1b0:	dd13      	ble.n	800b1da <__hexnan+0x7a>
 800b1b2:	454c      	cmp	r4, r9
 800b1b4:	d206      	bcs.n	800b1c4 <__hexnan+0x64>
 800b1b6:	2d07      	cmp	r5, #7
 800b1b8:	dc04      	bgt.n	800b1c4 <__hexnan+0x64>
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4649      	mov	r1, r9
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f7ff ffa8 	bl	800b114 <L_shift>
 800b1c4:	4544      	cmp	r4, r8
 800b1c6:	d950      	bls.n	800b26a <__hexnan+0x10a>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1d2:	f8cd b008 	str.w	fp, [sp, #8]
 800b1d6:	464c      	mov	r4, r9
 800b1d8:	461d      	mov	r5, r3
 800b1da:	9903      	ldr	r1, [sp, #12]
 800b1dc:	e7d7      	b.n	800b18e <__hexnan+0x2e>
 800b1de:	2a29      	cmp	r2, #41	; 0x29
 800b1e0:	d155      	bne.n	800b28e <__hexnan+0x12e>
 800b1e2:	3102      	adds	r1, #2
 800b1e4:	f8ca 1000 	str.w	r1, [sl]
 800b1e8:	f1bb 0f00 	cmp.w	fp, #0
 800b1ec:	d04f      	beq.n	800b28e <__hexnan+0x12e>
 800b1ee:	454c      	cmp	r4, r9
 800b1f0:	d206      	bcs.n	800b200 <__hexnan+0xa0>
 800b1f2:	2d07      	cmp	r5, #7
 800b1f4:	dc04      	bgt.n	800b200 <__hexnan+0xa0>
 800b1f6:	462a      	mov	r2, r5
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f7ff ff8a 	bl	800b114 <L_shift>
 800b200:	4544      	cmp	r4, r8
 800b202:	d934      	bls.n	800b26e <__hexnan+0x10e>
 800b204:	f1a8 0204 	sub.w	r2, r8, #4
 800b208:	4623      	mov	r3, r4
 800b20a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b20e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b212:	429f      	cmp	r7, r3
 800b214:	d2f9      	bcs.n	800b20a <__hexnan+0xaa>
 800b216:	1b3b      	subs	r3, r7, r4
 800b218:	f023 0303 	bic.w	r3, r3, #3
 800b21c:	3304      	adds	r3, #4
 800b21e:	3e03      	subs	r6, #3
 800b220:	3401      	adds	r4, #1
 800b222:	42a6      	cmp	r6, r4
 800b224:	bf38      	it	cc
 800b226:	2304      	movcc	r3, #4
 800b228:	4443      	add	r3, r8
 800b22a:	2200      	movs	r2, #0
 800b22c:	f843 2b04 	str.w	r2, [r3], #4
 800b230:	429f      	cmp	r7, r3
 800b232:	d2fb      	bcs.n	800b22c <__hexnan+0xcc>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	b91b      	cbnz	r3, 800b240 <__hexnan+0xe0>
 800b238:	4547      	cmp	r7, r8
 800b23a:	d126      	bne.n	800b28a <__hexnan+0x12a>
 800b23c:	2301      	movs	r3, #1
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	2005      	movs	r0, #5
 800b242:	e025      	b.n	800b290 <__hexnan+0x130>
 800b244:	3501      	adds	r5, #1
 800b246:	2d08      	cmp	r5, #8
 800b248:	f10b 0b01 	add.w	fp, fp, #1
 800b24c:	dd06      	ble.n	800b25c <__hexnan+0xfc>
 800b24e:	4544      	cmp	r4, r8
 800b250:	d9c3      	bls.n	800b1da <__hexnan+0x7a>
 800b252:	2300      	movs	r3, #0
 800b254:	f844 3c04 	str.w	r3, [r4, #-4]
 800b258:	2501      	movs	r5, #1
 800b25a:	3c04      	subs	r4, #4
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	f000 000f 	and.w	r0, r0, #15
 800b262:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b266:	6020      	str	r0, [r4, #0]
 800b268:	e7b7      	b.n	800b1da <__hexnan+0x7a>
 800b26a:	2508      	movs	r5, #8
 800b26c:	e7b5      	b.n	800b1da <__hexnan+0x7a>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0df      	beq.n	800b234 <__hexnan+0xd4>
 800b274:	f1c3 0320 	rsb	r3, r3, #32
 800b278:	f04f 32ff 	mov.w	r2, #4294967295
 800b27c:	40da      	lsrs	r2, r3
 800b27e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b282:	4013      	ands	r3, r2
 800b284:	f846 3c04 	str.w	r3, [r6, #-4]
 800b288:	e7d4      	b.n	800b234 <__hexnan+0xd4>
 800b28a:	3f04      	subs	r7, #4
 800b28c:	e7d2      	b.n	800b234 <__hexnan+0xd4>
 800b28e:	2004      	movs	r0, #4
 800b290:	b007      	add	sp, #28
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b296 <__ascii_mbtowc>:
 800b296:	b082      	sub	sp, #8
 800b298:	b901      	cbnz	r1, 800b29c <__ascii_mbtowc+0x6>
 800b29a:	a901      	add	r1, sp, #4
 800b29c:	b142      	cbz	r2, 800b2b0 <__ascii_mbtowc+0x1a>
 800b29e:	b14b      	cbz	r3, 800b2b4 <__ascii_mbtowc+0x1e>
 800b2a0:	7813      	ldrb	r3, [r2, #0]
 800b2a2:	600b      	str	r3, [r1, #0]
 800b2a4:	7812      	ldrb	r2, [r2, #0]
 800b2a6:	1e10      	subs	r0, r2, #0
 800b2a8:	bf18      	it	ne
 800b2aa:	2001      	movne	r0, #1
 800b2ac:	b002      	add	sp, #8
 800b2ae:	4770      	bx	lr
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	e7fb      	b.n	800b2ac <__ascii_mbtowc+0x16>
 800b2b4:	f06f 0001 	mvn.w	r0, #1
 800b2b8:	e7f8      	b.n	800b2ac <__ascii_mbtowc+0x16>

0800b2ba <_realloc_r>:
 800b2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	4680      	mov	r8, r0
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	460e      	mov	r6, r1
 800b2c4:	b921      	cbnz	r1, 800b2d0 <_realloc_r+0x16>
 800b2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	f7fd bc32 	b.w	8008b34 <_malloc_r>
 800b2d0:	b92a      	cbnz	r2, 800b2de <_realloc_r+0x24>
 800b2d2:	f7fd fbbb 	bl	8008a4c <_free_r>
 800b2d6:	4625      	mov	r5, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	f000 f842 	bl	800b366 <_malloc_usable_size_r>
 800b2e2:	4284      	cmp	r4, r0
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	d802      	bhi.n	800b2ee <_realloc_r+0x34>
 800b2e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2ec:	d812      	bhi.n	800b314 <_realloc_r+0x5a>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	f7fd fc1f 	bl	8008b34 <_malloc_r>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d0ed      	beq.n	800b2d8 <_realloc_r+0x1e>
 800b2fc:	42bc      	cmp	r4, r7
 800b2fe:	4622      	mov	r2, r4
 800b300:	4631      	mov	r1, r6
 800b302:	bf28      	it	cs
 800b304:	463a      	movcs	r2, r7
 800b306:	f7ff fc23 	bl	800ab50 <memcpy>
 800b30a:	4631      	mov	r1, r6
 800b30c:	4640      	mov	r0, r8
 800b30e:	f7fd fb9d 	bl	8008a4c <_free_r>
 800b312:	e7e1      	b.n	800b2d8 <_realloc_r+0x1e>
 800b314:	4635      	mov	r5, r6
 800b316:	e7df      	b.n	800b2d8 <_realloc_r+0x1e>

0800b318 <__ascii_wctomb>:
 800b318:	b149      	cbz	r1, 800b32e <__ascii_wctomb+0x16>
 800b31a:	2aff      	cmp	r2, #255	; 0xff
 800b31c:	bf85      	ittet	hi
 800b31e:	238a      	movhi	r3, #138	; 0x8a
 800b320:	6003      	strhi	r3, [r0, #0]
 800b322:	700a      	strbls	r2, [r1, #0]
 800b324:	f04f 30ff 	movhi.w	r0, #4294967295
 800b328:	bf98      	it	ls
 800b32a:	2001      	movls	r0, #1
 800b32c:	4770      	bx	lr
 800b32e:	4608      	mov	r0, r1
 800b330:	4770      	bx	lr
	...

0800b334 <fiprintf>:
 800b334:	b40e      	push	{r1, r2, r3}
 800b336:	b503      	push	{r0, r1, lr}
 800b338:	4601      	mov	r1, r0
 800b33a:	ab03      	add	r3, sp, #12
 800b33c:	4805      	ldr	r0, [pc, #20]	; (800b354 <fiprintf+0x20>)
 800b33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b342:	6800      	ldr	r0, [r0, #0]
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	f7ff f947 	bl	800a5d8 <_vfiprintf_r>
 800b34a:	b002      	add	sp, #8
 800b34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b350:	b003      	add	sp, #12
 800b352:	4770      	bx	lr
 800b354:	2000006c 	.word	0x2000006c

0800b358 <abort>:
 800b358:	b508      	push	{r3, lr}
 800b35a:	2006      	movs	r0, #6
 800b35c:	f000 f834 	bl	800b3c8 <raise>
 800b360:	2001      	movs	r0, #1
 800b362:	f7f7 fc45 	bl	8002bf0 <_exit>

0800b366 <_malloc_usable_size_r>:
 800b366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36a:	1f18      	subs	r0, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	bfbc      	itt	lt
 800b370:	580b      	ldrlt	r3, [r1, r0]
 800b372:	18c0      	addlt	r0, r0, r3
 800b374:	4770      	bx	lr

0800b376 <_raise_r>:
 800b376:	291f      	cmp	r1, #31
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4604      	mov	r4, r0
 800b37c:	460d      	mov	r5, r1
 800b37e:	d904      	bls.n	800b38a <_raise_r+0x14>
 800b380:	2316      	movs	r3, #22
 800b382:	6003      	str	r3, [r0, #0]
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	bd38      	pop	{r3, r4, r5, pc}
 800b38a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b38c:	b112      	cbz	r2, 800b394 <_raise_r+0x1e>
 800b38e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b392:	b94b      	cbnz	r3, 800b3a8 <_raise_r+0x32>
 800b394:	4620      	mov	r0, r4
 800b396:	f000 f831 	bl	800b3fc <_getpid_r>
 800b39a:	462a      	mov	r2, r5
 800b39c:	4601      	mov	r1, r0
 800b39e:	4620      	mov	r0, r4
 800b3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a4:	f000 b818 	b.w	800b3d8 <_kill_r>
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d00a      	beq.n	800b3c2 <_raise_r+0x4c>
 800b3ac:	1c59      	adds	r1, r3, #1
 800b3ae:	d103      	bne.n	800b3b8 <_raise_r+0x42>
 800b3b0:	2316      	movs	r3, #22
 800b3b2:	6003      	str	r3, [r0, #0]
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	e7e7      	b.n	800b388 <_raise_r+0x12>
 800b3b8:	2400      	movs	r4, #0
 800b3ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3be:	4628      	mov	r0, r5
 800b3c0:	4798      	blx	r3
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	e7e0      	b.n	800b388 <_raise_r+0x12>
	...

0800b3c8 <raise>:
 800b3c8:	4b02      	ldr	r3, [pc, #8]	; (800b3d4 <raise+0xc>)
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f7ff bfd2 	b.w	800b376 <_raise_r>
 800b3d2:	bf00      	nop
 800b3d4:	2000006c 	.word	0x2000006c

0800b3d8 <_kill_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d07      	ldr	r5, [pc, #28]	; (800b3f8 <_kill_r+0x20>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	602b      	str	r3, [r5, #0]
 800b3e6:	f7f7 fbf3 	bl	8002bd0 <_kill>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d102      	bne.n	800b3f4 <_kill_r+0x1c>
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	b103      	cbz	r3, 800b3f4 <_kill_r+0x1c>
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	bd38      	pop	{r3, r4, r5, pc}
 800b3f6:	bf00      	nop
 800b3f8:	2000097c 	.word	0x2000097c

0800b3fc <_getpid_r>:
 800b3fc:	f7f7 bbe0 	b.w	8002bc0 <_getpid>

0800b400 <atan2>:
 800b400:	f000 bbba 	b.w	800bb78 <__ieee754_atan2>

0800b404 <pow>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	ed2d 8b02 	vpush	{d8}
 800b40a:	eeb0 8a40 	vmov.f32	s16, s0
 800b40e:	eef0 8a60 	vmov.f32	s17, s1
 800b412:	ec55 4b11 	vmov	r4, r5, d1
 800b416:	f000 fc77 	bl	800bd08 <__ieee754_pow>
 800b41a:	4622      	mov	r2, r4
 800b41c:	462b      	mov	r3, r5
 800b41e:	4620      	mov	r0, r4
 800b420:	4629      	mov	r1, r5
 800b422:	ec57 6b10 	vmov	r6, r7, d0
 800b426:	f7f5 fba9 	bl	8000b7c <__aeabi_dcmpun>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d13b      	bne.n	800b4a6 <pow+0xa2>
 800b42e:	ec51 0b18 	vmov	r0, r1, d8
 800b432:	2200      	movs	r2, #0
 800b434:	2300      	movs	r3, #0
 800b436:	f7f5 fb6f 	bl	8000b18 <__aeabi_dcmpeq>
 800b43a:	b1b8      	cbz	r0, 800b46c <pow+0x68>
 800b43c:	2200      	movs	r2, #0
 800b43e:	2300      	movs	r3, #0
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f5 fb68 	bl	8000b18 <__aeabi_dcmpeq>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d146      	bne.n	800b4da <pow+0xd6>
 800b44c:	ec45 4b10 	vmov	d0, r4, r5
 800b450:	f000 f922 	bl	800b698 <finite>
 800b454:	b338      	cbz	r0, 800b4a6 <pow+0xa2>
 800b456:	2200      	movs	r2, #0
 800b458:	2300      	movs	r3, #0
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	f7f5 fb65 	bl	8000b2c <__aeabi_dcmplt>
 800b462:	b300      	cbz	r0, 800b4a6 <pow+0xa2>
 800b464:	f7fc fc42 	bl	8007cec <__errno>
 800b468:	2322      	movs	r3, #34	; 0x22
 800b46a:	e01b      	b.n	800b4a4 <pow+0xa0>
 800b46c:	ec47 6b10 	vmov	d0, r6, r7
 800b470:	f000 f912 	bl	800b698 <finite>
 800b474:	b9e0      	cbnz	r0, 800b4b0 <pow+0xac>
 800b476:	eeb0 0a48 	vmov.f32	s0, s16
 800b47a:	eef0 0a68 	vmov.f32	s1, s17
 800b47e:	f000 f90b 	bl	800b698 <finite>
 800b482:	b1a8      	cbz	r0, 800b4b0 <pow+0xac>
 800b484:	ec45 4b10 	vmov	d0, r4, r5
 800b488:	f000 f906 	bl	800b698 <finite>
 800b48c:	b180      	cbz	r0, 800b4b0 <pow+0xac>
 800b48e:	4632      	mov	r2, r6
 800b490:	463b      	mov	r3, r7
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 fb71 	bl	8000b7c <__aeabi_dcmpun>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d0e2      	beq.n	800b464 <pow+0x60>
 800b49e:	f7fc fc25 	bl	8007cec <__errno>
 800b4a2:	2321      	movs	r3, #33	; 0x21
 800b4a4:	6003      	str	r3, [r0, #0]
 800b4a6:	ecbd 8b02 	vpop	{d8}
 800b4aa:	ec47 6b10 	vmov	d0, r6, r7
 800b4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f7f5 fb2e 	bl	8000b18 <__aeabi_dcmpeq>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d0f2      	beq.n	800b4a6 <pow+0xa2>
 800b4c0:	eeb0 0a48 	vmov.f32	s0, s16
 800b4c4:	eef0 0a68 	vmov.f32	s1, s17
 800b4c8:	f000 f8e6 	bl	800b698 <finite>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d0ea      	beq.n	800b4a6 <pow+0xa2>
 800b4d0:	ec45 4b10 	vmov	d0, r4, r5
 800b4d4:	f000 f8e0 	bl	800b698 <finite>
 800b4d8:	e7c3      	b.n	800b462 <pow+0x5e>
 800b4da:	4f01      	ldr	r7, [pc, #4]	; (800b4e0 <pow+0xdc>)
 800b4dc:	2600      	movs	r6, #0
 800b4de:	e7e2      	b.n	800b4a6 <pow+0xa2>
 800b4e0:	3ff00000 	.word	0x3ff00000

0800b4e4 <sqrt>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	ed2d 8b02 	vpush	{d8}
 800b4ea:	ec55 4b10 	vmov	r4, r5, d0
 800b4ee:	f000 f8df 	bl	800b6b0 <__ieee754_sqrt>
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800b4fe:	eef0 8a60 	vmov.f32	s17, s1
 800b502:	f7f5 fb3b 	bl	8000b7c <__aeabi_dcmpun>
 800b506:	b990      	cbnz	r0, 800b52e <sqrt+0x4a>
 800b508:	2200      	movs	r2, #0
 800b50a:	2300      	movs	r3, #0
 800b50c:	4620      	mov	r0, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	f7f5 fb0c 	bl	8000b2c <__aeabi_dcmplt>
 800b514:	b158      	cbz	r0, 800b52e <sqrt+0x4a>
 800b516:	f7fc fbe9 	bl	8007cec <__errno>
 800b51a:	2321      	movs	r3, #33	; 0x21
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	2200      	movs	r2, #0
 800b520:	2300      	movs	r3, #0
 800b522:	4610      	mov	r0, r2
 800b524:	4619      	mov	r1, r3
 800b526:	f7f5 f9b9 	bl	800089c <__aeabi_ddiv>
 800b52a:	ec41 0b18 	vmov	d8, r0, r1
 800b52e:	eeb0 0a48 	vmov.f32	s0, s16
 800b532:	eef0 0a68 	vmov.f32	s1, s17
 800b536:	ecbd 8b02 	vpop	{d8}
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	0000      	movs	r0, r0
	...

0800b540 <cos>:
 800b540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b542:	ec53 2b10 	vmov	r2, r3, d0
 800b546:	4826      	ldr	r0, [pc, #152]	; (800b5e0 <cos+0xa0>)
 800b548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b54c:	4281      	cmp	r1, r0
 800b54e:	dc06      	bgt.n	800b55e <cos+0x1e>
 800b550:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b5d8 <cos+0x98>
 800b554:	b005      	add	sp, #20
 800b556:	f85d eb04 	ldr.w	lr, [sp], #4
 800b55a:	f000 b985 	b.w	800b868 <__kernel_cos>
 800b55e:	4821      	ldr	r0, [pc, #132]	; (800b5e4 <cos+0xa4>)
 800b560:	4281      	cmp	r1, r0
 800b562:	dd09      	ble.n	800b578 <cos+0x38>
 800b564:	ee10 0a10 	vmov	r0, s0
 800b568:	4619      	mov	r1, r3
 800b56a:	f7f4 feb5 	bl	80002d8 <__aeabi_dsub>
 800b56e:	ec41 0b10 	vmov	d0, r0, r1
 800b572:	b005      	add	sp, #20
 800b574:	f85d fb04 	ldr.w	pc, [sp], #4
 800b578:	4668      	mov	r0, sp
 800b57a:	f001 f8f1 	bl	800c760 <__ieee754_rem_pio2>
 800b57e:	f000 0003 	and.w	r0, r0, #3
 800b582:	2801      	cmp	r0, #1
 800b584:	d00b      	beq.n	800b59e <cos+0x5e>
 800b586:	2802      	cmp	r0, #2
 800b588:	d016      	beq.n	800b5b8 <cos+0x78>
 800b58a:	b9e0      	cbnz	r0, 800b5c6 <cos+0x86>
 800b58c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b590:	ed9d 0b00 	vldr	d0, [sp]
 800b594:	f000 f968 	bl	800b868 <__kernel_cos>
 800b598:	ec51 0b10 	vmov	r0, r1, d0
 800b59c:	e7e7      	b.n	800b56e <cos+0x2e>
 800b59e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5a2:	ed9d 0b00 	vldr	d0, [sp]
 800b5a6:	f000 fa27 	bl	800b9f8 <__kernel_sin>
 800b5aa:	ec53 2b10 	vmov	r2, r3, d0
 800b5ae:	ee10 0a10 	vmov	r0, s0
 800b5b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b5b6:	e7da      	b.n	800b56e <cos+0x2e>
 800b5b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5bc:	ed9d 0b00 	vldr	d0, [sp]
 800b5c0:	f000 f952 	bl	800b868 <__kernel_cos>
 800b5c4:	e7f1      	b.n	800b5aa <cos+0x6a>
 800b5c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5ca:	ed9d 0b00 	vldr	d0, [sp]
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	f000 fa12 	bl	800b9f8 <__kernel_sin>
 800b5d4:	e7e0      	b.n	800b598 <cos+0x58>
 800b5d6:	bf00      	nop
	...
 800b5e0:	3fe921fb 	.word	0x3fe921fb
 800b5e4:	7fefffff 	.word	0x7fefffff

0800b5e8 <sin>:
 800b5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ea:	ec53 2b10 	vmov	r2, r3, d0
 800b5ee:	4828      	ldr	r0, [pc, #160]	; (800b690 <sin+0xa8>)
 800b5f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b5f4:	4281      	cmp	r1, r0
 800b5f6:	dc07      	bgt.n	800b608 <sin+0x20>
 800b5f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b688 <sin+0xa0>
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	b005      	add	sp, #20
 800b600:	f85d eb04 	ldr.w	lr, [sp], #4
 800b604:	f000 b9f8 	b.w	800b9f8 <__kernel_sin>
 800b608:	4822      	ldr	r0, [pc, #136]	; (800b694 <sin+0xac>)
 800b60a:	4281      	cmp	r1, r0
 800b60c:	dd09      	ble.n	800b622 <sin+0x3a>
 800b60e:	ee10 0a10 	vmov	r0, s0
 800b612:	4619      	mov	r1, r3
 800b614:	f7f4 fe60 	bl	80002d8 <__aeabi_dsub>
 800b618:	ec41 0b10 	vmov	d0, r0, r1
 800b61c:	b005      	add	sp, #20
 800b61e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b622:	4668      	mov	r0, sp
 800b624:	f001 f89c 	bl	800c760 <__ieee754_rem_pio2>
 800b628:	f000 0003 	and.w	r0, r0, #3
 800b62c:	2801      	cmp	r0, #1
 800b62e:	d00c      	beq.n	800b64a <sin+0x62>
 800b630:	2802      	cmp	r0, #2
 800b632:	d011      	beq.n	800b658 <sin+0x70>
 800b634:	b9f0      	cbnz	r0, 800b674 <sin+0x8c>
 800b636:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b63a:	ed9d 0b00 	vldr	d0, [sp]
 800b63e:	2001      	movs	r0, #1
 800b640:	f000 f9da 	bl	800b9f8 <__kernel_sin>
 800b644:	ec51 0b10 	vmov	r0, r1, d0
 800b648:	e7e6      	b.n	800b618 <sin+0x30>
 800b64a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b64e:	ed9d 0b00 	vldr	d0, [sp]
 800b652:	f000 f909 	bl	800b868 <__kernel_cos>
 800b656:	e7f5      	b.n	800b644 <sin+0x5c>
 800b658:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b65c:	ed9d 0b00 	vldr	d0, [sp]
 800b660:	2001      	movs	r0, #1
 800b662:	f000 f9c9 	bl	800b9f8 <__kernel_sin>
 800b666:	ec53 2b10 	vmov	r2, r3, d0
 800b66a:	ee10 0a10 	vmov	r0, s0
 800b66e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b672:	e7d1      	b.n	800b618 <sin+0x30>
 800b674:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b678:	ed9d 0b00 	vldr	d0, [sp]
 800b67c:	f000 f8f4 	bl	800b868 <__kernel_cos>
 800b680:	e7f1      	b.n	800b666 <sin+0x7e>
 800b682:	bf00      	nop
 800b684:	f3af 8000 	nop.w
	...
 800b690:	3fe921fb 	.word	0x3fe921fb
 800b694:	7fefffff 	.word	0x7fefffff

0800b698 <finite>:
 800b698:	b082      	sub	sp, #8
 800b69a:	ed8d 0b00 	vstr	d0, [sp]
 800b69e:	9801      	ldr	r0, [sp, #4]
 800b6a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b6a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b6a8:	0fc0      	lsrs	r0, r0, #31
 800b6aa:	b002      	add	sp, #8
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <__ieee754_sqrt>:
 800b6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	ec55 4b10 	vmov	r4, r5, d0
 800b6b8:	4e67      	ldr	r6, [pc, #412]	; (800b858 <__ieee754_sqrt+0x1a8>)
 800b6ba:	43ae      	bics	r6, r5
 800b6bc:	ee10 0a10 	vmov	r0, s0
 800b6c0:	ee10 2a10 	vmov	r2, s0
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	462b      	mov	r3, r5
 800b6c8:	d10d      	bne.n	800b6e6 <__ieee754_sqrt+0x36>
 800b6ca:	f7f4 ffbd 	bl	8000648 <__aeabi_dmul>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	f7f4 fe01 	bl	80002dc <__adddf3>
 800b6da:	4604      	mov	r4, r0
 800b6dc:	460d      	mov	r5, r1
 800b6de:	ec45 4b10 	vmov	d0, r4, r5
 800b6e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	dc0b      	bgt.n	800b702 <__ieee754_sqrt+0x52>
 800b6ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b6ee:	4326      	orrs	r6, r4
 800b6f0:	d0f5      	beq.n	800b6de <__ieee754_sqrt+0x2e>
 800b6f2:	b135      	cbz	r5, 800b702 <__ieee754_sqrt+0x52>
 800b6f4:	f7f4 fdf0 	bl	80002d8 <__aeabi_dsub>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	f7f5 f8ce 	bl	800089c <__aeabi_ddiv>
 800b700:	e7eb      	b.n	800b6da <__ieee754_sqrt+0x2a>
 800b702:	1509      	asrs	r1, r1, #20
 800b704:	f000 808d 	beq.w	800b822 <__ieee754_sqrt+0x172>
 800b708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b70c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b714:	07c9      	lsls	r1, r1, #31
 800b716:	bf5c      	itt	pl
 800b718:	005b      	lslpl	r3, r3, #1
 800b71a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b71e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b722:	bf58      	it	pl
 800b724:	0052      	lslpl	r2, r2, #1
 800b726:	2500      	movs	r5, #0
 800b728:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b72c:	1076      	asrs	r6, r6, #1
 800b72e:	0052      	lsls	r2, r2, #1
 800b730:	f04f 0e16 	mov.w	lr, #22
 800b734:	46ac      	mov	ip, r5
 800b736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b73a:	eb0c 0001 	add.w	r0, ip, r1
 800b73e:	4298      	cmp	r0, r3
 800b740:	bfde      	ittt	le
 800b742:	1a1b      	suble	r3, r3, r0
 800b744:	eb00 0c01 	addle.w	ip, r0, r1
 800b748:	186d      	addle	r5, r5, r1
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	f1be 0e01 	subs.w	lr, lr, #1
 800b750:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b754:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b758:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b75c:	d1ed      	bne.n	800b73a <__ieee754_sqrt+0x8a>
 800b75e:	4674      	mov	r4, lr
 800b760:	2720      	movs	r7, #32
 800b762:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b766:	4563      	cmp	r3, ip
 800b768:	eb01 000e 	add.w	r0, r1, lr
 800b76c:	dc02      	bgt.n	800b774 <__ieee754_sqrt+0xc4>
 800b76e:	d113      	bne.n	800b798 <__ieee754_sqrt+0xe8>
 800b770:	4290      	cmp	r0, r2
 800b772:	d811      	bhi.n	800b798 <__ieee754_sqrt+0xe8>
 800b774:	2800      	cmp	r0, #0
 800b776:	eb00 0e01 	add.w	lr, r0, r1
 800b77a:	da57      	bge.n	800b82c <__ieee754_sqrt+0x17c>
 800b77c:	f1be 0f00 	cmp.w	lr, #0
 800b780:	db54      	blt.n	800b82c <__ieee754_sqrt+0x17c>
 800b782:	f10c 0801 	add.w	r8, ip, #1
 800b786:	eba3 030c 	sub.w	r3, r3, ip
 800b78a:	4290      	cmp	r0, r2
 800b78c:	bf88      	it	hi
 800b78e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b792:	1a12      	subs	r2, r2, r0
 800b794:	440c      	add	r4, r1
 800b796:	46c4      	mov	ip, r8
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	3f01      	subs	r7, #1
 800b79c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b7a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b7a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b7a8:	d1dd      	bne.n	800b766 <__ieee754_sqrt+0xb6>
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	d01b      	beq.n	800b7e6 <__ieee754_sqrt+0x136>
 800b7ae:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b85c <__ieee754_sqrt+0x1ac>
 800b7b2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b860 <__ieee754_sqrt+0x1b0>
 800b7b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b7ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800b7be:	f7f4 fd8b 	bl	80002d8 <__aeabi_dsub>
 800b7c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	f7f5 f9b7 	bl	8000b40 <__aeabi_dcmple>
 800b7d2:	b140      	cbz	r0, 800b7e6 <__ieee754_sqrt+0x136>
 800b7d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b7d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b7dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b7e0:	d126      	bne.n	800b830 <__ieee754_sqrt+0x180>
 800b7e2:	3501      	adds	r5, #1
 800b7e4:	463c      	mov	r4, r7
 800b7e6:	106a      	asrs	r2, r5, #1
 800b7e8:	0863      	lsrs	r3, r4, #1
 800b7ea:	07e9      	lsls	r1, r5, #31
 800b7ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b7f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b7f4:	bf48      	it	mi
 800b7f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b7fa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b7fe:	461c      	mov	r4, r3
 800b800:	e76d      	b.n	800b6de <__ieee754_sqrt+0x2e>
 800b802:	0ad3      	lsrs	r3, r2, #11
 800b804:	3815      	subs	r0, #21
 800b806:	0552      	lsls	r2, r2, #21
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0fa      	beq.n	800b802 <__ieee754_sqrt+0x152>
 800b80c:	02dc      	lsls	r4, r3, #11
 800b80e:	d50a      	bpl.n	800b826 <__ieee754_sqrt+0x176>
 800b810:	f1c1 0420 	rsb	r4, r1, #32
 800b814:	fa22 f404 	lsr.w	r4, r2, r4
 800b818:	1e4d      	subs	r5, r1, #1
 800b81a:	408a      	lsls	r2, r1
 800b81c:	4323      	orrs	r3, r4
 800b81e:	1b41      	subs	r1, r0, r5
 800b820:	e772      	b.n	800b708 <__ieee754_sqrt+0x58>
 800b822:	4608      	mov	r0, r1
 800b824:	e7f0      	b.n	800b808 <__ieee754_sqrt+0x158>
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	3101      	adds	r1, #1
 800b82a:	e7ef      	b.n	800b80c <__ieee754_sqrt+0x15c>
 800b82c:	46e0      	mov	r8, ip
 800b82e:	e7aa      	b.n	800b786 <__ieee754_sqrt+0xd6>
 800b830:	f7f4 fd54 	bl	80002dc <__adddf3>
 800b834:	e9da 8900 	ldrd	r8, r9, [sl]
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f974 	bl	8000b2c <__aeabi_dcmplt>
 800b844:	b120      	cbz	r0, 800b850 <__ieee754_sqrt+0x1a0>
 800b846:	1ca0      	adds	r0, r4, #2
 800b848:	bf08      	it	eq
 800b84a:	3501      	addeq	r5, #1
 800b84c:	3402      	adds	r4, #2
 800b84e:	e7ca      	b.n	800b7e6 <__ieee754_sqrt+0x136>
 800b850:	3401      	adds	r4, #1
 800b852:	f024 0401 	bic.w	r4, r4, #1
 800b856:	e7c6      	b.n	800b7e6 <__ieee754_sqrt+0x136>
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	200001e0 	.word	0x200001e0
 800b860:	200001e8 	.word	0x200001e8
 800b864:	00000000 	.word	0x00000000

0800b868 <__kernel_cos>:
 800b868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ec57 6b10 	vmov	r6, r7, d0
 800b870:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b874:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b878:	ed8d 1b00 	vstr	d1, [sp]
 800b87c:	da07      	bge.n	800b88e <__kernel_cos+0x26>
 800b87e:	ee10 0a10 	vmov	r0, s0
 800b882:	4639      	mov	r1, r7
 800b884:	f7f5 f990 	bl	8000ba8 <__aeabi_d2iz>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f000 8088 	beq.w	800b99e <__kernel_cos+0x136>
 800b88e:	4632      	mov	r2, r6
 800b890:	463b      	mov	r3, r7
 800b892:	4630      	mov	r0, r6
 800b894:	4639      	mov	r1, r7
 800b896:	f7f4 fed7 	bl	8000648 <__aeabi_dmul>
 800b89a:	4b51      	ldr	r3, [pc, #324]	; (800b9e0 <__kernel_cos+0x178>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	f7f4 fed1 	bl	8000648 <__aeabi_dmul>
 800b8a6:	a340      	add	r3, pc, #256	; (adr r3, 800b9a8 <__kernel_cos+0x140>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	468b      	mov	fp, r1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fec8 	bl	8000648 <__aeabi_dmul>
 800b8b8:	a33d      	add	r3, pc, #244	; (adr r3, 800b9b0 <__kernel_cos+0x148>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 fd0d 	bl	80002dc <__adddf3>
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	f7f4 febf 	bl	8000648 <__aeabi_dmul>
 800b8ca:	a33b      	add	r3, pc, #236	; (adr r3, 800b9b8 <__kernel_cos+0x150>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 fd02 	bl	80002d8 <__aeabi_dsub>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	462b      	mov	r3, r5
 800b8d8:	f7f4 feb6 	bl	8000648 <__aeabi_dmul>
 800b8dc:	a338      	add	r3, pc, #224	; (adr r3, 800b9c0 <__kernel_cos+0x158>)
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f7f4 fcfb 	bl	80002dc <__adddf3>
 800b8e6:	4622      	mov	r2, r4
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	f7f4 fead 	bl	8000648 <__aeabi_dmul>
 800b8ee:	a336      	add	r3, pc, #216	; (adr r3, 800b9c8 <__kernel_cos+0x160>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f7f4 fcf0 	bl	80002d8 <__aeabi_dsub>
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	f7f4 fea4 	bl	8000648 <__aeabi_dmul>
 800b900:	a333      	add	r3, pc, #204	; (adr r3, 800b9d0 <__kernel_cos+0x168>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f4 fce9 	bl	80002dc <__adddf3>
 800b90a:	4622      	mov	r2, r4
 800b90c:	462b      	mov	r3, r5
 800b90e:	f7f4 fe9b 	bl	8000648 <__aeabi_dmul>
 800b912:	4622      	mov	r2, r4
 800b914:	462b      	mov	r3, r5
 800b916:	f7f4 fe97 	bl	8000648 <__aeabi_dmul>
 800b91a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b91e:	4604      	mov	r4, r0
 800b920:	460d      	mov	r5, r1
 800b922:	4630      	mov	r0, r6
 800b924:	4639      	mov	r1, r7
 800b926:	f7f4 fe8f 	bl	8000648 <__aeabi_dmul>
 800b92a:	460b      	mov	r3, r1
 800b92c:	4602      	mov	r2, r0
 800b92e:	4629      	mov	r1, r5
 800b930:	4620      	mov	r0, r4
 800b932:	f7f4 fcd1 	bl	80002d8 <__aeabi_dsub>
 800b936:	4b2b      	ldr	r3, [pc, #172]	; (800b9e4 <__kernel_cos+0x17c>)
 800b938:	4598      	cmp	r8, r3
 800b93a:	4606      	mov	r6, r0
 800b93c:	460f      	mov	r7, r1
 800b93e:	dc10      	bgt.n	800b962 <__kernel_cos+0xfa>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4650      	mov	r0, sl
 800b946:	4659      	mov	r1, fp
 800b948:	f7f4 fcc6 	bl	80002d8 <__aeabi_dsub>
 800b94c:	460b      	mov	r3, r1
 800b94e:	4926      	ldr	r1, [pc, #152]	; (800b9e8 <__kernel_cos+0x180>)
 800b950:	4602      	mov	r2, r0
 800b952:	2000      	movs	r0, #0
 800b954:	f7f4 fcc0 	bl	80002d8 <__aeabi_dsub>
 800b958:	ec41 0b10 	vmov	d0, r0, r1
 800b95c:	b003      	add	sp, #12
 800b95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b962:	4b22      	ldr	r3, [pc, #136]	; (800b9ec <__kernel_cos+0x184>)
 800b964:	4920      	ldr	r1, [pc, #128]	; (800b9e8 <__kernel_cos+0x180>)
 800b966:	4598      	cmp	r8, r3
 800b968:	bfcc      	ite	gt
 800b96a:	4d21      	ldrgt	r5, [pc, #132]	; (800b9f0 <__kernel_cos+0x188>)
 800b96c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b970:	2400      	movs	r4, #0
 800b972:	4622      	mov	r2, r4
 800b974:	462b      	mov	r3, r5
 800b976:	2000      	movs	r0, #0
 800b978:	f7f4 fcae 	bl	80002d8 <__aeabi_dsub>
 800b97c:	4622      	mov	r2, r4
 800b97e:	4680      	mov	r8, r0
 800b980:	4689      	mov	r9, r1
 800b982:	462b      	mov	r3, r5
 800b984:	4650      	mov	r0, sl
 800b986:	4659      	mov	r1, fp
 800b988:	f7f4 fca6 	bl	80002d8 <__aeabi_dsub>
 800b98c:	4632      	mov	r2, r6
 800b98e:	463b      	mov	r3, r7
 800b990:	f7f4 fca2 	bl	80002d8 <__aeabi_dsub>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	e7da      	b.n	800b954 <__kernel_cos+0xec>
 800b99e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b9d8 <__kernel_cos+0x170>
 800b9a2:	e7db      	b.n	800b95c <__kernel_cos+0xf4>
 800b9a4:	f3af 8000 	nop.w
 800b9a8:	be8838d4 	.word	0xbe8838d4
 800b9ac:	bda8fae9 	.word	0xbda8fae9
 800b9b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b9b4:	3e21ee9e 	.word	0x3e21ee9e
 800b9b8:	809c52ad 	.word	0x809c52ad
 800b9bc:	3e927e4f 	.word	0x3e927e4f
 800b9c0:	19cb1590 	.word	0x19cb1590
 800b9c4:	3efa01a0 	.word	0x3efa01a0
 800b9c8:	16c15177 	.word	0x16c15177
 800b9cc:	3f56c16c 	.word	0x3f56c16c
 800b9d0:	5555554c 	.word	0x5555554c
 800b9d4:	3fa55555 	.word	0x3fa55555
 800b9d8:	00000000 	.word	0x00000000
 800b9dc:	3ff00000 	.word	0x3ff00000
 800b9e0:	3fe00000 	.word	0x3fe00000
 800b9e4:	3fd33332 	.word	0x3fd33332
 800b9e8:	3ff00000 	.word	0x3ff00000
 800b9ec:	3fe90000 	.word	0x3fe90000
 800b9f0:	3fd20000 	.word	0x3fd20000
 800b9f4:	00000000 	.word	0x00000000

0800b9f8 <__kernel_sin>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	ed2d 8b04 	vpush	{d8-d9}
 800ba00:	eeb0 8a41 	vmov.f32	s16, s2
 800ba04:	eef0 8a61 	vmov.f32	s17, s3
 800ba08:	ec55 4b10 	vmov	r4, r5, d0
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ba16:	9001      	str	r0, [sp, #4]
 800ba18:	da06      	bge.n	800ba28 <__kernel_sin+0x30>
 800ba1a:	ee10 0a10 	vmov	r0, s0
 800ba1e:	4629      	mov	r1, r5
 800ba20:	f7f5 f8c2 	bl	8000ba8 <__aeabi_d2iz>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d051      	beq.n	800bacc <__kernel_sin+0xd4>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f4 fe0a 	bl	8000648 <__aeabi_dmul>
 800ba34:	4682      	mov	sl, r0
 800ba36:	468b      	mov	fp, r1
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f4 fe02 	bl	8000648 <__aeabi_dmul>
 800ba44:	a341      	add	r3, pc, #260	; (adr r3, 800bb4c <__kernel_sin+0x154>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	4680      	mov	r8, r0
 800ba4c:	4689      	mov	r9, r1
 800ba4e:	4650      	mov	r0, sl
 800ba50:	4659      	mov	r1, fp
 800ba52:	f7f4 fdf9 	bl	8000648 <__aeabi_dmul>
 800ba56:	a33f      	add	r3, pc, #252	; (adr r3, 800bb54 <__kernel_sin+0x15c>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	f7f4 fc3c 	bl	80002d8 <__aeabi_dsub>
 800ba60:	4652      	mov	r2, sl
 800ba62:	465b      	mov	r3, fp
 800ba64:	f7f4 fdf0 	bl	8000648 <__aeabi_dmul>
 800ba68:	a33c      	add	r3, pc, #240	; (adr r3, 800bb5c <__kernel_sin+0x164>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fc35 	bl	80002dc <__adddf3>
 800ba72:	4652      	mov	r2, sl
 800ba74:	465b      	mov	r3, fp
 800ba76:	f7f4 fde7 	bl	8000648 <__aeabi_dmul>
 800ba7a:	a33a      	add	r3, pc, #232	; (adr r3, 800bb64 <__kernel_sin+0x16c>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f7f4 fc2a 	bl	80002d8 <__aeabi_dsub>
 800ba84:	4652      	mov	r2, sl
 800ba86:	465b      	mov	r3, fp
 800ba88:	f7f4 fdde 	bl	8000648 <__aeabi_dmul>
 800ba8c:	a337      	add	r3, pc, #220	; (adr r3, 800bb6c <__kernel_sin+0x174>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f7f4 fc23 	bl	80002dc <__adddf3>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	4606      	mov	r6, r0
 800ba9a:	460f      	mov	r7, r1
 800ba9c:	b9eb      	cbnz	r3, 800bada <__kernel_sin+0xe2>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4650      	mov	r0, sl
 800baa4:	4659      	mov	r1, fp
 800baa6:	f7f4 fdcf 	bl	8000648 <__aeabi_dmul>
 800baaa:	a325      	add	r3, pc, #148	; (adr r3, 800bb40 <__kernel_sin+0x148>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f7f4 fc12 	bl	80002d8 <__aeabi_dsub>
 800bab4:	4642      	mov	r2, r8
 800bab6:	464b      	mov	r3, r9
 800bab8:	f7f4 fdc6 	bl	8000648 <__aeabi_dmul>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4620      	mov	r0, r4
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7f4 fc0a 	bl	80002dc <__adddf3>
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	ec45 4b10 	vmov	d0, r4, r5
 800bad0:	b003      	add	sp, #12
 800bad2:	ecbd 8b04 	vpop	{d8-d9}
 800bad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bada:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <__kernel_sin+0x150>)
 800badc:	ec51 0b18 	vmov	r0, r1, d8
 800bae0:	2200      	movs	r2, #0
 800bae2:	f7f4 fdb1 	bl	8000648 <__aeabi_dmul>
 800bae6:	4632      	mov	r2, r6
 800bae8:	ec41 0b19 	vmov	d9, r0, r1
 800baec:	463b      	mov	r3, r7
 800baee:	4640      	mov	r0, r8
 800baf0:	4649      	mov	r1, r9
 800baf2:	f7f4 fda9 	bl	8000648 <__aeabi_dmul>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	ec51 0b19 	vmov	r0, r1, d9
 800bafe:	f7f4 fbeb 	bl	80002d8 <__aeabi_dsub>
 800bb02:	4652      	mov	r2, sl
 800bb04:	465b      	mov	r3, fp
 800bb06:	f7f4 fd9f 	bl	8000648 <__aeabi_dmul>
 800bb0a:	ec53 2b18 	vmov	r2, r3, d8
 800bb0e:	f7f4 fbe3 	bl	80002d8 <__aeabi_dsub>
 800bb12:	a30b      	add	r3, pc, #44	; (adr r3, 800bb40 <__kernel_sin+0x148>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	4606      	mov	r6, r0
 800bb1a:	460f      	mov	r7, r1
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fd92 	bl	8000648 <__aeabi_dmul>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4630      	mov	r0, r6
 800bb2a:	4639      	mov	r1, r7
 800bb2c:	f7f4 fbd6 	bl	80002dc <__adddf3>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4620      	mov	r0, r4
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f4 fbce 	bl	80002d8 <__aeabi_dsub>
 800bb3c:	e7c4      	b.n	800bac8 <__kernel_sin+0xd0>
 800bb3e:	bf00      	nop
 800bb40:	55555549 	.word	0x55555549
 800bb44:	3fc55555 	.word	0x3fc55555
 800bb48:	3fe00000 	.word	0x3fe00000
 800bb4c:	5acfd57c 	.word	0x5acfd57c
 800bb50:	3de5d93a 	.word	0x3de5d93a
 800bb54:	8a2b9ceb 	.word	0x8a2b9ceb
 800bb58:	3e5ae5e6 	.word	0x3e5ae5e6
 800bb5c:	57b1fe7d 	.word	0x57b1fe7d
 800bb60:	3ec71de3 	.word	0x3ec71de3
 800bb64:	19c161d5 	.word	0x19c161d5
 800bb68:	3f2a01a0 	.word	0x3f2a01a0
 800bb6c:	1110f8a6 	.word	0x1110f8a6
 800bb70:	3f811111 	.word	0x3f811111
 800bb74:	00000000 	.word	0x00000000

0800bb78 <__ieee754_atan2>:
 800bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	ec57 6b11 	vmov	r6, r7, d1
 800bb80:	4273      	negs	r3, r6
 800bb82:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bd00 <__ieee754_atan2+0x188>
 800bb86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bb8a:	4333      	orrs	r3, r6
 800bb8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bb90:	4543      	cmp	r3, r8
 800bb92:	ec51 0b10 	vmov	r0, r1, d0
 800bb96:	ee11 5a10 	vmov	r5, s2
 800bb9a:	d80a      	bhi.n	800bbb2 <__ieee754_atan2+0x3a>
 800bb9c:	4244      	negs	r4, r0
 800bb9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bba2:	4304      	orrs	r4, r0
 800bba4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bba8:	4544      	cmp	r4, r8
 800bbaa:	ee10 9a10 	vmov	r9, s0
 800bbae:	468e      	mov	lr, r1
 800bbb0:	d907      	bls.n	800bbc2 <__ieee754_atan2+0x4a>
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	f7f4 fb91 	bl	80002dc <__adddf3>
 800bbba:	ec41 0b10 	vmov	d0, r0, r1
 800bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bbc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bbca:	4334      	orrs	r4, r6
 800bbcc:	d103      	bne.n	800bbd6 <__ieee754_atan2+0x5e>
 800bbce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd2:	f000 bfcd 	b.w	800cb70 <atan>
 800bbd6:	17bc      	asrs	r4, r7, #30
 800bbd8:	f004 0402 	and.w	r4, r4, #2
 800bbdc:	ea53 0909 	orrs.w	r9, r3, r9
 800bbe0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bbe4:	d107      	bne.n	800bbf6 <__ieee754_atan2+0x7e>
 800bbe6:	2c02      	cmp	r4, #2
 800bbe8:	d05f      	beq.n	800bcaa <__ieee754_atan2+0x132>
 800bbea:	2c03      	cmp	r4, #3
 800bbec:	d1e5      	bne.n	800bbba <__ieee754_atan2+0x42>
 800bbee:	a140      	add	r1, pc, #256	; (adr r1, 800bcf0 <__ieee754_atan2+0x178>)
 800bbf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbf4:	e7e1      	b.n	800bbba <__ieee754_atan2+0x42>
 800bbf6:	4315      	orrs	r5, r2
 800bbf8:	d106      	bne.n	800bc08 <__ieee754_atan2+0x90>
 800bbfa:	f1be 0f00 	cmp.w	lr, #0
 800bbfe:	da5f      	bge.n	800bcc0 <__ieee754_atan2+0x148>
 800bc00:	a13d      	add	r1, pc, #244	; (adr r1, 800bcf8 <__ieee754_atan2+0x180>)
 800bc02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc06:	e7d8      	b.n	800bbba <__ieee754_atan2+0x42>
 800bc08:	4542      	cmp	r2, r8
 800bc0a:	d10f      	bne.n	800bc2c <__ieee754_atan2+0xb4>
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc12:	d107      	bne.n	800bc24 <__ieee754_atan2+0xac>
 800bc14:	2c02      	cmp	r4, #2
 800bc16:	d84c      	bhi.n	800bcb2 <__ieee754_atan2+0x13a>
 800bc18:	4b33      	ldr	r3, [pc, #204]	; (800bce8 <__ieee754_atan2+0x170>)
 800bc1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc22:	e7ca      	b.n	800bbba <__ieee754_atan2+0x42>
 800bc24:	2c02      	cmp	r4, #2
 800bc26:	d848      	bhi.n	800bcba <__ieee754_atan2+0x142>
 800bc28:	4b30      	ldr	r3, [pc, #192]	; (800bcec <__ieee754_atan2+0x174>)
 800bc2a:	e7f6      	b.n	800bc1a <__ieee754_atan2+0xa2>
 800bc2c:	4543      	cmp	r3, r8
 800bc2e:	d0e4      	beq.n	800bbfa <__ieee754_atan2+0x82>
 800bc30:	1a9b      	subs	r3, r3, r2
 800bc32:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bc36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc3a:	da1e      	bge.n	800bc7a <__ieee754_atan2+0x102>
 800bc3c:	2f00      	cmp	r7, #0
 800bc3e:	da01      	bge.n	800bc44 <__ieee754_atan2+0xcc>
 800bc40:	323c      	adds	r2, #60	; 0x3c
 800bc42:	db1e      	blt.n	800bc82 <__ieee754_atan2+0x10a>
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	f7f4 fe28 	bl	800089c <__aeabi_ddiv>
 800bc4c:	ec41 0b10 	vmov	d0, r0, r1
 800bc50:	f001 f92e 	bl	800ceb0 <fabs>
 800bc54:	f000 ff8c 	bl	800cb70 <atan>
 800bc58:	ec51 0b10 	vmov	r0, r1, d0
 800bc5c:	2c01      	cmp	r4, #1
 800bc5e:	d013      	beq.n	800bc88 <__ieee754_atan2+0x110>
 800bc60:	2c02      	cmp	r4, #2
 800bc62:	d015      	beq.n	800bc90 <__ieee754_atan2+0x118>
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	d0a8      	beq.n	800bbba <__ieee754_atan2+0x42>
 800bc68:	a317      	add	r3, pc, #92	; (adr r3, 800bcc8 <__ieee754_atan2+0x150>)
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f7f4 fb33 	bl	80002d8 <__aeabi_dsub>
 800bc72:	a317      	add	r3, pc, #92	; (adr r3, 800bcd0 <__ieee754_atan2+0x158>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	e014      	b.n	800bca4 <__ieee754_atan2+0x12c>
 800bc7a:	a117      	add	r1, pc, #92	; (adr r1, 800bcd8 <__ieee754_atan2+0x160>)
 800bc7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc80:	e7ec      	b.n	800bc5c <__ieee754_atan2+0xe4>
 800bc82:	2000      	movs	r0, #0
 800bc84:	2100      	movs	r1, #0
 800bc86:	e7e9      	b.n	800bc5c <__ieee754_atan2+0xe4>
 800bc88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	e794      	b.n	800bbba <__ieee754_atan2+0x42>
 800bc90:	a30d      	add	r3, pc, #52	; (adr r3, 800bcc8 <__ieee754_atan2+0x150>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 fb1f 	bl	80002d8 <__aeabi_dsub>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	a10c      	add	r1, pc, #48	; (adr r1, 800bcd0 <__ieee754_atan2+0x158>)
 800bca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bca4:	f7f4 fb18 	bl	80002d8 <__aeabi_dsub>
 800bca8:	e787      	b.n	800bbba <__ieee754_atan2+0x42>
 800bcaa:	a109      	add	r1, pc, #36	; (adr r1, 800bcd0 <__ieee754_atan2+0x158>)
 800bcac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb0:	e783      	b.n	800bbba <__ieee754_atan2+0x42>
 800bcb2:	a10b      	add	r1, pc, #44	; (adr r1, 800bce0 <__ieee754_atan2+0x168>)
 800bcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb8:	e77f      	b.n	800bbba <__ieee754_atan2+0x42>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	e77c      	b.n	800bbba <__ieee754_atan2+0x42>
 800bcc0:	a105      	add	r1, pc, #20	; (adr r1, 800bcd8 <__ieee754_atan2+0x160>)
 800bcc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc6:	e778      	b.n	800bbba <__ieee754_atan2+0x42>
 800bcc8:	33145c07 	.word	0x33145c07
 800bccc:	3ca1a626 	.word	0x3ca1a626
 800bcd0:	54442d18 	.word	0x54442d18
 800bcd4:	400921fb 	.word	0x400921fb
 800bcd8:	54442d18 	.word	0x54442d18
 800bcdc:	3ff921fb 	.word	0x3ff921fb
 800bce0:	54442d18 	.word	0x54442d18
 800bce4:	3fe921fb 	.word	0x3fe921fb
 800bce8:	0800ec40 	.word	0x0800ec40
 800bcec:	0800ec58 	.word	0x0800ec58
 800bcf0:	54442d18 	.word	0x54442d18
 800bcf4:	c00921fb 	.word	0xc00921fb
 800bcf8:	54442d18 	.word	0x54442d18
 800bcfc:	bff921fb 	.word	0xbff921fb
 800bd00:	7ff00000 	.word	0x7ff00000
 800bd04:	00000000 	.word	0x00000000

0800bd08 <__ieee754_pow>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	ed2d 8b06 	vpush	{d8-d10}
 800bd10:	b089      	sub	sp, #36	; 0x24
 800bd12:	ed8d 1b00 	vstr	d1, [sp]
 800bd16:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bd1a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bd1e:	ea58 0102 	orrs.w	r1, r8, r2
 800bd22:	ec57 6b10 	vmov	r6, r7, d0
 800bd26:	d115      	bne.n	800bd54 <__ieee754_pow+0x4c>
 800bd28:	19b3      	adds	r3, r6, r6
 800bd2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bd2e:	4152      	adcs	r2, r2
 800bd30:	4299      	cmp	r1, r3
 800bd32:	4b89      	ldr	r3, [pc, #548]	; (800bf58 <__ieee754_pow+0x250>)
 800bd34:	4193      	sbcs	r3, r2
 800bd36:	f080 84d1 	bcs.w	800c6dc <__ieee754_pow+0x9d4>
 800bd3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 facb 	bl	80002dc <__adddf3>
 800bd46:	ec41 0b10 	vmov	d0, r0, r1
 800bd4a:	b009      	add	sp, #36	; 0x24
 800bd4c:	ecbd 8b06 	vpop	{d8-d10}
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	4b81      	ldr	r3, [pc, #516]	; (800bf5c <__ieee754_pow+0x254>)
 800bd56:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bd5a:	429c      	cmp	r4, r3
 800bd5c:	ee10 aa10 	vmov	sl, s0
 800bd60:	463d      	mov	r5, r7
 800bd62:	dc06      	bgt.n	800bd72 <__ieee754_pow+0x6a>
 800bd64:	d101      	bne.n	800bd6a <__ieee754_pow+0x62>
 800bd66:	2e00      	cmp	r6, #0
 800bd68:	d1e7      	bne.n	800bd3a <__ieee754_pow+0x32>
 800bd6a:	4598      	cmp	r8, r3
 800bd6c:	dc01      	bgt.n	800bd72 <__ieee754_pow+0x6a>
 800bd6e:	d10f      	bne.n	800bd90 <__ieee754_pow+0x88>
 800bd70:	b172      	cbz	r2, 800bd90 <__ieee754_pow+0x88>
 800bd72:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bd76:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bd7a:	ea55 050a 	orrs.w	r5, r5, sl
 800bd7e:	d1dc      	bne.n	800bd3a <__ieee754_pow+0x32>
 800bd80:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd84:	18db      	adds	r3, r3, r3
 800bd86:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bd8a:	4152      	adcs	r2, r2
 800bd8c:	429d      	cmp	r5, r3
 800bd8e:	e7d0      	b.n	800bd32 <__ieee754_pow+0x2a>
 800bd90:	2d00      	cmp	r5, #0
 800bd92:	da3b      	bge.n	800be0c <__ieee754_pow+0x104>
 800bd94:	4b72      	ldr	r3, [pc, #456]	; (800bf60 <__ieee754_pow+0x258>)
 800bd96:	4598      	cmp	r8, r3
 800bd98:	dc51      	bgt.n	800be3e <__ieee754_pow+0x136>
 800bd9a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bd9e:	4598      	cmp	r8, r3
 800bda0:	f340 84ab 	ble.w	800c6fa <__ieee754_pow+0x9f2>
 800bda4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bda8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdac:	2b14      	cmp	r3, #20
 800bdae:	dd0f      	ble.n	800bdd0 <__ieee754_pow+0xc8>
 800bdb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bdb4:	fa22 f103 	lsr.w	r1, r2, r3
 800bdb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	f040 849c 	bne.w	800c6fa <__ieee754_pow+0x9f2>
 800bdc2:	f001 0101 	and.w	r1, r1, #1
 800bdc6:	f1c1 0302 	rsb	r3, r1, #2
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	b182      	cbz	r2, 800bdf0 <__ieee754_pow+0xe8>
 800bdce:	e05f      	b.n	800be90 <__ieee754_pow+0x188>
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	d15b      	bne.n	800be8c <__ieee754_pow+0x184>
 800bdd4:	f1c3 0314 	rsb	r3, r3, #20
 800bdd8:	fa48 f103 	asr.w	r1, r8, r3
 800bddc:	fa01 f303 	lsl.w	r3, r1, r3
 800bde0:	4543      	cmp	r3, r8
 800bde2:	f040 8487 	bne.w	800c6f4 <__ieee754_pow+0x9ec>
 800bde6:	f001 0101 	and.w	r1, r1, #1
 800bdea:	f1c1 0302 	rsb	r3, r1, #2
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	4b5c      	ldr	r3, [pc, #368]	; (800bf64 <__ieee754_pow+0x25c>)
 800bdf2:	4598      	cmp	r8, r3
 800bdf4:	d132      	bne.n	800be5c <__ieee754_pow+0x154>
 800bdf6:	f1b9 0f00 	cmp.w	r9, #0
 800bdfa:	f280 8477 	bge.w	800c6ec <__ieee754_pow+0x9e4>
 800bdfe:	4959      	ldr	r1, [pc, #356]	; (800bf64 <__ieee754_pow+0x25c>)
 800be00:	4632      	mov	r2, r6
 800be02:	463b      	mov	r3, r7
 800be04:	2000      	movs	r0, #0
 800be06:	f7f4 fd49 	bl	800089c <__aeabi_ddiv>
 800be0a:	e79c      	b.n	800bd46 <__ieee754_pow+0x3e>
 800be0c:	2300      	movs	r3, #0
 800be0e:	9304      	str	r3, [sp, #16]
 800be10:	2a00      	cmp	r2, #0
 800be12:	d13d      	bne.n	800be90 <__ieee754_pow+0x188>
 800be14:	4b51      	ldr	r3, [pc, #324]	; (800bf5c <__ieee754_pow+0x254>)
 800be16:	4598      	cmp	r8, r3
 800be18:	d1ea      	bne.n	800bdf0 <__ieee754_pow+0xe8>
 800be1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800be1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800be22:	ea53 030a 	orrs.w	r3, r3, sl
 800be26:	f000 8459 	beq.w	800c6dc <__ieee754_pow+0x9d4>
 800be2a:	4b4f      	ldr	r3, [pc, #316]	; (800bf68 <__ieee754_pow+0x260>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	dd08      	ble.n	800be42 <__ieee754_pow+0x13a>
 800be30:	f1b9 0f00 	cmp.w	r9, #0
 800be34:	f2c0 8456 	blt.w	800c6e4 <__ieee754_pow+0x9dc>
 800be38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be3c:	e783      	b.n	800bd46 <__ieee754_pow+0x3e>
 800be3e:	2302      	movs	r3, #2
 800be40:	e7e5      	b.n	800be0e <__ieee754_pow+0x106>
 800be42:	f1b9 0f00 	cmp.w	r9, #0
 800be46:	f04f 0000 	mov.w	r0, #0
 800be4a:	f04f 0100 	mov.w	r1, #0
 800be4e:	f6bf af7a 	bge.w	800bd46 <__ieee754_pow+0x3e>
 800be52:	e9dd 0300 	ldrd	r0, r3, [sp]
 800be56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800be5a:	e774      	b.n	800bd46 <__ieee754_pow+0x3e>
 800be5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800be60:	d106      	bne.n	800be70 <__ieee754_pow+0x168>
 800be62:	4632      	mov	r2, r6
 800be64:	463b      	mov	r3, r7
 800be66:	4630      	mov	r0, r6
 800be68:	4639      	mov	r1, r7
 800be6a:	f7f4 fbed 	bl	8000648 <__aeabi_dmul>
 800be6e:	e76a      	b.n	800bd46 <__ieee754_pow+0x3e>
 800be70:	4b3e      	ldr	r3, [pc, #248]	; (800bf6c <__ieee754_pow+0x264>)
 800be72:	4599      	cmp	r9, r3
 800be74:	d10c      	bne.n	800be90 <__ieee754_pow+0x188>
 800be76:	2d00      	cmp	r5, #0
 800be78:	db0a      	blt.n	800be90 <__ieee754_pow+0x188>
 800be7a:	ec47 6b10 	vmov	d0, r6, r7
 800be7e:	b009      	add	sp, #36	; 0x24
 800be80:	ecbd 8b06 	vpop	{d8-d10}
 800be84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	f7ff bc12 	b.w	800b6b0 <__ieee754_sqrt>
 800be8c:	2300      	movs	r3, #0
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	ec47 6b10 	vmov	d0, r6, r7
 800be94:	f001 f80c 	bl	800ceb0 <fabs>
 800be98:	ec51 0b10 	vmov	r0, r1, d0
 800be9c:	f1ba 0f00 	cmp.w	sl, #0
 800bea0:	d129      	bne.n	800bef6 <__ieee754_pow+0x1ee>
 800bea2:	b124      	cbz	r4, 800beae <__ieee754_pow+0x1a6>
 800bea4:	4b2f      	ldr	r3, [pc, #188]	; (800bf64 <__ieee754_pow+0x25c>)
 800bea6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800beaa:	429a      	cmp	r2, r3
 800beac:	d123      	bne.n	800bef6 <__ieee754_pow+0x1ee>
 800beae:	f1b9 0f00 	cmp.w	r9, #0
 800beb2:	da05      	bge.n	800bec0 <__ieee754_pow+0x1b8>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	2000      	movs	r0, #0
 800beba:	492a      	ldr	r1, [pc, #168]	; (800bf64 <__ieee754_pow+0x25c>)
 800bebc:	f7f4 fcee 	bl	800089c <__aeabi_ddiv>
 800bec0:	2d00      	cmp	r5, #0
 800bec2:	f6bf af40 	bge.w	800bd46 <__ieee754_pow+0x3e>
 800bec6:	9b04      	ldr	r3, [sp, #16]
 800bec8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800becc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bed0:	431c      	orrs	r4, r3
 800bed2:	d108      	bne.n	800bee6 <__ieee754_pow+0x1de>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4610      	mov	r0, r2
 800beda:	4619      	mov	r1, r3
 800bedc:	f7f4 f9fc 	bl	80002d8 <__aeabi_dsub>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	e78f      	b.n	800be06 <__ieee754_pow+0xfe>
 800bee6:	9b04      	ldr	r3, [sp, #16]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	f47f af2c 	bne.w	800bd46 <__ieee754_pow+0x3e>
 800beee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef2:	4619      	mov	r1, r3
 800bef4:	e727      	b.n	800bd46 <__ieee754_pow+0x3e>
 800bef6:	0feb      	lsrs	r3, r5, #31
 800bef8:	3b01      	subs	r3, #1
 800befa:	9306      	str	r3, [sp, #24]
 800befc:	9a06      	ldr	r2, [sp, #24]
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	d102      	bne.n	800bf0a <__ieee754_pow+0x202>
 800bf04:	4632      	mov	r2, r6
 800bf06:	463b      	mov	r3, r7
 800bf08:	e7e6      	b.n	800bed8 <__ieee754_pow+0x1d0>
 800bf0a:	4b19      	ldr	r3, [pc, #100]	; (800bf70 <__ieee754_pow+0x268>)
 800bf0c:	4598      	cmp	r8, r3
 800bf0e:	f340 80fb 	ble.w	800c108 <__ieee754_pow+0x400>
 800bf12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bf16:	4598      	cmp	r8, r3
 800bf18:	4b13      	ldr	r3, [pc, #76]	; (800bf68 <__ieee754_pow+0x260>)
 800bf1a:	dd0c      	ble.n	800bf36 <__ieee754_pow+0x22e>
 800bf1c:	429c      	cmp	r4, r3
 800bf1e:	dc0f      	bgt.n	800bf40 <__ieee754_pow+0x238>
 800bf20:	f1b9 0f00 	cmp.w	r9, #0
 800bf24:	da0f      	bge.n	800bf46 <__ieee754_pow+0x23e>
 800bf26:	2000      	movs	r0, #0
 800bf28:	b009      	add	sp, #36	; 0x24
 800bf2a:	ecbd 8b06 	vpop	{d8-d10}
 800bf2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf32:	f001 b86e 	b.w	800d012 <__math_oflow>
 800bf36:	429c      	cmp	r4, r3
 800bf38:	dbf2      	blt.n	800bf20 <__ieee754_pow+0x218>
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <__ieee754_pow+0x25c>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	dd19      	ble.n	800bf74 <__ieee754_pow+0x26c>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	dcef      	bgt.n	800bf26 <__ieee754_pow+0x21e>
 800bf46:	2000      	movs	r0, #0
 800bf48:	b009      	add	sp, #36	; 0x24
 800bf4a:	ecbd 8b06 	vpop	{d8-d10}
 800bf4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf52:	f001 b855 	b.w	800d000 <__math_uflow>
 800bf56:	bf00      	nop
 800bf58:	fff00000 	.word	0xfff00000
 800bf5c:	7ff00000 	.word	0x7ff00000
 800bf60:	433fffff 	.word	0x433fffff
 800bf64:	3ff00000 	.word	0x3ff00000
 800bf68:	3fefffff 	.word	0x3fefffff
 800bf6c:	3fe00000 	.word	0x3fe00000
 800bf70:	41e00000 	.word	0x41e00000
 800bf74:	4b60      	ldr	r3, [pc, #384]	; (800c0f8 <__ieee754_pow+0x3f0>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	f7f4 f9ae 	bl	80002d8 <__aeabi_dsub>
 800bf7c:	a354      	add	r3, pc, #336	; (adr r3, 800c0d0 <__ieee754_pow+0x3c8>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	4604      	mov	r4, r0
 800bf84:	460d      	mov	r5, r1
 800bf86:	f7f4 fb5f 	bl	8000648 <__aeabi_dmul>
 800bf8a:	a353      	add	r3, pc, #332	; (adr r3, 800c0d8 <__ieee754_pow+0x3d0>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	4606      	mov	r6, r0
 800bf92:	460f      	mov	r7, r1
 800bf94:	4620      	mov	r0, r4
 800bf96:	4629      	mov	r1, r5
 800bf98:	f7f4 fb56 	bl	8000648 <__aeabi_dmul>
 800bf9c:	4b57      	ldr	r3, [pc, #348]	; (800c0fc <__ieee754_pow+0x3f4>)
 800bf9e:	4682      	mov	sl, r0
 800bfa0:	468b      	mov	fp, r1
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 fb4e 	bl	8000648 <__aeabi_dmul>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	a14b      	add	r1, pc, #300	; (adr r1, 800c0e0 <__ieee754_pow+0x3d8>)
 800bfb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb6:	f7f4 f98f 	bl	80002d8 <__aeabi_dsub>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	f7f4 fb43 	bl	8000648 <__aeabi_dmul>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	494d      	ldr	r1, [pc, #308]	; (800c100 <__ieee754_pow+0x3f8>)
 800bfca:	f7f4 f985 	bl	80002d8 <__aeabi_dsub>
 800bfce:	4622      	mov	r2, r4
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	4689      	mov	r9, r1
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	f7f4 fb35 	bl	8000648 <__aeabi_dmul>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	f7f4 fb2f 	bl	8000648 <__aeabi_dmul>
 800bfea:	a33f      	add	r3, pc, #252	; (adr r3, 800c0e8 <__ieee754_pow+0x3e0>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 fb2a 	bl	8000648 <__aeabi_dmul>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4650      	mov	r0, sl
 800bffa:	4659      	mov	r1, fp
 800bffc:	f7f4 f96c 	bl	80002d8 <__aeabi_dsub>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4680      	mov	r8, r0
 800c006:	4689      	mov	r9, r1
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 f966 	bl	80002dc <__adddf3>
 800c010:	2000      	movs	r0, #0
 800c012:	4632      	mov	r2, r6
 800c014:	463b      	mov	r3, r7
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	f7f4 f95d 	bl	80002d8 <__aeabi_dsub>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	f7f4 f957 	bl	80002d8 <__aeabi_dsub>
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	9a06      	ldr	r2, [sp, #24]
 800c02e:	3b01      	subs	r3, #1
 800c030:	4313      	orrs	r3, r2
 800c032:	4682      	mov	sl, r0
 800c034:	468b      	mov	fp, r1
 800c036:	f040 81e7 	bne.w	800c408 <__ieee754_pow+0x700>
 800c03a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c0f0 <__ieee754_pow+0x3e8>
 800c03e:	eeb0 8a47 	vmov.f32	s16, s14
 800c042:	eef0 8a67 	vmov.f32	s17, s15
 800c046:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c04a:	2600      	movs	r6, #0
 800c04c:	4632      	mov	r2, r6
 800c04e:	463b      	mov	r3, r7
 800c050:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c054:	f7f4 f940 	bl	80002d8 <__aeabi_dsub>
 800c058:	4622      	mov	r2, r4
 800c05a:	462b      	mov	r3, r5
 800c05c:	f7f4 faf4 	bl	8000648 <__aeabi_dmul>
 800c060:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c064:	4680      	mov	r8, r0
 800c066:	4689      	mov	r9, r1
 800c068:	4650      	mov	r0, sl
 800c06a:	4659      	mov	r1, fp
 800c06c:	f7f4 faec 	bl	8000648 <__aeabi_dmul>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4640      	mov	r0, r8
 800c076:	4649      	mov	r1, r9
 800c078:	f7f4 f930 	bl	80002dc <__adddf3>
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	4680      	mov	r8, r0
 800c082:	4689      	mov	r9, r1
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 fade 	bl	8000648 <__aeabi_dmul>
 800c08c:	460b      	mov	r3, r1
 800c08e:	4604      	mov	r4, r0
 800c090:	460d      	mov	r5, r1
 800c092:	4602      	mov	r2, r0
 800c094:	4649      	mov	r1, r9
 800c096:	4640      	mov	r0, r8
 800c098:	f7f4 f920 	bl	80002dc <__adddf3>
 800c09c:	4b19      	ldr	r3, [pc, #100]	; (800c104 <__ieee754_pow+0x3fc>)
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	ec45 4b19 	vmov	d9, r4, r5
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	468b      	mov	fp, r1
 800c0aa:	f340 82f0 	ble.w	800c68e <__ieee754_pow+0x986>
 800c0ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c0b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c0b6:	4303      	orrs	r3, r0
 800c0b8:	f000 81e4 	beq.w	800c484 <__ieee754_pow+0x77c>
 800c0bc:	ec51 0b18 	vmov	r0, r1, d8
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f7f4 fd32 	bl	8000b2c <__aeabi_dcmplt>
 800c0c8:	3800      	subs	r0, #0
 800c0ca:	bf18      	it	ne
 800c0cc:	2001      	movne	r0, #1
 800c0ce:	e72b      	b.n	800bf28 <__ieee754_pow+0x220>
 800c0d0:	60000000 	.word	0x60000000
 800c0d4:	3ff71547 	.word	0x3ff71547
 800c0d8:	f85ddf44 	.word	0xf85ddf44
 800c0dc:	3e54ae0b 	.word	0x3e54ae0b
 800c0e0:	55555555 	.word	0x55555555
 800c0e4:	3fd55555 	.word	0x3fd55555
 800c0e8:	652b82fe 	.word	0x652b82fe
 800c0ec:	3ff71547 	.word	0x3ff71547
 800c0f0:	00000000 	.word	0x00000000
 800c0f4:	bff00000 	.word	0xbff00000
 800c0f8:	3ff00000 	.word	0x3ff00000
 800c0fc:	3fd00000 	.word	0x3fd00000
 800c100:	3fe00000 	.word	0x3fe00000
 800c104:	408fffff 	.word	0x408fffff
 800c108:	4bd5      	ldr	r3, [pc, #852]	; (800c460 <__ieee754_pow+0x758>)
 800c10a:	402b      	ands	r3, r5
 800c10c:	2200      	movs	r2, #0
 800c10e:	b92b      	cbnz	r3, 800c11c <__ieee754_pow+0x414>
 800c110:	4bd4      	ldr	r3, [pc, #848]	; (800c464 <__ieee754_pow+0x75c>)
 800c112:	f7f4 fa99 	bl	8000648 <__aeabi_dmul>
 800c116:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c11a:	460c      	mov	r4, r1
 800c11c:	1523      	asrs	r3, r4, #20
 800c11e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c122:	4413      	add	r3, r2
 800c124:	9305      	str	r3, [sp, #20]
 800c126:	4bd0      	ldr	r3, [pc, #832]	; (800c468 <__ieee754_pow+0x760>)
 800c128:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c12c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c130:	429c      	cmp	r4, r3
 800c132:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c136:	dd08      	ble.n	800c14a <__ieee754_pow+0x442>
 800c138:	4bcc      	ldr	r3, [pc, #816]	; (800c46c <__ieee754_pow+0x764>)
 800c13a:	429c      	cmp	r4, r3
 800c13c:	f340 8162 	ble.w	800c404 <__ieee754_pow+0x6fc>
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	3301      	adds	r3, #1
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c14a:	2400      	movs	r4, #0
 800c14c:	00e3      	lsls	r3, r4, #3
 800c14e:	9307      	str	r3, [sp, #28]
 800c150:	4bc7      	ldr	r3, [pc, #796]	; (800c470 <__ieee754_pow+0x768>)
 800c152:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c156:	ed93 7b00 	vldr	d7, [r3]
 800c15a:	4629      	mov	r1, r5
 800c15c:	ec53 2b17 	vmov	r2, r3, d7
 800c160:	eeb0 9a47 	vmov.f32	s18, s14
 800c164:	eef0 9a67 	vmov.f32	s19, s15
 800c168:	4682      	mov	sl, r0
 800c16a:	f7f4 f8b5 	bl	80002d8 <__aeabi_dsub>
 800c16e:	4652      	mov	r2, sl
 800c170:	4606      	mov	r6, r0
 800c172:	460f      	mov	r7, r1
 800c174:	462b      	mov	r3, r5
 800c176:	ec51 0b19 	vmov	r0, r1, d9
 800c17a:	f7f4 f8af 	bl	80002dc <__adddf3>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	2000      	movs	r0, #0
 800c184:	49bb      	ldr	r1, [pc, #748]	; (800c474 <__ieee754_pow+0x76c>)
 800c186:	f7f4 fb89 	bl	800089c <__aeabi_ddiv>
 800c18a:	ec41 0b1a 	vmov	d10, r0, r1
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4630      	mov	r0, r6
 800c194:	4639      	mov	r1, r7
 800c196:	f7f4 fa57 	bl	8000648 <__aeabi_dmul>
 800c19a:	2300      	movs	r3, #0
 800c19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c1a6:	46ab      	mov	fp, r5
 800c1a8:	106d      	asrs	r5, r5, #1
 800c1aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c1ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c1b2:	ec41 0b18 	vmov	d8, r0, r1
 800c1b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	4614      	mov	r4, r2
 800c1c2:	461d      	mov	r5, r3
 800c1c4:	f7f4 fa40 	bl	8000648 <__aeabi_dmul>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 f882 	bl	80002d8 <__aeabi_dsub>
 800c1d4:	ec53 2b19 	vmov	r2, r3, d9
 800c1d8:	4606      	mov	r6, r0
 800c1da:	460f      	mov	r7, r1
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 f87a 	bl	80002d8 <__aeabi_dsub>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	4659      	mov	r1, fp
 800c1ec:	f7f4 f874 	bl	80002d8 <__aeabi_dsub>
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	464b      	mov	r3, r9
 800c1f4:	f7f4 fa28 	bl	8000648 <__aeabi_dmul>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	4639      	mov	r1, r7
 800c200:	f7f4 f86a 	bl	80002d8 <__aeabi_dsub>
 800c204:	ec53 2b1a 	vmov	r2, r3, d10
 800c208:	f7f4 fa1e 	bl	8000648 <__aeabi_dmul>
 800c20c:	ec53 2b18 	vmov	r2, r3, d8
 800c210:	ec41 0b19 	vmov	d9, r0, r1
 800c214:	ec51 0b18 	vmov	r0, r1, d8
 800c218:	f7f4 fa16 	bl	8000648 <__aeabi_dmul>
 800c21c:	a37c      	add	r3, pc, #496	; (adr r3, 800c410 <__ieee754_pow+0x708>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	4604      	mov	r4, r0
 800c224:	460d      	mov	r5, r1
 800c226:	f7f4 fa0f 	bl	8000648 <__aeabi_dmul>
 800c22a:	a37b      	add	r3, pc, #492	; (adr r3, 800c418 <__ieee754_pow+0x710>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f7f4 f854 	bl	80002dc <__adddf3>
 800c234:	4622      	mov	r2, r4
 800c236:	462b      	mov	r3, r5
 800c238:	f7f4 fa06 	bl	8000648 <__aeabi_dmul>
 800c23c:	a378      	add	r3, pc, #480	; (adr r3, 800c420 <__ieee754_pow+0x718>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f84b 	bl	80002dc <__adddf3>
 800c246:	4622      	mov	r2, r4
 800c248:	462b      	mov	r3, r5
 800c24a:	f7f4 f9fd 	bl	8000648 <__aeabi_dmul>
 800c24e:	a376      	add	r3, pc, #472	; (adr r3, 800c428 <__ieee754_pow+0x720>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f842 	bl	80002dc <__adddf3>
 800c258:	4622      	mov	r2, r4
 800c25a:	462b      	mov	r3, r5
 800c25c:	f7f4 f9f4 	bl	8000648 <__aeabi_dmul>
 800c260:	a373      	add	r3, pc, #460	; (adr r3, 800c430 <__ieee754_pow+0x728>)
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	f7f4 f839 	bl	80002dc <__adddf3>
 800c26a:	4622      	mov	r2, r4
 800c26c:	462b      	mov	r3, r5
 800c26e:	f7f4 f9eb 	bl	8000648 <__aeabi_dmul>
 800c272:	a371      	add	r3, pc, #452	; (adr r3, 800c438 <__ieee754_pow+0x730>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f7f4 f830 	bl	80002dc <__adddf3>
 800c27c:	4622      	mov	r2, r4
 800c27e:	4606      	mov	r6, r0
 800c280:	460f      	mov	r7, r1
 800c282:	462b      	mov	r3, r5
 800c284:	4620      	mov	r0, r4
 800c286:	4629      	mov	r1, r5
 800c288:	f7f4 f9de 	bl	8000648 <__aeabi_dmul>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4630      	mov	r0, r6
 800c292:	4639      	mov	r1, r7
 800c294:	f7f4 f9d8 	bl	8000648 <__aeabi_dmul>
 800c298:	4642      	mov	r2, r8
 800c29a:	4604      	mov	r4, r0
 800c29c:	460d      	mov	r5, r1
 800c29e:	464b      	mov	r3, r9
 800c2a0:	ec51 0b18 	vmov	r0, r1, d8
 800c2a4:	f7f4 f81a 	bl	80002dc <__adddf3>
 800c2a8:	ec53 2b19 	vmov	r2, r3, d9
 800c2ac:	f7f4 f9cc 	bl	8000648 <__aeabi_dmul>
 800c2b0:	4622      	mov	r2, r4
 800c2b2:	462b      	mov	r3, r5
 800c2b4:	f7f4 f812 	bl	80002dc <__adddf3>
 800c2b8:	4642      	mov	r2, r8
 800c2ba:	4682      	mov	sl, r0
 800c2bc:	468b      	mov	fp, r1
 800c2be:	464b      	mov	r3, r9
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	f7f4 f9c0 	bl	8000648 <__aeabi_dmul>
 800c2c8:	4b6b      	ldr	r3, [pc, #428]	; (800c478 <__ieee754_pow+0x770>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	460f      	mov	r7, r1
 800c2d0:	f7f4 f804 	bl	80002dc <__adddf3>
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	465b      	mov	r3, fp
 800c2d8:	f7f4 f800 	bl	80002dc <__adddf3>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	4649      	mov	r1, r9
 800c2ea:	f7f4 f9ad 	bl	8000648 <__aeabi_dmul>
 800c2ee:	4b62      	ldr	r3, [pc, #392]	; (800c478 <__ieee754_pow+0x770>)
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	4689      	mov	r9, r1
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f7f3 ffed 	bl	80002d8 <__aeabi_dsub>
 800c2fe:	4632      	mov	r2, r6
 800c300:	463b      	mov	r3, r7
 800c302:	f7f3 ffe9 	bl	80002d8 <__aeabi_dsub>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4650      	mov	r0, sl
 800c30c:	4659      	mov	r1, fp
 800c30e:	f7f3 ffe3 	bl	80002d8 <__aeabi_dsub>
 800c312:	ec53 2b18 	vmov	r2, r3, d8
 800c316:	f7f4 f997 	bl	8000648 <__aeabi_dmul>
 800c31a:	4622      	mov	r2, r4
 800c31c:	4606      	mov	r6, r0
 800c31e:	460f      	mov	r7, r1
 800c320:	462b      	mov	r3, r5
 800c322:	ec51 0b19 	vmov	r0, r1, d9
 800c326:	f7f4 f98f 	bl	8000648 <__aeabi_dmul>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	4630      	mov	r0, r6
 800c330:	4639      	mov	r1, r7
 800c332:	f7f3 ffd3 	bl	80002dc <__adddf3>
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	4640      	mov	r0, r8
 800c340:	4649      	mov	r1, r9
 800c342:	f7f3 ffcb 	bl	80002dc <__adddf3>
 800c346:	a33e      	add	r3, pc, #248	; (adr r3, 800c440 <__ieee754_pow+0x738>)
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	2000      	movs	r0, #0
 800c34e:	4604      	mov	r4, r0
 800c350:	460d      	mov	r5, r1
 800c352:	f7f4 f979 	bl	8000648 <__aeabi_dmul>
 800c356:	4642      	mov	r2, r8
 800c358:	ec41 0b18 	vmov	d8, r0, r1
 800c35c:	464b      	mov	r3, r9
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f3 ffb9 	bl	80002d8 <__aeabi_dsub>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4630      	mov	r0, r6
 800c36c:	4639      	mov	r1, r7
 800c36e:	f7f3 ffb3 	bl	80002d8 <__aeabi_dsub>
 800c372:	a335      	add	r3, pc, #212	; (adr r3, 800c448 <__ieee754_pow+0x740>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f4 f966 	bl	8000648 <__aeabi_dmul>
 800c37c:	a334      	add	r3, pc, #208	; (adr r3, 800c450 <__ieee754_pow+0x748>)
 800c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c382:	4606      	mov	r6, r0
 800c384:	460f      	mov	r7, r1
 800c386:	4620      	mov	r0, r4
 800c388:	4629      	mov	r1, r5
 800c38a:	f7f4 f95d 	bl	8000648 <__aeabi_dmul>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	4630      	mov	r0, r6
 800c394:	4639      	mov	r1, r7
 800c396:	f7f3 ffa1 	bl	80002dc <__adddf3>
 800c39a:	9a07      	ldr	r2, [sp, #28]
 800c39c:	4b37      	ldr	r3, [pc, #220]	; (800c47c <__ieee754_pow+0x774>)
 800c39e:	4413      	add	r3, r2
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f3 ff9a 	bl	80002dc <__adddf3>
 800c3a8:	4682      	mov	sl, r0
 800c3aa:	9805      	ldr	r0, [sp, #20]
 800c3ac:	468b      	mov	fp, r1
 800c3ae:	f7f4 f8e1 	bl	8000574 <__aeabi_i2d>
 800c3b2:	9a07      	ldr	r2, [sp, #28]
 800c3b4:	4b32      	ldr	r3, [pc, #200]	; (800c480 <__ieee754_pow+0x778>)
 800c3b6:	4413      	add	r3, r2
 800c3b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3bc:	4606      	mov	r6, r0
 800c3be:	460f      	mov	r7, r1
 800c3c0:	4652      	mov	r2, sl
 800c3c2:	465b      	mov	r3, fp
 800c3c4:	ec51 0b18 	vmov	r0, r1, d8
 800c3c8:	f7f3 ff88 	bl	80002dc <__adddf3>
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	f7f3 ff84 	bl	80002dc <__adddf3>
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	f7f3 ff80 	bl	80002dc <__adddf3>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	4632      	mov	r2, r6
 800c3e0:	463b      	mov	r3, r7
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	f7f3 ff77 	bl	80002d8 <__aeabi_dsub>
 800c3ea:	4642      	mov	r2, r8
 800c3ec:	464b      	mov	r3, r9
 800c3ee:	f7f3 ff73 	bl	80002d8 <__aeabi_dsub>
 800c3f2:	ec53 2b18 	vmov	r2, r3, d8
 800c3f6:	f7f3 ff6f 	bl	80002d8 <__aeabi_dsub>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4650      	mov	r0, sl
 800c400:	4659      	mov	r1, fp
 800c402:	e610      	b.n	800c026 <__ieee754_pow+0x31e>
 800c404:	2401      	movs	r4, #1
 800c406:	e6a1      	b.n	800c14c <__ieee754_pow+0x444>
 800c408:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c458 <__ieee754_pow+0x750>
 800c40c:	e617      	b.n	800c03e <__ieee754_pow+0x336>
 800c40e:	bf00      	nop
 800c410:	4a454eef 	.word	0x4a454eef
 800c414:	3fca7e28 	.word	0x3fca7e28
 800c418:	93c9db65 	.word	0x93c9db65
 800c41c:	3fcd864a 	.word	0x3fcd864a
 800c420:	a91d4101 	.word	0xa91d4101
 800c424:	3fd17460 	.word	0x3fd17460
 800c428:	518f264d 	.word	0x518f264d
 800c42c:	3fd55555 	.word	0x3fd55555
 800c430:	db6fabff 	.word	0xdb6fabff
 800c434:	3fdb6db6 	.word	0x3fdb6db6
 800c438:	33333303 	.word	0x33333303
 800c43c:	3fe33333 	.word	0x3fe33333
 800c440:	e0000000 	.word	0xe0000000
 800c444:	3feec709 	.word	0x3feec709
 800c448:	dc3a03fd 	.word	0xdc3a03fd
 800c44c:	3feec709 	.word	0x3feec709
 800c450:	145b01f5 	.word	0x145b01f5
 800c454:	be3e2fe0 	.word	0xbe3e2fe0
 800c458:	00000000 	.word	0x00000000
 800c45c:	3ff00000 	.word	0x3ff00000
 800c460:	7ff00000 	.word	0x7ff00000
 800c464:	43400000 	.word	0x43400000
 800c468:	0003988e 	.word	0x0003988e
 800c46c:	000bb679 	.word	0x000bb679
 800c470:	0800ec70 	.word	0x0800ec70
 800c474:	3ff00000 	.word	0x3ff00000
 800c478:	40080000 	.word	0x40080000
 800c47c:	0800ec90 	.word	0x0800ec90
 800c480:	0800ec80 	.word	0x0800ec80
 800c484:	a3b3      	add	r3, pc, #716	; (adr r3, 800c754 <__ieee754_pow+0xa4c>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	4640      	mov	r0, r8
 800c48c:	4649      	mov	r1, r9
 800c48e:	f7f3 ff25 	bl	80002dc <__adddf3>
 800c492:	4622      	mov	r2, r4
 800c494:	ec41 0b1a 	vmov	d10, r0, r1
 800c498:	462b      	mov	r3, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	4639      	mov	r1, r7
 800c49e:	f7f3 ff1b 	bl	80002d8 <__aeabi_dsub>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	ec51 0b1a 	vmov	r0, r1, d10
 800c4aa:	f7f4 fb5d 	bl	8000b68 <__aeabi_dcmpgt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f47f ae04 	bne.w	800c0bc <__ieee754_pow+0x3b4>
 800c4b4:	4aa2      	ldr	r2, [pc, #648]	; (800c740 <__ieee754_pow+0xa38>)
 800c4b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	f340 8107 	ble.w	800c6ce <__ieee754_pow+0x9c6>
 800c4c0:	151b      	asrs	r3, r3, #20
 800c4c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c4c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c4ca:	fa4a fa03 	asr.w	sl, sl, r3
 800c4ce:	44da      	add	sl, fp
 800c4d0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c4d4:	489b      	ldr	r0, [pc, #620]	; (800c744 <__ieee754_pow+0xa3c>)
 800c4d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c4da:	4108      	asrs	r0, r1
 800c4dc:	ea00 030a 	and.w	r3, r0, sl
 800c4e0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c4e4:	f1c1 0114 	rsb	r1, r1, #20
 800c4e8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c4ec:	fa4a fa01 	asr.w	sl, sl, r1
 800c4f0:	f1bb 0f00 	cmp.w	fp, #0
 800c4f4:	f04f 0200 	mov.w	r2, #0
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	bfb8      	it	lt
 800c4fe:	f1ca 0a00 	rsblt	sl, sl, #0
 800c502:	f7f3 fee9 	bl	80002d8 <__aeabi_dsub>
 800c506:	ec41 0b19 	vmov	d9, r0, r1
 800c50a:	4642      	mov	r2, r8
 800c50c:	464b      	mov	r3, r9
 800c50e:	ec51 0b19 	vmov	r0, r1, d9
 800c512:	f7f3 fee3 	bl	80002dc <__adddf3>
 800c516:	a37a      	add	r3, pc, #488	; (adr r3, 800c700 <__ieee754_pow+0x9f8>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	2000      	movs	r0, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	460d      	mov	r5, r1
 800c522:	f7f4 f891 	bl	8000648 <__aeabi_dmul>
 800c526:	ec53 2b19 	vmov	r2, r3, d9
 800c52a:	4606      	mov	r6, r0
 800c52c:	460f      	mov	r7, r1
 800c52e:	4620      	mov	r0, r4
 800c530:	4629      	mov	r1, r5
 800c532:	f7f3 fed1 	bl	80002d8 <__aeabi_dsub>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4640      	mov	r0, r8
 800c53c:	4649      	mov	r1, r9
 800c53e:	f7f3 fecb 	bl	80002d8 <__aeabi_dsub>
 800c542:	a371      	add	r3, pc, #452	; (adr r3, 800c708 <__ieee754_pow+0xa00>)
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	f7f4 f87e 	bl	8000648 <__aeabi_dmul>
 800c54c:	a370      	add	r3, pc, #448	; (adr r3, 800c710 <__ieee754_pow+0xa08>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	4680      	mov	r8, r0
 800c554:	4689      	mov	r9, r1
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f4 f875 	bl	8000648 <__aeabi_dmul>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	f7f3 feb9 	bl	80002dc <__adddf3>
 800c56a:	4604      	mov	r4, r0
 800c56c:	460d      	mov	r5, r1
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4630      	mov	r0, r6
 800c574:	4639      	mov	r1, r7
 800c576:	f7f3 feb1 	bl	80002dc <__adddf3>
 800c57a:	4632      	mov	r2, r6
 800c57c:	463b      	mov	r3, r7
 800c57e:	4680      	mov	r8, r0
 800c580:	4689      	mov	r9, r1
 800c582:	f7f3 fea9 	bl	80002d8 <__aeabi_dsub>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4620      	mov	r0, r4
 800c58c:	4629      	mov	r1, r5
 800c58e:	f7f3 fea3 	bl	80002d8 <__aeabi_dsub>
 800c592:	4642      	mov	r2, r8
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	464b      	mov	r3, r9
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f4 f853 	bl	8000648 <__aeabi_dmul>
 800c5a2:	a35d      	add	r3, pc, #372	; (adr r3, 800c718 <__ieee754_pow+0xa10>)
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	f7f4 f84c 	bl	8000648 <__aeabi_dmul>
 800c5b0:	a35b      	add	r3, pc, #364	; (adr r3, 800c720 <__ieee754_pow+0xa18>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	f7f3 fe8f 	bl	80002d8 <__aeabi_dsub>
 800c5ba:	4622      	mov	r2, r4
 800c5bc:	462b      	mov	r3, r5
 800c5be:	f7f4 f843 	bl	8000648 <__aeabi_dmul>
 800c5c2:	a359      	add	r3, pc, #356	; (adr r3, 800c728 <__ieee754_pow+0xa20>)
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f7f3 fe88 	bl	80002dc <__adddf3>
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	f7f4 f83a 	bl	8000648 <__aeabi_dmul>
 800c5d4:	a356      	add	r3, pc, #344	; (adr r3, 800c730 <__ieee754_pow+0xa28>)
 800c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5da:	f7f3 fe7d 	bl	80002d8 <__aeabi_dsub>
 800c5de:	4622      	mov	r2, r4
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	f7f4 f831 	bl	8000648 <__aeabi_dmul>
 800c5e6:	a354      	add	r3, pc, #336	; (adr r3, 800c738 <__ieee754_pow+0xa30>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	f7f3 fe76 	bl	80002dc <__adddf3>
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	f7f4 f828 	bl	8000648 <__aeabi_dmul>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	4649      	mov	r1, r9
 800c600:	f7f3 fe6a 	bl	80002d8 <__aeabi_dsub>
 800c604:	4604      	mov	r4, r0
 800c606:	460d      	mov	r5, r1
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4640      	mov	r0, r8
 800c60e:	4649      	mov	r1, r9
 800c610:	f7f4 f81a 	bl	8000648 <__aeabi_dmul>
 800c614:	2200      	movs	r2, #0
 800c616:	ec41 0b19 	vmov	d9, r0, r1
 800c61a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c61e:	4620      	mov	r0, r4
 800c620:	4629      	mov	r1, r5
 800c622:	f7f3 fe59 	bl	80002d8 <__aeabi_dsub>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	ec51 0b19 	vmov	r0, r1, d9
 800c62e:	f7f4 f935 	bl	800089c <__aeabi_ddiv>
 800c632:	4632      	mov	r2, r6
 800c634:	4604      	mov	r4, r0
 800c636:	460d      	mov	r5, r1
 800c638:	463b      	mov	r3, r7
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	f7f4 f803 	bl	8000648 <__aeabi_dmul>
 800c642:	4632      	mov	r2, r6
 800c644:	463b      	mov	r3, r7
 800c646:	f7f3 fe49 	bl	80002dc <__adddf3>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 fe41 	bl	80002d8 <__aeabi_dsub>
 800c656:	4642      	mov	r2, r8
 800c658:	464b      	mov	r3, r9
 800c65a:	f7f3 fe3d 	bl	80002d8 <__aeabi_dsub>
 800c65e:	460b      	mov	r3, r1
 800c660:	4602      	mov	r2, r0
 800c662:	4939      	ldr	r1, [pc, #228]	; (800c748 <__ieee754_pow+0xa40>)
 800c664:	2000      	movs	r0, #0
 800c666:	f7f3 fe37 	bl	80002d8 <__aeabi_dsub>
 800c66a:	ec41 0b10 	vmov	d0, r0, r1
 800c66e:	ee10 3a90 	vmov	r3, s1
 800c672:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c67a:	da2b      	bge.n	800c6d4 <__ieee754_pow+0x9cc>
 800c67c:	4650      	mov	r0, sl
 800c67e:	f000 fc23 	bl	800cec8 <scalbn>
 800c682:	ec51 0b10 	vmov	r0, r1, d0
 800c686:	ec53 2b18 	vmov	r2, r3, d8
 800c68a:	f7ff bbee 	b.w	800be6a <__ieee754_pow+0x162>
 800c68e:	4b2f      	ldr	r3, [pc, #188]	; (800c74c <__ieee754_pow+0xa44>)
 800c690:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c694:	429e      	cmp	r6, r3
 800c696:	f77f af0d 	ble.w	800c4b4 <__ieee754_pow+0x7ac>
 800c69a:	4b2d      	ldr	r3, [pc, #180]	; (800c750 <__ieee754_pow+0xa48>)
 800c69c:	440b      	add	r3, r1
 800c69e:	4303      	orrs	r3, r0
 800c6a0:	d009      	beq.n	800c6b6 <__ieee754_pow+0x9ae>
 800c6a2:	ec51 0b18 	vmov	r0, r1, d8
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f7f4 fa3f 	bl	8000b2c <__aeabi_dcmplt>
 800c6ae:	3800      	subs	r0, #0
 800c6b0:	bf18      	it	ne
 800c6b2:	2001      	movne	r0, #1
 800c6b4:	e448      	b.n	800bf48 <__ieee754_pow+0x240>
 800c6b6:	4622      	mov	r2, r4
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	f7f3 fe0d 	bl	80002d8 <__aeabi_dsub>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	f7f4 fa47 	bl	8000b54 <__aeabi_dcmpge>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f aef4 	beq.w	800c4b4 <__ieee754_pow+0x7ac>
 800c6cc:	e7e9      	b.n	800c6a2 <__ieee754_pow+0x99a>
 800c6ce:	f04f 0a00 	mov.w	sl, #0
 800c6d2:	e71a      	b.n	800c50a <__ieee754_pow+0x802>
 800c6d4:	ec51 0b10 	vmov	r0, r1, d0
 800c6d8:	4619      	mov	r1, r3
 800c6da:	e7d4      	b.n	800c686 <__ieee754_pow+0x97e>
 800c6dc:	491a      	ldr	r1, [pc, #104]	; (800c748 <__ieee754_pow+0xa40>)
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f7ff bb31 	b.w	800bd46 <__ieee754_pow+0x3e>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	f7ff bb2d 	b.w	800bd46 <__ieee754_pow+0x3e>
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	f7ff bb29 	b.w	800bd46 <__ieee754_pow+0x3e>
 800c6f4:	9204      	str	r2, [sp, #16]
 800c6f6:	f7ff bb7b 	b.w	800bdf0 <__ieee754_pow+0xe8>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f7ff bb65 	b.w	800bdca <__ieee754_pow+0xc2>
 800c700:	00000000 	.word	0x00000000
 800c704:	3fe62e43 	.word	0x3fe62e43
 800c708:	fefa39ef 	.word	0xfefa39ef
 800c70c:	3fe62e42 	.word	0x3fe62e42
 800c710:	0ca86c39 	.word	0x0ca86c39
 800c714:	be205c61 	.word	0xbe205c61
 800c718:	72bea4d0 	.word	0x72bea4d0
 800c71c:	3e663769 	.word	0x3e663769
 800c720:	c5d26bf1 	.word	0xc5d26bf1
 800c724:	3ebbbd41 	.word	0x3ebbbd41
 800c728:	af25de2c 	.word	0xaf25de2c
 800c72c:	3f11566a 	.word	0x3f11566a
 800c730:	16bebd93 	.word	0x16bebd93
 800c734:	3f66c16c 	.word	0x3f66c16c
 800c738:	5555553e 	.word	0x5555553e
 800c73c:	3fc55555 	.word	0x3fc55555
 800c740:	3fe00000 	.word	0x3fe00000
 800c744:	fff00000 	.word	0xfff00000
 800c748:	3ff00000 	.word	0x3ff00000
 800c74c:	4090cbff 	.word	0x4090cbff
 800c750:	3f6f3400 	.word	0x3f6f3400
 800c754:	652b82fe 	.word	0x652b82fe
 800c758:	3c971547 	.word	0x3c971547
 800c75c:	00000000 	.word	0x00000000

0800c760 <__ieee754_rem_pio2>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	ed2d 8b02 	vpush	{d8}
 800c768:	ec55 4b10 	vmov	r4, r5, d0
 800c76c:	4bca      	ldr	r3, [pc, #808]	; (800ca98 <__ieee754_rem_pio2+0x338>)
 800c76e:	b08b      	sub	sp, #44	; 0x2c
 800c770:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c774:	4598      	cmp	r8, r3
 800c776:	4682      	mov	sl, r0
 800c778:	9502      	str	r5, [sp, #8]
 800c77a:	dc08      	bgt.n	800c78e <__ieee754_rem_pio2+0x2e>
 800c77c:	2200      	movs	r2, #0
 800c77e:	2300      	movs	r3, #0
 800c780:	ed80 0b00 	vstr	d0, [r0]
 800c784:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c788:	f04f 0b00 	mov.w	fp, #0
 800c78c:	e028      	b.n	800c7e0 <__ieee754_rem_pio2+0x80>
 800c78e:	4bc3      	ldr	r3, [pc, #780]	; (800ca9c <__ieee754_rem_pio2+0x33c>)
 800c790:	4598      	cmp	r8, r3
 800c792:	dc78      	bgt.n	800c886 <__ieee754_rem_pio2+0x126>
 800c794:	9b02      	ldr	r3, [sp, #8]
 800c796:	4ec2      	ldr	r6, [pc, #776]	; (800caa0 <__ieee754_rem_pio2+0x340>)
 800c798:	2b00      	cmp	r3, #0
 800c79a:	ee10 0a10 	vmov	r0, s0
 800c79e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ca60 <__ieee754_rem_pio2+0x300>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	dd39      	ble.n	800c81c <__ieee754_rem_pio2+0xbc>
 800c7a8:	f7f3 fd96 	bl	80002d8 <__aeabi_dsub>
 800c7ac:	45b0      	cmp	r8, r6
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	d01b      	beq.n	800c7ec <__ieee754_rem_pio2+0x8c>
 800c7b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x308>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	f7f3 fd8d 	bl	80002d8 <__aeabi_dsub>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	e9ca 2300 	strd	r2, r3, [sl]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 fd85 	bl	80002d8 <__aeabi_dsub>
 800c7ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x308>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	f7f3 fd80 	bl	80002d8 <__aeabi_dsub>
 800c7d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c7dc:	f04f 0b01 	mov.w	fp, #1
 800c7e0:	4658      	mov	r0, fp
 800c7e2:	b00b      	add	sp, #44	; 0x2c
 800c7e4:	ecbd 8b02 	vpop	{d8}
 800c7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x310>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	f7f3 fd71 	bl	80002d8 <__aeabi_dsub>
 800c7f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x318>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	f7f3 fd6a 	bl	80002d8 <__aeabi_dsub>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	e9ca 2300 	strd	r2, r3, [sl]
 800c80c:	4620      	mov	r0, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	f7f3 fd62 	bl	80002d8 <__aeabi_dsub>
 800c814:	a398      	add	r3, pc, #608	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x318>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	e7db      	b.n	800c7d4 <__ieee754_rem_pio2+0x74>
 800c81c:	f7f3 fd5e 	bl	80002dc <__adddf3>
 800c820:	45b0      	cmp	r8, r6
 800c822:	4604      	mov	r4, r0
 800c824:	460d      	mov	r5, r1
 800c826:	d016      	beq.n	800c856 <__ieee754_rem_pio2+0xf6>
 800c828:	a38f      	add	r3, pc, #572	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x308>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f3 fd55 	bl	80002dc <__adddf3>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	e9ca 2300 	strd	r2, r3, [sl]
 800c83a:	4620      	mov	r0, r4
 800c83c:	4629      	mov	r1, r5
 800c83e:	f7f3 fd4b 	bl	80002d8 <__aeabi_dsub>
 800c842:	a389      	add	r3, pc, #548	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x308>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fd48 	bl	80002dc <__adddf3>
 800c84c:	f04f 3bff 	mov.w	fp, #4294967295
 800c850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c854:	e7c4      	b.n	800c7e0 <__ieee754_rem_pio2+0x80>
 800c856:	a386      	add	r3, pc, #536	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x310>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	f7f3 fd3e 	bl	80002dc <__adddf3>
 800c860:	a385      	add	r3, pc, #532	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x318>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	4604      	mov	r4, r0
 800c868:	460d      	mov	r5, r1
 800c86a:	f7f3 fd37 	bl	80002dc <__adddf3>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	e9ca 2300 	strd	r2, r3, [sl]
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f3 fd2d 	bl	80002d8 <__aeabi_dsub>
 800c87e:	a37e      	add	r3, pc, #504	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x318>)
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	e7e0      	b.n	800c848 <__ieee754_rem_pio2+0xe8>
 800c886:	4b87      	ldr	r3, [pc, #540]	; (800caa4 <__ieee754_rem_pio2+0x344>)
 800c888:	4598      	cmp	r8, r3
 800c88a:	f300 80d8 	bgt.w	800ca3e <__ieee754_rem_pio2+0x2de>
 800c88e:	f000 fb0f 	bl	800ceb0 <fabs>
 800c892:	ec55 4b10 	vmov	r4, r5, d0
 800c896:	ee10 0a10 	vmov	r0, s0
 800c89a:	a379      	add	r3, pc, #484	; (adr r3, 800ca80 <__ieee754_rem_pio2+0x320>)
 800c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f3 fed1 	bl	8000648 <__aeabi_dmul>
 800c8a6:	4b80      	ldr	r3, [pc, #512]	; (800caa8 <__ieee754_rem_pio2+0x348>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f7f3 fd17 	bl	80002dc <__adddf3>
 800c8ae:	f7f4 f97b 	bl	8000ba8 <__aeabi_d2iz>
 800c8b2:	4683      	mov	fp, r0
 800c8b4:	f7f3 fe5e 	bl	8000574 <__aeabi_i2d>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	ec43 2b18 	vmov	d8, r2, r3
 800c8c0:	a367      	add	r3, pc, #412	; (adr r3, 800ca60 <__ieee754_rem_pio2+0x300>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	f7f3 febf 	bl	8000648 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f3 fd01 	bl	80002d8 <__aeabi_dsub>
 800c8d6:	a364      	add	r3, pc, #400	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x308>)
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	4606      	mov	r6, r0
 800c8de:	460f      	mov	r7, r1
 800c8e0:	ec51 0b18 	vmov	r0, r1, d8
 800c8e4:	f7f3 feb0 	bl	8000648 <__aeabi_dmul>
 800c8e8:	f1bb 0f1f 	cmp.w	fp, #31
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	460d      	mov	r5, r1
 800c8f0:	dc0d      	bgt.n	800c90e <__ieee754_rem_pio2+0x1ae>
 800c8f2:	4b6e      	ldr	r3, [pc, #440]	; (800caac <__ieee754_rem_pio2+0x34c>)
 800c8f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8fc:	4543      	cmp	r3, r8
 800c8fe:	d006      	beq.n	800c90e <__ieee754_rem_pio2+0x1ae>
 800c900:	4622      	mov	r2, r4
 800c902:	462b      	mov	r3, r5
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fce6 	bl	80002d8 <__aeabi_dsub>
 800c90c:	e00e      	b.n	800c92c <__ieee754_rem_pio2+0x1cc>
 800c90e:	462b      	mov	r3, r5
 800c910:	4622      	mov	r2, r4
 800c912:	4630      	mov	r0, r6
 800c914:	4639      	mov	r1, r7
 800c916:	f7f3 fcdf 	bl	80002d8 <__aeabi_dsub>
 800c91a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c924:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c928:	2b10      	cmp	r3, #16
 800c92a:	dc02      	bgt.n	800c932 <__ieee754_rem_pio2+0x1d2>
 800c92c:	e9ca 0100 	strd	r0, r1, [sl]
 800c930:	e039      	b.n	800c9a6 <__ieee754_rem_pio2+0x246>
 800c932:	a34f      	add	r3, pc, #316	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x310>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	ec51 0b18 	vmov	r0, r1, d8
 800c93c:	f7f3 fe84 	bl	8000648 <__aeabi_dmul>
 800c940:	4604      	mov	r4, r0
 800c942:	460d      	mov	r5, r1
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	f7f3 fcc4 	bl	80002d8 <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4680      	mov	r8, r0
 800c956:	4689      	mov	r9, r1
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	f7f3 fcbc 	bl	80002d8 <__aeabi_dsub>
 800c960:	4622      	mov	r2, r4
 800c962:	462b      	mov	r3, r5
 800c964:	f7f3 fcb8 	bl	80002d8 <__aeabi_dsub>
 800c968:	a343      	add	r3, pc, #268	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x318>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	4604      	mov	r4, r0
 800c970:	460d      	mov	r5, r1
 800c972:	ec51 0b18 	vmov	r0, r1, d8
 800c976:	f7f3 fe67 	bl	8000648 <__aeabi_dmul>
 800c97a:	4622      	mov	r2, r4
 800c97c:	462b      	mov	r3, r5
 800c97e:	f7f3 fcab 	bl	80002d8 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4604      	mov	r4, r0
 800c988:	460d      	mov	r5, r1
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f3 fca3 	bl	80002d8 <__aeabi_dsub>
 800c992:	9a03      	ldr	r2, [sp, #12]
 800c994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b31      	cmp	r3, #49	; 0x31
 800c99c:	dc24      	bgt.n	800c9e8 <__ieee754_rem_pio2+0x288>
 800c99e:	e9ca 0100 	strd	r0, r1, [sl]
 800c9a2:	4646      	mov	r6, r8
 800c9a4:	464f      	mov	r7, r9
 800c9a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	4642      	mov	r2, r8
 800c9ae:	464b      	mov	r3, r9
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	f7f3 fc91 	bl	80002d8 <__aeabi_dsub>
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	f7f3 fc8d 	bl	80002d8 <__aeabi_dsub>
 800c9be:	9b02      	ldr	r3, [sp, #8]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c9c6:	f6bf af0b 	bge.w	800c7e0 <__ieee754_rem_pio2+0x80>
 800c9ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c9ce:	f8ca 3004 	str.w	r3, [sl, #4]
 800c9d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9d6:	f8ca 8000 	str.w	r8, [sl]
 800c9da:	f8ca 0008 	str.w	r0, [sl, #8]
 800c9de:	f8ca 300c 	str.w	r3, [sl, #12]
 800c9e2:	f1cb 0b00 	rsb	fp, fp, #0
 800c9e6:	e6fb      	b.n	800c7e0 <__ieee754_rem_pio2+0x80>
 800c9e8:	a327      	add	r3, pc, #156	; (adr r3, 800ca88 <__ieee754_rem_pio2+0x328>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	ec51 0b18 	vmov	r0, r1, d8
 800c9f2:	f7f3 fe29 	bl	8000648 <__aeabi_dmul>
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4640      	mov	r0, r8
 800ca00:	4649      	mov	r1, r9
 800ca02:	f7f3 fc69 	bl	80002d8 <__aeabi_dsub>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f7f3 fc61 	bl	80002d8 <__aeabi_dsub>
 800ca16:	4622      	mov	r2, r4
 800ca18:	462b      	mov	r3, r5
 800ca1a:	f7f3 fc5d 	bl	80002d8 <__aeabi_dsub>
 800ca1e:	a31c      	add	r3, pc, #112	; (adr r3, 800ca90 <__ieee754_rem_pio2+0x330>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	4604      	mov	r4, r0
 800ca26:	460d      	mov	r5, r1
 800ca28:	ec51 0b18 	vmov	r0, r1, d8
 800ca2c:	f7f3 fe0c 	bl	8000648 <__aeabi_dmul>
 800ca30:	4622      	mov	r2, r4
 800ca32:	462b      	mov	r3, r5
 800ca34:	f7f3 fc50 	bl	80002d8 <__aeabi_dsub>
 800ca38:	4604      	mov	r4, r0
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	e760      	b.n	800c900 <__ieee754_rem_pio2+0x1a0>
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	; (800cab0 <__ieee754_rem_pio2+0x350>)
 800ca40:	4598      	cmp	r8, r3
 800ca42:	dd37      	ble.n	800cab4 <__ieee754_rem_pio2+0x354>
 800ca44:	ee10 2a10 	vmov	r2, s0
 800ca48:	462b      	mov	r3, r5
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7f3 fc43 	bl	80002d8 <__aeabi_dsub>
 800ca52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca56:	e9ca 0100 	strd	r0, r1, [sl]
 800ca5a:	e695      	b.n	800c788 <__ieee754_rem_pio2+0x28>
 800ca5c:	f3af 8000 	nop.w
 800ca60:	54400000 	.word	0x54400000
 800ca64:	3ff921fb 	.word	0x3ff921fb
 800ca68:	1a626331 	.word	0x1a626331
 800ca6c:	3dd0b461 	.word	0x3dd0b461
 800ca70:	1a600000 	.word	0x1a600000
 800ca74:	3dd0b461 	.word	0x3dd0b461
 800ca78:	2e037073 	.word	0x2e037073
 800ca7c:	3ba3198a 	.word	0x3ba3198a
 800ca80:	6dc9c883 	.word	0x6dc9c883
 800ca84:	3fe45f30 	.word	0x3fe45f30
 800ca88:	2e000000 	.word	0x2e000000
 800ca8c:	3ba3198a 	.word	0x3ba3198a
 800ca90:	252049c1 	.word	0x252049c1
 800ca94:	397b839a 	.word	0x397b839a
 800ca98:	3fe921fb 	.word	0x3fe921fb
 800ca9c:	4002d97b 	.word	0x4002d97b
 800caa0:	3ff921fb 	.word	0x3ff921fb
 800caa4:	413921fb 	.word	0x413921fb
 800caa8:	3fe00000 	.word	0x3fe00000
 800caac:	0800eca0 	.word	0x0800eca0
 800cab0:	7fefffff 	.word	0x7fefffff
 800cab4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800cab8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800cabc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800cac0:	4620      	mov	r0, r4
 800cac2:	460d      	mov	r5, r1
 800cac4:	f7f4 f870 	bl	8000ba8 <__aeabi_d2iz>
 800cac8:	f7f3 fd54 	bl	8000574 <__aeabi_i2d>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4620      	mov	r0, r4
 800cad2:	4629      	mov	r1, r5
 800cad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cad8:	f7f3 fbfe 	bl	80002d8 <__aeabi_dsub>
 800cadc:	4b21      	ldr	r3, [pc, #132]	; (800cb64 <__ieee754_rem_pio2+0x404>)
 800cade:	2200      	movs	r2, #0
 800cae0:	f7f3 fdb2 	bl	8000648 <__aeabi_dmul>
 800cae4:	460d      	mov	r5, r1
 800cae6:	4604      	mov	r4, r0
 800cae8:	f7f4 f85e 	bl	8000ba8 <__aeabi_d2iz>
 800caec:	f7f3 fd42 	bl	8000574 <__aeabi_i2d>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4620      	mov	r0, r4
 800caf6:	4629      	mov	r1, r5
 800caf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cafc:	f7f3 fbec 	bl	80002d8 <__aeabi_dsub>
 800cb00:	4b18      	ldr	r3, [pc, #96]	; (800cb64 <__ieee754_rem_pio2+0x404>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	f7f3 fda0 	bl	8000648 <__aeabi_dmul>
 800cb08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cb10:	2703      	movs	r7, #3
 800cb12:	2400      	movs	r4, #0
 800cb14:	2500      	movs	r5, #0
 800cb16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	462b      	mov	r3, r5
 800cb1e:	46b9      	mov	r9, r7
 800cb20:	3f01      	subs	r7, #1
 800cb22:	f7f3 fff9 	bl	8000b18 <__aeabi_dcmpeq>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d1f5      	bne.n	800cb16 <__ieee754_rem_pio2+0x3b6>
 800cb2a:	4b0f      	ldr	r3, [pc, #60]	; (800cb68 <__ieee754_rem_pio2+0x408>)
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	2302      	movs	r3, #2
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	4632      	mov	r2, r6
 800cb34:	464b      	mov	r3, r9
 800cb36:	4651      	mov	r1, sl
 800cb38:	a804      	add	r0, sp, #16
 800cb3a:	f000 fa75 	bl	800d028 <__kernel_rem_pio2>
 800cb3e:	9b02      	ldr	r3, [sp, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	4683      	mov	fp, r0
 800cb44:	f6bf ae4c 	bge.w	800c7e0 <__ieee754_rem_pio2+0x80>
 800cb48:	e9da 2100 	ldrd	r2, r1, [sl]
 800cb4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb50:	e9ca 2300 	strd	r2, r3, [sl]
 800cb54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cb58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cb60:	e73f      	b.n	800c9e2 <__ieee754_rem_pio2+0x282>
 800cb62:	bf00      	nop
 800cb64:	41700000 	.word	0x41700000
 800cb68:	0800ed20 	.word	0x0800ed20
 800cb6c:	00000000 	.word	0x00000000

0800cb70 <atan>:
 800cb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	ec55 4b10 	vmov	r4, r5, d0
 800cb78:	4bc3      	ldr	r3, [pc, #780]	; (800ce88 <atan+0x318>)
 800cb7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb7e:	429e      	cmp	r6, r3
 800cb80:	46ab      	mov	fp, r5
 800cb82:	dd18      	ble.n	800cbb6 <atan+0x46>
 800cb84:	4bc1      	ldr	r3, [pc, #772]	; (800ce8c <atan+0x31c>)
 800cb86:	429e      	cmp	r6, r3
 800cb88:	dc01      	bgt.n	800cb8e <atan+0x1e>
 800cb8a:	d109      	bne.n	800cba0 <atan+0x30>
 800cb8c:	b144      	cbz	r4, 800cba0 <atan+0x30>
 800cb8e:	4622      	mov	r2, r4
 800cb90:	462b      	mov	r3, r5
 800cb92:	4620      	mov	r0, r4
 800cb94:	4629      	mov	r1, r5
 800cb96:	f7f3 fba1 	bl	80002dc <__adddf3>
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	e006      	b.n	800cbae <atan+0x3e>
 800cba0:	f1bb 0f00 	cmp.w	fp, #0
 800cba4:	f300 8131 	bgt.w	800ce0a <atan+0x29a>
 800cba8:	a59b      	add	r5, pc, #620	; (adr r5, 800ce18 <atan+0x2a8>)
 800cbaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbae:	ec45 4b10 	vmov	d0, r4, r5
 800cbb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb6:	4bb6      	ldr	r3, [pc, #728]	; (800ce90 <atan+0x320>)
 800cbb8:	429e      	cmp	r6, r3
 800cbba:	dc14      	bgt.n	800cbe6 <atan+0x76>
 800cbbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cbc0:	429e      	cmp	r6, r3
 800cbc2:	dc0d      	bgt.n	800cbe0 <atan+0x70>
 800cbc4:	a396      	add	r3, pc, #600	; (adr r3, 800ce20 <atan+0x2b0>)
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	ee10 0a10 	vmov	r0, s0
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7f3 fb84 	bl	80002dc <__adddf3>
 800cbd4:	4baf      	ldr	r3, [pc, #700]	; (800ce94 <atan+0x324>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f7f3 ffc6 	bl	8000b68 <__aeabi_dcmpgt>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d1e6      	bne.n	800cbae <atan+0x3e>
 800cbe0:	f04f 3aff 	mov.w	sl, #4294967295
 800cbe4:	e02b      	b.n	800cc3e <atan+0xce>
 800cbe6:	f000 f963 	bl	800ceb0 <fabs>
 800cbea:	4bab      	ldr	r3, [pc, #684]	; (800ce98 <atan+0x328>)
 800cbec:	429e      	cmp	r6, r3
 800cbee:	ec55 4b10 	vmov	r4, r5, d0
 800cbf2:	f300 80bf 	bgt.w	800cd74 <atan+0x204>
 800cbf6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cbfa:	429e      	cmp	r6, r3
 800cbfc:	f300 80a0 	bgt.w	800cd40 <atan+0x1d0>
 800cc00:	ee10 2a10 	vmov	r2, s0
 800cc04:	ee10 0a10 	vmov	r0, s0
 800cc08:	462b      	mov	r3, r5
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	f7f3 fb66 	bl	80002dc <__adddf3>
 800cc10:	4ba0      	ldr	r3, [pc, #640]	; (800ce94 <atan+0x324>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	f7f3 fb60 	bl	80002d8 <__aeabi_dsub>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc22:	4620      	mov	r0, r4
 800cc24:	4629      	mov	r1, r5
 800cc26:	f7f3 fb59 	bl	80002dc <__adddf3>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7f3 fe33 	bl	800089c <__aeabi_ddiv>
 800cc36:	f04f 0a00 	mov.w	sl, #0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	4622      	mov	r2, r4
 800cc40:	462b      	mov	r3, r5
 800cc42:	4620      	mov	r0, r4
 800cc44:	4629      	mov	r1, r5
 800cc46:	f7f3 fcff 	bl	8000648 <__aeabi_dmul>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	4680      	mov	r8, r0
 800cc50:	4689      	mov	r9, r1
 800cc52:	f7f3 fcf9 	bl	8000648 <__aeabi_dmul>
 800cc56:	a374      	add	r3, pc, #464	; (adr r3, 800ce28 <atan+0x2b8>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	f7f3 fcf2 	bl	8000648 <__aeabi_dmul>
 800cc64:	a372      	add	r3, pc, #456	; (adr r3, 800ce30 <atan+0x2c0>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f7f3 fb37 	bl	80002dc <__adddf3>
 800cc6e:	4632      	mov	r2, r6
 800cc70:	463b      	mov	r3, r7
 800cc72:	f7f3 fce9 	bl	8000648 <__aeabi_dmul>
 800cc76:	a370      	add	r3, pc, #448	; (adr r3, 800ce38 <atan+0x2c8>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f7f3 fb2e 	bl	80002dc <__adddf3>
 800cc80:	4632      	mov	r2, r6
 800cc82:	463b      	mov	r3, r7
 800cc84:	f7f3 fce0 	bl	8000648 <__aeabi_dmul>
 800cc88:	a36d      	add	r3, pc, #436	; (adr r3, 800ce40 <atan+0x2d0>)
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f7f3 fb25 	bl	80002dc <__adddf3>
 800cc92:	4632      	mov	r2, r6
 800cc94:	463b      	mov	r3, r7
 800cc96:	f7f3 fcd7 	bl	8000648 <__aeabi_dmul>
 800cc9a:	a36b      	add	r3, pc, #428	; (adr r3, 800ce48 <atan+0x2d8>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 fb1c 	bl	80002dc <__adddf3>
 800cca4:	4632      	mov	r2, r6
 800cca6:	463b      	mov	r3, r7
 800cca8:	f7f3 fcce 	bl	8000648 <__aeabi_dmul>
 800ccac:	a368      	add	r3, pc, #416	; (adr r3, 800ce50 <atan+0x2e0>)
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	f7f3 fb13 	bl	80002dc <__adddf3>
 800ccb6:	4642      	mov	r2, r8
 800ccb8:	464b      	mov	r3, r9
 800ccba:	f7f3 fcc5 	bl	8000648 <__aeabi_dmul>
 800ccbe:	a366      	add	r3, pc, #408	; (adr r3, 800ce58 <atan+0x2e8>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	4680      	mov	r8, r0
 800ccc6:	4689      	mov	r9, r1
 800ccc8:	4630      	mov	r0, r6
 800ccca:	4639      	mov	r1, r7
 800cccc:	f7f3 fcbc 	bl	8000648 <__aeabi_dmul>
 800ccd0:	a363      	add	r3, pc, #396	; (adr r3, 800ce60 <atan+0x2f0>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f7f3 faff 	bl	80002d8 <__aeabi_dsub>
 800ccda:	4632      	mov	r2, r6
 800ccdc:	463b      	mov	r3, r7
 800ccde:	f7f3 fcb3 	bl	8000648 <__aeabi_dmul>
 800cce2:	a361      	add	r3, pc, #388	; (adr r3, 800ce68 <atan+0x2f8>)
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	f7f3 faf6 	bl	80002d8 <__aeabi_dsub>
 800ccec:	4632      	mov	r2, r6
 800ccee:	463b      	mov	r3, r7
 800ccf0:	f7f3 fcaa 	bl	8000648 <__aeabi_dmul>
 800ccf4:	a35e      	add	r3, pc, #376	; (adr r3, 800ce70 <atan+0x300>)
 800ccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfa:	f7f3 faed 	bl	80002d8 <__aeabi_dsub>
 800ccfe:	4632      	mov	r2, r6
 800cd00:	463b      	mov	r3, r7
 800cd02:	f7f3 fca1 	bl	8000648 <__aeabi_dmul>
 800cd06:	a35c      	add	r3, pc, #368	; (adr r3, 800ce78 <atan+0x308>)
 800cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0c:	f7f3 fae4 	bl	80002d8 <__aeabi_dsub>
 800cd10:	4632      	mov	r2, r6
 800cd12:	463b      	mov	r3, r7
 800cd14:	f7f3 fc98 	bl	8000648 <__aeabi_dmul>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	4649      	mov	r1, r9
 800cd20:	f7f3 fadc 	bl	80002dc <__adddf3>
 800cd24:	4622      	mov	r2, r4
 800cd26:	462b      	mov	r3, r5
 800cd28:	f7f3 fc8e 	bl	8000648 <__aeabi_dmul>
 800cd2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cd30:	4602      	mov	r2, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	d14b      	bne.n	800cdce <atan+0x25e>
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 facd 	bl	80002d8 <__aeabi_dsub>
 800cd3e:	e72c      	b.n	800cb9a <atan+0x2a>
 800cd40:	ee10 0a10 	vmov	r0, s0
 800cd44:	4b53      	ldr	r3, [pc, #332]	; (800ce94 <atan+0x324>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7f3 fac5 	bl	80002d8 <__aeabi_dsub>
 800cd4e:	4b51      	ldr	r3, [pc, #324]	; (800ce94 <atan+0x324>)
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	2200      	movs	r2, #0
 800cd56:	4620      	mov	r0, r4
 800cd58:	4629      	mov	r1, r5
 800cd5a:	f7f3 fabf 	bl	80002dc <__adddf3>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4630      	mov	r0, r6
 800cd64:	4639      	mov	r1, r7
 800cd66:	f7f3 fd99 	bl	800089c <__aeabi_ddiv>
 800cd6a:	f04f 0a01 	mov.w	sl, #1
 800cd6e:	4604      	mov	r4, r0
 800cd70:	460d      	mov	r5, r1
 800cd72:	e764      	b.n	800cc3e <atan+0xce>
 800cd74:	4b49      	ldr	r3, [pc, #292]	; (800ce9c <atan+0x32c>)
 800cd76:	429e      	cmp	r6, r3
 800cd78:	da1d      	bge.n	800cdb6 <atan+0x246>
 800cd7a:	ee10 0a10 	vmov	r0, s0
 800cd7e:	4b48      	ldr	r3, [pc, #288]	; (800cea0 <atan+0x330>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	4629      	mov	r1, r5
 800cd84:	f7f3 faa8 	bl	80002d8 <__aeabi_dsub>
 800cd88:	4b45      	ldr	r3, [pc, #276]	; (800cea0 <atan+0x330>)
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460f      	mov	r7, r1
 800cd8e:	2200      	movs	r2, #0
 800cd90:	4620      	mov	r0, r4
 800cd92:	4629      	mov	r1, r5
 800cd94:	f7f3 fc58 	bl	8000648 <__aeabi_dmul>
 800cd98:	4b3e      	ldr	r3, [pc, #248]	; (800ce94 <atan+0x324>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f7f3 fa9e 	bl	80002dc <__adddf3>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f7f3 fd78 	bl	800089c <__aeabi_ddiv>
 800cdac:	f04f 0a02 	mov.w	sl, #2
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	460d      	mov	r5, r1
 800cdb4:	e743      	b.n	800cc3e <atan+0xce>
 800cdb6:	462b      	mov	r3, r5
 800cdb8:	ee10 2a10 	vmov	r2, s0
 800cdbc:	4939      	ldr	r1, [pc, #228]	; (800cea4 <atan+0x334>)
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	f7f3 fd6c 	bl	800089c <__aeabi_ddiv>
 800cdc4:	f04f 0a03 	mov.w	sl, #3
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	e737      	b.n	800cc3e <atan+0xce>
 800cdce:	4b36      	ldr	r3, [pc, #216]	; (800cea8 <atan+0x338>)
 800cdd0:	4e36      	ldr	r6, [pc, #216]	; (800ceac <atan+0x33c>)
 800cdd2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdda:	f7f3 fa7d 	bl	80002d8 <__aeabi_dsub>
 800cdde:	4622      	mov	r2, r4
 800cde0:	462b      	mov	r3, r5
 800cde2:	f7f3 fa79 	bl	80002d8 <__aeabi_dsub>
 800cde6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cdf2:	f7f3 fa71 	bl	80002d8 <__aeabi_dsub>
 800cdf6:	f1bb 0f00 	cmp.w	fp, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	f6bf aed6 	bge.w	800cbae <atan+0x3e>
 800ce02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce06:	461d      	mov	r5, r3
 800ce08:	e6d1      	b.n	800cbae <atan+0x3e>
 800ce0a:	a51d      	add	r5, pc, #116	; (adr r5, 800ce80 <atan+0x310>)
 800ce0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce10:	e6cd      	b.n	800cbae <atan+0x3e>
 800ce12:	bf00      	nop
 800ce14:	f3af 8000 	nop.w
 800ce18:	54442d18 	.word	0x54442d18
 800ce1c:	bff921fb 	.word	0xbff921fb
 800ce20:	8800759c 	.word	0x8800759c
 800ce24:	7e37e43c 	.word	0x7e37e43c
 800ce28:	e322da11 	.word	0xe322da11
 800ce2c:	3f90ad3a 	.word	0x3f90ad3a
 800ce30:	24760deb 	.word	0x24760deb
 800ce34:	3fa97b4b 	.word	0x3fa97b4b
 800ce38:	a0d03d51 	.word	0xa0d03d51
 800ce3c:	3fb10d66 	.word	0x3fb10d66
 800ce40:	c54c206e 	.word	0xc54c206e
 800ce44:	3fb745cd 	.word	0x3fb745cd
 800ce48:	920083ff 	.word	0x920083ff
 800ce4c:	3fc24924 	.word	0x3fc24924
 800ce50:	5555550d 	.word	0x5555550d
 800ce54:	3fd55555 	.word	0x3fd55555
 800ce58:	2c6a6c2f 	.word	0x2c6a6c2f
 800ce5c:	bfa2b444 	.word	0xbfa2b444
 800ce60:	52defd9a 	.word	0x52defd9a
 800ce64:	3fadde2d 	.word	0x3fadde2d
 800ce68:	af749a6d 	.word	0xaf749a6d
 800ce6c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ce70:	fe231671 	.word	0xfe231671
 800ce74:	3fbc71c6 	.word	0x3fbc71c6
 800ce78:	9998ebc4 	.word	0x9998ebc4
 800ce7c:	3fc99999 	.word	0x3fc99999
 800ce80:	54442d18 	.word	0x54442d18
 800ce84:	3ff921fb 	.word	0x3ff921fb
 800ce88:	440fffff 	.word	0x440fffff
 800ce8c:	7ff00000 	.word	0x7ff00000
 800ce90:	3fdbffff 	.word	0x3fdbffff
 800ce94:	3ff00000 	.word	0x3ff00000
 800ce98:	3ff2ffff 	.word	0x3ff2ffff
 800ce9c:	40038000 	.word	0x40038000
 800cea0:	3ff80000 	.word	0x3ff80000
 800cea4:	bff00000 	.word	0xbff00000
 800cea8:	0800ee48 	.word	0x0800ee48
 800ceac:	0800ee28 	.word	0x0800ee28

0800ceb0 <fabs>:
 800ceb0:	ec51 0b10 	vmov	r0, r1, d0
 800ceb4:	ee10 2a10 	vmov	r2, s0
 800ceb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cebc:	ec43 2b10 	vmov	d0, r2, r3
 800cec0:	4770      	bx	lr
 800cec2:	0000      	movs	r0, r0
 800cec4:	0000      	movs	r0, r0
	...

0800cec8 <scalbn>:
 800cec8:	b570      	push	{r4, r5, r6, lr}
 800ceca:	ec55 4b10 	vmov	r4, r5, d0
 800cece:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ced2:	4606      	mov	r6, r0
 800ced4:	462b      	mov	r3, r5
 800ced6:	b999      	cbnz	r1, 800cf00 <scalbn+0x38>
 800ced8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cedc:	4323      	orrs	r3, r4
 800cede:	d03f      	beq.n	800cf60 <scalbn+0x98>
 800cee0:	4b35      	ldr	r3, [pc, #212]	; (800cfb8 <scalbn+0xf0>)
 800cee2:	4629      	mov	r1, r5
 800cee4:	ee10 0a10 	vmov	r0, s0
 800cee8:	2200      	movs	r2, #0
 800ceea:	f7f3 fbad 	bl	8000648 <__aeabi_dmul>
 800ceee:	4b33      	ldr	r3, [pc, #204]	; (800cfbc <scalbn+0xf4>)
 800cef0:	429e      	cmp	r6, r3
 800cef2:	4604      	mov	r4, r0
 800cef4:	460d      	mov	r5, r1
 800cef6:	da10      	bge.n	800cf1a <scalbn+0x52>
 800cef8:	a327      	add	r3, pc, #156	; (adr r3, 800cf98 <scalbn+0xd0>)
 800cefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefe:	e01f      	b.n	800cf40 <scalbn+0x78>
 800cf00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cf04:	4291      	cmp	r1, r2
 800cf06:	d10c      	bne.n	800cf22 <scalbn+0x5a>
 800cf08:	ee10 2a10 	vmov	r2, s0
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	4629      	mov	r1, r5
 800cf10:	f7f3 f9e4 	bl	80002dc <__adddf3>
 800cf14:	4604      	mov	r4, r0
 800cf16:	460d      	mov	r5, r1
 800cf18:	e022      	b.n	800cf60 <scalbn+0x98>
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cf20:	3936      	subs	r1, #54	; 0x36
 800cf22:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cf26:	4296      	cmp	r6, r2
 800cf28:	dd0d      	ble.n	800cf46 <scalbn+0x7e>
 800cf2a:	2d00      	cmp	r5, #0
 800cf2c:	a11c      	add	r1, pc, #112	; (adr r1, 800cfa0 <scalbn+0xd8>)
 800cf2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf32:	da02      	bge.n	800cf3a <scalbn+0x72>
 800cf34:	a11c      	add	r1, pc, #112	; (adr r1, 800cfa8 <scalbn+0xe0>)
 800cf36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3a:	a319      	add	r3, pc, #100	; (adr r3, 800cfa0 <scalbn+0xd8>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f7f3 fb82 	bl	8000648 <__aeabi_dmul>
 800cf44:	e7e6      	b.n	800cf14 <scalbn+0x4c>
 800cf46:	1872      	adds	r2, r6, r1
 800cf48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf4c:	428a      	cmp	r2, r1
 800cf4e:	dcec      	bgt.n	800cf2a <scalbn+0x62>
 800cf50:	2a00      	cmp	r2, #0
 800cf52:	dd08      	ble.n	800cf66 <scalbn+0x9e>
 800cf54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf60:	ec45 4b10 	vmov	d0, r4, r5
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
 800cf66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cf6a:	da08      	bge.n	800cf7e <scalbn+0xb6>
 800cf6c:	2d00      	cmp	r5, #0
 800cf6e:	a10a      	add	r1, pc, #40	; (adr r1, 800cf98 <scalbn+0xd0>)
 800cf70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf74:	dac0      	bge.n	800cef8 <scalbn+0x30>
 800cf76:	a10e      	add	r1, pc, #56	; (adr r1, 800cfb0 <scalbn+0xe8>)
 800cf78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf7c:	e7bc      	b.n	800cef8 <scalbn+0x30>
 800cf7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf82:	3236      	adds	r2, #54	; 0x36
 800cf84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <scalbn+0xf8>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	e7d5      	b.n	800cf40 <scalbn+0x78>
 800cf94:	f3af 8000 	nop.w
 800cf98:	c2f8f359 	.word	0xc2f8f359
 800cf9c:	01a56e1f 	.word	0x01a56e1f
 800cfa0:	8800759c 	.word	0x8800759c
 800cfa4:	7e37e43c 	.word	0x7e37e43c
 800cfa8:	8800759c 	.word	0x8800759c
 800cfac:	fe37e43c 	.word	0xfe37e43c
 800cfb0:	c2f8f359 	.word	0xc2f8f359
 800cfb4:	81a56e1f 	.word	0x81a56e1f
 800cfb8:	43500000 	.word	0x43500000
 800cfbc:	ffff3cb0 	.word	0xffff3cb0
 800cfc0:	3c900000 	.word	0x3c900000

0800cfc4 <with_errno>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	460d      	mov	r5, r1
 800cfca:	4616      	mov	r6, r2
 800cfcc:	f7fa fe8e 	bl	8007cec <__errno>
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	6006      	str	r6, [r0, #0]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}

0800cfd8 <xflow>:
 800cfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfda:	4614      	mov	r4, r2
 800cfdc:	461d      	mov	r5, r3
 800cfde:	b108      	cbz	r0, 800cfe4 <xflow+0xc>
 800cfe0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cfe4:	e9cd 2300 	strd	r2, r3, [sp]
 800cfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfec:	4620      	mov	r0, r4
 800cfee:	4629      	mov	r1, r5
 800cff0:	f7f3 fb2a 	bl	8000648 <__aeabi_dmul>
 800cff4:	2222      	movs	r2, #34	; 0x22
 800cff6:	b003      	add	sp, #12
 800cff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cffc:	f7ff bfe2 	b.w	800cfc4 <with_errno>

0800d000 <__math_uflow>:
 800d000:	b508      	push	{r3, lr}
 800d002:	2200      	movs	r2, #0
 800d004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d008:	f7ff ffe6 	bl	800cfd8 <xflow>
 800d00c:	ec41 0b10 	vmov	d0, r0, r1
 800d010:	bd08      	pop	{r3, pc}

0800d012 <__math_oflow>:
 800d012:	b508      	push	{r3, lr}
 800d014:	2200      	movs	r2, #0
 800d016:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d01a:	f7ff ffdd 	bl	800cfd8 <xflow>
 800d01e:	ec41 0b10 	vmov	d0, r0, r1
 800d022:	bd08      	pop	{r3, pc}
 800d024:	0000      	movs	r0, r0
	...

0800d028 <__kernel_rem_pio2>:
 800d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	ed2d 8b02 	vpush	{d8}
 800d030:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d034:	f112 0f14 	cmn.w	r2, #20
 800d038:	9306      	str	r3, [sp, #24]
 800d03a:	9104      	str	r1, [sp, #16]
 800d03c:	4bc2      	ldr	r3, [pc, #776]	; (800d348 <__kernel_rem_pio2+0x320>)
 800d03e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d040:	9009      	str	r0, [sp, #36]	; 0x24
 800d042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	9b06      	ldr	r3, [sp, #24]
 800d04a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d04e:	bfa8      	it	ge
 800d050:	1ed4      	subge	r4, r2, #3
 800d052:	9305      	str	r3, [sp, #20]
 800d054:	bfb2      	itee	lt
 800d056:	2400      	movlt	r4, #0
 800d058:	2318      	movge	r3, #24
 800d05a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d05e:	f06f 0317 	mvn.w	r3, #23
 800d062:	fb04 3303 	mla	r3, r4, r3, r3
 800d066:	eb03 0a02 	add.w	sl, r3, r2
 800d06a:	9b00      	ldr	r3, [sp, #0]
 800d06c:	9a05      	ldr	r2, [sp, #20]
 800d06e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d338 <__kernel_rem_pio2+0x310>
 800d072:	eb03 0802 	add.w	r8, r3, r2
 800d076:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d078:	1aa7      	subs	r7, r4, r2
 800d07a:	ae20      	add	r6, sp, #128	; 0x80
 800d07c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d080:	2500      	movs	r5, #0
 800d082:	4545      	cmp	r5, r8
 800d084:	dd13      	ble.n	800d0ae <__kernel_rem_pio2+0x86>
 800d086:	9b06      	ldr	r3, [sp, #24]
 800d088:	aa20      	add	r2, sp, #128	; 0x80
 800d08a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d08e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d092:	f04f 0800 	mov.w	r8, #0
 800d096:	9b00      	ldr	r3, [sp, #0]
 800d098:	4598      	cmp	r8, r3
 800d09a:	dc31      	bgt.n	800d100 <__kernel_rem_pio2+0xd8>
 800d09c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d338 <__kernel_rem_pio2+0x310>
 800d0a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d0a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d0a8:	462f      	mov	r7, r5
 800d0aa:	2600      	movs	r6, #0
 800d0ac:	e01b      	b.n	800d0e6 <__kernel_rem_pio2+0xbe>
 800d0ae:	42ef      	cmn	r7, r5
 800d0b0:	d407      	bmi.n	800d0c2 <__kernel_rem_pio2+0x9a>
 800d0b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d0b6:	f7f3 fa5d 	bl	8000574 <__aeabi_i2d>
 800d0ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d0be:	3501      	adds	r5, #1
 800d0c0:	e7df      	b.n	800d082 <__kernel_rem_pio2+0x5a>
 800d0c2:	ec51 0b18 	vmov	r0, r1, d8
 800d0c6:	e7f8      	b.n	800d0ba <__kernel_rem_pio2+0x92>
 800d0c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d0d0:	f7f3 faba 	bl	8000648 <__aeabi_dmul>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0dc:	f7f3 f8fe 	bl	80002dc <__adddf3>
 800d0e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0e4:	3601      	adds	r6, #1
 800d0e6:	9b05      	ldr	r3, [sp, #20]
 800d0e8:	429e      	cmp	r6, r3
 800d0ea:	f1a7 0708 	sub.w	r7, r7, #8
 800d0ee:	ddeb      	ble.n	800d0c8 <__kernel_rem_pio2+0xa0>
 800d0f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0f4:	f108 0801 	add.w	r8, r8, #1
 800d0f8:	ecab 7b02 	vstmia	fp!, {d7}
 800d0fc:	3508      	adds	r5, #8
 800d0fe:	e7ca      	b.n	800d096 <__kernel_rem_pio2+0x6e>
 800d100:	9b00      	ldr	r3, [sp, #0]
 800d102:	aa0c      	add	r2, sp, #48	; 0x30
 800d104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d108:	930b      	str	r3, [sp, #44]	; 0x2c
 800d10a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d10c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d110:	9c00      	ldr	r4, [sp, #0]
 800d112:	930a      	str	r3, [sp, #40]	; 0x28
 800d114:	00e3      	lsls	r3, r4, #3
 800d116:	9308      	str	r3, [sp, #32]
 800d118:	ab98      	add	r3, sp, #608	; 0x260
 800d11a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d11e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d122:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d126:	ab70      	add	r3, sp, #448	; 0x1c0
 800d128:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d12c:	46c3      	mov	fp, r8
 800d12e:	46a1      	mov	r9, r4
 800d130:	f1b9 0f00 	cmp.w	r9, #0
 800d134:	f1a5 0508 	sub.w	r5, r5, #8
 800d138:	dc77      	bgt.n	800d22a <__kernel_rem_pio2+0x202>
 800d13a:	ec47 6b10 	vmov	d0, r6, r7
 800d13e:	4650      	mov	r0, sl
 800d140:	f7ff fec2 	bl	800cec8 <scalbn>
 800d144:	ec57 6b10 	vmov	r6, r7, d0
 800d148:	2200      	movs	r2, #0
 800d14a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d14e:	ee10 0a10 	vmov	r0, s0
 800d152:	4639      	mov	r1, r7
 800d154:	f7f3 fa78 	bl	8000648 <__aeabi_dmul>
 800d158:	ec41 0b10 	vmov	d0, r0, r1
 800d15c:	f000 fab4 	bl	800d6c8 <floor>
 800d160:	4b7a      	ldr	r3, [pc, #488]	; (800d34c <__kernel_rem_pio2+0x324>)
 800d162:	ec51 0b10 	vmov	r0, r1, d0
 800d166:	2200      	movs	r2, #0
 800d168:	f7f3 fa6e 	bl	8000648 <__aeabi_dmul>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4630      	mov	r0, r6
 800d172:	4639      	mov	r1, r7
 800d174:	f7f3 f8b0 	bl	80002d8 <__aeabi_dsub>
 800d178:	460f      	mov	r7, r1
 800d17a:	4606      	mov	r6, r0
 800d17c:	f7f3 fd14 	bl	8000ba8 <__aeabi_d2iz>
 800d180:	9002      	str	r0, [sp, #8]
 800d182:	f7f3 f9f7 	bl	8000574 <__aeabi_i2d>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	4630      	mov	r0, r6
 800d18c:	4639      	mov	r1, r7
 800d18e:	f7f3 f8a3 	bl	80002d8 <__aeabi_dsub>
 800d192:	f1ba 0f00 	cmp.w	sl, #0
 800d196:	4606      	mov	r6, r0
 800d198:	460f      	mov	r7, r1
 800d19a:	dd6d      	ble.n	800d278 <__kernel_rem_pio2+0x250>
 800d19c:	1e61      	subs	r1, r4, #1
 800d19e:	ab0c      	add	r3, sp, #48	; 0x30
 800d1a0:	9d02      	ldr	r5, [sp, #8]
 800d1a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1a6:	f1ca 0018 	rsb	r0, sl, #24
 800d1aa:	fa43 f200 	asr.w	r2, r3, r0
 800d1ae:	4415      	add	r5, r2
 800d1b0:	4082      	lsls	r2, r0
 800d1b2:	1a9b      	subs	r3, r3, r2
 800d1b4:	aa0c      	add	r2, sp, #48	; 0x30
 800d1b6:	9502      	str	r5, [sp, #8]
 800d1b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d1bc:	f1ca 0217 	rsb	r2, sl, #23
 800d1c0:	fa43 fb02 	asr.w	fp, r3, r2
 800d1c4:	f1bb 0f00 	cmp.w	fp, #0
 800d1c8:	dd65      	ble.n	800d296 <__kernel_rem_pio2+0x26e>
 800d1ca:	9b02      	ldr	r3, [sp, #8]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	9302      	str	r3, [sp, #8]
 800d1d2:	4615      	mov	r5, r2
 800d1d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d1d8:	4294      	cmp	r4, r2
 800d1da:	f300 809f 	bgt.w	800d31c <__kernel_rem_pio2+0x2f4>
 800d1de:	f1ba 0f00 	cmp.w	sl, #0
 800d1e2:	dd07      	ble.n	800d1f4 <__kernel_rem_pio2+0x1cc>
 800d1e4:	f1ba 0f01 	cmp.w	sl, #1
 800d1e8:	f000 80c1 	beq.w	800d36e <__kernel_rem_pio2+0x346>
 800d1ec:	f1ba 0f02 	cmp.w	sl, #2
 800d1f0:	f000 80c7 	beq.w	800d382 <__kernel_rem_pio2+0x35a>
 800d1f4:	f1bb 0f02 	cmp.w	fp, #2
 800d1f8:	d14d      	bne.n	800d296 <__kernel_rem_pio2+0x26e>
 800d1fa:	4632      	mov	r2, r6
 800d1fc:	463b      	mov	r3, r7
 800d1fe:	4954      	ldr	r1, [pc, #336]	; (800d350 <__kernel_rem_pio2+0x328>)
 800d200:	2000      	movs	r0, #0
 800d202:	f7f3 f869 	bl	80002d8 <__aeabi_dsub>
 800d206:	4606      	mov	r6, r0
 800d208:	460f      	mov	r7, r1
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	d043      	beq.n	800d296 <__kernel_rem_pio2+0x26e>
 800d20e:	4650      	mov	r0, sl
 800d210:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d340 <__kernel_rem_pio2+0x318>
 800d214:	f7ff fe58 	bl	800cec8 <scalbn>
 800d218:	4630      	mov	r0, r6
 800d21a:	4639      	mov	r1, r7
 800d21c:	ec53 2b10 	vmov	r2, r3, d0
 800d220:	f7f3 f85a 	bl	80002d8 <__aeabi_dsub>
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	e035      	b.n	800d296 <__kernel_rem_pio2+0x26e>
 800d22a:	4b4a      	ldr	r3, [pc, #296]	; (800d354 <__kernel_rem_pio2+0x32c>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	4630      	mov	r0, r6
 800d230:	4639      	mov	r1, r7
 800d232:	f7f3 fa09 	bl	8000648 <__aeabi_dmul>
 800d236:	f7f3 fcb7 	bl	8000ba8 <__aeabi_d2iz>
 800d23a:	f7f3 f99b 	bl	8000574 <__aeabi_i2d>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	ec43 2b18 	vmov	d8, r2, r3
 800d246:	4b44      	ldr	r3, [pc, #272]	; (800d358 <__kernel_rem_pio2+0x330>)
 800d248:	2200      	movs	r2, #0
 800d24a:	f7f3 f9fd 	bl	8000648 <__aeabi_dmul>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 f83f 	bl	80002d8 <__aeabi_dsub>
 800d25a:	f7f3 fca5 	bl	8000ba8 <__aeabi_d2iz>
 800d25e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d262:	f84b 0b04 	str.w	r0, [fp], #4
 800d266:	ec51 0b18 	vmov	r0, r1, d8
 800d26a:	f7f3 f837 	bl	80002dc <__adddf3>
 800d26e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d272:	4606      	mov	r6, r0
 800d274:	460f      	mov	r7, r1
 800d276:	e75b      	b.n	800d130 <__kernel_rem_pio2+0x108>
 800d278:	d106      	bne.n	800d288 <__kernel_rem_pio2+0x260>
 800d27a:	1e63      	subs	r3, r4, #1
 800d27c:	aa0c      	add	r2, sp, #48	; 0x30
 800d27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d282:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d286:	e79d      	b.n	800d1c4 <__kernel_rem_pio2+0x19c>
 800d288:	4b34      	ldr	r3, [pc, #208]	; (800d35c <__kernel_rem_pio2+0x334>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	f7f3 fc62 	bl	8000b54 <__aeabi_dcmpge>
 800d290:	2800      	cmp	r0, #0
 800d292:	d140      	bne.n	800d316 <__kernel_rem_pio2+0x2ee>
 800d294:	4683      	mov	fp, r0
 800d296:	2200      	movs	r2, #0
 800d298:	2300      	movs	r3, #0
 800d29a:	4630      	mov	r0, r6
 800d29c:	4639      	mov	r1, r7
 800d29e:	f7f3 fc3b 	bl	8000b18 <__aeabi_dcmpeq>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f000 80c1 	beq.w	800d42a <__kernel_rem_pio2+0x402>
 800d2a8:	1e65      	subs	r5, r4, #1
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	9900      	ldr	r1, [sp, #0]
 800d2b0:	428b      	cmp	r3, r1
 800d2b2:	da6d      	bge.n	800d390 <__kernel_rem_pio2+0x368>
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	f000 808a 	beq.w	800d3ce <__kernel_rem_pio2+0x3a6>
 800d2ba:	ab0c      	add	r3, sp, #48	; 0x30
 800d2bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d2c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f000 80ae 	beq.w	800d426 <__kernel_rem_pio2+0x3fe>
 800d2ca:	4650      	mov	r0, sl
 800d2cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d340 <__kernel_rem_pio2+0x318>
 800d2d0:	f7ff fdfa 	bl	800cec8 <scalbn>
 800d2d4:	1c6b      	adds	r3, r5, #1
 800d2d6:	00da      	lsls	r2, r3, #3
 800d2d8:	9205      	str	r2, [sp, #20]
 800d2da:	ec57 6b10 	vmov	r6, r7, d0
 800d2de:	aa70      	add	r2, sp, #448	; 0x1c0
 800d2e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d354 <__kernel_rem_pio2+0x32c>
 800d2e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d2e8:	462c      	mov	r4, r5
 800d2ea:	f04f 0800 	mov.w	r8, #0
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	f280 80d4 	bge.w	800d49c <__kernel_rem_pio2+0x474>
 800d2f4:	462c      	mov	r4, r5
 800d2f6:	2c00      	cmp	r4, #0
 800d2f8:	f2c0 8102 	blt.w	800d500 <__kernel_rem_pio2+0x4d8>
 800d2fc:	4b18      	ldr	r3, [pc, #96]	; (800d360 <__kernel_rem_pio2+0x338>)
 800d2fe:	461e      	mov	r6, r3
 800d300:	ab70      	add	r3, sp, #448	; 0x1c0
 800d302:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d306:	1b2b      	subs	r3, r5, r4
 800d308:	f04f 0900 	mov.w	r9, #0
 800d30c:	f04f 0a00 	mov.w	sl, #0
 800d310:	2700      	movs	r7, #0
 800d312:	9306      	str	r3, [sp, #24]
 800d314:	e0e6      	b.n	800d4e4 <__kernel_rem_pio2+0x4bc>
 800d316:	f04f 0b02 	mov.w	fp, #2
 800d31a:	e756      	b.n	800d1ca <__kernel_rem_pio2+0x1a2>
 800d31c:	f8d8 3000 	ldr.w	r3, [r8]
 800d320:	bb05      	cbnz	r5, 800d364 <__kernel_rem_pio2+0x33c>
 800d322:	b123      	cbz	r3, 800d32e <__kernel_rem_pio2+0x306>
 800d324:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d328:	f8c8 3000 	str.w	r3, [r8]
 800d32c:	2301      	movs	r3, #1
 800d32e:	3201      	adds	r2, #1
 800d330:	f108 0804 	add.w	r8, r8, #4
 800d334:	461d      	mov	r5, r3
 800d336:	e74f      	b.n	800d1d8 <__kernel_rem_pio2+0x1b0>
	...
 800d344:	3ff00000 	.word	0x3ff00000
 800d348:	0800eea8 	.word	0x0800eea8
 800d34c:	40200000 	.word	0x40200000
 800d350:	3ff00000 	.word	0x3ff00000
 800d354:	3e700000 	.word	0x3e700000
 800d358:	41700000 	.word	0x41700000
 800d35c:	3fe00000 	.word	0x3fe00000
 800d360:	0800ee68 	.word	0x0800ee68
 800d364:	1acb      	subs	r3, r1, r3
 800d366:	f8c8 3000 	str.w	r3, [r8]
 800d36a:	462b      	mov	r3, r5
 800d36c:	e7df      	b.n	800d32e <__kernel_rem_pio2+0x306>
 800d36e:	1e62      	subs	r2, r4, #1
 800d370:	ab0c      	add	r3, sp, #48	; 0x30
 800d372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d376:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d37a:	a90c      	add	r1, sp, #48	; 0x30
 800d37c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d380:	e738      	b.n	800d1f4 <__kernel_rem_pio2+0x1cc>
 800d382:	1e62      	subs	r2, r4, #1
 800d384:	ab0c      	add	r3, sp, #48	; 0x30
 800d386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d38a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d38e:	e7f4      	b.n	800d37a <__kernel_rem_pio2+0x352>
 800d390:	a90c      	add	r1, sp, #48	; 0x30
 800d392:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d396:	3b01      	subs	r3, #1
 800d398:	430a      	orrs	r2, r1
 800d39a:	e788      	b.n	800d2ae <__kernel_rem_pio2+0x286>
 800d39c:	3301      	adds	r3, #1
 800d39e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d3a2:	2900      	cmp	r1, #0
 800d3a4:	d0fa      	beq.n	800d39c <__kernel_rem_pio2+0x374>
 800d3a6:	9a08      	ldr	r2, [sp, #32]
 800d3a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d3ac:	446a      	add	r2, sp
 800d3ae:	3a98      	subs	r2, #152	; 0x98
 800d3b0:	9208      	str	r2, [sp, #32]
 800d3b2:	9a06      	ldr	r2, [sp, #24]
 800d3b4:	a920      	add	r1, sp, #128	; 0x80
 800d3b6:	18a2      	adds	r2, r4, r2
 800d3b8:	18e3      	adds	r3, r4, r3
 800d3ba:	f104 0801 	add.w	r8, r4, #1
 800d3be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d3c2:	9302      	str	r3, [sp, #8]
 800d3c4:	9b02      	ldr	r3, [sp, #8]
 800d3c6:	4543      	cmp	r3, r8
 800d3c8:	da04      	bge.n	800d3d4 <__kernel_rem_pio2+0x3ac>
 800d3ca:	461c      	mov	r4, r3
 800d3cc:	e6a2      	b.n	800d114 <__kernel_rem_pio2+0xec>
 800d3ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e7e4      	b.n	800d39e <__kernel_rem_pio2+0x376>
 800d3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d3da:	f7f3 f8cb 	bl	8000574 <__aeabi_i2d>
 800d3de:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e4:	46ab      	mov	fp, r5
 800d3e6:	461c      	mov	r4, r3
 800d3e8:	f04f 0900 	mov.w	r9, #0
 800d3ec:	2600      	movs	r6, #0
 800d3ee:	2700      	movs	r7, #0
 800d3f0:	9b05      	ldr	r3, [sp, #20]
 800d3f2:	4599      	cmp	r9, r3
 800d3f4:	dd06      	ble.n	800d404 <__kernel_rem_pio2+0x3dc>
 800d3f6:	9b08      	ldr	r3, [sp, #32]
 800d3f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d3fc:	f108 0801 	add.w	r8, r8, #1
 800d400:	9308      	str	r3, [sp, #32]
 800d402:	e7df      	b.n	800d3c4 <__kernel_rem_pio2+0x39c>
 800d404:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d408:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d40c:	f7f3 f91c 	bl	8000648 <__aeabi_dmul>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4630      	mov	r0, r6
 800d416:	4639      	mov	r1, r7
 800d418:	f7f2 ff60 	bl	80002dc <__adddf3>
 800d41c:	f109 0901 	add.w	r9, r9, #1
 800d420:	4606      	mov	r6, r0
 800d422:	460f      	mov	r7, r1
 800d424:	e7e4      	b.n	800d3f0 <__kernel_rem_pio2+0x3c8>
 800d426:	3d01      	subs	r5, #1
 800d428:	e747      	b.n	800d2ba <__kernel_rem_pio2+0x292>
 800d42a:	ec47 6b10 	vmov	d0, r6, r7
 800d42e:	f1ca 0000 	rsb	r0, sl, #0
 800d432:	f7ff fd49 	bl	800cec8 <scalbn>
 800d436:	ec57 6b10 	vmov	r6, r7, d0
 800d43a:	4ba0      	ldr	r3, [pc, #640]	; (800d6bc <__kernel_rem_pio2+0x694>)
 800d43c:	ee10 0a10 	vmov	r0, s0
 800d440:	2200      	movs	r2, #0
 800d442:	4639      	mov	r1, r7
 800d444:	f7f3 fb86 	bl	8000b54 <__aeabi_dcmpge>
 800d448:	b1f8      	cbz	r0, 800d48a <__kernel_rem_pio2+0x462>
 800d44a:	4b9d      	ldr	r3, [pc, #628]	; (800d6c0 <__kernel_rem_pio2+0x698>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	4630      	mov	r0, r6
 800d450:	4639      	mov	r1, r7
 800d452:	f7f3 f8f9 	bl	8000648 <__aeabi_dmul>
 800d456:	f7f3 fba7 	bl	8000ba8 <__aeabi_d2iz>
 800d45a:	4680      	mov	r8, r0
 800d45c:	f7f3 f88a 	bl	8000574 <__aeabi_i2d>
 800d460:	4b96      	ldr	r3, [pc, #600]	; (800d6bc <__kernel_rem_pio2+0x694>)
 800d462:	2200      	movs	r2, #0
 800d464:	f7f3 f8f0 	bl	8000648 <__aeabi_dmul>
 800d468:	460b      	mov	r3, r1
 800d46a:	4602      	mov	r2, r0
 800d46c:	4639      	mov	r1, r7
 800d46e:	4630      	mov	r0, r6
 800d470:	f7f2 ff32 	bl	80002d8 <__aeabi_dsub>
 800d474:	f7f3 fb98 	bl	8000ba8 <__aeabi_d2iz>
 800d478:	1c65      	adds	r5, r4, #1
 800d47a:	ab0c      	add	r3, sp, #48	; 0x30
 800d47c:	f10a 0a18 	add.w	sl, sl, #24
 800d480:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d484:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d488:	e71f      	b.n	800d2ca <__kernel_rem_pio2+0x2a2>
 800d48a:	4630      	mov	r0, r6
 800d48c:	4639      	mov	r1, r7
 800d48e:	f7f3 fb8b 	bl	8000ba8 <__aeabi_d2iz>
 800d492:	ab0c      	add	r3, sp, #48	; 0x30
 800d494:	4625      	mov	r5, r4
 800d496:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d49a:	e716      	b.n	800d2ca <__kernel_rem_pio2+0x2a2>
 800d49c:	ab0c      	add	r3, sp, #48	; 0x30
 800d49e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d4a2:	f7f3 f867 	bl	8000574 <__aeabi_i2d>
 800d4a6:	4632      	mov	r2, r6
 800d4a8:	463b      	mov	r3, r7
 800d4aa:	f7f3 f8cd 	bl	8000648 <__aeabi_dmul>
 800d4ae:	4642      	mov	r2, r8
 800d4b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d4b4:	464b      	mov	r3, r9
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	f7f3 f8c5 	bl	8000648 <__aeabi_dmul>
 800d4be:	3c01      	subs	r4, #1
 800d4c0:	4606      	mov	r6, r0
 800d4c2:	460f      	mov	r7, r1
 800d4c4:	e713      	b.n	800d2ee <__kernel_rem_pio2+0x2c6>
 800d4c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d4ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d4ce:	f7f3 f8bb 	bl	8000648 <__aeabi_dmul>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	4648      	mov	r0, r9
 800d4d8:	4651      	mov	r1, sl
 800d4da:	f7f2 feff 	bl	80002dc <__adddf3>
 800d4de:	3701      	adds	r7, #1
 800d4e0:	4681      	mov	r9, r0
 800d4e2:	468a      	mov	sl, r1
 800d4e4:	9b00      	ldr	r3, [sp, #0]
 800d4e6:	429f      	cmp	r7, r3
 800d4e8:	dc02      	bgt.n	800d4f0 <__kernel_rem_pio2+0x4c8>
 800d4ea:	9b06      	ldr	r3, [sp, #24]
 800d4ec:	429f      	cmp	r7, r3
 800d4ee:	ddea      	ble.n	800d4c6 <__kernel_rem_pio2+0x49e>
 800d4f0:	9a06      	ldr	r2, [sp, #24]
 800d4f2:	ab48      	add	r3, sp, #288	; 0x120
 800d4f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d4f8:	e9c6 9a00 	strd	r9, sl, [r6]
 800d4fc:	3c01      	subs	r4, #1
 800d4fe:	e6fa      	b.n	800d2f6 <__kernel_rem_pio2+0x2ce>
 800d500:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d502:	2b02      	cmp	r3, #2
 800d504:	dc0b      	bgt.n	800d51e <__kernel_rem_pio2+0x4f6>
 800d506:	2b00      	cmp	r3, #0
 800d508:	dc39      	bgt.n	800d57e <__kernel_rem_pio2+0x556>
 800d50a:	d05d      	beq.n	800d5c8 <__kernel_rem_pio2+0x5a0>
 800d50c:	9b02      	ldr	r3, [sp, #8]
 800d50e:	f003 0007 	and.w	r0, r3, #7
 800d512:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d516:	ecbd 8b02 	vpop	{d8}
 800d51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d520:	2b03      	cmp	r3, #3
 800d522:	d1f3      	bne.n	800d50c <__kernel_rem_pio2+0x4e4>
 800d524:	9b05      	ldr	r3, [sp, #20]
 800d526:	9500      	str	r5, [sp, #0]
 800d528:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d52c:	eb0d 0403 	add.w	r4, sp, r3
 800d530:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d534:	46a2      	mov	sl, r4
 800d536:	9b00      	ldr	r3, [sp, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f1aa 0a08 	sub.w	sl, sl, #8
 800d53e:	dc69      	bgt.n	800d614 <__kernel_rem_pio2+0x5ec>
 800d540:	46aa      	mov	sl, r5
 800d542:	f1ba 0f01 	cmp.w	sl, #1
 800d546:	f1a4 0408 	sub.w	r4, r4, #8
 800d54a:	f300 8083 	bgt.w	800d654 <__kernel_rem_pio2+0x62c>
 800d54e:	9c05      	ldr	r4, [sp, #20]
 800d550:	ab48      	add	r3, sp, #288	; 0x120
 800d552:	441c      	add	r4, r3
 800d554:	2000      	movs	r0, #0
 800d556:	2100      	movs	r1, #0
 800d558:	2d01      	cmp	r5, #1
 800d55a:	f300 809a 	bgt.w	800d692 <__kernel_rem_pio2+0x66a>
 800d55e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d562:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d566:	f1bb 0f00 	cmp.w	fp, #0
 800d56a:	f040 8098 	bne.w	800d69e <__kernel_rem_pio2+0x676>
 800d56e:	9b04      	ldr	r3, [sp, #16]
 800d570:	e9c3 7800 	strd	r7, r8, [r3]
 800d574:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d578:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d57c:	e7c6      	b.n	800d50c <__kernel_rem_pio2+0x4e4>
 800d57e:	9e05      	ldr	r6, [sp, #20]
 800d580:	ab48      	add	r3, sp, #288	; 0x120
 800d582:	441e      	add	r6, r3
 800d584:	462c      	mov	r4, r5
 800d586:	2000      	movs	r0, #0
 800d588:	2100      	movs	r1, #0
 800d58a:	2c00      	cmp	r4, #0
 800d58c:	da33      	bge.n	800d5f6 <__kernel_rem_pio2+0x5ce>
 800d58e:	f1bb 0f00 	cmp.w	fp, #0
 800d592:	d036      	beq.n	800d602 <__kernel_rem_pio2+0x5da>
 800d594:	4602      	mov	r2, r0
 800d596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d59a:	9c04      	ldr	r4, [sp, #16]
 800d59c:	e9c4 2300 	strd	r2, r3, [r4]
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d5a8:	f7f2 fe96 	bl	80002d8 <__aeabi_dsub>
 800d5ac:	ae4a      	add	r6, sp, #296	; 0x128
 800d5ae:	2401      	movs	r4, #1
 800d5b0:	42a5      	cmp	r5, r4
 800d5b2:	da29      	bge.n	800d608 <__kernel_rem_pio2+0x5e0>
 800d5b4:	f1bb 0f00 	cmp.w	fp, #0
 800d5b8:	d002      	beq.n	800d5c0 <__kernel_rem_pio2+0x598>
 800d5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5be:	4619      	mov	r1, r3
 800d5c0:	9b04      	ldr	r3, [sp, #16]
 800d5c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d5c6:	e7a1      	b.n	800d50c <__kernel_rem_pio2+0x4e4>
 800d5c8:	9c05      	ldr	r4, [sp, #20]
 800d5ca:	ab48      	add	r3, sp, #288	; 0x120
 800d5cc:	441c      	add	r4, r3
 800d5ce:	2000      	movs	r0, #0
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	2d00      	cmp	r5, #0
 800d5d4:	da09      	bge.n	800d5ea <__kernel_rem_pio2+0x5c2>
 800d5d6:	f1bb 0f00 	cmp.w	fp, #0
 800d5da:	d002      	beq.n	800d5e2 <__kernel_rem_pio2+0x5ba>
 800d5dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	9b04      	ldr	r3, [sp, #16]
 800d5e4:	e9c3 0100 	strd	r0, r1, [r3]
 800d5e8:	e790      	b.n	800d50c <__kernel_rem_pio2+0x4e4>
 800d5ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d5ee:	f7f2 fe75 	bl	80002dc <__adddf3>
 800d5f2:	3d01      	subs	r5, #1
 800d5f4:	e7ed      	b.n	800d5d2 <__kernel_rem_pio2+0x5aa>
 800d5f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d5fa:	f7f2 fe6f 	bl	80002dc <__adddf3>
 800d5fe:	3c01      	subs	r4, #1
 800d600:	e7c3      	b.n	800d58a <__kernel_rem_pio2+0x562>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	e7c8      	b.n	800d59a <__kernel_rem_pio2+0x572>
 800d608:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d60c:	f7f2 fe66 	bl	80002dc <__adddf3>
 800d610:	3401      	adds	r4, #1
 800d612:	e7cd      	b.n	800d5b0 <__kernel_rem_pio2+0x588>
 800d614:	e9da 8900 	ldrd	r8, r9, [sl]
 800d618:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d61c:	9b00      	ldr	r3, [sp, #0]
 800d61e:	3b01      	subs	r3, #1
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	4632      	mov	r2, r6
 800d624:	463b      	mov	r3, r7
 800d626:	4640      	mov	r0, r8
 800d628:	4649      	mov	r1, r9
 800d62a:	f7f2 fe57 	bl	80002dc <__adddf3>
 800d62e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	4640      	mov	r0, r8
 800d638:	4649      	mov	r1, r9
 800d63a:	f7f2 fe4d 	bl	80002d8 <__aeabi_dsub>
 800d63e:	4632      	mov	r2, r6
 800d640:	463b      	mov	r3, r7
 800d642:	f7f2 fe4b 	bl	80002dc <__adddf3>
 800d646:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d64a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d64e:	ed8a 7b00 	vstr	d7, [sl]
 800d652:	e770      	b.n	800d536 <__kernel_rem_pio2+0x50e>
 800d654:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d658:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d65c:	4640      	mov	r0, r8
 800d65e:	4632      	mov	r2, r6
 800d660:	463b      	mov	r3, r7
 800d662:	4649      	mov	r1, r9
 800d664:	f7f2 fe3a 	bl	80002dc <__adddf3>
 800d668:	e9cd 0100 	strd	r0, r1, [sp]
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	4640      	mov	r0, r8
 800d672:	4649      	mov	r1, r9
 800d674:	f7f2 fe30 	bl	80002d8 <__aeabi_dsub>
 800d678:	4632      	mov	r2, r6
 800d67a:	463b      	mov	r3, r7
 800d67c:	f7f2 fe2e 	bl	80002dc <__adddf3>
 800d680:	ed9d 7b00 	vldr	d7, [sp]
 800d684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d688:	ed84 7b00 	vstr	d7, [r4]
 800d68c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d690:	e757      	b.n	800d542 <__kernel_rem_pio2+0x51a>
 800d692:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d696:	f7f2 fe21 	bl	80002dc <__adddf3>
 800d69a:	3d01      	subs	r5, #1
 800d69c:	e75c      	b.n	800d558 <__kernel_rem_pio2+0x530>
 800d69e:	9b04      	ldr	r3, [sp, #16]
 800d6a0:	9a04      	ldr	r2, [sp, #16]
 800d6a2:	601f      	str	r7, [r3, #0]
 800d6a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d6a8:	605c      	str	r4, [r3, #4]
 800d6aa:	609d      	str	r5, [r3, #8]
 800d6ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d6b0:	60d3      	str	r3, [r2, #12]
 800d6b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6b6:	6110      	str	r0, [r2, #16]
 800d6b8:	6153      	str	r3, [r2, #20]
 800d6ba:	e727      	b.n	800d50c <__kernel_rem_pio2+0x4e4>
 800d6bc:	41700000 	.word	0x41700000
 800d6c0:	3e700000 	.word	0x3e700000
 800d6c4:	00000000 	.word	0x00000000

0800d6c8 <floor>:
 800d6c8:	ec51 0b10 	vmov	r0, r1, d0
 800d6cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d6d8:	2e13      	cmp	r6, #19
 800d6da:	ee10 5a10 	vmov	r5, s0
 800d6de:	ee10 8a10 	vmov	r8, s0
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	dc31      	bgt.n	800d74a <floor+0x82>
 800d6e6:	2e00      	cmp	r6, #0
 800d6e8:	da14      	bge.n	800d714 <floor+0x4c>
 800d6ea:	a333      	add	r3, pc, #204	; (adr r3, 800d7b8 <floor+0xf0>)
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f7f2 fdf4 	bl	80002dc <__adddf3>
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	f7f3 fa36 	bl	8000b68 <__aeabi_dcmpgt>
 800d6fc:	b138      	cbz	r0, 800d70e <floor+0x46>
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	da53      	bge.n	800d7aa <floor+0xe2>
 800d702:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d706:	4325      	orrs	r5, r4
 800d708:	d052      	beq.n	800d7b0 <floor+0xe8>
 800d70a:	4c2d      	ldr	r4, [pc, #180]	; (800d7c0 <floor+0xf8>)
 800d70c:	2500      	movs	r5, #0
 800d70e:	4621      	mov	r1, r4
 800d710:	4628      	mov	r0, r5
 800d712:	e024      	b.n	800d75e <floor+0x96>
 800d714:	4f2b      	ldr	r7, [pc, #172]	; (800d7c4 <floor+0xfc>)
 800d716:	4137      	asrs	r7, r6
 800d718:	ea01 0307 	and.w	r3, r1, r7
 800d71c:	4303      	orrs	r3, r0
 800d71e:	d01e      	beq.n	800d75e <floor+0x96>
 800d720:	a325      	add	r3, pc, #148	; (adr r3, 800d7b8 <floor+0xf0>)
 800d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d726:	f7f2 fdd9 	bl	80002dc <__adddf3>
 800d72a:	2200      	movs	r2, #0
 800d72c:	2300      	movs	r3, #0
 800d72e:	f7f3 fa1b 	bl	8000b68 <__aeabi_dcmpgt>
 800d732:	2800      	cmp	r0, #0
 800d734:	d0eb      	beq.n	800d70e <floor+0x46>
 800d736:	2c00      	cmp	r4, #0
 800d738:	bfbe      	ittt	lt
 800d73a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d73e:	4133      	asrlt	r3, r6
 800d740:	18e4      	addlt	r4, r4, r3
 800d742:	ea24 0407 	bic.w	r4, r4, r7
 800d746:	2500      	movs	r5, #0
 800d748:	e7e1      	b.n	800d70e <floor+0x46>
 800d74a:	2e33      	cmp	r6, #51	; 0x33
 800d74c:	dd0b      	ble.n	800d766 <floor+0x9e>
 800d74e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d752:	d104      	bne.n	800d75e <floor+0x96>
 800d754:	ee10 2a10 	vmov	r2, s0
 800d758:	460b      	mov	r3, r1
 800d75a:	f7f2 fdbf 	bl	80002dc <__adddf3>
 800d75e:	ec41 0b10 	vmov	d0, r0, r1
 800d762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d766:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d76a:	f04f 37ff 	mov.w	r7, #4294967295
 800d76e:	40df      	lsrs	r7, r3
 800d770:	4238      	tst	r0, r7
 800d772:	d0f4      	beq.n	800d75e <floor+0x96>
 800d774:	a310      	add	r3, pc, #64	; (adr r3, 800d7b8 <floor+0xf0>)
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f7f2 fdaf 	bl	80002dc <__adddf3>
 800d77e:	2200      	movs	r2, #0
 800d780:	2300      	movs	r3, #0
 800d782:	f7f3 f9f1 	bl	8000b68 <__aeabi_dcmpgt>
 800d786:	2800      	cmp	r0, #0
 800d788:	d0c1      	beq.n	800d70e <floor+0x46>
 800d78a:	2c00      	cmp	r4, #0
 800d78c:	da0a      	bge.n	800d7a4 <floor+0xdc>
 800d78e:	2e14      	cmp	r6, #20
 800d790:	d101      	bne.n	800d796 <floor+0xce>
 800d792:	3401      	adds	r4, #1
 800d794:	e006      	b.n	800d7a4 <floor+0xdc>
 800d796:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d79a:	2301      	movs	r3, #1
 800d79c:	40b3      	lsls	r3, r6
 800d79e:	441d      	add	r5, r3
 800d7a0:	45a8      	cmp	r8, r5
 800d7a2:	d8f6      	bhi.n	800d792 <floor+0xca>
 800d7a4:	ea25 0507 	bic.w	r5, r5, r7
 800d7a8:	e7b1      	b.n	800d70e <floor+0x46>
 800d7aa:	2500      	movs	r5, #0
 800d7ac:	462c      	mov	r4, r5
 800d7ae:	e7ae      	b.n	800d70e <floor+0x46>
 800d7b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d7b4:	e7ab      	b.n	800d70e <floor+0x46>
 800d7b6:	bf00      	nop
 800d7b8:	8800759c 	.word	0x8800759c
 800d7bc:	7e37e43c 	.word	0x7e37e43c
 800d7c0:	bff00000 	.word	0xbff00000
 800d7c4:	000fffff 	.word	0x000fffff

0800d7c8 <_init>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	bf00      	nop
 800d7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ce:	bc08      	pop	{r3}
 800d7d0:	469e      	mov	lr, r3
 800d7d2:	4770      	bx	lr

0800d7d4 <_fini>:
 800d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d6:	bf00      	nop
 800d7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7da:	bc08      	pop	{r3}
 800d7dc:	469e      	mov	lr, r3
 800d7de:	4770      	bx	lr
