
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001480  0800c0b0  0800c0b0  0001c0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d530  0800d530  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d538  0800d538  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d538  0800d538  0001d538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d53c  0800d53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  200001f0  0800d730  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  0800d730  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f43  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347d  00000000  00000000  000391a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  0003c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001000  00000000  00000000  0003dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002197d  00000000  00000000  0003eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199b4  00000000  00000000  00060465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce2e3  00000000  00000000  00079e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000712c  00000000  00000000  001480fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c094 	.word	0x0800c094

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c094 	.word	0x0800c094

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <delay_us>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

__STATIC_INLINE void delay_us(uint32_t us)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <delay_us+0x3c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <delay_us+0x40>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <delay_us+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8001062:	bf00      	nop
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <delay_us+0x44>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8fa      	bhi.n	8001064 <delay_us+0x24>
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000008 	.word	0x20000008
 8001080:	431bde83 	.word	0x431bde83
 8001084:	e0001000 	.word	0xe0001000

08001088 <_enable_slave>:

static bool _debug = 0;

/*============================ Private ============================*/

static inline void _enable_slave(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f002 f949 	bl	800332c <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <_disable_slave>:

static inline void _disable_slave(){
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f002 f93e 	bl	800332c <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_read_register>:

static uint8_t _read_register(uint8_t ADNS_REG_addr){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  _enable_slave();
 80010be:	f7ff ffe3 	bl	8001088 <_enable_slave>

  ADNS_REG_addr &= 0x7f;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);// send adress of the register, with MSBit = 0 to indicate it's a read
 80010cc:	1df9      	adds	r1, r7, #7
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <_read_register+0x58>)
 80010d4:	f003 fc47 	bl	8004966 <HAL_SPI_Transmit>

  delay_us(100); // tSRAD
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f7ff ffb1 	bl	8001040 <delay_us>

  uint8_t data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&hspi1, &data, 1, 100);// read data
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <_read_register+0x58>)
 80010ec:	f003 fda9 	bl	8004c42 <HAL_SPI_Receive>

  delay_us(1); // tSCLK-_ncs for read operation is 120ns
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ffa5 	bl	8001040 <delay_us>
  _disable_slave();
 80010f6:	f7ff ffd2 	bl	800109e <_disable_slave>
  delay_us(19); //  tSRW/tSRR (=20us) minus tSCLK-_ncs
 80010fa:	2013      	movs	r0, #19
 80010fc:	f7ff ffa0 	bl	8001040 <delay_us>

  return data;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200003e4 	.word	0x200003e4

08001110 <_write_register>:

static void _write_register(uint8_t ADNS_REG_addr, uint8_t data){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	_enable_slave();
 8001120:	f7ff ffb2 	bl	8001088 <_enable_slave>

	ADNS_REG_addr |= 0x80;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112a:	b2db      	uxtb	r3, r3
 800112c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);//send adress of the register, with MSBit = 1 to indicate it's a write
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	2364      	movs	r3, #100	; 0x64
 8001132:	2201      	movs	r2, #1
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <_write_register+0x50>)
 8001136:	f003 fc16 	bl	8004966 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &data, 1, 100);//send data
 800113a:	1db9      	adds	r1, r7, #6
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <_write_register+0x50>)
 8001142:	f003 fc10 	bl	8004966 <HAL_SPI_Transmit>

    delay_us(20); // tSCLK-_ncs for write operation
 8001146:	2014      	movs	r0, #20
 8001148:	f7ff ff7a 	bl	8001040 <delay_us>
    _disable_slave();
 800114c:	f7ff ffa7 	bl	800109e <_disable_slave>
    delay_us(100); // tSWW/tSWR (=120us) minus tSCLK-_ncs. Could be shortened, but is looks like a safe lower bound
 8001150:	2064      	movs	r0, #100	; 0x64
 8001152:	f7ff ff75 	bl	8001040 <delay_us>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200003e4 	.word	0x200003e4

08001164 <_upload_firmware>:

static void _upload_firmware(){// send the firmware to the chip, cf p.18 of the datasheet
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  if (_debug) printf("Uploading optical sensors's firmware... \n");
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <_upload_firmware+0x8c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <_upload_firmware+0x14>
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <_upload_firmware+0x90>)
 8001174:	f006 f8e0 	bl	8007338 <puts>

  _write_register(ADNS_REG_Configuration_IV, 0x02); // set the configuration_IV register in 3k firmware mode   bit 1 = 1 for 3k mode, other bits are reserved
 8001178:	2102      	movs	r1, #2
 800117a:	2039      	movs	r0, #57	; 0x39
 800117c:	f7ff ffc8 	bl	8001110 <_write_register>

  _write_register(ADNS_REG_SROM_Enable, 0x1d);// write 0x1d in SROM_enable reg for initializing
 8001180:	211d      	movs	r1, #29
 8001182:	2013      	movs	r0, #19
 8001184:	f7ff ffc4 	bl	8001110 <_write_register>

  HAL_Delay(10);// wait for more than one frame period assuming that the frame rate is as low as 100fps... even if it should never be that low
 8001188:	200a      	movs	r0, #10
 800118a:	f001 fc73 	bl	8002a74 <HAL_Delay>

  _write_register(ADNS_REG_SROM_Enable, 0x18); // write 0x18 to SROM_enable to start SROM download
 800118e:	2118      	movs	r1, #24
 8001190:	2013      	movs	r0, #19
 8001192:	f7ff ffbd 	bl	8001110 <_write_register>

  // write the SROM file (=firmware data)
  _enable_slave();
 8001196:	f7ff ff77 	bl	8001088 <_enable_slave>

  uint8_t buffer = ADNS_REG_SROM_Load_Burst | 0x80;
 800119a:	23e2      	movs	r3, #226	; 0xe2
 800119c:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 800119e:	1cf9      	adds	r1, r7, #3
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2201      	movs	r2, #1
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <_upload_firmware+0x94>)
 80011a6:	f003 fbde 	bl	8004966 <HAL_SPI_Transmit>

  delay_us(15);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f7ff ff48 	bl	8001040 <delay_us>

  // send all uint8_ts of the firmware (on ne peut pas utiliser la fonction transmit directement, car il faut respecter le délais de 15us)
  uint8_t c;
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	e010      	b.n	80011d8 <_upload_firmware+0x74>
    c = _adns_firmware_data[i];
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <_upload_firmware+0x98>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	70bb      	strb	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, &c, 1, 100);
 80011c0:	1cb9      	adds	r1, r7, #2
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	2201      	movs	r2, #1
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <_upload_firmware+0x94>)
 80011c8:	f003 fbcd 	bl	8004966 <HAL_SPI_Transmit>
    delay_us(15);
 80011cc:	200f      	movs	r0, #15
 80011ce:	f7ff ff37 	bl	8001040 <delay_us>
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f640 32fd 	movw	r2, #3069	; 0xbfd
 80011de:	4293      	cmp	r3, r2
 80011e0:	dde9      	ble.n	80011b6 <_upload_firmware+0x52>
  }

  _disable_slave();
 80011e2:	f7ff ff5c 	bl	800109e <_disable_slave>
  }
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000020c 	.word	0x2000020c
 80011f4:	0800c0b0 	.word	0x0800c0b0
 80011f8:	200003e4 	.word	0x200003e4
 80011fc:	0800c424 	.word	0x0800c424

08001200 <_display_registers>:

static void _display_registers(void){ // display basic information of the module (primarely to check communication)
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08f      	sub	sp, #60	; 0x3c
 8001204:	af00      	add	r7, sp, #0
	int oreg[7] = {0x00,0x3F,0x2A,0x02};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	232a      	movs	r3, #42	; 0x2a
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	char* oregname[] = {"Product_ID","Inverse_Product_ID","SROM_Version","Motion"};
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <_display_registers+0xc0>)
 8001228:	f107 0408 	add.w	r4, r7, #8
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t regres;

	_enable_slave();
 8001232:	f7ff ff29 	bl	8001088 <_enable_slave>

	printf("ADNS9800 Registers : \n");
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <_display_registers+0xc4>)
 8001238:	f006 f87e 	bl	8007338 <puts>
	for(int i=0; i<4; i++){
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
 8001240:	e034      	b.n	80012ac <_display_registers+0xac>
		uint8_t buffer = oreg[i];
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	443b      	add	r3, r7
 800124a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	71bb      	strb	r3, [r7, #6]
		HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 8001252:	1db9      	adds	r1, r7, #6
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2201      	movs	r2, #1
 8001258:	481b      	ldr	r0, [pc, #108]	; (80012c8 <_display_registers+0xc8>)
 800125a:	f003 fb84 	bl	8004966 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f001 fc08 	bl	8002a74 <HAL_Delay>

		printf(oregname[i]);
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3338      	adds	r3, #56	; 0x38
 800126a:	443b      	add	r3, r7
 800126c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001270:	4618      	mov	r0, r3
 8001272:	f005 fff3 	bl	800725c <iprintf>
		printf(" (at adress 0x%02X) :", oreg[i]);
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	3338      	adds	r3, #56	; 0x38
 800127c:	443b      	add	r3, r7
 800127e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001282:	4619      	mov	r1, r3
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <_display_registers+0xcc>)
 8001286:	f005 ffe9 	bl	800725c <iprintf>

		HAL_SPI_Receive(&hspi1, &regres, 1, 100);
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2201      	movs	r2, #1
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <_display_registers+0xc8>)
 8001292:	f003 fcd6 	bl	8004c42 <HAL_SPI_Receive>
		printf(" 0x%02X \n",regres);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <_display_registers+0xd0>)
 800129c:	f005 ffde 	bl	800725c <iprintf>

		HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f001 fbe7 	bl	8002a74 <HAL_Delay>
	for(int i=0; i<4; i++){
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	3301      	adds	r3, #1
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	ddc7      	ble.n	8001242 <_display_registers+0x42>
	}
	_disable_slave();
 80012b2:	f7ff fef4 	bl	800109e <_disable_slave>
}
 80012b6:	bf00      	nop
 80012b8:	373c      	adds	r7, #60	; 0x3c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800c150 	.word	0x0800c150
 80012c4:	0800c0dc 	.word	0x0800c0dc
 80012c8:	200003e4 	.word	0x200003e4
 80012cc:	0800c0f4 	.word	0x0800c0f4
 80012d0:	0800c10c 	.word	0x0800c10c

080012d4 <adnsInit>:
	raw_data[1] = (_read_register(ADNS_REG_delta_y_L) | (_read_register(ADNS_REG_delta_y_H) << 8));
	_disable_slave();
}
/*============================ Public ============================*/

void adnsInit(){ // see datasheet page 20
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	//SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
	_disable_slave(); // ensure that the serial port is reset
 80012da:	f7ff fee0 	bl	800109e <_disable_slave>
	_enable_slave(); // ensure that the serial port is reset
 80012de:	f7ff fed3 	bl	8001088 <_enable_slave>
	_disable_slave(); // ensure that the serial port is reset
 80012e2:	f7ff fedc 	bl	800109e <_disable_slave>
	_write_register(ADNS_REG_Power_Up_Reset, 0x5a); // force reset
 80012e6:	215a      	movs	r1, #90	; 0x5a
 80012e8:	203a      	movs	r0, #58	; 0x3a
 80012ea:	f7ff ff11 	bl	8001110 <_write_register>
	HAL_Delay(50); // wait for it to reboot
 80012ee:	2032      	movs	r0, #50	; 0x32
 80012f0:	f001 fbc0 	bl	8002a74 <HAL_Delay>
	// read registers 0x02 to 0x06 (and discard the data)
	_read_register(ADNS_REG_Motion);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff fedd 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_L);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f7ff feda 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_H);
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff fed7 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_L);
 8001306:	2005      	movs	r0, #5
 8001308:	f7ff fed4 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_H);
 800130c:	2006      	movs	r0, #6
 800130e:	f7ff fed1 	bl	80010b4 <_read_register>
	// upload the firmware
	_upload_firmware();
 8001312:	f7ff ff27 	bl	8001164 <_upload_firmware>
	HAL_Delay(10);
 8001316:	200a      	movs	r0, #10
 8001318:	f001 fbac 	bl	8002a74 <HAL_Delay>
	// enable laser(bit 0 = 0b), in normal mode (bits 3,2,1 = 000b)
	// reading the actual value of the register is important because the real
	// default value is different from what is said in the datasheet, and if you
	// change the reserved bytess (like by writing 0x00...) it would not work.
	uint8_t laser_ctrl0 = _read_register(ADNS_REG_LASER_CTRL0);
 800131c:	2020      	movs	r0, #32
 800131e:	f7ff fec9 	bl	80010b4 <_read_register>
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	_write_register(ADNS_REG_LASER_CTRL0, laser_ctrl0 & 0xf0 );
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f023 030f 	bic.w	r3, r3, #15
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	2020      	movs	r0, #32
 8001332:	f7ff feed 	bl	8001110 <_write_register>

	HAL_Delay(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f001 fb9c 	bl	8002a74 <HAL_Delay>

	if (_debug) printf("Optical chip started up \n");
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <adnsInit+0xc0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <adnsInit+0x76>
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <adnsInit+0xc4>)
 8001346:	f005 fff7 	bl	8007338 <puts>

	if (_debug) _display_registers();
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <adnsInit+0xc0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <adnsInit+0x82>
 8001352:	f7ff ff55 	bl	8001200 <_display_registers>
	if (_debug) printf("coef is set to %.4f dots per millimeter \n", _units_per_millimeter);
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <adnsInit+0xc0>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <adnsInit+0x9e>
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <adnsInit+0xc8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f918 	bl	8000598 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <adnsInit+0xcc>)
 800136e:	f005 ff75 	bl	800725c <iprintf>
	HAL_Delay(100);
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f001 fb7e 	bl	8002a74 <HAL_Delay>

	_disable_slave();
 8001378:	f7ff fe91 	bl	800109e <_disable_slave>

	if(_debug) printf("ADNS9800 initialization done \n");
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <adnsInit+0xc0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <adnsInit+0xb6>
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <adnsInit+0xd0>)
 8001386:	f005 ffd7 	bl	8007338 <puts>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000020c 	.word	0x2000020c
 8001398:	0800c160 	.word	0x0800c160
 800139c:	20000000 	.word	0x20000000
 80013a0:	0800c17c 	.word	0x0800c17c
 80013a4:	0800c1a8 	.word	0x0800c1a8

080013a8 <print_header>:
int16_t angular_velocity_Q1 = 10;
int16_t gravity_Q1 = 8;

/*============================ Debug ============================*/

void print_header(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
		//Print the four byte header
		printf("Header:");
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <print_header+0x50>)
 80013b0:	f005 ff54 	bl	800725c <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	e014      	b.n	80013e4 <print_header+0x3c>
		{
			printf(" ");
 80013ba:	2020      	movs	r0, #32
 80013bc:	f005 ff60 	bl	8007280 <putchar>
			if (shtpHeader[x] < 0x10)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <print_header+0x54>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d802      	bhi.n	80013d0 <print_header+0x28>
				printf("0");
 80013ca:	2030      	movs	r0, #48	; 0x30
 80013cc:	f005 ff58 	bl	8007280 <putchar>
			printf("%01X",shtpHeader[x]);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <print_header+0x54>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <print_header+0x58>)
 80013da:	f005 ff3f 	bl	800725c <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3301      	adds	r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d9e7      	bls.n	80013ba <print_header+0x12>
		}
		printf("\n");
 80013ea:	200a      	movs	r0, #10
 80013ec:	f005 ff48 	bl	8007280 <putchar>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800c1f8 	.word	0x0800c1f8
 80013fc:	20000210 	.word	0x20000210
 8001400:	0800c200 	.word	0x0800c200

08001404 <print_packet>:
void print_packet(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <print_packet+0x114>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <print_packet+0x114>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	80fb      	strh	r3, [r7, #6]

	//Print the four byte header
	print_header();
 800141e:	f7ff ffc3 	bl	80013a8 <print_header>

	uint16_t printLength = packetLength - 4;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	3b04      	subs	r3, #4
 8001426:	80bb      	strh	r3, [r7, #4]
	if (printLength > 40){printLength = 40; printf("(Shortened) ");} //Artificial limit. We don't want the phone book.
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	2b28      	cmp	r3, #40	; 0x28
 800142c:	d904      	bls.n	8001438 <print_packet+0x34>
 800142e:	2328      	movs	r3, #40	; 0x28
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	483a      	ldr	r0, [pc, #232]	; (800151c <print_packet+0x118>)
 8001434:	f005 ff12 	bl	800725c <iprintf>

	printf("Body:");
 8001438:	4839      	ldr	r0, [pc, #228]	; (8001520 <print_packet+0x11c>)
 800143a:	f005 ff0f 	bl	800725c <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 800143e:	2300      	movs	r3, #0
 8001440:	70fb      	strb	r3, [r7, #3]
 8001442:	e014      	b.n	800146e <print_packet+0x6a>
	{
		printf(" ");
 8001444:	2020      	movs	r0, #32
 8001446:	f005 ff1b 	bl	8007280 <putchar>
		if (shtpData[x] < 0x10)
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <print_packet+0x120>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d802      	bhi.n	800145a <print_packet+0x56>
			printf("0");
 8001454:	2030      	movs	r0, #48	; 0x30
 8001456:	f005 ff13 	bl	8007280 <putchar>
		printf("%01X",shtpData[x]);
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	4a31      	ldr	r2, [pc, #196]	; (8001524 <print_packet+0x120>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	4619      	mov	r1, r3
 8001462:	4831      	ldr	r0, [pc, #196]	; (8001528 <print_packet+0x124>)
 8001464:	f005 fefa 	bl	800725c <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	3301      	adds	r3, #1
 800146c:	70fb      	strb	r3, [r7, #3]
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	b29b      	uxth	r3, r3
 8001472:	88ba      	ldrh	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8e5      	bhi.n	8001444 <print_packet+0x40>
	}
	printf("\n");
 8001478:	200a      	movs	r0, #10
 800147a:	f005 ff01 	bl	8007280 <putchar>
	if (packetLength & 1 << 15){
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	2b00      	cmp	r3, #0
 8001484:	da06      	bge.n	8001494 <print_packet+0x90>
		printf(" [Continued packet] ");
 8001486:	4829      	ldr	r0, [pc, #164]	; (800152c <print_packet+0x128>)
 8001488:	f005 fee8 	bl	800725c <iprintf>
		packetLength &= ~(1 << 15);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001492:	80fb      	strh	r3, [r7, #6]
	}

	printf("Length: %u\n", packetLength);
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	4619      	mov	r1, r3
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <print_packet+0x12c>)
 800149a:	f005 fedf 	bl	800725c <iprintf>

	printf("Channel: ");
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <print_packet+0x130>)
 80014a0:	f005 fedc 	bl	800725c <iprintf>
	switch (shtpHeader[2]){
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <print_packet+0x114>)
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d827      	bhi.n	80014fc <print_packet+0xf8>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <print_packet+0xb0>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014cd 	.word	0x080014cd
 80014b8:	080014d5 	.word	0x080014d5
 80014bc:	080014dd 	.word	0x080014dd
 80014c0:	080014e5 	.word	0x080014e5
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	080014f5 	.word	0x080014f5
		case 0: printf("Command"); break;
 80014cc:	481a      	ldr	r0, [pc, #104]	; (8001538 <print_packet+0x134>)
 80014ce:	f005 fec5 	bl	800725c <iprintf>
 80014d2:	e01a      	b.n	800150a <print_packet+0x106>
		case 1: printf("Executable"); break;
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <print_packet+0x138>)
 80014d6:	f005 fec1 	bl	800725c <iprintf>
 80014da:	e016      	b.n	800150a <print_packet+0x106>
		case 2: printf("Control"); break;
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <print_packet+0x13c>)
 80014de:	f005 febd 	bl	800725c <iprintf>
 80014e2:	e012      	b.n	800150a <print_packet+0x106>
		case 3: printf("Sensor-report"); break;
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <print_packet+0x140>)
 80014e6:	f005 feb9 	bl	800725c <iprintf>
 80014ea:	e00e      	b.n	800150a <print_packet+0x106>
		case 4: printf("Wake-report"); break;
 80014ec:	4816      	ldr	r0, [pc, #88]	; (8001548 <print_packet+0x144>)
 80014ee:	f005 feb5 	bl	800725c <iprintf>
 80014f2:	e00a      	b.n	800150a <print_packet+0x106>
		case 5: printf("Gyro-vector"); break;
 80014f4:	4815      	ldr	r0, [pc, #84]	; (800154c <print_packet+0x148>)
 80014f6:	f005 feb1 	bl	800725c <iprintf>
 80014fa:	e006      	b.n	800150a <print_packet+0x106>
		default: printf("Raw header : %hu", shtpHeader[2]); break;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <print_packet+0x114>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	4619      	mov	r1, r3
 8001502:	4813      	ldr	r0, [pc, #76]	; (8001550 <print_packet+0x14c>)
 8001504:	f005 feaa 	bl	800725c <iprintf>
 8001508:	bf00      	nop
	}
	printf("\n");
 800150a:	200a      	movs	r0, #10
 800150c:	f005 feb8 	bl	8007280 <putchar>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000210 	.word	0x20000210
 800151c:	0800c208 	.word	0x0800c208
 8001520:	0800c218 	.word	0x0800c218
 8001524:	20000214 	.word	0x20000214
 8001528:	0800c200 	.word	0x0800c200
 800152c:	0800c220 	.word	0x0800c220
 8001530:	0800c238 	.word	0x0800c238
 8001534:	0800c244 	.word	0x0800c244
 8001538:	0800c250 	.word	0x0800c250
 800153c:	0800c258 	.word	0x0800c258
 8001540:	0800c264 	.word	0x0800c264
 8001544:	0800c26c 	.word	0x0800c26c
 8001548:	0800c27c 	.word	0x0800c27c
 800154c:	0800c288 	.word	0x0800c288
 8001550:	0800c294 	.word	0x0800c294

08001554 <_enable_slave>:

/*============================ Hardware abstraction ============================*/

static inline void _enable_slave(){
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2110      	movs	r1, #16
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fee4 	bl	800332c <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <_disable_slave>:
static inline void _disable_slave(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2110      	movs	r1, #16
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f001 feda 	bl	800332c <HAL_GPIO_WritePin>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <_reset_slave_blocking>:
static inline void _reset_slave_blocking(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2101      	movs	r1, #1
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 fed0 	bl	800332c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800158c:	2002      	movs	r0, #2
 800158e:	f001 fa71 	bl	8002a74 <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2101      	movs	r1, #1
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f001 fec7 	bl	800332c <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_sensor_awaiting>:
static inline bool _sensor_awaiting(){
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin);
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f001 fea5 	bl	80032fc <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_wait_for_int_blocking_timeout>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
static bool _wait_for_int_blocking_timeout(uint8_t timeout){
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
	for (uint8_t counter = 0; counter < timeout; counter++){
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e010      	b.n	80015f4 <_wait_for_int_blocking_timeout+0x32>
		if (!HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin))
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f001 fe8f 	bl	80032fc <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <_wait_for_int_blocking_timeout+0x26>
			return (true);
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00a      	b.n	80015fe <_wait_for_int_blocking_timeout+0x3c>
		HAL_Delay(1);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f001 fa43 	bl	8002a74 <HAL_Delay>
	for (uint8_t counter = 0; counter < timeout; counter++){
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3ea      	bcc.n	80015d2 <_wait_for_int_blocking_timeout+0x10>
	}
	return (false);
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <_wait_for_int_blocking>:
static bool _wait_for_int_blocking(){
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
	return _wait_for_int_blocking_timeout(BNO_STANDARD_INT_TIMEOUT);
 800160a:	207f      	movs	r0, #127	; 0x7f
 800160c:	f7ff ffd9 	bl	80015c2 <_wait_for_int_blocking_timeout>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <_receive_packet>:

/*============================ Low Level ============================*/

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
static bool _receive_packet(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 800161e:	f7ff ffc0 	bl	80015a2 <_sensor_awaiting>
 8001622:	4603      	mov	r3, r0
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <_receive_packet+0x1a>
		return (false); //Data is not available
 800162e:	2300      	movs	r3, #0
 8001630:	e04b      	b.n	80016ca <_receive_packet+0xb2>

	//Get first four bytes to find out how much data we need to read
	_enable_slave();
 8001632:	f7ff ff8f 	bl	8001554 <_enable_slave>

	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(&hspi1, shtpHeader, 4, 100);
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	2204      	movs	r2, #4
 800163a:	4926      	ldr	r1, [pc, #152]	; (80016d4 <_receive_packet+0xbc>)
 800163c:	4826      	ldr	r0, [pc, #152]	; (80016d8 <_receive_packet+0xc0>)
 800163e:	f003 fb00 	bl	8004c42 <HAL_SPI_Receive>

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = (((uint16_t)shtpHeader[1]/*MSB*/) << 8) | ((uint16_t)shtpHeader[0]/*LSB*/);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <_receive_packet+0xbc>)
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <_receive_packet+0xbc>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800165c:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0){
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d110      	bne.n	8001686 <_receive_packet+0x6e>
		//Packet is empty
		if (_debug) printf("Packet empty !");
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <_receive_packet+0xc4>)
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <_receive_packet+0x5c>
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <_receive_packet+0xc8>)
 8001670:	f005 fdf4 	bl	800725c <iprintf>
		if (_debug == 2) print_header();
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <_receive_packet+0xc4>)
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d101      	bne.n	8001682 <_receive_packet+0x6a>
 800167e:	f7ff fe93 	bl	80013a8 <print_header>
		return (false); //All done
 8001682:	2300      	movs	r3, #0
 8001684:	e021      	b.n	80016ca <_receive_packet+0xb2>
	}

	dataLength -= 4; //Remove the header bytes from the data count
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	3b04      	subs	r3, #4
 800168a:	80fb      	strh	r3, [r7, #6]
	//Read incoming data into the shtpData array
	if (dataLength > BNO_MAX_PACKET_SIZE)  dataLength = BNO_MAX_PACKET_SIZE;
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001692:	d902      	bls.n	800169a <_receive_packet+0x82>
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1, shtpData, dataLength, 500);
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a0:	4910      	ldr	r1, [pc, #64]	; (80016e4 <_receive_packet+0xcc>)
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <_receive_packet+0xc0>)
 80016a4:	f003 facd 	bl	8004c42 <HAL_SPI_Receive>

	_disable_slave(); //Release BNO080
 80016a8:	f7ff ff5e 	bl	8001568 <_disable_slave>

	if(_debug == 1){printf("Packet successfully retrieved \n");print_packet();}
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <_receive_packet+0xc4>)
 80016ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d104      	bne.n	80016c0 <_receive_packet+0xa8>
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <_receive_packet+0xd0>)
 80016b8:	f005 fe3e 	bl	8007338 <puts>
 80016bc:	f7ff fea2 	bl	8001404 <print_packet>

	// Quickly check for reset complete packet. No need for a seperate parser.
	// This function is also called after soft reset, so we need to catch this
	// packet here otherwise we need to check for the reset packet in multiple
	// places.
	if (shtpHeader[2] == CHANNEL_EXECUTABLE && shtpData[0] == BNO_EXECUTABLE_RESET_COMPLETE)
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <_receive_packet+0xbc>)
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	2201      	movs	r2, #1
 80016c6:	4293      	cmp	r3, r2
	{
		//_hasReset = true;
	}

	return (true); //We're done!
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000210 	.word	0x20000210
 80016d8:	200003e4 	.word	0x200003e4
 80016dc:	2000020e 	.word	0x2000020e
 80016e0:	0800c2a8 	.word	0x0800c2a8
 80016e4:	20000214 	.word	0x20000214
 80016e8:	0800c2b8 	.word	0x0800c2b8

080016ec <_send_packet>:
static bool _send_packet(uint8_t channelNumber, uint8_t dataLength)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	460a      	mov	r2, r1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	3304      	adds	r3, #4
 8001700:	73fb      	strb	r3, [r7, #15]

	//Wait for BNO080 to indicate it is available for communication
	if (_wait_for_int_blocking() == false)
 8001702:	f7ff ff80 	bl	8001606 <_wait_for_int_blocking>
 8001706:	4603      	mov	r3, r0
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <_send_packet+0x2a>
		return false;
 8001712:	2300      	movs	r3, #0
 8001714:	e024      	b.n	8001760 <_send_packet+0x74>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode 3
	_enable_slave();
 8001716:	f7ff ff1d 	bl	8001554 <_enable_slave>

	//Send the 4 byte packet header
	uint8_t header_buffer[4];
	header_buffer[0] = (packetLength & 0xFF); //Packet length LSB // uhhhhhh & 0xFF ?
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	723b      	strb	r3, [r7, #8]
	header_buffer[1] = (packetLength >> 8); //Packet length MSB
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	121b      	asrs	r3, r3, #8
 8001722:	b2db      	uxtb	r3, r3
 8001724:	727b      	strb	r3, [r7, #9]
	header_buffer[2] = channelNumber;
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	72bb      	strb	r3, [r7, #10]
	header_buffer[3] = (sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <_send_packet+0x7c>)
 800172e:	5cd2      	ldrb	r2, [r2, r3]
 8001730:	1c51      	adds	r1, r2, #1
 8001732:	b2c8      	uxtb	r0, r1
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <_send_packet+0x7c>)
 8001736:	54c8      	strb	r0, [r1, r3]
 8001738:	4613      	mov	r3, r2
 800173a:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi1, header_buffer, 4, 200);
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	23c8      	movs	r3, #200	; 0xc8
 8001742:	2204      	movs	r2, #4
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <_send_packet+0x80>)
 8001746:	f003 f90e 	bl	8004966 <HAL_SPI_Transmit>

	//Send the user's data packet
	HAL_SPI_Transmit(&hspi1, shtpData, dataLength, 1000);
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	b29a      	uxth	r2, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	4907      	ldr	r1, [pc, #28]	; (8001770 <_send_packet+0x84>)
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <_send_packet+0x80>)
 8001756:	f003 f906 	bl	8004966 <HAL_SPI_Transmit>

	_disable_slave();
 800175a:	f7ff ff05 	bl	8001568 <_disable_slave>

	return (true);
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000314 	.word	0x20000314
 800176c:	200003e4 	.word	0x200003e4
 8001770:	20000214 	.word	0x20000214

08001774 <_set_feature_command>:

static void _set_feature_command(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig){
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	603a      	str	r2, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	460b      	mov	r3, r1
 8001782:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * (long)1000;
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	60fb      	str	r3, [r7, #12]

	shtpData[0] = BNO_SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <_set_feature_command+0xb0>)
 8001792:	22fd      	movs	r2, #253	; 0xfd
 8001794:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001796:	4a23      	ldr	r2, [pc, #140]	; (8001824 <_set_feature_command+0xb0>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <_set_feature_command+0xb0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <_set_feature_command+0xb0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <_set_feature_command+0xb0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <_set_feature_command+0xb0>)
 80017b4:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	121b      	asrs	r3, r3, #8
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <_set_feature_command+0xb0>)
 80017be:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	141b      	asrs	r3, r3, #16
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <_set_feature_command+0xb0>)
 80017c8:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0e1b      	lsrs	r3, r3, #24
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <_set_feature_command+0xb0>)
 80017d2:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_set_feature_command+0xb0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <_set_feature_command+0xb0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_set_feature_command+0xb0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <_set_feature_command+0xb0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <_set_feature_command+0xb0>)
 80017f2:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <_set_feature_command+0xb0>)
 80017fc:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_set_feature_command+0xb0>)
 8001806:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	0e1b      	lsrs	r3, r3, #24
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <_set_feature_command+0xb0>)
 8001810:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	_send_packet(CHANNEL_CONTROL, 17);
 8001812:	2302      	movs	r3, #2
 8001814:	2111      	movs	r1, #17
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff68 	bl	80016ec <_send_packet>
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000214 	.word	0x20000214

08001828 <_quaternion_to_float>:

static float _quaternion_to_float(int16_t fixedPointValue, uint8_t qPoint){
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	80fb      	strh	r3, [r7, #6]
 8001834:	4613      	mov	r3, r2
 8001836:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001844:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	425b      	negs	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe91 	bl	8000574 <__aeabi_i2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ec43 2b11 	vmov	d1, r2, r3
 800185a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001898 <_quaternion_to_float+0x70>
 800185e:	f009 fa49 	bl	800acf4 <pow>
 8001862:	ec55 4b10 	vmov	r4, r5, d0
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7fe fe96 	bl	8000598 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fee8 	bl	8000648 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9da 	bl	8000c38 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	ee07 3a90 	vmov	s15, r3
}
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	00000000 	.word	0x00000000
 800189c:	40000000 	.word	0x40000000

080018a0 <_parse_input_report>:
//shtpData[4:5]: i/accel x/gyro x/etc
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
static uint16_t _parse_input_report(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
	printf("parsing report...\n");
 80018a6:	487c      	ldr	r0, [pc, #496]	; (8001a98 <_parse_input_report+0x1f8>)
 80018a8:	f005 fd46 	bl	8007338 <puts>
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80018ac:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <_parse_input_report+0x1fc>)
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <_parse_input_report+0x1fc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	817b      	strh	r3, [r7, #10]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80018be:	897b      	ldrh	r3, [r7, #10]
 80018c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018c4:	817b      	strh	r3, [r7, #10]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	3b04      	subs	r3, #4
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	817b      	strh	r3, [r7, #10]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 80018ce:	4b74      	ldr	r3, [pc, #464]	; (8001aa0 <_parse_input_report+0x200>)
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	061a      	lsls	r2, r3, #24
 80018d4:	4b72      	ldr	r3, [pc, #456]	; (8001aa0 <_parse_input_report+0x200>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <_parse_input_report+0x200>)
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <_parse_input_report+0x200>)
 80018e6:	7852      	ldrb	r2, [r2, #1]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <_parse_input_report+0x204>)
 80018ec:	6013      	str	r3, [r2, #0]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
 80018ee:	4b6b      	ldr	r3, [pc, #428]	; (8001a9c <_parse_input_report+0x1fc>)
 80018f0:	789b      	ldrb	r3, [r3, #2]
 80018f2:	2205      	movs	r2, #5
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d155      	bne.n	80019a4 <_parse_input_report+0x104>
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
 80018f8:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <_parse_input_report+0x200>)
 80018fa:	785b      	ldrb	r3, [r3, #1]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4b67      	ldr	r3, [pc, #412]	; (8001aa0 <_parse_input_report+0x200>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21b      	sxth	r3, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <_parse_input_report+0x208>)
 800190e:	801a      	strh	r2, [r3, #0]
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
 8001910:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <_parse_input_report+0x200>)
 8001912:	78db      	ldrb	r3, [r3, #3]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b21a      	sxth	r2, r3
 8001918:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <_parse_input_report+0x200>)
 800191a:	789b      	ldrb	r3, [r3, #2]
 800191c:	b21b      	sxth	r3, r3
 800191e:	4313      	orrs	r3, r2
 8001920:	b21b      	sxth	r3, r3
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b61      	ldr	r3, [pc, #388]	; (8001aac <_parse_input_report+0x20c>)
 8001926:	801a      	strh	r2, [r3, #0]
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
 8001928:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <_parse_input_report+0x200>)
 800192a:	795b      	ldrb	r3, [r3, #5]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b21a      	sxth	r2, r3
 8001930:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <_parse_input_report+0x200>)
 8001932:	791b      	ldrb	r3, [r3, #4]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <_parse_input_report+0x210>)
 800193e:	801a      	strh	r2, [r3, #0]
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
 8001940:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <_parse_input_report+0x200>)
 8001942:	79db      	ldrb	r3, [r3, #7]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b55      	ldr	r3, [pc, #340]	; (8001aa0 <_parse_input_report+0x200>)
 800194a:	799b      	ldrb	r3, [r3, #6]
 800194c:	b21b      	sxth	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	b21b      	sxth	r3, r3
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <_parse_input_report+0x214>)
 8001956:	801a      	strh	r2, [r3, #0]
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
 8001958:	4b51      	ldr	r3, [pc, #324]	; (8001aa0 <_parse_input_report+0x200>)
 800195a:	7a5b      	ldrb	r3, [r3, #9]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <_parse_input_report+0x200>)
 8001962:	7a1b      	ldrb	r3, [r3, #8]
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21b      	sxth	r3, r3
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b52      	ldr	r3, [pc, #328]	; (8001ab8 <_parse_input_report+0x218>)
 800196e:	801a      	strh	r2, [r3, #0]
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
 8001970:	4b4b      	ldr	r3, [pc, #300]	; (8001aa0 <_parse_input_report+0x200>)
 8001972:	7adb      	ldrb	r3, [r3, #11]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b21a      	sxth	r2, r3
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <_parse_input_report+0x200>)
 800197a:	7a9b      	ldrb	r3, [r3, #10]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b21b      	sxth	r3, r3
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <_parse_input_report+0x21c>)
 8001986:	801a      	strh	r2, [r3, #0]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
 8001988:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <_parse_input_report+0x200>)
 800198a:	7b5b      	ldrb	r3, [r3, #13]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <_parse_input_report+0x200>)
 8001992:	7b1b      	ldrb	r3, [r3, #12]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b21b      	sxth	r3, r3
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <_parse_input_report+0x220>)
 800199e:	801a      	strh	r2, [r3, #0]

		return BNO_REPORTID_GYRO_INTEGRATED_ROTATION_VECTOR;
 80019a0:	232a      	movs	r3, #42	; 0x2a
 80019a2:	e075      	b.n	8001a90 <_parse_input_report+0x1f0>
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <_parse_input_report+0x200>)
 80019a6:	79db      	ldrb	r3, [r3, #7]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	727b      	strb	r3, [r7, #9]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <_parse_input_report+0x200>)
 80019b0:	7a9b      	ldrb	r3, [r3, #10]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <_parse_input_report+0x200>)
 80019b8:	7a5b      	ldrb	r3, [r3, #9]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21b      	sxth	r3, r3
 80019c0:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <_parse_input_report+0x200>)
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <_parse_input_report+0x200>)
 80019cc:	7adb      	ldrb	r3, [r3, #11]
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <_parse_input_report+0x200>)
 80019d8:	7b9b      	ldrb	r3, [r3, #14]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <_parse_input_report+0x200>)
 80019e0:	7b5b      	ldrb	r3, [r3, #13]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	81fb      	strh	r3, [r7, #14]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 80019ee:	2300      	movs	r3, #0
 80019f0:	81bb      	strh	r3, [r7, #12]
	uint16_t data6 = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	803b      	strh	r3, [r7, #0]

	if (dataLength - 5 > 9){
 80019f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019fa:	2b0e      	cmp	r3, #14
 80019fc:	dd09      	ble.n	8001a12 <_parse_input_report+0x172>
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <_parse_input_report+0x200>)
 8001a00:	7c1b      	ldrb	r3, [r3, #16]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <_parse_input_report+0x200>)
 8001a08:	7bdb      	ldrb	r3, [r3, #15]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	81fb      	strh	r3, [r7, #14]
	}
	if (dataLength - 5 > 11){
 8001a12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	dd09      	ble.n	8001a2e <_parse_input_report+0x18e>
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <_parse_input_report+0x200>)
 8001a1c:	7c9b      	ldrb	r3, [r3, #18]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <_parse_input_report+0x200>)
 8001a24:	7c5b      	ldrb	r3, [r3, #17]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	81bb      	strh	r3, [r7, #12]
	}
	if (dataLength - 5 > 13){
 8001a2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	dd09      	ble.n	8001a4a <_parse_input_report+0x1aa>
		data6 = (uint16_t)shtpData[5 + 15] << 8 | shtpData[5 + 14];
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <_parse_input_report+0x200>)
 8001a38:	7d1b      	ldrb	r3, [r3, #20]
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <_parse_input_report+0x200>)
 8001a40:	7cdb      	ldrb	r3, [r3, #19]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	803b      	strh	r3, [r7, #0]
	}

	//Store these generic values to their proper global variable
	switch (shtpData[5]){
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_parse_input_report+0x200>)
 8001a4c:	795b      	ldrb	r3, [r3, #5]
 8001a4e:	2b29      	cmp	r3, #41	; 0x29
 8001a50:	dc1d      	bgt.n	8001a8e <_parse_input_report+0x1ee>
 8001a52:	2b28      	cmp	r3, #40	; 0x28
 8001a54:	da03      	bge.n	8001a5e <_parse_input_report+0x1be>
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d001      	beq.n	8001a5e <_parse_input_report+0x1be>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d117      	bne.n	8001a8e <_parse_input_report+0x1ee>
		break;*/
	case (BNO_REPORTID_AR_VR_STABILIZED_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR):
	case (BNO_REPORTID_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_ROTATION_VECTOR):
		quatAccuracy = status;
 8001a5e:	7a7b      	ldrb	r3, [r7, #9]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <_parse_input_report+0x224>)
 8001a64:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <_parse_input_report+0x208>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <_parse_input_report+0x20c>)
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <_parse_input_report+0x210>)
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001a78:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <_parse_input_report+0x214>)
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	8013      	strh	r3, [r2, #0]
		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_parse_input_report+0x228>)
 8001a80:	89bb      	ldrh	r3, [r7, #12]
 8001a82:	8013      	strh	r3, [r2, #0]
		break;
 8001a84:	bf00      	nop
	default :
		return 0;
	}
	//TODO additional feature reports may be strung together. Parse them all.

	return shtpData[5];
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <_parse_input_report+0x200>)
 8001a88:	795b      	ldrb	r3, [r3, #5]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	e000      	b.n	8001a90 <_parse_input_report+0x1f0>
		return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	0800c2d8 	.word	0x0800c2d8
 8001a9c:	20000210 	.word	0x20000210
 8001aa0:	20000214 	.word	0x20000214
 8001aa4:	2000032c 	.word	0x2000032c
 8001aa8:	2000031a 	.word	0x2000031a
 8001aac:	2000031c 	.word	0x2000031c
 8001ab0:	2000031e 	.word	0x2000031e
 8001ab4:	20000320 	.word	0x20000320
 8001ab8:	20000326 	.word	0x20000326
 8001abc:	20000328 	.word	0x20000328
 8001ac0:	2000032a 	.word	0x2000032a
 8001ac4:	20000324 	.word	0x20000324
 8001ac8:	20000322 	.word	0x20000322

08001acc <_parse_command_report>:
//shtpData[5 + 4]: R4
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
static uint16_t _parse_command_report(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	printf("parsing command...\n");
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <_parse_command_report+0x3c>)
 8001ad4:	f005 fc30 	bl	8007338 <puts>
	if (shtpData[0] == BNO_SHTP_REPORT_COMMAND_RESPONSE){
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <_parse_command_report+0x40>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2bf1      	cmp	r3, #241	; 0xf1
 8001ade:	d10d      	bne.n	8001afc <_parse_command_report+0x30>
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <_parse_command_report+0x40>)
 8001ae2:	789b      	ldrb	r3, [r3, #2]
 8001ae4:	71fb      	strb	r3, [r7, #7]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	d103      	bne.n	8001af4 <_parse_command_report+0x28>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_parse_command_report+0x40>)
 8001aee:	795a      	ldrb	r2, [r3, #5]
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_parse_command_report+0x44>)
 8001af2:	701a      	strb	r2, [r3, #0]
		}
		return shtpData[0];
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <_parse_command_report+0x40>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	e000      	b.n	8001afe <_parse_command_report+0x32>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800c2ec 	.word	0x0800c2ec
 8001b0c:	20000214 	.word	0x20000214
 8001b10:	20000330 	.word	0x20000330

08001b14 <bno_setup>:
/*============================ High Level ============================*/

bool bno_setup(void){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

	_disable_slave();
 8001b1a:	f7ff fd25 	bl	8001568 <_disable_slave>
	_reset_slave_blocking();
 8001b1e:	f7ff fd2d 	bl	800157c <_reset_slave_blocking>

	//Wait for first assertion of INT before using WAK pin. Can take ~104ms
	if(!_wait_for_int_blocking()) return false;
 8001b22:	f7ff fd70 	bl	8001606 <_wait_for_int_blocking>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <bno_setup+0x22>
 8001b32:	2300      	movs	r3, #0
 8001b34:	e089      	b.n	8001c4a <bno_setup+0x136>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	if(!_wait_for_int_blocking()) return false; //Wait for assertion of INT before reading advert message.
 8001b36:	f7ff fd66 	bl	8001606 <_wait_for_int_blocking>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <bno_setup+0x36>
 8001b46:	2300      	movs	r3, #0
 8001b48:	e07f      	b.n	8001c4a <bno_setup+0x136>
	_receive_packet();
 8001b4a:	f7ff fd65 	bl	8001618 <_receive_packet>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	if(!_wait_for_int_blocking()) return false; //Wait for assertion of INT before reading Init response
 8001b4e:	f7ff fd5a 	bl	8001606 <_wait_for_int_blocking>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f083 0301 	eor.w	r3, r3, #1
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <bno_setup+0x4e>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e073      	b.n	8001c4a <bno_setup+0x136>
	_receive_packet();
 8001b62:	f7ff fd59 	bl	8001618 <_receive_packet>

	//Check communication with device
	shtpData[0] = BNO_SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001b66:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <bno_setup+0x140>)
 8001b68:	22f9      	movs	r2, #249	; 0xf9
 8001b6a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <bno_setup+0x140>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	if(!_send_packet(CHANNEL_CONTROL, 2)){
 8001b72:	2302      	movs	r3, #2
 8001b74:	2102      	movs	r1, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fdb8 	bl	80016ec <_send_packet>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <bno_setup+0x7e>
		printf("Send command to the BNO085 failed");
 8001b88:	4833      	ldr	r0, [pc, #204]	; (8001c58 <bno_setup+0x144>)
 8001b8a:	f005 fb67 	bl	800725c <iprintf>
		return false;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e05b      	b.n	8001c4a <bno_setup+0x136>
	}

	//Now we wait for response
	if(!_wait_for_int_blocking()) return false;
 8001b92:	f7ff fd38 	bl	8001606 <_wait_for_int_blocking>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <bno_setup+0x92>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e051      	b.n	8001c4a <bno_setup+0x136>
	if (_receive_packet() && shtpData[0] == BNO_SHTP_REPORT_PRODUCT_ID_RESPONSE){
 8001ba6:	f7ff fd37 	bl	8001618 <_receive_packet>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d04b      	beq.n	8001c48 <bno_setup+0x134>
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <bno_setup+0x140>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2bf8      	cmp	r3, #248	; 0xf8
 8001bb6:	d147      	bne.n	8001c48 <bno_setup+0x134>
		if (_debug){
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <bno_setup+0x148>)
 8001bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d040      	beq.n	8001c44 <bno_setup+0x130>
			printf("SW Version Major: 0x%04X", shtpData[2]);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <bno_setup+0x140>)
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4825      	ldr	r0, [pc, #148]	; (8001c60 <bno_setup+0x14c>)
 8001bca:	f005 fb47 	bl	800725c <iprintf>
			printf(" SW Version Minor: 0x%04X \n", shtpData[3]);
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <bno_setup+0x140>)
 8001bd0:	78db      	ldrb	r3, [r3, #3]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <bno_setup+0x150>)
 8001bd6:	f005 fb41 	bl	800725c <iprintf>
			uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <bno_setup+0x140>)
 8001bdc:	79db      	ldrb	r3, [r3, #7]
 8001bde:	061a      	lsls	r2, r3, #24
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <bno_setup+0x140>)
 8001be2:	799b      	ldrb	r3, [r3, #6]
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	431a      	orrs	r2, r3
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <bno_setup+0x140>)
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <bno_setup+0x140>)
 8001bf2:	7912      	ldrb	r2, [r2, #4]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
			printf("SW Part Number: %ld \n",SW_Part_Number);
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	481b      	ldr	r0, [pc, #108]	; (8001c68 <bno_setup+0x154>)
 8001bfc:	f005 fb2e 	bl	800725c <iprintf>
			uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <bno_setup+0x140>)
 8001c02:	7adb      	ldrb	r3, [r3, #11]
 8001c04:	061a      	lsls	r2, r3, #24
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <bno_setup+0x140>)
 8001c08:	7a9b      	ldrb	r3, [r3, #10]
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <bno_setup+0x140>)
 8001c10:	7a5b      	ldrb	r3, [r3, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	4313      	orrs	r3, r2
 8001c16:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <bno_setup+0x140>)
 8001c18:	7a12      	ldrb	r2, [r2, #8]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60bb      	str	r3, [r7, #8]
			printf("SW Build Number: %ld \n", SW_Build_Number);
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	4812      	ldr	r0, [pc, #72]	; (8001c6c <bno_setup+0x158>)
 8001c22:	f005 fb1b 	bl	800725c <iprintf>
			uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <bno_setup+0x140>)
 8001c28:	7b5b      	ldrb	r3, [r3, #13]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <bno_setup+0x140>)
 8001c30:	7b1b      	ldrb	r3, [r3, #12]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	80fb      	strh	r3, [r7, #6]
			printf("SW Version Patch: %d \n",SW_Version_Patch);
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <bno_setup+0x15c>)
 8001c40:	f005 fb0c 	bl	800725c <iprintf>
		}
		return (true);
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <bno_setup+0x136>
	}
	return (false); //Something went wrong
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000214 	.word	0x20000214
 8001c58:	0800c300 	.word	0x0800c300
 8001c5c:	2000020e 	.word	0x2000020e
 8001c60:	0800c324 	.word	0x0800c324
 8001c64:	0800c340 	.word	0x0800c340
 8001c68:	0800c35c 	.word	0x0800c35c
 8001c6c:	0800c374 	.word	0x0800c374
 8001c70:	0800c38c 	.word	0x0800c38c

08001c74 <bno_enable_rotation_vector>:

void bno_enable_rotation_vector(uint16_t timeBetweenReports){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
	_set_feature_command(BNO_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	2005      	movs	r0, #5
 8001c86:	f7ff fd75 	bl	8001774 <_set_feature_command>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <bno_get_readings>:

uint16_t bno_get_readings(void){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 8001c98:	f7ff fc83 	bl	80015a2 <_sensor_awaiting>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <bno_get_readings+0x18>
		return (0); //Data is not available
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e02a      	b.n	8001d02 <bno_get_readings+0x6e>
	printf("%d",shtpHeader[2]);
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <bno_get_readings+0x74>)
 8001cae:	789b      	ldrb	r3, [r3, #2]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4816      	ldr	r0, [pc, #88]	; (8001d0c <bno_get_readings+0x78>)
 8001cb4:	f005 fad2 	bl	800725c <iprintf>
	if (_receive_packet() == true){
 8001cb8:	f7ff fcae 	bl	8001618 <_receive_packet>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01e      	beq.n	8001d00 <bno_get_readings+0x6c>
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == BNO_SHTP_REPORT_BASE_TIMESTAMP){
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <bno_get_readings+0x74>)
 8001cc4:	789b      	ldrb	r3, [r3, #2]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d107      	bne.n	8001cdc <bno_get_readings+0x48>
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <bno_get_readings+0x7c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2bfb      	cmp	r3, #251	; 0xfb
 8001cd2:	d103      	bne.n	8001cdc <bno_get_readings+0x48>
			return _parse_input_report(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001cd4:	f7ff fde4 	bl	80018a0 <_parse_input_report>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	e012      	b.n	8001d02 <bno_get_readings+0x6e>
		} else if (shtpHeader[2] == CHANNEL_CONTROL){
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <bno_get_readings+0x74>)
 8001cde:	789b      	ldrb	r3, [r3, #2]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d103      	bne.n	8001cee <bno_get_readings+0x5a>
			return _parse_command_report(); //This will update responses to commands, calibrationStatus, etc.
 8001ce6:	f7ff fef1 	bl	8001acc <_parse_command_report>
 8001cea:	4603      	mov	r3, r0
 8001cec:	e009      	b.n	8001d02 <bno_get_readings+0x6e>
		} else if (shtpHeader[2] == CHANNEL_GYRO){
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <bno_get_readings+0x74>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
 8001cf2:	2205      	movs	r2, #5
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d103      	bne.n	8001d00 <bno_get_readings+0x6c>
			return _parse_input_report();
 8001cf8:	f7ff fdd2 	bl	80018a0 <_parse_input_report>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	e000      	b.n	8001d02 <bno_get_readings+0x6e>
		}
	}
	return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000210 	.word	0x20000210
 8001d0c:	0800c3a4 	.word	0x0800c3a4
 8001d10:	20000214 	.word	0x20000214

08001d14 <bno_get_yaw>:

float bno_get_yaw(void){
 8001d14:	b5b0      	push	{r4, r5, r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
	 // get quaternion arguments
	float dqw = _quaternion_to_float(rawQuatReal, rotationVector_Q1);
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <bno_get_yaw+0x1ac>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <bno_get_yaw+0x1b0>)
 8001d22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fd7c 	bl	8001828 <_quaternion_to_float>
 8001d30:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float dqx = _quaternion_to_float(rawQuatI, rotationVector_Q1);
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <bno_get_yaw+0x1b4>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4a62      	ldr	r2, [pc, #392]	; (8001ec4 <bno_get_yaw+0x1b0>)
 8001d3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fd6f 	bl	8001828 <_quaternion_to_float>
 8001d4a:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqy = _quaternion_to_float(rawQuatJ, rotationVector_Q1);
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <bno_get_yaw+0x1b8>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <bno_get_yaw+0x1b0>)
 8001d56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fd62 	bl	8001828 <_quaternion_to_float>
 8001d64:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqz = _quaternion_to_float(rawQuatK, rotationVector_Q1);
 8001d68:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <bno_get_yaw+0x1bc>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <bno_get_yaw+0x1b0>)
 8001d70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fd55 	bl	8001828 <_quaternion_to_float>
 8001d7e:	ed87 0a06 	vstr	s0, [r7, #24]

	//printf("%d %d %d %d \n", rawQuatReal,rawQuatI,rawQuatJ,rawQuatK);

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8001d82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d86:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	ee17 0a90 	vmov	r0, s15
 8001db2:	f7fe fbf1 	bl	8000598 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	ec43 2b10 	vmov	d0, r2, r3
 8001dbe:	f009 f809 	bl	800add4 <sqrt>
 8001dc2:	ec53 2b10 	vmov	r2, r3, d0
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe ff35 	bl	8000c38 <__aeabi_d2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	617b      	str	r3, [r7, #20]
	dqw = dqw/norm;
 8001dd2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001dd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dqx = dqx/norm;
 8001de2:	edd7 6a08 	vldr	s13, [r7, #32]
 8001de6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dee:	edc7 7a08 	vstr	s15, [r7, #32]
	dqy = dqy/norm;
 8001df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8001df6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfe:	edc7 7a07 	vstr	s15, [r7, #28]
	dqz = dqz/norm;
 8001e02:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0e:	edc7 7a06 	vstr	s15, [r7, #24]

	float ysqr = dqy * dqy;
 8001e12:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e1a:	edc7 7a04 	vstr	s15, [r7, #16]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 8001e1e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2a:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e3e:	edc7 7a03 	vstr	s15, [r7, #12]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8001e42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e46:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	ee17 0a90 	vmov	r0, s15
 8001e56:	f7fe fb9f 	bl	8000598 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	f7fe fa3d 	bl	80002dc <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <bno_get_yaw+0x1c0>)
 8001e6c:	f7fe fa34 	bl	80002d8 <__aeabi_dsub>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fede 	bl	8000c38 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60bb      	str	r3, [r7, #8]
	float yaw = atan2(t3, t4);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe fb89 	bl	8000598 <__aeabi_f2d>
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f7fe fb84 	bl	8000598 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	ec43 2b11 	vmov	d1, r2, r3
 8001e98:	ec45 4b10 	vmov	d0, r4, r5
 8001e9c:	f008 ff28 	bl	800acf0 <atan2>
 8001ea0:	ec53 2b10 	vmov	r2, r3, d0
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fec6 	bl	8000c38 <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	607b      	str	r3, [r7, #4]

	return (yaw);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ee07 3a90 	vmov	s15, r3
}
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	20000320 	.word	0x20000320
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	2000031a 	.word	0x2000031a
 8001ecc:	2000031c 	.word	0x2000031c
 8001ed0:	2000031e 	.word	0x2000031e
 8001ed4:	3ff00000 	.word	0x3ff00000

08001ed8 <DWT_Init>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <DWT_Init+0x28>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <DWT_Init+0x28>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <DWT_Init+0x2c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <DWT_Init+0x2c>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000edf0 	.word	0xe000edf0
 8001f04:	e0001000 	.word	0xe0001000

08001f08 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f12:	1df9      	adds	r1, r7, #7
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4804      	ldr	r0, [pc, #16]	; (8001f2c <__io_putchar+0x24>)
 8001f1c:	f003 fbe0 	bl	80056e0 <HAL_UART_Transmit>
	return ch;
 8001f20:	79fb      	ldrb	r3, [r7, #7]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000448 	.word	0x20000448

08001f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f36:	f000 fd2c 	bl	8002992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3a:	f000 f843 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f3e:	f000 f9c7 	bl	80022d0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8001f42:	f000 f88d 	bl	8002060 <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8001f46:	f000 f99b 	bl	8002280 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8001f4a:	f000 f8cf 	bl	80020ec <MX_I2C2_Init>
  MX_SPI1_Init();
 8001f4e:	f000 f90d 	bl	800216c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f52:	f000 f949 	bl	80021e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8001f56:	f7ff ffbf 	bl	8001ed8 <DWT_Init>
  printf("=== HAL init done, proceeding ... ===\n");
 8001f5a:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <main+0x88>)
 8001f5c:	f005 f9ec 	bl	8007338 <puts>

  //adnsEnableDebugReports();
  adnsInit();
 8001f60:	f7ff f9b8 	bl	80012d4 <adnsInit>

  if(!bno_setup()) printf("=== Could NOT initialize the BNO085 ! ===\n");
 8001f64:	f7ff fdd6 	bl	8001b14 <bno_setup>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <main+0x4a>
 8001f74:	4811      	ldr	r0, [pc, #68]	; (8001fbc <main+0x8c>)
 8001f76:	f005 f9df 	bl	8007338 <puts>
  bno_enable_rotation_vector(40);
 8001f7a:	2028      	movs	r0, #40	; 0x28
 8001f7c:	f7ff fe7a 	bl	8001c74 <bno_enable_rotation_vector>
  setup();
 8001f80:	f000 fa29 	bl	80023d6 <setup>
  printf("=== User init done, proceeding ... ===\n");
 8001f84:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <main+0x90>)
 8001f86:	f005 f9d7 	bl	8007338 <puts>
  double x = 0, y = 0;
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001fa2:	f000 fa1f 	bl	80023e4 <loop>
	  if(bno_get_readings()) bno_get_yaw();// printf("%.4f \n",bno_get_yaw());
 8001fa6:	f7ff fe75 	bl	8001c94 <bno_get_readings>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f8      	beq.n	8001fa2 <main+0x72>
 8001fb0:	f7ff feb0 	bl	8001d14 <bno_get_yaw>
	  loop();
 8001fb4:	e7f5      	b.n	8001fa2 <main+0x72>
 8001fb6:	bf00      	nop
 8001fb8:	0800c3a8 	.word	0x0800c3a8
 8001fbc:	0800c3d0 	.word	0x0800c3d0
 8001fc0:	0800c3fc 	.word	0x0800c3fc

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b094      	sub	sp, #80	; 0x50
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	2238      	movs	r2, #56	; 0x38
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 fab0 	bl	8007538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fea:	f001 fbed 	bl	80037c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001fee:	2322      	movs	r3, #34	; 0x22
 8001ff0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002000:	2302      	movs	r3, #2
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002004:	2302      	movs	r3, #2
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002008:	2301      	movs	r3, #1
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800200c:	230c      	movs	r3, #12
 800200e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002010:	2302      	movs	r3, #2
 8002012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002014:	2302      	movs	r3, #2
 8002016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002018:	2304      	movs	r3, #4
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	4618      	mov	r0, r3
 8002022:	f001 fc85 	bl	8003930 <HAL_RCC_OscConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800202c:	f000 f9ce 	bl	80023cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002030:	230f      	movs	r3, #15
 8002032:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002034:	2303      	movs	r3, #3
 8002036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f001 ff89 	bl	8003f60 <HAL_RCC_ClockConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002054:	f000 f9ba 	bl	80023cc <Error_Handler>
  }
}
 8002058:	bf00      	nop
 800205a:	3750      	adds	r7, #80	; 0x50
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 8002066:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <MX_FDCAN2_Init+0x88>)
 8002068:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 800207e:	2200      	movs	r2, #0
 8002080:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 8002084:	2200      	movs	r2, #0
 8002086:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 800208a:	2200      	movs	r2, #0
 800208c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 8002090:	2210      	movs	r2, #16
 8002092:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 8002096:	2201      	movs	r2, #1
 8002098:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 800209c:	2202      	movs	r2, #2
 800209e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <MX_FDCAN2_Init+0x84>)
 80020d2:	f000 fdd5 	bl	8002c80 <HAL_FDCAN_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80020dc:	f000 f976 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000334 	.word	0x20000334
 80020e8:	40006800 	.word	0x40006800

080020ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <MX_I2C2_Init+0x74>)
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <MX_I2C2_Init+0x78>)
 80020f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_I2C2_Init+0x74>)
 80020f8:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <MX_I2C2_Init+0x7c>)
 80020fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_I2C2_Init+0x74>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <MX_I2C2_Init+0x74>)
 8002104:	2201      	movs	r2, #1
 8002106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002108:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_I2C2_Init+0x74>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_I2C2_Init+0x74>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <MX_I2C2_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_I2C2_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_I2C2_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <MX_I2C2_Init+0x74>)
 8002128:	f001 f918 	bl	800335c <HAL_I2C_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002132:	f000 f94b 	bl	80023cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <MX_I2C2_Init+0x74>)
 800213a:	f001 f99e 	bl	800347a <HAL_I2CEx_ConfigAnalogFilter>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002144:	f000 f942 	bl	80023cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002148:	2100      	movs	r1, #0
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_I2C2_Init+0x74>)
 800214c:	f001 f9e0 	bl	8003510 <HAL_I2CEx_ConfigDigitalFilter>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002156:	f000 f939 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000398 	.word	0x20000398
 8002164:	40005800 	.word	0x40005800
 8002168:	2010091a 	.word	0x2010091a

0800216c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <MX_SPI1_Init+0x74>)
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <MX_SPI1_Init+0x78>)
 8002174:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_SPI1_Init+0x74>)
 8002178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800217c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_SPI1_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <MX_SPI1_Init+0x74>)
 8002186:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800218a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_SPI1_Init+0x74>)
 800218e:	2202      	movs	r2, #2
 8002190:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_SPI1_Init+0x74>)
 8002194:	2201      	movs	r2, #1
 8002196:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_SPI1_Init+0x74>)
 800219a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021ba:	2207      	movs	r2, #7
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_SPI1_Init+0x74>)
 80021cc:	f002 fb20 	bl	8004810 <HAL_SPI_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f000 f8f9 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200003e4 	.word	0x200003e4
 80021e4:	40013000 	.word	0x40013000

080021e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <MX_USART2_UART_Init+0x90>)
 80021ee:	4a23      	ldr	r2, [pc, #140]	; (800227c <MX_USART2_UART_Init+0x94>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <MX_USART2_UART_Init+0x90>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <MX_USART2_UART_Init+0x90>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_USART2_UART_Init+0x90>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_USART2_UART_Init+0x90>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_USART2_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002230:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002232:	f003 fa05 	bl	8005640 <HAL_UART_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800223c:	f000 f8c6 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002240:	2100      	movs	r1, #0
 8002242:	480d      	ldr	r0, [pc, #52]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002244:	f003 ffcc 	bl	80061e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800224e:	f000 f8bd 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002252:	2100      	movs	r1, #0
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002256:	f004 f801 	bl	800625c <HAL_UARTEx_SetRxFifoThreshold>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002260:	f000 f8b4 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_USART2_UART_Init+0x90>)
 8002266:	f003 ff82 	bl	800616e <HAL_UARTEx_DisableFifoMode>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002270:	f000 f8ac 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000448 	.word	0x20000448
 800227c:	40004400 	.word	0x40004400

08002280 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <MX_USB_PCD_Init+0x4c>)
 8002288:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 800228c:	2208      	movs	r2, #8
 800228e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 8002292:	2202      	movs	r2, #2
 8002294:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 8002298:	2202      	movs	r2, #2
 800229a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_USB_PCD_Init+0x48>)
 80022b6:	f001 f977 	bl	80035a8 <HAL_PCD_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80022c0:	f000 f884 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200004d8 	.word	0x200004d8
 80022cc:	40005c00 	.word	0x40005c00

080022d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <MX_GPIO_Init+0xf4>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a36      	ldr	r2, [pc, #216]	; (80023c4 <MX_GPIO_Init+0xf4>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <MX_GPIO_Init+0xf4>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <MX_GPIO_Init+0xf4>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <MX_GPIO_Init+0xf4>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <MX_GPIO_Init+0xf4>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	f240 4111 	movw	r1, #1041	; 0x411
 800231c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002320:	f001 f804 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	2110      	movs	r1, #16
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <MX_GPIO_Init+0xf8>)
 800232a:	f000 ffff 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_IMU_Pin CS_IMU_Pin CS_ADNS_Pin */
  GPIO_InitStruct.Pin = RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin;
 800232e:	f240 4311 	movw	r3, #1041	; 0x411
 8002332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800234a:	f000 fe55 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_INT_Pin */
  GPIO_InitStruct.Pin = AU_INT_Pin;
 800234e:	2302      	movs	r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002352:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002358:	2302      	movs	r3, #2
 800235a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_INT_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f000 fe47 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ANDS_Pin */
  GPIO_InitStruct.Pin = INT_ANDS_Pin;
 800236a:	2301      	movs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002374:	2301      	movs	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ANDS_GPIO_Port, &GPIO_InitStruct);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	4812      	ldr	r0, [pc, #72]	; (80023c8 <MX_GPIO_Init+0xf8>)
 8002380:	f000 fe3a 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 8002384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238e:	2301      	movs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f000 fe2c 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 80023a0:	2310      	movs	r3, #16
 80023a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4619      	mov	r1, r3
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <MX_GPIO_Init+0xf8>)
 80023b8:	f000 fe1e 	bl	8002ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	48000400 	.word	0x48000400

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <Error_Handler+0x8>

080023d6 <setup>:
void setup(void){
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <loop>:

void loop(void){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_MspInit+0x44>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_MspInit+0x44>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6613      	str	r3, [r2, #96]	; 0x60
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_MspInit+0x44>)
 8002408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x44>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x44>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x44>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800242a:	f001 fa71 	bl	8003910 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b09e      	sub	sp, #120	; 0x78
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2250      	movs	r2, #80	; 0x50
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f005 f86b 	bl	8007538 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_FDCAN_MspInit+0xa8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d137      	bne.n	80024dc <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002470:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4618      	mov	r0, r3
 800247e:	f001 ff8b 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002488:	f7ff ffa0 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_FDCAN_MspInit+0xac>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_FDCAN_MspInit+0xac>)
 8002492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_FDCAN_MspInit+0xac>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_FDCAN_MspInit+0xac>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_FDCAN_MspInit+0xac>)
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_FDCAN_MspInit+0xac>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80024bc:	2360      	movs	r3, #96	; 0x60
 80024be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80024cc:	2309      	movs	r3, #9
 80024ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024d4:	4619      	mov	r1, r3
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_FDCAN_MspInit+0xb0>)
 80024d8:	f000 fd8e 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3778      	adds	r7, #120	; 0x78
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40006800 	.word	0x40006800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	48000400 	.word	0x48000400

080024f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b09e      	sub	sp, #120	; 0x78
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2250      	movs	r2, #80	; 0x50
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f005 f811 	bl	8007538 <memset>
  if(hi2c->Instance==I2C2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_I2C_MspInit+0xa8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d137      	bne.n	8002590 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4618      	mov	r0, r3
 800252e:	f001 ff33 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002538:	f7ff ff48 	bl	80023cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_I2C_MspInit+0xac>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_I2C_MspInit+0xac>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_I2C_MspInit+0xac>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002558:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800255a:	2312      	movs	r3, #18
 800255c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002566:	2304      	movs	r3, #4
 8002568:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f000 fd40 	bl	8002ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_I2C_MspInit+0xac>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_I2C_MspInit+0xac>)
 800257e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002582:	6593      	str	r3, [r2, #88]	; 0x58
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_I2C_MspInit+0xac>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002590:	bf00      	nop
 8002592:	3778      	adds	r7, #120	; 0x78
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40005800 	.word	0x40005800
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_SPI_MspInit+0x7c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d128      	bne.n	8002614 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_SPI_MspInit+0x80>)
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_SPI_MspInit+0x80>)
 80025c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025cc:	6613      	str	r3, [r2, #96]	; 0x60
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_SPI_MspInit+0x80>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_SPI_MspInit+0x80>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_SPI_MspInit+0x80>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_SPI_MspInit+0x80>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025f2:	23e0      	movs	r3, #224	; 0xe0
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002602:	2305      	movs	r3, #5
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002610:	f000 fcf2 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013000 	.word	0x40013000
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b09e      	sub	sp, #120	; 0x78
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2250      	movs	r2, #80	; 0x50
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f004 ff77 	bl	8007538 <memset>
  if(huart->Instance==USART2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_UART_MspInit+0xa8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d136      	bne.n	80026c2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002654:	2302      	movs	r3, #2
 8002656:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fe99 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800266c:	f7ff feae 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_UART_MspInit+0xac>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_UART_MspInit+0xac>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0xac>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_UART_MspInit+0xac>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_UART_MspInit+0xac>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_UART_MspInit+0xac>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a0:	230c      	movs	r3, #12
 80026a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b0:	2307      	movs	r3, #7
 80026b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026b8:	4619      	mov	r1, r3
 80026ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026be:	f000 fc9b 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3778      	adds	r7, #120	; 0x78
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b098      	sub	sp, #96	; 0x60
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	2250      	movs	r2, #80	; 0x50
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 ff27 	bl	8007538 <memset>
  if(hpcd->Instance==USB)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_PCD_MspInit+0x60>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d11a      	bne.n	800272a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80026fa:	2300      	movs	r3, #0
 80026fc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fe48 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800270e:	f7ff fe5d 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_PCD_MspInit+0x64>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_PCD_MspInit+0x64>)
 8002718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_PCD_MspInit+0x64>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800272a:	bf00      	nop
 800272c:	3760      	adds	r7, #96	; 0x60
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40005c00 	.word	0x40005c00
 8002738:	40021000 	.word	0x40021000

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002788:	f000 f956 	bl	8002a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_kill>:

int _kill(int pid, int sig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027aa:	f004 ff17 	bl	80075dc <__errno>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2216      	movs	r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
  return -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_exit>:

void _exit (int status)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ffe7 	bl	80027a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027d2:	e7fe      	b.n	80027d2 <_exit+0x12>

080027d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e00a      	b.n	80027fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027e6:	f3af 8000 	nop.w
 80027ea:	4601      	mov	r1, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	b2ca      	uxtb	r2, r1
 80027f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbf0      	blt.n	80027e6 <_read+0x12>
  }

  return len;
 8002804:	687b      	ldr	r3, [r7, #4]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e009      	b.n	8002834 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	60ba      	str	r2, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fb6d 	bl	8001f08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbf1      	blt.n	8002820 <_write+0x12>
  }
  return len;
 800283c:	687b      	ldr	r3, [r7, #4]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_close>:

int _close(int file)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286e:	605a      	str	r2, [r3, #4]
  return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_isatty>:

int _isatty(int file)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f004 fe7c 	bl	80075dc <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2001c000 	.word	0x2001c000
 8002910:	00000400 	.word	0x00000400
 8002914:	200007cc 	.word	0x200007cc
 8002918:	20000920 	.word	0x20000920

0800291c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <SystemInit+0x20>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	4a05      	ldr	r2, [pc, #20]	; (800293c <SystemInit+0x20>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002942:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002944:	480d      	ldr	r0, [pc, #52]	; (800297c <LoopForever+0x6>)
  ldr r1, =_edata
 8002946:	490e      	ldr	r1, [pc, #56]	; (8002980 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <LoopForever+0xe>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800294c:	e002      	b.n	8002954 <LoopCopyDataInit>

0800294e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002952:	3304      	adds	r3, #4

08002954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002958:	d3f9      	bcc.n	800294e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <LoopForever+0x12>)
  ldr r4, =_ebss
 800295c:	4c0b      	ldr	r4, [pc, #44]	; (800298c <LoopForever+0x16>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002960:	e001      	b.n	8002966 <LoopFillZerobss>

08002962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002964:	3204      	adds	r2, #4

08002966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002968:	d3fb      	bcc.n	8002962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800296a:	f7ff ffd7 	bl	800291c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296e:	f004 fe3b 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002972:	f7ff fadd 	bl	8001f30 <main>

08002976 <LoopForever>:

LoopForever:
    b LoopForever
 8002976:	e7fe      	b.n	8002976 <LoopForever>
  ldr   r0, =_estack
 8002978:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800297c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002980:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002984:	0800d540 	.word	0x0800d540
  ldr r2, =_sbss
 8002988:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800298c:	20000920 	.word	0x20000920

08002990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC1_2_IRQHandler>

08002992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 f93d 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f80e 	bl	80029c4 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	71fb      	strb	r3, [r7, #7]
 80029b2:	e001      	b.n	80029b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029b4:	f7ff fd1e 	bl	80023f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b8:	79fb      	ldrb	r3, [r7, #7]

}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_InitTick+0x68>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d022      	beq.n	8002a1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_InitTick+0x6c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_InitTick+0x68>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f93a 	bl	8002c66 <HAL_SYSTICK_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10f      	bne.n	8002a18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b0f      	cmp	r3, #15
 80029fc:	d809      	bhi.n	8002a12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fe:	2200      	movs	r2, #0
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	f04f 30ff 	mov.w	r0, #4294967295
 8002a06:	f000 f914 	bl	8002c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_InitTick+0x70>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e007      	b.n	8002a22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e004      	b.n	8002a22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e001      	b.n	8002a22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000008 	.word	0x20000008
 8002a34:	2000000c 	.word	0x2000000c

08002a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_IncTick+0x1c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_IncTick+0x20>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <HAL_IncTick+0x1c>)
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	200007d0 	.word	0x200007d0
 8002a58:	20000010 	.word	0x20000010

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	200007d0 	.word	0x200007d0

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff ffee 	bl	8002a5c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d004      	beq.n	8002a98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_Delay+0x40>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a98:	bf00      	nop
 8002a9a:	f7ff ffdf 	bl	8002a5c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d8f7      	bhi.n	8002a9a <HAL_Delay+0x26>
  {
  }
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000010 	.word	0x20000010

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff47 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff5e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff90 	bl	8002b70 <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5f 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffb2 	bl	8002bd8 <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e147      	b.n	8002f22 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fbc8 	bl	800243c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0210 	bic.w	r2, r2, #16
 8002cba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cbc:	f7ff fece 	bl	8002a5c <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cc2:	e012      	b.n	8002cea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cc4:	f7ff feca 	bl	8002a5c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d90b      	bls.n	8002cea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e11b      	b.n	8002f22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d0e5      	beq.n	8002cc4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d08:	f7ff fea8 	bl	8002a5c <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d0e:	e012      	b.n	8002d36 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d10:	f7ff fea4 	bl	8002a5c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b0a      	cmp	r3, #10
 8002d1c:	d90b      	bls.n	8002d36 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0f5      	b.n	8002f22 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0e5      	beq.n	8002d10 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0202 	orr.w	r2, r2, #2
 8002d52:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a74      	ldr	r2, [pc, #464]	; (8002f2c <HAL_FDCAN_Init+0x2ac>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d103      	bne.n	8002d66 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d5e:	4a74      	ldr	r2, [pc, #464]	; (8002f30 <HAL_FDCAN_Init+0x2b0>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7c1b      	ldrb	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d108      	bne.n	8002d80 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7c:	619a      	str	r2, [r3, #24]
 8002d7e:	e007      	b.n	8002d90 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7c5b      	ldrb	r3, [r3, #17]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d108      	bne.n	8002daa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da6:	619a      	str	r2, [r3, #24]
 8002da8:	e007      	b.n	8002dba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002db8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7c9b      	ldrb	r3, [r3, #18]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd0:	619a      	str	r2, [r3, #24]
 8002dd2:	e007      	b.n	8002de4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002de2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002e08:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0210 	bic.w	r2, r2, #16
 8002e18:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0204 	orr.w	r2, r2, #4
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e02c      	b.n	8002e8e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d028      	beq.n	8002e8e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d01c      	beq.n	8002e7e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e52:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0210 	orr.w	r2, r2, #16
 8002e62:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d110      	bne.n	8002e8e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0220 	orr.w	r2, r2, #32
 8002e7a:	619a      	str	r2, [r3, #24]
 8002e7c:	e007      	b.n	8002e8e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0220 	orr.w	r2, r2, #32
 8002e8c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e9e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ea6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002eb6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eb8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec2:	d115      	bne.n	8002ef0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ed2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002eec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f814 	bl	8002f34 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40006400 	.word	0x40006400
 8002f30:	40006500 	.word	0x40006500

08002f34 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002f3e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d103      	bne.n	8002f52 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f50:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f60:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	061a      	lsls	r2, r3, #24
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e005      	b.n	8002fd4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3f3      	bcc.n	8002fc8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	4000a400 	.word	0x4000a400
 8002ff4:	40006800 	.word	0x40006800

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003006:	e15a      	b.n	80032be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 814c 	beq.w	80032b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d005      	beq.n	8003038 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003034:	2b02      	cmp	r3, #2
 8003036:	d130      	bne.n	800309a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306e:	2201      	movs	r2, #1
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0201 	and.w	r2, r3, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d017      	beq.n	80030d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d123      	bne.n	800312a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	08da      	lsrs	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	6939      	ldr	r1, [r7, #16]
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0203 	and.w	r2, r3, #3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a6 	beq.w	80032b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316c:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <HAL_GPIO_Init+0x2e4>)
 800316e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003170:	4a5a      	ldr	r2, [pc, #360]	; (80032dc <HAL_GPIO_Init+0x2e4>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6613      	str	r3, [r2, #96]	; 0x60
 8003178:	4b58      	ldr	r3, [pc, #352]	; (80032dc <HAL_GPIO_Init+0x2e4>)
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003184:	4a56      	ldr	r2, [pc, #344]	; (80032e0 <HAL_GPIO_Init+0x2e8>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031ae:	d01f      	beq.n	80031f0 <HAL_GPIO_Init+0x1f8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a4c      	ldr	r2, [pc, #304]	; (80032e4 <HAL_GPIO_Init+0x2ec>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d019      	beq.n	80031ec <HAL_GPIO_Init+0x1f4>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a4b      	ldr	r2, [pc, #300]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_GPIO_Init+0x1f0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a4a      	ldr	r2, [pc, #296]	; (80032ec <HAL_GPIO_Init+0x2f4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00d      	beq.n	80031e4 <HAL_GPIO_Init+0x1ec>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a49      	ldr	r2, [pc, #292]	; (80032f0 <HAL_GPIO_Init+0x2f8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <HAL_GPIO_Init+0x1e8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a48      	ldr	r2, [pc, #288]	; (80032f4 <HAL_GPIO_Init+0x2fc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_GPIO_Init+0x1e4>
 80031d8:	2305      	movs	r3, #5
 80031da:	e00a      	b.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031dc:	2306      	movs	r3, #6
 80031de:	e008      	b.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031e0:	2304      	movs	r3, #4
 80031e2:	e006      	b.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031e4:	2303      	movs	r3, #3
 80031e6:	e004      	b.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e002      	b.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031f0:	2300      	movs	r3, #0
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	f002 0203 	and.w	r2, r2, #3
 80031f8:	0092      	lsls	r2, r2, #2
 80031fa:	4093      	lsls	r3, r2
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003202:	4937      	ldr	r1, [pc, #220]	; (80032e0 <HAL_GPIO_Init+0x2e8>)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	3302      	adds	r3, #2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_GPIO_Init+0x300>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003234:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <HAL_GPIO_Init+0x300>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800323a:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <HAL_GPIO_Init+0x300>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800325e:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <HAL_GPIO_Init+0x300>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_GPIO_Init+0x300>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <HAL_GPIO_Init+0x300>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_GPIO_Init+0x300>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032b2:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_GPIO_Init+0x300>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3301      	adds	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f ae9d 	bne.w	8003008 <HAL_GPIO_Init+0x10>
  }
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40010000 	.word	0x40010000
 80032e4:	48000400 	.word	0x48000400
 80032e8:	48000800 	.word	0x48000800
 80032ec:	48000c00 	.word	0x48000c00
 80032f0:	48001000 	.word	0x48001000
 80032f4:	48001400 	.word	0x48001400
 80032f8:	40010400 	.word	0x40010400

080032fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e001      	b.n	800331e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003348:	e002      	b.n	8003350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e081      	b.n	8003472 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff f8b4 	bl	80024f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e006      	b.n	80033e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d104      	bne.n	80033f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003408:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003418:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	d138      	bne.n	8003502 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800349a:	2302      	movs	r3, #2
 800349c:	e032      	b.n	8003504 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2224      	movs	r2, #36	; 0x24
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	d139      	bne.n	800359a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003530:	2302      	movs	r3, #2
 8003532:	e033      	b.n	800359c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2224      	movs	r2, #36	; 0x24
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003562:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b08b      	sub	sp, #44	; 0x2c
 80035ac:	af06      	add	r7, sp, #24
 80035ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0d7      	b.n	800376a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff f880 	bl	80026d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2203      	movs	r2, #3
 80035d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fec7 	bl	8006374 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	e04c      	b.n	8003686 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	3301      	adds	r3, #1
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	b298      	uxth	r0, r3
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	3336      	adds	r3, #54	; 0x36
 800362a:	4602      	mov	r2, r0
 800362c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	3303      	adds	r3, #3
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	3338      	adds	r3, #56	; 0x38
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	333c      	adds	r3, #60	; 0x3c
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3340      	adds	r3, #64	; 0x40
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	3301      	adds	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d3ad      	bcc.n	80035ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e044      	b.n	8003720 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	3301      	adds	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d3b5      	bcc.n	8003696 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	687e      	ldr	r6, [r7, #4]
 8003732:	466d      	mov	r5, sp
 8003734:	f106 0410 	add.w	r4, r6, #16
 8003738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	1d33      	adds	r3, r6, #4
 8003742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003744:	6838      	ldr	r0, [r7, #0]
 8003746:	f002 fe30 	bl	80063aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f805 	bl	8003772 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003772 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003796:	b29b      	uxth	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d141      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037d6:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d131      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e4:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ea:	4a46      	ldr	r2, [pc, #280]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f4:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037fc:	4a41      	ldr	r2, [pc, #260]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003804:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2232      	movs	r2, #50	; 0x32
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	0c9b      	lsrs	r3, r3, #18
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381a:	e002      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3b01      	subs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	d102      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f2      	bne.n	800381c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003842:	d158      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e057      	b.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384e:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003858:	e04d      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d141      	bne.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003862:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d131      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003876:	4a23      	ldr	r2, [pc, #140]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2232      	movs	r2, #50	; 0x32
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	0c9b      	lsrs	r3, r3, #18
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	e002      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ba:	d102      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d112      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e011      	b.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038e4:	e007      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40007000 	.word	0x40007000
 8003908:	20000008 	.word	0x20000008
 800390c:	431bde83 	.word	0x431bde83

08003910 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800391a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391e:	6093      	str	r3, [r2, #8]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40007000 	.word	0x40007000

08003930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e306      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d075      	beq.n	8003a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b97      	ldr	r3, [pc, #604]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d102      	bne.n	800396e <HAL_RCC_OscConfig+0x3e>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d002      	beq.n	8003974 <HAL_RCC_OscConfig+0x44>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b8d      	ldr	r3, [pc, #564]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x108>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d157      	bne.n	8003a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2e1      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x74>
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a84      	ldr	r2, [pc, #528]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7b      	ldr	r2, [pc, #492]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039c8:	4b78      	ldr	r3, [pc, #480]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a77      	ldr	r2, [pc, #476]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a74      	ldr	r2, [pc, #464]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7ff f838 	bl	8002a5c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7ff f834 	bl	8002a5c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e2a6      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a02:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xc0>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7ff f824 	bl	8002a5c <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7ff f820 	bl	8002a5c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e292      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2a:	4b60      	ldr	r3, [pc, #384]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0xe8>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d075      	beq.n	8003b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_OscConfig+0x136>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_OscConfig+0x13c>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11f      	bne.n	8003aac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_OscConfig+0x154>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e265      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	4946      	ldr	r1, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a98:	4b45      	ldr	r3, [pc, #276]	; (8003bb0 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe ff91 	bl	80029c4 <HAL_InitTick>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d043      	beq.n	8003b30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e251      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d023      	beq.n	8003afc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe ffcc 	bl	8002a5c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fe ffc8 	bl	8002a5c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e23a      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b31      	ldr	r3, [pc, #196]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	492d      	ldr	r1, [pc, #180]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
 8003afa:	e01a      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe ffa8 	bl	8002a5c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe ffa4 	bl	8002a5c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e216      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1e0>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d041      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fe ff81 	bl	8002a5c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fe ff7d 	bl	8002a5c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1ef      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ef      	beq.n	8003b5e <HAL_RCC_OscConfig+0x22e>
 8003b7e:	e020      	b.n	8003bc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fe ff64 	bl	8002a5c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b96:	e00d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fe ff60 	bl	8002a5c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d906      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1d2      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb4:	4b8c      	ldr	r3, [pc, #560]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ea      	bne.n	8003b98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80a6 	beq.w	8003d1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd4:	4b84      	ldr	r3, [pc, #528]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x2b6>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b7f      	ldr	r3, [pc, #508]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a7e      	ldr	r2, [pc, #504]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf6:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b79      	ldr	r3, [pc, #484]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a75      	ldr	r2, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe ff1d 	bl	8002a5c <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe ff19 	bl	8002a5c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e18b      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x4bc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_RCC_OscConfig+0x32e>
 8003c4c:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5c:	e024      	b.n	8003ca8 <HAL_RCC_OscConfig+0x378>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d110      	bne.n	8003c88 <HAL_RCC_OscConfig+0x358>
 8003c66:	4b60      	ldr	r3, [pc, #384]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	4a5e      	ldr	r2, [pc, #376]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	4a5a      	ldr	r2, [pc, #360]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x378>
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fe fed4 	bl	8002a5c <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fe fed0 	bl	8002a5c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e140      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cce:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ed      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x388>
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fe febd 	bl	8002a5c <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fe feb9 	bl	8002a5c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e129      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ed      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d0a:	7ffb      	ldrb	r3, [r7, #31]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d36:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fe fe8c 	bl	8002a5c <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d48:	f7fe fe88 	bl	8002a5c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0fa      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ef      	beq.n	8003d48 <HAL_RCC_OscConfig+0x418>
 8003d68:	e01b      	b.n	8003da2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fe6f 	bl	8002a5c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d82:	f7fe fe6b 	bl	8002a5c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0dd      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80d1 	beq.w	8003f4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	f000 808b 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d15e      	bne.n	8003e80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe fe45 	bl	8002a5c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe fe41 	bl	8002a5c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d905      	bls.n	8003df0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0b3      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ec      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dfc:	4b56      	ldr	r3, [pc, #344]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b56      	ldr	r3, [pc, #344]	; (8003f5c <HAL_RCC_OscConfig+0x62c>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6a11      	ldr	r1, [r2, #32]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e16:	0212      	lsls	r2, r2, #8
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0552      	lsls	r2, r2, #21
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e2a:	0852      	lsrs	r2, r2, #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	0652      	lsls	r2, r2, #25
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e36:	06d2      	lsls	r2, r2, #27
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	4947      	ldr	r1, [pc, #284]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4b45      	ldr	r3, [pc, #276]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a44      	ldr	r2, [pc, #272]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4c:	4b42      	ldr	r3, [pc, #264]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a41      	ldr	r2, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fe00 	bl	8002a5c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe fdfc 	bl	8002a5c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e06e      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e72:	4b39      	ldr	r3, [pc, #228]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x530>
 8003e7e:	e066      	b.n	8003f4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a34      	ldr	r2, [pc, #208]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e8c:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e98:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a2e      	ldr	r2, [pc, #184]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003e9e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fdd8 	bl	8002a5c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe fdd4 	bl	8002a5c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e046      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x580>
 8003ece:	e03e      	b.n	8003f4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e039      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <HAL_RCC_OscConfig+0x628>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d12c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	3b01      	subs	r3, #1
 8003efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d123      	bne.n	8003f4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d11b      	bne.n	8003f4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d113      	bne.n	8003f4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d109      	bne.n	8003f4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	3b01      	subs	r3, #1
 8003f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	019f800c 	.word	0x019f800c

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e11e      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f78:	4b91      	ldr	r3, [pc, #580]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d910      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b8e      	ldr	r3, [pc, #568]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 020f 	bic.w	r2, r3, #15
 8003f8e:	498c      	ldr	r1, [pc, #560]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b8a      	ldr	r3, [pc, #552]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e106      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d073      	beq.n	800409c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d129      	bne.n	8004010 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbc:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0f4      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fcc:	f000 f99e 	bl	800430c <RCC_GetSysClockFreqFromPLLSource>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4a7c      	ldr	r2, [pc, #496]	; (80041c8 <HAL_RCC_ClockConfig+0x268>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d93f      	bls.n	800405a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fda:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d033      	beq.n	800405a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d12f      	bne.n	800405a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ffa:	4b72      	ldr	r3, [pc, #456]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004002:	4a70      	ldr	r2, [pc, #448]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004008:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e024      	b.n	800405a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d107      	bne.n	8004028 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0c6      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	4b66      	ldr	r3, [pc, #408]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0be      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004038:	f000 f8ce 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800403c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <HAL_RCC_ClockConfig+0x268>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d909      	bls.n	800405a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004046:	4b5f      	ldr	r3, [pc, #380]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404e:	4a5d      	ldr	r2, [pc, #372]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004054:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b5a      	ldr	r3, [pc, #360]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4957      	ldr	r1, [pc, #348]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fe fcf6 	bl	8002a5c <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fe fcf2 	bl	8002a5c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e095      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b4e      	ldr	r3, [pc, #312]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d023      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b4:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a42      	ldr	r2, [pc, #264]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040cc:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040d4:	4a3b      	ldr	r2, [pc, #236]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4936      	ldr	r1, [pc, #216]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
 80040ee:	e008      	b.n	8004102 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d105      	bne.n	8004102 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040f6:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 80040fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004100:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004102:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d21d      	bcs.n	800414c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 020f 	bic.w	r2, r3, #15
 8004118:	4929      	ldr	r1, [pc, #164]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004120:	f7fe fc9c 	bl	8002a5c <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fe fc98 	bl	8002a5c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e03b      	b.n	80041b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_RCC_ClockConfig+0x260>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d1ed      	bne.n	8004128 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4917      	ldr	r1, [pc, #92]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	490f      	ldr	r1, [pc, #60]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800418a:	f000 f825 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <HAL_RCC_ClockConfig+0x264>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	490c      	ldr	r1, [pc, #48]	; (80041cc <HAL_RCC_ClockConfig+0x26c>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x270>)
 80041a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe fc08 	bl	80029c4 <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40021000 	.word	0x40021000
 80041c8:	04c4b400 	.word	0x04c4b400
 80041cc:	0800d024 	.word	0x0800d024
 80041d0:	20000008 	.word	0x20000008
 80041d4:	2000000c 	.word	0x2000000c

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041de:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d102      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ea:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e047      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041f0:	4b27      	ldr	r3, [pc, #156]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d102      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e03e      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004202:	4b23      	ldr	r3, [pc, #140]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d136      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3301      	adds	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d10c      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800422c:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_RCC_GetSysClockFreq+0xc0>)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004236:	68d2      	ldr	r2, [r2, #12]
 8004238:	0a12      	lsrs	r2, r2, #8
 800423a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	617b      	str	r3, [r7, #20]
      break;
 8004244:	e00c      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4a10      	ldr	r2, [pc, #64]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	0a12      	lsrs	r2, r2, #8
 8004254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
      break;
 800425e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0e5b      	lsrs	r3, r3, #25
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e001      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004280:	693b      	ldr	r3, [r7, #16]
}
 8004282:	4618      	mov	r0, r3
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	00f42400 	.word	0x00f42400
 8004298:	007a1200 	.word	0x007a1200

0800429c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4904      	ldr	r1, [pc, #16]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800d034 	.word	0x0800d034

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042e4:	f7ff ffda 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0adb      	lsrs	r3, r3, #11
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	0800d034 	.word	0x0800d034

0800430c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d10c      	bne.n	800434a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004330:	4a17      	ldr	r2, [pc, #92]	; (8004390 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433a:	68d2      	ldr	r2, [r2, #12]
 800433c:	0a12      	lsrs	r2, r2, #8
 800433e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
    break;
 8004348:	e00c      	b.n	8004364 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	4a0e      	ldr	r2, [pc, #56]	; (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004354:	68d2      	ldr	r2, [r2, #12]
 8004356:	0a12      	lsrs	r2, r2, #8
 8004358:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    break;
 8004362:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0e5b      	lsrs	r3, r3, #25
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800437e:	687b      	ldr	r3, [r7, #4]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40021000 	.word	0x40021000
 8004390:	007a1200 	.word	0x007a1200
 8004394:	00f42400 	.word	0x00f42400

08004398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a0:	2300      	movs	r3, #0
 80043a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8098 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10d      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4b40      	ldr	r3, [pc, #256]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	4a3f      	ldr	r2, [pc, #252]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6593      	str	r3, [r2, #88]	; 0x58
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043de:	2301      	movs	r3, #1
 80043e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e2:	4b3a      	ldr	r3, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a39      	ldr	r2, [pc, #228]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ee:	f7fe fb35 	bl	8002a5c <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f4:	e009      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7fe fb31 	bl	8002a5c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d902      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	74fb      	strb	r3, [r7, #19]
        break;
 8004408:	e005      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440a:	4b30      	ldr	r3, [pc, #192]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ef      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d159      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800441c:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01e      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	d019      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004444:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004454:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fe faf1 	bl	8002a5c <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447c:	e00b      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fe faed 	bl	8002a5c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	f241 3288 	movw	r2, #5000	; 0x1388
 800448c:	4293      	cmp	r3, r2
 800448e:	d902      	bls.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	74fb      	strb	r3, [r7, #19]
            break;
 8004494:	e006      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ec      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	74bb      	strb	r3, [r7, #18]
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d4:	7c7b      	ldrb	r3, [r7, #17]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4ba7      	ldr	r3, [pc, #668]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	4aa6      	ldr	r2, [pc, #664]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f2:	4ba1      	ldr	r3, [pc, #644]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f023 0203 	bic.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	499d      	ldr	r1, [pc, #628]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004514:	4b98      	ldr	r3, [pc, #608]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f023 020c 	bic.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4995      	ldr	r1, [pc, #596]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004536:	4b90      	ldr	r3, [pc, #576]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	498c      	ldr	r1, [pc, #560]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004558:	4b87      	ldr	r3, [pc, #540]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	4984      	ldr	r1, [pc, #528]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800457a:	4b7f      	ldr	r3, [pc, #508]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	497b      	ldr	r1, [pc, #492]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800459c:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4973      	ldr	r1, [pc, #460]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	496a      	ldr	r1, [pc, #424]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e0:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	4962      	ldr	r1, [pc, #392]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004602:	4b5d      	ldr	r3, [pc, #372]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	4959      	ldr	r1, [pc, #356]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004624:	4b54      	ldr	r3, [pc, #336]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	4951      	ldr	r1, [pc, #324]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d015      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004646:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4948      	ldr	r1, [pc, #288]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004664:	d105      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a43      	ldr	r2, [pc, #268]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004670:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467a:	2b00      	cmp	r3, #0
 800467c:	d015      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	493a      	ldr	r1, [pc, #232]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469c:	d105      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	4a35      	ldr	r2, [pc, #212]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d015      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	492c      	ldr	r1, [pc, #176]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d4:	d105      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d015      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	491e      	ldr	r1, [pc, #120]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470c:	d105      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004718:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d015      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	4910      	ldr	r1, [pc, #64]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004744:	d105      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004750:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d018      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	4902      	ldr	r1, [pc, #8]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	e001      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004778:	40021000 	.word	0x40021000
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004784:	4b21      	ldr	r3, [pc, #132]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800478a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	4918      	ldr	r1, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a12      	ldr	r2, [pc, #72]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	490a      	ldr	r1, [pc, #40]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a04      	ldr	r2, [pc, #16]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004800:	7cbb      	ldrb	r3, [r7, #18]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000

08004810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e09d      	b.n	800495e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d009      	beq.n	8004848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
 800483a:	e005      	b.n	8004848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fe9c 	bl	80025a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004888:	d902      	bls.n	8004890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e002      	b.n	8004896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800489e:	d007      	beq.n	80048b0 <HAL_SPI_Init+0xa0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	ea42 0103 	orr.w	r1, r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	f003 0204 	and.w	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800492c:	ea42 0103 	orr.w	r1, r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_SPI_Transmit+0x22>
 8004984:	2302      	movs	r3, #2
 8004986:	e158      	b.n	8004c3a <HAL_SPI_Transmit+0x2d4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004990:	f7fe f864 	bl	8002a5c <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
 80049a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049aa:	e13d      	b.n	8004c28 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Transmit+0x52>
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049bc:	e134      	b.n	8004c28 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2203      	movs	r2, #3
 80049c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a08:	d10f      	bne.n	8004a2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a50:	d94b      	bls.n	8004aea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Transmit+0xfa>
 8004a5a:	8afb      	ldrh	r3, [r7, #22]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d13e      	bne.n	8004ade <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a84:	e02b      	b.n	8004ade <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d112      	bne.n	8004aba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	881a      	ldrh	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	1c9a      	adds	r2, r3, #2
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ab8:	e011      	b.n	8004ade <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aba:	f7fd ffcf 	bl	8002a5c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d803      	bhi.n	8004ad2 <HAL_SPI_Transmit+0x16c>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d102      	bne.n	8004ad8 <HAL_SPI_Transmit+0x172>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004adc:	e0a4      	b.n	8004c28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ce      	bne.n	8004a86 <HAL_SPI_Transmit+0x120>
 8004ae8:	e07c      	b.n	8004be4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Transmit+0x192>
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d170      	bne.n	8004bda <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d912      	bls.n	8004b28 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	881a      	ldrh	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b02      	subs	r3, #2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b26:	e058      	b.n	8004bda <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b4e:	e044      	b.n	8004bda <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d12b      	bne.n	8004bb6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d912      	bls.n	8004b8e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b02      	subs	r3, #2
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b8c:	e025      	b.n	8004bda <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb4:	e011      	b.n	8004bda <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb6:	f7fd ff51 	bl	8002a5c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d803      	bhi.n	8004bce <HAL_SPI_Transmit+0x268>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d102      	bne.n	8004bd4 <HAL_SPI_Transmit+0x26e>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bd8:	e026      	b.n	8004c28 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1b5      	bne.n	8004b50 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fce3 	bl	80055b4 <SPI_EndRxTxTransaction>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e000      	b.n	8004c28 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b088      	sub	sp, #32
 8004c46:	af02      	add	r7, sp, #8
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5e:	d112      	bne.n	8004c86 <HAL_SPI_Receive+0x44>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f910 	bl	8004ea2 <HAL_SPI_TransmitReceive>
 8004c82:	4603      	mov	r3, r0
 8004c84:	e109      	b.n	8004e9a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_SPI_Receive+0x52>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e102      	b.n	8004e9a <HAL_SPI_Receive+0x258>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c9c:	f7fd fede 	bl	8002a5c <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cb2:	e0e9      	b.n	8004e88 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Receive+0x7e>
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc4:	e0e0      	b.n	8004e88 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d10:	d908      	bls.n	8004d24 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	e007      	b.n	8004d34 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3c:	d10f      	bne.n	8004d5e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d007      	beq.n	8004d7c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d84:	d867      	bhi.n	8004e56 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d86:	e030      	b.n	8004dea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d117      	bne.n	8004dc6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f103 020c 	add.w	r2, r3, #12
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dc4:	e011      	b.n	8004dea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc6:	f7fd fe49 	bl	8002a5c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d803      	bhi.n	8004dde <HAL_SPI_Receive+0x19c>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d102      	bne.n	8004de4 <HAL_SPI_Receive+0x1a2>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004de8:	e04e      	b.n	8004e88 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1c8      	bne.n	8004d88 <HAL_SPI_Receive+0x146>
 8004df6:	e034      	b.n	8004e62 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d115      	bne.n	8004e32 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	b292      	uxth	r2, r2
 8004e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e30:	e011      	b.n	8004e56 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e32:	f7fd fe13 	bl	8002a5c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d803      	bhi.n	8004e4a <HAL_SPI_Receive+0x208>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d102      	bne.n	8004e50 <HAL_SPI_Receive+0x20e>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e54:	e018      	b.n	8004e88 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ca      	bne.n	8004df8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fb4c 	bl	8005504 <SPI_EndRxTransaction>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
 8004e84:	e000      	b.n	8004e88 <HAL_SPI_Receive+0x246>
  }

error :
 8004e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b08a      	sub	sp, #40	; 0x28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x26>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e1fb      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x41e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed0:	f7fd fdc4 	bl	8002a5c <HAL_GetTick>
 8004ed4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004edc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ee4:	887b      	ldrh	r3, [r7, #2]
 8004ee6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eec:	7efb      	ldrb	r3, [r7, #27]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d00e      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x6e>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef8:	d106      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x66>
 8004f02:	7efb      	ldrb	r3, [r7, #27]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d003      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f0e:	e1cd      	b.n	80052ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x80>
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f28:	e1c0      	b.n	80052ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d003      	beq.n	8004f3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2205      	movs	r2, #5
 8004f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	887a      	ldrh	r2, [r7, #2]
 8004f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	887a      	ldrh	r2, [r7, #2]
 8004f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	887a      	ldrh	r2, [r7, #2]
 8004f6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f80:	d802      	bhi.n	8004f88 <HAL_SPI_TransmitReceive+0xe6>
 8004f82:	8a3b      	ldrh	r3, [r7, #16]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d908      	bls.n	8004f9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f96:	605a      	str	r2, [r3, #4]
 8004f98:	e007      	b.n	8004faa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d007      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd0:	d97c      	bls.n	80050cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x13e>
 8004fda:	8a7b      	ldrh	r3, [r7, #18]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d169      	bne.n	80050b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005004:	e056      	b.n	80050b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d11b      	bne.n	800504c <HAL_SPI_TransmitReceive+0x1aa>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_SPI_TransmitReceive+0x1aa>
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	2b01      	cmp	r3, #1
 8005022:	d113      	bne.n	800504c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	881a      	ldrh	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d11c      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x1f2>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	b292      	uxth	r2, r2
 8005072:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005090:	2301      	movs	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005094:	f7fd fce2 	bl	8002a5c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d807      	bhi.n	80050b4 <HAL_SPI_TransmitReceive+0x212>
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d003      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050b2:	e0fb      	b.n	80052ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1a3      	bne.n	8005006 <HAL_SPI_TransmitReceive+0x164>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d19d      	bne.n	8005006 <HAL_SPI_TransmitReceive+0x164>
 80050ca:	e0df      	b.n	800528c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x23a>
 80050d4:	8a7b      	ldrh	r3, [r7, #18]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	f040 80cb 	bne.w	8005272 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d912      	bls.n	800510c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	881a      	ldrh	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	1c9a      	adds	r2, r3, #2
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b02      	subs	r3, #2
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	87da      	strh	r2, [r3, #62]	; 0x3e
 800510a:	e0b2      	b.n	8005272 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005132:	e09e      	b.n	8005272 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d134      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x30a>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02f      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x30a>
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12c      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d912      	bls.n	8005182 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	1c9a      	adds	r2, r3, #2
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b02      	subs	r3, #2
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005180:	e012      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d148      	bne.n	800524c <HAL_SPI_TransmitReceive+0x3aa>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d042      	beq.n	800524c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d923      	bls.n	800521a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	b292      	uxth	r2, r2
 80051de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b02      	subs	r3, #2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d81f      	bhi.n	8005248 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	e016      	b.n	8005248 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f103 020c 	add.w	r2, r3, #12
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005248:	2301      	movs	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800524c:	f7fd fc06 	bl	8002a5c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005258:	429a      	cmp	r2, r3
 800525a:	d803      	bhi.n	8005264 <HAL_SPI_TransmitReceive+0x3c2>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d102      	bne.n	800526a <HAL_SPI_TransmitReceive+0x3c8>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005270:	e01c      	b.n	80052ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f af5b 	bne.w	8005134 <HAL_SPI_TransmitReceive+0x292>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	f47f af54 	bne.w	8005134 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f98f 	bl	80055b4 <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60
 80052a8:	e000      	b.n	80052ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80052aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052d8:	f7fd fbc0 	bl	8002a5c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052e8:	f7fd fbb8 	bl	8002a5c <HAL_GetTick>
 80052ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ee:	4b39      	ldr	r3, [pc, #228]	; (80053d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	015b      	lsls	r3, r3, #5
 80052f4:	0d1b      	lsrs	r3, r3, #20
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052fe:	e054      	b.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d050      	beq.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005308:	f7fd fba8 	bl	8002a5c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	d902      	bls.n	800531e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d13d      	bne.n	800539a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800532c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005336:	d111      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	d004      	beq.n	800534c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534a:	d107      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005364:	d10f      	bne.n	8005386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e017      	b.n	80053ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d19b      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000008 	.word	0x20000008

080053d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80053ea:	f7fd fb37 	bl	8002a5c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80053fa:	f7fd fb2f 	bl	8002a5c <HAL_GetTick>
 80053fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005408:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	00da      	lsls	r2, r3, #3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	0d1b      	lsrs	r3, r3, #20
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005420:	e060      	b.n	80054e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005428:	d107      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0x62>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005438:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d050      	beq.n	80054e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005442:	f7fd fb0b 	bl	8002a5c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544e:	429a      	cmp	r2, r3
 8005450:	d902      	bls.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d13d      	bne.n	80054d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005470:	d111      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547a:	d004      	beq.n	8005486 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005484:	d107      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549e:	d10f      	bne.n	80054c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e010      	b.n	80054f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d196      	bne.n	8005422 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3728      	adds	r7, #40	; 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000008 	.word	0x20000008

08005504 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005518:	d111      	bne.n	800553e <SPI_EndRxTransaction+0x3a>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005522:	d004      	beq.n	800552e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552c:	d107      	bne.n	800553e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2200      	movs	r2, #0
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7ff febd 	bl	80052c8 <SPI_WaitFlagStateUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e023      	b.n	80055ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800556c:	d11d      	bne.n	80055aa <SPI_EndRxTransaction+0xa6>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005576:	d004      	beq.n	8005582 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005580:	d113      	bne.n	80055aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff ff22 	bl	80053d8 <SPI_WaitFifoStateUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e000      	b.n	80055ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff ff03 	bl	80053d8 <SPI_WaitFifoStateUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e027      	b.n	8005638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2200      	movs	r2, #0
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fe68 	bl	80052c8 <SPI_WaitFlagStateUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e014      	b.n	8005638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fedc 	bl	80053d8 <SPI_WaitFifoStateUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e000      	b.n	8005638 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e042      	b.n	80056d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fc ffdd 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2224      	movs	r2, #36	; 0x24
 800566e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8c2 	bl	800580c <UART_SetConfig>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e022      	b.n	80056d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fbb2 	bl	8005e04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fc39 	bl	8005f48 <UART_CheckIdleState>
 80056d6:	4603      	mov	r3, r0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	f040 8083 	bne.w	8005802 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_UART_Transmit+0x28>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e07b      	b.n	8005804 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit+0x3a>
 8005716:	2302      	movs	r3, #2
 8005718:	e074      	b.n	8005804 <HAL_UART_Transmit+0x124>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2221      	movs	r2, #33	; 0x21
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005732:	f7fd f993 	bl	8002a5c <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005750:	d108      	bne.n	8005764 <HAL_UART_Transmit+0x84>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e003      	b.n	800576c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005774:	e02c      	b.n	80057d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fc2c 	bl	8005fde <UART_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e039      	b.n	8005804 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	3302      	adds	r3, #2
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e007      	b.n	80057be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1cc      	bne.n	8005776 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fbf9 	bl	8005fde <UART_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e006      	b.n	8005804 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
  }
}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800580c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005810:	b08c      	sub	sp, #48	; 0x30
 8005812:	af00      	add	r7, sp, #0
 8005814:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	431a      	orrs	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4313      	orrs	r3, r2
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4baa      	ldr	r3, [pc, #680]	; (8005ae4 <UART_SetConfig+0x2d8>)
 800583c:	4013      	ands	r3, r2
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005844:	430b      	orrs	r3, r1
 8005846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a9f      	ldr	r2, [pc, #636]	; (8005ae8 <UART_SetConfig+0x2dc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005874:	4313      	orrs	r3, r2
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005882:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800588c:	430b      	orrs	r3, r1
 800588e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	f023 010f 	bic.w	r1, r3, #15
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a90      	ldr	r2, [pc, #576]	; (8005aec <UART_SetConfig+0x2e0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d125      	bne.n	80058fc <UART_SetConfig+0xf0>
 80058b0:	4b8f      	ldr	r3, [pc, #572]	; (8005af0 <UART_SetConfig+0x2e4>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d81a      	bhi.n	80058f4 <UART_SetConfig+0xe8>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0xb8>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058da:	e116      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e2:	e112      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ea:	e10e      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e10a      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fa:	e106      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a7c      	ldr	r2, [pc, #496]	; (8005af4 <UART_SetConfig+0x2e8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d138      	bne.n	8005978 <UART_SetConfig+0x16c>
 8005906:	4b7a      	ldr	r3, [pc, #488]	; (8005af0 <UART_SetConfig+0x2e4>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b0c      	cmp	r3, #12
 8005912:	d82d      	bhi.n	8005970 <UART_SetConfig+0x164>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0x110>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005951 	.word	0x08005951
 8005920:	08005971 	.word	0x08005971
 8005924:	08005971 	.word	0x08005971
 8005928:	08005971 	.word	0x08005971
 800592c:	08005961 	.word	0x08005961
 8005930:	08005971 	.word	0x08005971
 8005934:	08005971 	.word	0x08005971
 8005938:	08005971 	.word	0x08005971
 800593c:	08005959 	.word	0x08005959
 8005940:	08005971 	.word	0x08005971
 8005944:	08005971 	.word	0x08005971
 8005948:	08005971 	.word	0x08005971
 800594c:	08005969 	.word	0x08005969
 8005950:	2300      	movs	r3, #0
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005956:	e0d8      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e0d4      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e0d0      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e0cc      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e0c8      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5e      	ldr	r2, [pc, #376]	; (8005af8 <UART_SetConfig+0x2ec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d125      	bne.n	80059ce <UART_SetConfig+0x1c2>
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <UART_SetConfig+0x2e4>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d016      	beq.n	80059be <UART_SetConfig+0x1b2>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d818      	bhi.n	80059c6 <UART_SetConfig+0x1ba>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d00a      	beq.n	80059ae <UART_SetConfig+0x1a2>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d814      	bhi.n	80059c6 <UART_SetConfig+0x1ba>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <UART_SetConfig+0x19a>
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d008      	beq.n	80059b6 <UART_SetConfig+0x1aa>
 80059a4:	e00f      	b.n	80059c6 <UART_SetConfig+0x1ba>
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ac:	e0ad      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80059ae:	2302      	movs	r3, #2
 80059b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b4:	e0a9      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80059b6:	2304      	movs	r3, #4
 80059b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059bc:	e0a5      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80059be:	2308      	movs	r3, #8
 80059c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c4:	e0a1      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80059c6:	2310      	movs	r3, #16
 80059c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059cc:	e09d      	b.n	8005b0a <UART_SetConfig+0x2fe>
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <UART_SetConfig+0x2f0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d125      	bne.n	8005a24 <UART_SetConfig+0x218>
 80059d8:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <UART_SetConfig+0x2e4>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059e2:	2bc0      	cmp	r3, #192	; 0xc0
 80059e4:	d016      	beq.n	8005a14 <UART_SetConfig+0x208>
 80059e6:	2bc0      	cmp	r3, #192	; 0xc0
 80059e8:	d818      	bhi.n	8005a1c <UART_SetConfig+0x210>
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d00a      	beq.n	8005a04 <UART_SetConfig+0x1f8>
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d814      	bhi.n	8005a1c <UART_SetConfig+0x210>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <UART_SetConfig+0x1f0>
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d008      	beq.n	8005a0c <UART_SetConfig+0x200>
 80059fa:	e00f      	b.n	8005a1c <UART_SetConfig+0x210>
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a02:	e082      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	e07e      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e07a      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	e076      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a22:	e072      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <UART_SetConfig+0x2f4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d12a      	bne.n	8005a84 <UART_SetConfig+0x278>
 8005a2e:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <UART_SetConfig+0x2e4>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3c:	d01a      	beq.n	8005a74 <UART_SetConfig+0x268>
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d81b      	bhi.n	8005a7c <UART_SetConfig+0x270>
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d00c      	beq.n	8005a64 <UART_SetConfig+0x258>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	d815      	bhi.n	8005a7c <UART_SetConfig+0x270>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <UART_SetConfig+0x250>
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d008      	beq.n	8005a6c <UART_SetConfig+0x260>
 8005a5a:	e00f      	b.n	8005a7c <UART_SetConfig+0x270>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a62:	e052      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a64:	2302      	movs	r3, #2
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6a:	e04e      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a72:	e04a      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7a:	e046      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a82:	e042      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <UART_SetConfig+0x2dc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d13a      	bne.n	8005b04 <UART_SetConfig+0x2f8>
 8005a8e:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <UART_SetConfig+0x2e4>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9c:	d01a      	beq.n	8005ad4 <UART_SetConfig+0x2c8>
 8005a9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aa2:	d81b      	bhi.n	8005adc <UART_SetConfig+0x2d0>
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa8:	d00c      	beq.n	8005ac4 <UART_SetConfig+0x2b8>
 8005aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aae:	d815      	bhi.n	8005adc <UART_SetConfig+0x2d0>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <UART_SetConfig+0x2b0>
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d008      	beq.n	8005acc <UART_SetConfig+0x2c0>
 8005aba:	e00f      	b.n	8005adc <UART_SetConfig+0x2d0>
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e022      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aca:	e01e      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad2:	e01a      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ada:	e016      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae2:	e012      	b.n	8005b0a <UART_SetConfig+0x2fe>
 8005ae4:	cfff69f3 	.word	0xcfff69f3
 8005ae8:	40008000 	.word	0x40008000
 8005aec:	40013800 	.word	0x40013800
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40004400 	.word	0x40004400
 8005af8:	40004800 	.word	0x40004800
 8005afc:	40004c00 	.word	0x40004c00
 8005b00:	40005000 	.word	0x40005000
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4aae      	ldr	r2, [pc, #696]	; (8005dc8 <UART_SetConfig+0x5bc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	f040 8097 	bne.w	8005c44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d823      	bhi.n	8005b66 <UART_SetConfig+0x35a>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x318>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b67 	.word	0x08005b67
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b57 	.word	0x08005b57
 8005b38:	08005b67 	.word	0x08005b67
 8005b3c:	08005b67 	.word	0x08005b67
 8005b40:	08005b67 	.word	0x08005b67
 8005b44:	08005b5f 	.word	0x08005b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fe fbb4 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b4e:	e010      	b.n	8005b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b50:	4b9e      	ldr	r3, [pc, #632]	; (8005dcc <UART_SetConfig+0x5c0>)
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b54:	e00d      	b.n	8005b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b56:	f7fe fb3f 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8130 	beq.w	8005dda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4a94      	ldr	r2, [pc, #592]	; (8005dd0 <UART_SetConfig+0x5c4>)
 8005b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d305      	bcc.n	8005baa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d903      	bls.n	8005bb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bb0:	e113      	b.n	8005dda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	60fa      	str	r2, [r7, #12]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	4a84      	ldr	r2, [pc, #528]	; (8005dd0 <UART_SetConfig+0x5c4>)
 8005bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bd4:	f7fb f880 	bl	8000cd8 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	020b      	lsls	r3, r1, #8
 8005bea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bee:	0202      	lsls	r2, r0, #8
 8005bf0:	6979      	ldr	r1, [r7, #20]
 8005bf2:	6849      	ldr	r1, [r1, #4]
 8005bf4:	0849      	lsrs	r1, r1, #1
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	eb12 0804 	adds.w	r8, r2, r4
 8005c00:	eb43 0905 	adc.w	r9, r3, r5
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	469a      	mov	sl, r3
 8005c0c:	4693      	mov	fp, r2
 8005c0e:	4652      	mov	r2, sl
 8005c10:	465b      	mov	r3, fp
 8005c12:	4640      	mov	r0, r8
 8005c14:	4649      	mov	r1, r9
 8005c16:	f7fb f85f 	bl	8000cd8 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4613      	mov	r3, r2
 8005c20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c28:	d308      	bcc.n	8005c3c <UART_SetConfig+0x430>
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c30:	d204      	bcs.n	8005c3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	60da      	str	r2, [r3, #12]
 8005c3a:	e0ce      	b.n	8005dda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c42:	e0ca      	b.n	8005dda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4c:	d166      	bne.n	8005d1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d827      	bhi.n	8005ca6 <UART_SetConfig+0x49a>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <UART_SetConfig+0x450>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c89 	.word	0x08005c89
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005ca7 	.word	0x08005ca7
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005ca7 	.word	0x08005ca7
 8005c74:	08005ca7 	.word	0x08005ca7
 8005c78:	08005ca7 	.word	0x08005ca7
 8005c7c:	08005c9f 	.word	0x08005c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fe fb18 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c86:	e014      	b.n	8005cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fe fb2a 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c8e:	e010      	b.n	8005cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c90:	4b4e      	ldr	r3, [pc, #312]	; (8005dcc <UART_SetConfig+0x5c0>)
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c94:	e00d      	b.n	8005cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c96:	f7fe fa9f 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c9c:	e009      	b.n	8005cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ca4:	e005      	b.n	8005cb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8090 	beq.w	8005dda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	4a44      	ldr	r2, [pc, #272]	; (8005dd0 <UART_SetConfig+0x5c4>)
 8005cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ccc:	005a      	lsls	r2, r3, #1
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	441a      	add	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b0f      	cmp	r3, #15
 8005ce4:	d916      	bls.n	8005d14 <UART_SetConfig+0x508>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cec:	d212      	bcs.n	8005d14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f023 030f 	bic.w	r3, r3, #15
 8005cf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	8bfb      	ldrh	r3, [r7, #30]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	8bfa      	ldrh	r2, [r7, #30]
 8005d10:	60da      	str	r2, [r3, #12]
 8005d12:	e062      	b.n	8005dda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d1a:	e05e      	b.n	8005dda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d828      	bhi.n	8005d76 <UART_SetConfig+0x56a>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <UART_SetConfig+0x520>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	08005d77 	.word	0x08005d77
 8005d3c:	08005d67 	.word	0x08005d67
 8005d40:	08005d77 	.word	0x08005d77
 8005d44:	08005d77 	.word	0x08005d77
 8005d48:	08005d77 	.word	0x08005d77
 8005d4c:	08005d6f 	.word	0x08005d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fe fab0 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8005d54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d56:	e014      	b.n	8005d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7fe fac2 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d5e:	e010      	b.n	8005d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <UART_SetConfig+0x5c0>)
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d64:	e00d      	b.n	8005d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d66:	f7fe fa37 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d6c:	e009      	b.n	8005d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d74:	e005      	b.n	8005d82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d80:	bf00      	nop
    }

    if (pclk != 0U)
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d028      	beq.n	8005dda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	4a10      	ldr	r2, [pc, #64]	; (8005dd0 <UART_SetConfig+0x5c4>)
 8005d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	441a      	add	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d910      	bls.n	8005dd4 <UART_SetConfig+0x5c8>
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db8:	d20c      	bcs.n	8005dd4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e009      	b.n	8005dda <UART_SetConfig+0x5ce>
 8005dc6:	bf00      	nop
 8005dc8:	40008000 	.word	0x40008000
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	0800d03c 	.word	0x0800d03c
      }
      else
      {
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2200      	movs	r2, #0
 8005df4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005df6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3730      	adds	r7, #48	; 0x30
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f02:	d10a      	bne.n	8005f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f58:	f7fc fd80 	bl	8002a5c <HAL_GetTick>
 8005f5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d10e      	bne.n	8005f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f82f 	bl	8005fde <UART_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e025      	b.n	8005fd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d10e      	bne.n	8005fb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f819 	bl	8005fde <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e00f      	b.n	8005fd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b09c      	sub	sp, #112	; 0x70
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fee:	e0a9      	b.n	8006144 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff6:	f000 80a5 	beq.w	8006144 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fc fd2f 	bl	8002a5c <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <UART_WaitOnFlagUntilTimeout+0x32>
 800600a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800600c:	2b00      	cmp	r3, #0
 800600e:	d140      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800601e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006020:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006024:	667b      	str	r3, [r7, #100]	; 0x64
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006030:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006034:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800603c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e6      	bne.n	8006010 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	663b      	str	r3, [r7, #96]	; 0x60
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006062:	64ba      	str	r2, [r7, #72]	; 0x48
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e069      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d051      	beq.n	8006144 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ae:	d149      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
 80060da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	613b      	str	r3, [r7, #16]
   return(result);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	66bb      	str	r3, [r7, #104]	; 0x68
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800610c:	623a      	str	r2, [r7, #32]
 800610e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	6a3a      	ldr	r2, [r7, #32]
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	61bb      	str	r3, [r7, #24]
   return(result);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e5      	bne.n	80060ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2220      	movs	r2, #32
 8006134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e010      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	429a      	cmp	r2, r3
 8006160:	f43f af46 	beq.w	8005ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3770      	adds	r7, #112	; 0x70
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_UARTEx_DisableFifoMode+0x16>
 8006180:	2302      	movs	r3, #2
 8006182:	e027      	b.n	80061d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2224      	movs	r2, #36	; 0x24
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0201 	bic.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e02d      	b.n	8006254 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2224      	movs	r2, #36	; 0x24
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f84f 	bl	80062d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006270:	2302      	movs	r3, #2
 8006272:	e02d      	b.n	80062d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2224      	movs	r2, #36	; 0x24
 8006280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f811 	bl	80062d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062f8:	e031      	b.n	800635e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062fa:	2308      	movs	r3, #8
 80062fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062fe:	2308      	movs	r3, #8
 8006300:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	0e5b      	lsrs	r3, r3, #25
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	0f5b      	lsrs	r3, r3, #29
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	7b3a      	ldrb	r2, [r7, #12]
 8006326:	4911      	ldr	r1, [pc, #68]	; (800636c <UARTEx_SetNbDataToProcess+0x94>)
 8006328:	5c8a      	ldrb	r2, [r1, r2]
 800632a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800632e:	7b3a      	ldrb	r2, [r7, #12]
 8006330:	490f      	ldr	r1, [pc, #60]	; (8006370 <UARTEx_SetNbDataToProcess+0x98>)
 8006332:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006334:	fb93 f3f2 	sdiv	r3, r3, r2
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	7b7a      	ldrb	r2, [r7, #13]
 8006344:	4909      	ldr	r1, [pc, #36]	; (800636c <UARTEx_SetNbDataToProcess+0x94>)
 8006346:	5c8a      	ldrb	r2, [r1, r2]
 8006348:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800634c:	7b7a      	ldrb	r2, [r7, #13]
 800634e:	4908      	ldr	r1, [pc, #32]	; (8006370 <UARTEx_SetNbDataToProcess+0x98>)
 8006350:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006352:	fb93 f3f2 	sdiv	r3, r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	0800d054 	.word	0x0800d054
 8006370:	0800d05c 	.word	0x0800d05c

08006374 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800637c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006380:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	b29b      	uxth	r3, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	b29b      	uxth	r3, r3
 8006392:	4013      	ands	r3, r2
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063aa:	b084      	sub	sp, #16
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	f107 0014 	add.w	r0, r7, #20
 80063b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	b004      	add	sp, #16
 80063ea:	4770      	bx	lr

080063ec <__cvt>:
 80063ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	ec55 4b10 	vmov	r4, r5, d0
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	460e      	mov	r6, r1
 80063f8:	4619      	mov	r1, r3
 80063fa:	462b      	mov	r3, r5
 80063fc:	bfbb      	ittet	lt
 80063fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006402:	461d      	movlt	r5, r3
 8006404:	2300      	movge	r3, #0
 8006406:	232d      	movlt	r3, #45	; 0x2d
 8006408:	700b      	strb	r3, [r1, #0]
 800640a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800640c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006410:	4691      	mov	r9, r2
 8006412:	f023 0820 	bic.w	r8, r3, #32
 8006416:	bfbc      	itt	lt
 8006418:	4622      	movlt	r2, r4
 800641a:	4614      	movlt	r4, r2
 800641c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006420:	d005      	beq.n	800642e <__cvt+0x42>
 8006422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006426:	d100      	bne.n	800642a <__cvt+0x3e>
 8006428:	3601      	adds	r6, #1
 800642a:	2102      	movs	r1, #2
 800642c:	e000      	b.n	8006430 <__cvt+0x44>
 800642e:	2103      	movs	r1, #3
 8006430:	ab03      	add	r3, sp, #12
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	ab02      	add	r3, sp, #8
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	ec45 4b10 	vmov	d0, r4, r5
 800643c:	4653      	mov	r3, sl
 800643e:	4632      	mov	r2, r6
 8006440:	f001 f98a 	bl	8007758 <_dtoa_r>
 8006444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006448:	4607      	mov	r7, r0
 800644a:	d102      	bne.n	8006452 <__cvt+0x66>
 800644c:	f019 0f01 	tst.w	r9, #1
 8006450:	d022      	beq.n	8006498 <__cvt+0xac>
 8006452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006456:	eb07 0906 	add.w	r9, r7, r6
 800645a:	d110      	bne.n	800647e <__cvt+0x92>
 800645c:	783b      	ldrb	r3, [r7, #0]
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	d10a      	bne.n	8006478 <__cvt+0x8c>
 8006462:	2200      	movs	r2, #0
 8006464:	2300      	movs	r3, #0
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7fa fb55 	bl	8000b18 <__aeabi_dcmpeq>
 800646e:	b918      	cbnz	r0, 8006478 <__cvt+0x8c>
 8006470:	f1c6 0601 	rsb	r6, r6, #1
 8006474:	f8ca 6000 	str.w	r6, [sl]
 8006478:	f8da 3000 	ldr.w	r3, [sl]
 800647c:	4499      	add	r9, r3
 800647e:	2200      	movs	r2, #0
 8006480:	2300      	movs	r3, #0
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7fa fb47 	bl	8000b18 <__aeabi_dcmpeq>
 800648a:	b108      	cbz	r0, 8006490 <__cvt+0xa4>
 800648c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006490:	2230      	movs	r2, #48	; 0x30
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	454b      	cmp	r3, r9
 8006496:	d307      	bcc.n	80064a8 <__cvt+0xbc>
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800649c:	1bdb      	subs	r3, r3, r7
 800649e:	4638      	mov	r0, r7
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	b004      	add	sp, #16
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	1c59      	adds	r1, r3, #1
 80064aa:	9103      	str	r1, [sp, #12]
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e7f0      	b.n	8006492 <__cvt+0xa6>

080064b0 <__exponent>:
 80064b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b2:	4603      	mov	r3, r0
 80064b4:	2900      	cmp	r1, #0
 80064b6:	bfb8      	it	lt
 80064b8:	4249      	neglt	r1, r1
 80064ba:	f803 2b02 	strb.w	r2, [r3], #2
 80064be:	bfb4      	ite	lt
 80064c0:	222d      	movlt	r2, #45	; 0x2d
 80064c2:	222b      	movge	r2, #43	; 0x2b
 80064c4:	2909      	cmp	r1, #9
 80064c6:	7042      	strb	r2, [r0, #1]
 80064c8:	dd2a      	ble.n	8006520 <__exponent+0x70>
 80064ca:	f10d 0207 	add.w	r2, sp, #7
 80064ce:	4617      	mov	r7, r2
 80064d0:	260a      	movs	r6, #10
 80064d2:	4694      	mov	ip, r2
 80064d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80064d8:	fb06 1415 	mls	r4, r6, r5, r1
 80064dc:	3430      	adds	r4, #48	; 0x30
 80064de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80064e2:	460c      	mov	r4, r1
 80064e4:	2c63      	cmp	r4, #99	; 0x63
 80064e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80064ea:	4629      	mov	r1, r5
 80064ec:	dcf1      	bgt.n	80064d2 <__exponent+0x22>
 80064ee:	3130      	adds	r1, #48	; 0x30
 80064f0:	f1ac 0402 	sub.w	r4, ip, #2
 80064f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80064f8:	1c41      	adds	r1, r0, #1
 80064fa:	4622      	mov	r2, r4
 80064fc:	42ba      	cmp	r2, r7
 80064fe:	d30a      	bcc.n	8006516 <__exponent+0x66>
 8006500:	f10d 0209 	add.w	r2, sp, #9
 8006504:	eba2 020c 	sub.w	r2, r2, ip
 8006508:	42bc      	cmp	r4, r7
 800650a:	bf88      	it	hi
 800650c:	2200      	movhi	r2, #0
 800650e:	4413      	add	r3, r2
 8006510:	1a18      	subs	r0, r3, r0
 8006512:	b003      	add	sp, #12
 8006514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006516:	f812 5b01 	ldrb.w	r5, [r2], #1
 800651a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800651e:	e7ed      	b.n	80064fc <__exponent+0x4c>
 8006520:	2330      	movs	r3, #48	; 0x30
 8006522:	3130      	adds	r1, #48	; 0x30
 8006524:	7083      	strb	r3, [r0, #2]
 8006526:	70c1      	strb	r1, [r0, #3]
 8006528:	1d03      	adds	r3, r0, #4
 800652a:	e7f1      	b.n	8006510 <__exponent+0x60>

0800652c <_printf_float>:
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	ed2d 8b02 	vpush	{d8}
 8006534:	b08d      	sub	sp, #52	; 0x34
 8006536:	460c      	mov	r4, r1
 8006538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800653c:	4616      	mov	r6, r2
 800653e:	461f      	mov	r7, r3
 8006540:	4605      	mov	r5, r0
 8006542:	f001 f801 	bl	8007548 <_localeconv_r>
 8006546:	f8d0 a000 	ldr.w	sl, [r0]
 800654a:	4650      	mov	r0, sl
 800654c:	f7f9 feb8 	bl	80002c0 <strlen>
 8006550:	2300      	movs	r3, #0
 8006552:	930a      	str	r3, [sp, #40]	; 0x28
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	f8d8 3000 	ldr.w	r3, [r8]
 800655c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006560:	3307      	adds	r3, #7
 8006562:	f023 0307 	bic.w	r3, r3, #7
 8006566:	f103 0208 	add.w	r2, r3, #8
 800656a:	f8c8 2000 	str.w	r2, [r8]
 800656e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	f8cd 8018 	str.w	r8, [sp, #24]
 800657c:	ee08 0a10 	vmov	s16, r0
 8006580:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006588:	4b9e      	ldr	r3, [pc, #632]	; (8006804 <_printf_float+0x2d8>)
 800658a:	f04f 32ff 	mov.w	r2, #4294967295
 800658e:	f7fa faf5 	bl	8000b7c <__aeabi_dcmpun>
 8006592:	bb88      	cbnz	r0, 80065f8 <_printf_float+0xcc>
 8006594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006598:	4b9a      	ldr	r3, [pc, #616]	; (8006804 <_printf_float+0x2d8>)
 800659a:	f04f 32ff 	mov.w	r2, #4294967295
 800659e:	f7fa facf 	bl	8000b40 <__aeabi_dcmple>
 80065a2:	bb48      	cbnz	r0, 80065f8 <_printf_float+0xcc>
 80065a4:	2200      	movs	r2, #0
 80065a6:	2300      	movs	r3, #0
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fabe 	bl	8000b2c <__aeabi_dcmplt>
 80065b0:	b110      	cbz	r0, 80065b8 <_printf_float+0x8c>
 80065b2:	232d      	movs	r3, #45	; 0x2d
 80065b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b8:	4a93      	ldr	r2, [pc, #588]	; (8006808 <_printf_float+0x2dc>)
 80065ba:	4b94      	ldr	r3, [pc, #592]	; (800680c <_printf_float+0x2e0>)
 80065bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065c0:	bf94      	ite	ls
 80065c2:	4690      	movls	r8, r2
 80065c4:	4698      	movhi	r8, r3
 80065c6:	2303      	movs	r3, #3
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	f023 0304 	bic.w	r3, r3, #4
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	f04f 0900 	mov.w	r9, #0
 80065d6:	9700      	str	r7, [sp, #0]
 80065d8:	4633      	mov	r3, r6
 80065da:	aa0b      	add	r2, sp, #44	; 0x2c
 80065dc:	4621      	mov	r1, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f9da 	bl	8006998 <_printf_common>
 80065e4:	3001      	adds	r0, #1
 80065e6:	f040 8090 	bne.w	800670a <_printf_float+0x1de>
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	b00d      	add	sp, #52	; 0x34
 80065f0:	ecbd 8b02 	vpop	{d8}
 80065f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	4640      	mov	r0, r8
 80065fe:	4649      	mov	r1, r9
 8006600:	f7fa fabc 	bl	8000b7c <__aeabi_dcmpun>
 8006604:	b140      	cbz	r0, 8006618 <_printf_float+0xec>
 8006606:	464b      	mov	r3, r9
 8006608:	2b00      	cmp	r3, #0
 800660a:	bfbc      	itt	lt
 800660c:	232d      	movlt	r3, #45	; 0x2d
 800660e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006612:	4a7f      	ldr	r2, [pc, #508]	; (8006810 <_printf_float+0x2e4>)
 8006614:	4b7f      	ldr	r3, [pc, #508]	; (8006814 <_printf_float+0x2e8>)
 8006616:	e7d1      	b.n	80065bc <_printf_float+0x90>
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800661e:	9206      	str	r2, [sp, #24]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	d13f      	bne.n	80066a4 <_printf_float+0x178>
 8006624:	2306      	movs	r3, #6
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	9b05      	ldr	r3, [sp, #20]
 800662a:	6861      	ldr	r1, [r4, #4]
 800662c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006630:	2300      	movs	r3, #0
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	ab0a      	add	r3, sp, #40	; 0x28
 8006636:	e9cd b301 	strd	fp, r3, [sp, #4]
 800663a:	ab09      	add	r3, sp, #36	; 0x24
 800663c:	ec49 8b10 	vmov	d0, r8, r9
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff fecf 	bl	80063ec <__cvt>
 800664e:	9b06      	ldr	r3, [sp, #24]
 8006650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006652:	2b47      	cmp	r3, #71	; 0x47
 8006654:	4680      	mov	r8, r0
 8006656:	d108      	bne.n	800666a <_printf_float+0x13e>
 8006658:	1cc8      	adds	r0, r1, #3
 800665a:	db02      	blt.n	8006662 <_printf_float+0x136>
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	4299      	cmp	r1, r3
 8006660:	dd41      	ble.n	80066e6 <_printf_float+0x1ba>
 8006662:	f1ab 0302 	sub.w	r3, fp, #2
 8006666:	fa5f fb83 	uxtb.w	fp, r3
 800666a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800666e:	d820      	bhi.n	80066b2 <_printf_float+0x186>
 8006670:	3901      	subs	r1, #1
 8006672:	465a      	mov	r2, fp
 8006674:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006678:	9109      	str	r1, [sp, #36]	; 0x24
 800667a:	f7ff ff19 	bl	80064b0 <__exponent>
 800667e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006680:	1813      	adds	r3, r2, r0
 8006682:	2a01      	cmp	r2, #1
 8006684:	4681      	mov	r9, r0
 8006686:	6123      	str	r3, [r4, #16]
 8006688:	dc02      	bgt.n	8006690 <_printf_float+0x164>
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	07d2      	lsls	r2, r2, #31
 800668e:	d501      	bpl.n	8006694 <_printf_float+0x168>
 8006690:	3301      	adds	r3, #1
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006698:	2b00      	cmp	r3, #0
 800669a:	d09c      	beq.n	80065d6 <_printf_float+0xaa>
 800669c:	232d      	movs	r3, #45	; 0x2d
 800669e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a2:	e798      	b.n	80065d6 <_printf_float+0xaa>
 80066a4:	9a06      	ldr	r2, [sp, #24]
 80066a6:	2a47      	cmp	r2, #71	; 0x47
 80066a8:	d1be      	bne.n	8006628 <_printf_float+0xfc>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1bc      	bne.n	8006628 <_printf_float+0xfc>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7b9      	b.n	8006626 <_printf_float+0xfa>
 80066b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066b6:	d118      	bne.n	80066ea <_printf_float+0x1be>
 80066b8:	2900      	cmp	r1, #0
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	dd0b      	ble.n	80066d6 <_printf_float+0x1aa>
 80066be:	6121      	str	r1, [r4, #16]
 80066c0:	b913      	cbnz	r3, 80066c8 <_printf_float+0x19c>
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	07d0      	lsls	r0, r2, #31
 80066c6:	d502      	bpl.n	80066ce <_printf_float+0x1a2>
 80066c8:	3301      	adds	r3, #1
 80066ca:	440b      	add	r3, r1
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80066d0:	f04f 0900 	mov.w	r9, #0
 80066d4:	e7de      	b.n	8006694 <_printf_float+0x168>
 80066d6:	b913      	cbnz	r3, 80066de <_printf_float+0x1b2>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	07d2      	lsls	r2, r2, #31
 80066dc:	d501      	bpl.n	80066e2 <_printf_float+0x1b6>
 80066de:	3302      	adds	r3, #2
 80066e0:	e7f4      	b.n	80066cc <_printf_float+0x1a0>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7f2      	b.n	80066cc <_printf_float+0x1a0>
 80066e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ec:	4299      	cmp	r1, r3
 80066ee:	db05      	blt.n	80066fc <_printf_float+0x1d0>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	6121      	str	r1, [r4, #16]
 80066f4:	07d8      	lsls	r0, r3, #31
 80066f6:	d5ea      	bpl.n	80066ce <_printf_float+0x1a2>
 80066f8:	1c4b      	adds	r3, r1, #1
 80066fa:	e7e7      	b.n	80066cc <_printf_float+0x1a0>
 80066fc:	2900      	cmp	r1, #0
 80066fe:	bfd4      	ite	le
 8006700:	f1c1 0202 	rsble	r2, r1, #2
 8006704:	2201      	movgt	r2, #1
 8006706:	4413      	add	r3, r2
 8006708:	e7e0      	b.n	80066cc <_printf_float+0x1a0>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	055a      	lsls	r2, r3, #21
 800670e:	d407      	bmi.n	8006720 <_printf_float+0x1f4>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	4642      	mov	r2, r8
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d12c      	bne.n	8006778 <_printf_float+0x24c>
 800671e:	e764      	b.n	80065ea <_printf_float+0xbe>
 8006720:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006724:	f240 80e0 	bls.w	80068e8 <_printf_float+0x3bc>
 8006728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	f7fa f9f2 	bl	8000b18 <__aeabi_dcmpeq>
 8006734:	2800      	cmp	r0, #0
 8006736:	d034      	beq.n	80067a2 <_printf_float+0x276>
 8006738:	4a37      	ldr	r2, [pc, #220]	; (8006818 <_printf_float+0x2ec>)
 800673a:	2301      	movs	r3, #1
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af51 	beq.w	80065ea <_printf_float+0xbe>
 8006748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674c:	429a      	cmp	r2, r3
 800674e:	db02      	blt.n	8006756 <_printf_float+0x22a>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	07d8      	lsls	r0, r3, #31
 8006754:	d510      	bpl.n	8006778 <_printf_float+0x24c>
 8006756:	ee18 3a10 	vmov	r3, s16
 800675a:	4652      	mov	r2, sl
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af41 	beq.w	80065ea <_printf_float+0xbe>
 8006768:	f04f 0800 	mov.w	r8, #0
 800676c:	f104 091a 	add.w	r9, r4, #26
 8006770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006772:	3b01      	subs	r3, #1
 8006774:	4543      	cmp	r3, r8
 8006776:	dc09      	bgt.n	800678c <_printf_float+0x260>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	079b      	lsls	r3, r3, #30
 800677c:	f100 8107 	bmi.w	800698e <_printf_float+0x462>
 8006780:	68e0      	ldr	r0, [r4, #12]
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	4298      	cmp	r0, r3
 8006786:	bfb8      	it	lt
 8006788:	4618      	movlt	r0, r3
 800678a:	e730      	b.n	80065ee <_printf_float+0xc2>
 800678c:	2301      	movs	r3, #1
 800678e:	464a      	mov	r2, r9
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f af27 	beq.w	80065ea <_printf_float+0xbe>
 800679c:	f108 0801 	add.w	r8, r8, #1
 80067a0:	e7e6      	b.n	8006770 <_printf_float+0x244>
 80067a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dc39      	bgt.n	800681c <_printf_float+0x2f0>
 80067a8:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <_printf_float+0x2ec>)
 80067aa:	2301      	movs	r3, #1
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f af19 	beq.w	80065ea <_printf_float+0xbe>
 80067b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067bc:	4313      	orrs	r3, r2
 80067be:	d102      	bne.n	80067c6 <_printf_float+0x29a>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	07d9      	lsls	r1, r3, #31
 80067c4:	d5d8      	bpl.n	8006778 <_printf_float+0x24c>
 80067c6:	ee18 3a10 	vmov	r3, s16
 80067ca:	4652      	mov	r2, sl
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af09 	beq.w	80065ea <_printf_float+0xbe>
 80067d8:	f04f 0900 	mov.w	r9, #0
 80067dc:	f104 0a1a 	add.w	sl, r4, #26
 80067e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e2:	425b      	negs	r3, r3
 80067e4:	454b      	cmp	r3, r9
 80067e6:	dc01      	bgt.n	80067ec <_printf_float+0x2c0>
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	e792      	b.n	8006712 <_printf_float+0x1e6>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4652      	mov	r2, sl
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f aef7 	beq.w	80065ea <_printf_float+0xbe>
 80067fc:	f109 0901 	add.w	r9, r9, #1
 8006800:	e7ee      	b.n	80067e0 <_printf_float+0x2b4>
 8006802:	bf00      	nop
 8006804:	7fefffff 	.word	0x7fefffff
 8006808:	0800d064 	.word	0x0800d064
 800680c:	0800d068 	.word	0x0800d068
 8006810:	0800d06c 	.word	0x0800d06c
 8006814:	0800d070 	.word	0x0800d070
 8006818:	0800d074 	.word	0x0800d074
 800681c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006820:	429a      	cmp	r2, r3
 8006822:	bfa8      	it	ge
 8006824:	461a      	movge	r2, r3
 8006826:	2a00      	cmp	r2, #0
 8006828:	4691      	mov	r9, r2
 800682a:	dc37      	bgt.n	800689c <_printf_float+0x370>
 800682c:	f04f 0b00 	mov.w	fp, #0
 8006830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006834:	f104 021a 	add.w	r2, r4, #26
 8006838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800683a:	9305      	str	r3, [sp, #20]
 800683c:	eba3 0309 	sub.w	r3, r3, r9
 8006840:	455b      	cmp	r3, fp
 8006842:	dc33      	bgt.n	80068ac <_printf_float+0x380>
 8006844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006848:	429a      	cmp	r2, r3
 800684a:	db3b      	blt.n	80068c4 <_printf_float+0x398>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	07da      	lsls	r2, r3, #31
 8006850:	d438      	bmi.n	80068c4 <_printf_float+0x398>
 8006852:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006856:	eba2 0903 	sub.w	r9, r2, r3
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	4591      	cmp	r9, r2
 8006860:	bfa8      	it	ge
 8006862:	4691      	movge	r9, r2
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	dc35      	bgt.n	80068d6 <_printf_float+0x3aa>
 800686a:	f04f 0800 	mov.w	r8, #0
 800686e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006872:	f104 0a1a 	add.w	sl, r4, #26
 8006876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	eba3 0309 	sub.w	r3, r3, r9
 8006880:	4543      	cmp	r3, r8
 8006882:	f77f af79 	ble.w	8006778 <_printf_float+0x24c>
 8006886:	2301      	movs	r3, #1
 8006888:	4652      	mov	r2, sl
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	f43f aeaa 	beq.w	80065ea <_printf_float+0xbe>
 8006896:	f108 0801 	add.w	r8, r8, #1
 800689a:	e7ec      	b.n	8006876 <_printf_float+0x34a>
 800689c:	4613      	mov	r3, r2
 800689e:	4631      	mov	r1, r6
 80068a0:	4642      	mov	r2, r8
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	d1c0      	bne.n	800682c <_printf_float+0x300>
 80068aa:	e69e      	b.n	80065ea <_printf_float+0xbe>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	9205      	str	r2, [sp, #20]
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f ae97 	beq.w	80065ea <_printf_float+0xbe>
 80068bc:	9a05      	ldr	r2, [sp, #20]
 80068be:	f10b 0b01 	add.w	fp, fp, #1
 80068c2:	e7b9      	b.n	8006838 <_printf_float+0x30c>
 80068c4:	ee18 3a10 	vmov	r3, s16
 80068c8:	4652      	mov	r2, sl
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1be      	bne.n	8006852 <_printf_float+0x326>
 80068d4:	e689      	b.n	80065ea <_printf_float+0xbe>
 80068d6:	9a05      	ldr	r2, [sp, #20]
 80068d8:	464b      	mov	r3, r9
 80068da:	4442      	add	r2, r8
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	d1c1      	bne.n	800686a <_printf_float+0x33e>
 80068e6:	e680      	b.n	80065ea <_printf_float+0xbe>
 80068e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ea:	2a01      	cmp	r2, #1
 80068ec:	dc01      	bgt.n	80068f2 <_printf_float+0x3c6>
 80068ee:	07db      	lsls	r3, r3, #31
 80068f0:	d53a      	bpl.n	8006968 <_printf_float+0x43c>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4642      	mov	r2, r8
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f ae74 	beq.w	80065ea <_printf_float+0xbe>
 8006902:	ee18 3a10 	vmov	r3, s16
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f ae6b 	beq.w	80065ea <_printf_float+0xbe>
 8006914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006918:	2200      	movs	r2, #0
 800691a:	2300      	movs	r3, #0
 800691c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006920:	f7fa f8fa 	bl	8000b18 <__aeabi_dcmpeq>
 8006924:	b9d8      	cbnz	r0, 800695e <_printf_float+0x432>
 8006926:	f10a 33ff 	add.w	r3, sl, #4294967295
 800692a:	f108 0201 	add.w	r2, r8, #1
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d10e      	bne.n	8006956 <_printf_float+0x42a>
 8006938:	e657      	b.n	80065ea <_printf_float+0xbe>
 800693a:	2301      	movs	r3, #1
 800693c:	4652      	mov	r2, sl
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae50 	beq.w	80065ea <_printf_float+0xbe>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	3b01      	subs	r3, #1
 8006952:	4543      	cmp	r3, r8
 8006954:	dcf1      	bgt.n	800693a <_printf_float+0x40e>
 8006956:	464b      	mov	r3, r9
 8006958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800695c:	e6da      	b.n	8006714 <_printf_float+0x1e8>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	f104 0a1a 	add.w	sl, r4, #26
 8006966:	e7f2      	b.n	800694e <_printf_float+0x422>
 8006968:	2301      	movs	r3, #1
 800696a:	4642      	mov	r2, r8
 800696c:	e7df      	b.n	800692e <_printf_float+0x402>
 800696e:	2301      	movs	r3, #1
 8006970:	464a      	mov	r2, r9
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f ae36 	beq.w	80065ea <_printf_float+0xbe>
 800697e:	f108 0801 	add.w	r8, r8, #1
 8006982:	68e3      	ldr	r3, [r4, #12]
 8006984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006986:	1a5b      	subs	r3, r3, r1
 8006988:	4543      	cmp	r3, r8
 800698a:	dcf0      	bgt.n	800696e <_printf_float+0x442>
 800698c:	e6f8      	b.n	8006780 <_printf_float+0x254>
 800698e:	f04f 0800 	mov.w	r8, #0
 8006992:	f104 0919 	add.w	r9, r4, #25
 8006996:	e7f4      	b.n	8006982 <_printf_float+0x456>

08006998 <_printf_common>:
 8006998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	4616      	mov	r6, r2
 800699e:	4699      	mov	r9, r3
 80069a0:	688a      	ldr	r2, [r1, #8]
 80069a2:	690b      	ldr	r3, [r1, #16]
 80069a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bfb8      	it	lt
 80069ac:	4613      	movlt	r3, r2
 80069ae:	6033      	str	r3, [r6, #0]
 80069b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069b4:	4607      	mov	r7, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	b10a      	cbz	r2, 80069be <_printf_common+0x26>
 80069ba:	3301      	adds	r3, #1
 80069bc:	6033      	str	r3, [r6, #0]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	0699      	lsls	r1, r3, #26
 80069c2:	bf42      	ittt	mi
 80069c4:	6833      	ldrmi	r3, [r6, #0]
 80069c6:	3302      	addmi	r3, #2
 80069c8:	6033      	strmi	r3, [r6, #0]
 80069ca:	6825      	ldr	r5, [r4, #0]
 80069cc:	f015 0506 	ands.w	r5, r5, #6
 80069d0:	d106      	bne.n	80069e0 <_printf_common+0x48>
 80069d2:	f104 0a19 	add.w	sl, r4, #25
 80069d6:	68e3      	ldr	r3, [r4, #12]
 80069d8:	6832      	ldr	r2, [r6, #0]
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	42ab      	cmp	r3, r5
 80069de:	dc26      	bgt.n	8006a2e <_printf_common+0x96>
 80069e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069e4:	1e13      	subs	r3, r2, #0
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	bf18      	it	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	0692      	lsls	r2, r2, #26
 80069ee:	d42b      	bmi.n	8006a48 <_printf_common+0xb0>
 80069f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f4:	4649      	mov	r1, r9
 80069f6:	4638      	mov	r0, r7
 80069f8:	47c0      	blx	r8
 80069fa:	3001      	adds	r0, #1
 80069fc:	d01e      	beq.n	8006a3c <_printf_common+0xa4>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	f003 0306 	and.w	r3, r3, #6
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	bf02      	ittt	eq
 8006a0a:	68e5      	ldreq	r5, [r4, #12]
 8006a0c:	6833      	ldreq	r3, [r6, #0]
 8006a0e:	1aed      	subeq	r5, r5, r3
 8006a10:	68a3      	ldr	r3, [r4, #8]
 8006a12:	bf0c      	ite	eq
 8006a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a18:	2500      	movne	r5, #0
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	bfc4      	itt	gt
 8006a1e:	1a9b      	subgt	r3, r3, r2
 8006a20:	18ed      	addgt	r5, r5, r3
 8006a22:	2600      	movs	r6, #0
 8006a24:	341a      	adds	r4, #26
 8006a26:	42b5      	cmp	r5, r6
 8006a28:	d11a      	bne.n	8006a60 <_printf_common+0xc8>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e008      	b.n	8006a40 <_printf_common+0xa8>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4649      	mov	r1, r9
 8006a34:	4638      	mov	r0, r7
 8006a36:	47c0      	blx	r8
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d103      	bne.n	8006a44 <_printf_common+0xac>
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	3501      	adds	r5, #1
 8006a46:	e7c6      	b.n	80069d6 <_printf_common+0x3e>
 8006a48:	18e1      	adds	r1, r4, r3
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	2030      	movs	r0, #48	; 0x30
 8006a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a52:	4422      	add	r2, r4
 8006a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	e7c7      	b.n	80069f0 <_printf_common+0x58>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4622      	mov	r2, r4
 8006a64:	4649      	mov	r1, r9
 8006a66:	4638      	mov	r0, r7
 8006a68:	47c0      	blx	r8
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d0e6      	beq.n	8006a3c <_printf_common+0xa4>
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7d9      	b.n	8006a26 <_printf_common+0x8e>
	...

08006a74 <_printf_i>:
 8006a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	7e0f      	ldrb	r7, [r1, #24]
 8006a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a7c:	2f78      	cmp	r7, #120	; 0x78
 8006a7e:	4691      	mov	r9, r2
 8006a80:	4680      	mov	r8, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	469a      	mov	sl, r3
 8006a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a8a:	d807      	bhi.n	8006a9c <_printf_i+0x28>
 8006a8c:	2f62      	cmp	r7, #98	; 0x62
 8006a8e:	d80a      	bhi.n	8006aa6 <_printf_i+0x32>
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	f000 80d4 	beq.w	8006c3e <_printf_i+0x1ca>
 8006a96:	2f58      	cmp	r7, #88	; 0x58
 8006a98:	f000 80c0 	beq.w	8006c1c <_printf_i+0x1a8>
 8006a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aa4:	e03a      	b.n	8006b1c <_printf_i+0xa8>
 8006aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aaa:	2b15      	cmp	r3, #21
 8006aac:	d8f6      	bhi.n	8006a9c <_printf_i+0x28>
 8006aae:	a101      	add	r1, pc, #4	; (adr r1, 8006ab4 <_printf_i+0x40>)
 8006ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ab4:	08006b0d 	.word	0x08006b0d
 8006ab8:	08006b21 	.word	0x08006b21
 8006abc:	08006a9d 	.word	0x08006a9d
 8006ac0:	08006a9d 	.word	0x08006a9d
 8006ac4:	08006a9d 	.word	0x08006a9d
 8006ac8:	08006a9d 	.word	0x08006a9d
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006a9d 	.word	0x08006a9d
 8006ad4:	08006a9d 	.word	0x08006a9d
 8006ad8:	08006a9d 	.word	0x08006a9d
 8006adc:	08006a9d 	.word	0x08006a9d
 8006ae0:	08006c25 	.word	0x08006c25
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006bdf 	.word	0x08006bdf
 8006aec:	08006a9d 	.word	0x08006a9d
 8006af0:	08006a9d 	.word	0x08006a9d
 8006af4:	08006c47 	.word	0x08006c47
 8006af8:	08006a9d 	.word	0x08006a9d
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006a9d 	.word	0x08006a9d
 8006b04:	08006a9d 	.word	0x08006a9d
 8006b08:	08006be7 	.word	0x08006be7
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	1d1a      	adds	r2, r3, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	602a      	str	r2, [r5, #0]
 8006b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e09f      	b.n	8006c60 <_printf_i+0x1ec>
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	682b      	ldr	r3, [r5, #0]
 8006b24:	0607      	lsls	r7, r0, #24
 8006b26:	f103 0104 	add.w	r1, r3, #4
 8006b2a:	6029      	str	r1, [r5, #0]
 8006b2c:	d501      	bpl.n	8006b32 <_printf_i+0xbe>
 8006b2e:	681e      	ldr	r6, [r3, #0]
 8006b30:	e003      	b.n	8006b3a <_printf_i+0xc6>
 8006b32:	0646      	lsls	r6, r0, #25
 8006b34:	d5fb      	bpl.n	8006b2e <_printf_i+0xba>
 8006b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	da03      	bge.n	8006b46 <_printf_i+0xd2>
 8006b3e:	232d      	movs	r3, #45	; 0x2d
 8006b40:	4276      	negs	r6, r6
 8006b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b46:	485a      	ldr	r0, [pc, #360]	; (8006cb0 <_printf_i+0x23c>)
 8006b48:	230a      	movs	r3, #10
 8006b4a:	e012      	b.n	8006b72 <_printf_i+0xfe>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	1d19      	adds	r1, r3, #4
 8006b52:	6029      	str	r1, [r5, #0]
 8006b54:	0605      	lsls	r5, r0, #24
 8006b56:	d501      	bpl.n	8006b5c <_printf_i+0xe8>
 8006b58:	681e      	ldr	r6, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <_printf_i+0xee>
 8006b5c:	0641      	lsls	r1, r0, #25
 8006b5e:	d5fb      	bpl.n	8006b58 <_printf_i+0xe4>
 8006b60:	881e      	ldrh	r6, [r3, #0]
 8006b62:	4853      	ldr	r0, [pc, #332]	; (8006cb0 <_printf_i+0x23c>)
 8006b64:	2f6f      	cmp	r7, #111	; 0x6f
 8006b66:	bf0c      	ite	eq
 8006b68:	2308      	moveq	r3, #8
 8006b6a:	230a      	movne	r3, #10
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b72:	6865      	ldr	r5, [r4, #4]
 8006b74:	60a5      	str	r5, [r4, #8]
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	bfa2      	ittt	ge
 8006b7a:	6821      	ldrge	r1, [r4, #0]
 8006b7c:	f021 0104 	bicge.w	r1, r1, #4
 8006b80:	6021      	strge	r1, [r4, #0]
 8006b82:	b90e      	cbnz	r6, 8006b88 <_printf_i+0x114>
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	d04b      	beq.n	8006c20 <_printf_i+0x1ac>
 8006b88:	4615      	mov	r5, r2
 8006b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b92:	5dc7      	ldrb	r7, [r0, r7]
 8006b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b98:	4637      	mov	r7, r6
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	460e      	mov	r6, r1
 8006b9e:	d9f4      	bls.n	8006b8a <_printf_i+0x116>
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d10b      	bne.n	8006bbc <_printf_i+0x148>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	07de      	lsls	r6, r3, #31
 8006ba8:	d508      	bpl.n	8006bbc <_printf_i+0x148>
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	6861      	ldr	r1, [r4, #4]
 8006bae:	4299      	cmp	r1, r3
 8006bb0:	bfde      	ittt	le
 8006bb2:	2330      	movle	r3, #48	; 0x30
 8006bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bbc:	1b52      	subs	r2, r2, r5
 8006bbe:	6122      	str	r2, [r4, #16]
 8006bc0:	f8cd a000 	str.w	sl, [sp]
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	aa03      	add	r2, sp, #12
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f7ff fee4 	bl	8006998 <_printf_common>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d14a      	bne.n	8006c6a <_printf_i+0x1f6>
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	b004      	add	sp, #16
 8006bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f043 0320 	orr.w	r3, r3, #32
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	4833      	ldr	r0, [pc, #204]	; (8006cb4 <_printf_i+0x240>)
 8006be8:	2778      	movs	r7, #120	; 0x78
 8006bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	6829      	ldr	r1, [r5, #0]
 8006bf2:	061f      	lsls	r7, r3, #24
 8006bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bf8:	d402      	bmi.n	8006c00 <_printf_i+0x18c>
 8006bfa:	065f      	lsls	r7, r3, #25
 8006bfc:	bf48      	it	mi
 8006bfe:	b2b6      	uxthmi	r6, r6
 8006c00:	07df      	lsls	r7, r3, #31
 8006c02:	bf48      	it	mi
 8006c04:	f043 0320 	orrmi.w	r3, r3, #32
 8006c08:	6029      	str	r1, [r5, #0]
 8006c0a:	bf48      	it	mi
 8006c0c:	6023      	strmi	r3, [r4, #0]
 8006c0e:	b91e      	cbnz	r6, 8006c18 <_printf_i+0x1a4>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	f023 0320 	bic.w	r3, r3, #32
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	2310      	movs	r3, #16
 8006c1a:	e7a7      	b.n	8006b6c <_printf_i+0xf8>
 8006c1c:	4824      	ldr	r0, [pc, #144]	; (8006cb0 <_printf_i+0x23c>)
 8006c1e:	e7e4      	b.n	8006bea <_printf_i+0x176>
 8006c20:	4615      	mov	r5, r2
 8006c22:	e7bd      	b.n	8006ba0 <_printf_i+0x12c>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	6826      	ldr	r6, [r4, #0]
 8006c28:	6961      	ldr	r1, [r4, #20]
 8006c2a:	1d18      	adds	r0, r3, #4
 8006c2c:	6028      	str	r0, [r5, #0]
 8006c2e:	0635      	lsls	r5, r6, #24
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	d501      	bpl.n	8006c38 <_printf_i+0x1c4>
 8006c34:	6019      	str	r1, [r3, #0]
 8006c36:	e002      	b.n	8006c3e <_printf_i+0x1ca>
 8006c38:	0670      	lsls	r0, r6, #25
 8006c3a:	d5fb      	bpl.n	8006c34 <_printf_i+0x1c0>
 8006c3c:	8019      	strh	r1, [r3, #0]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	4615      	mov	r5, r2
 8006c44:	e7bc      	b.n	8006bc0 <_printf_i+0x14c>
 8006c46:	682b      	ldr	r3, [r5, #0]
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	681d      	ldr	r5, [r3, #0]
 8006c4e:	6862      	ldr	r2, [r4, #4]
 8006c50:	2100      	movs	r1, #0
 8006c52:	4628      	mov	r0, r5
 8006c54:	f7f9 fae4 	bl	8000220 <memchr>
 8006c58:	b108      	cbz	r0, 8006c5e <_printf_i+0x1ea>
 8006c5a:	1b40      	subs	r0, r0, r5
 8006c5c:	6060      	str	r0, [r4, #4]
 8006c5e:	6863      	ldr	r3, [r4, #4]
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	2300      	movs	r3, #0
 8006c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c68:	e7aa      	b.n	8006bc0 <_printf_i+0x14c>
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	47d0      	blx	sl
 8006c74:	3001      	adds	r0, #1
 8006c76:	d0ad      	beq.n	8006bd4 <_printf_i+0x160>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	079b      	lsls	r3, r3, #30
 8006c7c:	d413      	bmi.n	8006ca6 <_printf_i+0x232>
 8006c7e:	68e0      	ldr	r0, [r4, #12]
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	4298      	cmp	r0, r3
 8006c84:	bfb8      	it	lt
 8006c86:	4618      	movlt	r0, r3
 8006c88:	e7a6      	b.n	8006bd8 <_printf_i+0x164>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	4649      	mov	r1, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	47d0      	blx	sl
 8006c94:	3001      	adds	r0, #1
 8006c96:	d09d      	beq.n	8006bd4 <_printf_i+0x160>
 8006c98:	3501      	adds	r5, #1
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	9903      	ldr	r1, [sp, #12]
 8006c9e:	1a5b      	subs	r3, r3, r1
 8006ca0:	42ab      	cmp	r3, r5
 8006ca2:	dcf2      	bgt.n	8006c8a <_printf_i+0x216>
 8006ca4:	e7eb      	b.n	8006c7e <_printf_i+0x20a>
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	f104 0619 	add.w	r6, r4, #25
 8006cac:	e7f5      	b.n	8006c9a <_printf_i+0x226>
 8006cae:	bf00      	nop
 8006cb0:	0800d076 	.word	0x0800d076
 8006cb4:	0800d087 	.word	0x0800d087

08006cb8 <_scanf_float>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	b087      	sub	sp, #28
 8006cbe:	4617      	mov	r7, r2
 8006cc0:	9303      	str	r3, [sp, #12]
 8006cc2:	688b      	ldr	r3, [r1, #8]
 8006cc4:	1e5a      	subs	r2, r3, #1
 8006cc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cca:	bf83      	ittte	hi
 8006ccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cd0:	195b      	addhi	r3, r3, r5
 8006cd2:	9302      	strhi	r3, [sp, #8]
 8006cd4:	2300      	movls	r3, #0
 8006cd6:	bf86      	itte	hi
 8006cd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cdc:	608b      	strhi	r3, [r1, #8]
 8006cde:	9302      	strls	r3, [sp, #8]
 8006ce0:	680b      	ldr	r3, [r1, #0]
 8006ce2:	468b      	mov	fp, r1
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006cea:	f84b 3b1c 	str.w	r3, [fp], #28
 8006cee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	465e      	mov	r6, fp
 8006cf8:	46aa      	mov	sl, r5
 8006cfa:	46a9      	mov	r9, r5
 8006cfc:	9501      	str	r5, [sp, #4]
 8006cfe:	68a2      	ldr	r2, [r4, #8]
 8006d00:	b152      	cbz	r2, 8006d18 <_scanf_float+0x60>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b4e      	cmp	r3, #78	; 0x4e
 8006d08:	d864      	bhi.n	8006dd4 <_scanf_float+0x11c>
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d83c      	bhi.n	8006d88 <_scanf_float+0xd0>
 8006d0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006d12:	b2c8      	uxtb	r0, r1
 8006d14:	280e      	cmp	r0, #14
 8006d16:	d93a      	bls.n	8006d8e <_scanf_float+0xd6>
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	d003      	beq.n	8006d26 <_scanf_float+0x6e>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d2a:	f1ba 0f01 	cmp.w	sl, #1
 8006d2e:	f200 8113 	bhi.w	8006f58 <_scanf_float+0x2a0>
 8006d32:	455e      	cmp	r6, fp
 8006d34:	f200 8105 	bhi.w	8006f42 <_scanf_float+0x28a>
 8006d38:	2501      	movs	r5, #1
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	b007      	add	sp, #28
 8006d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d46:	2a0d      	cmp	r2, #13
 8006d48:	d8e6      	bhi.n	8006d18 <_scanf_float+0x60>
 8006d4a:	a101      	add	r1, pc, #4	; (adr r1, 8006d50 <_scanf_float+0x98>)
 8006d4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d50:	08006e8f 	.word	0x08006e8f
 8006d54:	08006d19 	.word	0x08006d19
 8006d58:	08006d19 	.word	0x08006d19
 8006d5c:	08006d19 	.word	0x08006d19
 8006d60:	08006eef 	.word	0x08006eef
 8006d64:	08006ec7 	.word	0x08006ec7
 8006d68:	08006d19 	.word	0x08006d19
 8006d6c:	08006d19 	.word	0x08006d19
 8006d70:	08006e9d 	.word	0x08006e9d
 8006d74:	08006d19 	.word	0x08006d19
 8006d78:	08006d19 	.word	0x08006d19
 8006d7c:	08006d19 	.word	0x08006d19
 8006d80:	08006d19 	.word	0x08006d19
 8006d84:	08006e55 	.word	0x08006e55
 8006d88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d8c:	e7db      	b.n	8006d46 <_scanf_float+0x8e>
 8006d8e:	290e      	cmp	r1, #14
 8006d90:	d8c2      	bhi.n	8006d18 <_scanf_float+0x60>
 8006d92:	a001      	add	r0, pc, #4	; (adr r0, 8006d98 <_scanf_float+0xe0>)
 8006d94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d98:	08006e47 	.word	0x08006e47
 8006d9c:	08006d19 	.word	0x08006d19
 8006da0:	08006e47 	.word	0x08006e47
 8006da4:	08006edb 	.word	0x08006edb
 8006da8:	08006d19 	.word	0x08006d19
 8006dac:	08006df5 	.word	0x08006df5
 8006db0:	08006e31 	.word	0x08006e31
 8006db4:	08006e31 	.word	0x08006e31
 8006db8:	08006e31 	.word	0x08006e31
 8006dbc:	08006e31 	.word	0x08006e31
 8006dc0:	08006e31 	.word	0x08006e31
 8006dc4:	08006e31 	.word	0x08006e31
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006e31 	.word	0x08006e31
 8006dd0:	08006e31 	.word	0x08006e31
 8006dd4:	2b6e      	cmp	r3, #110	; 0x6e
 8006dd6:	d809      	bhi.n	8006dec <_scanf_float+0x134>
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	d8b2      	bhi.n	8006d42 <_scanf_float+0x8a>
 8006ddc:	2b54      	cmp	r3, #84	; 0x54
 8006dde:	d077      	beq.n	8006ed0 <_scanf_float+0x218>
 8006de0:	2b59      	cmp	r3, #89	; 0x59
 8006de2:	d199      	bne.n	8006d18 <_scanf_float+0x60>
 8006de4:	2d07      	cmp	r5, #7
 8006de6:	d197      	bne.n	8006d18 <_scanf_float+0x60>
 8006de8:	2508      	movs	r5, #8
 8006dea:	e029      	b.n	8006e40 <_scanf_float+0x188>
 8006dec:	2b74      	cmp	r3, #116	; 0x74
 8006dee:	d06f      	beq.n	8006ed0 <_scanf_float+0x218>
 8006df0:	2b79      	cmp	r3, #121	; 0x79
 8006df2:	e7f6      	b.n	8006de2 <_scanf_float+0x12a>
 8006df4:	6821      	ldr	r1, [r4, #0]
 8006df6:	05c8      	lsls	r0, r1, #23
 8006df8:	d51a      	bpl.n	8006e30 <_scanf_float+0x178>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e00:	6021      	str	r1, [r4, #0]
 8006e02:	f109 0901 	add.w	r9, r9, #1
 8006e06:	b11b      	cbz	r3, 8006e10 <_scanf_float+0x158>
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	9302      	str	r3, [sp, #8]
 8006e0e:	60a2      	str	r2, [r4, #8]
 8006e10:	68a3      	ldr	r3, [r4, #8]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	60a3      	str	r3, [r4, #8]
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	6123      	str	r3, [r4, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	f340 8084 	ble.w	8006f30 <_scanf_float+0x278>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	e766      	b.n	8006cfe <_scanf_float+0x46>
 8006e30:	eb1a 0f05 	cmn.w	sl, r5
 8006e34:	f47f af70 	bne.w	8006d18 <_scanf_float+0x60>
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e3e:	6022      	str	r2, [r4, #0]
 8006e40:	f806 3b01 	strb.w	r3, [r6], #1
 8006e44:	e7e4      	b.n	8006e10 <_scanf_float+0x158>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	0610      	lsls	r0, r2, #24
 8006e4a:	f57f af65 	bpl.w	8006d18 <_scanf_float+0x60>
 8006e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e52:	e7f4      	b.n	8006e3e <_scanf_float+0x186>
 8006e54:	f1ba 0f00 	cmp.w	sl, #0
 8006e58:	d10e      	bne.n	8006e78 <_scanf_float+0x1c0>
 8006e5a:	f1b9 0f00 	cmp.w	r9, #0
 8006e5e:	d10e      	bne.n	8006e7e <_scanf_float+0x1c6>
 8006e60:	6822      	ldr	r2, [r4, #0]
 8006e62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e6a:	d108      	bne.n	8006e7e <_scanf_float+0x1c6>
 8006e6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	f04f 0a01 	mov.w	sl, #1
 8006e76:	e7e3      	b.n	8006e40 <_scanf_float+0x188>
 8006e78:	f1ba 0f02 	cmp.w	sl, #2
 8006e7c:	d055      	beq.n	8006f2a <_scanf_float+0x272>
 8006e7e:	2d01      	cmp	r5, #1
 8006e80:	d002      	beq.n	8006e88 <_scanf_float+0x1d0>
 8006e82:	2d04      	cmp	r5, #4
 8006e84:	f47f af48 	bne.w	8006d18 <_scanf_float+0x60>
 8006e88:	3501      	adds	r5, #1
 8006e8a:	b2ed      	uxtb	r5, r5
 8006e8c:	e7d8      	b.n	8006e40 <_scanf_float+0x188>
 8006e8e:	f1ba 0f01 	cmp.w	sl, #1
 8006e92:	f47f af41 	bne.w	8006d18 <_scanf_float+0x60>
 8006e96:	f04f 0a02 	mov.w	sl, #2
 8006e9a:	e7d1      	b.n	8006e40 <_scanf_float+0x188>
 8006e9c:	b97d      	cbnz	r5, 8006ebe <_scanf_float+0x206>
 8006e9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ea2:	f47f af3c 	bne.w	8006d1e <_scanf_float+0x66>
 8006ea6:	6822      	ldr	r2, [r4, #0]
 8006ea8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006eac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006eb0:	f47f af39 	bne.w	8006d26 <_scanf_float+0x6e>
 8006eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	2501      	movs	r5, #1
 8006ebc:	e7c0      	b.n	8006e40 <_scanf_float+0x188>
 8006ebe:	2d03      	cmp	r5, #3
 8006ec0:	d0e2      	beq.n	8006e88 <_scanf_float+0x1d0>
 8006ec2:	2d05      	cmp	r5, #5
 8006ec4:	e7de      	b.n	8006e84 <_scanf_float+0x1cc>
 8006ec6:	2d02      	cmp	r5, #2
 8006ec8:	f47f af26 	bne.w	8006d18 <_scanf_float+0x60>
 8006ecc:	2503      	movs	r5, #3
 8006ece:	e7b7      	b.n	8006e40 <_scanf_float+0x188>
 8006ed0:	2d06      	cmp	r5, #6
 8006ed2:	f47f af21 	bne.w	8006d18 <_scanf_float+0x60>
 8006ed6:	2507      	movs	r5, #7
 8006ed8:	e7b2      	b.n	8006e40 <_scanf_float+0x188>
 8006eda:	6822      	ldr	r2, [r4, #0]
 8006edc:	0591      	lsls	r1, r2, #22
 8006ede:	f57f af1b 	bpl.w	8006d18 <_scanf_float+0x60>
 8006ee2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ee6:	6022      	str	r2, [r4, #0]
 8006ee8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006eec:	e7a8      	b.n	8006e40 <_scanf_float+0x188>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ef4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ef8:	d006      	beq.n	8006f08 <_scanf_float+0x250>
 8006efa:	0550      	lsls	r0, r2, #21
 8006efc:	f57f af0c 	bpl.w	8006d18 <_scanf_float+0x60>
 8006f00:	f1b9 0f00 	cmp.w	r9, #0
 8006f04:	f43f af0f 	beq.w	8006d26 <_scanf_float+0x6e>
 8006f08:	0591      	lsls	r1, r2, #22
 8006f0a:	bf58      	it	pl
 8006f0c:	9901      	ldrpl	r1, [sp, #4]
 8006f0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f12:	bf58      	it	pl
 8006f14:	eba9 0101 	subpl.w	r1, r9, r1
 8006f18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f1c:	bf58      	it	pl
 8006f1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f22:	6022      	str	r2, [r4, #0]
 8006f24:	f04f 0900 	mov.w	r9, #0
 8006f28:	e78a      	b.n	8006e40 <_scanf_float+0x188>
 8006f2a:	f04f 0a03 	mov.w	sl, #3
 8006f2e:	e787      	b.n	8006e40 <_scanf_float+0x188>
 8006f30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f34:	4639      	mov	r1, r7
 8006f36:	4640      	mov	r0, r8
 8006f38:	4798      	blx	r3
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	f43f aedf 	beq.w	8006cfe <_scanf_float+0x46>
 8006f40:	e6ea      	b.n	8006d18 <_scanf_float+0x60>
 8006f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4798      	blx	r3
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	e6ec      	b.n	8006d32 <_scanf_float+0x7a>
 8006f58:	1e6b      	subs	r3, r5, #1
 8006f5a:	2b06      	cmp	r3, #6
 8006f5c:	d825      	bhi.n	8006faa <_scanf_float+0x2f2>
 8006f5e:	2d02      	cmp	r5, #2
 8006f60:	d836      	bhi.n	8006fd0 <_scanf_float+0x318>
 8006f62:	455e      	cmp	r6, fp
 8006f64:	f67f aee8 	bls.w	8006d38 <_scanf_float+0x80>
 8006f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f70:	463a      	mov	r2, r7
 8006f72:	4640      	mov	r0, r8
 8006f74:	4798      	blx	r3
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	e7f1      	b.n	8006f62 <_scanf_float+0x2aa>
 8006f7e:	9802      	ldr	r0, [sp, #8]
 8006f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f88:	9002      	str	r0, [sp, #8]
 8006f8a:	463a      	mov	r2, r7
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4798      	blx	r3
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8006f9e:	f1ba 0f02 	cmp.w	sl, #2
 8006fa2:	d1ec      	bne.n	8006f7e <_scanf_float+0x2c6>
 8006fa4:	3d03      	subs	r5, #3
 8006fa6:	b2ed      	uxtb	r5, r5
 8006fa8:	1b76      	subs	r6, r6, r5
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	05da      	lsls	r2, r3, #23
 8006fae:	d52f      	bpl.n	8007010 <_scanf_float+0x358>
 8006fb0:	055b      	lsls	r3, r3, #21
 8006fb2:	d510      	bpl.n	8006fd6 <_scanf_float+0x31e>
 8006fb4:	455e      	cmp	r6, fp
 8006fb6:	f67f aebf 	bls.w	8006d38 <_scanf_float+0x80>
 8006fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fc2:	463a      	mov	r2, r7
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	4798      	blx	r3
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	e7f1      	b.n	8006fb4 <_scanf_float+0x2fc>
 8006fd0:	46aa      	mov	sl, r5
 8006fd2:	9602      	str	r6, [sp, #8]
 8006fd4:	e7df      	b.n	8006f96 <_scanf_float+0x2de>
 8006fd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	2965      	cmp	r1, #101	; 0x65
 8006fde:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fe2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	d00c      	beq.n	8007004 <_scanf_float+0x34c>
 8006fea:	2945      	cmp	r1, #69	; 0x45
 8006fec:	d00a      	beq.n	8007004 <_scanf_float+0x34c>
 8006fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ff2:	463a      	mov	r2, r7
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	4798      	blx	r3
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	1eb5      	subs	r5, r6, #2
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007008:	463a      	mov	r2, r7
 800700a:	4640      	mov	r0, r8
 800700c:	4798      	blx	r3
 800700e:	462e      	mov	r6, r5
 8007010:	6825      	ldr	r5, [r4, #0]
 8007012:	f015 0510 	ands.w	r5, r5, #16
 8007016:	d158      	bne.n	80070ca <_scanf_float+0x412>
 8007018:	7035      	strb	r5, [r6, #0]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007024:	d11c      	bne.n	8007060 <_scanf_float+0x3a8>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	454b      	cmp	r3, r9
 800702a:	eba3 0209 	sub.w	r2, r3, r9
 800702e:	d124      	bne.n	800707a <_scanf_float+0x3c2>
 8007030:	2200      	movs	r2, #0
 8007032:	4659      	mov	r1, fp
 8007034:	4640      	mov	r0, r8
 8007036:	f002 fd3b 	bl	8009ab0 <_strtod_r>
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	6821      	ldr	r1, [r4, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f011 0f02 	tst.w	r1, #2
 8007044:	ec57 6b10 	vmov	r6, r7, d0
 8007048:	f103 0204 	add.w	r2, r3, #4
 800704c:	d020      	beq.n	8007090 <_scanf_float+0x3d8>
 800704e:	9903      	ldr	r1, [sp, #12]
 8007050:	600a      	str	r2, [r1, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	e9c3 6700 	strd	r6, r7, [r3]
 8007058:	68e3      	ldr	r3, [r4, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60e3      	str	r3, [r4, #12]
 800705e:	e66c      	b.n	8006d3a <_scanf_float+0x82>
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0e4      	beq.n	8007030 <_scanf_float+0x378>
 8007066:	9905      	ldr	r1, [sp, #20]
 8007068:	230a      	movs	r3, #10
 800706a:	462a      	mov	r2, r5
 800706c:	3101      	adds	r1, #1
 800706e:	4640      	mov	r0, r8
 8007070:	f002 fda6 	bl	8009bc0 <_strtol_r>
 8007074:	9b04      	ldr	r3, [sp, #16]
 8007076:	9e05      	ldr	r6, [sp, #20]
 8007078:	1ac2      	subs	r2, r0, r3
 800707a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800707e:	429e      	cmp	r6, r3
 8007080:	bf28      	it	cs
 8007082:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007086:	4912      	ldr	r1, [pc, #72]	; (80070d0 <_scanf_float+0x418>)
 8007088:	4630      	mov	r0, r6
 800708a:	f000 f95d 	bl	8007348 <siprintf>
 800708e:	e7cf      	b.n	8007030 <_scanf_float+0x378>
 8007090:	f011 0f04 	tst.w	r1, #4
 8007094:	9903      	ldr	r1, [sp, #12]
 8007096:	600a      	str	r2, [r1, #0]
 8007098:	d1db      	bne.n	8007052 <_scanf_float+0x39a>
 800709a:	f8d3 8000 	ldr.w	r8, [r3]
 800709e:	ee10 2a10 	vmov	r2, s0
 80070a2:	ee10 0a10 	vmov	r0, s0
 80070a6:	463b      	mov	r3, r7
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 fd67 	bl	8000b7c <__aeabi_dcmpun>
 80070ae:	b128      	cbz	r0, 80070bc <_scanf_float+0x404>
 80070b0:	4808      	ldr	r0, [pc, #32]	; (80070d4 <_scanf_float+0x41c>)
 80070b2:	f000 fac1 	bl	8007638 <nanf>
 80070b6:	ed88 0a00 	vstr	s0, [r8]
 80070ba:	e7cd      	b.n	8007058 <_scanf_float+0x3a0>
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fdba 	bl	8000c38 <__aeabi_d2f>
 80070c4:	f8c8 0000 	str.w	r0, [r8]
 80070c8:	e7c6      	b.n	8007058 <_scanf_float+0x3a0>
 80070ca:	2500      	movs	r5, #0
 80070cc:	e635      	b.n	8006d3a <_scanf_float+0x82>
 80070ce:	bf00      	nop
 80070d0:	0800d098 	.word	0x0800d098
 80070d4:	0800d42d 	.word	0x0800d42d

080070d8 <std>:
 80070d8:	2300      	movs	r3, #0
 80070da:	b510      	push	{r4, lr}
 80070dc:	4604      	mov	r4, r0
 80070de:	e9c0 3300 	strd	r3, r3, [r0]
 80070e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070e6:	6083      	str	r3, [r0, #8]
 80070e8:	8181      	strh	r1, [r0, #12]
 80070ea:	6643      	str	r3, [r0, #100]	; 0x64
 80070ec:	81c2      	strh	r2, [r0, #14]
 80070ee:	6183      	str	r3, [r0, #24]
 80070f0:	4619      	mov	r1, r3
 80070f2:	2208      	movs	r2, #8
 80070f4:	305c      	adds	r0, #92	; 0x5c
 80070f6:	f000 fa1f 	bl	8007538 <memset>
 80070fa:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <std+0x58>)
 80070fc:	6263      	str	r3, [r4, #36]	; 0x24
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <std+0x5c>)
 8007100:	62a3      	str	r3, [r4, #40]	; 0x28
 8007102:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <std+0x60>)
 8007104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007106:	4b0d      	ldr	r3, [pc, #52]	; (800713c <std+0x64>)
 8007108:	6323      	str	r3, [r4, #48]	; 0x30
 800710a:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <std+0x68>)
 800710c:	6224      	str	r4, [r4, #32]
 800710e:	429c      	cmp	r4, r3
 8007110:	d006      	beq.n	8007120 <std+0x48>
 8007112:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007116:	4294      	cmp	r4, r2
 8007118:	d002      	beq.n	8007120 <std+0x48>
 800711a:	33d0      	adds	r3, #208	; 0xd0
 800711c:	429c      	cmp	r4, r3
 800711e:	d105      	bne.n	800712c <std+0x54>
 8007120:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007128:	f000 ba82 	b.w	8007630 <__retarget_lock_init_recursive>
 800712c:	bd10      	pop	{r4, pc}
 800712e:	bf00      	nop
 8007130:	08007389 	.word	0x08007389
 8007134:	080073ab 	.word	0x080073ab
 8007138:	080073e3 	.word	0x080073e3
 800713c:	08007407 	.word	0x08007407
 8007140:	200007d4 	.word	0x200007d4

08007144 <stdio_exit_handler>:
 8007144:	4a02      	ldr	r2, [pc, #8]	; (8007150 <stdio_exit_handler+0xc>)
 8007146:	4903      	ldr	r1, [pc, #12]	; (8007154 <stdio_exit_handler+0x10>)
 8007148:	4803      	ldr	r0, [pc, #12]	; (8007158 <stdio_exit_handler+0x14>)
 800714a:	f000 b869 	b.w	8007220 <_fwalk_sglue>
 800714e:	bf00      	nop
 8007150:	20000014 	.word	0x20000014
 8007154:	0800a209 	.word	0x0800a209
 8007158:	20000020 	.word	0x20000020

0800715c <cleanup_stdio>:
 800715c:	6841      	ldr	r1, [r0, #4]
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <cleanup_stdio+0x34>)
 8007160:	4299      	cmp	r1, r3
 8007162:	b510      	push	{r4, lr}
 8007164:	4604      	mov	r4, r0
 8007166:	d001      	beq.n	800716c <cleanup_stdio+0x10>
 8007168:	f003 f84e 	bl	800a208 <_fflush_r>
 800716c:	68a1      	ldr	r1, [r4, #8]
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <cleanup_stdio+0x38>)
 8007170:	4299      	cmp	r1, r3
 8007172:	d002      	beq.n	800717a <cleanup_stdio+0x1e>
 8007174:	4620      	mov	r0, r4
 8007176:	f003 f847 	bl	800a208 <_fflush_r>
 800717a:	68e1      	ldr	r1, [r4, #12]
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <cleanup_stdio+0x3c>)
 800717e:	4299      	cmp	r1, r3
 8007180:	d004      	beq.n	800718c <cleanup_stdio+0x30>
 8007182:	4620      	mov	r0, r4
 8007184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007188:	f003 b83e 	b.w	800a208 <_fflush_r>
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	200007d4 	.word	0x200007d4
 8007194:	2000083c 	.word	0x2000083c
 8007198:	200008a4 	.word	0x200008a4

0800719c <global_stdio_init.part.0>:
 800719c:	b510      	push	{r4, lr}
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <global_stdio_init.part.0+0x30>)
 80071a0:	4c0b      	ldr	r4, [pc, #44]	; (80071d0 <global_stdio_init.part.0+0x34>)
 80071a2:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <global_stdio_init.part.0+0x38>)
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	4620      	mov	r0, r4
 80071a8:	2200      	movs	r2, #0
 80071aa:	2104      	movs	r1, #4
 80071ac:	f7ff ff94 	bl	80070d8 <std>
 80071b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071b4:	2201      	movs	r2, #1
 80071b6:	2109      	movs	r1, #9
 80071b8:	f7ff ff8e 	bl	80070d8 <std>
 80071bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071c0:	2202      	movs	r2, #2
 80071c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c6:	2112      	movs	r1, #18
 80071c8:	f7ff bf86 	b.w	80070d8 <std>
 80071cc:	2000090c 	.word	0x2000090c
 80071d0:	200007d4 	.word	0x200007d4
 80071d4:	08007145 	.word	0x08007145

080071d8 <__sfp_lock_acquire>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__sfp_lock_acquire+0x8>)
 80071da:	f000 ba2a 	b.w	8007632 <__retarget_lock_acquire_recursive>
 80071de:	bf00      	nop
 80071e0:	20000915 	.word	0x20000915

080071e4 <__sfp_lock_release>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__sfp_lock_release+0x8>)
 80071e6:	f000 ba25 	b.w	8007634 <__retarget_lock_release_recursive>
 80071ea:	bf00      	nop
 80071ec:	20000915 	.word	0x20000915

080071f0 <__sinit>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	f7ff fff0 	bl	80071d8 <__sfp_lock_acquire>
 80071f8:	6a23      	ldr	r3, [r4, #32]
 80071fa:	b11b      	cbz	r3, 8007204 <__sinit+0x14>
 80071fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007200:	f7ff bff0 	b.w	80071e4 <__sfp_lock_release>
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <__sinit+0x28>)
 8007206:	6223      	str	r3, [r4, #32]
 8007208:	4b04      	ldr	r3, [pc, #16]	; (800721c <__sinit+0x2c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f5      	bne.n	80071fc <__sinit+0xc>
 8007210:	f7ff ffc4 	bl	800719c <global_stdio_init.part.0>
 8007214:	e7f2      	b.n	80071fc <__sinit+0xc>
 8007216:	bf00      	nop
 8007218:	0800715d 	.word	0x0800715d
 800721c:	2000090c 	.word	0x2000090c

08007220 <_fwalk_sglue>:
 8007220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007224:	4607      	mov	r7, r0
 8007226:	4688      	mov	r8, r1
 8007228:	4614      	mov	r4, r2
 800722a:	2600      	movs	r6, #0
 800722c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007230:	f1b9 0901 	subs.w	r9, r9, #1
 8007234:	d505      	bpl.n	8007242 <_fwalk_sglue+0x22>
 8007236:	6824      	ldr	r4, [r4, #0]
 8007238:	2c00      	cmp	r4, #0
 800723a:	d1f7      	bne.n	800722c <_fwalk_sglue+0xc>
 800723c:	4630      	mov	r0, r6
 800723e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d907      	bls.n	8007258 <_fwalk_sglue+0x38>
 8007248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800724c:	3301      	adds	r3, #1
 800724e:	d003      	beq.n	8007258 <_fwalk_sglue+0x38>
 8007250:	4629      	mov	r1, r5
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	4306      	orrs	r6, r0
 8007258:	3568      	adds	r5, #104	; 0x68
 800725a:	e7e9      	b.n	8007230 <_fwalk_sglue+0x10>

0800725c <iprintf>:
 800725c:	b40f      	push	{r0, r1, r2, r3}
 800725e:	b507      	push	{r0, r1, r2, lr}
 8007260:	4906      	ldr	r1, [pc, #24]	; (800727c <iprintf+0x20>)
 8007262:	ab04      	add	r3, sp, #16
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	f853 2b04 	ldr.w	r2, [r3], #4
 800726a:	6881      	ldr	r1, [r0, #8]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	f002 fe2b 	bl	8009ec8 <_vfiprintf_r>
 8007272:	b003      	add	sp, #12
 8007274:	f85d eb04 	ldr.w	lr, [sp], #4
 8007278:	b004      	add	sp, #16
 800727a:	4770      	bx	lr
 800727c:	2000006c 	.word	0x2000006c

08007280 <putchar>:
 8007280:	4b02      	ldr	r3, [pc, #8]	; (800728c <putchar+0xc>)
 8007282:	4601      	mov	r1, r0
 8007284:	6818      	ldr	r0, [r3, #0]
 8007286:	6882      	ldr	r2, [r0, #8]
 8007288:	f003 b848 	b.w	800a31c <_putc_r>
 800728c:	2000006c 	.word	0x2000006c

08007290 <_puts_r>:
 8007290:	6a03      	ldr	r3, [r0, #32]
 8007292:	b570      	push	{r4, r5, r6, lr}
 8007294:	6884      	ldr	r4, [r0, #8]
 8007296:	4605      	mov	r5, r0
 8007298:	460e      	mov	r6, r1
 800729a:	b90b      	cbnz	r3, 80072a0 <_puts_r+0x10>
 800729c:	f7ff ffa8 	bl	80071f0 <__sinit>
 80072a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d405      	bmi.n	80072b2 <_puts_r+0x22>
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	0598      	lsls	r0, r3, #22
 80072aa:	d402      	bmi.n	80072b2 <_puts_r+0x22>
 80072ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ae:	f000 f9c0 	bl	8007632 <__retarget_lock_acquire_recursive>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	0719      	lsls	r1, r3, #28
 80072b6:	d513      	bpl.n	80072e0 <_puts_r+0x50>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	b18b      	cbz	r3, 80072e0 <_puts_r+0x50>
 80072bc:	3e01      	subs	r6, #1
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072c4:	3b01      	subs	r3, #1
 80072c6:	60a3      	str	r3, [r4, #8]
 80072c8:	b9e9      	cbnz	r1, 8007306 <_puts_r+0x76>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da2e      	bge.n	800732c <_puts_r+0x9c>
 80072ce:	4622      	mov	r2, r4
 80072d0:	210a      	movs	r1, #10
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f89b 	bl	800740e <__swbuf_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	d007      	beq.n	80072ec <_puts_r+0x5c>
 80072dc:	250a      	movs	r5, #10
 80072de:	e007      	b.n	80072f0 <_puts_r+0x60>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 f8d0 	bl	8007488 <__swsetup_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d0e7      	beq.n	80072bc <_puts_r+0x2c>
 80072ec:	f04f 35ff 	mov.w	r5, #4294967295
 80072f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072f2:	07da      	lsls	r2, r3, #31
 80072f4:	d405      	bmi.n	8007302 <_puts_r+0x72>
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	059b      	lsls	r3, r3, #22
 80072fa:	d402      	bmi.n	8007302 <_puts_r+0x72>
 80072fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fe:	f000 f999 	bl	8007634 <__retarget_lock_release_recursive>
 8007302:	4628      	mov	r0, r5
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	2b00      	cmp	r3, #0
 8007308:	da04      	bge.n	8007314 <_puts_r+0x84>
 800730a:	69a2      	ldr	r2, [r4, #24]
 800730c:	429a      	cmp	r2, r3
 800730e:	dc06      	bgt.n	800731e <_puts_r+0x8e>
 8007310:	290a      	cmp	r1, #10
 8007312:	d004      	beq.n	800731e <_puts_r+0x8e>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	7019      	strb	r1, [r3, #0]
 800731c:	e7cf      	b.n	80072be <_puts_r+0x2e>
 800731e:	4622      	mov	r2, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f874 	bl	800740e <__swbuf_r>
 8007326:	3001      	adds	r0, #1
 8007328:	d1c9      	bne.n	80072be <_puts_r+0x2e>
 800732a:	e7df      	b.n	80072ec <_puts_r+0x5c>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	250a      	movs	r5, #10
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	6022      	str	r2, [r4, #0]
 8007334:	701d      	strb	r5, [r3, #0]
 8007336:	e7db      	b.n	80072f0 <_puts_r+0x60>

08007338 <puts>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <puts+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f7ff bfa7 	b.w	8007290 <_puts_r>
 8007342:	bf00      	nop
 8007344:	2000006c 	.word	0x2000006c

08007348 <siprintf>:
 8007348:	b40e      	push	{r1, r2, r3}
 800734a:	b500      	push	{lr}
 800734c:	b09c      	sub	sp, #112	; 0x70
 800734e:	ab1d      	add	r3, sp, #116	; 0x74
 8007350:	9002      	str	r0, [sp, #8]
 8007352:	9006      	str	r0, [sp, #24]
 8007354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007358:	4809      	ldr	r0, [pc, #36]	; (8007380 <siprintf+0x38>)
 800735a:	9107      	str	r1, [sp, #28]
 800735c:	9104      	str	r1, [sp, #16]
 800735e:	4909      	ldr	r1, [pc, #36]	; (8007384 <siprintf+0x3c>)
 8007360:	f853 2b04 	ldr.w	r2, [r3], #4
 8007364:	9105      	str	r1, [sp, #20]
 8007366:	6800      	ldr	r0, [r0, #0]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	a902      	add	r1, sp, #8
 800736c:	f002 fc84 	bl	8009c78 <_svfiprintf_r>
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	b01c      	add	sp, #112	; 0x70
 8007378:	f85d eb04 	ldr.w	lr, [sp], #4
 800737c:	b003      	add	sp, #12
 800737e:	4770      	bx	lr
 8007380:	2000006c 	.word	0x2000006c
 8007384:	ffff0208 	.word	0xffff0208

08007388 <__sread>:
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007390:	f000 f900 	bl	8007594 <_read_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	bfab      	itete	ge
 8007398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800739a:	89a3      	ldrhlt	r3, [r4, #12]
 800739c:	181b      	addge	r3, r3, r0
 800739e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073a2:	bfac      	ite	ge
 80073a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073a6:	81a3      	strhlt	r3, [r4, #12]
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__swrite>:
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	461f      	mov	r7, r3
 80073b0:	898b      	ldrh	r3, [r1, #12]
 80073b2:	05db      	lsls	r3, r3, #23
 80073b4:	4605      	mov	r5, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4616      	mov	r6, r2
 80073ba:	d505      	bpl.n	80073c8 <__swrite+0x1e>
 80073bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c0:	2302      	movs	r3, #2
 80073c2:	2200      	movs	r2, #0
 80073c4:	f000 f8d4 	bl	8007570 <_lseek_r>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073de:	f000 b8eb 	b.w	80075b8 <_write_r>

080073e2 <__sseek>:
 80073e2:	b510      	push	{r4, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 f8c1 	bl	8007570 <_lseek_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	bf15      	itete	ne
 80073f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strheq	r3, [r4, #12]
 8007400:	bf18      	it	ne
 8007402:	81a3      	strhne	r3, [r4, #12]
 8007404:	bd10      	pop	{r4, pc}

08007406 <__sclose>:
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 b8a1 	b.w	8007550 <_close_r>

0800740e <__swbuf_r>:
 800740e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007410:	460e      	mov	r6, r1
 8007412:	4614      	mov	r4, r2
 8007414:	4605      	mov	r5, r0
 8007416:	b118      	cbz	r0, 8007420 <__swbuf_r+0x12>
 8007418:	6a03      	ldr	r3, [r0, #32]
 800741a:	b90b      	cbnz	r3, 8007420 <__swbuf_r+0x12>
 800741c:	f7ff fee8 	bl	80071f0 <__sinit>
 8007420:	69a3      	ldr	r3, [r4, #24]
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	071a      	lsls	r2, r3, #28
 8007428:	d525      	bpl.n	8007476 <__swbuf_r+0x68>
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	b31b      	cbz	r3, 8007476 <__swbuf_r+0x68>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	6922      	ldr	r2, [r4, #16]
 8007432:	1a98      	subs	r0, r3, r2
 8007434:	6963      	ldr	r3, [r4, #20]
 8007436:	b2f6      	uxtb	r6, r6
 8007438:	4283      	cmp	r3, r0
 800743a:	4637      	mov	r7, r6
 800743c:	dc04      	bgt.n	8007448 <__swbuf_r+0x3a>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f002 fee1 	bl	800a208 <_fflush_r>
 8007446:	b9e0      	cbnz	r0, 8007482 <__swbuf_r+0x74>
 8007448:	68a3      	ldr	r3, [r4, #8]
 800744a:	3b01      	subs	r3, #1
 800744c:	60a3      	str	r3, [r4, #8]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	6022      	str	r2, [r4, #0]
 8007454:	701e      	strb	r6, [r3, #0]
 8007456:	6962      	ldr	r2, [r4, #20]
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	429a      	cmp	r2, r3
 800745c:	d004      	beq.n	8007468 <__swbuf_r+0x5a>
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	07db      	lsls	r3, r3, #31
 8007462:	d506      	bpl.n	8007472 <__swbuf_r+0x64>
 8007464:	2e0a      	cmp	r6, #10
 8007466:	d104      	bne.n	8007472 <__swbuf_r+0x64>
 8007468:	4621      	mov	r1, r4
 800746a:	4628      	mov	r0, r5
 800746c:	f002 fecc 	bl	800a208 <_fflush_r>
 8007470:	b938      	cbnz	r0, 8007482 <__swbuf_r+0x74>
 8007472:	4638      	mov	r0, r7
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 f805 	bl	8007488 <__swsetup_r>
 800747e:	2800      	cmp	r0, #0
 8007480:	d0d5      	beq.n	800742e <__swbuf_r+0x20>
 8007482:	f04f 37ff 	mov.w	r7, #4294967295
 8007486:	e7f4      	b.n	8007472 <__swbuf_r+0x64>

08007488 <__swsetup_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4b2a      	ldr	r3, [pc, #168]	; (8007534 <__swsetup_r+0xac>)
 800748c:	4605      	mov	r5, r0
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	460c      	mov	r4, r1
 8007492:	b118      	cbz	r0, 800749c <__swsetup_r+0x14>
 8007494:	6a03      	ldr	r3, [r0, #32]
 8007496:	b90b      	cbnz	r3, 800749c <__swsetup_r+0x14>
 8007498:	f7ff feaa 	bl	80071f0 <__sinit>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074a2:	0718      	lsls	r0, r3, #28
 80074a4:	d422      	bmi.n	80074ec <__swsetup_r+0x64>
 80074a6:	06d9      	lsls	r1, r3, #27
 80074a8:	d407      	bmi.n	80074ba <__swsetup_r+0x32>
 80074aa:	2309      	movs	r3, #9
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e034      	b.n	8007524 <__swsetup_r+0x9c>
 80074ba:	0758      	lsls	r0, r3, #29
 80074bc:	d512      	bpl.n	80074e4 <__swsetup_r+0x5c>
 80074be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074c0:	b141      	cbz	r1, 80074d4 <__swsetup_r+0x4c>
 80074c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c6:	4299      	cmp	r1, r3
 80074c8:	d002      	beq.n	80074d0 <__swsetup_r+0x48>
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 ff36 	bl	800833c <_free_r>
 80074d0:	2300      	movs	r3, #0
 80074d2:	6363      	str	r3, [r4, #52]	; 0x34
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074da:	81a3      	strh	r3, [r4, #12]
 80074dc:	2300      	movs	r3, #0
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f043 0308 	orr.w	r3, r3, #8
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	b94b      	cbnz	r3, 8007504 <__swsetup_r+0x7c>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fa:	d003      	beq.n	8007504 <__swsetup_r+0x7c>
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	f002 fed0 	bl	800a2a4 <__smakebuf_r>
 8007504:	89a0      	ldrh	r0, [r4, #12]
 8007506:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800750a:	f010 0301 	ands.w	r3, r0, #1
 800750e:	d00a      	beq.n	8007526 <__swsetup_r+0x9e>
 8007510:	2300      	movs	r3, #0
 8007512:	60a3      	str	r3, [r4, #8]
 8007514:	6963      	ldr	r3, [r4, #20]
 8007516:	425b      	negs	r3, r3
 8007518:	61a3      	str	r3, [r4, #24]
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	b943      	cbnz	r3, 8007530 <__swsetup_r+0xa8>
 800751e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007522:	d1c4      	bne.n	80074ae <__swsetup_r+0x26>
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	0781      	lsls	r1, r0, #30
 8007528:	bf58      	it	pl
 800752a:	6963      	ldrpl	r3, [r4, #20]
 800752c:	60a3      	str	r3, [r4, #8]
 800752e:	e7f4      	b.n	800751a <__swsetup_r+0x92>
 8007530:	2000      	movs	r0, #0
 8007532:	e7f7      	b.n	8007524 <__swsetup_r+0x9c>
 8007534:	2000006c 	.word	0x2000006c

08007538 <memset>:
 8007538:	4402      	add	r2, r0
 800753a:	4603      	mov	r3, r0
 800753c:	4293      	cmp	r3, r2
 800753e:	d100      	bne.n	8007542 <memset+0xa>
 8007540:	4770      	bx	lr
 8007542:	f803 1b01 	strb.w	r1, [r3], #1
 8007546:	e7f9      	b.n	800753c <memset+0x4>

08007548 <_localeconv_r>:
 8007548:	4800      	ldr	r0, [pc, #0]	; (800754c <_localeconv_r+0x4>)
 800754a:	4770      	bx	lr
 800754c:	20000160 	.word	0x20000160

08007550 <_close_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d06      	ldr	r5, [pc, #24]	; (800756c <_close_r+0x1c>)
 8007554:	2300      	movs	r3, #0
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	f7fb f973 	bl	8002846 <_close>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_close_r+0x1a>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_close_r+0x1a>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20000910 	.word	0x20000910

08007570 <_lseek_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	; (8007590 <_lseek_r+0x20>)
 8007574:	4604      	mov	r4, r0
 8007576:	4608      	mov	r0, r1
 8007578:	4611      	mov	r1, r2
 800757a:	2200      	movs	r2, #0
 800757c:	602a      	str	r2, [r5, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	f7fb f988 	bl	8002894 <_lseek>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_lseek_r+0x1e>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_lseek_r+0x1e>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	20000910 	.word	0x20000910

08007594 <_read_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d07      	ldr	r5, [pc, #28]	; (80075b4 <_read_r+0x20>)
 8007598:	4604      	mov	r4, r0
 800759a:	4608      	mov	r0, r1
 800759c:	4611      	mov	r1, r2
 800759e:	2200      	movs	r2, #0
 80075a0:	602a      	str	r2, [r5, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	f7fb f916 	bl	80027d4 <_read>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_read_r+0x1e>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_read_r+0x1e>
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000910 	.word	0x20000910

080075b8 <_write_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d07      	ldr	r5, [pc, #28]	; (80075d8 <_write_r+0x20>)
 80075bc:	4604      	mov	r4, r0
 80075be:	4608      	mov	r0, r1
 80075c0:	4611      	mov	r1, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	602a      	str	r2, [r5, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f7fb f921 	bl	800280e <_write>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_write_r+0x1e>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_write_r+0x1e>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	20000910 	.word	0x20000910

080075dc <__errno>:
 80075dc:	4b01      	ldr	r3, [pc, #4]	; (80075e4 <__errno+0x8>)
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000006c 	.word	0x2000006c

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4d0d      	ldr	r5, [pc, #52]	; (8007620 <__libc_init_array+0x38>)
 80075ec:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	2600      	movs	r6, #0
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	4d0b      	ldr	r5, [pc, #44]	; (8007628 <__libc_init_array+0x40>)
 80075fa:	4c0c      	ldr	r4, [pc, #48]	; (800762c <__libc_init_array+0x44>)
 80075fc:	f004 fd4a 	bl	800c094 <_init>
 8007600:	1b64      	subs	r4, r4, r5
 8007602:	10a4      	asrs	r4, r4, #2
 8007604:	2600      	movs	r6, #0
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	0800d538 	.word	0x0800d538
 8007624:	0800d538 	.word	0x0800d538
 8007628:	0800d538 	.word	0x0800d538
 800762c:	0800d53c 	.word	0x0800d53c

08007630 <__retarget_lock_init_recursive>:
 8007630:	4770      	bx	lr

08007632 <__retarget_lock_acquire_recursive>:
 8007632:	4770      	bx	lr

08007634 <__retarget_lock_release_recursive>:
 8007634:	4770      	bx	lr
	...

08007638 <nanf>:
 8007638:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007640 <nanf+0x8>
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	7fc00000 	.word	0x7fc00000

08007644 <quorem>:
 8007644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	6903      	ldr	r3, [r0, #16]
 800764a:	690c      	ldr	r4, [r1, #16]
 800764c:	42a3      	cmp	r3, r4
 800764e:	4607      	mov	r7, r0
 8007650:	db7e      	blt.n	8007750 <quorem+0x10c>
 8007652:	3c01      	subs	r4, #1
 8007654:	f101 0814 	add.w	r8, r1, #20
 8007658:	f100 0514 	add.w	r5, r0, #20
 800765c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766a:	3301      	adds	r3, #1
 800766c:	429a      	cmp	r2, r3
 800766e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007672:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007676:	fbb2 f6f3 	udiv	r6, r2, r3
 800767a:	d331      	bcc.n	80076e0 <quorem+0x9c>
 800767c:	f04f 0e00 	mov.w	lr, #0
 8007680:	4640      	mov	r0, r8
 8007682:	46ac      	mov	ip, r5
 8007684:	46f2      	mov	sl, lr
 8007686:	f850 2b04 	ldr.w	r2, [r0], #4
 800768a:	b293      	uxth	r3, r2
 800768c:	fb06 e303 	mla	r3, r6, r3, lr
 8007690:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007694:	0c1a      	lsrs	r2, r3, #16
 8007696:	b29b      	uxth	r3, r3
 8007698:	ebaa 0303 	sub.w	r3, sl, r3
 800769c:	f8dc a000 	ldr.w	sl, [ip]
 80076a0:	fa13 f38a 	uxtah	r3, r3, sl
 80076a4:	fb06 220e 	mla	r2, r6, lr, r2
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076b0:	b292      	uxth	r2, r2
 80076b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80076be:	4581      	cmp	r9, r0
 80076c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c4:	f84c 3b04 	str.w	r3, [ip], #4
 80076c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076cc:	d2db      	bcs.n	8007686 <quorem+0x42>
 80076ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80076d2:	b92b      	cbnz	r3, 80076e0 <quorem+0x9c>
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	3b04      	subs	r3, #4
 80076d8:	429d      	cmp	r5, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	d32c      	bcc.n	8007738 <quorem+0xf4>
 80076de:	613c      	str	r4, [r7, #16]
 80076e0:	4638      	mov	r0, r7
 80076e2:	f001 f9f1 	bl	8008ac8 <__mcmp>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	db22      	blt.n	8007730 <quorem+0xec>
 80076ea:	3601      	adds	r6, #1
 80076ec:	4629      	mov	r1, r5
 80076ee:	2000      	movs	r0, #0
 80076f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f4:	f8d1 c000 	ldr.w	ip, [r1]
 80076f8:	b293      	uxth	r3, r2
 80076fa:	1ac3      	subs	r3, r0, r3
 80076fc:	0c12      	lsrs	r2, r2, #16
 80076fe:	fa13 f38c 	uxtah	r3, r3, ip
 8007702:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007710:	45c1      	cmp	r9, r8
 8007712:	f841 3b04 	str.w	r3, [r1], #4
 8007716:	ea4f 4022 	mov.w	r0, r2, asr #16
 800771a:	d2e9      	bcs.n	80076f0 <quorem+0xac>
 800771c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007724:	b922      	cbnz	r2, 8007730 <quorem+0xec>
 8007726:	3b04      	subs	r3, #4
 8007728:	429d      	cmp	r5, r3
 800772a:	461a      	mov	r2, r3
 800772c:	d30a      	bcc.n	8007744 <quorem+0x100>
 800772e:	613c      	str	r4, [r7, #16]
 8007730:	4630      	mov	r0, r6
 8007732:	b003      	add	sp, #12
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	3b04      	subs	r3, #4
 800773c:	2a00      	cmp	r2, #0
 800773e:	d1ce      	bne.n	80076de <quorem+0x9a>
 8007740:	3c01      	subs	r4, #1
 8007742:	e7c9      	b.n	80076d8 <quorem+0x94>
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	3b04      	subs	r3, #4
 8007748:	2a00      	cmp	r2, #0
 800774a:	d1f0      	bne.n	800772e <quorem+0xea>
 800774c:	3c01      	subs	r4, #1
 800774e:	e7eb      	b.n	8007728 <quorem+0xe4>
 8007750:	2000      	movs	r0, #0
 8007752:	e7ee      	b.n	8007732 <quorem+0xee>
 8007754:	0000      	movs	r0, r0
	...

08007758 <_dtoa_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b04 	vpush	{d8-d9}
 8007760:	69c5      	ldr	r5, [r0, #28]
 8007762:	b093      	sub	sp, #76	; 0x4c
 8007764:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007768:	ec57 6b10 	vmov	r6, r7, d0
 800776c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007770:	9107      	str	r1, [sp, #28]
 8007772:	4604      	mov	r4, r0
 8007774:	920a      	str	r2, [sp, #40]	; 0x28
 8007776:	930d      	str	r3, [sp, #52]	; 0x34
 8007778:	b975      	cbnz	r5, 8007798 <_dtoa_r+0x40>
 800777a:	2010      	movs	r0, #16
 800777c:	f000 fe2a 	bl	80083d4 <malloc>
 8007780:	4602      	mov	r2, r0
 8007782:	61e0      	str	r0, [r4, #28]
 8007784:	b920      	cbnz	r0, 8007790 <_dtoa_r+0x38>
 8007786:	4bae      	ldr	r3, [pc, #696]	; (8007a40 <_dtoa_r+0x2e8>)
 8007788:	21ef      	movs	r1, #239	; 0xef
 800778a:	48ae      	ldr	r0, [pc, #696]	; (8007a44 <_dtoa_r+0x2ec>)
 800778c:	f002 fe70 	bl	800a470 <__assert_func>
 8007790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007794:	6005      	str	r5, [r0, #0]
 8007796:	60c5      	str	r5, [r0, #12]
 8007798:	69e3      	ldr	r3, [r4, #28]
 800779a:	6819      	ldr	r1, [r3, #0]
 800779c:	b151      	cbz	r1, 80077b4 <_dtoa_r+0x5c>
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	604a      	str	r2, [r1, #4]
 80077a2:	2301      	movs	r3, #1
 80077a4:	4093      	lsls	r3, r2
 80077a6:	608b      	str	r3, [r1, #8]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 ff07 	bl	80085bc <_Bfree>
 80077ae:	69e3      	ldr	r3, [r4, #28]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	1e3b      	subs	r3, r7, #0
 80077b6:	bfbb      	ittet	lt
 80077b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077bc:	9303      	strlt	r3, [sp, #12]
 80077be:	2300      	movge	r3, #0
 80077c0:	2201      	movlt	r2, #1
 80077c2:	bfac      	ite	ge
 80077c4:	f8c8 3000 	strge.w	r3, [r8]
 80077c8:	f8c8 2000 	strlt.w	r2, [r8]
 80077cc:	4b9e      	ldr	r3, [pc, #632]	; (8007a48 <_dtoa_r+0x2f0>)
 80077ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077d2:	ea33 0308 	bics.w	r3, r3, r8
 80077d6:	d11b      	bne.n	8007810 <_dtoa_r+0xb8>
 80077d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077da:	f242 730f 	movw	r3, #9999	; 0x270f
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077e4:	4333      	orrs	r3, r6
 80077e6:	f000 8593 	beq.w	8008310 <_dtoa_r+0xbb8>
 80077ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ec:	b963      	cbnz	r3, 8007808 <_dtoa_r+0xb0>
 80077ee:	4b97      	ldr	r3, [pc, #604]	; (8007a4c <_dtoa_r+0x2f4>)
 80077f0:	e027      	b.n	8007842 <_dtoa_r+0xea>
 80077f2:	4b97      	ldr	r3, [pc, #604]	; (8007a50 <_dtoa_r+0x2f8>)
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	9800      	ldr	r0, [sp, #0]
 80077fe:	b013      	add	sp, #76	; 0x4c
 8007800:	ecbd 8b04 	vpop	{d8-d9}
 8007804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007808:	4b90      	ldr	r3, [pc, #576]	; (8007a4c <_dtoa_r+0x2f4>)
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	3303      	adds	r3, #3
 800780e:	e7f3      	b.n	80077f8 <_dtoa_r+0xa0>
 8007810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	ec51 0b17 	vmov	r0, r1, d7
 800781a:	eeb0 8a47 	vmov.f32	s16, s14
 800781e:	eef0 8a67 	vmov.f32	s17, s15
 8007822:	2300      	movs	r3, #0
 8007824:	f7f9 f978 	bl	8000b18 <__aeabi_dcmpeq>
 8007828:	4681      	mov	r9, r0
 800782a:	b160      	cbz	r0, 8007846 <_dtoa_r+0xee>
 800782c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782e:	2301      	movs	r3, #1
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8568 	beq.w	800830a <_dtoa_r+0xbb2>
 800783a:	4b86      	ldr	r3, [pc, #536]	; (8007a54 <_dtoa_r+0x2fc>)
 800783c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	3b01      	subs	r3, #1
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	e7da      	b.n	80077fc <_dtoa_r+0xa4>
 8007846:	aa10      	add	r2, sp, #64	; 0x40
 8007848:	a911      	add	r1, sp, #68	; 0x44
 800784a:	4620      	mov	r0, r4
 800784c:	eeb0 0a48 	vmov.f32	s0, s16
 8007850:	eef0 0a68 	vmov.f32	s1, s17
 8007854:	f001 fa4e 	bl	8008cf4 <__d2b>
 8007858:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800785c:	4682      	mov	sl, r0
 800785e:	2d00      	cmp	r5, #0
 8007860:	d07f      	beq.n	8007962 <_dtoa_r+0x20a>
 8007862:	ee18 3a90 	vmov	r3, s17
 8007866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800786e:	ec51 0b18 	vmov	r0, r1, d8
 8007872:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800787a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800787e:	4619      	mov	r1, r3
 8007880:	2200      	movs	r2, #0
 8007882:	4b75      	ldr	r3, [pc, #468]	; (8007a58 <_dtoa_r+0x300>)
 8007884:	f7f8 fd28 	bl	80002d8 <__aeabi_dsub>
 8007888:	a367      	add	r3, pc, #412	; (adr r3, 8007a28 <_dtoa_r+0x2d0>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fedb 	bl	8000648 <__aeabi_dmul>
 8007892:	a367      	add	r3, pc, #412	; (adr r3, 8007a30 <_dtoa_r+0x2d8>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fd20 	bl	80002dc <__adddf3>
 800789c:	4606      	mov	r6, r0
 800789e:	4628      	mov	r0, r5
 80078a0:	460f      	mov	r7, r1
 80078a2:	f7f8 fe67 	bl	8000574 <__aeabi_i2d>
 80078a6:	a364      	add	r3, pc, #400	; (adr r3, 8007a38 <_dtoa_r+0x2e0>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f8 fecc 	bl	8000648 <__aeabi_dmul>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fd10 	bl	80002dc <__adddf3>
 80078bc:	4606      	mov	r6, r0
 80078be:	460f      	mov	r7, r1
 80078c0:	f7f9 f972 	bl	8000ba8 <__aeabi_d2iz>
 80078c4:	2200      	movs	r2, #0
 80078c6:	4683      	mov	fp, r0
 80078c8:	2300      	movs	r3, #0
 80078ca:	4630      	mov	r0, r6
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7f9 f92d 	bl	8000b2c <__aeabi_dcmplt>
 80078d2:	b148      	cbz	r0, 80078e8 <_dtoa_r+0x190>
 80078d4:	4658      	mov	r0, fp
 80078d6:	f7f8 fe4d 	bl	8000574 <__aeabi_i2d>
 80078da:	4632      	mov	r2, r6
 80078dc:	463b      	mov	r3, r7
 80078de:	f7f9 f91b 	bl	8000b18 <__aeabi_dcmpeq>
 80078e2:	b908      	cbnz	r0, 80078e8 <_dtoa_r+0x190>
 80078e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078e8:	f1bb 0f16 	cmp.w	fp, #22
 80078ec:	d857      	bhi.n	800799e <_dtoa_r+0x246>
 80078ee:	4b5b      	ldr	r3, [pc, #364]	; (8007a5c <_dtoa_r+0x304>)
 80078f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	ec51 0b18 	vmov	r0, r1, d8
 80078fc:	f7f9 f916 	bl	8000b2c <__aeabi_dcmplt>
 8007900:	2800      	cmp	r0, #0
 8007902:	d04e      	beq.n	80079a2 <_dtoa_r+0x24a>
 8007904:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007908:	2300      	movs	r3, #0
 800790a:	930c      	str	r3, [sp, #48]	; 0x30
 800790c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800790e:	1b5b      	subs	r3, r3, r5
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	bf45      	ittet	mi
 8007914:	f1c3 0301 	rsbmi	r3, r3, #1
 8007918:	9305      	strmi	r3, [sp, #20]
 800791a:	2300      	movpl	r3, #0
 800791c:	2300      	movmi	r3, #0
 800791e:	9206      	str	r2, [sp, #24]
 8007920:	bf54      	ite	pl
 8007922:	9305      	strpl	r3, [sp, #20]
 8007924:	9306      	strmi	r3, [sp, #24]
 8007926:	f1bb 0f00 	cmp.w	fp, #0
 800792a:	db3c      	blt.n	80079a6 <_dtoa_r+0x24e>
 800792c:	9b06      	ldr	r3, [sp, #24]
 800792e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007932:	445b      	add	r3, fp
 8007934:	9306      	str	r3, [sp, #24]
 8007936:	2300      	movs	r3, #0
 8007938:	9308      	str	r3, [sp, #32]
 800793a:	9b07      	ldr	r3, [sp, #28]
 800793c:	2b09      	cmp	r3, #9
 800793e:	d868      	bhi.n	8007a12 <_dtoa_r+0x2ba>
 8007940:	2b05      	cmp	r3, #5
 8007942:	bfc4      	itt	gt
 8007944:	3b04      	subgt	r3, #4
 8007946:	9307      	strgt	r3, [sp, #28]
 8007948:	9b07      	ldr	r3, [sp, #28]
 800794a:	f1a3 0302 	sub.w	r3, r3, #2
 800794e:	bfcc      	ite	gt
 8007950:	2500      	movgt	r5, #0
 8007952:	2501      	movle	r5, #1
 8007954:	2b03      	cmp	r3, #3
 8007956:	f200 8085 	bhi.w	8007a64 <_dtoa_r+0x30c>
 800795a:	e8df f003 	tbb	[pc, r3]
 800795e:	3b2e      	.short	0x3b2e
 8007960:	5839      	.short	0x5839
 8007962:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007966:	441d      	add	r5, r3
 8007968:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800796c:	2b20      	cmp	r3, #32
 800796e:	bfc1      	itttt	gt
 8007970:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007974:	fa08 f803 	lslgt.w	r8, r8, r3
 8007978:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800797c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007980:	bfd6      	itet	le
 8007982:	f1c3 0320 	rsble	r3, r3, #32
 8007986:	ea48 0003 	orrgt.w	r0, r8, r3
 800798a:	fa06 f003 	lslle.w	r0, r6, r3
 800798e:	f7f8 fde1 	bl	8000554 <__aeabi_ui2d>
 8007992:	2201      	movs	r2, #1
 8007994:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007998:	3d01      	subs	r5, #1
 800799a:	920e      	str	r2, [sp, #56]	; 0x38
 800799c:	e76f      	b.n	800787e <_dtoa_r+0x126>
 800799e:	2301      	movs	r3, #1
 80079a0:	e7b3      	b.n	800790a <_dtoa_r+0x1b2>
 80079a2:	900c      	str	r0, [sp, #48]	; 0x30
 80079a4:	e7b2      	b.n	800790c <_dtoa_r+0x1b4>
 80079a6:	9b05      	ldr	r3, [sp, #20]
 80079a8:	eba3 030b 	sub.w	r3, r3, fp
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	f1cb 0300 	rsb	r3, fp, #0
 80079b2:	9308      	str	r3, [sp, #32]
 80079b4:	2300      	movs	r3, #0
 80079b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80079b8:	e7bf      	b.n	800793a <_dtoa_r+0x1e2>
 80079ba:	2300      	movs	r3, #0
 80079bc:	9309      	str	r3, [sp, #36]	; 0x24
 80079be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dc52      	bgt.n	8007a6a <_dtoa_r+0x312>
 80079c4:	2301      	movs	r3, #1
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	461a      	mov	r2, r3
 80079cc:	920a      	str	r2, [sp, #40]	; 0x28
 80079ce:	e00b      	b.n	80079e8 <_dtoa_r+0x290>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e7f3      	b.n	80079bc <_dtoa_r+0x264>
 80079d4:	2300      	movs	r3, #0
 80079d6:	9309      	str	r3, [sp, #36]	; 0x24
 80079d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079da:	445b      	add	r3, fp
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	3301      	adds	r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	bfb8      	it	lt
 80079e6:	2301      	movlt	r3, #1
 80079e8:	69e0      	ldr	r0, [r4, #28]
 80079ea:	2100      	movs	r1, #0
 80079ec:	2204      	movs	r2, #4
 80079ee:	f102 0614 	add.w	r6, r2, #20
 80079f2:	429e      	cmp	r6, r3
 80079f4:	d93d      	bls.n	8007a72 <_dtoa_r+0x31a>
 80079f6:	6041      	str	r1, [r0, #4]
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 fd9f 	bl	800853c <_Balloc>
 80079fe:	9000      	str	r0, [sp, #0]
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d139      	bne.n	8007a78 <_dtoa_r+0x320>
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <_dtoa_r+0x308>)
 8007a06:	4602      	mov	r2, r0
 8007a08:	f240 11af 	movw	r1, #431	; 0x1af
 8007a0c:	e6bd      	b.n	800778a <_dtoa_r+0x32>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e7e1      	b.n	80079d6 <_dtoa_r+0x27e>
 8007a12:	2501      	movs	r5, #1
 8007a14:	2300      	movs	r3, #0
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	9509      	str	r5, [sp, #36]	; 0x24
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2312      	movs	r3, #18
 8007a26:	e7d1      	b.n	80079cc <_dtoa_r+0x274>
 8007a28:	636f4361 	.word	0x636f4361
 8007a2c:	3fd287a7 	.word	0x3fd287a7
 8007a30:	8b60c8b3 	.word	0x8b60c8b3
 8007a34:	3fc68a28 	.word	0x3fc68a28
 8007a38:	509f79fb 	.word	0x509f79fb
 8007a3c:	3fd34413 	.word	0x3fd34413
 8007a40:	0800d0aa 	.word	0x0800d0aa
 8007a44:	0800d0c1 	.word	0x0800d0c1
 8007a48:	7ff00000 	.word	0x7ff00000
 8007a4c:	0800d0a6 	.word	0x0800d0a6
 8007a50:	0800d09d 	.word	0x0800d09d
 8007a54:	0800d075 	.word	0x0800d075
 8007a58:	3ff80000 	.word	0x3ff80000
 8007a5c:	0800d1b0 	.word	0x0800d1b0
 8007a60:	0800d119 	.word	0x0800d119
 8007a64:	2301      	movs	r3, #1
 8007a66:	9309      	str	r3, [sp, #36]	; 0x24
 8007a68:	e7d7      	b.n	8007a1a <_dtoa_r+0x2c2>
 8007a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	e7ba      	b.n	80079e8 <_dtoa_r+0x290>
 8007a72:	3101      	adds	r1, #1
 8007a74:	0052      	lsls	r2, r2, #1
 8007a76:	e7ba      	b.n	80079ee <_dtoa_r+0x296>
 8007a78:	69e3      	ldr	r3, [r4, #28]
 8007a7a:	9a00      	ldr	r2, [sp, #0]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	2b0e      	cmp	r3, #14
 8007a82:	f200 80a8 	bhi.w	8007bd6 <_dtoa_r+0x47e>
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	f000 80a5 	beq.w	8007bd6 <_dtoa_r+0x47e>
 8007a8c:	f1bb 0f00 	cmp.w	fp, #0
 8007a90:	dd38      	ble.n	8007b04 <_dtoa_r+0x3ac>
 8007a92:	4bc0      	ldr	r3, [pc, #768]	; (8007d94 <_dtoa_r+0x63c>)
 8007a94:	f00b 020f 	and.w	r2, fp, #15
 8007a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007aa0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007aa4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007aa8:	d019      	beq.n	8007ade <_dtoa_r+0x386>
 8007aaa:	4bbb      	ldr	r3, [pc, #748]	; (8007d98 <_dtoa_r+0x640>)
 8007aac:	ec51 0b18 	vmov	r0, r1, d8
 8007ab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab4:	f7f8 fef2 	bl	800089c <__aeabi_ddiv>
 8007ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007abc:	f008 080f 	and.w	r8, r8, #15
 8007ac0:	2503      	movs	r5, #3
 8007ac2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d98 <_dtoa_r+0x640>
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	d10a      	bne.n	8007ae2 <_dtoa_r+0x38a>
 8007acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad0:	4632      	mov	r2, r6
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	f7f8 fee2 	bl	800089c <__aeabi_ddiv>
 8007ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007adc:	e02b      	b.n	8007b36 <_dtoa_r+0x3de>
 8007ade:	2502      	movs	r5, #2
 8007ae0:	e7ef      	b.n	8007ac2 <_dtoa_r+0x36a>
 8007ae2:	f018 0f01 	tst.w	r8, #1
 8007ae6:	d008      	beq.n	8007afa <_dtoa_r+0x3a2>
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007af0:	f7f8 fdaa 	bl	8000648 <__aeabi_dmul>
 8007af4:	3501      	adds	r5, #1
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007afe:	f109 0908 	add.w	r9, r9, #8
 8007b02:	e7e0      	b.n	8007ac6 <_dtoa_r+0x36e>
 8007b04:	f000 809f 	beq.w	8007c46 <_dtoa_r+0x4ee>
 8007b08:	f1cb 0600 	rsb	r6, fp, #0
 8007b0c:	4ba1      	ldr	r3, [pc, #644]	; (8007d94 <_dtoa_r+0x63c>)
 8007b0e:	4fa2      	ldr	r7, [pc, #648]	; (8007d98 <_dtoa_r+0x640>)
 8007b10:	f006 020f 	and.w	r2, r6, #15
 8007b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	ec51 0b18 	vmov	r0, r1, d8
 8007b20:	f7f8 fd92 	bl	8000648 <__aeabi_dmul>
 8007b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b28:	1136      	asrs	r6, r6, #4
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2502      	movs	r5, #2
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d17e      	bne.n	8007c30 <_dtoa_r+0x4d8>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1d0      	bne.n	8007ad8 <_dtoa_r+0x380>
 8007b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8084 	beq.w	8007c4a <_dtoa_r+0x4f2>
 8007b42:	4b96      	ldr	r3, [pc, #600]	; (8007d9c <_dtoa_r+0x644>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	4640      	mov	r0, r8
 8007b48:	4649      	mov	r1, r9
 8007b4a:	f7f8 ffef 	bl	8000b2c <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d07b      	beq.n	8007c4a <_dtoa_r+0x4f2>
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d078      	beq.n	8007c4a <_dtoa_r+0x4f2>
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd39      	ble.n	8007bd2 <_dtoa_r+0x47a>
 8007b5e:	4b90      	ldr	r3, [pc, #576]	; (8007da0 <_dtoa_r+0x648>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	4640      	mov	r0, r8
 8007b64:	4649      	mov	r1, r9
 8007b66:	f7f8 fd6f 	bl	8000648 <__aeabi_dmul>
 8007b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6e:	9e01      	ldr	r6, [sp, #4]
 8007b70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b74:	3501      	adds	r5, #1
 8007b76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7f8 fcfa 	bl	8000574 <__aeabi_i2d>
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	f7f8 fd60 	bl	8000648 <__aeabi_dmul>
 8007b88:	4b86      	ldr	r3, [pc, #536]	; (8007da4 <_dtoa_r+0x64c>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f7f8 fba6 	bl	80002dc <__adddf3>
 8007b90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	d158      	bne.n	8007c50 <_dtoa_r+0x4f8>
 8007b9e:	4b82      	ldr	r3, [pc, #520]	; (8007da8 <_dtoa_r+0x650>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	f7f8 fb97 	bl	80002d8 <__aeabi_dsub>
 8007baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bae:	4680      	mov	r8, r0
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	f7f8 ffd9 	bl	8000b68 <__aeabi_dcmpgt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f040 8296 	bne.w	80080e8 <_dtoa_r+0x990>
 8007bbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 ffb0 	bl	8000b2c <__aeabi_dcmplt>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f040 8289 	bne.w	80080e4 <_dtoa_r+0x98c>
 8007bd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f2c0 814e 	blt.w	8007e7a <_dtoa_r+0x722>
 8007bde:	f1bb 0f0e 	cmp.w	fp, #14
 8007be2:	f300 814a 	bgt.w	8007e7a <_dtoa_r+0x722>
 8007be6:	4b6b      	ldr	r3, [pc, #428]	; (8007d94 <_dtoa_r+0x63c>)
 8007be8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f280 80dc 	bge.w	8007db0 <_dtoa_r+0x658>
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f300 80d8 	bgt.w	8007db0 <_dtoa_r+0x658>
 8007c00:	f040 826f 	bne.w	80080e2 <_dtoa_r+0x98a>
 8007c04:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <_dtoa_r+0x650>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	4640      	mov	r0, r8
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	f7f8 fd1c 	bl	8000648 <__aeabi_dmul>
 8007c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c14:	f7f8 ff9e 	bl	8000b54 <__aeabi_dcmpge>
 8007c18:	9e04      	ldr	r6, [sp, #16]
 8007c1a:	4637      	mov	r7, r6
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 8245 	bne.w	80080ac <_dtoa_r+0x954>
 8007c22:	9d00      	ldr	r5, [sp, #0]
 8007c24:	2331      	movs	r3, #49	; 0x31
 8007c26:	f805 3b01 	strb.w	r3, [r5], #1
 8007c2a:	f10b 0b01 	add.w	fp, fp, #1
 8007c2e:	e241      	b.n	80080b4 <_dtoa_r+0x95c>
 8007c30:	07f2      	lsls	r2, r6, #31
 8007c32:	d505      	bpl.n	8007c40 <_dtoa_r+0x4e8>
 8007c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c38:	f7f8 fd06 	bl	8000648 <__aeabi_dmul>
 8007c3c:	3501      	adds	r5, #1
 8007c3e:	2301      	movs	r3, #1
 8007c40:	1076      	asrs	r6, r6, #1
 8007c42:	3708      	adds	r7, #8
 8007c44:	e773      	b.n	8007b2e <_dtoa_r+0x3d6>
 8007c46:	2502      	movs	r5, #2
 8007c48:	e775      	b.n	8007b36 <_dtoa_r+0x3de>
 8007c4a:	9e04      	ldr	r6, [sp, #16]
 8007c4c:	465f      	mov	r7, fp
 8007c4e:	e792      	b.n	8007b76 <_dtoa_r+0x41e>
 8007c50:	9900      	ldr	r1, [sp, #0]
 8007c52:	4b50      	ldr	r3, [pc, #320]	; (8007d94 <_dtoa_r+0x63c>)
 8007c54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c58:	4431      	add	r1, r6
 8007c5a:	9102      	str	r1, [sp, #8]
 8007c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c5e:	eeb0 9a47 	vmov.f32	s18, s14
 8007c62:	eef0 9a67 	vmov.f32	s19, s15
 8007c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c6e:	2900      	cmp	r1, #0
 8007c70:	d044      	beq.n	8007cfc <_dtoa_r+0x5a4>
 8007c72:	494e      	ldr	r1, [pc, #312]	; (8007dac <_dtoa_r+0x654>)
 8007c74:	2000      	movs	r0, #0
 8007c76:	f7f8 fe11 	bl	800089c <__aeabi_ddiv>
 8007c7a:	ec53 2b19 	vmov	r2, r3, d9
 8007c7e:	f7f8 fb2b 	bl	80002d8 <__aeabi_dsub>
 8007c82:	9d00      	ldr	r5, [sp, #0]
 8007c84:	ec41 0b19 	vmov	d9, r0, r1
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7f8 ff8c 	bl	8000ba8 <__aeabi_d2iz>
 8007c90:	4606      	mov	r6, r0
 8007c92:	f7f8 fc6f 	bl	8000574 <__aeabi_i2d>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fb1b 	bl	80002d8 <__aeabi_dsub>
 8007ca2:	3630      	adds	r6, #48	; 0x30
 8007ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca8:	ec53 2b19 	vmov	r2, r3, d9
 8007cac:	4680      	mov	r8, r0
 8007cae:	4689      	mov	r9, r1
 8007cb0:	f7f8 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d164      	bne.n	8007d82 <_dtoa_r+0x62a>
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	4937      	ldr	r1, [pc, #220]	; (8007d9c <_dtoa_r+0x644>)
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f7f8 fb0a 	bl	80002d8 <__aeabi_dsub>
 8007cc4:	ec53 2b19 	vmov	r2, r3, d9
 8007cc8:	f7f8 ff30 	bl	8000b2c <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	f040 80b6 	bne.w	8007e3e <_dtoa_r+0x6e6>
 8007cd2:	9b02      	ldr	r3, [sp, #8]
 8007cd4:	429d      	cmp	r5, r3
 8007cd6:	f43f af7c 	beq.w	8007bd2 <_dtoa_r+0x47a>
 8007cda:	4b31      	ldr	r3, [pc, #196]	; (8007da0 <_dtoa_r+0x648>)
 8007cdc:	ec51 0b19 	vmov	r0, r1, d9
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fcb1 	bl	8000648 <__aeabi_dmul>
 8007ce6:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <_dtoa_r+0x648>)
 8007ce8:	ec41 0b19 	vmov	d9, r0, r1
 8007cec:	2200      	movs	r2, #0
 8007cee:	4640      	mov	r0, r8
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	f7f8 fca9 	bl	8000648 <__aeabi_dmul>
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	e7c5      	b.n	8007c88 <_dtoa_r+0x530>
 8007cfc:	ec51 0b17 	vmov	r0, r1, d7
 8007d00:	f7f8 fca2 	bl	8000648 <__aeabi_dmul>
 8007d04:	9b02      	ldr	r3, [sp, #8]
 8007d06:	9d00      	ldr	r5, [sp, #0]
 8007d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d0a:	ec41 0b19 	vmov	d9, r0, r1
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4640      	mov	r0, r8
 8007d12:	f7f8 ff49 	bl	8000ba8 <__aeabi_d2iz>
 8007d16:	4606      	mov	r6, r0
 8007d18:	f7f8 fc2c 	bl	8000574 <__aeabi_i2d>
 8007d1c:	3630      	adds	r6, #48	; 0x30
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4640      	mov	r0, r8
 8007d24:	4649      	mov	r1, r9
 8007d26:	f7f8 fad7 	bl	80002d8 <__aeabi_dsub>
 8007d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d2e:	9b02      	ldr	r3, [sp, #8]
 8007d30:	429d      	cmp	r5, r3
 8007d32:	4680      	mov	r8, r0
 8007d34:	4689      	mov	r9, r1
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	d124      	bne.n	8007d86 <_dtoa_r+0x62e>
 8007d3c:	4b1b      	ldr	r3, [pc, #108]	; (8007dac <_dtoa_r+0x654>)
 8007d3e:	ec51 0b19 	vmov	r0, r1, d9
 8007d42:	f7f8 facb 	bl	80002dc <__adddf3>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 ff0b 	bl	8000b68 <__aeabi_dcmpgt>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d173      	bne.n	8007e3e <_dtoa_r+0x6e6>
 8007d56:	ec53 2b19 	vmov	r2, r3, d9
 8007d5a:	4914      	ldr	r1, [pc, #80]	; (8007dac <_dtoa_r+0x654>)
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	f7f8 fabb 	bl	80002d8 <__aeabi_dsub>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fedf 	bl	8000b2c <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f43f af2f 	beq.w	8007bd2 <_dtoa_r+0x47a>
 8007d74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d76:	1e6b      	subs	r3, r5, #1
 8007d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d7e:	2b30      	cmp	r3, #48	; 0x30
 8007d80:	d0f8      	beq.n	8007d74 <_dtoa_r+0x61c>
 8007d82:	46bb      	mov	fp, r7
 8007d84:	e04a      	b.n	8007e1c <_dtoa_r+0x6c4>
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <_dtoa_r+0x648>)
 8007d88:	f7f8 fc5e 	bl	8000648 <__aeabi_dmul>
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	4689      	mov	r9, r1
 8007d90:	e7bd      	b.n	8007d0e <_dtoa_r+0x5b6>
 8007d92:	bf00      	nop
 8007d94:	0800d1b0 	.word	0x0800d1b0
 8007d98:	0800d188 	.word	0x0800d188
 8007d9c:	3ff00000 	.word	0x3ff00000
 8007da0:	40240000 	.word	0x40240000
 8007da4:	401c0000 	.word	0x401c0000
 8007da8:	40140000 	.word	0x40140000
 8007dac:	3fe00000 	.word	0x3fe00000
 8007db0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007db4:	9d00      	ldr	r5, [sp, #0]
 8007db6:	4642      	mov	r2, r8
 8007db8:	464b      	mov	r3, r9
 8007dba:	4630      	mov	r0, r6
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	f7f8 fd6d 	bl	800089c <__aeabi_ddiv>
 8007dc2:	f7f8 fef1 	bl	8000ba8 <__aeabi_d2iz>
 8007dc6:	9001      	str	r0, [sp, #4]
 8007dc8:	f7f8 fbd4 	bl	8000574 <__aeabi_i2d>
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	f7f8 fc3a 	bl	8000648 <__aeabi_dmul>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fa7c 	bl	80002d8 <__aeabi_dsub>
 8007de0:	9e01      	ldr	r6, [sp, #4]
 8007de2:	9f04      	ldr	r7, [sp, #16]
 8007de4:	3630      	adds	r6, #48	; 0x30
 8007de6:	f805 6b01 	strb.w	r6, [r5], #1
 8007dea:	9e00      	ldr	r6, [sp, #0]
 8007dec:	1bae      	subs	r6, r5, r6
 8007dee:	42b7      	cmp	r7, r6
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	d134      	bne.n	8007e60 <_dtoa_r+0x708>
 8007df6:	f7f8 fa71 	bl	80002dc <__adddf3>
 8007dfa:	4642      	mov	r2, r8
 8007dfc:	464b      	mov	r3, r9
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	f7f8 feb1 	bl	8000b68 <__aeabi_dcmpgt>
 8007e06:	b9c8      	cbnz	r0, 8007e3c <_dtoa_r+0x6e4>
 8007e08:	4642      	mov	r2, r8
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	f7f8 fe82 	bl	8000b18 <__aeabi_dcmpeq>
 8007e14:	b110      	cbz	r0, 8007e1c <_dtoa_r+0x6c4>
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	07db      	lsls	r3, r3, #31
 8007e1a:	d40f      	bmi.n	8007e3c <_dtoa_r+0x6e4>
 8007e1c:	4651      	mov	r1, sl
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 fbcc 	bl	80085bc <_Bfree>
 8007e24:	2300      	movs	r3, #0
 8007e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e28:	702b      	strb	r3, [r5, #0]
 8007e2a:	f10b 0301 	add.w	r3, fp, #1
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f43f ace2 	beq.w	80077fc <_dtoa_r+0xa4>
 8007e38:	601d      	str	r5, [r3, #0]
 8007e3a:	e4df      	b.n	80077fc <_dtoa_r+0xa4>
 8007e3c:	465f      	mov	r7, fp
 8007e3e:	462b      	mov	r3, r5
 8007e40:	461d      	mov	r5, r3
 8007e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e46:	2a39      	cmp	r2, #57	; 0x39
 8007e48:	d106      	bne.n	8007e58 <_dtoa_r+0x700>
 8007e4a:	9a00      	ldr	r2, [sp, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d1f7      	bne.n	8007e40 <_dtoa_r+0x6e8>
 8007e50:	9900      	ldr	r1, [sp, #0]
 8007e52:	2230      	movs	r2, #48	; 0x30
 8007e54:	3701      	adds	r7, #1
 8007e56:	700a      	strb	r2, [r1, #0]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	e790      	b.n	8007d82 <_dtoa_r+0x62a>
 8007e60:	4ba3      	ldr	r3, [pc, #652]	; (80080f0 <_dtoa_r+0x998>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	f7f8 fbf0 	bl	8000648 <__aeabi_dmul>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	f7f8 fe52 	bl	8000b18 <__aeabi_dcmpeq>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d09e      	beq.n	8007db6 <_dtoa_r+0x65e>
 8007e78:	e7d0      	b.n	8007e1c <_dtoa_r+0x6c4>
 8007e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e7c:	2a00      	cmp	r2, #0
 8007e7e:	f000 80ca 	beq.w	8008016 <_dtoa_r+0x8be>
 8007e82:	9a07      	ldr	r2, [sp, #28]
 8007e84:	2a01      	cmp	r2, #1
 8007e86:	f300 80ad 	bgt.w	8007fe4 <_dtoa_r+0x88c>
 8007e8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	f000 80a5 	beq.w	8007fdc <_dtoa_r+0x884>
 8007e92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e96:	9e08      	ldr	r6, [sp, #32]
 8007e98:	9d05      	ldr	r5, [sp, #20]
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	441a      	add	r2, r3
 8007e9e:	9205      	str	r2, [sp, #20]
 8007ea0:	9a06      	ldr	r2, [sp, #24]
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	441a      	add	r2, r3
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	9206      	str	r2, [sp, #24]
 8007eaa:	f000 fc87 	bl	80087bc <__i2b>
 8007eae:	4607      	mov	r7, r0
 8007eb0:	b165      	cbz	r5, 8007ecc <_dtoa_r+0x774>
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd09      	ble.n	8007ecc <_dtoa_r+0x774>
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	9a05      	ldr	r2, [sp, #20]
 8007ebc:	bfa8      	it	ge
 8007ebe:	462b      	movge	r3, r5
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	9205      	str	r2, [sp, #20]
 8007ec4:	9a06      	ldr	r2, [sp, #24]
 8007ec6:	1aed      	subs	r5, r5, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	9306      	str	r3, [sp, #24]
 8007ecc:	9b08      	ldr	r3, [sp, #32]
 8007ece:	b1f3      	cbz	r3, 8007f0e <_dtoa_r+0x7b6>
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80a3 	beq.w	800801e <_dtoa_r+0x8c6>
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	dd10      	ble.n	8007efe <_dtoa_r+0x7a6>
 8007edc:	4639      	mov	r1, r7
 8007ede:	4632      	mov	r2, r6
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fd2b 	bl	800893c <__pow5mult>
 8007ee6:	4652      	mov	r2, sl
 8007ee8:	4601      	mov	r1, r0
 8007eea:	4607      	mov	r7, r0
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fc7b 	bl	80087e8 <__multiply>
 8007ef2:	4651      	mov	r1, sl
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fb60 	bl	80085bc <_Bfree>
 8007efc:	46c2      	mov	sl, r8
 8007efe:	9b08      	ldr	r3, [sp, #32]
 8007f00:	1b9a      	subs	r2, r3, r6
 8007f02:	d004      	beq.n	8007f0e <_dtoa_r+0x7b6>
 8007f04:	4651      	mov	r1, sl
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fd18 	bl	800893c <__pow5mult>
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	2101      	movs	r1, #1
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fc53 	bl	80087bc <__i2b>
 8007f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	f340 8081 	ble.w	8008022 <_dtoa_r+0x8ca>
 8007f20:	461a      	mov	r2, r3
 8007f22:	4601      	mov	r1, r0
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fd09 	bl	800893c <__pow5mult>
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	4606      	mov	r6, r0
 8007f30:	dd7a      	ble.n	8008028 <_dtoa_r+0x8d0>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	6933      	ldr	r3, [r6, #16]
 8007f38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f3c:	6918      	ldr	r0, [r3, #16]
 8007f3e:	f000 fbef 	bl	8008720 <__hi0bits>
 8007f42:	f1c0 0020 	rsb	r0, r0, #32
 8007f46:	9b06      	ldr	r3, [sp, #24]
 8007f48:	4418      	add	r0, r3
 8007f4a:	f010 001f 	ands.w	r0, r0, #31
 8007f4e:	f000 8094 	beq.w	800807a <_dtoa_r+0x922>
 8007f52:	f1c0 0320 	rsb	r3, r0, #32
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	f340 8085 	ble.w	8008066 <_dtoa_r+0x90e>
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	f1c0 001c 	rsb	r0, r0, #28
 8007f62:	4403      	add	r3, r0
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	9b06      	ldr	r3, [sp, #24]
 8007f68:	4403      	add	r3, r0
 8007f6a:	4405      	add	r5, r0
 8007f6c:	9306      	str	r3, [sp, #24]
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dd05      	ble.n	8007f80 <_dtoa_r+0x828>
 8007f74:	4651      	mov	r1, sl
 8007f76:	461a      	mov	r2, r3
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fd39 	bl	80089f0 <__lshift>
 8007f7e:	4682      	mov	sl, r0
 8007f80:	9b06      	ldr	r3, [sp, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd05      	ble.n	8007f92 <_dtoa_r+0x83a>
 8007f86:	4631      	mov	r1, r6
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fd30 	bl	80089f0 <__lshift>
 8007f90:	4606      	mov	r6, r0
 8007f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d072      	beq.n	800807e <_dtoa_r+0x926>
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	f000 fd94 	bl	8008ac8 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	da6c      	bge.n	800807e <_dtoa_r+0x926>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4651      	mov	r1, sl
 8007fa8:	220a      	movs	r2, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 fb28 	bl	8008600 <__multadd>
 8007fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 81b0 	beq.w	800831e <_dtoa_r+0xbc6>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	220a      	movs	r2, #10
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fb1b 	bl	8008600 <__multadd>
 8007fca:	9b01      	ldr	r3, [sp, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	4607      	mov	r7, r0
 8007fd0:	f300 8096 	bgt.w	8008100 <_dtoa_r+0x9a8>
 8007fd4:	9b07      	ldr	r3, [sp, #28]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	dc59      	bgt.n	800808e <_dtoa_r+0x936>
 8007fda:	e091      	b.n	8008100 <_dtoa_r+0x9a8>
 8007fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fe2:	e758      	b.n	8007e96 <_dtoa_r+0x73e>
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	1e5e      	subs	r6, r3, #1
 8007fe8:	9b08      	ldr	r3, [sp, #32]
 8007fea:	42b3      	cmp	r3, r6
 8007fec:	bfbf      	itttt	lt
 8007fee:	9b08      	ldrlt	r3, [sp, #32]
 8007ff0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ff2:	9608      	strlt	r6, [sp, #32]
 8007ff4:	1af3      	sublt	r3, r6, r3
 8007ff6:	bfb4      	ite	lt
 8007ff8:	18d2      	addlt	r2, r2, r3
 8007ffa:	1b9e      	subge	r6, r3, r6
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	bfbc      	itt	lt
 8008000:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008002:	2600      	movlt	r6, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	bfb7      	itett	lt
 8008008:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800800c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008010:	1a9d      	sublt	r5, r3, r2
 8008012:	2300      	movlt	r3, #0
 8008014:	e741      	b.n	8007e9a <_dtoa_r+0x742>
 8008016:	9e08      	ldr	r6, [sp, #32]
 8008018:	9d05      	ldr	r5, [sp, #20]
 800801a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800801c:	e748      	b.n	8007eb0 <_dtoa_r+0x758>
 800801e:	9a08      	ldr	r2, [sp, #32]
 8008020:	e770      	b.n	8007f04 <_dtoa_r+0x7ac>
 8008022:	9b07      	ldr	r3, [sp, #28]
 8008024:	2b01      	cmp	r3, #1
 8008026:	dc19      	bgt.n	800805c <_dtoa_r+0x904>
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	b9bb      	cbnz	r3, 800805c <_dtoa_r+0x904>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008032:	b99b      	cbnz	r3, 800805c <_dtoa_r+0x904>
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800803a:	0d1b      	lsrs	r3, r3, #20
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	b183      	cbz	r3, 8008062 <_dtoa_r+0x90a>
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	3301      	adds	r3, #1
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	9b06      	ldr	r3, [sp, #24]
 8008048:	3301      	adds	r3, #1
 800804a:	9306      	str	r3, [sp, #24]
 800804c:	f04f 0801 	mov.w	r8, #1
 8008050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008052:	2b00      	cmp	r3, #0
 8008054:	f47f af6f 	bne.w	8007f36 <_dtoa_r+0x7de>
 8008058:	2001      	movs	r0, #1
 800805a:	e774      	b.n	8007f46 <_dtoa_r+0x7ee>
 800805c:	f04f 0800 	mov.w	r8, #0
 8008060:	e7f6      	b.n	8008050 <_dtoa_r+0x8f8>
 8008062:	4698      	mov	r8, r3
 8008064:	e7f4      	b.n	8008050 <_dtoa_r+0x8f8>
 8008066:	d082      	beq.n	8007f6e <_dtoa_r+0x816>
 8008068:	9a05      	ldr	r2, [sp, #20]
 800806a:	331c      	adds	r3, #28
 800806c:	441a      	add	r2, r3
 800806e:	9205      	str	r2, [sp, #20]
 8008070:	9a06      	ldr	r2, [sp, #24]
 8008072:	441a      	add	r2, r3
 8008074:	441d      	add	r5, r3
 8008076:	9206      	str	r2, [sp, #24]
 8008078:	e779      	b.n	8007f6e <_dtoa_r+0x816>
 800807a:	4603      	mov	r3, r0
 800807c:	e7f4      	b.n	8008068 <_dtoa_r+0x910>
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc37      	bgt.n	80080f4 <_dtoa_r+0x99c>
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	2b02      	cmp	r3, #2
 8008088:	dd34      	ble.n	80080f4 <_dtoa_r+0x99c>
 800808a:	9b04      	ldr	r3, [sp, #16]
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	b963      	cbnz	r3, 80080ac <_dtoa_r+0x954>
 8008092:	4631      	mov	r1, r6
 8008094:	2205      	movs	r2, #5
 8008096:	4620      	mov	r0, r4
 8008098:	f000 fab2 	bl	8008600 <__multadd>
 800809c:	4601      	mov	r1, r0
 800809e:	4606      	mov	r6, r0
 80080a0:	4650      	mov	r0, sl
 80080a2:	f000 fd11 	bl	8008ac8 <__mcmp>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f73f adbb 	bgt.w	8007c22 <_dtoa_r+0x4ca>
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	9d00      	ldr	r5, [sp, #0]
 80080b0:	ea6f 0b03 	mvn.w	fp, r3
 80080b4:	f04f 0800 	mov.w	r8, #0
 80080b8:	4631      	mov	r1, r6
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 fa7e 	bl	80085bc <_Bfree>
 80080c0:	2f00      	cmp	r7, #0
 80080c2:	f43f aeab 	beq.w	8007e1c <_dtoa_r+0x6c4>
 80080c6:	f1b8 0f00 	cmp.w	r8, #0
 80080ca:	d005      	beq.n	80080d8 <_dtoa_r+0x980>
 80080cc:	45b8      	cmp	r8, r7
 80080ce:	d003      	beq.n	80080d8 <_dtoa_r+0x980>
 80080d0:	4641      	mov	r1, r8
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fa72 	bl	80085bc <_Bfree>
 80080d8:	4639      	mov	r1, r7
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fa6e 	bl	80085bc <_Bfree>
 80080e0:	e69c      	b.n	8007e1c <_dtoa_r+0x6c4>
 80080e2:	2600      	movs	r6, #0
 80080e4:	4637      	mov	r7, r6
 80080e6:	e7e1      	b.n	80080ac <_dtoa_r+0x954>
 80080e8:	46bb      	mov	fp, r7
 80080ea:	4637      	mov	r7, r6
 80080ec:	e599      	b.n	8007c22 <_dtoa_r+0x4ca>
 80080ee:	bf00      	nop
 80080f0:	40240000 	.word	0x40240000
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 80c8 	beq.w	800828c <_dtoa_r+0xb34>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	2d00      	cmp	r5, #0
 8008102:	dd05      	ble.n	8008110 <_dtoa_r+0x9b8>
 8008104:	4639      	mov	r1, r7
 8008106:	462a      	mov	r2, r5
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fc71 	bl	80089f0 <__lshift>
 800810e:	4607      	mov	r7, r0
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	d05b      	beq.n	80081ce <_dtoa_r+0xa76>
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fa0f 	bl	800853c <_Balloc>
 800811e:	4605      	mov	r5, r0
 8008120:	b928      	cbnz	r0, 800812e <_dtoa_r+0x9d6>
 8008122:	4b83      	ldr	r3, [pc, #524]	; (8008330 <_dtoa_r+0xbd8>)
 8008124:	4602      	mov	r2, r0
 8008126:	f240 21ef 	movw	r1, #751	; 0x2ef
 800812a:	f7ff bb2e 	b.w	800778a <_dtoa_r+0x32>
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	0092      	lsls	r2, r2, #2
 8008134:	f107 010c 	add.w	r1, r7, #12
 8008138:	300c      	adds	r0, #12
 800813a:	f002 f981 	bl	800a440 <memcpy>
 800813e:	2201      	movs	r2, #1
 8008140:	4629      	mov	r1, r5
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fc54 	bl	80089f0 <__lshift>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008152:	4413      	add	r3, r2
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	46b8      	mov	r8, r7
 800815e:	9306      	str	r3, [sp, #24]
 8008160:	4607      	mov	r7, r0
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	4631      	mov	r1, r6
 8008166:	3b01      	subs	r3, #1
 8008168:	4650      	mov	r0, sl
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	f7ff fa6a 	bl	8007644 <quorem>
 8008170:	4641      	mov	r1, r8
 8008172:	9002      	str	r0, [sp, #8]
 8008174:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008178:	4650      	mov	r0, sl
 800817a:	f000 fca5 	bl	8008ac8 <__mcmp>
 800817e:	463a      	mov	r2, r7
 8008180:	9005      	str	r0, [sp, #20]
 8008182:	4631      	mov	r1, r6
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fcbb 	bl	8008b00 <__mdiff>
 800818a:	68c2      	ldr	r2, [r0, #12]
 800818c:	4605      	mov	r5, r0
 800818e:	bb02      	cbnz	r2, 80081d2 <_dtoa_r+0xa7a>
 8008190:	4601      	mov	r1, r0
 8008192:	4650      	mov	r0, sl
 8008194:	f000 fc98 	bl	8008ac8 <__mcmp>
 8008198:	4602      	mov	r2, r0
 800819a:	4629      	mov	r1, r5
 800819c:	4620      	mov	r0, r4
 800819e:	9209      	str	r2, [sp, #36]	; 0x24
 80081a0:	f000 fa0c 	bl	80085bc <_Bfree>
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a8:	9d04      	ldr	r5, [sp, #16]
 80081aa:	ea43 0102 	orr.w	r1, r3, r2
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	4319      	orrs	r1, r3
 80081b2:	d110      	bne.n	80081d6 <_dtoa_r+0xa7e>
 80081b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081b8:	d029      	beq.n	800820e <_dtoa_r+0xab6>
 80081ba:	9b05      	ldr	r3, [sp, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd02      	ble.n	80081c6 <_dtoa_r+0xa6e>
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	f883 9000 	strb.w	r9, [r3]
 80081cc:	e774      	b.n	80080b8 <_dtoa_r+0x960>
 80081ce:	4638      	mov	r0, r7
 80081d0:	e7ba      	b.n	8008148 <_dtoa_r+0x9f0>
 80081d2:	2201      	movs	r2, #1
 80081d4:	e7e1      	b.n	800819a <_dtoa_r+0xa42>
 80081d6:	9b05      	ldr	r3, [sp, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db04      	blt.n	80081e6 <_dtoa_r+0xa8e>
 80081dc:	9907      	ldr	r1, [sp, #28]
 80081de:	430b      	orrs	r3, r1
 80081e0:	9906      	ldr	r1, [sp, #24]
 80081e2:	430b      	orrs	r3, r1
 80081e4:	d120      	bne.n	8008228 <_dtoa_r+0xad0>
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	dded      	ble.n	80081c6 <_dtoa_r+0xa6e>
 80081ea:	4651      	mov	r1, sl
 80081ec:	2201      	movs	r2, #1
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fbfe 	bl	80089f0 <__lshift>
 80081f4:	4631      	mov	r1, r6
 80081f6:	4682      	mov	sl, r0
 80081f8:	f000 fc66 	bl	8008ac8 <__mcmp>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	dc03      	bgt.n	8008208 <_dtoa_r+0xab0>
 8008200:	d1e1      	bne.n	80081c6 <_dtoa_r+0xa6e>
 8008202:	f019 0f01 	tst.w	r9, #1
 8008206:	d0de      	beq.n	80081c6 <_dtoa_r+0xa6e>
 8008208:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800820c:	d1d8      	bne.n	80081c0 <_dtoa_r+0xa68>
 800820e:	9a01      	ldr	r2, [sp, #4]
 8008210:	2339      	movs	r3, #57	; 0x39
 8008212:	7013      	strb	r3, [r2, #0]
 8008214:	462b      	mov	r3, r5
 8008216:	461d      	mov	r5, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800821e:	2a39      	cmp	r2, #57	; 0x39
 8008220:	d06c      	beq.n	80082fc <_dtoa_r+0xba4>
 8008222:	3201      	adds	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	e747      	b.n	80080b8 <_dtoa_r+0x960>
 8008228:	2a00      	cmp	r2, #0
 800822a:	dd07      	ble.n	800823c <_dtoa_r+0xae4>
 800822c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008230:	d0ed      	beq.n	800820e <_dtoa_r+0xab6>
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	f109 0301 	add.w	r3, r9, #1
 8008238:	7013      	strb	r3, [r2, #0]
 800823a:	e73d      	b.n	80080b8 <_dtoa_r+0x960>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	9a08      	ldr	r2, [sp, #32]
 8008240:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008244:	4293      	cmp	r3, r2
 8008246:	d043      	beq.n	80082d0 <_dtoa_r+0xb78>
 8008248:	4651      	mov	r1, sl
 800824a:	2300      	movs	r3, #0
 800824c:	220a      	movs	r2, #10
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f9d6 	bl	8008600 <__multadd>
 8008254:	45b8      	cmp	r8, r7
 8008256:	4682      	mov	sl, r0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	f04f 020a 	mov.w	r2, #10
 8008260:	4641      	mov	r1, r8
 8008262:	4620      	mov	r0, r4
 8008264:	d107      	bne.n	8008276 <_dtoa_r+0xb1e>
 8008266:	f000 f9cb 	bl	8008600 <__multadd>
 800826a:	4680      	mov	r8, r0
 800826c:	4607      	mov	r7, r0
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	3301      	adds	r3, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	e775      	b.n	8008162 <_dtoa_r+0xa0a>
 8008276:	f000 f9c3 	bl	8008600 <__multadd>
 800827a:	4639      	mov	r1, r7
 800827c:	4680      	mov	r8, r0
 800827e:	2300      	movs	r3, #0
 8008280:	220a      	movs	r2, #10
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f9bc 	bl	8008600 <__multadd>
 8008288:	4607      	mov	r7, r0
 800828a:	e7f0      	b.n	800826e <_dtoa_r+0xb16>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	9d00      	ldr	r5, [sp, #0]
 8008292:	4631      	mov	r1, r6
 8008294:	4650      	mov	r0, sl
 8008296:	f7ff f9d5 	bl	8007644 <quorem>
 800829a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	f805 9b01 	strb.w	r9, [r5], #1
 80082a4:	1aea      	subs	r2, r5, r3
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	dd07      	ble.n	80082bc <_dtoa_r+0xb64>
 80082ac:	4651      	mov	r1, sl
 80082ae:	2300      	movs	r3, #0
 80082b0:	220a      	movs	r2, #10
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f9a4 	bl	8008600 <__multadd>
 80082b8:	4682      	mov	sl, r0
 80082ba:	e7ea      	b.n	8008292 <_dtoa_r+0xb3a>
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfc8      	it	gt
 80082c2:	461d      	movgt	r5, r3
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	bfd8      	it	le
 80082c8:	2501      	movle	r5, #1
 80082ca:	441d      	add	r5, r3
 80082cc:	f04f 0800 	mov.w	r8, #0
 80082d0:	4651      	mov	r1, sl
 80082d2:	2201      	movs	r2, #1
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 fb8b 	bl	80089f0 <__lshift>
 80082da:	4631      	mov	r1, r6
 80082dc:	4682      	mov	sl, r0
 80082de:	f000 fbf3 	bl	8008ac8 <__mcmp>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	dc96      	bgt.n	8008214 <_dtoa_r+0xabc>
 80082e6:	d102      	bne.n	80082ee <_dtoa_r+0xb96>
 80082e8:	f019 0f01 	tst.w	r9, #1
 80082ec:	d192      	bne.n	8008214 <_dtoa_r+0xabc>
 80082ee:	462b      	mov	r3, r5
 80082f0:	461d      	mov	r5, r3
 80082f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f6:	2a30      	cmp	r2, #48	; 0x30
 80082f8:	d0fa      	beq.n	80082f0 <_dtoa_r+0xb98>
 80082fa:	e6dd      	b.n	80080b8 <_dtoa_r+0x960>
 80082fc:	9a00      	ldr	r2, [sp, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d189      	bne.n	8008216 <_dtoa_r+0xabe>
 8008302:	f10b 0b01 	add.w	fp, fp, #1
 8008306:	2331      	movs	r3, #49	; 0x31
 8008308:	e796      	b.n	8008238 <_dtoa_r+0xae0>
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <_dtoa_r+0xbdc>)
 800830c:	f7ff ba99 	b.w	8007842 <_dtoa_r+0xea>
 8008310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008312:	2b00      	cmp	r3, #0
 8008314:	f47f aa6d 	bne.w	80077f2 <_dtoa_r+0x9a>
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <_dtoa_r+0xbe0>)
 800831a:	f7ff ba92 	b.w	8007842 <_dtoa_r+0xea>
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	dcb5      	bgt.n	8008290 <_dtoa_r+0xb38>
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	2b02      	cmp	r3, #2
 8008328:	f73f aeb1 	bgt.w	800808e <_dtoa_r+0x936>
 800832c:	e7b0      	b.n	8008290 <_dtoa_r+0xb38>
 800832e:	bf00      	nop
 8008330:	0800d119 	.word	0x0800d119
 8008334:	0800d074 	.word	0x0800d074
 8008338:	0800d09d 	.word	0x0800d09d

0800833c <_free_r>:
 800833c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800833e:	2900      	cmp	r1, #0
 8008340:	d044      	beq.n	80083cc <_free_r+0x90>
 8008342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008346:	9001      	str	r0, [sp, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f1a1 0404 	sub.w	r4, r1, #4
 800834e:	bfb8      	it	lt
 8008350:	18e4      	addlt	r4, r4, r3
 8008352:	f000 f8e7 	bl	8008524 <__malloc_lock>
 8008356:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <_free_r+0x94>)
 8008358:	9801      	ldr	r0, [sp, #4]
 800835a:	6813      	ldr	r3, [r2, #0]
 800835c:	b933      	cbnz	r3, 800836c <_free_r+0x30>
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	6014      	str	r4, [r2, #0]
 8008362:	b003      	add	sp, #12
 8008364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008368:	f000 b8e2 	b.w	8008530 <__malloc_unlock>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d908      	bls.n	8008382 <_free_r+0x46>
 8008370:	6825      	ldr	r5, [r4, #0]
 8008372:	1961      	adds	r1, r4, r5
 8008374:	428b      	cmp	r3, r1
 8008376:	bf01      	itttt	eq
 8008378:	6819      	ldreq	r1, [r3, #0]
 800837a:	685b      	ldreq	r3, [r3, #4]
 800837c:	1949      	addeq	r1, r1, r5
 800837e:	6021      	streq	r1, [r4, #0]
 8008380:	e7ed      	b.n	800835e <_free_r+0x22>
 8008382:	461a      	mov	r2, r3
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	b10b      	cbz	r3, 800838c <_free_r+0x50>
 8008388:	42a3      	cmp	r3, r4
 800838a:	d9fa      	bls.n	8008382 <_free_r+0x46>
 800838c:	6811      	ldr	r1, [r2, #0]
 800838e:	1855      	adds	r5, r2, r1
 8008390:	42a5      	cmp	r5, r4
 8008392:	d10b      	bne.n	80083ac <_free_r+0x70>
 8008394:	6824      	ldr	r4, [r4, #0]
 8008396:	4421      	add	r1, r4
 8008398:	1854      	adds	r4, r2, r1
 800839a:	42a3      	cmp	r3, r4
 800839c:	6011      	str	r1, [r2, #0]
 800839e:	d1e0      	bne.n	8008362 <_free_r+0x26>
 80083a0:	681c      	ldr	r4, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	6053      	str	r3, [r2, #4]
 80083a6:	440c      	add	r4, r1
 80083a8:	6014      	str	r4, [r2, #0]
 80083aa:	e7da      	b.n	8008362 <_free_r+0x26>
 80083ac:	d902      	bls.n	80083b4 <_free_r+0x78>
 80083ae:	230c      	movs	r3, #12
 80083b0:	6003      	str	r3, [r0, #0]
 80083b2:	e7d6      	b.n	8008362 <_free_r+0x26>
 80083b4:	6825      	ldr	r5, [r4, #0]
 80083b6:	1961      	adds	r1, r4, r5
 80083b8:	428b      	cmp	r3, r1
 80083ba:	bf04      	itt	eq
 80083bc:	6819      	ldreq	r1, [r3, #0]
 80083be:	685b      	ldreq	r3, [r3, #4]
 80083c0:	6063      	str	r3, [r4, #4]
 80083c2:	bf04      	itt	eq
 80083c4:	1949      	addeq	r1, r1, r5
 80083c6:	6021      	streq	r1, [r4, #0]
 80083c8:	6054      	str	r4, [r2, #4]
 80083ca:	e7ca      	b.n	8008362 <_free_r+0x26>
 80083cc:	b003      	add	sp, #12
 80083ce:	bd30      	pop	{r4, r5, pc}
 80083d0:	20000918 	.word	0x20000918

080083d4 <malloc>:
 80083d4:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <malloc+0xc>)
 80083d6:	4601      	mov	r1, r0
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	f000 b823 	b.w	8008424 <_malloc_r>
 80083de:	bf00      	nop
 80083e0:	2000006c 	.word	0x2000006c

080083e4 <sbrk_aligned>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4e0e      	ldr	r6, [pc, #56]	; (8008420 <sbrk_aligned+0x3c>)
 80083e8:	460c      	mov	r4, r1
 80083ea:	6831      	ldr	r1, [r6, #0]
 80083ec:	4605      	mov	r5, r0
 80083ee:	b911      	cbnz	r1, 80083f6 <sbrk_aligned+0x12>
 80083f0:	f002 f816 	bl	800a420 <_sbrk_r>
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f002 f811 	bl	800a420 <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d00a      	beq.n	8008418 <sbrk_aligned+0x34>
 8008402:	1cc4      	adds	r4, r0, #3
 8008404:	f024 0403 	bic.w	r4, r4, #3
 8008408:	42a0      	cmp	r0, r4
 800840a:	d007      	beq.n	800841c <sbrk_aligned+0x38>
 800840c:	1a21      	subs	r1, r4, r0
 800840e:	4628      	mov	r0, r5
 8008410:	f002 f806 	bl	800a420 <_sbrk_r>
 8008414:	3001      	adds	r0, #1
 8008416:	d101      	bne.n	800841c <sbrk_aligned+0x38>
 8008418:	f04f 34ff 	mov.w	r4, #4294967295
 800841c:	4620      	mov	r0, r4
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	2000091c 	.word	0x2000091c

08008424 <_malloc_r>:
 8008424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008428:	1ccd      	adds	r5, r1, #3
 800842a:	f025 0503 	bic.w	r5, r5, #3
 800842e:	3508      	adds	r5, #8
 8008430:	2d0c      	cmp	r5, #12
 8008432:	bf38      	it	cc
 8008434:	250c      	movcc	r5, #12
 8008436:	2d00      	cmp	r5, #0
 8008438:	4607      	mov	r7, r0
 800843a:	db01      	blt.n	8008440 <_malloc_r+0x1c>
 800843c:	42a9      	cmp	r1, r5
 800843e:	d905      	bls.n	800844c <_malloc_r+0x28>
 8008440:	230c      	movs	r3, #12
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	2600      	movs	r6, #0
 8008446:	4630      	mov	r0, r6
 8008448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008520 <_malloc_r+0xfc>
 8008450:	f000 f868 	bl	8008524 <__malloc_lock>
 8008454:	f8d8 3000 	ldr.w	r3, [r8]
 8008458:	461c      	mov	r4, r3
 800845a:	bb5c      	cbnz	r4, 80084b4 <_malloc_r+0x90>
 800845c:	4629      	mov	r1, r5
 800845e:	4638      	mov	r0, r7
 8008460:	f7ff ffc0 	bl	80083e4 <sbrk_aligned>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	4604      	mov	r4, r0
 8008468:	d155      	bne.n	8008516 <_malloc_r+0xf2>
 800846a:	f8d8 4000 	ldr.w	r4, [r8]
 800846e:	4626      	mov	r6, r4
 8008470:	2e00      	cmp	r6, #0
 8008472:	d145      	bne.n	8008500 <_malloc_r+0xdc>
 8008474:	2c00      	cmp	r4, #0
 8008476:	d048      	beq.n	800850a <_malloc_r+0xe6>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	4631      	mov	r1, r6
 800847c:	4638      	mov	r0, r7
 800847e:	eb04 0903 	add.w	r9, r4, r3
 8008482:	f001 ffcd 	bl	800a420 <_sbrk_r>
 8008486:	4581      	cmp	r9, r0
 8008488:	d13f      	bne.n	800850a <_malloc_r+0xe6>
 800848a:	6821      	ldr	r1, [r4, #0]
 800848c:	1a6d      	subs	r5, r5, r1
 800848e:	4629      	mov	r1, r5
 8008490:	4638      	mov	r0, r7
 8008492:	f7ff ffa7 	bl	80083e4 <sbrk_aligned>
 8008496:	3001      	adds	r0, #1
 8008498:	d037      	beq.n	800850a <_malloc_r+0xe6>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	442b      	add	r3, r5
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	f8d8 3000 	ldr.w	r3, [r8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d038      	beq.n	800851a <_malloc_r+0xf6>
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	42a2      	cmp	r2, r4
 80084ac:	d12b      	bne.n	8008506 <_malloc_r+0xe2>
 80084ae:	2200      	movs	r2, #0
 80084b0:	605a      	str	r2, [r3, #4]
 80084b2:	e00f      	b.n	80084d4 <_malloc_r+0xb0>
 80084b4:	6822      	ldr	r2, [r4, #0]
 80084b6:	1b52      	subs	r2, r2, r5
 80084b8:	d41f      	bmi.n	80084fa <_malloc_r+0xd6>
 80084ba:	2a0b      	cmp	r2, #11
 80084bc:	d917      	bls.n	80084ee <_malloc_r+0xca>
 80084be:	1961      	adds	r1, r4, r5
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	6025      	str	r5, [r4, #0]
 80084c4:	bf18      	it	ne
 80084c6:	6059      	strne	r1, [r3, #4]
 80084c8:	6863      	ldr	r3, [r4, #4]
 80084ca:	bf08      	it	eq
 80084cc:	f8c8 1000 	streq.w	r1, [r8]
 80084d0:	5162      	str	r2, [r4, r5]
 80084d2:	604b      	str	r3, [r1, #4]
 80084d4:	4638      	mov	r0, r7
 80084d6:	f104 060b 	add.w	r6, r4, #11
 80084da:	f000 f829 	bl	8008530 <__malloc_unlock>
 80084de:	f026 0607 	bic.w	r6, r6, #7
 80084e2:	1d23      	adds	r3, r4, #4
 80084e4:	1af2      	subs	r2, r6, r3
 80084e6:	d0ae      	beq.n	8008446 <_malloc_r+0x22>
 80084e8:	1b9b      	subs	r3, r3, r6
 80084ea:	50a3      	str	r3, [r4, r2]
 80084ec:	e7ab      	b.n	8008446 <_malloc_r+0x22>
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	6862      	ldr	r2, [r4, #4]
 80084f2:	d1dd      	bne.n	80084b0 <_malloc_r+0x8c>
 80084f4:	f8c8 2000 	str.w	r2, [r8]
 80084f8:	e7ec      	b.n	80084d4 <_malloc_r+0xb0>
 80084fa:	4623      	mov	r3, r4
 80084fc:	6864      	ldr	r4, [r4, #4]
 80084fe:	e7ac      	b.n	800845a <_malloc_r+0x36>
 8008500:	4634      	mov	r4, r6
 8008502:	6876      	ldr	r6, [r6, #4]
 8008504:	e7b4      	b.n	8008470 <_malloc_r+0x4c>
 8008506:	4613      	mov	r3, r2
 8008508:	e7cc      	b.n	80084a4 <_malloc_r+0x80>
 800850a:	230c      	movs	r3, #12
 800850c:	603b      	str	r3, [r7, #0]
 800850e:	4638      	mov	r0, r7
 8008510:	f000 f80e 	bl	8008530 <__malloc_unlock>
 8008514:	e797      	b.n	8008446 <_malloc_r+0x22>
 8008516:	6025      	str	r5, [r4, #0]
 8008518:	e7dc      	b.n	80084d4 <_malloc_r+0xb0>
 800851a:	605b      	str	r3, [r3, #4]
 800851c:	deff      	udf	#255	; 0xff
 800851e:	bf00      	nop
 8008520:	20000918 	.word	0x20000918

08008524 <__malloc_lock>:
 8008524:	4801      	ldr	r0, [pc, #4]	; (800852c <__malloc_lock+0x8>)
 8008526:	f7ff b884 	b.w	8007632 <__retarget_lock_acquire_recursive>
 800852a:	bf00      	nop
 800852c:	20000914 	.word	0x20000914

08008530 <__malloc_unlock>:
 8008530:	4801      	ldr	r0, [pc, #4]	; (8008538 <__malloc_unlock+0x8>)
 8008532:	f7ff b87f 	b.w	8007634 <__retarget_lock_release_recursive>
 8008536:	bf00      	nop
 8008538:	20000914 	.word	0x20000914

0800853c <_Balloc>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	69c6      	ldr	r6, [r0, #28]
 8008540:	4604      	mov	r4, r0
 8008542:	460d      	mov	r5, r1
 8008544:	b976      	cbnz	r6, 8008564 <_Balloc+0x28>
 8008546:	2010      	movs	r0, #16
 8008548:	f7ff ff44 	bl	80083d4 <malloc>
 800854c:	4602      	mov	r2, r0
 800854e:	61e0      	str	r0, [r4, #28]
 8008550:	b920      	cbnz	r0, 800855c <_Balloc+0x20>
 8008552:	4b18      	ldr	r3, [pc, #96]	; (80085b4 <_Balloc+0x78>)
 8008554:	4818      	ldr	r0, [pc, #96]	; (80085b8 <_Balloc+0x7c>)
 8008556:	216b      	movs	r1, #107	; 0x6b
 8008558:	f001 ff8a 	bl	800a470 <__assert_func>
 800855c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008560:	6006      	str	r6, [r0, #0]
 8008562:	60c6      	str	r6, [r0, #12]
 8008564:	69e6      	ldr	r6, [r4, #28]
 8008566:	68f3      	ldr	r3, [r6, #12]
 8008568:	b183      	cbz	r3, 800858c <_Balloc+0x50>
 800856a:	69e3      	ldr	r3, [r4, #28]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008572:	b9b8      	cbnz	r0, 80085a4 <_Balloc+0x68>
 8008574:	2101      	movs	r1, #1
 8008576:	fa01 f605 	lsl.w	r6, r1, r5
 800857a:	1d72      	adds	r2, r6, #5
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	4620      	mov	r0, r4
 8008580:	f001 ff94 	bl	800a4ac <_calloc_r>
 8008584:	b160      	cbz	r0, 80085a0 <_Balloc+0x64>
 8008586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800858a:	e00e      	b.n	80085aa <_Balloc+0x6e>
 800858c:	2221      	movs	r2, #33	; 0x21
 800858e:	2104      	movs	r1, #4
 8008590:	4620      	mov	r0, r4
 8008592:	f001 ff8b 	bl	800a4ac <_calloc_r>
 8008596:	69e3      	ldr	r3, [r4, #28]
 8008598:	60f0      	str	r0, [r6, #12]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <_Balloc+0x2e>
 80085a0:	2000      	movs	r0, #0
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	6802      	ldr	r2, [r0, #0]
 80085a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085aa:	2300      	movs	r3, #0
 80085ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b0:	e7f7      	b.n	80085a2 <_Balloc+0x66>
 80085b2:	bf00      	nop
 80085b4:	0800d0aa 	.word	0x0800d0aa
 80085b8:	0800d12a 	.word	0x0800d12a

080085bc <_Bfree>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	69c6      	ldr	r6, [r0, #28]
 80085c0:	4605      	mov	r5, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	b976      	cbnz	r6, 80085e4 <_Bfree+0x28>
 80085c6:	2010      	movs	r0, #16
 80085c8:	f7ff ff04 	bl	80083d4 <malloc>
 80085cc:	4602      	mov	r2, r0
 80085ce:	61e8      	str	r0, [r5, #28]
 80085d0:	b920      	cbnz	r0, 80085dc <_Bfree+0x20>
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <_Bfree+0x3c>)
 80085d4:	4809      	ldr	r0, [pc, #36]	; (80085fc <_Bfree+0x40>)
 80085d6:	218f      	movs	r1, #143	; 0x8f
 80085d8:	f001 ff4a 	bl	800a470 <__assert_func>
 80085dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e0:	6006      	str	r6, [r0, #0]
 80085e2:	60c6      	str	r6, [r0, #12]
 80085e4:	b13c      	cbz	r4, 80085f6 <_Bfree+0x3a>
 80085e6:	69eb      	ldr	r3, [r5, #28]
 80085e8:	6862      	ldr	r2, [r4, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f0:	6021      	str	r1, [r4, #0]
 80085f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	0800d0aa 	.word	0x0800d0aa
 80085fc:	0800d12a 	.word	0x0800d12a

08008600 <__multadd>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	690d      	ldr	r5, [r1, #16]
 8008606:	4607      	mov	r7, r0
 8008608:	460c      	mov	r4, r1
 800860a:	461e      	mov	r6, r3
 800860c:	f101 0c14 	add.w	ip, r1, #20
 8008610:	2000      	movs	r0, #0
 8008612:	f8dc 3000 	ldr.w	r3, [ip]
 8008616:	b299      	uxth	r1, r3
 8008618:	fb02 6101 	mla	r1, r2, r1, r6
 800861c:	0c1e      	lsrs	r6, r3, #16
 800861e:	0c0b      	lsrs	r3, r1, #16
 8008620:	fb02 3306 	mla	r3, r2, r6, r3
 8008624:	b289      	uxth	r1, r1
 8008626:	3001      	adds	r0, #1
 8008628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800862c:	4285      	cmp	r5, r0
 800862e:	f84c 1b04 	str.w	r1, [ip], #4
 8008632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008636:	dcec      	bgt.n	8008612 <__multadd+0x12>
 8008638:	b30e      	cbz	r6, 800867e <__multadd+0x7e>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	42ab      	cmp	r3, r5
 800863e:	dc19      	bgt.n	8008674 <__multadd+0x74>
 8008640:	6861      	ldr	r1, [r4, #4]
 8008642:	4638      	mov	r0, r7
 8008644:	3101      	adds	r1, #1
 8008646:	f7ff ff79 	bl	800853c <_Balloc>
 800864a:	4680      	mov	r8, r0
 800864c:	b928      	cbnz	r0, 800865a <__multadd+0x5a>
 800864e:	4602      	mov	r2, r0
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <__multadd+0x84>)
 8008652:	480d      	ldr	r0, [pc, #52]	; (8008688 <__multadd+0x88>)
 8008654:	21ba      	movs	r1, #186	; 0xba
 8008656:	f001 ff0b 	bl	800a470 <__assert_func>
 800865a:	6922      	ldr	r2, [r4, #16]
 800865c:	3202      	adds	r2, #2
 800865e:	f104 010c 	add.w	r1, r4, #12
 8008662:	0092      	lsls	r2, r2, #2
 8008664:	300c      	adds	r0, #12
 8008666:	f001 feeb 	bl	800a440 <memcpy>
 800866a:	4621      	mov	r1, r4
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff ffa5 	bl	80085bc <_Bfree>
 8008672:	4644      	mov	r4, r8
 8008674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008678:	3501      	adds	r5, #1
 800867a:	615e      	str	r6, [r3, #20]
 800867c:	6125      	str	r5, [r4, #16]
 800867e:	4620      	mov	r0, r4
 8008680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008684:	0800d119 	.word	0x0800d119
 8008688:	0800d12a 	.word	0x0800d12a

0800868c <__s2b>:
 800868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	4615      	mov	r5, r2
 8008694:	461f      	mov	r7, r3
 8008696:	2209      	movs	r2, #9
 8008698:	3308      	adds	r3, #8
 800869a:	4606      	mov	r6, r0
 800869c:	fb93 f3f2 	sdiv	r3, r3, r2
 80086a0:	2100      	movs	r1, #0
 80086a2:	2201      	movs	r2, #1
 80086a4:	429a      	cmp	r2, r3
 80086a6:	db09      	blt.n	80086bc <__s2b+0x30>
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ff47 	bl	800853c <_Balloc>
 80086ae:	b940      	cbnz	r0, 80086c2 <__s2b+0x36>
 80086b0:	4602      	mov	r2, r0
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <__s2b+0x8c>)
 80086b4:	4819      	ldr	r0, [pc, #100]	; (800871c <__s2b+0x90>)
 80086b6:	21d3      	movs	r1, #211	; 0xd3
 80086b8:	f001 feda 	bl	800a470 <__assert_func>
 80086bc:	0052      	lsls	r2, r2, #1
 80086be:	3101      	adds	r1, #1
 80086c0:	e7f0      	b.n	80086a4 <__s2b+0x18>
 80086c2:	9b08      	ldr	r3, [sp, #32]
 80086c4:	6143      	str	r3, [r0, #20]
 80086c6:	2d09      	cmp	r5, #9
 80086c8:	f04f 0301 	mov.w	r3, #1
 80086cc:	6103      	str	r3, [r0, #16]
 80086ce:	dd16      	ble.n	80086fe <__s2b+0x72>
 80086d0:	f104 0909 	add.w	r9, r4, #9
 80086d4:	46c8      	mov	r8, r9
 80086d6:	442c      	add	r4, r5
 80086d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086dc:	4601      	mov	r1, r0
 80086de:	3b30      	subs	r3, #48	; 0x30
 80086e0:	220a      	movs	r2, #10
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ff8c 	bl	8008600 <__multadd>
 80086e8:	45a0      	cmp	r8, r4
 80086ea:	d1f5      	bne.n	80086d8 <__s2b+0x4c>
 80086ec:	f1a5 0408 	sub.w	r4, r5, #8
 80086f0:	444c      	add	r4, r9
 80086f2:	1b2d      	subs	r5, r5, r4
 80086f4:	1963      	adds	r3, r4, r5
 80086f6:	42bb      	cmp	r3, r7
 80086f8:	db04      	blt.n	8008704 <__s2b+0x78>
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	340a      	adds	r4, #10
 8008700:	2509      	movs	r5, #9
 8008702:	e7f6      	b.n	80086f2 <__s2b+0x66>
 8008704:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008708:	4601      	mov	r1, r0
 800870a:	3b30      	subs	r3, #48	; 0x30
 800870c:	220a      	movs	r2, #10
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ff76 	bl	8008600 <__multadd>
 8008714:	e7ee      	b.n	80086f4 <__s2b+0x68>
 8008716:	bf00      	nop
 8008718:	0800d119 	.word	0x0800d119
 800871c:	0800d12a 	.word	0x0800d12a

08008720 <__hi0bits>:
 8008720:	0c03      	lsrs	r3, r0, #16
 8008722:	041b      	lsls	r3, r3, #16
 8008724:	b9d3      	cbnz	r3, 800875c <__hi0bits+0x3c>
 8008726:	0400      	lsls	r0, r0, #16
 8008728:	2310      	movs	r3, #16
 800872a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800872e:	bf04      	itt	eq
 8008730:	0200      	lsleq	r0, r0, #8
 8008732:	3308      	addeq	r3, #8
 8008734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008738:	bf04      	itt	eq
 800873a:	0100      	lsleq	r0, r0, #4
 800873c:	3304      	addeq	r3, #4
 800873e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008742:	bf04      	itt	eq
 8008744:	0080      	lsleq	r0, r0, #2
 8008746:	3302      	addeq	r3, #2
 8008748:	2800      	cmp	r0, #0
 800874a:	db05      	blt.n	8008758 <__hi0bits+0x38>
 800874c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008750:	f103 0301 	add.w	r3, r3, #1
 8008754:	bf08      	it	eq
 8008756:	2320      	moveq	r3, #32
 8008758:	4618      	mov	r0, r3
 800875a:	4770      	bx	lr
 800875c:	2300      	movs	r3, #0
 800875e:	e7e4      	b.n	800872a <__hi0bits+0xa>

08008760 <__lo0bits>:
 8008760:	6803      	ldr	r3, [r0, #0]
 8008762:	f013 0207 	ands.w	r2, r3, #7
 8008766:	d00c      	beq.n	8008782 <__lo0bits+0x22>
 8008768:	07d9      	lsls	r1, r3, #31
 800876a:	d422      	bmi.n	80087b2 <__lo0bits+0x52>
 800876c:	079a      	lsls	r2, r3, #30
 800876e:	bf49      	itett	mi
 8008770:	085b      	lsrmi	r3, r3, #1
 8008772:	089b      	lsrpl	r3, r3, #2
 8008774:	6003      	strmi	r3, [r0, #0]
 8008776:	2201      	movmi	r2, #1
 8008778:	bf5c      	itt	pl
 800877a:	6003      	strpl	r3, [r0, #0]
 800877c:	2202      	movpl	r2, #2
 800877e:	4610      	mov	r0, r2
 8008780:	4770      	bx	lr
 8008782:	b299      	uxth	r1, r3
 8008784:	b909      	cbnz	r1, 800878a <__lo0bits+0x2a>
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	2210      	movs	r2, #16
 800878a:	b2d9      	uxtb	r1, r3
 800878c:	b909      	cbnz	r1, 8008792 <__lo0bits+0x32>
 800878e:	3208      	adds	r2, #8
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	0719      	lsls	r1, r3, #28
 8008794:	bf04      	itt	eq
 8008796:	091b      	lsreq	r3, r3, #4
 8008798:	3204      	addeq	r2, #4
 800879a:	0799      	lsls	r1, r3, #30
 800879c:	bf04      	itt	eq
 800879e:	089b      	lsreq	r3, r3, #2
 80087a0:	3202      	addeq	r2, #2
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d403      	bmi.n	80087ae <__lo0bits+0x4e>
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	f102 0201 	add.w	r2, r2, #1
 80087ac:	d003      	beq.n	80087b6 <__lo0bits+0x56>
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	e7e5      	b.n	800877e <__lo0bits+0x1e>
 80087b2:	2200      	movs	r2, #0
 80087b4:	e7e3      	b.n	800877e <__lo0bits+0x1e>
 80087b6:	2220      	movs	r2, #32
 80087b8:	e7e1      	b.n	800877e <__lo0bits+0x1e>
	...

080087bc <__i2b>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	2101      	movs	r1, #1
 80087c2:	f7ff febb 	bl	800853c <_Balloc>
 80087c6:	4602      	mov	r2, r0
 80087c8:	b928      	cbnz	r0, 80087d6 <__i2b+0x1a>
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <__i2b+0x24>)
 80087cc:	4805      	ldr	r0, [pc, #20]	; (80087e4 <__i2b+0x28>)
 80087ce:	f240 1145 	movw	r1, #325	; 0x145
 80087d2:	f001 fe4d 	bl	800a470 <__assert_func>
 80087d6:	2301      	movs	r3, #1
 80087d8:	6144      	str	r4, [r0, #20]
 80087da:	6103      	str	r3, [r0, #16]
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	bf00      	nop
 80087e0:	0800d119 	.word	0x0800d119
 80087e4:	0800d12a 	.word	0x0800d12a

080087e8 <__multiply>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4691      	mov	r9, r2
 80087ee:	690a      	ldr	r2, [r1, #16]
 80087f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bfb8      	it	lt
 80087f8:	460b      	movlt	r3, r1
 80087fa:	460c      	mov	r4, r1
 80087fc:	bfbc      	itt	lt
 80087fe:	464c      	movlt	r4, r9
 8008800:	4699      	movlt	r9, r3
 8008802:	6927      	ldr	r7, [r4, #16]
 8008804:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	6861      	ldr	r1, [r4, #4]
 800880c:	eb07 060a 	add.w	r6, r7, sl
 8008810:	42b3      	cmp	r3, r6
 8008812:	b085      	sub	sp, #20
 8008814:	bfb8      	it	lt
 8008816:	3101      	addlt	r1, #1
 8008818:	f7ff fe90 	bl	800853c <_Balloc>
 800881c:	b930      	cbnz	r0, 800882c <__multiply+0x44>
 800881e:	4602      	mov	r2, r0
 8008820:	4b44      	ldr	r3, [pc, #272]	; (8008934 <__multiply+0x14c>)
 8008822:	4845      	ldr	r0, [pc, #276]	; (8008938 <__multiply+0x150>)
 8008824:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008828:	f001 fe22 	bl	800a470 <__assert_func>
 800882c:	f100 0514 	add.w	r5, r0, #20
 8008830:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008834:	462b      	mov	r3, r5
 8008836:	2200      	movs	r2, #0
 8008838:	4543      	cmp	r3, r8
 800883a:	d321      	bcc.n	8008880 <__multiply+0x98>
 800883c:	f104 0314 	add.w	r3, r4, #20
 8008840:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008844:	f109 0314 	add.w	r3, r9, #20
 8008848:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800884c:	9202      	str	r2, [sp, #8]
 800884e:	1b3a      	subs	r2, r7, r4
 8008850:	3a15      	subs	r2, #21
 8008852:	f022 0203 	bic.w	r2, r2, #3
 8008856:	3204      	adds	r2, #4
 8008858:	f104 0115 	add.w	r1, r4, #21
 800885c:	428f      	cmp	r7, r1
 800885e:	bf38      	it	cc
 8008860:	2204      	movcc	r2, #4
 8008862:	9201      	str	r2, [sp, #4]
 8008864:	9a02      	ldr	r2, [sp, #8]
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	429a      	cmp	r2, r3
 800886a:	d80c      	bhi.n	8008886 <__multiply+0x9e>
 800886c:	2e00      	cmp	r6, #0
 800886e:	dd03      	ble.n	8008878 <__multiply+0x90>
 8008870:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008874:	2b00      	cmp	r3, #0
 8008876:	d05b      	beq.n	8008930 <__multiply+0x148>
 8008878:	6106      	str	r6, [r0, #16]
 800887a:	b005      	add	sp, #20
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	f843 2b04 	str.w	r2, [r3], #4
 8008884:	e7d8      	b.n	8008838 <__multiply+0x50>
 8008886:	f8b3 a000 	ldrh.w	sl, [r3]
 800888a:	f1ba 0f00 	cmp.w	sl, #0
 800888e:	d024      	beq.n	80088da <__multiply+0xf2>
 8008890:	f104 0e14 	add.w	lr, r4, #20
 8008894:	46a9      	mov	r9, r5
 8008896:	f04f 0c00 	mov.w	ip, #0
 800889a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800889e:	f8d9 1000 	ldr.w	r1, [r9]
 80088a2:	fa1f fb82 	uxth.w	fp, r2
 80088a6:	b289      	uxth	r1, r1
 80088a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80088ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088b0:	f8d9 2000 	ldr.w	r2, [r9]
 80088b4:	4461      	add	r1, ip
 80088b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80088be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088c2:	b289      	uxth	r1, r1
 80088c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088c8:	4577      	cmp	r7, lr
 80088ca:	f849 1b04 	str.w	r1, [r9], #4
 80088ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088d2:	d8e2      	bhi.n	800889a <__multiply+0xb2>
 80088d4:	9a01      	ldr	r2, [sp, #4]
 80088d6:	f845 c002 	str.w	ip, [r5, r2]
 80088da:	9a03      	ldr	r2, [sp, #12]
 80088dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088e0:	3304      	adds	r3, #4
 80088e2:	f1b9 0f00 	cmp.w	r9, #0
 80088e6:	d021      	beq.n	800892c <__multiply+0x144>
 80088e8:	6829      	ldr	r1, [r5, #0]
 80088ea:	f104 0c14 	add.w	ip, r4, #20
 80088ee:	46ae      	mov	lr, r5
 80088f0:	f04f 0a00 	mov.w	sl, #0
 80088f4:	f8bc b000 	ldrh.w	fp, [ip]
 80088f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088fc:	fb09 220b 	mla	r2, r9, fp, r2
 8008900:	4452      	add	r2, sl
 8008902:	b289      	uxth	r1, r1
 8008904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008908:	f84e 1b04 	str.w	r1, [lr], #4
 800890c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008910:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008914:	f8be 1000 	ldrh.w	r1, [lr]
 8008918:	fb09 110a 	mla	r1, r9, sl, r1
 800891c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008920:	4567      	cmp	r7, ip
 8008922:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008926:	d8e5      	bhi.n	80088f4 <__multiply+0x10c>
 8008928:	9a01      	ldr	r2, [sp, #4]
 800892a:	50a9      	str	r1, [r5, r2]
 800892c:	3504      	adds	r5, #4
 800892e:	e799      	b.n	8008864 <__multiply+0x7c>
 8008930:	3e01      	subs	r6, #1
 8008932:	e79b      	b.n	800886c <__multiply+0x84>
 8008934:	0800d119 	.word	0x0800d119
 8008938:	0800d12a 	.word	0x0800d12a

0800893c <__pow5mult>:
 800893c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008940:	4615      	mov	r5, r2
 8008942:	f012 0203 	ands.w	r2, r2, #3
 8008946:	4606      	mov	r6, r0
 8008948:	460f      	mov	r7, r1
 800894a:	d007      	beq.n	800895c <__pow5mult+0x20>
 800894c:	4c25      	ldr	r4, [pc, #148]	; (80089e4 <__pow5mult+0xa8>)
 800894e:	3a01      	subs	r2, #1
 8008950:	2300      	movs	r3, #0
 8008952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008956:	f7ff fe53 	bl	8008600 <__multadd>
 800895a:	4607      	mov	r7, r0
 800895c:	10ad      	asrs	r5, r5, #2
 800895e:	d03d      	beq.n	80089dc <__pow5mult+0xa0>
 8008960:	69f4      	ldr	r4, [r6, #28]
 8008962:	b97c      	cbnz	r4, 8008984 <__pow5mult+0x48>
 8008964:	2010      	movs	r0, #16
 8008966:	f7ff fd35 	bl	80083d4 <malloc>
 800896a:	4602      	mov	r2, r0
 800896c:	61f0      	str	r0, [r6, #28]
 800896e:	b928      	cbnz	r0, 800897c <__pow5mult+0x40>
 8008970:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <__pow5mult+0xac>)
 8008972:	481e      	ldr	r0, [pc, #120]	; (80089ec <__pow5mult+0xb0>)
 8008974:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008978:	f001 fd7a 	bl	800a470 <__assert_func>
 800897c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008980:	6004      	str	r4, [r0, #0]
 8008982:	60c4      	str	r4, [r0, #12]
 8008984:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800898c:	b94c      	cbnz	r4, 80089a2 <__pow5mult+0x66>
 800898e:	f240 2171 	movw	r1, #625	; 0x271
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ff12 	bl	80087bc <__i2b>
 8008998:	2300      	movs	r3, #0
 800899a:	f8c8 0008 	str.w	r0, [r8, #8]
 800899e:	4604      	mov	r4, r0
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	07eb      	lsls	r3, r5, #31
 80089a8:	d50a      	bpl.n	80089c0 <__pow5mult+0x84>
 80089aa:	4639      	mov	r1, r7
 80089ac:	4622      	mov	r2, r4
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ff1a 	bl	80087e8 <__multiply>
 80089b4:	4639      	mov	r1, r7
 80089b6:	4680      	mov	r8, r0
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7ff fdff 	bl	80085bc <_Bfree>
 80089be:	4647      	mov	r7, r8
 80089c0:	106d      	asrs	r5, r5, #1
 80089c2:	d00b      	beq.n	80089dc <__pow5mult+0xa0>
 80089c4:	6820      	ldr	r0, [r4, #0]
 80089c6:	b938      	cbnz	r0, 80089d8 <__pow5mult+0x9c>
 80089c8:	4622      	mov	r2, r4
 80089ca:	4621      	mov	r1, r4
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff ff0b 	bl	80087e8 <__multiply>
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	f8c0 9000 	str.w	r9, [r0]
 80089d8:	4604      	mov	r4, r0
 80089da:	e7e4      	b.n	80089a6 <__pow5mult+0x6a>
 80089dc:	4638      	mov	r0, r7
 80089de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e2:	bf00      	nop
 80089e4:	0800d278 	.word	0x0800d278
 80089e8:	0800d0aa 	.word	0x0800d0aa
 80089ec:	0800d12a 	.word	0x0800d12a

080089f0 <__lshift>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	6849      	ldr	r1, [r1, #4]
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	4607      	mov	r7, r0
 8008a02:	4691      	mov	r9, r2
 8008a04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a08:	f108 0601 	add.w	r6, r8, #1
 8008a0c:	42b3      	cmp	r3, r6
 8008a0e:	db0b      	blt.n	8008a28 <__lshift+0x38>
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7ff fd93 	bl	800853c <_Balloc>
 8008a16:	4605      	mov	r5, r0
 8008a18:	b948      	cbnz	r0, 8008a2e <__lshift+0x3e>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	4b28      	ldr	r3, [pc, #160]	; (8008ac0 <__lshift+0xd0>)
 8008a1e:	4829      	ldr	r0, [pc, #164]	; (8008ac4 <__lshift+0xd4>)
 8008a20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a24:	f001 fd24 	bl	800a470 <__assert_func>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	e7ee      	b.n	8008a0c <__lshift+0x1c>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f100 0114 	add.w	r1, r0, #20
 8008a34:	f100 0210 	add.w	r2, r0, #16
 8008a38:	4618      	mov	r0, r3
 8008a3a:	4553      	cmp	r3, sl
 8008a3c:	db33      	blt.n	8008aa6 <__lshift+0xb6>
 8008a3e:	6920      	ldr	r0, [r4, #16]
 8008a40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a44:	f104 0314 	add.w	r3, r4, #20
 8008a48:	f019 091f 	ands.w	r9, r9, #31
 8008a4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a54:	d02b      	beq.n	8008aae <__lshift+0xbe>
 8008a56:	f1c9 0e20 	rsb	lr, r9, #32
 8008a5a:	468a      	mov	sl, r1
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	fa00 f009 	lsl.w	r0, r0, r9
 8008a64:	4310      	orrs	r0, r2
 8008a66:	f84a 0b04 	str.w	r0, [sl], #4
 8008a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6e:	459c      	cmp	ip, r3
 8008a70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a74:	d8f3      	bhi.n	8008a5e <__lshift+0x6e>
 8008a76:	ebac 0304 	sub.w	r3, ip, r4
 8008a7a:	3b15      	subs	r3, #21
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	3304      	adds	r3, #4
 8008a82:	f104 0015 	add.w	r0, r4, #21
 8008a86:	4584      	cmp	ip, r0
 8008a88:	bf38      	it	cc
 8008a8a:	2304      	movcc	r3, #4
 8008a8c:	50ca      	str	r2, [r1, r3]
 8008a8e:	b10a      	cbz	r2, 8008a94 <__lshift+0xa4>
 8008a90:	f108 0602 	add.w	r6, r8, #2
 8008a94:	3e01      	subs	r6, #1
 8008a96:	4638      	mov	r0, r7
 8008a98:	612e      	str	r6, [r5, #16]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f7ff fd8e 	bl	80085bc <_Bfree>
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aaa:	3301      	adds	r3, #1
 8008aac:	e7c5      	b.n	8008a3a <__lshift+0x4a>
 8008aae:	3904      	subs	r1, #4
 8008ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ab8:	459c      	cmp	ip, r3
 8008aba:	d8f9      	bhi.n	8008ab0 <__lshift+0xc0>
 8008abc:	e7ea      	b.n	8008a94 <__lshift+0xa4>
 8008abe:	bf00      	nop
 8008ac0:	0800d119 	.word	0x0800d119
 8008ac4:	0800d12a 	.word	0x0800d12a

08008ac8 <__mcmp>:
 8008ac8:	b530      	push	{r4, r5, lr}
 8008aca:	6902      	ldr	r2, [r0, #16]
 8008acc:	690c      	ldr	r4, [r1, #16]
 8008ace:	1b12      	subs	r2, r2, r4
 8008ad0:	d10e      	bne.n	8008af0 <__mcmp+0x28>
 8008ad2:	f100 0314 	add.w	r3, r0, #20
 8008ad6:	3114      	adds	r1, #20
 8008ad8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008adc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ae0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ae4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ae8:	42a5      	cmp	r5, r4
 8008aea:	d003      	beq.n	8008af4 <__mcmp+0x2c>
 8008aec:	d305      	bcc.n	8008afa <__mcmp+0x32>
 8008aee:	2201      	movs	r2, #1
 8008af0:	4610      	mov	r0, r2
 8008af2:	bd30      	pop	{r4, r5, pc}
 8008af4:	4283      	cmp	r3, r0
 8008af6:	d3f3      	bcc.n	8008ae0 <__mcmp+0x18>
 8008af8:	e7fa      	b.n	8008af0 <__mcmp+0x28>
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
 8008afe:	e7f7      	b.n	8008af0 <__mcmp+0x28>

08008b00 <__mdiff>:
 8008b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	460c      	mov	r4, r1
 8008b06:	4606      	mov	r6, r0
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4690      	mov	r8, r2
 8008b0e:	f7ff ffdb 	bl	8008ac8 <__mcmp>
 8008b12:	1e05      	subs	r5, r0, #0
 8008b14:	d110      	bne.n	8008b38 <__mdiff+0x38>
 8008b16:	4629      	mov	r1, r5
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff fd0f 	bl	800853c <_Balloc>
 8008b1e:	b930      	cbnz	r0, 8008b2e <__mdiff+0x2e>
 8008b20:	4b3a      	ldr	r3, [pc, #232]	; (8008c0c <__mdiff+0x10c>)
 8008b22:	4602      	mov	r2, r0
 8008b24:	f240 2137 	movw	r1, #567	; 0x237
 8008b28:	4839      	ldr	r0, [pc, #228]	; (8008c10 <__mdiff+0x110>)
 8008b2a:	f001 fca1 	bl	800a470 <__assert_func>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	bfa4      	itt	ge
 8008b3a:	4643      	movge	r3, r8
 8008b3c:	46a0      	movge	r8, r4
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b44:	bfa6      	itte	ge
 8008b46:	461c      	movge	r4, r3
 8008b48:	2500      	movge	r5, #0
 8008b4a:	2501      	movlt	r5, #1
 8008b4c:	f7ff fcf6 	bl	800853c <_Balloc>
 8008b50:	b920      	cbnz	r0, 8008b5c <__mdiff+0x5c>
 8008b52:	4b2e      	ldr	r3, [pc, #184]	; (8008c0c <__mdiff+0x10c>)
 8008b54:	4602      	mov	r2, r0
 8008b56:	f240 2145 	movw	r1, #581	; 0x245
 8008b5a:	e7e5      	b.n	8008b28 <__mdiff+0x28>
 8008b5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b60:	6926      	ldr	r6, [r4, #16]
 8008b62:	60c5      	str	r5, [r0, #12]
 8008b64:	f104 0914 	add.w	r9, r4, #20
 8008b68:	f108 0514 	add.w	r5, r8, #20
 8008b6c:	f100 0e14 	add.w	lr, r0, #20
 8008b70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b78:	f108 0210 	add.w	r2, r8, #16
 8008b7c:	46f2      	mov	sl, lr
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b88:	fa11 f88b 	uxtah	r8, r1, fp
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	eba8 0801 	sub.w	r8, r8, r1
 8008b94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b9c:	fa1f f888 	uxth.w	r8, r8
 8008ba0:	1419      	asrs	r1, r3, #16
 8008ba2:	454e      	cmp	r6, r9
 8008ba4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ba8:	f84a 3b04 	str.w	r3, [sl], #4
 8008bac:	d8e8      	bhi.n	8008b80 <__mdiff+0x80>
 8008bae:	1b33      	subs	r3, r6, r4
 8008bb0:	3b15      	subs	r3, #21
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	3415      	adds	r4, #21
 8008bba:	42a6      	cmp	r6, r4
 8008bbc:	bf38      	it	cc
 8008bbe:	2304      	movcc	r3, #4
 8008bc0:	441d      	add	r5, r3
 8008bc2:	4473      	add	r3, lr
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	462e      	mov	r6, r5
 8008bc8:	4566      	cmp	r6, ip
 8008bca:	d30e      	bcc.n	8008bea <__mdiff+0xea>
 8008bcc:	f10c 0203 	add.w	r2, ip, #3
 8008bd0:	1b52      	subs	r2, r2, r5
 8008bd2:	f022 0203 	bic.w	r2, r2, #3
 8008bd6:	3d03      	subs	r5, #3
 8008bd8:	45ac      	cmp	ip, r5
 8008bda:	bf38      	it	cc
 8008bdc:	2200      	movcc	r2, #0
 8008bde:	4413      	add	r3, r2
 8008be0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008be4:	b17a      	cbz	r2, 8008c06 <__mdiff+0x106>
 8008be6:	6107      	str	r7, [r0, #16]
 8008be8:	e7a4      	b.n	8008b34 <__mdiff+0x34>
 8008bea:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bee:	fa11 f288 	uxtah	r2, r1, r8
 8008bf2:	1414      	asrs	r4, r2, #16
 8008bf4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bf8:	b292      	uxth	r2, r2
 8008bfa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bfe:	f84e 2b04 	str.w	r2, [lr], #4
 8008c02:	1421      	asrs	r1, r4, #16
 8008c04:	e7e0      	b.n	8008bc8 <__mdiff+0xc8>
 8008c06:	3f01      	subs	r7, #1
 8008c08:	e7ea      	b.n	8008be0 <__mdiff+0xe0>
 8008c0a:	bf00      	nop
 8008c0c:	0800d119 	.word	0x0800d119
 8008c10:	0800d12a 	.word	0x0800d12a

08008c14 <__ulp>:
 8008c14:	b082      	sub	sp, #8
 8008c16:	ed8d 0b00 	vstr	d0, [sp]
 8008c1a:	9a01      	ldr	r2, [sp, #4]
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <__ulp+0x48>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dc08      	bgt.n	8008c3a <__ulp+0x26>
 8008c28:	425b      	negs	r3, r3
 8008c2a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008c2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c32:	da04      	bge.n	8008c3e <__ulp+0x2a>
 8008c34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c38:	4113      	asrs	r3, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	e008      	b.n	8008c50 <__ulp+0x3c>
 8008c3e:	f1a2 0314 	sub.w	r3, r2, #20
 8008c42:	2b1e      	cmp	r3, #30
 8008c44:	bfda      	itte	le
 8008c46:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008c4a:	40da      	lsrle	r2, r3
 8008c4c:	2201      	movgt	r2, #1
 8008c4e:	2300      	movs	r3, #0
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	ec41 0b10 	vmov	d0, r0, r1
 8008c58:	b002      	add	sp, #8
 8008c5a:	4770      	bx	lr
 8008c5c:	7ff00000 	.word	0x7ff00000

08008c60 <__b2d>:
 8008c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	6906      	ldr	r6, [r0, #16]
 8008c66:	f100 0814 	add.w	r8, r0, #20
 8008c6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c6e:	1f37      	subs	r7, r6, #4
 8008c70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c74:	4610      	mov	r0, r2
 8008c76:	f7ff fd53 	bl	8008720 <__hi0bits>
 8008c7a:	f1c0 0320 	rsb	r3, r0, #32
 8008c7e:	280a      	cmp	r0, #10
 8008c80:	600b      	str	r3, [r1, #0]
 8008c82:	491b      	ldr	r1, [pc, #108]	; (8008cf0 <__b2d+0x90>)
 8008c84:	dc15      	bgt.n	8008cb2 <__b2d+0x52>
 8008c86:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c8a:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c8e:	45b8      	cmp	r8, r7
 8008c90:	ea43 0501 	orr.w	r5, r3, r1
 8008c94:	bf34      	ite	cc
 8008c96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c9a:	2300      	movcs	r3, #0
 8008c9c:	3015      	adds	r0, #21
 8008c9e:	fa02 f000 	lsl.w	r0, r2, r0
 8008ca2:	fa23 f30c 	lsr.w	r3, r3, ip
 8008ca6:	4303      	orrs	r3, r0
 8008ca8:	461c      	mov	r4, r3
 8008caa:	ec45 4b10 	vmov	d0, r4, r5
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb2:	45b8      	cmp	r8, r7
 8008cb4:	bf3a      	itte	cc
 8008cb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cba:	f1a6 0708 	subcc.w	r7, r6, #8
 8008cbe:	2300      	movcs	r3, #0
 8008cc0:	380b      	subs	r0, #11
 8008cc2:	d012      	beq.n	8008cea <__b2d+0x8a>
 8008cc4:	f1c0 0120 	rsb	r1, r0, #32
 8008cc8:	fa23 f401 	lsr.w	r4, r3, r1
 8008ccc:	4082      	lsls	r2, r0
 8008cce:	4322      	orrs	r2, r4
 8008cd0:	4547      	cmp	r7, r8
 8008cd2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008cd6:	bf8c      	ite	hi
 8008cd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008cdc:	2200      	movls	r2, #0
 8008cde:	4083      	lsls	r3, r0
 8008ce0:	40ca      	lsrs	r2, r1
 8008ce2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	e7de      	b.n	8008ca8 <__b2d+0x48>
 8008cea:	ea42 0501 	orr.w	r5, r2, r1
 8008cee:	e7db      	b.n	8008ca8 <__b2d+0x48>
 8008cf0:	3ff00000 	.word	0x3ff00000

08008cf4 <__d2b>:
 8008cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cf8:	460f      	mov	r7, r1
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	ec59 8b10 	vmov	r8, r9, d0
 8008d00:	4616      	mov	r6, r2
 8008d02:	f7ff fc1b 	bl	800853c <_Balloc>
 8008d06:	4604      	mov	r4, r0
 8008d08:	b930      	cbnz	r0, 8008d18 <__d2b+0x24>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <__d2b+0xac>)
 8008d0e:	4825      	ldr	r0, [pc, #148]	; (8008da4 <__d2b+0xb0>)
 8008d10:	f240 310f 	movw	r1, #783	; 0x30f
 8008d14:	f001 fbac 	bl	800a470 <__assert_func>
 8008d18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d20:	bb2d      	cbnz	r5, 8008d6e <__d2b+0x7a>
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	f1b8 0300 	subs.w	r3, r8, #0
 8008d28:	d026      	beq.n	8008d78 <__d2b+0x84>
 8008d2a:	4668      	mov	r0, sp
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	f7ff fd17 	bl	8008760 <__lo0bits>
 8008d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d36:	b1e8      	cbz	r0, 8008d74 <__d2b+0x80>
 8008d38:	f1c0 0320 	rsb	r3, r0, #32
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	430b      	orrs	r3, r1
 8008d42:	40c2      	lsrs	r2, r0
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	9201      	str	r2, [sp, #4]
 8008d48:	9b01      	ldr	r3, [sp, #4]
 8008d4a:	61a3      	str	r3, [r4, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bf14      	ite	ne
 8008d50:	2202      	movne	r2, #2
 8008d52:	2201      	moveq	r2, #1
 8008d54:	6122      	str	r2, [r4, #16]
 8008d56:	b1bd      	cbz	r5, 8008d88 <__d2b+0x94>
 8008d58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d5c:	4405      	add	r5, r0
 8008d5e:	603d      	str	r5, [r7, #0]
 8008d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d64:	6030      	str	r0, [r6, #0]
 8008d66:	4620      	mov	r0, r4
 8008d68:	b003      	add	sp, #12
 8008d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d72:	e7d6      	b.n	8008d22 <__d2b+0x2e>
 8008d74:	6161      	str	r1, [r4, #20]
 8008d76:	e7e7      	b.n	8008d48 <__d2b+0x54>
 8008d78:	a801      	add	r0, sp, #4
 8008d7a:	f7ff fcf1 	bl	8008760 <__lo0bits>
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	6163      	str	r3, [r4, #20]
 8008d82:	3020      	adds	r0, #32
 8008d84:	2201      	movs	r2, #1
 8008d86:	e7e5      	b.n	8008d54 <__d2b+0x60>
 8008d88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d90:	6038      	str	r0, [r7, #0]
 8008d92:	6918      	ldr	r0, [r3, #16]
 8008d94:	f7ff fcc4 	bl	8008720 <__hi0bits>
 8008d98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d9c:	e7e2      	b.n	8008d64 <__d2b+0x70>
 8008d9e:	bf00      	nop
 8008da0:	0800d119 	.word	0x0800d119
 8008da4:	0800d12a 	.word	0x0800d12a

08008da8 <__ratio>:
 8008da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4688      	mov	r8, r1
 8008dae:	4669      	mov	r1, sp
 8008db0:	4681      	mov	r9, r0
 8008db2:	f7ff ff55 	bl	8008c60 <__b2d>
 8008db6:	a901      	add	r1, sp, #4
 8008db8:	4640      	mov	r0, r8
 8008dba:	ec55 4b10 	vmov	r4, r5, d0
 8008dbe:	f7ff ff4f 	bl	8008c60 <__b2d>
 8008dc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008dca:	eba3 0c02 	sub.w	ip, r3, r2
 8008dce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008dd8:	ec51 0b10 	vmov	r0, r1, d0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bfd6      	itet	le
 8008de0:	460a      	movle	r2, r1
 8008de2:	462a      	movgt	r2, r5
 8008de4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008de8:	468b      	mov	fp, r1
 8008dea:	462f      	mov	r7, r5
 8008dec:	bfd4      	ite	le
 8008dee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008df2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008df6:	4620      	mov	r0, r4
 8008df8:	ee10 2a10 	vmov	r2, s0
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fd4c 	bl	800089c <__aeabi_ddiv>
 8008e04:	ec41 0b10 	vmov	d0, r0, r1
 8008e08:	b003      	add	sp, #12
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e0e <__copybits>:
 8008e0e:	3901      	subs	r1, #1
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	1149      	asrs	r1, r1, #5
 8008e14:	6914      	ldr	r4, [r2, #16]
 8008e16:	3101      	adds	r1, #1
 8008e18:	f102 0314 	add.w	r3, r2, #20
 8008e1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e24:	1f05      	subs	r5, r0, #4
 8008e26:	42a3      	cmp	r3, r4
 8008e28:	d30c      	bcc.n	8008e44 <__copybits+0x36>
 8008e2a:	1aa3      	subs	r3, r4, r2
 8008e2c:	3b11      	subs	r3, #17
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	3211      	adds	r2, #17
 8008e34:	42a2      	cmp	r2, r4
 8008e36:	bf88      	it	hi
 8008e38:	2300      	movhi	r3, #0
 8008e3a:	4418      	add	r0, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4288      	cmp	r0, r1
 8008e40:	d305      	bcc.n	8008e4e <__copybits+0x40>
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e48:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e4c:	e7eb      	b.n	8008e26 <__copybits+0x18>
 8008e4e:	f840 3b04 	str.w	r3, [r0], #4
 8008e52:	e7f4      	b.n	8008e3e <__copybits+0x30>

08008e54 <__any_on>:
 8008e54:	f100 0214 	add.w	r2, r0, #20
 8008e58:	6900      	ldr	r0, [r0, #16]
 8008e5a:	114b      	asrs	r3, r1, #5
 8008e5c:	4298      	cmp	r0, r3
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	db11      	blt.n	8008e86 <__any_on+0x32>
 8008e62:	dd0a      	ble.n	8008e7a <__any_on+0x26>
 8008e64:	f011 011f 	ands.w	r1, r1, #31
 8008e68:	d007      	beq.n	8008e7a <__any_on+0x26>
 8008e6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e6e:	fa24 f001 	lsr.w	r0, r4, r1
 8008e72:	fa00 f101 	lsl.w	r1, r0, r1
 8008e76:	428c      	cmp	r4, r1
 8008e78:	d10b      	bne.n	8008e92 <__any_on+0x3e>
 8008e7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d803      	bhi.n	8008e8a <__any_on+0x36>
 8008e82:	2000      	movs	r0, #0
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	4603      	mov	r3, r0
 8008e88:	e7f7      	b.n	8008e7a <__any_on+0x26>
 8008e8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d0f5      	beq.n	8008e7e <__any_on+0x2a>
 8008e92:	2001      	movs	r0, #1
 8008e94:	e7f6      	b.n	8008e84 <__any_on+0x30>

08008e96 <sulp>:
 8008e96:	b570      	push	{r4, r5, r6, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	ec45 4b10 	vmov	d0, r4, r5
 8008ea0:	4616      	mov	r6, r2
 8008ea2:	f7ff feb7 	bl	8008c14 <__ulp>
 8008ea6:	ec51 0b10 	vmov	r0, r1, d0
 8008eaa:	b17e      	cbz	r6, 8008ecc <sulp+0x36>
 8008eac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008eb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dd09      	ble.n	8008ecc <sulp+0x36>
 8008eb8:	051b      	lsls	r3, r3, #20
 8008eba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	462b      	mov	r3, r5
 8008ec8:	f7f7 fbbe 	bl	8000648 <__aeabi_dmul>
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ed0 <_strtod_l>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	ed2d 8b02 	vpush	{d8}
 8008ed8:	b09b      	sub	sp, #108	; 0x6c
 8008eda:	4604      	mov	r4, r0
 8008edc:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ede:	2200      	movs	r2, #0
 8008ee0:	9216      	str	r2, [sp, #88]	; 0x58
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	f04f 0800 	mov.w	r8, #0
 8008ee8:	f04f 0900 	mov.w	r9, #0
 8008eec:	460a      	mov	r2, r1
 8008eee:	9215      	str	r2, [sp, #84]	; 0x54
 8008ef0:	7811      	ldrb	r1, [r2, #0]
 8008ef2:	292b      	cmp	r1, #43	; 0x2b
 8008ef4:	d04c      	beq.n	8008f90 <_strtod_l+0xc0>
 8008ef6:	d83a      	bhi.n	8008f6e <_strtod_l+0x9e>
 8008ef8:	290d      	cmp	r1, #13
 8008efa:	d834      	bhi.n	8008f66 <_strtod_l+0x96>
 8008efc:	2908      	cmp	r1, #8
 8008efe:	d834      	bhi.n	8008f6a <_strtod_l+0x9a>
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d03d      	beq.n	8008f80 <_strtod_l+0xb0>
 8008f04:	2200      	movs	r2, #0
 8008f06:	920a      	str	r2, [sp, #40]	; 0x28
 8008f08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008f0a:	7832      	ldrb	r2, [r6, #0]
 8008f0c:	2a30      	cmp	r2, #48	; 0x30
 8008f0e:	f040 80b4 	bne.w	800907a <_strtod_l+0x1aa>
 8008f12:	7872      	ldrb	r2, [r6, #1]
 8008f14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008f18:	2a58      	cmp	r2, #88	; 0x58
 8008f1a:	d170      	bne.n	8008ffe <_strtod_l+0x12e>
 8008f1c:	9302      	str	r3, [sp, #8]
 8008f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	ab16      	add	r3, sp, #88	; 0x58
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4a8e      	ldr	r2, [pc, #568]	; (8009160 <_strtod_l+0x290>)
 8008f28:	ab17      	add	r3, sp, #92	; 0x5c
 8008f2a:	a915      	add	r1, sp, #84	; 0x54
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f001 fb3b 	bl	800a5a8 <__gethex>
 8008f32:	f010 070f 	ands.w	r7, r0, #15
 8008f36:	4605      	mov	r5, r0
 8008f38:	d005      	beq.n	8008f46 <_strtod_l+0x76>
 8008f3a:	2f06      	cmp	r7, #6
 8008f3c:	d12a      	bne.n	8008f94 <_strtod_l+0xc4>
 8008f3e:	3601      	adds	r6, #1
 8008f40:	2300      	movs	r3, #0
 8008f42:	9615      	str	r6, [sp, #84]	; 0x54
 8008f44:	930a      	str	r3, [sp, #40]	; 0x28
 8008f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f040 857f 	bne.w	8009a4c <_strtod_l+0xb7c>
 8008f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f50:	b1db      	cbz	r3, 8008f8a <_strtod_l+0xba>
 8008f52:	4642      	mov	r2, r8
 8008f54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f58:	ec43 2b10 	vmov	d0, r2, r3
 8008f5c:	b01b      	add	sp, #108	; 0x6c
 8008f5e:	ecbd 8b02 	vpop	{d8}
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	2920      	cmp	r1, #32
 8008f68:	d1cc      	bne.n	8008f04 <_strtod_l+0x34>
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	e7bf      	b.n	8008eee <_strtod_l+0x1e>
 8008f6e:	292d      	cmp	r1, #45	; 0x2d
 8008f70:	d1c8      	bne.n	8008f04 <_strtod_l+0x34>
 8008f72:	2101      	movs	r1, #1
 8008f74:	910a      	str	r1, [sp, #40]	; 0x28
 8008f76:	1c51      	adds	r1, r2, #1
 8008f78:	9115      	str	r1, [sp, #84]	; 0x54
 8008f7a:	7852      	ldrb	r2, [r2, #1]
 8008f7c:	2a00      	cmp	r2, #0
 8008f7e:	d1c3      	bne.n	8008f08 <_strtod_l+0x38>
 8008f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f82:	9515      	str	r5, [sp, #84]	; 0x54
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 855f 	bne.w	8009a48 <_strtod_l+0xb78>
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	e7e3      	b.n	8008f58 <_strtod_l+0x88>
 8008f90:	2100      	movs	r1, #0
 8008f92:	e7ef      	b.n	8008f74 <_strtod_l+0xa4>
 8008f94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f96:	b13a      	cbz	r2, 8008fa8 <_strtod_l+0xd8>
 8008f98:	2135      	movs	r1, #53	; 0x35
 8008f9a:	a818      	add	r0, sp, #96	; 0x60
 8008f9c:	f7ff ff37 	bl	8008e0e <__copybits>
 8008fa0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fb0a 	bl	80085bc <_Bfree>
 8008fa8:	3f01      	subs	r7, #1
 8008faa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fac:	2f04      	cmp	r7, #4
 8008fae:	d806      	bhi.n	8008fbe <_strtod_l+0xee>
 8008fb0:	e8df f007 	tbb	[pc, r7]
 8008fb4:	201d0314 	.word	0x201d0314
 8008fb8:	14          	.byte	0x14
 8008fb9:	00          	.byte	0x00
 8008fba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008fbe:	05e9      	lsls	r1, r5, #23
 8008fc0:	bf48      	it	mi
 8008fc2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008fc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fca:	0d1b      	lsrs	r3, r3, #20
 8008fcc:	051b      	lsls	r3, r3, #20
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1b9      	bne.n	8008f46 <_strtod_l+0x76>
 8008fd2:	f7fe fb03 	bl	80075dc <__errno>
 8008fd6:	2322      	movs	r3, #34	; 0x22
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	e7b4      	b.n	8008f46 <_strtod_l+0x76>
 8008fdc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008fe0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008fe4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008fe8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008fec:	e7e7      	b.n	8008fbe <_strtod_l+0xee>
 8008fee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009168 <_strtod_l+0x298>
 8008ff2:	e7e4      	b.n	8008fbe <_strtod_l+0xee>
 8008ff4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ff8:	f04f 38ff 	mov.w	r8, #4294967295
 8008ffc:	e7df      	b.n	8008fbe <_strtod_l+0xee>
 8008ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	9215      	str	r2, [sp, #84]	; 0x54
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b30      	cmp	r3, #48	; 0x30
 8009008:	d0f9      	beq.n	8008ffe <_strtod_l+0x12e>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d09b      	beq.n	8008f46 <_strtod_l+0x76>
 800900e:	2301      	movs	r3, #1
 8009010:	f04f 0a00 	mov.w	sl, #0
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009018:	930b      	str	r3, [sp, #44]	; 0x2c
 800901a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800901e:	46d3      	mov	fp, sl
 8009020:	220a      	movs	r2, #10
 8009022:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009024:	7806      	ldrb	r6, [r0, #0]
 8009026:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800902a:	b2d9      	uxtb	r1, r3
 800902c:	2909      	cmp	r1, #9
 800902e:	d926      	bls.n	800907e <_strtod_l+0x1ae>
 8009030:	494c      	ldr	r1, [pc, #304]	; (8009164 <_strtod_l+0x294>)
 8009032:	2201      	movs	r2, #1
 8009034:	f001 f9c0 	bl	800a3b8 <strncmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	d030      	beq.n	800909e <_strtod_l+0x1ce>
 800903c:	2000      	movs	r0, #0
 800903e:	4632      	mov	r2, r6
 8009040:	9005      	str	r0, [sp, #20]
 8009042:	465e      	mov	r6, fp
 8009044:	4603      	mov	r3, r0
 8009046:	2a65      	cmp	r2, #101	; 0x65
 8009048:	d001      	beq.n	800904e <_strtod_l+0x17e>
 800904a:	2a45      	cmp	r2, #69	; 0x45
 800904c:	d113      	bne.n	8009076 <_strtod_l+0x1a6>
 800904e:	b91e      	cbnz	r6, 8009058 <_strtod_l+0x188>
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	4302      	orrs	r2, r0
 8009054:	d094      	beq.n	8008f80 <_strtod_l+0xb0>
 8009056:	2600      	movs	r6, #0
 8009058:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800905a:	1c6a      	adds	r2, r5, #1
 800905c:	9215      	str	r2, [sp, #84]	; 0x54
 800905e:	786a      	ldrb	r2, [r5, #1]
 8009060:	2a2b      	cmp	r2, #43	; 0x2b
 8009062:	d074      	beq.n	800914e <_strtod_l+0x27e>
 8009064:	2a2d      	cmp	r2, #45	; 0x2d
 8009066:	d078      	beq.n	800915a <_strtod_l+0x28a>
 8009068:	f04f 0c00 	mov.w	ip, #0
 800906c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009070:	2909      	cmp	r1, #9
 8009072:	d97f      	bls.n	8009174 <_strtod_l+0x2a4>
 8009074:	9515      	str	r5, [sp, #84]	; 0x54
 8009076:	2700      	movs	r7, #0
 8009078:	e09e      	b.n	80091b8 <_strtod_l+0x2e8>
 800907a:	2300      	movs	r3, #0
 800907c:	e7c8      	b.n	8009010 <_strtod_l+0x140>
 800907e:	f1bb 0f08 	cmp.w	fp, #8
 8009082:	bfd8      	it	le
 8009084:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009086:	f100 0001 	add.w	r0, r0, #1
 800908a:	bfda      	itte	le
 800908c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009090:	9309      	strle	r3, [sp, #36]	; 0x24
 8009092:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009096:	f10b 0b01 	add.w	fp, fp, #1
 800909a:	9015      	str	r0, [sp, #84]	; 0x54
 800909c:	e7c1      	b.n	8009022 <_strtod_l+0x152>
 800909e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	9215      	str	r2, [sp, #84]	; 0x54
 80090a4:	785a      	ldrb	r2, [r3, #1]
 80090a6:	f1bb 0f00 	cmp.w	fp, #0
 80090aa:	d037      	beq.n	800911c <_strtod_l+0x24c>
 80090ac:	9005      	str	r0, [sp, #20]
 80090ae:	465e      	mov	r6, fp
 80090b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	d912      	bls.n	80090de <_strtod_l+0x20e>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e7c4      	b.n	8009046 <_strtod_l+0x176>
 80090bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	9215      	str	r2, [sp, #84]	; 0x54
 80090c2:	785a      	ldrb	r2, [r3, #1]
 80090c4:	3001      	adds	r0, #1
 80090c6:	2a30      	cmp	r2, #48	; 0x30
 80090c8:	d0f8      	beq.n	80090bc <_strtod_l+0x1ec>
 80090ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	f200 84c1 	bhi.w	8009a56 <_strtod_l+0xb86>
 80090d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d6:	9005      	str	r0, [sp, #20]
 80090d8:	2000      	movs	r0, #0
 80090da:	930b      	str	r3, [sp, #44]	; 0x2c
 80090dc:	4606      	mov	r6, r0
 80090de:	3a30      	subs	r2, #48	; 0x30
 80090e0:	f100 0301 	add.w	r3, r0, #1
 80090e4:	d014      	beq.n	8009110 <_strtod_l+0x240>
 80090e6:	9905      	ldr	r1, [sp, #20]
 80090e8:	4419      	add	r1, r3
 80090ea:	9105      	str	r1, [sp, #20]
 80090ec:	4633      	mov	r3, r6
 80090ee:	eb00 0c06 	add.w	ip, r0, r6
 80090f2:	210a      	movs	r1, #10
 80090f4:	4563      	cmp	r3, ip
 80090f6:	d113      	bne.n	8009120 <_strtod_l+0x250>
 80090f8:	1833      	adds	r3, r6, r0
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	f106 0601 	add.w	r6, r6, #1
 8009100:	4406      	add	r6, r0
 8009102:	dc1a      	bgt.n	800913a <_strtod_l+0x26a>
 8009104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009106:	230a      	movs	r3, #10
 8009108:	fb03 2301 	mla	r3, r3, r1, r2
 800910c:	9309      	str	r3, [sp, #36]	; 0x24
 800910e:	2300      	movs	r3, #0
 8009110:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009112:	1c51      	adds	r1, r2, #1
 8009114:	9115      	str	r1, [sp, #84]	; 0x54
 8009116:	7852      	ldrb	r2, [r2, #1]
 8009118:	4618      	mov	r0, r3
 800911a:	e7c9      	b.n	80090b0 <_strtod_l+0x1e0>
 800911c:	4658      	mov	r0, fp
 800911e:	e7d2      	b.n	80090c6 <_strtod_l+0x1f6>
 8009120:	2b08      	cmp	r3, #8
 8009122:	f103 0301 	add.w	r3, r3, #1
 8009126:	dc03      	bgt.n	8009130 <_strtod_l+0x260>
 8009128:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800912a:	434f      	muls	r7, r1
 800912c:	9709      	str	r7, [sp, #36]	; 0x24
 800912e:	e7e1      	b.n	80090f4 <_strtod_l+0x224>
 8009130:	2b10      	cmp	r3, #16
 8009132:	bfd8      	it	le
 8009134:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009138:	e7dc      	b.n	80090f4 <_strtod_l+0x224>
 800913a:	2e10      	cmp	r6, #16
 800913c:	bfdc      	itt	le
 800913e:	230a      	movle	r3, #10
 8009140:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009144:	e7e3      	b.n	800910e <_strtod_l+0x23e>
 8009146:	2300      	movs	r3, #0
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	2301      	movs	r3, #1
 800914c:	e780      	b.n	8009050 <_strtod_l+0x180>
 800914e:	f04f 0c00 	mov.w	ip, #0
 8009152:	1caa      	adds	r2, r5, #2
 8009154:	9215      	str	r2, [sp, #84]	; 0x54
 8009156:	78aa      	ldrb	r2, [r5, #2]
 8009158:	e788      	b.n	800906c <_strtod_l+0x19c>
 800915a:	f04f 0c01 	mov.w	ip, #1
 800915e:	e7f8      	b.n	8009152 <_strtod_l+0x282>
 8009160:	0800d288 	.word	0x0800d288
 8009164:	0800d284 	.word	0x0800d284
 8009168:	7ff00000 	.word	0x7ff00000
 800916c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800916e:	1c51      	adds	r1, r2, #1
 8009170:	9115      	str	r1, [sp, #84]	; 0x54
 8009172:	7852      	ldrb	r2, [r2, #1]
 8009174:	2a30      	cmp	r2, #48	; 0x30
 8009176:	d0f9      	beq.n	800916c <_strtod_l+0x29c>
 8009178:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800917c:	2908      	cmp	r1, #8
 800917e:	f63f af7a 	bhi.w	8009076 <_strtod_l+0x1a6>
 8009182:	3a30      	subs	r2, #48	; 0x30
 8009184:	9208      	str	r2, [sp, #32]
 8009186:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009188:	920c      	str	r2, [sp, #48]	; 0x30
 800918a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800918c:	1c57      	adds	r7, r2, #1
 800918e:	9715      	str	r7, [sp, #84]	; 0x54
 8009190:	7852      	ldrb	r2, [r2, #1]
 8009192:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009196:	f1be 0f09 	cmp.w	lr, #9
 800919a:	d938      	bls.n	800920e <_strtod_l+0x33e>
 800919c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800919e:	1a7f      	subs	r7, r7, r1
 80091a0:	2f08      	cmp	r7, #8
 80091a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80091a6:	dc03      	bgt.n	80091b0 <_strtod_l+0x2e0>
 80091a8:	9908      	ldr	r1, [sp, #32]
 80091aa:	428f      	cmp	r7, r1
 80091ac:	bfa8      	it	ge
 80091ae:	460f      	movge	r7, r1
 80091b0:	f1bc 0f00 	cmp.w	ip, #0
 80091b4:	d000      	beq.n	80091b8 <_strtod_l+0x2e8>
 80091b6:	427f      	negs	r7, r7
 80091b8:	2e00      	cmp	r6, #0
 80091ba:	d14f      	bne.n	800925c <_strtod_l+0x38c>
 80091bc:	9904      	ldr	r1, [sp, #16]
 80091be:	4301      	orrs	r1, r0
 80091c0:	f47f aec1 	bne.w	8008f46 <_strtod_l+0x76>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f47f aedb 	bne.w	8008f80 <_strtod_l+0xb0>
 80091ca:	2a69      	cmp	r2, #105	; 0x69
 80091cc:	d029      	beq.n	8009222 <_strtod_l+0x352>
 80091ce:	dc26      	bgt.n	800921e <_strtod_l+0x34e>
 80091d0:	2a49      	cmp	r2, #73	; 0x49
 80091d2:	d026      	beq.n	8009222 <_strtod_l+0x352>
 80091d4:	2a4e      	cmp	r2, #78	; 0x4e
 80091d6:	f47f aed3 	bne.w	8008f80 <_strtod_l+0xb0>
 80091da:	499b      	ldr	r1, [pc, #620]	; (8009448 <_strtod_l+0x578>)
 80091dc:	a815      	add	r0, sp, #84	; 0x54
 80091de:	f001 fc23 	bl	800aa28 <__match>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f43f aecc 	beq.w	8008f80 <_strtod_l+0xb0>
 80091e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b28      	cmp	r3, #40	; 0x28
 80091ee:	d12f      	bne.n	8009250 <_strtod_l+0x380>
 80091f0:	4996      	ldr	r1, [pc, #600]	; (800944c <_strtod_l+0x57c>)
 80091f2:	aa18      	add	r2, sp, #96	; 0x60
 80091f4:	a815      	add	r0, sp, #84	; 0x54
 80091f6:	f001 fc2b 	bl	800aa50 <__hexnan>
 80091fa:	2805      	cmp	r0, #5
 80091fc:	d128      	bne.n	8009250 <_strtod_l+0x380>
 80091fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009204:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009208:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800920c:	e69b      	b.n	8008f46 <_strtod_l+0x76>
 800920e:	9f08      	ldr	r7, [sp, #32]
 8009210:	210a      	movs	r1, #10
 8009212:	fb01 2107 	mla	r1, r1, r7, r2
 8009216:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800921a:	9208      	str	r2, [sp, #32]
 800921c:	e7b5      	b.n	800918a <_strtod_l+0x2ba>
 800921e:	2a6e      	cmp	r2, #110	; 0x6e
 8009220:	e7d9      	b.n	80091d6 <_strtod_l+0x306>
 8009222:	498b      	ldr	r1, [pc, #556]	; (8009450 <_strtod_l+0x580>)
 8009224:	a815      	add	r0, sp, #84	; 0x54
 8009226:	f001 fbff 	bl	800aa28 <__match>
 800922a:	2800      	cmp	r0, #0
 800922c:	f43f aea8 	beq.w	8008f80 <_strtod_l+0xb0>
 8009230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009232:	4988      	ldr	r1, [pc, #544]	; (8009454 <_strtod_l+0x584>)
 8009234:	3b01      	subs	r3, #1
 8009236:	a815      	add	r0, sp, #84	; 0x54
 8009238:	9315      	str	r3, [sp, #84]	; 0x54
 800923a:	f001 fbf5 	bl	800aa28 <__match>
 800923e:	b910      	cbnz	r0, 8009246 <_strtod_l+0x376>
 8009240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009242:	3301      	adds	r3, #1
 8009244:	9315      	str	r3, [sp, #84]	; 0x54
 8009246:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009464 <_strtod_l+0x594>
 800924a:	f04f 0800 	mov.w	r8, #0
 800924e:	e67a      	b.n	8008f46 <_strtod_l+0x76>
 8009250:	4881      	ldr	r0, [pc, #516]	; (8009458 <_strtod_l+0x588>)
 8009252:	f001 f905 	bl	800a460 <nan>
 8009256:	ec59 8b10 	vmov	r8, r9, d0
 800925a:	e674      	b.n	8008f46 <_strtod_l+0x76>
 800925c:	9b05      	ldr	r3, [sp, #20]
 800925e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009260:	1afb      	subs	r3, r7, r3
 8009262:	f1bb 0f00 	cmp.w	fp, #0
 8009266:	bf08      	it	eq
 8009268:	46b3      	moveq	fp, r6
 800926a:	2e10      	cmp	r6, #16
 800926c:	9308      	str	r3, [sp, #32]
 800926e:	4635      	mov	r5, r6
 8009270:	bfa8      	it	ge
 8009272:	2510      	movge	r5, #16
 8009274:	f7f7 f96e 	bl	8000554 <__aeabi_ui2d>
 8009278:	2e09      	cmp	r6, #9
 800927a:	4680      	mov	r8, r0
 800927c:	4689      	mov	r9, r1
 800927e:	dd13      	ble.n	80092a8 <_strtod_l+0x3d8>
 8009280:	4b76      	ldr	r3, [pc, #472]	; (800945c <_strtod_l+0x58c>)
 8009282:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009286:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800928a:	f7f7 f9dd 	bl	8000648 <__aeabi_dmul>
 800928e:	4680      	mov	r8, r0
 8009290:	4650      	mov	r0, sl
 8009292:	4689      	mov	r9, r1
 8009294:	f7f7 f95e 	bl	8000554 <__aeabi_ui2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 f81c 	bl	80002dc <__adddf3>
 80092a4:	4680      	mov	r8, r0
 80092a6:	4689      	mov	r9, r1
 80092a8:	2e0f      	cmp	r6, #15
 80092aa:	dc38      	bgt.n	800931e <_strtod_l+0x44e>
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f43f ae49 	beq.w	8008f46 <_strtod_l+0x76>
 80092b4:	dd24      	ble.n	8009300 <_strtod_l+0x430>
 80092b6:	2b16      	cmp	r3, #22
 80092b8:	dc0b      	bgt.n	80092d2 <_strtod_l+0x402>
 80092ba:	4968      	ldr	r1, [pc, #416]	; (800945c <_strtod_l+0x58c>)
 80092bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	f7f7 f9be 	bl	8000648 <__aeabi_dmul>
 80092cc:	4680      	mov	r8, r0
 80092ce:	4689      	mov	r9, r1
 80092d0:	e639      	b.n	8008f46 <_strtod_l+0x76>
 80092d2:	9a08      	ldr	r2, [sp, #32]
 80092d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80092d8:	4293      	cmp	r3, r2
 80092da:	db20      	blt.n	800931e <_strtod_l+0x44e>
 80092dc:	4c5f      	ldr	r4, [pc, #380]	; (800945c <_strtod_l+0x58c>)
 80092de:	f1c6 060f 	rsb	r6, r6, #15
 80092e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80092e6:	4642      	mov	r2, r8
 80092e8:	464b      	mov	r3, r9
 80092ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ee:	f7f7 f9ab 	bl	8000648 <__aeabi_dmul>
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	1b9e      	subs	r6, r3, r6
 80092f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80092fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092fe:	e7e3      	b.n	80092c8 <_strtod_l+0x3f8>
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	3316      	adds	r3, #22
 8009304:	db0b      	blt.n	800931e <_strtod_l+0x44e>
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	1bdf      	subs	r7, r3, r7
 800930a:	4b54      	ldr	r3, [pc, #336]	; (800945c <_strtod_l+0x58c>)
 800930c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009314:	4640      	mov	r0, r8
 8009316:	4649      	mov	r1, r9
 8009318:	f7f7 fac0 	bl	800089c <__aeabi_ddiv>
 800931c:	e7d6      	b.n	80092cc <_strtod_l+0x3fc>
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	1b75      	subs	r5, r6, r5
 8009322:	441d      	add	r5, r3
 8009324:	2d00      	cmp	r5, #0
 8009326:	dd70      	ble.n	800940a <_strtod_l+0x53a>
 8009328:	f015 030f 	ands.w	r3, r5, #15
 800932c:	d00a      	beq.n	8009344 <_strtod_l+0x474>
 800932e:	494b      	ldr	r1, [pc, #300]	; (800945c <_strtod_l+0x58c>)
 8009330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800933c:	f7f7 f984 	bl	8000648 <__aeabi_dmul>
 8009340:	4680      	mov	r8, r0
 8009342:	4689      	mov	r9, r1
 8009344:	f035 050f 	bics.w	r5, r5, #15
 8009348:	d04d      	beq.n	80093e6 <_strtod_l+0x516>
 800934a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800934e:	dd22      	ble.n	8009396 <_strtod_l+0x4c6>
 8009350:	2500      	movs	r5, #0
 8009352:	46ab      	mov	fp, r5
 8009354:	9509      	str	r5, [sp, #36]	; 0x24
 8009356:	9505      	str	r5, [sp, #20]
 8009358:	2322      	movs	r3, #34	; 0x22
 800935a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009464 <_strtod_l+0x594>
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	f04f 0800 	mov.w	r8, #0
 8009364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009366:	2b00      	cmp	r3, #0
 8009368:	f43f aded 	beq.w	8008f46 <_strtod_l+0x76>
 800936c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff f924 	bl	80085bc <_Bfree>
 8009374:	9905      	ldr	r1, [sp, #20]
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff f920 	bl	80085bc <_Bfree>
 800937c:	4659      	mov	r1, fp
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff f91c 	bl	80085bc <_Bfree>
 8009384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff f918 	bl	80085bc <_Bfree>
 800938c:	4629      	mov	r1, r5
 800938e:	4620      	mov	r0, r4
 8009390:	f7ff f914 	bl	80085bc <_Bfree>
 8009394:	e5d7      	b.n	8008f46 <_strtod_l+0x76>
 8009396:	4b32      	ldr	r3, [pc, #200]	; (8009460 <_strtod_l+0x590>)
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	2300      	movs	r3, #0
 800939c:	112d      	asrs	r5, r5, #4
 800939e:	4640      	mov	r0, r8
 80093a0:	4649      	mov	r1, r9
 80093a2:	469a      	mov	sl, r3
 80093a4:	2d01      	cmp	r5, #1
 80093a6:	dc21      	bgt.n	80093ec <_strtod_l+0x51c>
 80093a8:	b10b      	cbz	r3, 80093ae <_strtod_l+0x4de>
 80093aa:	4680      	mov	r8, r0
 80093ac:	4689      	mov	r9, r1
 80093ae:	492c      	ldr	r1, [pc, #176]	; (8009460 <_strtod_l+0x590>)
 80093b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80093b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c0:	f7f7 f942 	bl	8000648 <__aeabi_dmul>
 80093c4:	4b27      	ldr	r3, [pc, #156]	; (8009464 <_strtod_l+0x594>)
 80093c6:	460a      	mov	r2, r1
 80093c8:	400b      	ands	r3, r1
 80093ca:	4927      	ldr	r1, [pc, #156]	; (8009468 <_strtod_l+0x598>)
 80093cc:	428b      	cmp	r3, r1
 80093ce:	4680      	mov	r8, r0
 80093d0:	d8be      	bhi.n	8009350 <_strtod_l+0x480>
 80093d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80093d6:	428b      	cmp	r3, r1
 80093d8:	bf86      	itte	hi
 80093da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800946c <_strtod_l+0x59c>
 80093de:	f04f 38ff 	movhi.w	r8, #4294967295
 80093e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80093e6:	2300      	movs	r3, #0
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	e07b      	b.n	80094e4 <_strtod_l+0x614>
 80093ec:	07ea      	lsls	r2, r5, #31
 80093ee:	d505      	bpl.n	80093fc <_strtod_l+0x52c>
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f7 f927 	bl	8000648 <__aeabi_dmul>
 80093fa:	2301      	movs	r3, #1
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	3208      	adds	r2, #8
 8009400:	f10a 0a01 	add.w	sl, sl, #1
 8009404:	106d      	asrs	r5, r5, #1
 8009406:	9204      	str	r2, [sp, #16]
 8009408:	e7cc      	b.n	80093a4 <_strtod_l+0x4d4>
 800940a:	d0ec      	beq.n	80093e6 <_strtod_l+0x516>
 800940c:	426d      	negs	r5, r5
 800940e:	f015 020f 	ands.w	r2, r5, #15
 8009412:	d00a      	beq.n	800942a <_strtod_l+0x55a>
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <_strtod_l+0x58c>)
 8009416:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f7 fa3b 	bl	800089c <__aeabi_ddiv>
 8009426:	4680      	mov	r8, r0
 8009428:	4689      	mov	r9, r1
 800942a:	112d      	asrs	r5, r5, #4
 800942c:	d0db      	beq.n	80093e6 <_strtod_l+0x516>
 800942e:	2d1f      	cmp	r5, #31
 8009430:	dd1e      	ble.n	8009470 <_strtod_l+0x5a0>
 8009432:	2500      	movs	r5, #0
 8009434:	46ab      	mov	fp, r5
 8009436:	9509      	str	r5, [sp, #36]	; 0x24
 8009438:	9505      	str	r5, [sp, #20]
 800943a:	2322      	movs	r3, #34	; 0x22
 800943c:	f04f 0800 	mov.w	r8, #0
 8009440:	f04f 0900 	mov.w	r9, #0
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	e78d      	b.n	8009364 <_strtod_l+0x494>
 8009448:	0800d071 	.word	0x0800d071
 800944c:	0800d29c 	.word	0x0800d29c
 8009450:	0800d069 	.word	0x0800d069
 8009454:	0800d0a0 	.word	0x0800d0a0
 8009458:	0800d42d 	.word	0x0800d42d
 800945c:	0800d1b0 	.word	0x0800d1b0
 8009460:	0800d188 	.word	0x0800d188
 8009464:	7ff00000 	.word	0x7ff00000
 8009468:	7ca00000 	.word	0x7ca00000
 800946c:	7fefffff 	.word	0x7fefffff
 8009470:	f015 0310 	ands.w	r3, r5, #16
 8009474:	bf18      	it	ne
 8009476:	236a      	movne	r3, #106	; 0x6a
 8009478:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800981c <_strtod_l+0x94c>
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	2300      	movs	r3, #0
 8009484:	07ea      	lsls	r2, r5, #31
 8009486:	d504      	bpl.n	8009492 <_strtod_l+0x5c2>
 8009488:	e9da 2300 	ldrd	r2, r3, [sl]
 800948c:	f7f7 f8dc 	bl	8000648 <__aeabi_dmul>
 8009490:	2301      	movs	r3, #1
 8009492:	106d      	asrs	r5, r5, #1
 8009494:	f10a 0a08 	add.w	sl, sl, #8
 8009498:	d1f4      	bne.n	8009484 <_strtod_l+0x5b4>
 800949a:	b10b      	cbz	r3, 80094a0 <_strtod_l+0x5d0>
 800949c:	4680      	mov	r8, r0
 800949e:	4689      	mov	r9, r1
 80094a0:	9b04      	ldr	r3, [sp, #16]
 80094a2:	b1bb      	cbz	r3, 80094d4 <_strtod_l+0x604>
 80094a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80094a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	4649      	mov	r1, r9
 80094b0:	dd10      	ble.n	80094d4 <_strtod_l+0x604>
 80094b2:	2b1f      	cmp	r3, #31
 80094b4:	f340 811e 	ble.w	80096f4 <_strtod_l+0x824>
 80094b8:	2b34      	cmp	r3, #52	; 0x34
 80094ba:	bfde      	ittt	le
 80094bc:	f04f 33ff 	movle.w	r3, #4294967295
 80094c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80094c4:	4093      	lslle	r3, r2
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	bfcc      	ite	gt
 80094cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80094d0:	ea03 0901 	andle.w	r9, r3, r1
 80094d4:	2200      	movs	r2, #0
 80094d6:	2300      	movs	r3, #0
 80094d8:	4640      	mov	r0, r8
 80094da:	4649      	mov	r1, r9
 80094dc:	f7f7 fb1c 	bl	8000b18 <__aeabi_dcmpeq>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1a6      	bne.n	8009432 <_strtod_l+0x562>
 80094e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094ea:	4633      	mov	r3, r6
 80094ec:	465a      	mov	r2, fp
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff f8cc 	bl	800868c <__s2b>
 80094f4:	9009      	str	r0, [sp, #36]	; 0x24
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f43f af2a 	beq.w	8009350 <_strtod_l+0x480>
 80094fc:	9a08      	ldr	r2, [sp, #32]
 80094fe:	9b05      	ldr	r3, [sp, #20]
 8009500:	2a00      	cmp	r2, #0
 8009502:	eba3 0307 	sub.w	r3, r3, r7
 8009506:	bfa8      	it	ge
 8009508:	2300      	movge	r3, #0
 800950a:	930c      	str	r3, [sp, #48]	; 0x30
 800950c:	2500      	movs	r5, #0
 800950e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009512:	9312      	str	r3, [sp, #72]	; 0x48
 8009514:	46ab      	mov	fp, r5
 8009516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009518:	4620      	mov	r0, r4
 800951a:	6859      	ldr	r1, [r3, #4]
 800951c:	f7ff f80e 	bl	800853c <_Balloc>
 8009520:	9005      	str	r0, [sp, #20]
 8009522:	2800      	cmp	r0, #0
 8009524:	f43f af18 	beq.w	8009358 <_strtod_l+0x488>
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	691a      	ldr	r2, [r3, #16]
 800952c:	3202      	adds	r2, #2
 800952e:	f103 010c 	add.w	r1, r3, #12
 8009532:	0092      	lsls	r2, r2, #2
 8009534:	300c      	adds	r0, #12
 8009536:	f000 ff83 	bl	800a440 <memcpy>
 800953a:	ec49 8b10 	vmov	d0, r8, r9
 800953e:	aa18      	add	r2, sp, #96	; 0x60
 8009540:	a917      	add	r1, sp, #92	; 0x5c
 8009542:	4620      	mov	r0, r4
 8009544:	f7ff fbd6 	bl	8008cf4 <__d2b>
 8009548:	ec49 8b18 	vmov	d8, r8, r9
 800954c:	9016      	str	r0, [sp, #88]	; 0x58
 800954e:	2800      	cmp	r0, #0
 8009550:	f43f af02 	beq.w	8009358 <_strtod_l+0x488>
 8009554:	2101      	movs	r1, #1
 8009556:	4620      	mov	r0, r4
 8009558:	f7ff f930 	bl	80087bc <__i2b>
 800955c:	4683      	mov	fp, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f aefa 	beq.w	8009358 <_strtod_l+0x488>
 8009564:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009566:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009568:	2e00      	cmp	r6, #0
 800956a:	bfab      	itete	ge
 800956c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800956e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009572:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009576:	bfac      	ite	ge
 8009578:	eb06 0a03 	addge.w	sl, r6, r3
 800957c:	1b9f      	sublt	r7, r3, r6
 800957e:	9b04      	ldr	r3, [sp, #16]
 8009580:	1af6      	subs	r6, r6, r3
 8009582:	4416      	add	r6, r2
 8009584:	4ba0      	ldr	r3, [pc, #640]	; (8009808 <_strtod_l+0x938>)
 8009586:	3e01      	subs	r6, #1
 8009588:	429e      	cmp	r6, r3
 800958a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800958e:	f280 80c4 	bge.w	800971a <_strtod_l+0x84a>
 8009592:	1b9b      	subs	r3, r3, r6
 8009594:	2b1f      	cmp	r3, #31
 8009596:	eba2 0203 	sub.w	r2, r2, r3
 800959a:	f04f 0101 	mov.w	r1, #1
 800959e:	f300 80b0 	bgt.w	8009702 <_strtod_l+0x832>
 80095a2:	fa01 f303 	lsl.w	r3, r1, r3
 80095a6:	930e      	str	r3, [sp, #56]	; 0x38
 80095a8:	2300      	movs	r3, #0
 80095aa:	930d      	str	r3, [sp, #52]	; 0x34
 80095ac:	eb0a 0602 	add.w	r6, sl, r2
 80095b0:	9b04      	ldr	r3, [sp, #16]
 80095b2:	45b2      	cmp	sl, r6
 80095b4:	4417      	add	r7, r2
 80095b6:	441f      	add	r7, r3
 80095b8:	4653      	mov	r3, sl
 80095ba:	bfa8      	it	ge
 80095bc:	4633      	movge	r3, r6
 80095be:	42bb      	cmp	r3, r7
 80095c0:	bfa8      	it	ge
 80095c2:	463b      	movge	r3, r7
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bfc2      	ittt	gt
 80095c8:	1af6      	subgt	r6, r6, r3
 80095ca:	1aff      	subgt	r7, r7, r3
 80095cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80095d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dd17      	ble.n	8009606 <_strtod_l+0x736>
 80095d6:	4659      	mov	r1, fp
 80095d8:	461a      	mov	r2, r3
 80095da:	4620      	mov	r0, r4
 80095dc:	f7ff f9ae 	bl	800893c <__pow5mult>
 80095e0:	4683      	mov	fp, r0
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f43f aeb8 	beq.w	8009358 <_strtod_l+0x488>
 80095e8:	4601      	mov	r1, r0
 80095ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff f8fb 	bl	80087e8 <__multiply>
 80095f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f43f aeaf 	beq.w	8009358 <_strtod_l+0x488>
 80095fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095fc:	4620      	mov	r0, r4
 80095fe:	f7fe ffdd 	bl	80085bc <_Bfree>
 8009602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009604:	9316      	str	r3, [sp, #88]	; 0x58
 8009606:	2e00      	cmp	r6, #0
 8009608:	f300 808c 	bgt.w	8009724 <_strtod_l+0x854>
 800960c:	9b08      	ldr	r3, [sp, #32]
 800960e:	2b00      	cmp	r3, #0
 8009610:	dd08      	ble.n	8009624 <_strtod_l+0x754>
 8009612:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009614:	9905      	ldr	r1, [sp, #20]
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff f990 	bl	800893c <__pow5mult>
 800961c:	9005      	str	r0, [sp, #20]
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f ae9a 	beq.w	8009358 <_strtod_l+0x488>
 8009624:	2f00      	cmp	r7, #0
 8009626:	dd08      	ble.n	800963a <_strtod_l+0x76a>
 8009628:	9905      	ldr	r1, [sp, #20]
 800962a:	463a      	mov	r2, r7
 800962c:	4620      	mov	r0, r4
 800962e:	f7ff f9df 	bl	80089f0 <__lshift>
 8009632:	9005      	str	r0, [sp, #20]
 8009634:	2800      	cmp	r0, #0
 8009636:	f43f ae8f 	beq.w	8009358 <_strtod_l+0x488>
 800963a:	f1ba 0f00 	cmp.w	sl, #0
 800963e:	dd08      	ble.n	8009652 <_strtod_l+0x782>
 8009640:	4659      	mov	r1, fp
 8009642:	4652      	mov	r2, sl
 8009644:	4620      	mov	r0, r4
 8009646:	f7ff f9d3 	bl	80089f0 <__lshift>
 800964a:	4683      	mov	fp, r0
 800964c:	2800      	cmp	r0, #0
 800964e:	f43f ae83 	beq.w	8009358 <_strtod_l+0x488>
 8009652:	9a05      	ldr	r2, [sp, #20]
 8009654:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009656:	4620      	mov	r0, r4
 8009658:	f7ff fa52 	bl	8008b00 <__mdiff>
 800965c:	4605      	mov	r5, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	f43f ae7a 	beq.w	8009358 <_strtod_l+0x488>
 8009664:	68c3      	ldr	r3, [r0, #12]
 8009666:	930b      	str	r3, [sp, #44]	; 0x2c
 8009668:	2300      	movs	r3, #0
 800966a:	60c3      	str	r3, [r0, #12]
 800966c:	4659      	mov	r1, fp
 800966e:	f7ff fa2b 	bl	8008ac8 <__mcmp>
 8009672:	2800      	cmp	r0, #0
 8009674:	da60      	bge.n	8009738 <_strtod_l+0x868>
 8009676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009678:	ea53 0308 	orrs.w	r3, r3, r8
 800967c:	f040 8084 	bne.w	8009788 <_strtod_l+0x8b8>
 8009680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009684:	2b00      	cmp	r3, #0
 8009686:	d17f      	bne.n	8009788 <_strtod_l+0x8b8>
 8009688:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800968c:	0d1b      	lsrs	r3, r3, #20
 800968e:	051b      	lsls	r3, r3, #20
 8009690:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009694:	d978      	bls.n	8009788 <_strtod_l+0x8b8>
 8009696:	696b      	ldr	r3, [r5, #20]
 8009698:	b913      	cbnz	r3, 80096a0 <_strtod_l+0x7d0>
 800969a:	692b      	ldr	r3, [r5, #16]
 800969c:	2b01      	cmp	r3, #1
 800969e:	dd73      	ble.n	8009788 <_strtod_l+0x8b8>
 80096a0:	4629      	mov	r1, r5
 80096a2:	2201      	movs	r2, #1
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff f9a3 	bl	80089f0 <__lshift>
 80096aa:	4659      	mov	r1, fp
 80096ac:	4605      	mov	r5, r0
 80096ae:	f7ff fa0b 	bl	8008ac8 <__mcmp>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	dd68      	ble.n	8009788 <_strtod_l+0x8b8>
 80096b6:	9904      	ldr	r1, [sp, #16]
 80096b8:	4a54      	ldr	r2, [pc, #336]	; (800980c <_strtod_l+0x93c>)
 80096ba:	464b      	mov	r3, r9
 80096bc:	2900      	cmp	r1, #0
 80096be:	f000 8084 	beq.w	80097ca <_strtod_l+0x8fa>
 80096c2:	ea02 0109 	and.w	r1, r2, r9
 80096c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096ca:	dc7e      	bgt.n	80097ca <_strtod_l+0x8fa>
 80096cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096d0:	f77f aeb3 	ble.w	800943a <_strtod_l+0x56a>
 80096d4:	4b4e      	ldr	r3, [pc, #312]	; (8009810 <_strtod_l+0x940>)
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	2200      	movs	r2, #0
 80096dc:	f7f6 ffb4 	bl	8000648 <__aeabi_dmul>
 80096e0:	4b4a      	ldr	r3, [pc, #296]	; (800980c <_strtod_l+0x93c>)
 80096e2:	400b      	ands	r3, r1
 80096e4:	4680      	mov	r8, r0
 80096e6:	4689      	mov	r9, r1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f47f ae3f 	bne.w	800936c <_strtod_l+0x49c>
 80096ee:	2322      	movs	r3, #34	; 0x22
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	e63b      	b.n	800936c <_strtod_l+0x49c>
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	fa02 f303 	lsl.w	r3, r2, r3
 80096fc:	ea03 0808 	and.w	r8, r3, r8
 8009700:	e6e8      	b.n	80094d4 <_strtod_l+0x604>
 8009702:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009706:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800970a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800970e:	36e2      	adds	r6, #226	; 0xe2
 8009710:	fa01 f306 	lsl.w	r3, r1, r6
 8009714:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009718:	e748      	b.n	80095ac <_strtod_l+0x6dc>
 800971a:	2100      	movs	r1, #0
 800971c:	2301      	movs	r3, #1
 800971e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009722:	e743      	b.n	80095ac <_strtod_l+0x6dc>
 8009724:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009726:	4632      	mov	r2, r6
 8009728:	4620      	mov	r0, r4
 800972a:	f7ff f961 	bl	80089f0 <__lshift>
 800972e:	9016      	str	r0, [sp, #88]	; 0x58
 8009730:	2800      	cmp	r0, #0
 8009732:	f47f af6b 	bne.w	800960c <_strtod_l+0x73c>
 8009736:	e60f      	b.n	8009358 <_strtod_l+0x488>
 8009738:	46ca      	mov	sl, r9
 800973a:	d171      	bne.n	8009820 <_strtod_l+0x950>
 800973c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800973e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009742:	b352      	cbz	r2, 800979a <_strtod_l+0x8ca>
 8009744:	4a33      	ldr	r2, [pc, #204]	; (8009814 <_strtod_l+0x944>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d12a      	bne.n	80097a0 <_strtod_l+0x8d0>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	4641      	mov	r1, r8
 800974e:	b1fb      	cbz	r3, 8009790 <_strtod_l+0x8c0>
 8009750:	4b2e      	ldr	r3, [pc, #184]	; (800980c <_strtod_l+0x93c>)
 8009752:	ea09 0303 	and.w	r3, r9, r3
 8009756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	d81a      	bhi.n	8009796 <_strtod_l+0x8c6>
 8009760:	0d1b      	lsrs	r3, r3, #20
 8009762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009766:	fa02 f303 	lsl.w	r3, r2, r3
 800976a:	4299      	cmp	r1, r3
 800976c:	d118      	bne.n	80097a0 <_strtod_l+0x8d0>
 800976e:	4b2a      	ldr	r3, [pc, #168]	; (8009818 <_strtod_l+0x948>)
 8009770:	459a      	cmp	sl, r3
 8009772:	d102      	bne.n	800977a <_strtod_l+0x8aa>
 8009774:	3101      	adds	r1, #1
 8009776:	f43f adef 	beq.w	8009358 <_strtod_l+0x488>
 800977a:	4b24      	ldr	r3, [pc, #144]	; (800980c <_strtod_l+0x93c>)
 800977c:	ea0a 0303 	and.w	r3, sl, r3
 8009780:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009784:	f04f 0800 	mov.w	r8, #0
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1a2      	bne.n	80096d4 <_strtod_l+0x804>
 800978e:	e5ed      	b.n	800936c <_strtod_l+0x49c>
 8009790:	f04f 33ff 	mov.w	r3, #4294967295
 8009794:	e7e9      	b.n	800976a <_strtod_l+0x89a>
 8009796:	4613      	mov	r3, r2
 8009798:	e7e7      	b.n	800976a <_strtod_l+0x89a>
 800979a:	ea53 0308 	orrs.w	r3, r3, r8
 800979e:	d08a      	beq.n	80096b6 <_strtod_l+0x7e6>
 80097a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a2:	b1e3      	cbz	r3, 80097de <_strtod_l+0x90e>
 80097a4:	ea13 0f0a 	tst.w	r3, sl
 80097a8:	d0ee      	beq.n	8009788 <_strtod_l+0x8b8>
 80097aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ac:	9a04      	ldr	r2, [sp, #16]
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	b1c3      	cbz	r3, 80097e6 <_strtod_l+0x916>
 80097b4:	f7ff fb6f 	bl	8008e96 <sulp>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	ec51 0b18 	vmov	r0, r1, d8
 80097c0:	f7f6 fd8c 	bl	80002dc <__adddf3>
 80097c4:	4680      	mov	r8, r0
 80097c6:	4689      	mov	r9, r1
 80097c8:	e7de      	b.n	8009788 <_strtod_l+0x8b8>
 80097ca:	4013      	ands	r3, r2
 80097cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80097d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80097d8:	f04f 38ff 	mov.w	r8, #4294967295
 80097dc:	e7d4      	b.n	8009788 <_strtod_l+0x8b8>
 80097de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097e0:	ea13 0f08 	tst.w	r3, r8
 80097e4:	e7e0      	b.n	80097a8 <_strtod_l+0x8d8>
 80097e6:	f7ff fb56 	bl	8008e96 <sulp>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	ec51 0b18 	vmov	r0, r1, d8
 80097f2:	f7f6 fd71 	bl	80002d8 <__aeabi_dsub>
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	4680      	mov	r8, r0
 80097fc:	4689      	mov	r9, r1
 80097fe:	f7f7 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 8009802:	2800      	cmp	r0, #0
 8009804:	d0c0      	beq.n	8009788 <_strtod_l+0x8b8>
 8009806:	e618      	b.n	800943a <_strtod_l+0x56a>
 8009808:	fffffc02 	.word	0xfffffc02
 800980c:	7ff00000 	.word	0x7ff00000
 8009810:	39500000 	.word	0x39500000
 8009814:	000fffff 	.word	0x000fffff
 8009818:	7fefffff 	.word	0x7fefffff
 800981c:	0800d2b0 	.word	0x0800d2b0
 8009820:	4659      	mov	r1, fp
 8009822:	4628      	mov	r0, r5
 8009824:	f7ff fac0 	bl	8008da8 <__ratio>
 8009828:	ec57 6b10 	vmov	r6, r7, d0
 800982c:	ee10 0a10 	vmov	r0, s0
 8009830:	2200      	movs	r2, #0
 8009832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009836:	4639      	mov	r1, r7
 8009838:	f7f7 f982 	bl	8000b40 <__aeabi_dcmple>
 800983c:	2800      	cmp	r0, #0
 800983e:	d071      	beq.n	8009924 <_strtod_l+0xa54>
 8009840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d17c      	bne.n	8009940 <_strtod_l+0xa70>
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	d15a      	bne.n	8009902 <_strtod_l+0xa32>
 800984c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009850:	2b00      	cmp	r3, #0
 8009852:	d15d      	bne.n	8009910 <_strtod_l+0xa40>
 8009854:	4b90      	ldr	r3, [pc, #576]	; (8009a98 <_strtod_l+0xbc8>)
 8009856:	2200      	movs	r2, #0
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f7 f966 	bl	8000b2c <__aeabi_dcmplt>
 8009860:	2800      	cmp	r0, #0
 8009862:	d15c      	bne.n	800991e <_strtod_l+0xa4e>
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	4b8c      	ldr	r3, [pc, #560]	; (8009a9c <_strtod_l+0xbcc>)
 800986a:	2200      	movs	r2, #0
 800986c:	f7f6 feec 	bl	8000648 <__aeabi_dmul>
 8009870:	4606      	mov	r6, r0
 8009872:	460f      	mov	r7, r1
 8009874:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009878:	9606      	str	r6, [sp, #24]
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009880:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009884:	4b86      	ldr	r3, [pc, #536]	; (8009aa0 <_strtod_l+0xbd0>)
 8009886:	ea0a 0303 	and.w	r3, sl, r3
 800988a:	930d      	str	r3, [sp, #52]	; 0x34
 800988c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800988e:	4b85      	ldr	r3, [pc, #532]	; (8009aa4 <_strtod_l+0xbd4>)
 8009890:	429a      	cmp	r2, r3
 8009892:	f040 8090 	bne.w	80099b6 <_strtod_l+0xae6>
 8009896:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800989a:	ec49 8b10 	vmov	d0, r8, r9
 800989e:	f7ff f9b9 	bl	8008c14 <__ulp>
 80098a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098a6:	ec51 0b10 	vmov	r0, r1, d0
 80098aa:	f7f6 fecd 	bl	8000648 <__aeabi_dmul>
 80098ae:	4642      	mov	r2, r8
 80098b0:	464b      	mov	r3, r9
 80098b2:	f7f6 fd13 	bl	80002dc <__adddf3>
 80098b6:	460b      	mov	r3, r1
 80098b8:	4979      	ldr	r1, [pc, #484]	; (8009aa0 <_strtod_l+0xbd0>)
 80098ba:	4a7b      	ldr	r2, [pc, #492]	; (8009aa8 <_strtod_l+0xbd8>)
 80098bc:	4019      	ands	r1, r3
 80098be:	4291      	cmp	r1, r2
 80098c0:	4680      	mov	r8, r0
 80098c2:	d944      	bls.n	800994e <_strtod_l+0xa7e>
 80098c4:	ee18 2a90 	vmov	r2, s17
 80098c8:	4b78      	ldr	r3, [pc, #480]	; (8009aac <_strtod_l+0xbdc>)
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d104      	bne.n	80098d8 <_strtod_l+0xa08>
 80098ce:	ee18 3a10 	vmov	r3, s16
 80098d2:	3301      	adds	r3, #1
 80098d4:	f43f ad40 	beq.w	8009358 <_strtod_l+0x488>
 80098d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009aac <_strtod_l+0xbdc>
 80098dc:	f04f 38ff 	mov.w	r8, #4294967295
 80098e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7fe fe6a 	bl	80085bc <_Bfree>
 80098e8:	9905      	ldr	r1, [sp, #20]
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7fe fe66 	bl	80085bc <_Bfree>
 80098f0:	4659      	mov	r1, fp
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7fe fe62 	bl	80085bc <_Bfree>
 80098f8:	4629      	mov	r1, r5
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7fe fe5e 	bl	80085bc <_Bfree>
 8009900:	e609      	b.n	8009516 <_strtod_l+0x646>
 8009902:	f1b8 0f01 	cmp.w	r8, #1
 8009906:	d103      	bne.n	8009910 <_strtod_l+0xa40>
 8009908:	f1b9 0f00 	cmp.w	r9, #0
 800990c:	f43f ad95 	beq.w	800943a <_strtod_l+0x56a>
 8009910:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009a68 <_strtod_l+0xb98>
 8009914:	4f60      	ldr	r7, [pc, #384]	; (8009a98 <_strtod_l+0xbc8>)
 8009916:	ed8d 7b06 	vstr	d7, [sp, #24]
 800991a:	2600      	movs	r6, #0
 800991c:	e7ae      	b.n	800987c <_strtod_l+0x9ac>
 800991e:	4f5f      	ldr	r7, [pc, #380]	; (8009a9c <_strtod_l+0xbcc>)
 8009920:	2600      	movs	r6, #0
 8009922:	e7a7      	b.n	8009874 <_strtod_l+0x9a4>
 8009924:	4b5d      	ldr	r3, [pc, #372]	; (8009a9c <_strtod_l+0xbcc>)
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	2200      	movs	r2, #0
 800992c:	f7f6 fe8c 	bl	8000648 <__aeabi_dmul>
 8009930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009932:	4606      	mov	r6, r0
 8009934:	460f      	mov	r7, r1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d09c      	beq.n	8009874 <_strtod_l+0x9a4>
 800993a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800993e:	e79d      	b.n	800987c <_strtod_l+0x9ac>
 8009940:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009a70 <_strtod_l+0xba0>
 8009944:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009948:	ec57 6b17 	vmov	r6, r7, d7
 800994c:	e796      	b.n	800987c <_strtod_l+0x9ac>
 800994e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	46ca      	mov	sl, r9
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1c2      	bne.n	80098e0 <_strtod_l+0xa10>
 800995a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800995e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009960:	0d1b      	lsrs	r3, r3, #20
 8009962:	051b      	lsls	r3, r3, #20
 8009964:	429a      	cmp	r2, r3
 8009966:	d1bb      	bne.n	80098e0 <_strtod_l+0xa10>
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f7 f9cc 	bl	8000d08 <__aeabi_d2lz>
 8009970:	f7f6 fe3c 	bl	80005ec <__aeabi_l2d>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fcac 	bl	80002d8 <__aeabi_dsub>
 8009980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009982:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009986:	ea43 0308 	orr.w	r3, r3, r8
 800998a:	4313      	orrs	r3, r2
 800998c:	4606      	mov	r6, r0
 800998e:	460f      	mov	r7, r1
 8009990:	d054      	beq.n	8009a3c <_strtod_l+0xb6c>
 8009992:	a339      	add	r3, pc, #228	; (adr r3, 8009a78 <_strtod_l+0xba8>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f7 f8c8 	bl	8000b2c <__aeabi_dcmplt>
 800999c:	2800      	cmp	r0, #0
 800999e:	f47f ace5 	bne.w	800936c <_strtod_l+0x49c>
 80099a2:	a337      	add	r3, pc, #220	; (adr r3, 8009a80 <_strtod_l+0xbb0>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f7 f8dc 	bl	8000b68 <__aeabi_dcmpgt>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d095      	beq.n	80098e0 <_strtod_l+0xa10>
 80099b4:	e4da      	b.n	800936c <_strtod_l+0x49c>
 80099b6:	9b04      	ldr	r3, [sp, #16]
 80099b8:	b333      	cbz	r3, 8009a08 <_strtod_l+0xb38>
 80099ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099c0:	d822      	bhi.n	8009a08 <_strtod_l+0xb38>
 80099c2:	a331      	add	r3, pc, #196	; (adr r3, 8009a88 <_strtod_l+0xbb8>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	4630      	mov	r0, r6
 80099ca:	4639      	mov	r1, r7
 80099cc:	f7f7 f8b8 	bl	8000b40 <__aeabi_dcmple>
 80099d0:	b1a0      	cbz	r0, 80099fc <_strtod_l+0xb2c>
 80099d2:	4639      	mov	r1, r7
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7f7 f90f 	bl	8000bf8 <__aeabi_d2uiz>
 80099da:	2801      	cmp	r0, #1
 80099dc:	bf38      	it	cc
 80099de:	2001      	movcc	r0, #1
 80099e0:	f7f6 fdb8 	bl	8000554 <__aeabi_ui2d>
 80099e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e6:	4606      	mov	r6, r0
 80099e8:	460f      	mov	r7, r1
 80099ea:	bb23      	cbnz	r3, 8009a36 <_strtod_l+0xb66>
 80099ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099f0:	9010      	str	r0, [sp, #64]	; 0x40
 80099f2:	9311      	str	r3, [sp, #68]	; 0x44
 80099f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80099fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009a10:	eef0 0a68 	vmov.f32	s1, s17
 8009a14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009a18:	f7ff f8fc 	bl	8008c14 <__ulp>
 8009a1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a20:	ec53 2b10 	vmov	r2, r3, d0
 8009a24:	f7f6 fe10 	bl	8000648 <__aeabi_dmul>
 8009a28:	ec53 2b18 	vmov	r2, r3, d8
 8009a2c:	f7f6 fc56 	bl	80002dc <__adddf3>
 8009a30:	4680      	mov	r8, r0
 8009a32:	4689      	mov	r9, r1
 8009a34:	e78d      	b.n	8009952 <_strtod_l+0xa82>
 8009a36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009a3a:	e7db      	b.n	80099f4 <_strtod_l+0xb24>
 8009a3c:	a314      	add	r3, pc, #80	; (adr r3, 8009a90 <_strtod_l+0xbc0>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f7 f873 	bl	8000b2c <__aeabi_dcmplt>
 8009a46:	e7b3      	b.n	80099b0 <_strtod_l+0xae0>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	f7ff ba7c 	b.w	8008f4e <_strtod_l+0x7e>
 8009a56:	2a65      	cmp	r2, #101	; 0x65
 8009a58:	f43f ab75 	beq.w	8009146 <_strtod_l+0x276>
 8009a5c:	2a45      	cmp	r2, #69	; 0x45
 8009a5e:	f43f ab72 	beq.w	8009146 <_strtod_l+0x276>
 8009a62:	2301      	movs	r3, #1
 8009a64:	f7ff bbaa 	b.w	80091bc <_strtod_l+0x2ec>
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	bff00000 	.word	0xbff00000
 8009a70:	00000000 	.word	0x00000000
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	94a03595 	.word	0x94a03595
 8009a7c:	3fdfffff 	.word	0x3fdfffff
 8009a80:	35afe535 	.word	0x35afe535
 8009a84:	3fe00000 	.word	0x3fe00000
 8009a88:	ffc00000 	.word	0xffc00000
 8009a8c:	41dfffff 	.word	0x41dfffff
 8009a90:	94a03595 	.word	0x94a03595
 8009a94:	3fcfffff 	.word	0x3fcfffff
 8009a98:	3ff00000 	.word	0x3ff00000
 8009a9c:	3fe00000 	.word	0x3fe00000
 8009aa0:	7ff00000 	.word	0x7ff00000
 8009aa4:	7fe00000 	.word	0x7fe00000
 8009aa8:	7c9fffff 	.word	0x7c9fffff
 8009aac:	7fefffff 	.word	0x7fefffff

08009ab0 <_strtod_r>:
 8009ab0:	4b01      	ldr	r3, [pc, #4]	; (8009ab8 <_strtod_r+0x8>)
 8009ab2:	f7ff ba0d 	b.w	8008ed0 <_strtod_l>
 8009ab6:	bf00      	nop
 8009ab8:	20000070 	.word	0x20000070

08009abc <_strtol_l.constprop.0>:
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac2:	d001      	beq.n	8009ac8 <_strtol_l.constprop.0+0xc>
 8009ac4:	2b24      	cmp	r3, #36	; 0x24
 8009ac6:	d906      	bls.n	8009ad6 <_strtol_l.constprop.0+0x1a>
 8009ac8:	f7fd fd88 	bl	80075dc <__errno>
 8009acc:	2316      	movs	r3, #22
 8009ace:	6003      	str	r3, [r0, #0]
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009bbc <_strtol_l.constprop.0+0x100>
 8009ada:	460d      	mov	r5, r1
 8009adc:	462e      	mov	r6, r5
 8009ade:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009ae6:	f017 0708 	ands.w	r7, r7, #8
 8009aea:	d1f7      	bne.n	8009adc <_strtol_l.constprop.0+0x20>
 8009aec:	2c2d      	cmp	r4, #45	; 0x2d
 8009aee:	d132      	bne.n	8009b56 <_strtol_l.constprop.0+0x9a>
 8009af0:	782c      	ldrb	r4, [r5, #0]
 8009af2:	2701      	movs	r7, #1
 8009af4:	1cb5      	adds	r5, r6, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d05b      	beq.n	8009bb2 <_strtol_l.constprop.0+0xf6>
 8009afa:	2b10      	cmp	r3, #16
 8009afc:	d109      	bne.n	8009b12 <_strtol_l.constprop.0+0x56>
 8009afe:	2c30      	cmp	r4, #48	; 0x30
 8009b00:	d107      	bne.n	8009b12 <_strtol_l.constprop.0+0x56>
 8009b02:	782c      	ldrb	r4, [r5, #0]
 8009b04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b08:	2c58      	cmp	r4, #88	; 0x58
 8009b0a:	d14d      	bne.n	8009ba8 <_strtol_l.constprop.0+0xec>
 8009b0c:	786c      	ldrb	r4, [r5, #1]
 8009b0e:	2310      	movs	r3, #16
 8009b10:	3502      	adds	r5, #2
 8009b12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b16:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b1a:	f04f 0e00 	mov.w	lr, #0
 8009b1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b22:	4676      	mov	r6, lr
 8009b24:	fb03 8a19 	mls	sl, r3, r9, r8
 8009b28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009b2c:	f1bc 0f09 	cmp.w	ip, #9
 8009b30:	d816      	bhi.n	8009b60 <_strtol_l.constprop.0+0xa4>
 8009b32:	4664      	mov	r4, ip
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	dd24      	ble.n	8009b82 <_strtol_l.constprop.0+0xc6>
 8009b38:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b3c:	d008      	beq.n	8009b50 <_strtol_l.constprop.0+0x94>
 8009b3e:	45b1      	cmp	r9, r6
 8009b40:	d31c      	bcc.n	8009b7c <_strtol_l.constprop.0+0xc0>
 8009b42:	d101      	bne.n	8009b48 <_strtol_l.constprop.0+0x8c>
 8009b44:	45a2      	cmp	sl, r4
 8009b46:	db19      	blt.n	8009b7c <_strtol_l.constprop.0+0xc0>
 8009b48:	fb06 4603 	mla	r6, r6, r3, r4
 8009b4c:	f04f 0e01 	mov.w	lr, #1
 8009b50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b54:	e7e8      	b.n	8009b28 <_strtol_l.constprop.0+0x6c>
 8009b56:	2c2b      	cmp	r4, #43	; 0x2b
 8009b58:	bf04      	itt	eq
 8009b5a:	782c      	ldrbeq	r4, [r5, #0]
 8009b5c:	1cb5      	addeq	r5, r6, #2
 8009b5e:	e7ca      	b.n	8009af6 <_strtol_l.constprop.0+0x3a>
 8009b60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009b64:	f1bc 0f19 	cmp.w	ip, #25
 8009b68:	d801      	bhi.n	8009b6e <_strtol_l.constprop.0+0xb2>
 8009b6a:	3c37      	subs	r4, #55	; 0x37
 8009b6c:	e7e2      	b.n	8009b34 <_strtol_l.constprop.0+0x78>
 8009b6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b72:	f1bc 0f19 	cmp.w	ip, #25
 8009b76:	d804      	bhi.n	8009b82 <_strtol_l.constprop.0+0xc6>
 8009b78:	3c57      	subs	r4, #87	; 0x57
 8009b7a:	e7db      	b.n	8009b34 <_strtol_l.constprop.0+0x78>
 8009b7c:	f04f 3eff 	mov.w	lr, #4294967295
 8009b80:	e7e6      	b.n	8009b50 <_strtol_l.constprop.0+0x94>
 8009b82:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b86:	d105      	bne.n	8009b94 <_strtol_l.constprop.0+0xd8>
 8009b88:	2322      	movs	r3, #34	; 0x22
 8009b8a:	6003      	str	r3, [r0, #0]
 8009b8c:	4646      	mov	r6, r8
 8009b8e:	b942      	cbnz	r2, 8009ba2 <_strtol_l.constprop.0+0xe6>
 8009b90:	4630      	mov	r0, r6
 8009b92:	e79e      	b.n	8009ad2 <_strtol_l.constprop.0+0x16>
 8009b94:	b107      	cbz	r7, 8009b98 <_strtol_l.constprop.0+0xdc>
 8009b96:	4276      	negs	r6, r6
 8009b98:	2a00      	cmp	r2, #0
 8009b9a:	d0f9      	beq.n	8009b90 <_strtol_l.constprop.0+0xd4>
 8009b9c:	f1be 0f00 	cmp.w	lr, #0
 8009ba0:	d000      	beq.n	8009ba4 <_strtol_l.constprop.0+0xe8>
 8009ba2:	1e69      	subs	r1, r5, #1
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	e7f3      	b.n	8009b90 <_strtol_l.constprop.0+0xd4>
 8009ba8:	2430      	movs	r4, #48	; 0x30
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1b1      	bne.n	8009b12 <_strtol_l.constprop.0+0x56>
 8009bae:	2308      	movs	r3, #8
 8009bb0:	e7af      	b.n	8009b12 <_strtol_l.constprop.0+0x56>
 8009bb2:	2c30      	cmp	r4, #48	; 0x30
 8009bb4:	d0a5      	beq.n	8009b02 <_strtol_l.constprop.0+0x46>
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	e7ab      	b.n	8009b12 <_strtol_l.constprop.0+0x56>
 8009bba:	bf00      	nop
 8009bbc:	0800d2d9 	.word	0x0800d2d9

08009bc0 <_strtol_r>:
 8009bc0:	f7ff bf7c 	b.w	8009abc <_strtol_l.constprop.0>

08009bc4 <__ssputs_r>:
 8009bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	688e      	ldr	r6, [r1, #8]
 8009bca:	461f      	mov	r7, r3
 8009bcc:	42be      	cmp	r6, r7
 8009bce:	680b      	ldr	r3, [r1, #0]
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	4690      	mov	r8, r2
 8009bd6:	d82c      	bhi.n	8009c32 <__ssputs_r+0x6e>
 8009bd8:	898a      	ldrh	r2, [r1, #12]
 8009bda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bde:	d026      	beq.n	8009c2e <__ssputs_r+0x6a>
 8009be0:	6965      	ldr	r5, [r4, #20]
 8009be2:	6909      	ldr	r1, [r1, #16]
 8009be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009be8:	eba3 0901 	sub.w	r9, r3, r1
 8009bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bf0:	1c7b      	adds	r3, r7, #1
 8009bf2:	444b      	add	r3, r9
 8009bf4:	106d      	asrs	r5, r5, #1
 8009bf6:	429d      	cmp	r5, r3
 8009bf8:	bf38      	it	cc
 8009bfa:	461d      	movcc	r5, r3
 8009bfc:	0553      	lsls	r3, r2, #21
 8009bfe:	d527      	bpl.n	8009c50 <__ssputs_r+0x8c>
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7fe fc0f 	bl	8008424 <_malloc_r>
 8009c06:	4606      	mov	r6, r0
 8009c08:	b360      	cbz	r0, 8009c64 <__ssputs_r+0xa0>
 8009c0a:	6921      	ldr	r1, [r4, #16]
 8009c0c:	464a      	mov	r2, r9
 8009c0e:	f000 fc17 	bl	800a440 <memcpy>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	6126      	str	r6, [r4, #16]
 8009c20:	6165      	str	r5, [r4, #20]
 8009c22:	444e      	add	r6, r9
 8009c24:	eba5 0509 	sub.w	r5, r5, r9
 8009c28:	6026      	str	r6, [r4, #0]
 8009c2a:	60a5      	str	r5, [r4, #8]
 8009c2c:	463e      	mov	r6, r7
 8009c2e:	42be      	cmp	r6, r7
 8009c30:	d900      	bls.n	8009c34 <__ssputs_r+0x70>
 8009c32:	463e      	mov	r6, r7
 8009c34:	6820      	ldr	r0, [r4, #0]
 8009c36:	4632      	mov	r2, r6
 8009c38:	4641      	mov	r1, r8
 8009c3a:	f000 fba3 	bl	800a384 <memmove>
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	1b9b      	subs	r3, r3, r6
 8009c42:	60a3      	str	r3, [r4, #8]
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	4433      	add	r3, r6
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	462a      	mov	r2, r5
 8009c52:	f000 ffaa 	bl	800abaa <_realloc_r>
 8009c56:	4606      	mov	r6, r0
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d1e0      	bne.n	8009c1e <__ssputs_r+0x5a>
 8009c5c:	6921      	ldr	r1, [r4, #16]
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f7fe fb6c 	bl	800833c <_free_r>
 8009c64:	230c      	movs	r3, #12
 8009c66:	f8ca 3000 	str.w	r3, [sl]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	e7e9      	b.n	8009c4c <__ssputs_r+0x88>

08009c78 <_svfiprintf_r>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	4698      	mov	r8, r3
 8009c7e:	898b      	ldrh	r3, [r1, #12]
 8009c80:	061b      	lsls	r3, r3, #24
 8009c82:	b09d      	sub	sp, #116	; 0x74
 8009c84:	4607      	mov	r7, r0
 8009c86:	460d      	mov	r5, r1
 8009c88:	4614      	mov	r4, r2
 8009c8a:	d50e      	bpl.n	8009caa <_svfiprintf_r+0x32>
 8009c8c:	690b      	ldr	r3, [r1, #16]
 8009c8e:	b963      	cbnz	r3, 8009caa <_svfiprintf_r+0x32>
 8009c90:	2140      	movs	r1, #64	; 0x40
 8009c92:	f7fe fbc7 	bl	8008424 <_malloc_r>
 8009c96:	6028      	str	r0, [r5, #0]
 8009c98:	6128      	str	r0, [r5, #16]
 8009c9a:	b920      	cbnz	r0, 8009ca6 <_svfiprintf_r+0x2e>
 8009c9c:	230c      	movs	r3, #12
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	e0d0      	b.n	8009e48 <_svfiprintf_r+0x1d0>
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	616b      	str	r3, [r5, #20]
 8009caa:	2300      	movs	r3, #0
 8009cac:	9309      	str	r3, [sp, #36]	; 0x24
 8009cae:	2320      	movs	r3, #32
 8009cb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cb8:	2330      	movs	r3, #48	; 0x30
 8009cba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e60 <_svfiprintf_r+0x1e8>
 8009cbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc2:	f04f 0901 	mov.w	r9, #1
 8009cc6:	4623      	mov	r3, r4
 8009cc8:	469a      	mov	sl, r3
 8009cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cce:	b10a      	cbz	r2, 8009cd4 <_svfiprintf_r+0x5c>
 8009cd0:	2a25      	cmp	r2, #37	; 0x25
 8009cd2:	d1f9      	bne.n	8009cc8 <_svfiprintf_r+0x50>
 8009cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd8:	d00b      	beq.n	8009cf2 <_svfiprintf_r+0x7a>
 8009cda:	465b      	mov	r3, fp
 8009cdc:	4622      	mov	r2, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff ff6f 	bl	8009bc4 <__ssputs_r>
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f000 80a9 	beq.w	8009e3e <_svfiprintf_r+0x1c6>
 8009cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cee:	445a      	add	r2, fp
 8009cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 80a1 	beq.w	8009e3e <_svfiprintf_r+0x1c6>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d06:	f10a 0a01 	add.w	sl, sl, #1
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d12:	931a      	str	r3, [sp, #104]	; 0x68
 8009d14:	4654      	mov	r4, sl
 8009d16:	2205      	movs	r2, #5
 8009d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1c:	4850      	ldr	r0, [pc, #320]	; (8009e60 <_svfiprintf_r+0x1e8>)
 8009d1e:	f7f6 fa7f 	bl	8000220 <memchr>
 8009d22:	9a04      	ldr	r2, [sp, #16]
 8009d24:	b9d8      	cbnz	r0, 8009d5e <_svfiprintf_r+0xe6>
 8009d26:	06d0      	lsls	r0, r2, #27
 8009d28:	bf44      	itt	mi
 8009d2a:	2320      	movmi	r3, #32
 8009d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d30:	0711      	lsls	r1, r2, #28
 8009d32:	bf44      	itt	mi
 8009d34:	232b      	movmi	r3, #43	; 0x2b
 8009d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d40:	d015      	beq.n	8009d6e <_svfiprintf_r+0xf6>
 8009d42:	9a07      	ldr	r2, [sp, #28]
 8009d44:	4654      	mov	r4, sl
 8009d46:	2000      	movs	r0, #0
 8009d48:	f04f 0c0a 	mov.w	ip, #10
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d52:	3b30      	subs	r3, #48	; 0x30
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	d94d      	bls.n	8009df4 <_svfiprintf_r+0x17c>
 8009d58:	b1b0      	cbz	r0, 8009d88 <_svfiprintf_r+0x110>
 8009d5a:	9207      	str	r2, [sp, #28]
 8009d5c:	e014      	b.n	8009d88 <_svfiprintf_r+0x110>
 8009d5e:	eba0 0308 	sub.w	r3, r0, r8
 8009d62:	fa09 f303 	lsl.w	r3, r9, r3
 8009d66:	4313      	orrs	r3, r2
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	46a2      	mov	sl, r4
 8009d6c:	e7d2      	b.n	8009d14 <_svfiprintf_r+0x9c>
 8009d6e:	9b03      	ldr	r3, [sp, #12]
 8009d70:	1d19      	adds	r1, r3, #4
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	9103      	str	r1, [sp, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	bfbb      	ittet	lt
 8009d7a:	425b      	neglt	r3, r3
 8009d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d80:	9307      	strge	r3, [sp, #28]
 8009d82:	9307      	strlt	r3, [sp, #28]
 8009d84:	bfb8      	it	lt
 8009d86:	9204      	strlt	r2, [sp, #16]
 8009d88:	7823      	ldrb	r3, [r4, #0]
 8009d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d8c:	d10c      	bne.n	8009da8 <_svfiprintf_r+0x130>
 8009d8e:	7863      	ldrb	r3, [r4, #1]
 8009d90:	2b2a      	cmp	r3, #42	; 0x2a
 8009d92:	d134      	bne.n	8009dfe <_svfiprintf_r+0x186>
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	1d1a      	adds	r2, r3, #4
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	9203      	str	r2, [sp, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bfb8      	it	lt
 8009da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009da4:	3402      	adds	r4, #2
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e70 <_svfiprintf_r+0x1f8>
 8009dac:	7821      	ldrb	r1, [r4, #0]
 8009dae:	2203      	movs	r2, #3
 8009db0:	4650      	mov	r0, sl
 8009db2:	f7f6 fa35 	bl	8000220 <memchr>
 8009db6:	b138      	cbz	r0, 8009dc8 <_svfiprintf_r+0x150>
 8009db8:	9b04      	ldr	r3, [sp, #16]
 8009dba:	eba0 000a 	sub.w	r0, r0, sl
 8009dbe:	2240      	movs	r2, #64	; 0x40
 8009dc0:	4082      	lsls	r2, r0
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	3401      	adds	r4, #1
 8009dc6:	9304      	str	r3, [sp, #16]
 8009dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dcc:	4825      	ldr	r0, [pc, #148]	; (8009e64 <_svfiprintf_r+0x1ec>)
 8009dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dd2:	2206      	movs	r2, #6
 8009dd4:	f7f6 fa24 	bl	8000220 <memchr>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d038      	beq.n	8009e4e <_svfiprintf_r+0x1d6>
 8009ddc:	4b22      	ldr	r3, [pc, #136]	; (8009e68 <_svfiprintf_r+0x1f0>)
 8009dde:	bb1b      	cbnz	r3, 8009e28 <_svfiprintf_r+0x1b0>
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	3307      	adds	r3, #7
 8009de4:	f023 0307 	bic.w	r3, r3, #7
 8009de8:	3308      	adds	r3, #8
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dee:	4433      	add	r3, r6
 8009df0:	9309      	str	r3, [sp, #36]	; 0x24
 8009df2:	e768      	b.n	8009cc6 <_svfiprintf_r+0x4e>
 8009df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df8:	460c      	mov	r4, r1
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	e7a6      	b.n	8009d4c <_svfiprintf_r+0xd4>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	3401      	adds	r4, #1
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	4619      	mov	r1, r3
 8009e06:	f04f 0c0a 	mov.w	ip, #10
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e10:	3a30      	subs	r2, #48	; 0x30
 8009e12:	2a09      	cmp	r2, #9
 8009e14:	d903      	bls.n	8009e1e <_svfiprintf_r+0x1a6>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0c6      	beq.n	8009da8 <_svfiprintf_r+0x130>
 8009e1a:	9105      	str	r1, [sp, #20]
 8009e1c:	e7c4      	b.n	8009da8 <_svfiprintf_r+0x130>
 8009e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e22:	4604      	mov	r4, r0
 8009e24:	2301      	movs	r3, #1
 8009e26:	e7f0      	b.n	8009e0a <_svfiprintf_r+0x192>
 8009e28:	ab03      	add	r3, sp, #12
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	462a      	mov	r2, r5
 8009e2e:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <_svfiprintf_r+0x1f4>)
 8009e30:	a904      	add	r1, sp, #16
 8009e32:	4638      	mov	r0, r7
 8009e34:	f7fc fb7a 	bl	800652c <_printf_float>
 8009e38:	1c42      	adds	r2, r0, #1
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	d1d6      	bne.n	8009dec <_svfiprintf_r+0x174>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	065b      	lsls	r3, r3, #25
 8009e42:	f53f af2d 	bmi.w	8009ca0 <_svfiprintf_r+0x28>
 8009e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e48:	b01d      	add	sp, #116	; 0x74
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	ab03      	add	r3, sp, #12
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	462a      	mov	r2, r5
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <_svfiprintf_r+0x1f4>)
 8009e56:	a904      	add	r1, sp, #16
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f7fc fe0b 	bl	8006a74 <_printf_i>
 8009e5e:	e7eb      	b.n	8009e38 <_svfiprintf_r+0x1c0>
 8009e60:	0800d3d9 	.word	0x0800d3d9
 8009e64:	0800d3e3 	.word	0x0800d3e3
 8009e68:	0800652d 	.word	0x0800652d
 8009e6c:	08009bc5 	.word	0x08009bc5
 8009e70:	0800d3df 	.word	0x0800d3df

08009e74 <__sfputc_r>:
 8009e74:	6893      	ldr	r3, [r2, #8]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	b410      	push	{r4}
 8009e7c:	6093      	str	r3, [r2, #8]
 8009e7e:	da08      	bge.n	8009e92 <__sfputc_r+0x1e>
 8009e80:	6994      	ldr	r4, [r2, #24]
 8009e82:	42a3      	cmp	r3, r4
 8009e84:	db01      	blt.n	8009e8a <__sfputc_r+0x16>
 8009e86:	290a      	cmp	r1, #10
 8009e88:	d103      	bne.n	8009e92 <__sfputc_r+0x1e>
 8009e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e8e:	f7fd babe 	b.w	800740e <__swbuf_r>
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	1c58      	adds	r0, r3, #1
 8009e96:	6010      	str	r0, [r2, #0]
 8009e98:	7019      	strb	r1, [r3, #0]
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <__sfputs_r>:
 8009ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	460f      	mov	r7, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	18d5      	adds	r5, r2, r3
 8009eac:	42ac      	cmp	r4, r5
 8009eae:	d101      	bne.n	8009eb4 <__sfputs_r+0x12>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	e007      	b.n	8009ec4 <__sfputs_r+0x22>
 8009eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb8:	463a      	mov	r2, r7
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ffda 	bl	8009e74 <__sfputc_r>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d1f3      	bne.n	8009eac <__sfputs_r+0xa>
 8009ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ec8 <_vfiprintf_r>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	460d      	mov	r5, r1
 8009ece:	b09d      	sub	sp, #116	; 0x74
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	4698      	mov	r8, r3
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	b118      	cbz	r0, 8009ee0 <_vfiprintf_r+0x18>
 8009ed8:	6a03      	ldr	r3, [r0, #32]
 8009eda:	b90b      	cbnz	r3, 8009ee0 <_vfiprintf_r+0x18>
 8009edc:	f7fd f988 	bl	80071f0 <__sinit>
 8009ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee2:	07d9      	lsls	r1, r3, #31
 8009ee4:	d405      	bmi.n	8009ef2 <_vfiprintf_r+0x2a>
 8009ee6:	89ab      	ldrh	r3, [r5, #12]
 8009ee8:	059a      	lsls	r2, r3, #22
 8009eea:	d402      	bmi.n	8009ef2 <_vfiprintf_r+0x2a>
 8009eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eee:	f7fd fba0 	bl	8007632 <__retarget_lock_acquire_recursive>
 8009ef2:	89ab      	ldrh	r3, [r5, #12]
 8009ef4:	071b      	lsls	r3, r3, #28
 8009ef6:	d501      	bpl.n	8009efc <_vfiprintf_r+0x34>
 8009ef8:	692b      	ldr	r3, [r5, #16]
 8009efa:	b99b      	cbnz	r3, 8009f24 <_vfiprintf_r+0x5c>
 8009efc:	4629      	mov	r1, r5
 8009efe:	4630      	mov	r0, r6
 8009f00:	f7fd fac2 	bl	8007488 <__swsetup_r>
 8009f04:	b170      	cbz	r0, 8009f24 <_vfiprintf_r+0x5c>
 8009f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f08:	07dc      	lsls	r4, r3, #31
 8009f0a:	d504      	bpl.n	8009f16 <_vfiprintf_r+0x4e>
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	b01d      	add	sp, #116	; 0x74
 8009f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	0598      	lsls	r0, r3, #22
 8009f1a:	d4f7      	bmi.n	8009f0c <_vfiprintf_r+0x44>
 8009f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1e:	f7fd fb89 	bl	8007634 <__retarget_lock_release_recursive>
 8009f22:	e7f3      	b.n	8009f0c <_vfiprintf_r+0x44>
 8009f24:	2300      	movs	r3, #0
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f32:	2330      	movs	r3, #48	; 0x30
 8009f34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a0e8 <_vfiprintf_r+0x220>
 8009f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f3c:	f04f 0901 	mov.w	r9, #1
 8009f40:	4623      	mov	r3, r4
 8009f42:	469a      	mov	sl, r3
 8009f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f48:	b10a      	cbz	r2, 8009f4e <_vfiprintf_r+0x86>
 8009f4a:	2a25      	cmp	r2, #37	; 0x25
 8009f4c:	d1f9      	bne.n	8009f42 <_vfiprintf_r+0x7a>
 8009f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f52:	d00b      	beq.n	8009f6c <_vfiprintf_r+0xa4>
 8009f54:	465b      	mov	r3, fp
 8009f56:	4622      	mov	r2, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ffa1 	bl	8009ea2 <__sfputs_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	f000 80a9 	beq.w	800a0b8 <_vfiprintf_r+0x1f0>
 8009f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f68:	445a      	add	r2, fp
 8009f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80a1 	beq.w	800a0b8 <_vfiprintf_r+0x1f0>
 8009f76:	2300      	movs	r3, #0
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f80:	f10a 0a01 	add.w	sl, sl, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	9307      	str	r3, [sp, #28]
 8009f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f8e:	4654      	mov	r4, sl
 8009f90:	2205      	movs	r2, #5
 8009f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f96:	4854      	ldr	r0, [pc, #336]	; (800a0e8 <_vfiprintf_r+0x220>)
 8009f98:	f7f6 f942 	bl	8000220 <memchr>
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	b9d8      	cbnz	r0, 8009fd8 <_vfiprintf_r+0x110>
 8009fa0:	06d1      	lsls	r1, r2, #27
 8009fa2:	bf44      	itt	mi
 8009fa4:	2320      	movmi	r3, #32
 8009fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009faa:	0713      	lsls	r3, r2, #28
 8009fac:	bf44      	itt	mi
 8009fae:	232b      	movmi	r3, #43	; 0x2b
 8009fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fba:	d015      	beq.n	8009fe8 <_vfiprintf_r+0x120>
 8009fbc:	9a07      	ldr	r2, [sp, #28]
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f04f 0c0a 	mov.w	ip, #10
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fcc:	3b30      	subs	r3, #48	; 0x30
 8009fce:	2b09      	cmp	r3, #9
 8009fd0:	d94d      	bls.n	800a06e <_vfiprintf_r+0x1a6>
 8009fd2:	b1b0      	cbz	r0, 800a002 <_vfiprintf_r+0x13a>
 8009fd4:	9207      	str	r2, [sp, #28]
 8009fd6:	e014      	b.n	800a002 <_vfiprintf_r+0x13a>
 8009fd8:	eba0 0308 	sub.w	r3, r0, r8
 8009fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	9304      	str	r3, [sp, #16]
 8009fe4:	46a2      	mov	sl, r4
 8009fe6:	e7d2      	b.n	8009f8e <_vfiprintf_r+0xc6>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	1d19      	adds	r1, r3, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9103      	str	r1, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfbb      	ittet	lt
 8009ff4:	425b      	neglt	r3, r3
 8009ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8009ffa:	9307      	strge	r3, [sp, #28]
 8009ffc:	9307      	strlt	r3, [sp, #28]
 8009ffe:	bfb8      	it	lt
 800a000:	9204      	strlt	r2, [sp, #16]
 800a002:	7823      	ldrb	r3, [r4, #0]
 800a004:	2b2e      	cmp	r3, #46	; 0x2e
 800a006:	d10c      	bne.n	800a022 <_vfiprintf_r+0x15a>
 800a008:	7863      	ldrb	r3, [r4, #1]
 800a00a:	2b2a      	cmp	r3, #42	; 0x2a
 800a00c:	d134      	bne.n	800a078 <_vfiprintf_r+0x1b0>
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	1d1a      	adds	r2, r3, #4
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	9203      	str	r2, [sp, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfb8      	it	lt
 800a01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a01e:	3402      	adds	r4, #2
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a0f8 <_vfiprintf_r+0x230>
 800a026:	7821      	ldrb	r1, [r4, #0]
 800a028:	2203      	movs	r2, #3
 800a02a:	4650      	mov	r0, sl
 800a02c:	f7f6 f8f8 	bl	8000220 <memchr>
 800a030:	b138      	cbz	r0, 800a042 <_vfiprintf_r+0x17a>
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	eba0 000a 	sub.w	r0, r0, sl
 800a038:	2240      	movs	r2, #64	; 0x40
 800a03a:	4082      	lsls	r2, r0
 800a03c:	4313      	orrs	r3, r2
 800a03e:	3401      	adds	r4, #1
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a046:	4829      	ldr	r0, [pc, #164]	; (800a0ec <_vfiprintf_r+0x224>)
 800a048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a04c:	2206      	movs	r2, #6
 800a04e:	f7f6 f8e7 	bl	8000220 <memchr>
 800a052:	2800      	cmp	r0, #0
 800a054:	d03f      	beq.n	800a0d6 <_vfiprintf_r+0x20e>
 800a056:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <_vfiprintf_r+0x228>)
 800a058:	bb1b      	cbnz	r3, 800a0a2 <_vfiprintf_r+0x1da>
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	3307      	adds	r3, #7
 800a05e:	f023 0307 	bic.w	r3, r3, #7
 800a062:	3308      	adds	r3, #8
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a068:	443b      	add	r3, r7
 800a06a:	9309      	str	r3, [sp, #36]	; 0x24
 800a06c:	e768      	b.n	8009f40 <_vfiprintf_r+0x78>
 800a06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a072:	460c      	mov	r4, r1
 800a074:	2001      	movs	r0, #1
 800a076:	e7a6      	b.n	8009fc6 <_vfiprintf_r+0xfe>
 800a078:	2300      	movs	r3, #0
 800a07a:	3401      	adds	r4, #1
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	4619      	mov	r1, r3
 800a080:	f04f 0c0a 	mov.w	ip, #10
 800a084:	4620      	mov	r0, r4
 800a086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08a:	3a30      	subs	r2, #48	; 0x30
 800a08c:	2a09      	cmp	r2, #9
 800a08e:	d903      	bls.n	800a098 <_vfiprintf_r+0x1d0>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0c6      	beq.n	800a022 <_vfiprintf_r+0x15a>
 800a094:	9105      	str	r1, [sp, #20]
 800a096:	e7c4      	b.n	800a022 <_vfiprintf_r+0x15a>
 800a098:	fb0c 2101 	mla	r1, ip, r1, r2
 800a09c:	4604      	mov	r4, r0
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e7f0      	b.n	800a084 <_vfiprintf_r+0x1bc>
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <_vfiprintf_r+0x22c>)
 800a0aa:	a904      	add	r1, sp, #16
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7fc fa3d 	bl	800652c <_printf_float>
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	1c78      	adds	r0, r7, #1
 800a0b6:	d1d6      	bne.n	800a066 <_vfiprintf_r+0x19e>
 800a0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ba:	07d9      	lsls	r1, r3, #31
 800a0bc:	d405      	bmi.n	800a0ca <_vfiprintf_r+0x202>
 800a0be:	89ab      	ldrh	r3, [r5, #12]
 800a0c0:	059a      	lsls	r2, r3, #22
 800a0c2:	d402      	bmi.n	800a0ca <_vfiprintf_r+0x202>
 800a0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0c6:	f7fd fab5 	bl	8007634 <__retarget_lock_release_recursive>
 800a0ca:	89ab      	ldrh	r3, [r5, #12]
 800a0cc:	065b      	lsls	r3, r3, #25
 800a0ce:	f53f af1d 	bmi.w	8009f0c <_vfiprintf_r+0x44>
 800a0d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0d4:	e71c      	b.n	8009f10 <_vfiprintf_r+0x48>
 800a0d6:	ab03      	add	r3, sp, #12
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	462a      	mov	r2, r5
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <_vfiprintf_r+0x22c>)
 800a0de:	a904      	add	r1, sp, #16
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7fc fcc7 	bl	8006a74 <_printf_i>
 800a0e6:	e7e4      	b.n	800a0b2 <_vfiprintf_r+0x1ea>
 800a0e8:	0800d3d9 	.word	0x0800d3d9
 800a0ec:	0800d3e3 	.word	0x0800d3e3
 800a0f0:	0800652d 	.word	0x0800652d
 800a0f4:	08009ea3 	.word	0x08009ea3
 800a0f8:	0800d3df 	.word	0x0800d3df

0800a0fc <__sflush_r>:
 800a0fc:	898a      	ldrh	r2, [r1, #12]
 800a0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a102:	4605      	mov	r5, r0
 800a104:	0710      	lsls	r0, r2, #28
 800a106:	460c      	mov	r4, r1
 800a108:	d458      	bmi.n	800a1bc <__sflush_r+0xc0>
 800a10a:	684b      	ldr	r3, [r1, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	dc05      	bgt.n	800a11c <__sflush_r+0x20>
 800a110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	dc02      	bgt.n	800a11c <__sflush_r+0x20>
 800a116:	2000      	movs	r0, #0
 800a118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d0f9      	beq.n	800a116 <__sflush_r+0x1a>
 800a122:	2300      	movs	r3, #0
 800a124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a128:	682f      	ldr	r7, [r5, #0]
 800a12a:	6a21      	ldr	r1, [r4, #32]
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	d032      	beq.n	800a196 <__sflush_r+0x9a>
 800a130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	075a      	lsls	r2, r3, #29
 800a136:	d505      	bpl.n	800a144 <__sflush_r+0x48>
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	1ac0      	subs	r0, r0, r3
 800a13c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a13e:	b10b      	cbz	r3, 800a144 <__sflush_r+0x48>
 800a140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a142:	1ac0      	subs	r0, r0, r3
 800a144:	2300      	movs	r3, #0
 800a146:	4602      	mov	r2, r0
 800a148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a14a:	6a21      	ldr	r1, [r4, #32]
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b0      	blx	r6
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	d106      	bne.n	800a164 <__sflush_r+0x68>
 800a156:	6829      	ldr	r1, [r5, #0]
 800a158:	291d      	cmp	r1, #29
 800a15a:	d82b      	bhi.n	800a1b4 <__sflush_r+0xb8>
 800a15c:	4a29      	ldr	r2, [pc, #164]	; (800a204 <__sflush_r+0x108>)
 800a15e:	410a      	asrs	r2, r1
 800a160:	07d6      	lsls	r6, r2, #31
 800a162:	d427      	bmi.n	800a1b4 <__sflush_r+0xb8>
 800a164:	2200      	movs	r2, #0
 800a166:	6062      	str	r2, [r4, #4]
 800a168:	04d9      	lsls	r1, r3, #19
 800a16a:	6922      	ldr	r2, [r4, #16]
 800a16c:	6022      	str	r2, [r4, #0]
 800a16e:	d504      	bpl.n	800a17a <__sflush_r+0x7e>
 800a170:	1c42      	adds	r2, r0, #1
 800a172:	d101      	bne.n	800a178 <__sflush_r+0x7c>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b903      	cbnz	r3, 800a17a <__sflush_r+0x7e>
 800a178:	6560      	str	r0, [r4, #84]	; 0x54
 800a17a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a17c:	602f      	str	r7, [r5, #0]
 800a17e:	2900      	cmp	r1, #0
 800a180:	d0c9      	beq.n	800a116 <__sflush_r+0x1a>
 800a182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a186:	4299      	cmp	r1, r3
 800a188:	d002      	beq.n	800a190 <__sflush_r+0x94>
 800a18a:	4628      	mov	r0, r5
 800a18c:	f7fe f8d6 	bl	800833c <_free_r>
 800a190:	2000      	movs	r0, #0
 800a192:	6360      	str	r0, [r4, #52]	; 0x34
 800a194:	e7c0      	b.n	800a118 <__sflush_r+0x1c>
 800a196:	2301      	movs	r3, #1
 800a198:	4628      	mov	r0, r5
 800a19a:	47b0      	blx	r6
 800a19c:	1c41      	adds	r1, r0, #1
 800a19e:	d1c8      	bne.n	800a132 <__sflush_r+0x36>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0c5      	beq.n	800a132 <__sflush_r+0x36>
 800a1a6:	2b1d      	cmp	r3, #29
 800a1a8:	d001      	beq.n	800a1ae <__sflush_r+0xb2>
 800a1aa:	2b16      	cmp	r3, #22
 800a1ac:	d101      	bne.n	800a1b2 <__sflush_r+0xb6>
 800a1ae:	602f      	str	r7, [r5, #0]
 800a1b0:	e7b1      	b.n	800a116 <__sflush_r+0x1a>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	e7ad      	b.n	800a118 <__sflush_r+0x1c>
 800a1bc:	690f      	ldr	r7, [r1, #16]
 800a1be:	2f00      	cmp	r7, #0
 800a1c0:	d0a9      	beq.n	800a116 <__sflush_r+0x1a>
 800a1c2:	0793      	lsls	r3, r2, #30
 800a1c4:	680e      	ldr	r6, [r1, #0]
 800a1c6:	bf08      	it	eq
 800a1c8:	694b      	ldreq	r3, [r1, #20]
 800a1ca:	600f      	str	r7, [r1, #0]
 800a1cc:	bf18      	it	ne
 800a1ce:	2300      	movne	r3, #0
 800a1d0:	eba6 0807 	sub.w	r8, r6, r7
 800a1d4:	608b      	str	r3, [r1, #8]
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	dd9c      	ble.n	800a116 <__sflush_r+0x1a>
 800a1dc:	6a21      	ldr	r1, [r4, #32]
 800a1de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1e0:	4643      	mov	r3, r8
 800a1e2:	463a      	mov	r2, r7
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	47b0      	blx	r6
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dc06      	bgt.n	800a1fa <__sflush_r+0xfe>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	e78e      	b.n	800a118 <__sflush_r+0x1c>
 800a1fa:	4407      	add	r7, r0
 800a1fc:	eba8 0800 	sub.w	r8, r8, r0
 800a200:	e7e9      	b.n	800a1d6 <__sflush_r+0xda>
 800a202:	bf00      	nop
 800a204:	dfbffffe 	.word	0xdfbffffe

0800a208 <_fflush_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	690b      	ldr	r3, [r1, #16]
 800a20c:	4605      	mov	r5, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	b913      	cbnz	r3, 800a218 <_fflush_r+0x10>
 800a212:	2500      	movs	r5, #0
 800a214:	4628      	mov	r0, r5
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	b118      	cbz	r0, 800a222 <_fflush_r+0x1a>
 800a21a:	6a03      	ldr	r3, [r0, #32]
 800a21c:	b90b      	cbnz	r3, 800a222 <_fflush_r+0x1a>
 800a21e:	f7fc ffe7 	bl	80071f0 <__sinit>
 800a222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0f3      	beq.n	800a212 <_fflush_r+0xa>
 800a22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a22c:	07d0      	lsls	r0, r2, #31
 800a22e:	d404      	bmi.n	800a23a <_fflush_r+0x32>
 800a230:	0599      	lsls	r1, r3, #22
 800a232:	d402      	bmi.n	800a23a <_fflush_r+0x32>
 800a234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a236:	f7fd f9fc 	bl	8007632 <__retarget_lock_acquire_recursive>
 800a23a:	4628      	mov	r0, r5
 800a23c:	4621      	mov	r1, r4
 800a23e:	f7ff ff5d 	bl	800a0fc <__sflush_r>
 800a242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a244:	07da      	lsls	r2, r3, #31
 800a246:	4605      	mov	r5, r0
 800a248:	d4e4      	bmi.n	800a214 <_fflush_r+0xc>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	059b      	lsls	r3, r3, #22
 800a24e:	d4e1      	bmi.n	800a214 <_fflush_r+0xc>
 800a250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a252:	f7fd f9ef 	bl	8007634 <__retarget_lock_release_recursive>
 800a256:	e7dd      	b.n	800a214 <_fflush_r+0xc>

0800a258 <__swhatbuf_r>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	460c      	mov	r4, r1
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	2900      	cmp	r1, #0
 800a262:	b096      	sub	sp, #88	; 0x58
 800a264:	4615      	mov	r5, r2
 800a266:	461e      	mov	r6, r3
 800a268:	da0d      	bge.n	800a286 <__swhatbuf_r+0x2e>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a270:	f04f 0100 	mov.w	r1, #0
 800a274:	bf0c      	ite	eq
 800a276:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a27a:	2340      	movne	r3, #64	; 0x40
 800a27c:	2000      	movs	r0, #0
 800a27e:	6031      	str	r1, [r6, #0]
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	b016      	add	sp, #88	; 0x58
 800a284:	bd70      	pop	{r4, r5, r6, pc}
 800a286:	466a      	mov	r2, sp
 800a288:	f000 f8a8 	bl	800a3dc <_fstat_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	dbec      	blt.n	800a26a <__swhatbuf_r+0x12>
 800a290:	9901      	ldr	r1, [sp, #4]
 800a292:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a296:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a29a:	4259      	negs	r1, r3
 800a29c:	4159      	adcs	r1, r3
 800a29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a2:	e7eb      	b.n	800a27c <__swhatbuf_r+0x24>

0800a2a4 <__smakebuf_r>:
 800a2a4:	898b      	ldrh	r3, [r1, #12]
 800a2a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2a8:	079d      	lsls	r5, r3, #30
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	d507      	bpl.n	800a2c0 <__smakebuf_r+0x1c>
 800a2b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	6123      	str	r3, [r4, #16]
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	6163      	str	r3, [r4, #20]
 800a2bc:	b002      	add	sp, #8
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	ab01      	add	r3, sp, #4
 800a2c2:	466a      	mov	r2, sp
 800a2c4:	f7ff ffc8 	bl	800a258 <__swhatbuf_r>
 800a2c8:	9900      	ldr	r1, [sp, #0]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7fe f8a9 	bl	8008424 <_malloc_r>
 800a2d2:	b948      	cbnz	r0, 800a2e8 <__smakebuf_r+0x44>
 800a2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d8:	059a      	lsls	r2, r3, #22
 800a2da:	d4ef      	bmi.n	800a2bc <__smakebuf_r+0x18>
 800a2dc:	f023 0303 	bic.w	r3, r3, #3
 800a2e0:	f043 0302 	orr.w	r3, r3, #2
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	e7e3      	b.n	800a2b0 <__smakebuf_r+0xc>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	6020      	str	r0, [r4, #0]
 800a2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	9b00      	ldr	r3, [sp, #0]
 800a2f4:	6163      	str	r3, [r4, #20]
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	6120      	str	r0, [r4, #16]
 800a2fa:	b15b      	cbz	r3, 800a314 <__smakebuf_r+0x70>
 800a2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f87d 	bl	800a400 <_isatty_r>
 800a306:	b128      	cbz	r0, 800a314 <__smakebuf_r+0x70>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	431d      	orrs	r5, r3
 800a318:	81a5      	strh	r5, [r4, #12]
 800a31a:	e7cf      	b.n	800a2bc <__smakebuf_r+0x18>

0800a31c <_putc_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	460d      	mov	r5, r1
 800a320:	4614      	mov	r4, r2
 800a322:	4606      	mov	r6, r0
 800a324:	b118      	cbz	r0, 800a32e <_putc_r+0x12>
 800a326:	6a03      	ldr	r3, [r0, #32]
 800a328:	b90b      	cbnz	r3, 800a32e <_putc_r+0x12>
 800a32a:	f7fc ff61 	bl	80071f0 <__sinit>
 800a32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a330:	07d8      	lsls	r0, r3, #31
 800a332:	d405      	bmi.n	800a340 <_putc_r+0x24>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	0599      	lsls	r1, r3, #22
 800a338:	d402      	bmi.n	800a340 <_putc_r+0x24>
 800a33a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a33c:	f7fd f979 	bl	8007632 <__retarget_lock_acquire_recursive>
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	3b01      	subs	r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	60a3      	str	r3, [r4, #8]
 800a348:	da05      	bge.n	800a356 <_putc_r+0x3a>
 800a34a:	69a2      	ldr	r2, [r4, #24]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	db12      	blt.n	800a376 <_putc_r+0x5a>
 800a350:	b2eb      	uxtb	r3, r5
 800a352:	2b0a      	cmp	r3, #10
 800a354:	d00f      	beq.n	800a376 <_putc_r+0x5a>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	6022      	str	r2, [r4, #0]
 800a35c:	701d      	strb	r5, [r3, #0]
 800a35e:	b2ed      	uxtb	r5, r5
 800a360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a362:	07da      	lsls	r2, r3, #31
 800a364:	d405      	bmi.n	800a372 <_putc_r+0x56>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	059b      	lsls	r3, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_putc_r+0x56>
 800a36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a36e:	f7fd f961 	bl	8007634 <__retarget_lock_release_recursive>
 800a372:	4628      	mov	r0, r5
 800a374:	bd70      	pop	{r4, r5, r6, pc}
 800a376:	4629      	mov	r1, r5
 800a378:	4622      	mov	r2, r4
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7fd f847 	bl	800740e <__swbuf_r>
 800a380:	4605      	mov	r5, r0
 800a382:	e7ed      	b.n	800a360 <_putc_r+0x44>

0800a384 <memmove>:
 800a384:	4288      	cmp	r0, r1
 800a386:	b510      	push	{r4, lr}
 800a388:	eb01 0402 	add.w	r4, r1, r2
 800a38c:	d902      	bls.n	800a394 <memmove+0x10>
 800a38e:	4284      	cmp	r4, r0
 800a390:	4623      	mov	r3, r4
 800a392:	d807      	bhi.n	800a3a4 <memmove+0x20>
 800a394:	1e43      	subs	r3, r0, #1
 800a396:	42a1      	cmp	r1, r4
 800a398:	d008      	beq.n	800a3ac <memmove+0x28>
 800a39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3a2:	e7f8      	b.n	800a396 <memmove+0x12>
 800a3a4:	4402      	add	r2, r0
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	428a      	cmp	r2, r1
 800a3aa:	d100      	bne.n	800a3ae <memmove+0x2a>
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3b6:	e7f7      	b.n	800a3a8 <memmove+0x24>

0800a3b8 <strncmp>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	b16a      	cbz	r2, 800a3d8 <strncmp+0x20>
 800a3bc:	3901      	subs	r1, #1
 800a3be:	1884      	adds	r4, r0, r2
 800a3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d103      	bne.n	800a3d4 <strncmp+0x1c>
 800a3cc:	42a0      	cmp	r0, r4
 800a3ce:	d001      	beq.n	800a3d4 <strncmp+0x1c>
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	d1f5      	bne.n	800a3c0 <strncmp+0x8>
 800a3d4:	1ad0      	subs	r0, r2, r3
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	4610      	mov	r0, r2
 800a3da:	e7fc      	b.n	800a3d6 <strncmp+0x1e>

0800a3dc <_fstat_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	; (800a3fc <_fstat_r+0x20>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	f7f8 fa38 	bl	800285e <_fstat>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d102      	bne.n	800a3f8 <_fstat_r+0x1c>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b103      	cbz	r3, 800a3f8 <_fstat_r+0x1c>
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000910 	.word	0x20000910

0800a400 <_isatty_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	; (800a41c <_isatty_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f8 fa37 	bl	800287e <_isatty>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_isatty_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_isatty_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20000910 	.word	0x20000910

0800a420 <_sbrk_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_sbrk_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f8 fa40 	bl	80028b0 <_sbrk>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_sbrk_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_sbrk_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20000910 	.word	0x20000910

0800a440 <memcpy>:
 800a440:	440a      	add	r2, r1
 800a442:	4291      	cmp	r1, r2
 800a444:	f100 33ff 	add.w	r3, r0, #4294967295
 800a448:	d100      	bne.n	800a44c <memcpy+0xc>
 800a44a:	4770      	bx	lr
 800a44c:	b510      	push	{r4, lr}
 800a44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a456:	4291      	cmp	r1, r2
 800a458:	d1f9      	bne.n	800a44e <memcpy+0xe>
 800a45a:	bd10      	pop	{r4, pc}
 800a45c:	0000      	movs	r0, r0
	...

0800a460 <nan>:
 800a460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a468 <nan+0x8>
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	00000000 	.word	0x00000000
 800a46c:	7ff80000 	.word	0x7ff80000

0800a470 <__assert_func>:
 800a470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a472:	4614      	mov	r4, r2
 800a474:	461a      	mov	r2, r3
 800a476:	4b09      	ldr	r3, [pc, #36]	; (800a49c <__assert_func+0x2c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4605      	mov	r5, r0
 800a47c:	68d8      	ldr	r0, [r3, #12]
 800a47e:	b14c      	cbz	r4, 800a494 <__assert_func+0x24>
 800a480:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <__assert_func+0x30>)
 800a482:	9100      	str	r1, [sp, #0]
 800a484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a488:	4906      	ldr	r1, [pc, #24]	; (800a4a4 <__assert_func+0x34>)
 800a48a:	462b      	mov	r3, r5
 800a48c:	f000 fbca 	bl	800ac24 <fiprintf>
 800a490:	f000 fbda 	bl	800ac48 <abort>
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <__assert_func+0x38>)
 800a496:	461c      	mov	r4, r3
 800a498:	e7f3      	b.n	800a482 <__assert_func+0x12>
 800a49a:	bf00      	nop
 800a49c:	2000006c 	.word	0x2000006c
 800a4a0:	0800d3f2 	.word	0x0800d3f2
 800a4a4:	0800d3ff 	.word	0x0800d3ff
 800a4a8:	0800d42d 	.word	0x0800d42d

0800a4ac <_calloc_r>:
 800a4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ae:	fba1 2402 	umull	r2, r4, r1, r2
 800a4b2:	b94c      	cbnz	r4, 800a4c8 <_calloc_r+0x1c>
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	9201      	str	r2, [sp, #4]
 800a4b8:	f7fd ffb4 	bl	8008424 <_malloc_r>
 800a4bc:	9a01      	ldr	r2, [sp, #4]
 800a4be:	4605      	mov	r5, r0
 800a4c0:	b930      	cbnz	r0, 800a4d0 <_calloc_r+0x24>
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	b003      	add	sp, #12
 800a4c6:	bd30      	pop	{r4, r5, pc}
 800a4c8:	220c      	movs	r2, #12
 800a4ca:	6002      	str	r2, [r0, #0]
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	e7f8      	b.n	800a4c2 <_calloc_r+0x16>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	f7fd f831 	bl	8007538 <memset>
 800a4d6:	e7f4      	b.n	800a4c2 <_calloc_r+0x16>

0800a4d8 <rshift>:
 800a4d8:	6903      	ldr	r3, [r0, #16]
 800a4da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4e6:	f100 0414 	add.w	r4, r0, #20
 800a4ea:	dd45      	ble.n	800a578 <rshift+0xa0>
 800a4ec:	f011 011f 	ands.w	r1, r1, #31
 800a4f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4f8:	d10c      	bne.n	800a514 <rshift+0x3c>
 800a4fa:	f100 0710 	add.w	r7, r0, #16
 800a4fe:	4629      	mov	r1, r5
 800a500:	42b1      	cmp	r1, r6
 800a502:	d334      	bcc.n	800a56e <rshift+0x96>
 800a504:	1a9b      	subs	r3, r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	1eea      	subs	r2, r5, #3
 800a50a:	4296      	cmp	r6, r2
 800a50c:	bf38      	it	cc
 800a50e:	2300      	movcc	r3, #0
 800a510:	4423      	add	r3, r4
 800a512:	e015      	b.n	800a540 <rshift+0x68>
 800a514:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a518:	f1c1 0820 	rsb	r8, r1, #32
 800a51c:	40cf      	lsrs	r7, r1
 800a51e:	f105 0e04 	add.w	lr, r5, #4
 800a522:	46a1      	mov	r9, r4
 800a524:	4576      	cmp	r6, lr
 800a526:	46f4      	mov	ip, lr
 800a528:	d815      	bhi.n	800a556 <rshift+0x7e>
 800a52a:	1a9a      	subs	r2, r3, r2
 800a52c:	0092      	lsls	r2, r2, #2
 800a52e:	3a04      	subs	r2, #4
 800a530:	3501      	adds	r5, #1
 800a532:	42ae      	cmp	r6, r5
 800a534:	bf38      	it	cc
 800a536:	2200      	movcc	r2, #0
 800a538:	18a3      	adds	r3, r4, r2
 800a53a:	50a7      	str	r7, [r4, r2]
 800a53c:	b107      	cbz	r7, 800a540 <rshift+0x68>
 800a53e:	3304      	adds	r3, #4
 800a540:	1b1a      	subs	r2, r3, r4
 800a542:	42a3      	cmp	r3, r4
 800a544:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a548:	bf08      	it	eq
 800a54a:	2300      	moveq	r3, #0
 800a54c:	6102      	str	r2, [r0, #16]
 800a54e:	bf08      	it	eq
 800a550:	6143      	streq	r3, [r0, #20]
 800a552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a556:	f8dc c000 	ldr.w	ip, [ip]
 800a55a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a55e:	ea4c 0707 	orr.w	r7, ip, r7
 800a562:	f849 7b04 	str.w	r7, [r9], #4
 800a566:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a56a:	40cf      	lsrs	r7, r1
 800a56c:	e7da      	b.n	800a524 <rshift+0x4c>
 800a56e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a572:	f847 cf04 	str.w	ip, [r7, #4]!
 800a576:	e7c3      	b.n	800a500 <rshift+0x28>
 800a578:	4623      	mov	r3, r4
 800a57a:	e7e1      	b.n	800a540 <rshift+0x68>

0800a57c <__hexdig_fun>:
 800a57c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a580:	2b09      	cmp	r3, #9
 800a582:	d802      	bhi.n	800a58a <__hexdig_fun+0xe>
 800a584:	3820      	subs	r0, #32
 800a586:	b2c0      	uxtb	r0, r0
 800a588:	4770      	bx	lr
 800a58a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a58e:	2b05      	cmp	r3, #5
 800a590:	d801      	bhi.n	800a596 <__hexdig_fun+0x1a>
 800a592:	3847      	subs	r0, #71	; 0x47
 800a594:	e7f7      	b.n	800a586 <__hexdig_fun+0xa>
 800a596:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d801      	bhi.n	800a5a2 <__hexdig_fun+0x26>
 800a59e:	3827      	subs	r0, #39	; 0x27
 800a5a0:	e7f1      	b.n	800a586 <__hexdig_fun+0xa>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <__gethex>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	4617      	mov	r7, r2
 800a5ae:	680a      	ldr	r2, [r1, #0]
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	f102 0b02 	add.w	fp, r2, #2
 800a5b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5be:	4681      	mov	r9, r0
 800a5c0:	468a      	mov	sl, r1
 800a5c2:	9302      	str	r3, [sp, #8]
 800a5c4:	32fe      	adds	r2, #254	; 0xfe
 800a5c6:	eb02 030b 	add.w	r3, r2, fp
 800a5ca:	46d8      	mov	r8, fp
 800a5cc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	2830      	cmp	r0, #48	; 0x30
 800a5d4:	d0f7      	beq.n	800a5c6 <__gethex+0x1e>
 800a5d6:	f7ff ffd1 	bl	800a57c <__hexdig_fun>
 800a5da:	4604      	mov	r4, r0
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d138      	bne.n	800a652 <__gethex+0xaa>
 800a5e0:	49a7      	ldr	r1, [pc, #668]	; (800a880 <__gethex+0x2d8>)
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	f7ff fee7 	bl	800a3b8 <strncmp>
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d169      	bne.n	800a6c4 <__gethex+0x11c>
 800a5f0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a5f4:	465d      	mov	r5, fp
 800a5f6:	f7ff ffc1 	bl	800a57c <__hexdig_fun>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d064      	beq.n	800a6c8 <__gethex+0x120>
 800a5fe:	465a      	mov	r2, fp
 800a600:	7810      	ldrb	r0, [r2, #0]
 800a602:	2830      	cmp	r0, #48	; 0x30
 800a604:	4690      	mov	r8, r2
 800a606:	f102 0201 	add.w	r2, r2, #1
 800a60a:	d0f9      	beq.n	800a600 <__gethex+0x58>
 800a60c:	f7ff ffb6 	bl	800a57c <__hexdig_fun>
 800a610:	2301      	movs	r3, #1
 800a612:	fab0 f480 	clz	r4, r0
 800a616:	0964      	lsrs	r4, r4, #5
 800a618:	465e      	mov	r6, fp
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	4642      	mov	r2, r8
 800a61e:	4615      	mov	r5, r2
 800a620:	3201      	adds	r2, #1
 800a622:	7828      	ldrb	r0, [r5, #0]
 800a624:	f7ff ffaa 	bl	800a57c <__hexdig_fun>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d1f8      	bne.n	800a61e <__gethex+0x76>
 800a62c:	4994      	ldr	r1, [pc, #592]	; (800a880 <__gethex+0x2d8>)
 800a62e:	2201      	movs	r2, #1
 800a630:	4628      	mov	r0, r5
 800a632:	f7ff fec1 	bl	800a3b8 <strncmp>
 800a636:	b978      	cbnz	r0, 800a658 <__gethex+0xb0>
 800a638:	b946      	cbnz	r6, 800a64c <__gethex+0xa4>
 800a63a:	1c6e      	adds	r6, r5, #1
 800a63c:	4632      	mov	r2, r6
 800a63e:	4615      	mov	r5, r2
 800a640:	3201      	adds	r2, #1
 800a642:	7828      	ldrb	r0, [r5, #0]
 800a644:	f7ff ff9a 	bl	800a57c <__hexdig_fun>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d1f8      	bne.n	800a63e <__gethex+0x96>
 800a64c:	1b73      	subs	r3, r6, r5
 800a64e:	009e      	lsls	r6, r3, #2
 800a650:	e004      	b.n	800a65c <__gethex+0xb4>
 800a652:	2400      	movs	r4, #0
 800a654:	4626      	mov	r6, r4
 800a656:	e7e1      	b.n	800a61c <__gethex+0x74>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	d1f7      	bne.n	800a64c <__gethex+0xa4>
 800a65c:	782b      	ldrb	r3, [r5, #0]
 800a65e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a662:	2b50      	cmp	r3, #80	; 0x50
 800a664:	d13d      	bne.n	800a6e2 <__gethex+0x13a>
 800a666:	786b      	ldrb	r3, [r5, #1]
 800a668:	2b2b      	cmp	r3, #43	; 0x2b
 800a66a:	d02f      	beq.n	800a6cc <__gethex+0x124>
 800a66c:	2b2d      	cmp	r3, #45	; 0x2d
 800a66e:	d031      	beq.n	800a6d4 <__gethex+0x12c>
 800a670:	1c69      	adds	r1, r5, #1
 800a672:	f04f 0b00 	mov.w	fp, #0
 800a676:	7808      	ldrb	r0, [r1, #0]
 800a678:	f7ff ff80 	bl	800a57c <__hexdig_fun>
 800a67c:	1e42      	subs	r2, r0, #1
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	2a18      	cmp	r2, #24
 800a682:	d82e      	bhi.n	800a6e2 <__gethex+0x13a>
 800a684:	f1a0 0210 	sub.w	r2, r0, #16
 800a688:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a68c:	f7ff ff76 	bl	800a57c <__hexdig_fun>
 800a690:	f100 3cff 	add.w	ip, r0, #4294967295
 800a694:	fa5f fc8c 	uxtb.w	ip, ip
 800a698:	f1bc 0f18 	cmp.w	ip, #24
 800a69c:	d91d      	bls.n	800a6da <__gethex+0x132>
 800a69e:	f1bb 0f00 	cmp.w	fp, #0
 800a6a2:	d000      	beq.n	800a6a6 <__gethex+0xfe>
 800a6a4:	4252      	negs	r2, r2
 800a6a6:	4416      	add	r6, r2
 800a6a8:	f8ca 1000 	str.w	r1, [sl]
 800a6ac:	b1dc      	cbz	r4, 800a6e6 <__gethex+0x13e>
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	bf14      	ite	ne
 800a6b4:	f04f 0800 	movne.w	r8, #0
 800a6b8:	f04f 0806 	moveq.w	r8, #6
 800a6bc:	4640      	mov	r0, r8
 800a6be:	b005      	add	sp, #20
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	4645      	mov	r5, r8
 800a6c6:	4626      	mov	r6, r4
 800a6c8:	2401      	movs	r4, #1
 800a6ca:	e7c7      	b.n	800a65c <__gethex+0xb4>
 800a6cc:	f04f 0b00 	mov.w	fp, #0
 800a6d0:	1ca9      	adds	r1, r5, #2
 800a6d2:	e7d0      	b.n	800a676 <__gethex+0xce>
 800a6d4:	f04f 0b01 	mov.w	fp, #1
 800a6d8:	e7fa      	b.n	800a6d0 <__gethex+0x128>
 800a6da:	230a      	movs	r3, #10
 800a6dc:	fb03 0002 	mla	r0, r3, r2, r0
 800a6e0:	e7d0      	b.n	800a684 <__gethex+0xdc>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	e7e0      	b.n	800a6a8 <__gethex+0x100>
 800a6e6:	eba5 0308 	sub.w	r3, r5, r8
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	2b07      	cmp	r3, #7
 800a6f0:	dc0a      	bgt.n	800a708 <__gethex+0x160>
 800a6f2:	4648      	mov	r0, r9
 800a6f4:	f7fd ff22 	bl	800853c <_Balloc>
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	b940      	cbnz	r0, 800a70e <__gethex+0x166>
 800a6fc:	4b61      	ldr	r3, [pc, #388]	; (800a884 <__gethex+0x2dc>)
 800a6fe:	4602      	mov	r2, r0
 800a700:	21e4      	movs	r1, #228	; 0xe4
 800a702:	4861      	ldr	r0, [pc, #388]	; (800a888 <__gethex+0x2e0>)
 800a704:	f7ff feb4 	bl	800a470 <__assert_func>
 800a708:	3101      	adds	r1, #1
 800a70a:	105b      	asrs	r3, r3, #1
 800a70c:	e7ef      	b.n	800a6ee <__gethex+0x146>
 800a70e:	f100 0a14 	add.w	sl, r0, #20
 800a712:	2300      	movs	r3, #0
 800a714:	495a      	ldr	r1, [pc, #360]	; (800a880 <__gethex+0x2d8>)
 800a716:	f8cd a004 	str.w	sl, [sp, #4]
 800a71a:	469b      	mov	fp, r3
 800a71c:	45a8      	cmp	r8, r5
 800a71e:	d342      	bcc.n	800a7a6 <__gethex+0x1fe>
 800a720:	9801      	ldr	r0, [sp, #4]
 800a722:	f840 bb04 	str.w	fp, [r0], #4
 800a726:	eba0 000a 	sub.w	r0, r0, sl
 800a72a:	1080      	asrs	r0, r0, #2
 800a72c:	6120      	str	r0, [r4, #16]
 800a72e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a732:	4658      	mov	r0, fp
 800a734:	f7fd fff4 	bl	8008720 <__hi0bits>
 800a738:	683d      	ldr	r5, [r7, #0]
 800a73a:	eba8 0000 	sub.w	r0, r8, r0
 800a73e:	42a8      	cmp	r0, r5
 800a740:	dd59      	ble.n	800a7f6 <__gethex+0x24e>
 800a742:	eba0 0805 	sub.w	r8, r0, r5
 800a746:	4641      	mov	r1, r8
 800a748:	4620      	mov	r0, r4
 800a74a:	f7fe fb83 	bl	8008e54 <__any_on>
 800a74e:	4683      	mov	fp, r0
 800a750:	b1b8      	cbz	r0, 800a782 <__gethex+0x1da>
 800a752:	f108 33ff 	add.w	r3, r8, #4294967295
 800a756:	1159      	asrs	r1, r3, #5
 800a758:	f003 021f 	and.w	r2, r3, #31
 800a75c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a760:	f04f 0b01 	mov.w	fp, #1
 800a764:	fa0b f202 	lsl.w	r2, fp, r2
 800a768:	420a      	tst	r2, r1
 800a76a:	d00a      	beq.n	800a782 <__gethex+0x1da>
 800a76c:	455b      	cmp	r3, fp
 800a76e:	dd06      	ble.n	800a77e <__gethex+0x1d6>
 800a770:	f1a8 0102 	sub.w	r1, r8, #2
 800a774:	4620      	mov	r0, r4
 800a776:	f7fe fb6d 	bl	8008e54 <__any_on>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d138      	bne.n	800a7f0 <__gethex+0x248>
 800a77e:	f04f 0b02 	mov.w	fp, #2
 800a782:	4641      	mov	r1, r8
 800a784:	4620      	mov	r0, r4
 800a786:	f7ff fea7 	bl	800a4d8 <rshift>
 800a78a:	4446      	add	r6, r8
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	42b3      	cmp	r3, r6
 800a790:	da41      	bge.n	800a816 <__gethex+0x26e>
 800a792:	4621      	mov	r1, r4
 800a794:	4648      	mov	r0, r9
 800a796:	f7fd ff11 	bl	80085bc <_Bfree>
 800a79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a79c:	2300      	movs	r3, #0
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a7a4:	e78a      	b.n	800a6bc <__gethex+0x114>
 800a7a6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a7aa:	2a2e      	cmp	r2, #46	; 0x2e
 800a7ac:	d014      	beq.n	800a7d8 <__gethex+0x230>
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d106      	bne.n	800a7c0 <__gethex+0x218>
 800a7b2:	9b01      	ldr	r3, [sp, #4]
 800a7b4:	f843 bb04 	str.w	fp, [r3], #4
 800a7b8:	f04f 0b00 	mov.w	fp, #0
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	465b      	mov	r3, fp
 800a7c0:	7828      	ldrb	r0, [r5, #0]
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	f7ff feda 	bl	800a57c <__hexdig_fun>
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	f000 000f 	and.w	r0, r0, #15
 800a7ce:	4098      	lsls	r0, r3
 800a7d0:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	e7a1      	b.n	800a71c <__gethex+0x174>
 800a7d8:	45a8      	cmp	r8, r5
 800a7da:	d8e8      	bhi.n	800a7ae <__gethex+0x206>
 800a7dc:	2201      	movs	r2, #1
 800a7de:	4628      	mov	r0, r5
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	f7ff fde9 	bl	800a3b8 <strncmp>
 800a7e6:	4926      	ldr	r1, [pc, #152]	; (800a880 <__gethex+0x2d8>)
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d1df      	bne.n	800a7ae <__gethex+0x206>
 800a7ee:	e795      	b.n	800a71c <__gethex+0x174>
 800a7f0:	f04f 0b03 	mov.w	fp, #3
 800a7f4:	e7c5      	b.n	800a782 <__gethex+0x1da>
 800a7f6:	da0b      	bge.n	800a810 <__gethex+0x268>
 800a7f8:	eba5 0800 	sub.w	r8, r5, r0
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4642      	mov	r2, r8
 800a800:	4648      	mov	r0, r9
 800a802:	f7fe f8f5 	bl	80089f0 <__lshift>
 800a806:	eba6 0608 	sub.w	r6, r6, r8
 800a80a:	4604      	mov	r4, r0
 800a80c:	f100 0a14 	add.w	sl, r0, #20
 800a810:	f04f 0b00 	mov.w	fp, #0
 800a814:	e7ba      	b.n	800a78c <__gethex+0x1e4>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	42b3      	cmp	r3, r6
 800a81a:	dd73      	ble.n	800a904 <__gethex+0x35c>
 800a81c:	1b9e      	subs	r6, r3, r6
 800a81e:	42b5      	cmp	r5, r6
 800a820:	dc34      	bgt.n	800a88c <__gethex+0x2e4>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d023      	beq.n	800a870 <__gethex+0x2c8>
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d025      	beq.n	800a878 <__gethex+0x2d0>
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d115      	bne.n	800a85c <__gethex+0x2b4>
 800a830:	42b5      	cmp	r5, r6
 800a832:	d113      	bne.n	800a85c <__gethex+0x2b4>
 800a834:	2d01      	cmp	r5, #1
 800a836:	d10b      	bne.n	800a850 <__gethex+0x2a8>
 800a838:	9a02      	ldr	r2, [sp, #8]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	2301      	movs	r3, #1
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	f8ca 3000 	str.w	r3, [sl]
 800a846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a848:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a84c:	601c      	str	r4, [r3, #0]
 800a84e:	e735      	b.n	800a6bc <__gethex+0x114>
 800a850:	1e69      	subs	r1, r5, #1
 800a852:	4620      	mov	r0, r4
 800a854:	f7fe fafe 	bl	8008e54 <__any_on>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1ed      	bne.n	800a838 <__gethex+0x290>
 800a85c:	4621      	mov	r1, r4
 800a85e:	4648      	mov	r0, r9
 800a860:	f7fd feac 	bl	80085bc <_Bfree>
 800a864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a866:	2300      	movs	r3, #0
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a86e:	e725      	b.n	800a6bc <__gethex+0x114>
 800a870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f2      	bne.n	800a85c <__gethex+0x2b4>
 800a876:	e7df      	b.n	800a838 <__gethex+0x290>
 800a878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1dc      	bne.n	800a838 <__gethex+0x290>
 800a87e:	e7ed      	b.n	800a85c <__gethex+0x2b4>
 800a880:	0800d284 	.word	0x0800d284
 800a884:	0800d119 	.word	0x0800d119
 800a888:	0800d42e 	.word	0x0800d42e
 800a88c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a890:	f1bb 0f00 	cmp.w	fp, #0
 800a894:	d133      	bne.n	800a8fe <__gethex+0x356>
 800a896:	f1b8 0f00 	cmp.w	r8, #0
 800a89a:	d004      	beq.n	800a8a6 <__gethex+0x2fe>
 800a89c:	4641      	mov	r1, r8
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7fe fad8 	bl	8008e54 <__any_on>
 800a8a4:	4683      	mov	fp, r0
 800a8a6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8b0:	f008 081f 	and.w	r8, r8, #31
 800a8b4:	fa03 f308 	lsl.w	r3, r3, r8
 800a8b8:	4213      	tst	r3, r2
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4620      	mov	r0, r4
 800a8be:	bf18      	it	ne
 800a8c0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a8c4:	1bad      	subs	r5, r5, r6
 800a8c6:	f7ff fe07 	bl	800a4d8 <rshift>
 800a8ca:	687e      	ldr	r6, [r7, #4]
 800a8cc:	f04f 0802 	mov.w	r8, #2
 800a8d0:	f1bb 0f00 	cmp.w	fp, #0
 800a8d4:	d04a      	beq.n	800a96c <__gethex+0x3c4>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d016      	beq.n	800a90a <__gethex+0x362>
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d018      	beq.n	800a912 <__gethex+0x36a>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d109      	bne.n	800a8f8 <__gethex+0x350>
 800a8e4:	f01b 0f02 	tst.w	fp, #2
 800a8e8:	d006      	beq.n	800a8f8 <__gethex+0x350>
 800a8ea:	f8da 3000 	ldr.w	r3, [sl]
 800a8ee:	ea4b 0b03 	orr.w	fp, fp, r3
 800a8f2:	f01b 0f01 	tst.w	fp, #1
 800a8f6:	d10f      	bne.n	800a918 <__gethex+0x370>
 800a8f8:	f048 0810 	orr.w	r8, r8, #16
 800a8fc:	e036      	b.n	800a96c <__gethex+0x3c4>
 800a8fe:	f04f 0b01 	mov.w	fp, #1
 800a902:	e7d0      	b.n	800a8a6 <__gethex+0x2fe>
 800a904:	f04f 0801 	mov.w	r8, #1
 800a908:	e7e2      	b.n	800a8d0 <__gethex+0x328>
 800a90a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a90c:	f1c3 0301 	rsb	r3, r3, #1
 800a910:	930f      	str	r3, [sp, #60]	; 0x3c
 800a912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0ef      	beq.n	800a8f8 <__gethex+0x350>
 800a918:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a91c:	f104 0214 	add.w	r2, r4, #20
 800a920:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a92a:	2300      	movs	r3, #0
 800a92c:	4694      	mov	ip, r2
 800a92e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a932:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a936:	d01e      	beq.n	800a976 <__gethex+0x3ce>
 800a938:	3101      	adds	r1, #1
 800a93a:	f8cc 1000 	str.w	r1, [ip]
 800a93e:	f1b8 0f02 	cmp.w	r8, #2
 800a942:	f104 0214 	add.w	r2, r4, #20
 800a946:	d13d      	bne.n	800a9c4 <__gethex+0x41c>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	42ab      	cmp	r3, r5
 800a94e:	d10b      	bne.n	800a968 <__gethex+0x3c0>
 800a950:	1169      	asrs	r1, r5, #5
 800a952:	2301      	movs	r3, #1
 800a954:	f005 051f 	and.w	r5, r5, #31
 800a958:	fa03 f505 	lsl.w	r5, r3, r5
 800a95c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a960:	421d      	tst	r5, r3
 800a962:	bf18      	it	ne
 800a964:	f04f 0801 	movne.w	r8, #1
 800a968:	f048 0820 	orr.w	r8, r8, #32
 800a96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a96e:	601c      	str	r4, [r3, #0]
 800a970:	9b02      	ldr	r3, [sp, #8]
 800a972:	601e      	str	r6, [r3, #0]
 800a974:	e6a2      	b.n	800a6bc <__gethex+0x114>
 800a976:	4290      	cmp	r0, r2
 800a978:	f842 3c04 	str.w	r3, [r2, #-4]
 800a97c:	d8d6      	bhi.n	800a92c <__gethex+0x384>
 800a97e:	68a2      	ldr	r2, [r4, #8]
 800a980:	4593      	cmp	fp, r2
 800a982:	db17      	blt.n	800a9b4 <__gethex+0x40c>
 800a984:	6861      	ldr	r1, [r4, #4]
 800a986:	4648      	mov	r0, r9
 800a988:	3101      	adds	r1, #1
 800a98a:	f7fd fdd7 	bl	800853c <_Balloc>
 800a98e:	4682      	mov	sl, r0
 800a990:	b918      	cbnz	r0, 800a99a <__gethex+0x3f2>
 800a992:	4b1b      	ldr	r3, [pc, #108]	; (800aa00 <__gethex+0x458>)
 800a994:	4602      	mov	r2, r0
 800a996:	2184      	movs	r1, #132	; 0x84
 800a998:	e6b3      	b.n	800a702 <__gethex+0x15a>
 800a99a:	6922      	ldr	r2, [r4, #16]
 800a99c:	3202      	adds	r2, #2
 800a99e:	f104 010c 	add.w	r1, r4, #12
 800a9a2:	0092      	lsls	r2, r2, #2
 800a9a4:	300c      	adds	r0, #12
 800a9a6:	f7ff fd4b 	bl	800a440 <memcpy>
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4648      	mov	r0, r9
 800a9ae:	f7fd fe05 	bl	80085bc <_Bfree>
 800a9b2:	4654      	mov	r4, sl
 800a9b4:	6922      	ldr	r2, [r4, #16]
 800a9b6:	1c51      	adds	r1, r2, #1
 800a9b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9bc:	6121      	str	r1, [r4, #16]
 800a9be:	2101      	movs	r1, #1
 800a9c0:	6151      	str	r1, [r2, #20]
 800a9c2:	e7bc      	b.n	800a93e <__gethex+0x396>
 800a9c4:	6921      	ldr	r1, [r4, #16]
 800a9c6:	4559      	cmp	r1, fp
 800a9c8:	dd0b      	ble.n	800a9e2 <__gethex+0x43a>
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f7ff fd83 	bl	800a4d8 <rshift>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	3601      	adds	r6, #1
 800a9d6:	42b3      	cmp	r3, r6
 800a9d8:	f6ff aedb 	blt.w	800a792 <__gethex+0x1ea>
 800a9dc:	f04f 0801 	mov.w	r8, #1
 800a9e0:	e7c2      	b.n	800a968 <__gethex+0x3c0>
 800a9e2:	f015 051f 	ands.w	r5, r5, #31
 800a9e6:	d0f9      	beq.n	800a9dc <__gethex+0x434>
 800a9e8:	9b01      	ldr	r3, [sp, #4]
 800a9ea:	441a      	add	r2, r3
 800a9ec:	f1c5 0520 	rsb	r5, r5, #32
 800a9f0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a9f4:	f7fd fe94 	bl	8008720 <__hi0bits>
 800a9f8:	42a8      	cmp	r0, r5
 800a9fa:	dbe6      	blt.n	800a9ca <__gethex+0x422>
 800a9fc:	e7ee      	b.n	800a9dc <__gethex+0x434>
 800a9fe:	bf00      	nop
 800aa00:	0800d119 	.word	0x0800d119

0800aa04 <L_shift>:
 800aa04:	f1c2 0208 	rsb	r2, r2, #8
 800aa08:	0092      	lsls	r2, r2, #2
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	f1c2 0620 	rsb	r6, r2, #32
 800aa10:	6843      	ldr	r3, [r0, #4]
 800aa12:	6804      	ldr	r4, [r0, #0]
 800aa14:	fa03 f506 	lsl.w	r5, r3, r6
 800aa18:	432c      	orrs	r4, r5
 800aa1a:	40d3      	lsrs	r3, r2
 800aa1c:	6004      	str	r4, [r0, #0]
 800aa1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa22:	4288      	cmp	r0, r1
 800aa24:	d3f4      	bcc.n	800aa10 <L_shift+0xc>
 800aa26:	bd70      	pop	{r4, r5, r6, pc}

0800aa28 <__match>:
 800aa28:	b530      	push	{r4, r5, lr}
 800aa2a:	6803      	ldr	r3, [r0, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa32:	b914      	cbnz	r4, 800aa3a <__match+0x12>
 800aa34:	6003      	str	r3, [r0, #0]
 800aa36:	2001      	movs	r0, #1
 800aa38:	bd30      	pop	{r4, r5, pc}
 800aa3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa42:	2d19      	cmp	r5, #25
 800aa44:	bf98      	it	ls
 800aa46:	3220      	addls	r2, #32
 800aa48:	42a2      	cmp	r2, r4
 800aa4a:	d0f0      	beq.n	800aa2e <__match+0x6>
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	e7f3      	b.n	800aa38 <__match+0x10>

0800aa50 <__hexnan>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	680b      	ldr	r3, [r1, #0]
 800aa56:	6801      	ldr	r1, [r0, #0]
 800aa58:	115e      	asrs	r6, r3, #5
 800aa5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa5e:	f013 031f 	ands.w	r3, r3, #31
 800aa62:	b087      	sub	sp, #28
 800aa64:	bf18      	it	ne
 800aa66:	3604      	addne	r6, #4
 800aa68:	2500      	movs	r5, #0
 800aa6a:	1f37      	subs	r7, r6, #4
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	4690      	mov	r8, r2
 800aa70:	9301      	str	r3, [sp, #4]
 800aa72:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa76:	46b9      	mov	r9, r7
 800aa78:	463c      	mov	r4, r7
 800aa7a:	9502      	str	r5, [sp, #8]
 800aa7c:	46ab      	mov	fp, r5
 800aa7e:	784a      	ldrb	r2, [r1, #1]
 800aa80:	1c4b      	adds	r3, r1, #1
 800aa82:	9303      	str	r3, [sp, #12]
 800aa84:	b342      	cbz	r2, 800aad8 <__hexnan+0x88>
 800aa86:	4610      	mov	r0, r2
 800aa88:	9105      	str	r1, [sp, #20]
 800aa8a:	9204      	str	r2, [sp, #16]
 800aa8c:	f7ff fd76 	bl	800a57c <__hexdig_fun>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d14f      	bne.n	800ab34 <__hexnan+0xe4>
 800aa94:	9a04      	ldr	r2, [sp, #16]
 800aa96:	9905      	ldr	r1, [sp, #20]
 800aa98:	2a20      	cmp	r2, #32
 800aa9a:	d818      	bhi.n	800aace <__hexnan+0x7e>
 800aa9c:	9b02      	ldr	r3, [sp, #8]
 800aa9e:	459b      	cmp	fp, r3
 800aaa0:	dd13      	ble.n	800aaca <__hexnan+0x7a>
 800aaa2:	454c      	cmp	r4, r9
 800aaa4:	d206      	bcs.n	800aab4 <__hexnan+0x64>
 800aaa6:	2d07      	cmp	r5, #7
 800aaa8:	dc04      	bgt.n	800aab4 <__hexnan+0x64>
 800aaaa:	462a      	mov	r2, r5
 800aaac:	4649      	mov	r1, r9
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7ff ffa8 	bl	800aa04 <L_shift>
 800aab4:	4544      	cmp	r4, r8
 800aab6:	d950      	bls.n	800ab5a <__hexnan+0x10a>
 800aab8:	2300      	movs	r3, #0
 800aaba:	f1a4 0904 	sub.w	r9, r4, #4
 800aabe:	f844 3c04 	str.w	r3, [r4, #-4]
 800aac2:	f8cd b008 	str.w	fp, [sp, #8]
 800aac6:	464c      	mov	r4, r9
 800aac8:	461d      	mov	r5, r3
 800aaca:	9903      	ldr	r1, [sp, #12]
 800aacc:	e7d7      	b.n	800aa7e <__hexnan+0x2e>
 800aace:	2a29      	cmp	r2, #41	; 0x29
 800aad0:	d155      	bne.n	800ab7e <__hexnan+0x12e>
 800aad2:	3102      	adds	r1, #2
 800aad4:	f8ca 1000 	str.w	r1, [sl]
 800aad8:	f1bb 0f00 	cmp.w	fp, #0
 800aadc:	d04f      	beq.n	800ab7e <__hexnan+0x12e>
 800aade:	454c      	cmp	r4, r9
 800aae0:	d206      	bcs.n	800aaf0 <__hexnan+0xa0>
 800aae2:	2d07      	cmp	r5, #7
 800aae4:	dc04      	bgt.n	800aaf0 <__hexnan+0xa0>
 800aae6:	462a      	mov	r2, r5
 800aae8:	4649      	mov	r1, r9
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7ff ff8a 	bl	800aa04 <L_shift>
 800aaf0:	4544      	cmp	r4, r8
 800aaf2:	d934      	bls.n	800ab5e <__hexnan+0x10e>
 800aaf4:	f1a8 0204 	sub.w	r2, r8, #4
 800aaf8:	4623      	mov	r3, r4
 800aafa:	f853 1b04 	ldr.w	r1, [r3], #4
 800aafe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab02:	429f      	cmp	r7, r3
 800ab04:	d2f9      	bcs.n	800aafa <__hexnan+0xaa>
 800ab06:	1b3b      	subs	r3, r7, r4
 800ab08:	f023 0303 	bic.w	r3, r3, #3
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	3e03      	subs	r6, #3
 800ab10:	3401      	adds	r4, #1
 800ab12:	42a6      	cmp	r6, r4
 800ab14:	bf38      	it	cc
 800ab16:	2304      	movcc	r3, #4
 800ab18:	4443      	add	r3, r8
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f843 2b04 	str.w	r2, [r3], #4
 800ab20:	429f      	cmp	r7, r3
 800ab22:	d2fb      	bcs.n	800ab1c <__hexnan+0xcc>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	b91b      	cbnz	r3, 800ab30 <__hexnan+0xe0>
 800ab28:	4547      	cmp	r7, r8
 800ab2a:	d126      	bne.n	800ab7a <__hexnan+0x12a>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	2005      	movs	r0, #5
 800ab32:	e025      	b.n	800ab80 <__hexnan+0x130>
 800ab34:	3501      	adds	r5, #1
 800ab36:	2d08      	cmp	r5, #8
 800ab38:	f10b 0b01 	add.w	fp, fp, #1
 800ab3c:	dd06      	ble.n	800ab4c <__hexnan+0xfc>
 800ab3e:	4544      	cmp	r4, r8
 800ab40:	d9c3      	bls.n	800aaca <__hexnan+0x7a>
 800ab42:	2300      	movs	r3, #0
 800ab44:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab48:	2501      	movs	r5, #1
 800ab4a:	3c04      	subs	r4, #4
 800ab4c:	6822      	ldr	r2, [r4, #0]
 800ab4e:	f000 000f 	and.w	r0, r0, #15
 800ab52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab56:	6020      	str	r0, [r4, #0]
 800ab58:	e7b7      	b.n	800aaca <__hexnan+0x7a>
 800ab5a:	2508      	movs	r5, #8
 800ab5c:	e7b5      	b.n	800aaca <__hexnan+0x7a>
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0df      	beq.n	800ab24 <__hexnan+0xd4>
 800ab64:	f1c3 0320 	rsb	r3, r3, #32
 800ab68:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6c:	40da      	lsrs	r2, r3
 800ab6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab72:	4013      	ands	r3, r2
 800ab74:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab78:	e7d4      	b.n	800ab24 <__hexnan+0xd4>
 800ab7a:	3f04      	subs	r7, #4
 800ab7c:	e7d2      	b.n	800ab24 <__hexnan+0xd4>
 800ab7e:	2004      	movs	r0, #4
 800ab80:	b007      	add	sp, #28
 800ab82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab86 <__ascii_mbtowc>:
 800ab86:	b082      	sub	sp, #8
 800ab88:	b901      	cbnz	r1, 800ab8c <__ascii_mbtowc+0x6>
 800ab8a:	a901      	add	r1, sp, #4
 800ab8c:	b142      	cbz	r2, 800aba0 <__ascii_mbtowc+0x1a>
 800ab8e:	b14b      	cbz	r3, 800aba4 <__ascii_mbtowc+0x1e>
 800ab90:	7813      	ldrb	r3, [r2, #0]
 800ab92:	600b      	str	r3, [r1, #0]
 800ab94:	7812      	ldrb	r2, [r2, #0]
 800ab96:	1e10      	subs	r0, r2, #0
 800ab98:	bf18      	it	ne
 800ab9a:	2001      	movne	r0, #1
 800ab9c:	b002      	add	sp, #8
 800ab9e:	4770      	bx	lr
 800aba0:	4610      	mov	r0, r2
 800aba2:	e7fb      	b.n	800ab9c <__ascii_mbtowc+0x16>
 800aba4:	f06f 0001 	mvn.w	r0, #1
 800aba8:	e7f8      	b.n	800ab9c <__ascii_mbtowc+0x16>

0800abaa <_realloc_r>:
 800abaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abae:	4680      	mov	r8, r0
 800abb0:	4614      	mov	r4, r2
 800abb2:	460e      	mov	r6, r1
 800abb4:	b921      	cbnz	r1, 800abc0 <_realloc_r+0x16>
 800abb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abba:	4611      	mov	r1, r2
 800abbc:	f7fd bc32 	b.w	8008424 <_malloc_r>
 800abc0:	b92a      	cbnz	r2, 800abce <_realloc_r+0x24>
 800abc2:	f7fd fbbb 	bl	800833c <_free_r>
 800abc6:	4625      	mov	r5, r4
 800abc8:	4628      	mov	r0, r5
 800abca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abce:	f000 f842 	bl	800ac56 <_malloc_usable_size_r>
 800abd2:	4284      	cmp	r4, r0
 800abd4:	4607      	mov	r7, r0
 800abd6:	d802      	bhi.n	800abde <_realloc_r+0x34>
 800abd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abdc:	d812      	bhi.n	800ac04 <_realloc_r+0x5a>
 800abde:	4621      	mov	r1, r4
 800abe0:	4640      	mov	r0, r8
 800abe2:	f7fd fc1f 	bl	8008424 <_malloc_r>
 800abe6:	4605      	mov	r5, r0
 800abe8:	2800      	cmp	r0, #0
 800abea:	d0ed      	beq.n	800abc8 <_realloc_r+0x1e>
 800abec:	42bc      	cmp	r4, r7
 800abee:	4622      	mov	r2, r4
 800abf0:	4631      	mov	r1, r6
 800abf2:	bf28      	it	cs
 800abf4:	463a      	movcs	r2, r7
 800abf6:	f7ff fc23 	bl	800a440 <memcpy>
 800abfa:	4631      	mov	r1, r6
 800abfc:	4640      	mov	r0, r8
 800abfe:	f7fd fb9d 	bl	800833c <_free_r>
 800ac02:	e7e1      	b.n	800abc8 <_realloc_r+0x1e>
 800ac04:	4635      	mov	r5, r6
 800ac06:	e7df      	b.n	800abc8 <_realloc_r+0x1e>

0800ac08 <__ascii_wctomb>:
 800ac08:	b149      	cbz	r1, 800ac1e <__ascii_wctomb+0x16>
 800ac0a:	2aff      	cmp	r2, #255	; 0xff
 800ac0c:	bf85      	ittet	hi
 800ac0e:	238a      	movhi	r3, #138	; 0x8a
 800ac10:	6003      	strhi	r3, [r0, #0]
 800ac12:	700a      	strbls	r2, [r1, #0]
 800ac14:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac18:	bf98      	it	ls
 800ac1a:	2001      	movls	r0, #1
 800ac1c:	4770      	bx	lr
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4770      	bx	lr
	...

0800ac24 <fiprintf>:
 800ac24:	b40e      	push	{r1, r2, r3}
 800ac26:	b503      	push	{r0, r1, lr}
 800ac28:	4601      	mov	r1, r0
 800ac2a:	ab03      	add	r3, sp, #12
 800ac2c:	4805      	ldr	r0, [pc, #20]	; (800ac44 <fiprintf+0x20>)
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	6800      	ldr	r0, [r0, #0]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	f7ff f947 	bl	8009ec8 <_vfiprintf_r>
 800ac3a:	b002      	add	sp, #8
 800ac3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac40:	b003      	add	sp, #12
 800ac42:	4770      	bx	lr
 800ac44:	2000006c 	.word	0x2000006c

0800ac48 <abort>:
 800ac48:	b508      	push	{r3, lr}
 800ac4a:	2006      	movs	r0, #6
 800ac4c:	f000 f834 	bl	800acb8 <raise>
 800ac50:	2001      	movs	r0, #1
 800ac52:	f7f7 fdb5 	bl	80027c0 <_exit>

0800ac56 <_malloc_usable_size_r>:
 800ac56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac5a:	1f18      	subs	r0, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bfbc      	itt	lt
 800ac60:	580b      	ldrlt	r3, [r1, r0]
 800ac62:	18c0      	addlt	r0, r0, r3
 800ac64:	4770      	bx	lr

0800ac66 <_raise_r>:
 800ac66:	291f      	cmp	r1, #31
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	d904      	bls.n	800ac7a <_raise_r+0x14>
 800ac70:	2316      	movs	r3, #22
 800ac72:	6003      	str	r3, [r0, #0]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
 800ac7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac7c:	b112      	cbz	r2, 800ac84 <_raise_r+0x1e>
 800ac7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac82:	b94b      	cbnz	r3, 800ac98 <_raise_r+0x32>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 f831 	bl	800acec <_getpid_r>
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	4620      	mov	r0, r4
 800ac90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac94:	f000 b818 	b.w	800acc8 <_kill_r>
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d00a      	beq.n	800acb2 <_raise_r+0x4c>
 800ac9c:	1c59      	adds	r1, r3, #1
 800ac9e:	d103      	bne.n	800aca8 <_raise_r+0x42>
 800aca0:	2316      	movs	r3, #22
 800aca2:	6003      	str	r3, [r0, #0]
 800aca4:	2001      	movs	r0, #1
 800aca6:	e7e7      	b.n	800ac78 <_raise_r+0x12>
 800aca8:	2400      	movs	r4, #0
 800acaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acae:	4628      	mov	r0, r5
 800acb0:	4798      	blx	r3
 800acb2:	2000      	movs	r0, #0
 800acb4:	e7e0      	b.n	800ac78 <_raise_r+0x12>
	...

0800acb8 <raise>:
 800acb8:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <raise+0xc>)
 800acba:	4601      	mov	r1, r0
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f7ff bfd2 	b.w	800ac66 <_raise_r>
 800acc2:	bf00      	nop
 800acc4:	2000006c 	.word	0x2000006c

0800acc8 <_kill_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d07      	ldr	r5, [pc, #28]	; (800ace8 <_kill_r+0x20>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f7f7 fd63 	bl	80027a0 <_kill>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d102      	bne.n	800ace4 <_kill_r+0x1c>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b103      	cbz	r3, 800ace4 <_kill_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	20000910 	.word	0x20000910

0800acec <_getpid_r>:
 800acec:	f7f7 bd50 	b.w	8002790 <_getpid>

0800acf0 <atan2>:
 800acf0:	f000 b982 	b.w	800aff8 <__ieee754_atan2>

0800acf4 <pow>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	ed2d 8b02 	vpush	{d8}
 800acfa:	eeb0 8a40 	vmov.f32	s16, s0
 800acfe:	eef0 8a60 	vmov.f32	s17, s1
 800ad02:	ec55 4b11 	vmov	r4, r5, d1
 800ad06:	f000 fa3f 	bl	800b188 <__ieee754_pow>
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	ec57 6b10 	vmov	r6, r7, d0
 800ad16:	f7f5 ff31 	bl	8000b7c <__aeabi_dcmpun>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d13b      	bne.n	800ad96 <pow+0xa2>
 800ad1e:	ec51 0b18 	vmov	r0, r1, d8
 800ad22:	2200      	movs	r2, #0
 800ad24:	2300      	movs	r3, #0
 800ad26:	f7f5 fef7 	bl	8000b18 <__aeabi_dcmpeq>
 800ad2a:	b1b8      	cbz	r0, 800ad5c <pow+0x68>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4620      	mov	r0, r4
 800ad32:	4629      	mov	r1, r5
 800ad34:	f7f5 fef0 	bl	8000b18 <__aeabi_dcmpeq>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d146      	bne.n	800adca <pow+0xd6>
 800ad3c:	ec45 4b10 	vmov	d0, r4, r5
 800ad40:	f000 f874 	bl	800ae2c <finite>
 800ad44:	b338      	cbz	r0, 800ad96 <pow+0xa2>
 800ad46:	2200      	movs	r2, #0
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	f7f5 feed 	bl	8000b2c <__aeabi_dcmplt>
 800ad52:	b300      	cbz	r0, 800ad96 <pow+0xa2>
 800ad54:	f7fc fc42 	bl	80075dc <__errno>
 800ad58:	2322      	movs	r3, #34	; 0x22
 800ad5a:	e01b      	b.n	800ad94 <pow+0xa0>
 800ad5c:	ec47 6b10 	vmov	d0, r6, r7
 800ad60:	f000 f864 	bl	800ae2c <finite>
 800ad64:	b9e0      	cbnz	r0, 800ada0 <pow+0xac>
 800ad66:	eeb0 0a48 	vmov.f32	s0, s16
 800ad6a:	eef0 0a68 	vmov.f32	s1, s17
 800ad6e:	f000 f85d 	bl	800ae2c <finite>
 800ad72:	b1a8      	cbz	r0, 800ada0 <pow+0xac>
 800ad74:	ec45 4b10 	vmov	d0, r4, r5
 800ad78:	f000 f858 	bl	800ae2c <finite>
 800ad7c:	b180      	cbz	r0, 800ada0 <pow+0xac>
 800ad7e:	4632      	mov	r2, r6
 800ad80:	463b      	mov	r3, r7
 800ad82:	4630      	mov	r0, r6
 800ad84:	4639      	mov	r1, r7
 800ad86:	f7f5 fef9 	bl	8000b7c <__aeabi_dcmpun>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d0e2      	beq.n	800ad54 <pow+0x60>
 800ad8e:	f7fc fc25 	bl	80075dc <__errno>
 800ad92:	2321      	movs	r3, #33	; 0x21
 800ad94:	6003      	str	r3, [r0, #0]
 800ad96:	ecbd 8b02 	vpop	{d8}
 800ad9a:	ec47 6b10 	vmov	d0, r6, r7
 800ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada0:	2200      	movs	r2, #0
 800ada2:	2300      	movs	r3, #0
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 feb6 	bl	8000b18 <__aeabi_dcmpeq>
 800adac:	2800      	cmp	r0, #0
 800adae:	d0f2      	beq.n	800ad96 <pow+0xa2>
 800adb0:	eeb0 0a48 	vmov.f32	s0, s16
 800adb4:	eef0 0a68 	vmov.f32	s1, s17
 800adb8:	f000 f838 	bl	800ae2c <finite>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d0ea      	beq.n	800ad96 <pow+0xa2>
 800adc0:	ec45 4b10 	vmov	d0, r4, r5
 800adc4:	f000 f832 	bl	800ae2c <finite>
 800adc8:	e7c3      	b.n	800ad52 <pow+0x5e>
 800adca:	4f01      	ldr	r7, [pc, #4]	; (800add0 <pow+0xdc>)
 800adcc:	2600      	movs	r6, #0
 800adce:	e7e2      	b.n	800ad96 <pow+0xa2>
 800add0:	3ff00000 	.word	0x3ff00000

0800add4 <sqrt>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	ed2d 8b02 	vpush	{d8}
 800adda:	ec55 4b10 	vmov	r4, r5, d0
 800adde:	f000 f831 	bl	800ae44 <__ieee754_sqrt>
 800ade2:	4622      	mov	r2, r4
 800ade4:	462b      	mov	r3, r5
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	eeb0 8a40 	vmov.f32	s16, s0
 800adee:	eef0 8a60 	vmov.f32	s17, s1
 800adf2:	f7f5 fec3 	bl	8000b7c <__aeabi_dcmpun>
 800adf6:	b990      	cbnz	r0, 800ae1e <sqrt+0x4a>
 800adf8:	2200      	movs	r2, #0
 800adfa:	2300      	movs	r3, #0
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fe94 	bl	8000b2c <__aeabi_dcmplt>
 800ae04:	b158      	cbz	r0, 800ae1e <sqrt+0x4a>
 800ae06:	f7fc fbe9 	bl	80075dc <__errno>
 800ae0a:	2321      	movs	r3, #33	; 0x21
 800ae0c:	6003      	str	r3, [r0, #0]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	4610      	mov	r0, r2
 800ae14:	4619      	mov	r1, r3
 800ae16:	f7f5 fd41 	bl	800089c <__aeabi_ddiv>
 800ae1a:	ec41 0b18 	vmov	d8, r0, r1
 800ae1e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae22:	eef0 0a68 	vmov.f32	s1, s17
 800ae26:	ecbd 8b02 	vpop	{d8}
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}

0800ae2c <finite>:
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	ed8d 0b00 	vstr	d0, [sp]
 800ae32:	9801      	ldr	r0, [sp, #4]
 800ae34:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae38:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae3c:	0fc0      	lsrs	r0, r0, #31
 800ae3e:	b002      	add	sp, #8
 800ae40:	4770      	bx	lr
	...

0800ae44 <__ieee754_sqrt>:
 800ae44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	ec55 4b10 	vmov	r4, r5, d0
 800ae4c:	4e67      	ldr	r6, [pc, #412]	; (800afec <__ieee754_sqrt+0x1a8>)
 800ae4e:	43ae      	bics	r6, r5
 800ae50:	ee10 0a10 	vmov	r0, s0
 800ae54:	ee10 2a10 	vmov	r2, s0
 800ae58:	4629      	mov	r1, r5
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	d10d      	bne.n	800ae7a <__ieee754_sqrt+0x36>
 800ae5e:	f7f5 fbf3 	bl	8000648 <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fa37 	bl	80002dc <__adddf3>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	ec45 4b10 	vmov	d0, r4, r5
 800ae76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	dc0b      	bgt.n	800ae96 <__ieee754_sqrt+0x52>
 800ae7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae82:	4326      	orrs	r6, r4
 800ae84:	d0f5      	beq.n	800ae72 <__ieee754_sqrt+0x2e>
 800ae86:	b135      	cbz	r5, 800ae96 <__ieee754_sqrt+0x52>
 800ae88:	f7f5 fa26 	bl	80002d8 <__aeabi_dsub>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	f7f5 fd04 	bl	800089c <__aeabi_ddiv>
 800ae94:	e7eb      	b.n	800ae6e <__ieee754_sqrt+0x2a>
 800ae96:	1509      	asrs	r1, r1, #20
 800ae98:	f000 808d 	beq.w	800afb6 <__ieee754_sqrt+0x172>
 800ae9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aea0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800aea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aea8:	07c9      	lsls	r1, r1, #31
 800aeaa:	bf5c      	itt	pl
 800aeac:	005b      	lslpl	r3, r3, #1
 800aeae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800aeb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aeb6:	bf58      	it	pl
 800aeb8:	0052      	lslpl	r2, r2, #1
 800aeba:	2500      	movs	r5, #0
 800aebc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800aec0:	1076      	asrs	r6, r6, #1
 800aec2:	0052      	lsls	r2, r2, #1
 800aec4:	f04f 0e16 	mov.w	lr, #22
 800aec8:	46ac      	mov	ip, r5
 800aeca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aece:	eb0c 0001 	add.w	r0, ip, r1
 800aed2:	4298      	cmp	r0, r3
 800aed4:	bfde      	ittt	le
 800aed6:	1a1b      	suble	r3, r3, r0
 800aed8:	eb00 0c01 	addle.w	ip, r0, r1
 800aedc:	186d      	addle	r5, r5, r1
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	f1be 0e01 	subs.w	lr, lr, #1
 800aee4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800aee8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aeec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800aef0:	d1ed      	bne.n	800aece <__ieee754_sqrt+0x8a>
 800aef2:	4674      	mov	r4, lr
 800aef4:	2720      	movs	r7, #32
 800aef6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800aefa:	4563      	cmp	r3, ip
 800aefc:	eb01 000e 	add.w	r0, r1, lr
 800af00:	dc02      	bgt.n	800af08 <__ieee754_sqrt+0xc4>
 800af02:	d113      	bne.n	800af2c <__ieee754_sqrt+0xe8>
 800af04:	4290      	cmp	r0, r2
 800af06:	d811      	bhi.n	800af2c <__ieee754_sqrt+0xe8>
 800af08:	2800      	cmp	r0, #0
 800af0a:	eb00 0e01 	add.w	lr, r0, r1
 800af0e:	da57      	bge.n	800afc0 <__ieee754_sqrt+0x17c>
 800af10:	f1be 0f00 	cmp.w	lr, #0
 800af14:	db54      	blt.n	800afc0 <__ieee754_sqrt+0x17c>
 800af16:	f10c 0801 	add.w	r8, ip, #1
 800af1a:	eba3 030c 	sub.w	r3, r3, ip
 800af1e:	4290      	cmp	r0, r2
 800af20:	bf88      	it	hi
 800af22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800af26:	1a12      	subs	r2, r2, r0
 800af28:	440c      	add	r4, r1
 800af2a:	46c4      	mov	ip, r8
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	3f01      	subs	r7, #1
 800af30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800af34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800af3c:	d1dd      	bne.n	800aefa <__ieee754_sqrt+0xb6>
 800af3e:	4313      	orrs	r3, r2
 800af40:	d01b      	beq.n	800af7a <__ieee754_sqrt+0x136>
 800af42:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aff0 <__ieee754_sqrt+0x1ac>
 800af46:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aff4 <__ieee754_sqrt+0x1b0>
 800af4a:	e9da 0100 	ldrd	r0, r1, [sl]
 800af4e:	e9db 2300 	ldrd	r2, r3, [fp]
 800af52:	f7f5 f9c1 	bl	80002d8 <__aeabi_dsub>
 800af56:	e9da 8900 	ldrd	r8, r9, [sl]
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 fded 	bl	8000b40 <__aeabi_dcmple>
 800af66:	b140      	cbz	r0, 800af7a <__ieee754_sqrt+0x136>
 800af68:	f1b4 3fff 	cmp.w	r4, #4294967295
 800af6c:	e9da 0100 	ldrd	r0, r1, [sl]
 800af70:	e9db 2300 	ldrd	r2, r3, [fp]
 800af74:	d126      	bne.n	800afc4 <__ieee754_sqrt+0x180>
 800af76:	3501      	adds	r5, #1
 800af78:	463c      	mov	r4, r7
 800af7a:	106a      	asrs	r2, r5, #1
 800af7c:	0863      	lsrs	r3, r4, #1
 800af7e:	07e9      	lsls	r1, r5, #31
 800af80:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800af84:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800af88:	bf48      	it	mi
 800af8a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800af8e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800af92:	461c      	mov	r4, r3
 800af94:	e76d      	b.n	800ae72 <__ieee754_sqrt+0x2e>
 800af96:	0ad3      	lsrs	r3, r2, #11
 800af98:	3815      	subs	r0, #21
 800af9a:	0552      	lsls	r2, r2, #21
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0fa      	beq.n	800af96 <__ieee754_sqrt+0x152>
 800afa0:	02dc      	lsls	r4, r3, #11
 800afa2:	d50a      	bpl.n	800afba <__ieee754_sqrt+0x176>
 800afa4:	f1c1 0420 	rsb	r4, r1, #32
 800afa8:	fa22 f404 	lsr.w	r4, r2, r4
 800afac:	1e4d      	subs	r5, r1, #1
 800afae:	408a      	lsls	r2, r1
 800afb0:	4323      	orrs	r3, r4
 800afb2:	1b41      	subs	r1, r0, r5
 800afb4:	e772      	b.n	800ae9c <__ieee754_sqrt+0x58>
 800afb6:	4608      	mov	r0, r1
 800afb8:	e7f0      	b.n	800af9c <__ieee754_sqrt+0x158>
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	3101      	adds	r1, #1
 800afbe:	e7ef      	b.n	800afa0 <__ieee754_sqrt+0x15c>
 800afc0:	46e0      	mov	r8, ip
 800afc2:	e7aa      	b.n	800af1a <__ieee754_sqrt+0xd6>
 800afc4:	f7f5 f98a 	bl	80002dc <__adddf3>
 800afc8:	e9da 8900 	ldrd	r8, r9, [sl]
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4640      	mov	r0, r8
 800afd2:	4649      	mov	r1, r9
 800afd4:	f7f5 fdaa 	bl	8000b2c <__aeabi_dcmplt>
 800afd8:	b120      	cbz	r0, 800afe4 <__ieee754_sqrt+0x1a0>
 800afda:	1ca0      	adds	r0, r4, #2
 800afdc:	bf08      	it	eq
 800afde:	3501      	addeq	r5, #1
 800afe0:	3402      	adds	r4, #2
 800afe2:	e7ca      	b.n	800af7a <__ieee754_sqrt+0x136>
 800afe4:	3401      	adds	r4, #1
 800afe6:	f024 0401 	bic.w	r4, r4, #1
 800afea:	e7c6      	b.n	800af7a <__ieee754_sqrt+0x136>
 800afec:	7ff00000 	.word	0x7ff00000
 800aff0:	200001e0 	.word	0x200001e0
 800aff4:	200001e8 	.word	0x200001e8

0800aff8 <__ieee754_atan2>:
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	ec57 6b11 	vmov	r6, r7, d1
 800b000:	4273      	negs	r3, r6
 800b002:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b180 <__ieee754_atan2+0x188>
 800b006:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b00a:	4333      	orrs	r3, r6
 800b00c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b010:	4543      	cmp	r3, r8
 800b012:	ec51 0b10 	vmov	r0, r1, d0
 800b016:	ee11 5a10 	vmov	r5, s2
 800b01a:	d80a      	bhi.n	800b032 <__ieee754_atan2+0x3a>
 800b01c:	4244      	negs	r4, r0
 800b01e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b022:	4304      	orrs	r4, r0
 800b024:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b028:	4544      	cmp	r4, r8
 800b02a:	ee10 9a10 	vmov	r9, s0
 800b02e:	468e      	mov	lr, r1
 800b030:	d907      	bls.n	800b042 <__ieee754_atan2+0x4a>
 800b032:	4632      	mov	r2, r6
 800b034:	463b      	mov	r3, r7
 800b036:	f7f5 f951 	bl	80002dc <__adddf3>
 800b03a:	ec41 0b10 	vmov	d0, r0, r1
 800b03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b042:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b046:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b04a:	4334      	orrs	r4, r6
 800b04c:	d103      	bne.n	800b056 <__ieee754_atan2+0x5e>
 800b04e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b052:	f000 bdc5 	b.w	800bbe0 <atan>
 800b056:	17bc      	asrs	r4, r7, #30
 800b058:	f004 0402 	and.w	r4, r4, #2
 800b05c:	ea53 0909 	orrs.w	r9, r3, r9
 800b060:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b064:	d107      	bne.n	800b076 <__ieee754_atan2+0x7e>
 800b066:	2c02      	cmp	r4, #2
 800b068:	d05f      	beq.n	800b12a <__ieee754_atan2+0x132>
 800b06a:	2c03      	cmp	r4, #3
 800b06c:	d1e5      	bne.n	800b03a <__ieee754_atan2+0x42>
 800b06e:	a140      	add	r1, pc, #256	; (adr r1, 800b170 <__ieee754_atan2+0x178>)
 800b070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b074:	e7e1      	b.n	800b03a <__ieee754_atan2+0x42>
 800b076:	4315      	orrs	r5, r2
 800b078:	d106      	bne.n	800b088 <__ieee754_atan2+0x90>
 800b07a:	f1be 0f00 	cmp.w	lr, #0
 800b07e:	da5f      	bge.n	800b140 <__ieee754_atan2+0x148>
 800b080:	a13d      	add	r1, pc, #244	; (adr r1, 800b178 <__ieee754_atan2+0x180>)
 800b082:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b086:	e7d8      	b.n	800b03a <__ieee754_atan2+0x42>
 800b088:	4542      	cmp	r2, r8
 800b08a:	d10f      	bne.n	800b0ac <__ieee754_atan2+0xb4>
 800b08c:	4293      	cmp	r3, r2
 800b08e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b092:	d107      	bne.n	800b0a4 <__ieee754_atan2+0xac>
 800b094:	2c02      	cmp	r4, #2
 800b096:	d84c      	bhi.n	800b132 <__ieee754_atan2+0x13a>
 800b098:	4b33      	ldr	r3, [pc, #204]	; (800b168 <__ieee754_atan2+0x170>)
 800b09a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b09e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0a2:	e7ca      	b.n	800b03a <__ieee754_atan2+0x42>
 800b0a4:	2c02      	cmp	r4, #2
 800b0a6:	d848      	bhi.n	800b13a <__ieee754_atan2+0x142>
 800b0a8:	4b30      	ldr	r3, [pc, #192]	; (800b16c <__ieee754_atan2+0x174>)
 800b0aa:	e7f6      	b.n	800b09a <__ieee754_atan2+0xa2>
 800b0ac:	4543      	cmp	r3, r8
 800b0ae:	d0e4      	beq.n	800b07a <__ieee754_atan2+0x82>
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b0b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0ba:	da1e      	bge.n	800b0fa <__ieee754_atan2+0x102>
 800b0bc:	2f00      	cmp	r7, #0
 800b0be:	da01      	bge.n	800b0c4 <__ieee754_atan2+0xcc>
 800b0c0:	323c      	adds	r2, #60	; 0x3c
 800b0c2:	db1e      	blt.n	800b102 <__ieee754_atan2+0x10a>
 800b0c4:	4632      	mov	r2, r6
 800b0c6:	463b      	mov	r3, r7
 800b0c8:	f7f5 fbe8 	bl	800089c <__aeabi_ddiv>
 800b0cc:	ec41 0b10 	vmov	d0, r0, r1
 800b0d0:	f000 ff26 	bl	800bf20 <fabs>
 800b0d4:	f000 fd84 	bl	800bbe0 <atan>
 800b0d8:	ec51 0b10 	vmov	r0, r1, d0
 800b0dc:	2c01      	cmp	r4, #1
 800b0de:	d013      	beq.n	800b108 <__ieee754_atan2+0x110>
 800b0e0:	2c02      	cmp	r4, #2
 800b0e2:	d015      	beq.n	800b110 <__ieee754_atan2+0x118>
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	d0a8      	beq.n	800b03a <__ieee754_atan2+0x42>
 800b0e8:	a317      	add	r3, pc, #92	; (adr r3, 800b148 <__ieee754_atan2+0x150>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 f8f3 	bl	80002d8 <__aeabi_dsub>
 800b0f2:	a317      	add	r3, pc, #92	; (adr r3, 800b150 <__ieee754_atan2+0x158>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	e014      	b.n	800b124 <__ieee754_atan2+0x12c>
 800b0fa:	a117      	add	r1, pc, #92	; (adr r1, 800b158 <__ieee754_atan2+0x160>)
 800b0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b100:	e7ec      	b.n	800b0dc <__ieee754_atan2+0xe4>
 800b102:	2000      	movs	r0, #0
 800b104:	2100      	movs	r1, #0
 800b106:	e7e9      	b.n	800b0dc <__ieee754_atan2+0xe4>
 800b108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b10c:	4619      	mov	r1, r3
 800b10e:	e794      	b.n	800b03a <__ieee754_atan2+0x42>
 800b110:	a30d      	add	r3, pc, #52	; (adr r3, 800b148 <__ieee754_atan2+0x150>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 f8df 	bl	80002d8 <__aeabi_dsub>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	a10c      	add	r1, pc, #48	; (adr r1, 800b150 <__ieee754_atan2+0x158>)
 800b120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b124:	f7f5 f8d8 	bl	80002d8 <__aeabi_dsub>
 800b128:	e787      	b.n	800b03a <__ieee754_atan2+0x42>
 800b12a:	a109      	add	r1, pc, #36	; (adr r1, 800b150 <__ieee754_atan2+0x158>)
 800b12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b130:	e783      	b.n	800b03a <__ieee754_atan2+0x42>
 800b132:	a10b      	add	r1, pc, #44	; (adr r1, 800b160 <__ieee754_atan2+0x168>)
 800b134:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b138:	e77f      	b.n	800b03a <__ieee754_atan2+0x42>
 800b13a:	2000      	movs	r0, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	e77c      	b.n	800b03a <__ieee754_atan2+0x42>
 800b140:	a105      	add	r1, pc, #20	; (adr r1, 800b158 <__ieee754_atan2+0x160>)
 800b142:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b146:	e778      	b.n	800b03a <__ieee754_atan2+0x42>
 800b148:	33145c07 	.word	0x33145c07
 800b14c:	3ca1a626 	.word	0x3ca1a626
 800b150:	54442d18 	.word	0x54442d18
 800b154:	400921fb 	.word	0x400921fb
 800b158:	54442d18 	.word	0x54442d18
 800b15c:	3ff921fb 	.word	0x3ff921fb
 800b160:	54442d18 	.word	0x54442d18
 800b164:	3fe921fb 	.word	0x3fe921fb
 800b168:	0800d490 	.word	0x0800d490
 800b16c:	0800d4a8 	.word	0x0800d4a8
 800b170:	54442d18 	.word	0x54442d18
 800b174:	c00921fb 	.word	0xc00921fb
 800b178:	54442d18 	.word	0x54442d18
 800b17c:	bff921fb 	.word	0xbff921fb
 800b180:	7ff00000 	.word	0x7ff00000
 800b184:	00000000 	.word	0x00000000

0800b188 <__ieee754_pow>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b06 	vpush	{d8-d10}
 800b190:	b089      	sub	sp, #36	; 0x24
 800b192:	ed8d 1b00 	vstr	d1, [sp]
 800b196:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b19a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b19e:	ea58 0102 	orrs.w	r1, r8, r2
 800b1a2:	ec57 6b10 	vmov	r6, r7, d0
 800b1a6:	d115      	bne.n	800b1d4 <__ieee754_pow+0x4c>
 800b1a8:	19b3      	adds	r3, r6, r6
 800b1aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b1ae:	4152      	adcs	r2, r2
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	4b89      	ldr	r3, [pc, #548]	; (800b3d8 <__ieee754_pow+0x250>)
 800b1b4:	4193      	sbcs	r3, r2
 800b1b6:	f080 84d1 	bcs.w	800bb5c <__ieee754_pow+0x9d4>
 800b1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 f88b 	bl	80002dc <__adddf3>
 800b1c6:	ec41 0b10 	vmov	d0, r0, r1
 800b1ca:	b009      	add	sp, #36	; 0x24
 800b1cc:	ecbd 8b06 	vpop	{d8-d10}
 800b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d4:	4b81      	ldr	r3, [pc, #516]	; (800b3dc <__ieee754_pow+0x254>)
 800b1d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	ee10 aa10 	vmov	sl, s0
 800b1e0:	463d      	mov	r5, r7
 800b1e2:	dc06      	bgt.n	800b1f2 <__ieee754_pow+0x6a>
 800b1e4:	d101      	bne.n	800b1ea <__ieee754_pow+0x62>
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d1e7      	bne.n	800b1ba <__ieee754_pow+0x32>
 800b1ea:	4598      	cmp	r8, r3
 800b1ec:	dc01      	bgt.n	800b1f2 <__ieee754_pow+0x6a>
 800b1ee:	d10f      	bne.n	800b210 <__ieee754_pow+0x88>
 800b1f0:	b172      	cbz	r2, 800b210 <__ieee754_pow+0x88>
 800b1f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b1f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b1fa:	ea55 050a 	orrs.w	r5, r5, sl
 800b1fe:	d1dc      	bne.n	800b1ba <__ieee754_pow+0x32>
 800b200:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b204:	18db      	adds	r3, r3, r3
 800b206:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b20a:	4152      	adcs	r2, r2
 800b20c:	429d      	cmp	r5, r3
 800b20e:	e7d0      	b.n	800b1b2 <__ieee754_pow+0x2a>
 800b210:	2d00      	cmp	r5, #0
 800b212:	da3b      	bge.n	800b28c <__ieee754_pow+0x104>
 800b214:	4b72      	ldr	r3, [pc, #456]	; (800b3e0 <__ieee754_pow+0x258>)
 800b216:	4598      	cmp	r8, r3
 800b218:	dc51      	bgt.n	800b2be <__ieee754_pow+0x136>
 800b21a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b21e:	4598      	cmp	r8, r3
 800b220:	f340 84ab 	ble.w	800bb7a <__ieee754_pow+0x9f2>
 800b224:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b228:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b22c:	2b14      	cmp	r3, #20
 800b22e:	dd0f      	ble.n	800b250 <__ieee754_pow+0xc8>
 800b230:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b234:	fa22 f103 	lsr.w	r1, r2, r3
 800b238:	fa01 f303 	lsl.w	r3, r1, r3
 800b23c:	4293      	cmp	r3, r2
 800b23e:	f040 849c 	bne.w	800bb7a <__ieee754_pow+0x9f2>
 800b242:	f001 0101 	and.w	r1, r1, #1
 800b246:	f1c1 0302 	rsb	r3, r1, #2
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	b182      	cbz	r2, 800b270 <__ieee754_pow+0xe8>
 800b24e:	e05f      	b.n	800b310 <__ieee754_pow+0x188>
 800b250:	2a00      	cmp	r2, #0
 800b252:	d15b      	bne.n	800b30c <__ieee754_pow+0x184>
 800b254:	f1c3 0314 	rsb	r3, r3, #20
 800b258:	fa48 f103 	asr.w	r1, r8, r3
 800b25c:	fa01 f303 	lsl.w	r3, r1, r3
 800b260:	4543      	cmp	r3, r8
 800b262:	f040 8487 	bne.w	800bb74 <__ieee754_pow+0x9ec>
 800b266:	f001 0101 	and.w	r1, r1, #1
 800b26a:	f1c1 0302 	rsb	r3, r1, #2
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	4b5c      	ldr	r3, [pc, #368]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b272:	4598      	cmp	r8, r3
 800b274:	d132      	bne.n	800b2dc <__ieee754_pow+0x154>
 800b276:	f1b9 0f00 	cmp.w	r9, #0
 800b27a:	f280 8477 	bge.w	800bb6c <__ieee754_pow+0x9e4>
 800b27e:	4959      	ldr	r1, [pc, #356]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	2000      	movs	r0, #0
 800b286:	f7f5 fb09 	bl	800089c <__aeabi_ddiv>
 800b28a:	e79c      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	2a00      	cmp	r2, #0
 800b292:	d13d      	bne.n	800b310 <__ieee754_pow+0x188>
 800b294:	4b51      	ldr	r3, [pc, #324]	; (800b3dc <__ieee754_pow+0x254>)
 800b296:	4598      	cmp	r8, r3
 800b298:	d1ea      	bne.n	800b270 <__ieee754_pow+0xe8>
 800b29a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b29e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b2a6:	f000 8459 	beq.w	800bb5c <__ieee754_pow+0x9d4>
 800b2aa:	4b4f      	ldr	r3, [pc, #316]	; (800b3e8 <__ieee754_pow+0x260>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	dd08      	ble.n	800b2c2 <__ieee754_pow+0x13a>
 800b2b0:	f1b9 0f00 	cmp.w	r9, #0
 800b2b4:	f2c0 8456 	blt.w	800bb64 <__ieee754_pow+0x9dc>
 800b2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2bc:	e783      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e7e5      	b.n	800b28e <__ieee754_pow+0x106>
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	f04f 0000 	mov.w	r0, #0
 800b2ca:	f04f 0100 	mov.w	r1, #0
 800b2ce:	f6bf af7a 	bge.w	800b1c6 <__ieee754_pow+0x3e>
 800b2d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2da:	e774      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b2dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b2e0:	d106      	bne.n	800b2f0 <__ieee754_pow+0x168>
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	463b      	mov	r3, r7
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	f7f5 f9ad 	bl	8000648 <__aeabi_dmul>
 800b2ee:	e76a      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b2f0:	4b3e      	ldr	r3, [pc, #248]	; (800b3ec <__ieee754_pow+0x264>)
 800b2f2:	4599      	cmp	r9, r3
 800b2f4:	d10c      	bne.n	800b310 <__ieee754_pow+0x188>
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	db0a      	blt.n	800b310 <__ieee754_pow+0x188>
 800b2fa:	ec47 6b10 	vmov	d0, r6, r7
 800b2fe:	b009      	add	sp, #36	; 0x24
 800b300:	ecbd 8b06 	vpop	{d8-d10}
 800b304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	f7ff bd9c 	b.w	800ae44 <__ieee754_sqrt>
 800b30c:	2300      	movs	r3, #0
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	ec47 6b10 	vmov	d0, r6, r7
 800b314:	f000 fe04 	bl	800bf20 <fabs>
 800b318:	ec51 0b10 	vmov	r0, r1, d0
 800b31c:	f1ba 0f00 	cmp.w	sl, #0
 800b320:	d129      	bne.n	800b376 <__ieee754_pow+0x1ee>
 800b322:	b124      	cbz	r4, 800b32e <__ieee754_pow+0x1a6>
 800b324:	4b2f      	ldr	r3, [pc, #188]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b326:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d123      	bne.n	800b376 <__ieee754_pow+0x1ee>
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	da05      	bge.n	800b340 <__ieee754_pow+0x1b8>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	2000      	movs	r0, #0
 800b33a:	492a      	ldr	r1, [pc, #168]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b33c:	f7f5 faae 	bl	800089c <__aeabi_ddiv>
 800b340:	2d00      	cmp	r5, #0
 800b342:	f6bf af40 	bge.w	800b1c6 <__ieee754_pow+0x3e>
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b34c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b350:	431c      	orrs	r4, r3
 800b352:	d108      	bne.n	800b366 <__ieee754_pow+0x1de>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4610      	mov	r0, r2
 800b35a:	4619      	mov	r1, r3
 800b35c:	f7f4 ffbc 	bl	80002d8 <__aeabi_dsub>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	e78f      	b.n	800b286 <__ieee754_pow+0xfe>
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	f47f af2c 	bne.w	800b1c6 <__ieee754_pow+0x3e>
 800b36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b372:	4619      	mov	r1, r3
 800b374:	e727      	b.n	800b1c6 <__ieee754_pow+0x3e>
 800b376:	0feb      	lsrs	r3, r5, #31
 800b378:	3b01      	subs	r3, #1
 800b37a:	9306      	str	r3, [sp, #24]
 800b37c:	9a06      	ldr	r2, [sp, #24]
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	4313      	orrs	r3, r2
 800b382:	d102      	bne.n	800b38a <__ieee754_pow+0x202>
 800b384:	4632      	mov	r2, r6
 800b386:	463b      	mov	r3, r7
 800b388:	e7e6      	b.n	800b358 <__ieee754_pow+0x1d0>
 800b38a:	4b19      	ldr	r3, [pc, #100]	; (800b3f0 <__ieee754_pow+0x268>)
 800b38c:	4598      	cmp	r8, r3
 800b38e:	f340 80fb 	ble.w	800b588 <__ieee754_pow+0x400>
 800b392:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b396:	4598      	cmp	r8, r3
 800b398:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <__ieee754_pow+0x260>)
 800b39a:	dd0c      	ble.n	800b3b6 <__ieee754_pow+0x22e>
 800b39c:	429c      	cmp	r4, r3
 800b39e:	dc0f      	bgt.n	800b3c0 <__ieee754_pow+0x238>
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	da0f      	bge.n	800b3c6 <__ieee754_pow+0x23e>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	b009      	add	sp, #36	; 0x24
 800b3aa:	ecbd 8b06 	vpop	{d8-d10}
 800b3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b2:	f000 be66 	b.w	800c082 <__math_oflow>
 800b3b6:	429c      	cmp	r4, r3
 800b3b8:	dbf2      	blt.n	800b3a0 <__ieee754_pow+0x218>
 800b3ba:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <__ieee754_pow+0x25c>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	dd19      	ble.n	800b3f4 <__ieee754_pow+0x26c>
 800b3c0:	f1b9 0f00 	cmp.w	r9, #0
 800b3c4:	dcef      	bgt.n	800b3a6 <__ieee754_pow+0x21e>
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	b009      	add	sp, #36	; 0x24
 800b3ca:	ecbd 8b06 	vpop	{d8-d10}
 800b3ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d2:	f000 be4d 	b.w	800c070 <__math_uflow>
 800b3d6:	bf00      	nop
 800b3d8:	fff00000 	.word	0xfff00000
 800b3dc:	7ff00000 	.word	0x7ff00000
 800b3e0:	433fffff 	.word	0x433fffff
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	3fefffff 	.word	0x3fefffff
 800b3ec:	3fe00000 	.word	0x3fe00000
 800b3f0:	41e00000 	.word	0x41e00000
 800b3f4:	4b60      	ldr	r3, [pc, #384]	; (800b578 <__ieee754_pow+0x3f0>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f7f4 ff6e 	bl	80002d8 <__aeabi_dsub>
 800b3fc:	a354      	add	r3, pc, #336	; (adr r3, 800b550 <__ieee754_pow+0x3c8>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	4604      	mov	r4, r0
 800b404:	460d      	mov	r5, r1
 800b406:	f7f5 f91f 	bl	8000648 <__aeabi_dmul>
 800b40a:	a353      	add	r3, pc, #332	; (adr r3, 800b558 <__ieee754_pow+0x3d0>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	4606      	mov	r6, r0
 800b412:	460f      	mov	r7, r1
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 f916 	bl	8000648 <__aeabi_dmul>
 800b41c:	4b57      	ldr	r3, [pc, #348]	; (800b57c <__ieee754_pow+0x3f4>)
 800b41e:	4682      	mov	sl, r0
 800b420:	468b      	mov	fp, r1
 800b422:	2200      	movs	r2, #0
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f7f5 f90e 	bl	8000648 <__aeabi_dmul>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	a14b      	add	r1, pc, #300	; (adr r1, 800b560 <__ieee754_pow+0x3d8>)
 800b432:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b436:	f7f4 ff4f 	bl	80002d8 <__aeabi_dsub>
 800b43a:	4622      	mov	r2, r4
 800b43c:	462b      	mov	r3, r5
 800b43e:	f7f5 f903 	bl	8000648 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	2000      	movs	r0, #0
 800b448:	494d      	ldr	r1, [pc, #308]	; (800b580 <__ieee754_pow+0x3f8>)
 800b44a:	f7f4 ff45 	bl	80002d8 <__aeabi_dsub>
 800b44e:	4622      	mov	r2, r4
 800b450:	4680      	mov	r8, r0
 800b452:	4689      	mov	r9, r1
 800b454:	462b      	mov	r3, r5
 800b456:	4620      	mov	r0, r4
 800b458:	4629      	mov	r1, r5
 800b45a:	f7f5 f8f5 	bl	8000648 <__aeabi_dmul>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	4640      	mov	r0, r8
 800b464:	4649      	mov	r1, r9
 800b466:	f7f5 f8ef 	bl	8000648 <__aeabi_dmul>
 800b46a:	a33f      	add	r3, pc, #252	; (adr r3, 800b568 <__ieee754_pow+0x3e0>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7f5 f8ea 	bl	8000648 <__aeabi_dmul>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4650      	mov	r0, sl
 800b47a:	4659      	mov	r1, fp
 800b47c:	f7f4 ff2c 	bl	80002d8 <__aeabi_dsub>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f4 ff26 	bl	80002dc <__adddf3>
 800b490:	2000      	movs	r0, #0
 800b492:	4632      	mov	r2, r6
 800b494:	463b      	mov	r3, r7
 800b496:	4604      	mov	r4, r0
 800b498:	460d      	mov	r5, r1
 800b49a:	f7f4 ff1d 	bl	80002d8 <__aeabi_dsub>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f4 ff17 	bl	80002d8 <__aeabi_dsub>
 800b4aa:	9b04      	ldr	r3, [sp, #16]
 800b4ac:	9a06      	ldr	r2, [sp, #24]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	468b      	mov	fp, r1
 800b4b6:	f040 81e7 	bne.w	800b888 <__ieee754_pow+0x700>
 800b4ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b570 <__ieee754_pow+0x3e8>
 800b4be:	eeb0 8a47 	vmov.f32	s16, s14
 800b4c2:	eef0 8a67 	vmov.f32	s17, s15
 800b4c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4ca:	2600      	movs	r6, #0
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d4:	f7f4 ff00 	bl	80002d8 <__aeabi_dsub>
 800b4d8:	4622      	mov	r2, r4
 800b4da:	462b      	mov	r3, r5
 800b4dc:	f7f5 f8b4 	bl	8000648 <__aeabi_dmul>
 800b4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	f7f5 f8ac 	bl	8000648 <__aeabi_dmul>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f4 fef0 	bl	80002dc <__adddf3>
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	463b      	mov	r3, r7
 800b500:	4680      	mov	r8, r0
 800b502:	4689      	mov	r9, r1
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f7f5 f89e 	bl	8000648 <__aeabi_dmul>
 800b50c:	460b      	mov	r3, r1
 800b50e:	4604      	mov	r4, r0
 800b510:	460d      	mov	r5, r1
 800b512:	4602      	mov	r2, r0
 800b514:	4649      	mov	r1, r9
 800b516:	4640      	mov	r0, r8
 800b518:	f7f4 fee0 	bl	80002dc <__adddf3>
 800b51c:	4b19      	ldr	r3, [pc, #100]	; (800b584 <__ieee754_pow+0x3fc>)
 800b51e:	4299      	cmp	r1, r3
 800b520:	ec45 4b19 	vmov	d9, r4, r5
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	468b      	mov	fp, r1
 800b52a:	f340 82f0 	ble.w	800bb0e <__ieee754_pow+0x986>
 800b52e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b536:	4303      	orrs	r3, r0
 800b538:	f000 81e4 	beq.w	800b904 <__ieee754_pow+0x77c>
 800b53c:	ec51 0b18 	vmov	r0, r1, d8
 800b540:	2200      	movs	r2, #0
 800b542:	2300      	movs	r3, #0
 800b544:	f7f5 faf2 	bl	8000b2c <__aeabi_dcmplt>
 800b548:	3800      	subs	r0, #0
 800b54a:	bf18      	it	ne
 800b54c:	2001      	movne	r0, #1
 800b54e:	e72b      	b.n	800b3a8 <__ieee754_pow+0x220>
 800b550:	60000000 	.word	0x60000000
 800b554:	3ff71547 	.word	0x3ff71547
 800b558:	f85ddf44 	.word	0xf85ddf44
 800b55c:	3e54ae0b 	.word	0x3e54ae0b
 800b560:	55555555 	.word	0x55555555
 800b564:	3fd55555 	.word	0x3fd55555
 800b568:	652b82fe 	.word	0x652b82fe
 800b56c:	3ff71547 	.word	0x3ff71547
 800b570:	00000000 	.word	0x00000000
 800b574:	bff00000 	.word	0xbff00000
 800b578:	3ff00000 	.word	0x3ff00000
 800b57c:	3fd00000 	.word	0x3fd00000
 800b580:	3fe00000 	.word	0x3fe00000
 800b584:	408fffff 	.word	0x408fffff
 800b588:	4bd5      	ldr	r3, [pc, #852]	; (800b8e0 <__ieee754_pow+0x758>)
 800b58a:	402b      	ands	r3, r5
 800b58c:	2200      	movs	r2, #0
 800b58e:	b92b      	cbnz	r3, 800b59c <__ieee754_pow+0x414>
 800b590:	4bd4      	ldr	r3, [pc, #848]	; (800b8e4 <__ieee754_pow+0x75c>)
 800b592:	f7f5 f859 	bl	8000648 <__aeabi_dmul>
 800b596:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b59a:	460c      	mov	r4, r1
 800b59c:	1523      	asrs	r3, r4, #20
 800b59e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5a2:	4413      	add	r3, r2
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4bd0      	ldr	r3, [pc, #832]	; (800b8e8 <__ieee754_pow+0x760>)
 800b5a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5b6:	dd08      	ble.n	800b5ca <__ieee754_pow+0x442>
 800b5b8:	4bcc      	ldr	r3, [pc, #816]	; (800b8ec <__ieee754_pow+0x764>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	f340 8162 	ble.w	800b884 <__ieee754_pow+0x6fc>
 800b5c0:	9b05      	ldr	r3, [sp, #20]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	9305      	str	r3, [sp, #20]
 800b5c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5ca:	2400      	movs	r4, #0
 800b5cc:	00e3      	lsls	r3, r4, #3
 800b5ce:	9307      	str	r3, [sp, #28]
 800b5d0:	4bc7      	ldr	r3, [pc, #796]	; (800b8f0 <__ieee754_pow+0x768>)
 800b5d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5d6:	ed93 7b00 	vldr	d7, [r3]
 800b5da:	4629      	mov	r1, r5
 800b5dc:	ec53 2b17 	vmov	r2, r3, d7
 800b5e0:	eeb0 9a47 	vmov.f32	s18, s14
 800b5e4:	eef0 9a67 	vmov.f32	s19, s15
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	f7f4 fe75 	bl	80002d8 <__aeabi_dsub>
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	ec51 0b19 	vmov	r0, r1, d9
 800b5fa:	f7f4 fe6f 	bl	80002dc <__adddf3>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	2000      	movs	r0, #0
 800b604:	49bb      	ldr	r1, [pc, #748]	; (800b8f4 <__ieee754_pow+0x76c>)
 800b606:	f7f5 f949 	bl	800089c <__aeabi_ddiv>
 800b60a:	ec41 0b1a 	vmov	d10, r0, r1
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f5 f817 	bl	8000648 <__aeabi_dmul>
 800b61a:	2300      	movs	r3, #0
 800b61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b620:	9302      	str	r3, [sp, #8]
 800b622:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b626:	46ab      	mov	fp, r5
 800b628:	106d      	asrs	r5, r5, #1
 800b62a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b62e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b632:	ec41 0b18 	vmov	d8, r0, r1
 800b636:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b63a:	2200      	movs	r2, #0
 800b63c:	4640      	mov	r0, r8
 800b63e:	4649      	mov	r1, r9
 800b640:	4614      	mov	r4, r2
 800b642:	461d      	mov	r5, r3
 800b644:	f7f5 f800 	bl	8000648 <__aeabi_dmul>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4630      	mov	r0, r6
 800b64e:	4639      	mov	r1, r7
 800b650:	f7f4 fe42 	bl	80002d8 <__aeabi_dsub>
 800b654:	ec53 2b19 	vmov	r2, r3, d9
 800b658:	4606      	mov	r6, r0
 800b65a:	460f      	mov	r7, r1
 800b65c:	4620      	mov	r0, r4
 800b65e:	4629      	mov	r1, r5
 800b660:	f7f4 fe3a 	bl	80002d8 <__aeabi_dsub>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4650      	mov	r0, sl
 800b66a:	4659      	mov	r1, fp
 800b66c:	f7f4 fe34 	bl	80002d8 <__aeabi_dsub>
 800b670:	4642      	mov	r2, r8
 800b672:	464b      	mov	r3, r9
 800b674:	f7f4 ffe8 	bl	8000648 <__aeabi_dmul>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f4 fe2a 	bl	80002d8 <__aeabi_dsub>
 800b684:	ec53 2b1a 	vmov	r2, r3, d10
 800b688:	f7f4 ffde 	bl	8000648 <__aeabi_dmul>
 800b68c:	ec53 2b18 	vmov	r2, r3, d8
 800b690:	ec41 0b19 	vmov	d9, r0, r1
 800b694:	ec51 0b18 	vmov	r0, r1, d8
 800b698:	f7f4 ffd6 	bl	8000648 <__aeabi_dmul>
 800b69c:	a37c      	add	r3, pc, #496	; (adr r3, 800b890 <__ieee754_pow+0x708>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	f7f4 ffcf 	bl	8000648 <__aeabi_dmul>
 800b6aa:	a37b      	add	r3, pc, #492	; (adr r3, 800b898 <__ieee754_pow+0x710>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 fe14 	bl	80002dc <__adddf3>
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	f7f4 ffc6 	bl	8000648 <__aeabi_dmul>
 800b6bc:	a378      	add	r3, pc, #480	; (adr r3, 800b8a0 <__ieee754_pow+0x718>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f7f4 fe0b 	bl	80002dc <__adddf3>
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	f7f4 ffbd 	bl	8000648 <__aeabi_dmul>
 800b6ce:	a376      	add	r3, pc, #472	; (adr r3, 800b8a8 <__ieee754_pow+0x720>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f4 fe02 	bl	80002dc <__adddf3>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	462b      	mov	r3, r5
 800b6dc:	f7f4 ffb4 	bl	8000648 <__aeabi_dmul>
 800b6e0:	a373      	add	r3, pc, #460	; (adr r3, 800b8b0 <__ieee754_pow+0x728>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fdf9 	bl	80002dc <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 ffab 	bl	8000648 <__aeabi_dmul>
 800b6f2:	a371      	add	r3, pc, #452	; (adr r3, 800b8b8 <__ieee754_pow+0x730>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fdf0 	bl	80002dc <__adddf3>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4606      	mov	r6, r0
 800b700:	460f      	mov	r7, r1
 800b702:	462b      	mov	r3, r5
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 ff9e 	bl	8000648 <__aeabi_dmul>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f4 ff98 	bl	8000648 <__aeabi_dmul>
 800b718:	4642      	mov	r2, r8
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	464b      	mov	r3, r9
 800b720:	ec51 0b18 	vmov	r0, r1, d8
 800b724:	f7f4 fdda 	bl	80002dc <__adddf3>
 800b728:	ec53 2b19 	vmov	r2, r3, d9
 800b72c:	f7f4 ff8c 	bl	8000648 <__aeabi_dmul>
 800b730:	4622      	mov	r2, r4
 800b732:	462b      	mov	r3, r5
 800b734:	f7f4 fdd2 	bl	80002dc <__adddf3>
 800b738:	4642      	mov	r2, r8
 800b73a:	4682      	mov	sl, r0
 800b73c:	468b      	mov	fp, r1
 800b73e:	464b      	mov	r3, r9
 800b740:	4640      	mov	r0, r8
 800b742:	4649      	mov	r1, r9
 800b744:	f7f4 ff80 	bl	8000648 <__aeabi_dmul>
 800b748:	4b6b      	ldr	r3, [pc, #428]	; (800b8f8 <__ieee754_pow+0x770>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	f7f4 fdc4 	bl	80002dc <__adddf3>
 800b754:	4652      	mov	r2, sl
 800b756:	465b      	mov	r3, fp
 800b758:	f7f4 fdc0 	bl	80002dc <__adddf3>
 800b75c:	2000      	movs	r0, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4640      	mov	r0, r8
 800b768:	4649      	mov	r1, r9
 800b76a:	f7f4 ff6d 	bl	8000648 <__aeabi_dmul>
 800b76e:	4b62      	ldr	r3, [pc, #392]	; (800b8f8 <__ieee754_pow+0x770>)
 800b770:	4680      	mov	r8, r0
 800b772:	4689      	mov	r9, r1
 800b774:	2200      	movs	r2, #0
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	f7f4 fdad 	bl	80002d8 <__aeabi_dsub>
 800b77e:	4632      	mov	r2, r6
 800b780:	463b      	mov	r3, r7
 800b782:	f7f4 fda9 	bl	80002d8 <__aeabi_dsub>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4650      	mov	r0, sl
 800b78c:	4659      	mov	r1, fp
 800b78e:	f7f4 fda3 	bl	80002d8 <__aeabi_dsub>
 800b792:	ec53 2b18 	vmov	r2, r3, d8
 800b796:	f7f4 ff57 	bl	8000648 <__aeabi_dmul>
 800b79a:	4622      	mov	r2, r4
 800b79c:	4606      	mov	r6, r0
 800b79e:	460f      	mov	r7, r1
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	ec51 0b19 	vmov	r0, r1, d9
 800b7a6:	f7f4 ff4f 	bl	8000648 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 fd93 	bl	80002dc <__adddf3>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4640      	mov	r0, r8
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	f7f4 fd8b 	bl	80002dc <__adddf3>
 800b7c6:	a33e      	add	r3, pc, #248	; (adr r3, 800b8c0 <__ieee754_pow+0x738>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	f7f4 ff39 	bl	8000648 <__aeabi_dmul>
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	ec41 0b18 	vmov	d8, r0, r1
 800b7dc:	464b      	mov	r3, r9
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 fd79 	bl	80002d8 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 fd73 	bl	80002d8 <__aeabi_dsub>
 800b7f2:	a335      	add	r3, pc, #212	; (adr r3, 800b8c8 <__ieee754_pow+0x740>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 ff26 	bl	8000648 <__aeabi_dmul>
 800b7fc:	a334      	add	r3, pc, #208	; (adr r3, 800b8d0 <__ieee754_pow+0x748>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4606      	mov	r6, r0
 800b804:	460f      	mov	r7, r1
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 ff1d 	bl	8000648 <__aeabi_dmul>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4630      	mov	r0, r6
 800b814:	4639      	mov	r1, r7
 800b816:	f7f4 fd61 	bl	80002dc <__adddf3>
 800b81a:	9a07      	ldr	r2, [sp, #28]
 800b81c:	4b37      	ldr	r3, [pc, #220]	; (800b8fc <__ieee754_pow+0x774>)
 800b81e:	4413      	add	r3, r2
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fd5a 	bl	80002dc <__adddf3>
 800b828:	4682      	mov	sl, r0
 800b82a:	9805      	ldr	r0, [sp, #20]
 800b82c:	468b      	mov	fp, r1
 800b82e:	f7f4 fea1 	bl	8000574 <__aeabi_i2d>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	4b32      	ldr	r3, [pc, #200]	; (800b900 <__ieee754_pow+0x778>)
 800b836:	4413      	add	r3, r2
 800b838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b83c:	4606      	mov	r6, r0
 800b83e:	460f      	mov	r7, r1
 800b840:	4652      	mov	r2, sl
 800b842:	465b      	mov	r3, fp
 800b844:	ec51 0b18 	vmov	r0, r1, d8
 800b848:	f7f4 fd48 	bl	80002dc <__adddf3>
 800b84c:	4642      	mov	r2, r8
 800b84e:	464b      	mov	r3, r9
 800b850:	f7f4 fd44 	bl	80002dc <__adddf3>
 800b854:	4632      	mov	r2, r6
 800b856:	463b      	mov	r3, r7
 800b858:	f7f4 fd40 	bl	80002dc <__adddf3>
 800b85c:	2000      	movs	r0, #0
 800b85e:	4632      	mov	r2, r6
 800b860:	463b      	mov	r3, r7
 800b862:	4604      	mov	r4, r0
 800b864:	460d      	mov	r5, r1
 800b866:	f7f4 fd37 	bl	80002d8 <__aeabi_dsub>
 800b86a:	4642      	mov	r2, r8
 800b86c:	464b      	mov	r3, r9
 800b86e:	f7f4 fd33 	bl	80002d8 <__aeabi_dsub>
 800b872:	ec53 2b18 	vmov	r2, r3, d8
 800b876:	f7f4 fd2f 	bl	80002d8 <__aeabi_dsub>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4650      	mov	r0, sl
 800b880:	4659      	mov	r1, fp
 800b882:	e610      	b.n	800b4a6 <__ieee754_pow+0x31e>
 800b884:	2401      	movs	r4, #1
 800b886:	e6a1      	b.n	800b5cc <__ieee754_pow+0x444>
 800b888:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b8d8 <__ieee754_pow+0x750>
 800b88c:	e617      	b.n	800b4be <__ieee754_pow+0x336>
 800b88e:	bf00      	nop
 800b890:	4a454eef 	.word	0x4a454eef
 800b894:	3fca7e28 	.word	0x3fca7e28
 800b898:	93c9db65 	.word	0x93c9db65
 800b89c:	3fcd864a 	.word	0x3fcd864a
 800b8a0:	a91d4101 	.word	0xa91d4101
 800b8a4:	3fd17460 	.word	0x3fd17460
 800b8a8:	518f264d 	.word	0x518f264d
 800b8ac:	3fd55555 	.word	0x3fd55555
 800b8b0:	db6fabff 	.word	0xdb6fabff
 800b8b4:	3fdb6db6 	.word	0x3fdb6db6
 800b8b8:	33333303 	.word	0x33333303
 800b8bc:	3fe33333 	.word	0x3fe33333
 800b8c0:	e0000000 	.word	0xe0000000
 800b8c4:	3feec709 	.word	0x3feec709
 800b8c8:	dc3a03fd 	.word	0xdc3a03fd
 800b8cc:	3feec709 	.word	0x3feec709
 800b8d0:	145b01f5 	.word	0x145b01f5
 800b8d4:	be3e2fe0 	.word	0xbe3e2fe0
 800b8d8:	00000000 	.word	0x00000000
 800b8dc:	3ff00000 	.word	0x3ff00000
 800b8e0:	7ff00000 	.word	0x7ff00000
 800b8e4:	43400000 	.word	0x43400000
 800b8e8:	0003988e 	.word	0x0003988e
 800b8ec:	000bb679 	.word	0x000bb679
 800b8f0:	0800d4c0 	.word	0x0800d4c0
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	40080000 	.word	0x40080000
 800b8fc:	0800d4e0 	.word	0x0800d4e0
 800b900:	0800d4d0 	.word	0x0800d4d0
 800b904:	a3b3      	add	r3, pc, #716	; (adr r3, 800bbd4 <__ieee754_pow+0xa4c>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	4640      	mov	r0, r8
 800b90c:	4649      	mov	r1, r9
 800b90e:	f7f4 fce5 	bl	80002dc <__adddf3>
 800b912:	4622      	mov	r2, r4
 800b914:	ec41 0b1a 	vmov	d10, r0, r1
 800b918:	462b      	mov	r3, r5
 800b91a:	4630      	mov	r0, r6
 800b91c:	4639      	mov	r1, r7
 800b91e:	f7f4 fcdb 	bl	80002d8 <__aeabi_dsub>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	ec51 0b1a 	vmov	r0, r1, d10
 800b92a:	f7f5 f91d 	bl	8000b68 <__aeabi_dcmpgt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	f47f ae04 	bne.w	800b53c <__ieee754_pow+0x3b4>
 800b934:	4aa2      	ldr	r2, [pc, #648]	; (800bbc0 <__ieee754_pow+0xa38>)
 800b936:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b93a:	4293      	cmp	r3, r2
 800b93c:	f340 8107 	ble.w	800bb4e <__ieee754_pow+0x9c6>
 800b940:	151b      	asrs	r3, r3, #20
 800b942:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b946:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b94a:	fa4a fa03 	asr.w	sl, sl, r3
 800b94e:	44da      	add	sl, fp
 800b950:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b954:	489b      	ldr	r0, [pc, #620]	; (800bbc4 <__ieee754_pow+0xa3c>)
 800b956:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b95a:	4108      	asrs	r0, r1
 800b95c:	ea00 030a 	and.w	r3, r0, sl
 800b960:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b964:	f1c1 0114 	rsb	r1, r1, #20
 800b968:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b96c:	fa4a fa01 	asr.w	sl, sl, r1
 800b970:	f1bb 0f00 	cmp.w	fp, #0
 800b974:	f04f 0200 	mov.w	r2, #0
 800b978:	4620      	mov	r0, r4
 800b97a:	4629      	mov	r1, r5
 800b97c:	bfb8      	it	lt
 800b97e:	f1ca 0a00 	rsblt	sl, sl, #0
 800b982:	f7f4 fca9 	bl	80002d8 <__aeabi_dsub>
 800b986:	ec41 0b19 	vmov	d9, r0, r1
 800b98a:	4642      	mov	r2, r8
 800b98c:	464b      	mov	r3, r9
 800b98e:	ec51 0b19 	vmov	r0, r1, d9
 800b992:	f7f4 fca3 	bl	80002dc <__adddf3>
 800b996:	a37a      	add	r3, pc, #488	; (adr r3, 800bb80 <__ieee754_pow+0x9f8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	2000      	movs	r0, #0
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	f7f4 fe51 	bl	8000648 <__aeabi_dmul>
 800b9a6:	ec53 2b19 	vmov	r2, r3, d9
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	460f      	mov	r7, r1
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f4 fc91 	bl	80002d8 <__aeabi_dsub>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f4 fc8b 	bl	80002d8 <__aeabi_dsub>
 800b9c2:	a371      	add	r3, pc, #452	; (adr r3, 800bb88 <__ieee754_pow+0xa00>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f7f4 fe3e 	bl	8000648 <__aeabi_dmul>
 800b9cc:	a370      	add	r3, pc, #448	; (adr r3, 800bb90 <__ieee754_pow+0xa08>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	4689      	mov	r9, r1
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7f4 fe35 	bl	8000648 <__aeabi_dmul>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc79 	bl	80002dc <__adddf3>
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	460d      	mov	r5, r1
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	f7f4 fc71 	bl	80002dc <__adddf3>
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	463b      	mov	r3, r7
 800b9fe:	4680      	mov	r8, r0
 800ba00:	4689      	mov	r9, r1
 800ba02:	f7f4 fc69 	bl	80002d8 <__aeabi_dsub>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 fc63 	bl	80002d8 <__aeabi_dsub>
 800ba12:	4642      	mov	r2, r8
 800ba14:	4606      	mov	r6, r0
 800ba16:	460f      	mov	r7, r1
 800ba18:	464b      	mov	r3, r9
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	f7f4 fe13 	bl	8000648 <__aeabi_dmul>
 800ba22:	a35d      	add	r3, pc, #372	; (adr r3, 800bb98 <__ieee754_pow+0xa10>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	4604      	mov	r4, r0
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	f7f4 fe0c 	bl	8000648 <__aeabi_dmul>
 800ba30:	a35b      	add	r3, pc, #364	; (adr r3, 800bba0 <__ieee754_pow+0xa18>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fc4f 	bl	80002d8 <__aeabi_dsub>
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	f7f4 fe03 	bl	8000648 <__aeabi_dmul>
 800ba42:	a359      	add	r3, pc, #356	; (adr r3, 800bba8 <__ieee754_pow+0xa20>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fc48 	bl	80002dc <__adddf3>
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f7f4 fdfa 	bl	8000648 <__aeabi_dmul>
 800ba54:	a356      	add	r3, pc, #344	; (adr r3, 800bbb0 <__ieee754_pow+0xa28>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fc3d 	bl	80002d8 <__aeabi_dsub>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	f7f4 fdf1 	bl	8000648 <__aeabi_dmul>
 800ba66:	a354      	add	r3, pc, #336	; (adr r3, 800bbb8 <__ieee754_pow+0xa30>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fc36 	bl	80002dc <__adddf3>
 800ba70:	4622      	mov	r2, r4
 800ba72:	462b      	mov	r3, r5
 800ba74:	f7f4 fde8 	bl	8000648 <__aeabi_dmul>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	4649      	mov	r1, r9
 800ba80:	f7f4 fc2a 	bl	80002d8 <__aeabi_dsub>
 800ba84:	4604      	mov	r4, r0
 800ba86:	460d      	mov	r5, r1
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	f7f4 fdda 	bl	8000648 <__aeabi_dmul>
 800ba94:	2200      	movs	r2, #0
 800ba96:	ec41 0b19 	vmov	d9, r0, r1
 800ba9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba9e:	4620      	mov	r0, r4
 800baa0:	4629      	mov	r1, r5
 800baa2:	f7f4 fc19 	bl	80002d8 <__aeabi_dsub>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	ec51 0b19 	vmov	r0, r1, d9
 800baae:	f7f4 fef5 	bl	800089c <__aeabi_ddiv>
 800bab2:	4632      	mov	r2, r6
 800bab4:	4604      	mov	r4, r0
 800bab6:	460d      	mov	r5, r1
 800bab8:	463b      	mov	r3, r7
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f4 fdc3 	bl	8000648 <__aeabi_dmul>
 800bac2:	4632      	mov	r2, r6
 800bac4:	463b      	mov	r3, r7
 800bac6:	f7f4 fc09 	bl	80002dc <__adddf3>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f4 fc01 	bl	80002d8 <__aeabi_dsub>
 800bad6:	4642      	mov	r2, r8
 800bad8:	464b      	mov	r3, r9
 800bada:	f7f4 fbfd 	bl	80002d8 <__aeabi_dsub>
 800bade:	460b      	mov	r3, r1
 800bae0:	4602      	mov	r2, r0
 800bae2:	4939      	ldr	r1, [pc, #228]	; (800bbc8 <__ieee754_pow+0xa40>)
 800bae4:	2000      	movs	r0, #0
 800bae6:	f7f4 fbf7 	bl	80002d8 <__aeabi_dsub>
 800baea:	ec41 0b10 	vmov	d0, r0, r1
 800baee:	ee10 3a90 	vmov	r3, s1
 800baf2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800baf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bafa:	da2b      	bge.n	800bb54 <__ieee754_pow+0x9cc>
 800bafc:	4650      	mov	r0, sl
 800bafe:	f000 fa1b 	bl	800bf38 <scalbn>
 800bb02:	ec51 0b10 	vmov	r0, r1, d0
 800bb06:	ec53 2b18 	vmov	r2, r3, d8
 800bb0a:	f7ff bbee 	b.w	800b2ea <__ieee754_pow+0x162>
 800bb0e:	4b2f      	ldr	r3, [pc, #188]	; (800bbcc <__ieee754_pow+0xa44>)
 800bb10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb14:	429e      	cmp	r6, r3
 800bb16:	f77f af0d 	ble.w	800b934 <__ieee754_pow+0x7ac>
 800bb1a:	4b2d      	ldr	r3, [pc, #180]	; (800bbd0 <__ieee754_pow+0xa48>)
 800bb1c:	440b      	add	r3, r1
 800bb1e:	4303      	orrs	r3, r0
 800bb20:	d009      	beq.n	800bb36 <__ieee754_pow+0x9ae>
 800bb22:	ec51 0b18 	vmov	r0, r1, d8
 800bb26:	2200      	movs	r2, #0
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f7f4 ffff 	bl	8000b2c <__aeabi_dcmplt>
 800bb2e:	3800      	subs	r0, #0
 800bb30:	bf18      	it	ne
 800bb32:	2001      	movne	r0, #1
 800bb34:	e448      	b.n	800b3c8 <__ieee754_pow+0x240>
 800bb36:	4622      	mov	r2, r4
 800bb38:	462b      	mov	r3, r5
 800bb3a:	f7f4 fbcd 	bl	80002d8 <__aeabi_dsub>
 800bb3e:	4642      	mov	r2, r8
 800bb40:	464b      	mov	r3, r9
 800bb42:	f7f5 f807 	bl	8000b54 <__aeabi_dcmpge>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f43f aef4 	beq.w	800b934 <__ieee754_pow+0x7ac>
 800bb4c:	e7e9      	b.n	800bb22 <__ieee754_pow+0x99a>
 800bb4e:	f04f 0a00 	mov.w	sl, #0
 800bb52:	e71a      	b.n	800b98a <__ieee754_pow+0x802>
 800bb54:	ec51 0b10 	vmov	r0, r1, d0
 800bb58:	4619      	mov	r1, r3
 800bb5a:	e7d4      	b.n	800bb06 <__ieee754_pow+0x97e>
 800bb5c:	491a      	ldr	r1, [pc, #104]	; (800bbc8 <__ieee754_pow+0xa40>)
 800bb5e:	2000      	movs	r0, #0
 800bb60:	f7ff bb31 	b.w	800b1c6 <__ieee754_pow+0x3e>
 800bb64:	2000      	movs	r0, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	f7ff bb2d 	b.w	800b1c6 <__ieee754_pow+0x3e>
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	4639      	mov	r1, r7
 800bb70:	f7ff bb29 	b.w	800b1c6 <__ieee754_pow+0x3e>
 800bb74:	9204      	str	r2, [sp, #16]
 800bb76:	f7ff bb7b 	b.w	800b270 <__ieee754_pow+0xe8>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f7ff bb65 	b.w	800b24a <__ieee754_pow+0xc2>
 800bb80:	00000000 	.word	0x00000000
 800bb84:	3fe62e43 	.word	0x3fe62e43
 800bb88:	fefa39ef 	.word	0xfefa39ef
 800bb8c:	3fe62e42 	.word	0x3fe62e42
 800bb90:	0ca86c39 	.word	0x0ca86c39
 800bb94:	be205c61 	.word	0xbe205c61
 800bb98:	72bea4d0 	.word	0x72bea4d0
 800bb9c:	3e663769 	.word	0x3e663769
 800bba0:	c5d26bf1 	.word	0xc5d26bf1
 800bba4:	3ebbbd41 	.word	0x3ebbbd41
 800bba8:	af25de2c 	.word	0xaf25de2c
 800bbac:	3f11566a 	.word	0x3f11566a
 800bbb0:	16bebd93 	.word	0x16bebd93
 800bbb4:	3f66c16c 	.word	0x3f66c16c
 800bbb8:	5555553e 	.word	0x5555553e
 800bbbc:	3fc55555 	.word	0x3fc55555
 800bbc0:	3fe00000 	.word	0x3fe00000
 800bbc4:	fff00000 	.word	0xfff00000
 800bbc8:	3ff00000 	.word	0x3ff00000
 800bbcc:	4090cbff 	.word	0x4090cbff
 800bbd0:	3f6f3400 	.word	0x3f6f3400
 800bbd4:	652b82fe 	.word	0x652b82fe
 800bbd8:	3c971547 	.word	0x3c971547
 800bbdc:	00000000 	.word	0x00000000

0800bbe0 <atan>:
 800bbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	ec55 4b10 	vmov	r4, r5, d0
 800bbe8:	4bc3      	ldr	r3, [pc, #780]	; (800bef8 <atan+0x318>)
 800bbea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbee:	429e      	cmp	r6, r3
 800bbf0:	46ab      	mov	fp, r5
 800bbf2:	dd18      	ble.n	800bc26 <atan+0x46>
 800bbf4:	4bc1      	ldr	r3, [pc, #772]	; (800befc <atan+0x31c>)
 800bbf6:	429e      	cmp	r6, r3
 800bbf8:	dc01      	bgt.n	800bbfe <atan+0x1e>
 800bbfa:	d109      	bne.n	800bc10 <atan+0x30>
 800bbfc:	b144      	cbz	r4, 800bc10 <atan+0x30>
 800bbfe:	4622      	mov	r2, r4
 800bc00:	462b      	mov	r3, r5
 800bc02:	4620      	mov	r0, r4
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7f4 fb69 	bl	80002dc <__adddf3>
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	e006      	b.n	800bc1e <atan+0x3e>
 800bc10:	f1bb 0f00 	cmp.w	fp, #0
 800bc14:	f300 8131 	bgt.w	800be7a <atan+0x29a>
 800bc18:	a59b      	add	r5, pc, #620	; (adr r5, 800be88 <atan+0x2a8>)
 800bc1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc1e:	ec45 4b10 	vmov	d0, r4, r5
 800bc22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc26:	4bb6      	ldr	r3, [pc, #728]	; (800bf00 <atan+0x320>)
 800bc28:	429e      	cmp	r6, r3
 800bc2a:	dc14      	bgt.n	800bc56 <atan+0x76>
 800bc2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc30:	429e      	cmp	r6, r3
 800bc32:	dc0d      	bgt.n	800bc50 <atan+0x70>
 800bc34:	a396      	add	r3, pc, #600	; (adr r3, 800be90 <atan+0x2b0>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	ee10 0a10 	vmov	r0, s0
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fb4c 	bl	80002dc <__adddf3>
 800bc44:	4baf      	ldr	r3, [pc, #700]	; (800bf04 <atan+0x324>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	f7f4 ff8e 	bl	8000b68 <__aeabi_dcmpgt>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d1e6      	bne.n	800bc1e <atan+0x3e>
 800bc50:	f04f 3aff 	mov.w	sl, #4294967295
 800bc54:	e02b      	b.n	800bcae <atan+0xce>
 800bc56:	f000 f963 	bl	800bf20 <fabs>
 800bc5a:	4bab      	ldr	r3, [pc, #684]	; (800bf08 <atan+0x328>)
 800bc5c:	429e      	cmp	r6, r3
 800bc5e:	ec55 4b10 	vmov	r4, r5, d0
 800bc62:	f300 80bf 	bgt.w	800bde4 <atan+0x204>
 800bc66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc6a:	429e      	cmp	r6, r3
 800bc6c:	f300 80a0 	bgt.w	800bdb0 <atan+0x1d0>
 800bc70:	ee10 2a10 	vmov	r2, s0
 800bc74:	ee10 0a10 	vmov	r0, s0
 800bc78:	462b      	mov	r3, r5
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7f4 fb2e 	bl	80002dc <__adddf3>
 800bc80:	4ba0      	ldr	r3, [pc, #640]	; (800bf04 <atan+0x324>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	f7f4 fb28 	bl	80002d8 <__aeabi_dsub>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f4 fb21 	bl	80002dc <__adddf3>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4630      	mov	r0, r6
 800bca0:	4639      	mov	r1, r7
 800bca2:	f7f4 fdfb 	bl	800089c <__aeabi_ddiv>
 800bca6:	f04f 0a00 	mov.w	sl, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	460d      	mov	r5, r1
 800bcae:	4622      	mov	r2, r4
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	f7f4 fcc7 	bl	8000648 <__aeabi_dmul>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	f7f4 fcc1 	bl	8000648 <__aeabi_dmul>
 800bcc6:	a374      	add	r3, pc, #464	; (adr r3, 800be98 <atan+0x2b8>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	f7f4 fcba 	bl	8000648 <__aeabi_dmul>
 800bcd4:	a372      	add	r3, pc, #456	; (adr r3, 800bea0 <atan+0x2c0>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 faff 	bl	80002dc <__adddf3>
 800bcde:	4632      	mov	r2, r6
 800bce0:	463b      	mov	r3, r7
 800bce2:	f7f4 fcb1 	bl	8000648 <__aeabi_dmul>
 800bce6:	a370      	add	r3, pc, #448	; (adr r3, 800bea8 <atan+0x2c8>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 faf6 	bl	80002dc <__adddf3>
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 fca8 	bl	8000648 <__aeabi_dmul>
 800bcf8:	a36d      	add	r3, pc, #436	; (adr r3, 800beb0 <atan+0x2d0>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 faed 	bl	80002dc <__adddf3>
 800bd02:	4632      	mov	r2, r6
 800bd04:	463b      	mov	r3, r7
 800bd06:	f7f4 fc9f 	bl	8000648 <__aeabi_dmul>
 800bd0a:	a36b      	add	r3, pc, #428	; (adr r3, 800beb8 <atan+0x2d8>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fae4 	bl	80002dc <__adddf3>
 800bd14:	4632      	mov	r2, r6
 800bd16:	463b      	mov	r3, r7
 800bd18:	f7f4 fc96 	bl	8000648 <__aeabi_dmul>
 800bd1c:	a368      	add	r3, pc, #416	; (adr r3, 800bec0 <atan+0x2e0>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fadb 	bl	80002dc <__adddf3>
 800bd26:	4642      	mov	r2, r8
 800bd28:	464b      	mov	r3, r9
 800bd2a:	f7f4 fc8d 	bl	8000648 <__aeabi_dmul>
 800bd2e:	a366      	add	r3, pc, #408	; (adr r3, 800bec8 <atan+0x2e8>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	4680      	mov	r8, r0
 800bd36:	4689      	mov	r9, r1
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f7f4 fc84 	bl	8000648 <__aeabi_dmul>
 800bd40:	a363      	add	r3, pc, #396	; (adr r3, 800bed0 <atan+0x2f0>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f7f4 fac7 	bl	80002d8 <__aeabi_dsub>
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	463b      	mov	r3, r7
 800bd4e:	f7f4 fc7b 	bl	8000648 <__aeabi_dmul>
 800bd52:	a361      	add	r3, pc, #388	; (adr r3, 800bed8 <atan+0x2f8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fabe 	bl	80002d8 <__aeabi_dsub>
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	463b      	mov	r3, r7
 800bd60:	f7f4 fc72 	bl	8000648 <__aeabi_dmul>
 800bd64:	a35e      	add	r3, pc, #376	; (adr r3, 800bee0 <atan+0x300>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f7f4 fab5 	bl	80002d8 <__aeabi_dsub>
 800bd6e:	4632      	mov	r2, r6
 800bd70:	463b      	mov	r3, r7
 800bd72:	f7f4 fc69 	bl	8000648 <__aeabi_dmul>
 800bd76:	a35c      	add	r3, pc, #368	; (adr r3, 800bee8 <atan+0x308>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 faac 	bl	80002d8 <__aeabi_dsub>
 800bd80:	4632      	mov	r2, r6
 800bd82:	463b      	mov	r3, r7
 800bd84:	f7f4 fc60 	bl	8000648 <__aeabi_dmul>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4640      	mov	r0, r8
 800bd8e:	4649      	mov	r1, r9
 800bd90:	f7f4 faa4 	bl	80002dc <__adddf3>
 800bd94:	4622      	mov	r2, r4
 800bd96:	462b      	mov	r3, r5
 800bd98:	f7f4 fc56 	bl	8000648 <__aeabi_dmul>
 800bd9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	d14b      	bne.n	800be3e <atan+0x25e>
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fa95 	bl	80002d8 <__aeabi_dsub>
 800bdae:	e72c      	b.n	800bc0a <atan+0x2a>
 800bdb0:	ee10 0a10 	vmov	r0, s0
 800bdb4:	4b53      	ldr	r3, [pc, #332]	; (800bf04 <atan+0x324>)
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	4629      	mov	r1, r5
 800bdba:	f7f4 fa8d 	bl	80002d8 <__aeabi_dsub>
 800bdbe:	4b51      	ldr	r3, [pc, #324]	; (800bf04 <atan+0x324>)
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f7f4 fa87 	bl	80002dc <__adddf3>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 fd61 	bl	800089c <__aeabi_ddiv>
 800bdda:	f04f 0a01 	mov.w	sl, #1
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	e764      	b.n	800bcae <atan+0xce>
 800bde4:	4b49      	ldr	r3, [pc, #292]	; (800bf0c <atan+0x32c>)
 800bde6:	429e      	cmp	r6, r3
 800bde8:	da1d      	bge.n	800be26 <atan+0x246>
 800bdea:	ee10 0a10 	vmov	r0, s0
 800bdee:	4b48      	ldr	r3, [pc, #288]	; (800bf10 <atan+0x330>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fa70 	bl	80002d8 <__aeabi_dsub>
 800bdf8:	4b45      	ldr	r3, [pc, #276]	; (800bf10 <atan+0x330>)
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	2200      	movs	r2, #0
 800be00:	4620      	mov	r0, r4
 800be02:	4629      	mov	r1, r5
 800be04:	f7f4 fc20 	bl	8000648 <__aeabi_dmul>
 800be08:	4b3e      	ldr	r3, [pc, #248]	; (800bf04 <atan+0x324>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	f7f4 fa66 	bl	80002dc <__adddf3>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4630      	mov	r0, r6
 800be16:	4639      	mov	r1, r7
 800be18:	f7f4 fd40 	bl	800089c <__aeabi_ddiv>
 800be1c:	f04f 0a02 	mov.w	sl, #2
 800be20:	4604      	mov	r4, r0
 800be22:	460d      	mov	r5, r1
 800be24:	e743      	b.n	800bcae <atan+0xce>
 800be26:	462b      	mov	r3, r5
 800be28:	ee10 2a10 	vmov	r2, s0
 800be2c:	4939      	ldr	r1, [pc, #228]	; (800bf14 <atan+0x334>)
 800be2e:	2000      	movs	r0, #0
 800be30:	f7f4 fd34 	bl	800089c <__aeabi_ddiv>
 800be34:	f04f 0a03 	mov.w	sl, #3
 800be38:	4604      	mov	r4, r0
 800be3a:	460d      	mov	r5, r1
 800be3c:	e737      	b.n	800bcae <atan+0xce>
 800be3e:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <atan+0x338>)
 800be40:	4e36      	ldr	r6, [pc, #216]	; (800bf1c <atan+0x33c>)
 800be42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fa45 	bl	80002d8 <__aeabi_dsub>
 800be4e:	4622      	mov	r2, r4
 800be50:	462b      	mov	r3, r5
 800be52:	f7f4 fa41 	bl	80002d8 <__aeabi_dsub>
 800be56:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be62:	f7f4 fa39 	bl	80002d8 <__aeabi_dsub>
 800be66:	f1bb 0f00 	cmp.w	fp, #0
 800be6a:	4604      	mov	r4, r0
 800be6c:	460d      	mov	r5, r1
 800be6e:	f6bf aed6 	bge.w	800bc1e <atan+0x3e>
 800be72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be76:	461d      	mov	r5, r3
 800be78:	e6d1      	b.n	800bc1e <atan+0x3e>
 800be7a:	a51d      	add	r5, pc, #116	; (adr r5, 800bef0 <atan+0x310>)
 800be7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be80:	e6cd      	b.n	800bc1e <atan+0x3e>
 800be82:	bf00      	nop
 800be84:	f3af 8000 	nop.w
 800be88:	54442d18 	.word	0x54442d18
 800be8c:	bff921fb 	.word	0xbff921fb
 800be90:	8800759c 	.word	0x8800759c
 800be94:	7e37e43c 	.word	0x7e37e43c
 800be98:	e322da11 	.word	0xe322da11
 800be9c:	3f90ad3a 	.word	0x3f90ad3a
 800bea0:	24760deb 	.word	0x24760deb
 800bea4:	3fa97b4b 	.word	0x3fa97b4b
 800bea8:	a0d03d51 	.word	0xa0d03d51
 800beac:	3fb10d66 	.word	0x3fb10d66
 800beb0:	c54c206e 	.word	0xc54c206e
 800beb4:	3fb745cd 	.word	0x3fb745cd
 800beb8:	920083ff 	.word	0x920083ff
 800bebc:	3fc24924 	.word	0x3fc24924
 800bec0:	5555550d 	.word	0x5555550d
 800bec4:	3fd55555 	.word	0x3fd55555
 800bec8:	2c6a6c2f 	.word	0x2c6a6c2f
 800becc:	bfa2b444 	.word	0xbfa2b444
 800bed0:	52defd9a 	.word	0x52defd9a
 800bed4:	3fadde2d 	.word	0x3fadde2d
 800bed8:	af749a6d 	.word	0xaf749a6d
 800bedc:	3fb3b0f2 	.word	0x3fb3b0f2
 800bee0:	fe231671 	.word	0xfe231671
 800bee4:	3fbc71c6 	.word	0x3fbc71c6
 800bee8:	9998ebc4 	.word	0x9998ebc4
 800beec:	3fc99999 	.word	0x3fc99999
 800bef0:	54442d18 	.word	0x54442d18
 800bef4:	3ff921fb 	.word	0x3ff921fb
 800bef8:	440fffff 	.word	0x440fffff
 800befc:	7ff00000 	.word	0x7ff00000
 800bf00:	3fdbffff 	.word	0x3fdbffff
 800bf04:	3ff00000 	.word	0x3ff00000
 800bf08:	3ff2ffff 	.word	0x3ff2ffff
 800bf0c:	40038000 	.word	0x40038000
 800bf10:	3ff80000 	.word	0x3ff80000
 800bf14:	bff00000 	.word	0xbff00000
 800bf18:	0800d510 	.word	0x0800d510
 800bf1c:	0800d4f0 	.word	0x0800d4f0

0800bf20 <fabs>:
 800bf20:	ec51 0b10 	vmov	r0, r1, d0
 800bf24:	ee10 2a10 	vmov	r2, s0
 800bf28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf2c:	ec43 2b10 	vmov	d0, r2, r3
 800bf30:	4770      	bx	lr
 800bf32:	0000      	movs	r0, r0
 800bf34:	0000      	movs	r0, r0
	...

0800bf38 <scalbn>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	ec55 4b10 	vmov	r4, r5, d0
 800bf3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bf42:	4606      	mov	r6, r0
 800bf44:	462b      	mov	r3, r5
 800bf46:	b999      	cbnz	r1, 800bf70 <scalbn+0x38>
 800bf48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf4c:	4323      	orrs	r3, r4
 800bf4e:	d03f      	beq.n	800bfd0 <scalbn+0x98>
 800bf50:	4b35      	ldr	r3, [pc, #212]	; (800c028 <scalbn+0xf0>)
 800bf52:	4629      	mov	r1, r5
 800bf54:	ee10 0a10 	vmov	r0, s0
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f7f4 fb75 	bl	8000648 <__aeabi_dmul>
 800bf5e:	4b33      	ldr	r3, [pc, #204]	; (800c02c <scalbn+0xf4>)
 800bf60:	429e      	cmp	r6, r3
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	da10      	bge.n	800bf8a <scalbn+0x52>
 800bf68:	a327      	add	r3, pc, #156	; (adr r3, 800c008 <scalbn+0xd0>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	e01f      	b.n	800bfb0 <scalbn+0x78>
 800bf70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bf74:	4291      	cmp	r1, r2
 800bf76:	d10c      	bne.n	800bf92 <scalbn+0x5a>
 800bf78:	ee10 2a10 	vmov	r2, s0
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f7f4 f9ac 	bl	80002dc <__adddf3>
 800bf84:	4604      	mov	r4, r0
 800bf86:	460d      	mov	r5, r1
 800bf88:	e022      	b.n	800bfd0 <scalbn+0x98>
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bf90:	3936      	subs	r1, #54	; 0x36
 800bf92:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bf96:	4296      	cmp	r6, r2
 800bf98:	dd0d      	ble.n	800bfb6 <scalbn+0x7e>
 800bf9a:	2d00      	cmp	r5, #0
 800bf9c:	a11c      	add	r1, pc, #112	; (adr r1, 800c010 <scalbn+0xd8>)
 800bf9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa2:	da02      	bge.n	800bfaa <scalbn+0x72>
 800bfa4:	a11c      	add	r1, pc, #112	; (adr r1, 800c018 <scalbn+0xe0>)
 800bfa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfaa:	a319      	add	r3, pc, #100	; (adr r3, 800c010 <scalbn+0xd8>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 fb4a 	bl	8000648 <__aeabi_dmul>
 800bfb4:	e7e6      	b.n	800bf84 <scalbn+0x4c>
 800bfb6:	1872      	adds	r2, r6, r1
 800bfb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bfbc:	428a      	cmp	r2, r1
 800bfbe:	dcec      	bgt.n	800bf9a <scalbn+0x62>
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	dd08      	ble.n	800bfd6 <scalbn+0x9e>
 800bfc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bfd0:	ec45 4b10 	vmov	d0, r4, r5
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
 800bfd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bfda:	da08      	bge.n	800bfee <scalbn+0xb6>
 800bfdc:	2d00      	cmp	r5, #0
 800bfde:	a10a      	add	r1, pc, #40	; (adr r1, 800c008 <scalbn+0xd0>)
 800bfe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfe4:	dac0      	bge.n	800bf68 <scalbn+0x30>
 800bfe6:	a10e      	add	r1, pc, #56	; (adr r1, 800c020 <scalbn+0xe8>)
 800bfe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfec:	e7bc      	b.n	800bf68 <scalbn+0x30>
 800bfee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bff2:	3236      	adds	r2, #54	; 0x36
 800bff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bff8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bffc:	4620      	mov	r0, r4
 800bffe:	4b0c      	ldr	r3, [pc, #48]	; (800c030 <scalbn+0xf8>)
 800c000:	2200      	movs	r2, #0
 800c002:	e7d5      	b.n	800bfb0 <scalbn+0x78>
 800c004:	f3af 8000 	nop.w
 800c008:	c2f8f359 	.word	0xc2f8f359
 800c00c:	01a56e1f 	.word	0x01a56e1f
 800c010:	8800759c 	.word	0x8800759c
 800c014:	7e37e43c 	.word	0x7e37e43c
 800c018:	8800759c 	.word	0x8800759c
 800c01c:	fe37e43c 	.word	0xfe37e43c
 800c020:	c2f8f359 	.word	0xc2f8f359
 800c024:	81a56e1f 	.word	0x81a56e1f
 800c028:	43500000 	.word	0x43500000
 800c02c:	ffff3cb0 	.word	0xffff3cb0
 800c030:	3c900000 	.word	0x3c900000

0800c034 <with_errno>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	460d      	mov	r5, r1
 800c03a:	4616      	mov	r6, r2
 800c03c:	f7fb face 	bl	80075dc <__errno>
 800c040:	4629      	mov	r1, r5
 800c042:	6006      	str	r6, [r0, #0]
 800c044:	4620      	mov	r0, r4
 800c046:	bd70      	pop	{r4, r5, r6, pc}

0800c048 <xflow>:
 800c048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c04a:	4614      	mov	r4, r2
 800c04c:	461d      	mov	r5, r3
 800c04e:	b108      	cbz	r0, 800c054 <xflow+0xc>
 800c050:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c054:	e9cd 2300 	strd	r2, r3, [sp]
 800c058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 faf2 	bl	8000648 <__aeabi_dmul>
 800c064:	2222      	movs	r2, #34	; 0x22
 800c066:	b003      	add	sp, #12
 800c068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c06c:	f7ff bfe2 	b.w	800c034 <with_errno>

0800c070 <__math_uflow>:
 800c070:	b508      	push	{r3, lr}
 800c072:	2200      	movs	r2, #0
 800c074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c078:	f7ff ffe6 	bl	800c048 <xflow>
 800c07c:	ec41 0b10 	vmov	d0, r0, r1
 800c080:	bd08      	pop	{r3, pc}

0800c082 <__math_oflow>:
 800c082:	b508      	push	{r3, lr}
 800c084:	2200      	movs	r2, #0
 800c086:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c08a:	f7ff ffdd 	bl	800c048 <xflow>
 800c08e:	ec41 0b10 	vmov	d0, r0, r1
 800c092:	bd08      	pop	{r3, pc}

0800c094 <_init>:
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c096:	bf00      	nop
 800c098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c09a:	bc08      	pop	{r3}
 800c09c:	469e      	mov	lr, r3
 800c09e:	4770      	bx	lr

0800c0a0 <_fini>:
 800c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a2:	bf00      	nop
 800c0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a6:	bc08      	pop	{r3}
 800c0a8:	469e      	mov	lr, r3
 800c0aa:	4770      	bx	lr
