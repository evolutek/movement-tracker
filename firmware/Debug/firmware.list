
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bef4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001480  0800c0d8  0800c0d8  0001c0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d558  0800d558  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d558  0800d558  0001d558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d560  0800d560  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d560  0800d560  0001d560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d564  0800d564  0001d564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d568  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  200001f0  0800d758  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  0800d758  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f69  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347e  00000000  00000000  000391cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  0003c650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fff  00000000  00000000  0003db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002197d  00000000  00000000  0003eb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199d1  00000000  00000000  0006048c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce2e5  00000000  00000000  00079e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007134  00000000  00000000  00148144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c0bc 	.word	0x0800c0bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c0bc 	.word	0x0800c0bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <delay_us>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

__STATIC_INLINE void delay_us(uint32_t us)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <delay_us+0x3c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <delay_us+0x40>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <delay_us+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8001062:	bf00      	nop
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <delay_us+0x44>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8fa      	bhi.n	8001064 <delay_us+0x24>
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000008 	.word	0x20000008
 8001080:	431bde83 	.word	0x431bde83
 8001084:	e0001000 	.word	0xe0001000

08001088 <_enable_slave>:

static bool _debug = 0;

/*============================ Private ============================*/

static inline void _enable_slave(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f002 f95f 	bl	8003358 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <_disable_slave>:

static inline void _disable_slave(){
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ADNS_GPIO_Port, CS_ADNS_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f002 f954 	bl	8003358 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_read_register>:

static uint8_t _read_register(uint8_t ADNS_REG_addr){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  _enable_slave();
 80010be:	f7ff ffe3 	bl	8001088 <_enable_slave>

  ADNS_REG_addr &= 0x7f;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);// send adress of the register, with MSBit = 0 to indicate it's a read
 80010cc:	1df9      	adds	r1, r7, #7
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <_read_register+0x58>)
 80010d4:	f003 fc5d 	bl	8004992 <HAL_SPI_Transmit>

  delay_us(100); // tSRAD
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f7ff ffb1 	bl	8001040 <delay_us>

  uint8_t data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&hspi1, &data, 1, 100);// read data
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <_read_register+0x58>)
 80010ec:	f003 fdbf 	bl	8004c6e <HAL_SPI_Receive>

  delay_us(1); // tSCLK-_ncs for read operation is 120ns
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ffa5 	bl	8001040 <delay_us>
  _disable_slave();
 80010f6:	f7ff ffd2 	bl	800109e <_disable_slave>
  delay_us(19); //  tSRW/tSRR (=20us) minus tSCLK-_ncs
 80010fa:	2013      	movs	r0, #19
 80010fc:	f7ff ffa0 	bl	8001040 <delay_us>

  return data;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200003e4 	.word	0x200003e4

08001110 <_write_register>:

static void _write_register(uint8_t ADNS_REG_addr, uint8_t data){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	_enable_slave();
 8001120:	f7ff ffb2 	bl	8001088 <_enable_slave>

	ADNS_REG_addr |= 0x80;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112a:	b2db      	uxtb	r3, r3
 800112c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &ADNS_REG_addr, 1, 100);//send adress of the register, with MSBit = 1 to indicate it's a write
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	2364      	movs	r3, #100	; 0x64
 8001132:	2201      	movs	r2, #1
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <_write_register+0x50>)
 8001136:	f003 fc2c 	bl	8004992 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &data, 1, 100);//send data
 800113a:	1db9      	adds	r1, r7, #6
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <_write_register+0x50>)
 8001142:	f003 fc26 	bl	8004992 <HAL_SPI_Transmit>

    delay_us(20); // tSCLK-_ncs for write operation
 8001146:	2014      	movs	r0, #20
 8001148:	f7ff ff7a 	bl	8001040 <delay_us>
    _disable_slave();
 800114c:	f7ff ffa7 	bl	800109e <_disable_slave>
    delay_us(100); // tSWW/tSWR (=120us) minus tSCLK-_ncs. Could be shortened, but is looks like a safe lower bound
 8001150:	2064      	movs	r0, #100	; 0x64
 8001152:	f7ff ff75 	bl	8001040 <delay_us>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200003e4 	.word	0x200003e4

08001164 <_upload_firmware>:

static void _upload_firmware(){// send the firmware to the chip, cf p.18 of the datasheet
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  if (_debug) printf("Uploading optical sensors's firmware... \n");
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <_upload_firmware+0x8c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <_upload_firmware+0x14>
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <_upload_firmware+0x90>)
 8001174:	f006 f8f6 	bl	8007364 <puts>

  _write_register(ADNS_REG_Configuration_IV, 0x02); // set the configuration_IV register in 3k firmware mode   bit 1 = 1 for 3k mode, other bits are reserved
 8001178:	2102      	movs	r1, #2
 800117a:	2039      	movs	r0, #57	; 0x39
 800117c:	f7ff ffc8 	bl	8001110 <_write_register>

  _write_register(ADNS_REG_SROM_Enable, 0x1d);// write 0x1d in SROM_enable reg for initializing
 8001180:	211d      	movs	r1, #29
 8001182:	2013      	movs	r0, #19
 8001184:	f7ff ffc4 	bl	8001110 <_write_register>

  HAL_Delay(10);// wait for more than one frame period assuming that the frame rate is as low as 100fps... even if it should never be that low
 8001188:	200a      	movs	r0, #10
 800118a:	f001 fc89 	bl	8002aa0 <HAL_Delay>

  _write_register(ADNS_REG_SROM_Enable, 0x18); // write 0x18 to SROM_enable to start SROM download
 800118e:	2118      	movs	r1, #24
 8001190:	2013      	movs	r0, #19
 8001192:	f7ff ffbd 	bl	8001110 <_write_register>

  // write the SROM file (=firmware data)
  _enable_slave();
 8001196:	f7ff ff77 	bl	8001088 <_enable_slave>

  uint8_t buffer = ADNS_REG_SROM_Load_Burst | 0x80;
 800119a:	23e2      	movs	r3, #226	; 0xe2
 800119c:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 800119e:	1cf9      	adds	r1, r7, #3
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2201      	movs	r2, #1
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <_upload_firmware+0x94>)
 80011a6:	f003 fbf4 	bl	8004992 <HAL_SPI_Transmit>

  delay_us(15);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f7ff ff48 	bl	8001040 <delay_us>

  // send all uint8_ts of the firmware (on ne peut pas utiliser la fonction transmit directement, car il faut respecter le délais de 15us)
  uint8_t c;
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	e010      	b.n	80011d8 <_upload_firmware+0x74>
    c = _adns_firmware_data[i];
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <_upload_firmware+0x98>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	70bb      	strb	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, &c, 1, 100);
 80011c0:	1cb9      	adds	r1, r7, #2
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	2201      	movs	r2, #1
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <_upload_firmware+0x94>)
 80011c8:	f003 fbe3 	bl	8004992 <HAL_SPI_Transmit>
    delay_us(15);
 80011cc:	200f      	movs	r0, #15
 80011ce:	f7ff ff37 	bl	8001040 <delay_us>
  for(int i = 0; i < ADNS_FIRMWARE_LENGHT; i++){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f640 32fd 	movw	r2, #3069	; 0xbfd
 80011de:	4293      	cmp	r3, r2
 80011e0:	dde9      	ble.n	80011b6 <_upload_firmware+0x52>
  }

  _disable_slave();
 80011e2:	f7ff ff5c 	bl	800109e <_disable_slave>
  }
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000020c 	.word	0x2000020c
 80011f4:	0800c0d8 	.word	0x0800c0d8
 80011f8:	200003e4 	.word	0x200003e4
 80011fc:	0800c450 	.word	0x0800c450

08001200 <_display_registers>:

static void _display_registers(void){ // display basic information of the module (primarely to check communication)
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08f      	sub	sp, #60	; 0x3c
 8001204:	af00      	add	r7, sp, #0
	int oreg[7] = {0x00,0x3F,0x2A,0x02};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	233f      	movs	r3, #63	; 0x3f
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	232a      	movs	r3, #42	; 0x2a
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	char* oregname[] = {"Product_ID","Inverse_Product_ID","SROM_Version","Motion"};
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <_display_registers+0xc0>)
 8001228:	f107 0408 	add.w	r4, r7, #8
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t regres;

	_enable_slave();
 8001232:	f7ff ff29 	bl	8001088 <_enable_slave>

	printf("ADNS9800 Registers : \n");
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <_display_registers+0xc4>)
 8001238:	f006 f894 	bl	8007364 <puts>
	for(int i=0; i<4; i++){
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
 8001240:	e034      	b.n	80012ac <_display_registers+0xac>
		uint8_t buffer = oreg[i];
 8001242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	443b      	add	r3, r7
 800124a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	71bb      	strb	r3, [r7, #6]
		HAL_SPI_Transmit(&hspi1, &buffer, 1, 100); // write burst destination adress
 8001252:	1db9      	adds	r1, r7, #6
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2201      	movs	r2, #1
 8001258:	481b      	ldr	r0, [pc, #108]	; (80012c8 <_display_registers+0xc8>)
 800125a:	f003 fb9a 	bl	8004992 <HAL_SPI_Transmit>
		HAL_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f001 fc1e 	bl	8002aa0 <HAL_Delay>

		printf(oregname[i]);
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3338      	adds	r3, #56	; 0x38
 800126a:	443b      	add	r3, r7
 800126c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001270:	4618      	mov	r0, r3
 8001272:	f006 f809 	bl	8007288 <iprintf>
		printf(" (at adress 0x%02X) :", oreg[i]);
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	3338      	adds	r3, #56	; 0x38
 800127c:	443b      	add	r3, r7
 800127e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001282:	4619      	mov	r1, r3
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <_display_registers+0xcc>)
 8001286:	f005 ffff 	bl	8007288 <iprintf>

		HAL_SPI_Receive(&hspi1, &regres, 1, 100);
 800128a:	1df9      	adds	r1, r7, #7
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2201      	movs	r2, #1
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <_display_registers+0xc8>)
 8001292:	f003 fcec 	bl	8004c6e <HAL_SPI_Receive>
		printf(" 0x%02X \n",regres);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <_display_registers+0xd0>)
 800129c:	f005 fff4 	bl	8007288 <iprintf>

		HAL_Delay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f001 fbfd 	bl	8002aa0 <HAL_Delay>
	for(int i=0; i<4; i++){
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	3301      	adds	r3, #1
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	ddc7      	ble.n	8001242 <_display_registers+0x42>
	}
	_disable_slave();
 80012b2:	f7ff fef4 	bl	800109e <_disable_slave>
}
 80012b6:	bf00      	nop
 80012b8:	373c      	adds	r7, #60	; 0x3c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800c178 	.word	0x0800c178
 80012c4:	0800c104 	.word	0x0800c104
 80012c8:	200003e4 	.word	0x200003e4
 80012cc:	0800c11c 	.word	0x0800c11c
 80012d0:	0800c134 	.word	0x0800c134

080012d4 <adnsInit>:
	raw_data[1] = (_read_register(ADNS_REG_delta_y_L) | (_read_register(ADNS_REG_delta_y_H) << 8));
	_disable_slave();
}
/*============================ Public ============================*/

void adnsInit(){ // see datasheet page 20
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	//SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE3));
	_disable_slave(); // ensure that the serial port is reset
 80012da:	f7ff fee0 	bl	800109e <_disable_slave>
	_enable_slave(); // ensure that the serial port is reset
 80012de:	f7ff fed3 	bl	8001088 <_enable_slave>
	_disable_slave(); // ensure that the serial port is reset
 80012e2:	f7ff fedc 	bl	800109e <_disable_slave>
	_write_register(ADNS_REG_Power_Up_Reset, 0x5a); // force reset
 80012e6:	215a      	movs	r1, #90	; 0x5a
 80012e8:	203a      	movs	r0, #58	; 0x3a
 80012ea:	f7ff ff11 	bl	8001110 <_write_register>
	HAL_Delay(50); // wait for it to reboot
 80012ee:	2032      	movs	r0, #50	; 0x32
 80012f0:	f001 fbd6 	bl	8002aa0 <HAL_Delay>
	// read registers 0x02 to 0x06 (and discard the data)
	_read_register(ADNS_REG_Motion);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff fedd 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_L);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f7ff feda 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_x_H);
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff fed7 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_L);
 8001306:	2005      	movs	r0, #5
 8001308:	f7ff fed4 	bl	80010b4 <_read_register>
	_read_register(ADNS_REG_delta_y_H);
 800130c:	2006      	movs	r0, #6
 800130e:	f7ff fed1 	bl	80010b4 <_read_register>
	// upload the firmware
	_upload_firmware();
 8001312:	f7ff ff27 	bl	8001164 <_upload_firmware>
	HAL_Delay(10);
 8001316:	200a      	movs	r0, #10
 8001318:	f001 fbc2 	bl	8002aa0 <HAL_Delay>
	// enable laser(bit 0 = 0b), in normal mode (bits 3,2,1 = 000b)
	// reading the actual value of the register is important because the real
	// default value is different from what is said in the datasheet, and if you
	// change the reserved bytess (like by writing 0x00...) it would not work.
	uint8_t laser_ctrl0 = _read_register(ADNS_REG_LASER_CTRL0);
 800131c:	2020      	movs	r0, #32
 800131e:	f7ff fec9 	bl	80010b4 <_read_register>
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	_write_register(ADNS_REG_LASER_CTRL0, laser_ctrl0 & 0xf0 );
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f023 030f 	bic.w	r3, r3, #15
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	2020      	movs	r0, #32
 8001332:	f7ff feed 	bl	8001110 <_write_register>

	HAL_Delay(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f001 fbb2 	bl	8002aa0 <HAL_Delay>

	if (_debug) printf("Optical chip started up \n");
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <adnsInit+0xc0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <adnsInit+0x76>
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <adnsInit+0xc4>)
 8001346:	f006 f80d 	bl	8007364 <puts>

	if (_debug) _display_registers();
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <adnsInit+0xc0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <adnsInit+0x82>
 8001352:	f7ff ff55 	bl	8001200 <_display_registers>
	if (_debug) printf("coef is set to %.4f dots per millimeter \n", _units_per_millimeter);
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <adnsInit+0xc0>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <adnsInit+0x9e>
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <adnsInit+0xc8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f918 	bl	8000598 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <adnsInit+0xcc>)
 800136e:	f005 ff8b 	bl	8007288 <iprintf>
	HAL_Delay(100);
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f001 fb94 	bl	8002aa0 <HAL_Delay>

	_disable_slave();
 8001378:	f7ff fe91 	bl	800109e <_disable_slave>

	if(_debug) printf("ADNS9800 initialization done \n");
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <adnsInit+0xc0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <adnsInit+0xb6>
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <adnsInit+0xd0>)
 8001386:	f005 ffed 	bl	8007364 <puts>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000020c 	.word	0x2000020c
 8001398:	0800c188 	.word	0x0800c188
 800139c:	20000000 	.word	0x20000000
 80013a0:	0800c1a4 	.word	0x0800c1a4
 80013a4:	0800c1d0 	.word	0x0800c1d0

080013a8 <print_header>:
int16_t angular_velocity_Q1 = 10;
int16_t gravity_Q1 = 8;

/*============================ Debug ============================*/

void print_header(void){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
		//Print the four byte header
		printf("Header:");
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <print_header+0x50>)
 80013b0:	f005 ff6a 	bl	8007288 <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	e014      	b.n	80013e4 <print_header+0x3c>
		{
			printf(" ");
 80013ba:	2020      	movs	r0, #32
 80013bc:	f005 ff76 	bl	80072ac <putchar>
			if (shtpHeader[x] < 0x10)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <print_header+0x54>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d802      	bhi.n	80013d0 <print_header+0x28>
				printf("0");
 80013ca:	2030      	movs	r0, #48	; 0x30
 80013cc:	f005 ff6e 	bl	80072ac <putchar>
			printf("%01X",shtpHeader[x]);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <print_header+0x54>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <print_header+0x58>)
 80013da:	f005 ff55 	bl	8007288 <iprintf>
		for (uint8_t x = 0; x < 4; x++)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3301      	adds	r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d9e7      	bls.n	80013ba <print_header+0x12>
		}
		printf("\n");
 80013ea:	200a      	movs	r0, #10
 80013ec:	f005 ff5e 	bl	80072ac <putchar>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800c220 	.word	0x0800c220
 80013fc:	20000210 	.word	0x20000210
 8001400:	0800c228 	.word	0x0800c228

08001404 <print_packet>:
void print_packet(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint16_t packetLength = (uint16_t)shtpHeader[1] << 8 | shtpHeader[0];
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <print_packet+0x10c>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <print_packet+0x10c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	80fb      	strh	r3, [r7, #6]

	//Print the four byte header
	print_header();
 800141e:	f7ff ffc3 	bl	80013a8 <print_header>

	uint16_t printLength = packetLength - 4;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	3b04      	subs	r3, #4
 8001426:	80bb      	strh	r3, [r7, #4]
	if (printLength > 40){printLength = 40; printf("(Shortened) ");} //Artificial limit. We don't want the phone book.
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	2b28      	cmp	r3, #40	; 0x28
 800142c:	d904      	bls.n	8001438 <print_packet+0x34>
 800142e:	2328      	movs	r3, #40	; 0x28
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	4838      	ldr	r0, [pc, #224]	; (8001514 <print_packet+0x110>)
 8001434:	f005 ff28 	bl	8007288 <iprintf>

	printf("Body:");
 8001438:	4837      	ldr	r0, [pc, #220]	; (8001518 <print_packet+0x114>)
 800143a:	f005 ff25 	bl	8007288 <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 800143e:	2300      	movs	r3, #0
 8001440:	70fb      	strb	r3, [r7, #3]
 8001442:	e014      	b.n	800146e <print_packet+0x6a>
	{
		printf(" ");
 8001444:	2020      	movs	r0, #32
 8001446:	f005 ff31 	bl	80072ac <putchar>
		if (shtpData[x] < 0x10)
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	4a33      	ldr	r2, [pc, #204]	; (800151c <print_packet+0x118>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d802      	bhi.n	800145a <print_packet+0x56>
			printf("0");
 8001454:	2030      	movs	r0, #48	; 0x30
 8001456:	f005 ff29 	bl	80072ac <putchar>
		printf("%01X",shtpData[x]);
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	4a2f      	ldr	r2, [pc, #188]	; (800151c <print_packet+0x118>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	4619      	mov	r1, r3
 8001462:	482f      	ldr	r0, [pc, #188]	; (8001520 <print_packet+0x11c>)
 8001464:	f005 ff10 	bl	8007288 <iprintf>
	for (uint8_t x = 0; x < printLength; x++)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	3301      	adds	r3, #1
 800146c:	70fb      	strb	r3, [r7, #3]
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	b29b      	uxth	r3, r3
 8001472:	88ba      	ldrh	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8e5      	bhi.n	8001444 <print_packet+0x40>
	}
	if (packetLength & 1 << 15){
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da06      	bge.n	800148e <print_packet+0x8a>
		printf(" [Continued packet]");
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <print_packet+0x120>)
 8001482:	f005 ff01 	bl	8007288 <iprintf>
		packetLength &= ~(1 << 15);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800148c:	80fb      	strh	r3, [r7, #6]
	}

	printf(" Length: %u ", packetLength);
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4619      	mov	r1, r3
 8001492:	4825      	ldr	r0, [pc, #148]	; (8001528 <print_packet+0x124>)
 8001494:	f005 fef8 	bl	8007288 <iprintf>

	printf("Channel: ");
 8001498:	4824      	ldr	r0, [pc, #144]	; (800152c <print_packet+0x128>)
 800149a:	f005 fef5 	bl	8007288 <iprintf>
	switch (shtpHeader[2]){
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <print_packet+0x10c>)
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d826      	bhi.n	80014f4 <print_packet+0xf0>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <print_packet+0xa8>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014cd 	.word	0x080014cd
 80014b4:	080014d5 	.word	0x080014d5
 80014b8:	080014dd 	.word	0x080014dd
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	080014ed 	.word	0x080014ed
		case 0: printf("Command"); break;
 80014c4:	481a      	ldr	r0, [pc, #104]	; (8001530 <print_packet+0x12c>)
 80014c6:	f005 fedf 	bl	8007288 <iprintf>
 80014ca:	e01a      	b.n	8001502 <print_packet+0xfe>
		case 1: printf("Executable"); break;
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <print_packet+0x130>)
 80014ce:	f005 fedb 	bl	8007288 <iprintf>
 80014d2:	e016      	b.n	8001502 <print_packet+0xfe>
		case 2: printf("Control"); break;
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <print_packet+0x134>)
 80014d6:	f005 fed7 	bl	8007288 <iprintf>
 80014da:	e012      	b.n	8001502 <print_packet+0xfe>
		case 3: printf("Sensor-report"); break;
 80014dc:	4817      	ldr	r0, [pc, #92]	; (800153c <print_packet+0x138>)
 80014de:	f005 fed3 	bl	8007288 <iprintf>
 80014e2:	e00e      	b.n	8001502 <print_packet+0xfe>
		case 4: printf("Wake-report"); break;
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <print_packet+0x13c>)
 80014e6:	f005 fecf 	bl	8007288 <iprintf>
 80014ea:	e00a      	b.n	8001502 <print_packet+0xfe>
		case 5: printf("Gyro-vector"); break;
 80014ec:	4815      	ldr	r0, [pc, #84]	; (8001544 <print_packet+0x140>)
 80014ee:	f005 fecb 	bl	8007288 <iprintf>
 80014f2:	e006      	b.n	8001502 <print_packet+0xfe>
		default: printf("Raw header : %hu", shtpHeader[2]); break;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <print_packet+0x10c>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4813      	ldr	r0, [pc, #76]	; (8001548 <print_packet+0x144>)
 80014fc:	f005 fec4 	bl	8007288 <iprintf>
 8001500:	bf00      	nop
	}
	printf("\n");
 8001502:	200a      	movs	r0, #10
 8001504:	f005 fed2 	bl	80072ac <putchar>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000210 	.word	0x20000210
 8001514:	0800c230 	.word	0x0800c230
 8001518:	0800c240 	.word	0x0800c240
 800151c:	20000214 	.word	0x20000214
 8001520:	0800c228 	.word	0x0800c228
 8001524:	0800c248 	.word	0x0800c248
 8001528:	0800c25c 	.word	0x0800c25c
 800152c:	0800c26c 	.word	0x0800c26c
 8001530:	0800c278 	.word	0x0800c278
 8001534:	0800c280 	.word	0x0800c280
 8001538:	0800c28c 	.word	0x0800c28c
 800153c:	0800c294 	.word	0x0800c294
 8001540:	0800c2a4 	.word	0x0800c2a4
 8001544:	0800c2b0 	.word	0x0800c2b0
 8001548:	0800c2bc 	.word	0x0800c2bc

0800154c <_enable_slave>:

/*============================ Hardware abstraction ============================*/

static inline void _enable_slave(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2110      	movs	r1, #16
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f001 fefe 	bl	8003358 <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <_disable_slave>:
static inline void _disable_slave(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2110      	movs	r1, #16
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f001 fef4 	bl	8003358 <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <_reset_slave_blocking>:
static inline void _reset_slave_blocking(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2101      	movs	r1, #1
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f001 feea 	bl	8003358 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001584:	2002      	movs	r0, #2
 8001586:	f001 fa8b 	bl	8002aa0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_IMU_GPIO_Port, RST_IMU_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2101      	movs	r1, #1
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f001 fee1 	bl	8003358 <HAL_GPIO_WritePin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}

0800159a <_sensor_awaiting>:
static inline bool _sensor_awaiting(){
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin);
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f001 febf 	bl	8003328 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_wait_for_int_blocking_timeout>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
static bool _wait_for_int_blocking_timeout(uint8_t timeout){
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
	for (uint8_t counter = 0; counter < timeout; counter++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e010      	b.n	80015ec <_wait_for_int_blocking_timeout+0x32>
		if (!HAL_GPIO_ReadPin(INT_IMU_GPIO_Port, INT_IMU_Pin))
 80015ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f001 fea9 	bl	8003328 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <_wait_for_int_blocking_timeout+0x26>
			return (true);
 80015dc:	2301      	movs	r3, #1
 80015de:	e00a      	b.n	80015f6 <_wait_for_int_blocking_timeout+0x3c>
		HAL_Delay(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f001 fa5d 	bl	8002aa0 <HAL_Delay>
	for (uint8_t counter = 0; counter < timeout; counter++){
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3ea      	bcc.n	80015ca <_wait_for_int_blocking_timeout+0x10>
	}
	return (false);
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_wait_for_int_blocking>:
static bool _wait_for_int_blocking(){
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
	return _wait_for_int_blocking_timeout(BNO_STANDARD_INT_TIMEOUT);
 8001602:	207d      	movs	r0, #125	; 0x7d
 8001604:	f7ff ffd9 	bl	80015ba <_wait_for_int_blocking_timeout>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <_receive_packet>:

/*============================ Low Level ============================*/

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
static bool _receive_packet(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 8001616:	f7ff ffc0 	bl	800159a <_sensor_awaiting>
 800161a:	4603      	mov	r3, r0
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_receive_packet+0x1a>
		return (false); //Data is not available
 8001626:	2300      	movs	r3, #0
 8001628:	e054      	b.n	80016d4 <_receive_packet+0xc4>

	//Get first four bytes to find out how much data we need to read
	_enable_slave();
 800162a:	f7ff ff8f 	bl	800154c <_enable_slave>

	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(&hspi1, shtpHeader, 4, 500);
 800162e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001632:	2204      	movs	r2, #4
 8001634:	4929      	ldr	r1, [pc, #164]	; (80016dc <_receive_packet+0xcc>)
 8001636:	482a      	ldr	r0, [pc, #168]	; (80016e0 <_receive_packet+0xd0>)
 8001638:	f003 fb19 	bl	8004c6e <HAL_SPI_Receive>
	shtpHeader[2] : channelNumber;
	shtpHeader[3] : sequenceNumber;
	*/

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = (((uint16_t)shtpHeader[1]/*MSB*/) << 8) | ((uint16_t)shtpHeader[0]/*LSB*/);
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <_receive_packet+0xcc>)
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <_receive_packet+0xcc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001656:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0){
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d110      	bne.n	8001680 <_receive_packet+0x70>
		//Packet is empty
		if (_debug) printf("Packet empty !");
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <_receive_packet+0xd4>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <_receive_packet+0x5e>
 8001668:	481f      	ldr	r0, [pc, #124]	; (80016e8 <_receive_packet+0xd8>)
 800166a:	f005 fe0d 	bl	8007288 <iprintf>
		if (_debug == 2) print_header();
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <_receive_packet+0xd4>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d101      	bne.n	800167c <_receive_packet+0x6c>
 8001678:	f7ff fe96 	bl	80013a8 <print_header>
		return (false); //All done
 800167c:	2300      	movs	r3, #0
 800167e:	e029      	b.n	80016d4 <_receive_packet+0xc4>
	}

	dataLength -= 4; //Remove the header bytes from the data count
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	3b04      	subs	r3, #4
 8001684:	80fb      	strh	r3, [r7, #6]
	//Read incoming data into the shtpData array
	//uint8_t transmit_buffer = 0xFF;
	if (dataLength > BNO_MAX_PACKET_SIZE)  dataLength = BNO_MAX_PACKET_SIZE;
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168c:	d902      	bls.n	8001694 <_receive_packet+0x84>
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	80fb      	strh	r3, [r7, #6]
	//HAL_SPI_TransmitReceive(&hspi1, &transmit_buffer,shtpData, dataLength, 500);
	HAL_SPI_Receive(&hspi1,shtpData, dataLength, 500);
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169a:	4914      	ldr	r1, [pc, #80]	; (80016ec <_receive_packet+0xdc>)
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <_receive_packet+0xd0>)
 800169e:	f003 fae6 	bl	8004c6e <HAL_SPI_Receive>

	_disable_slave(); //Release BNO080
 80016a2:	f7ff ff5d 	bl	8001560 <_disable_slave>

	if(_debug == 2){printf("New packet retrieved :\n");print_packet();}
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <_receive_packet+0xd4>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d104      	bne.n	80016ba <_receive_packet+0xaa>
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <_receive_packet+0xe0>)
 80016b2:	f005 fe57 	bl	8007364 <puts>
 80016b6:	f7ff fea5 	bl	8001404 <print_packet>

	// Quickly check for reset complete packet. No need for a seperate parser.
	// This function is also called after soft reset, so we need to catch this
	// packet here otherwise we need to check for the reset packet in multiple
	// places.
	if (shtpHeader[2] == CHANNEL_EXECUTABLE && shtpData[0] == BNO_EXECUTABLE_RESET_COMPLETE)
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_receive_packet+0xcc>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	2201      	movs	r2, #1
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d106      	bne.n	80016d2 <_receive_packet+0xc2>
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <_receive_packet+0xdc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d102      	bne.n	80016d2 <_receive_packet+0xc2>
	{
		printf("OUCH !!! The sensor has just been reset ! \n");
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <_receive_packet+0xe4>)
 80016ce:	f005 fe49 	bl	8007364 <puts>
		//_hasReset = true;
	}

	return (true); //We're done!
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000210 	.word	0x20000210
 80016e0:	200003e4 	.word	0x200003e4
 80016e4:	20000004 	.word	0x20000004
 80016e8:	0800c2d0 	.word	0x0800c2d0
 80016ec:	20000214 	.word	0x20000214
 80016f0:	0800c2e0 	.word	0x0800c2e0
 80016f4:	0800c2f8 	.word	0x0800c2f8

080016f8 <_send_packet>:
static bool _send_packet(uint8_t channelNumber, uint8_t dataLength){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	3304      	adds	r3, #4
 800170c:	73fb      	strb	r3, [r7, #15]

	//Wait for BNO080 to indicate it is available for communication
	if (_wait_for_int_blocking() == false)
 800170e:	f7ff ff76 	bl	80015fe <_wait_for_int_blocking>
 8001712:	4603      	mov	r3, r0
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <_send_packet+0x2a>
		return false;
 800171e:	2300      	movs	r3, #0
 8001720:	e025      	b.n	800176e <_send_packet+0x76>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode 3
	_enable_slave();
 8001722:	f7ff ff13 	bl	800154c <_enable_slave>

	//Send the 4 byte packet header
	uint8_t header_buffer[4];
	header_buffer[0] = (packetLength & 0xFF); //Packet length LSB // uhhhhhh & 0xFF ?
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	723b      	strb	r3, [r7, #8]
	header_buffer[1] = (packetLength >> 8); //Packet length MSB
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	121b      	asrs	r3, r3, #8
 800172e:	b2db      	uxtb	r3, r3
 8001730:	727b      	strb	r3, [r7, #9]
	header_buffer[2] = channelNumber;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	72bb      	strb	r3, [r7, #10]
	header_buffer[3] = (sequenceNumber[channelNumber]++); //Send the sequence number, increments with each packet sent, different counter for each channel
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <_send_packet+0x80>)
 800173a:	5cd2      	ldrb	r2, [r2, r3]
 800173c:	1c51      	adds	r1, r2, #1
 800173e:	b2c8      	uxtb	r0, r1
 8001740:	490d      	ldr	r1, [pc, #52]	; (8001778 <_send_packet+0x80>)
 8001742:	54c8      	strb	r0, [r1, r3]
 8001744:	4613      	mov	r3, r2
 8001746:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi1, header_buffer, 4, 500);
 8001748:	f107 0108 	add.w	r1, r7, #8
 800174c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001750:	2204      	movs	r2, #4
 8001752:	480a      	ldr	r0, [pc, #40]	; (800177c <_send_packet+0x84>)
 8001754:	f003 f91d 	bl	8004992 <HAL_SPI_Transmit>

	//Send the user's data packet
	HAL_SPI_Transmit(&hspi1, shtpData, dataLength, 500);
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	b29a      	uxth	r2, r3
 800175c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <_send_packet+0x88>)
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <_send_packet+0x84>)
 8001764:	f003 f915 	bl	8004992 <HAL_SPI_Transmit>

	_disable_slave();
 8001768:	f7ff fefa 	bl	8001560 <_disable_slave>

	return (true);
 800176c:	2301      	movs	r3, #1
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000314 	.word	0x20000314
 800177c:	200003e4 	.word	0x200003e4
 8001780:	20000214 	.word	0x20000214

08001784 <_set_feature_command>:

static void _set_feature_command(uint8_t reportID, long millisBetweenReports, uint32_t specificConfig){
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	73fb      	strb	r3, [r7, #15]

	long microsBetweenReports = millisBetweenReports * 1000;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]

	shtpData[0] = BNO_SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <_set_feature_command+0xb0>)
 80017a0:	22fd      	movs	r2, #253	; 0xfd
 80017a2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <_set_feature_command+0xb0>)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <_set_feature_command+0xb0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <_set_feature_command+0xb0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <_set_feature_command+0xb0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <_set_feature_command+0xb0>)
 80017c2:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	121b      	asrs	r3, r3, #8
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <_set_feature_command+0xb0>)
 80017cc:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	141b      	asrs	r3, r3, #16
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <_set_feature_command+0xb0>)
 80017d6:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	0e1b      	lsrs	r3, r3, #24
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_set_feature_command+0xb0>)
 80017e0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <_set_feature_command+0xb0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <_set_feature_command+0xb0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_set_feature_command+0xb0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <_set_feature_command+0xb0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <_set_feature_command+0xb0>)
 8001800:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <_set_feature_command+0xb0>)
 800180a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_set_feature_command+0xb0>)
 8001814:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	0e1b      	lsrs	r3, r3, #24
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <_set_feature_command+0xb0>)
 800181e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	_send_packet(CHANNEL_CONTROL, 17);
 8001820:	2302      	movs	r3, #2
 8001822:	2111      	movs	r1, #17
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff67 	bl	80016f8 <_send_packet>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000214 	.word	0x20000214

08001838 <_quaternion_to_float>:

static float _quaternion_to_float(int16_t fixedPointValue, uint8_t qPoint){
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	460a      	mov	r2, r1
 8001842:	80fb      	strh	r3, [r7, #6]
 8001844:	4613      	mov	r3, r2
 8001846:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001854:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001858:	797b      	ldrb	r3, [r7, #5]
 800185a:	425b      	negs	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe89 	bl	8000574 <__aeabi_i2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ec43 2b11 	vmov	d1, r2, r3
 800186a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80018a8 <_quaternion_to_float+0x70>
 800186e:	f009 fa55 	bl	800ad1c <pow>
 8001872:	ec55 4b10 	vmov	r4, r5, d0
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fee0 	bl	8000648 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f9d2 	bl	8000c38 <__aeabi_d2f>
 8001894:	4603      	mov	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	ee07 3a90 	vmov	s15, r3
}
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40000000 	.word	0x40000000

080018b0 <_parse_input_report>:
//shtpData[4:5]: i/accel x/gyro x/etc
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
static uint16_t _parse_input_report(void){
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <_parse_input_report+0x1f8>)
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b21a      	sxth	r2, r3
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <_parse_input_report+0x1f8>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	817b      	strh	r3, [r7, #10]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018ce:	817b      	strh	r3, [r7, #10]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80018d0:	897b      	ldrh	r3, [r7, #10]
 80018d2:	3b04      	subs	r3, #4
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	817b      	strh	r3, [r7, #10]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 80018d8:	4b74      	ldr	r3, [pc, #464]	; (8001aac <_parse_input_report+0x1fc>)
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	061a      	lsls	r2, r3, #24
 80018de:	4b73      	ldr	r3, [pc, #460]	; (8001aac <_parse_input_report+0x1fc>)
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4b71      	ldr	r3, [pc, #452]	; (8001aac <_parse_input_report+0x1fc>)
 80018e8:	789b      	ldrb	r3, [r3, #2]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	4313      	orrs	r3, r2
 80018ee:	4a6f      	ldr	r2, [pc, #444]	; (8001aac <_parse_input_report+0x1fc>)
 80018f0:	7852      	ldrb	r2, [r2, #1]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	4a6e      	ldr	r2, [pc, #440]	; (8001ab0 <_parse_input_report+0x200>)
 80018f6:	6013      	str	r3, [r2, #0]

	// The gyro-integrated input reports are sent via the special gyro channel and do no include the usual ID, sequence, and status fields
	if(shtpHeader[2] == CHANNEL_GYRO) {
 80018f8:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <_parse_input_report+0x1f8>)
 80018fa:	789b      	ldrb	r3, [r3, #2]
 80018fc:	2205      	movs	r2, #5
 80018fe:	4293      	cmp	r3, r2
 8001900:	d155      	bne.n	80019ae <_parse_input_report+0xfe>
		rawQuatI = (uint16_t)shtpData[1] << 8 | shtpData[0];
 8001902:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <_parse_input_report+0x1fc>)
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b68      	ldr	r3, [pc, #416]	; (8001aac <_parse_input_report+0x1fc>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21b      	sxth	r3, r3
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <_parse_input_report+0x204>)
 8001918:	801a      	strh	r2, [r3, #0]
		rawQuatJ = (uint16_t)shtpData[3] << 8 | shtpData[2];
 800191a:	4b64      	ldr	r3, [pc, #400]	; (8001aac <_parse_input_report+0x1fc>)
 800191c:	78db      	ldrb	r3, [r3, #3]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	4b62      	ldr	r3, [pc, #392]	; (8001aac <_parse_input_report+0x1fc>)
 8001924:	789b      	ldrb	r3, [r3, #2]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b62      	ldr	r3, [pc, #392]	; (8001ab8 <_parse_input_report+0x208>)
 8001930:	801a      	strh	r2, [r3, #0]
		rawQuatK = (uint16_t)shtpData[5] << 8 | shtpData[4];
 8001932:	4b5e      	ldr	r3, [pc, #376]	; (8001aac <_parse_input_report+0x1fc>)
 8001934:	795b      	ldrb	r3, [r3, #5]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <_parse_input_report+0x1fc>)
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21b      	sxth	r3, r3
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <_parse_input_report+0x20c>)
 8001948:	801a      	strh	r2, [r3, #0]
		rawQuatReal = (uint16_t)shtpData[7] << 8 | shtpData[6];
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <_parse_input_report+0x1fc>)
 800194c:	79db      	ldrb	r3, [r3, #7]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <_parse_input_report+0x1fc>)
 8001954:	799b      	ldrb	r3, [r3, #6]
 8001956:	b21b      	sxth	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b21b      	sxth	r3, r3
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <_parse_input_report+0x210>)
 8001960:	801a      	strh	r2, [r3, #0]
		rawFastGyroX = (uint16_t)shtpData[9] << 8 | shtpData[8];
 8001962:	4b52      	ldr	r3, [pc, #328]	; (8001aac <_parse_input_report+0x1fc>)
 8001964:	7a5b      	ldrb	r3, [r3, #9]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	4b50      	ldr	r3, [pc, #320]	; (8001aac <_parse_input_report+0x1fc>)
 800196c:	7a1b      	ldrb	r3, [r3, #8]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21b      	sxth	r3, r3
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <_parse_input_report+0x214>)
 8001978:	801a      	strh	r2, [r3, #0]
		rawFastGyroY = (uint16_t)shtpData[11] << 8 | shtpData[10];
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <_parse_input_report+0x1fc>)
 800197c:	7adb      	ldrb	r3, [r3, #11]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <_parse_input_report+0x1fc>)
 8001984:	7a9b      	ldrb	r3, [r3, #10]
 8001986:	b21b      	sxth	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b21b      	sxth	r3, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <_parse_input_report+0x218>)
 8001990:	801a      	strh	r2, [r3, #0]
		rawFastGyroZ = (uint16_t)shtpData[13] << 8 | shtpData[12];
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <_parse_input_report+0x1fc>)
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <_parse_input_report+0x1fc>)
 800199c:	7b1b      	ldrb	r3, [r3, #12]
 800199e:	b21b      	sxth	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <_parse_input_report+0x21c>)
 80019a8:	801a      	strh	r2, [r3, #0]

		return BNO_REPORTID_GYRO_INTEGRATED_ROTATION_VECTOR;
 80019aa:	232a      	movs	r3, #42	; 0x2a
 80019ac:	e075      	b.n	8001a9a <_parse_input_report+0x1ea>
	}

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 80019ae:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <_parse_input_report+0x1fc>)
 80019b0:	79db      	ldrb	r3, [r3, #7]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	727b      	strb	r3, [r7, #9]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <_parse_input_report+0x1fc>)
 80019ba:	7a9b      	ldrb	r3, [r3, #10]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <_parse_input_report+0x1fc>)
 80019c2:	7a5b      	ldrb	r3, [r3, #9]
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	80fb      	strh	r3, [r7, #6]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <_parse_input_report+0x1fc>)
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <_parse_input_report+0x1fc>)
 80019d6:	7adb      	ldrb	r3, [r3, #11]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b21b      	sxth	r3, r3
 80019de:	80bb      	strh	r3, [r7, #4]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <_parse_input_report+0x1fc>)
 80019e2:	7b9b      	ldrb	r3, [r3, #14]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <_parse_input_report+0x1fc>)
 80019ea:	7b5b      	ldrb	r3, [r3, #13]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	807b      	strh	r3, [r7, #2]
	uint16_t data4 = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	81fb      	strh	r3, [r7, #14]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 80019f8:	2300      	movs	r3, #0
 80019fa:	81bb      	strh	r3, [r7, #12]
	uint16_t data6 = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	803b      	strh	r3, [r7, #0]

	if (dataLength - 5 > 9){
 8001a00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a04:	2b0e      	cmp	r3, #14
 8001a06:	dd09      	ble.n	8001a1c <_parse_input_report+0x16c>
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <_parse_input_report+0x1fc>)
 8001a0a:	7c1b      	ldrb	r3, [r3, #16]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <_parse_input_report+0x1fc>)
 8001a12:	7bdb      	ldrb	r3, [r3, #15]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	81fb      	strh	r3, [r7, #14]
	}
	if (dataLength - 5 > 11){
 8001a1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	dd09      	ble.n	8001a38 <_parse_input_report+0x188>
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <_parse_input_report+0x1fc>)
 8001a26:	7c9b      	ldrb	r3, [r3, #18]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <_parse_input_report+0x1fc>)
 8001a2e:	7c5b      	ldrb	r3, [r3, #17]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	81bb      	strh	r3, [r7, #12]
	}
	if (dataLength - 5 > 13){
 8001a38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	dd09      	ble.n	8001a54 <_parse_input_report+0x1a4>
		data6 = (uint16_t)shtpData[5 + 15] << 8 | shtpData[5 + 14];
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <_parse_input_report+0x1fc>)
 8001a42:	7d1b      	ldrb	r3, [r3, #20]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <_parse_input_report+0x1fc>)
 8001a4a:	7cdb      	ldrb	r3, [r3, #19]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	803b      	strh	r3, [r7, #0]
	}

	//Store these generic values to their proper global variable
	switch (shtpData[5]){
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_parse_input_report+0x1fc>)
 8001a56:	795b      	ldrb	r3, [r3, #5]
 8001a58:	2b29      	cmp	r3, #41	; 0x29
 8001a5a:	dc1d      	bgt.n	8001a98 <_parse_input_report+0x1e8>
 8001a5c:	2b28      	cmp	r3, #40	; 0x28
 8001a5e:	da03      	bge.n	8001a68 <_parse_input_report+0x1b8>
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d001      	beq.n	8001a68 <_parse_input_report+0x1b8>
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d117      	bne.n	8001a98 <_parse_input_report+0x1e8>
		break;*/
	case (BNO_REPORTID_AR_VR_STABILIZED_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_AR_VR_STABILIZED_ROTATION_VECTOR):
	case (BNO_REPORTID_GAME_ROTATION_VECTOR):
	case (BNO_REPORTID_ROTATION_VECTOR):
		quatAccuracy = status;
 8001a68:	7a7b      	ldrb	r3, [r7, #9]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <_parse_input_report+0x220>)
 8001a6e:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001a70:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <_parse_input_report+0x204>)
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <_parse_input_report+0x208>)
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <_parse_input_report+0x20c>)
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <_parse_input_report+0x210>)
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	8013      	strh	r3, [r2, #0]
		//Only available on rotation vector and ar/vr stabilized rotation vector,
		// not game rot vector and not ar/vr stabilized rotation vector
		rawQuatRadianAccuracy = data5;
 8001a88:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_parse_input_report+0x224>)
 8001a8a:	89bb      	ldrh	r3, [r7, #12]
 8001a8c:	8013      	strh	r3, [r2, #0]
		break;
 8001a8e:	bf00      	nop
	default :
		return 0;
	}
	//TODO additional feature reports may be strung together. Parse them all.

	return shtpData[5];
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <_parse_input_report+0x1fc>)
 8001a92:	795b      	ldrb	r3, [r3, #5]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	e000      	b.n	8001a9a <_parse_input_report+0x1ea>
		return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000210 	.word	0x20000210
 8001aac:	20000214 	.word	0x20000214
 8001ab0:	2000032c 	.word	0x2000032c
 8001ab4:	2000031a 	.word	0x2000031a
 8001ab8:	2000031c 	.word	0x2000031c
 8001abc:	2000031e 	.word	0x2000031e
 8001ac0:	20000320 	.word	0x20000320
 8001ac4:	20000326 	.word	0x20000326
 8001ac8:	20000328 	.word	0x20000328
 8001acc:	2000032a 	.word	0x2000032a
 8001ad0:	20000324 	.word	0x20000324
 8001ad4:	20000322 	.word	0x20000322

08001ad8 <_parse_command_report>:
//shtpData[5 + 4]: R4
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
static uint16_t _parse_command_report(void){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	if (shtpData[0] == BNO_SHTP_REPORT_COMMAND_RESPONSE){
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <_parse_command_report+0x38>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2bf1      	cmp	r3, #241	; 0xf1
 8001ae4:	d10d      	bne.n	8001b02 <_parse_command_report+0x2a>
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <_parse_command_report+0x38>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	71fb      	strb	r3, [r7, #7]

		if (command == BNO_COMMANDID_ME_CALIBRATE){
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	d103      	bne.n	8001afa <_parse_command_report+0x22>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <_parse_command_report+0x38>)
 8001af4:	795a      	ldrb	r2, [r3, #5]
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_parse_command_report+0x3c>)
 8001af8:	701a      	strb	r2, [r3, #0]
		}
		return shtpData[0];
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <_parse_command_report+0x38>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	e000      	b.n	8001b04 <_parse_command_report+0x2c>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
	return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	20000214 	.word	0x20000214
 8001b14:	20000330 	.word	0x20000330

08001b18 <bno_setup>:
/*============================ High Level ============================*/

bool bno_setup(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

	_disable_slave();
 8001b1e:	f7ff fd1f 	bl	8001560 <_disable_slave>
	_reset_slave_blocking();
 8001b22:	f7ff fd27 	bl	8001574 <_reset_slave_blocking>

	//Wait for first assertion of INT before using WAK pin. Can take ~104ms
	if(!_wait_for_int_blocking()) return false;
 8001b26:	f7ff fd6a 	bl	80015fe <_wait_for_int_blocking>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <bno_setup+0x22>
 8001b36:	2300      	movs	r3, #0
 8001b38:	e089      	b.n	8001c4e <bno_setup+0x136>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	if(!_wait_for_int_blocking()) return false; //Wait for assertion of INT before reading advert message.
 8001b3a:	f7ff fd60 	bl	80015fe <_wait_for_int_blocking>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <bno_setup+0x36>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e07f      	b.n	8001c4e <bno_setup+0x136>
	_receive_packet();
 8001b4e:	f7ff fd5f 	bl	8001610 <_receive_packet>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	if(!_wait_for_int_blocking()) return false; //Wait for assertion of INT before reading Init response
 8001b52:	f7ff fd54 	bl	80015fe <_wait_for_int_blocking>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <bno_setup+0x4e>
 8001b62:	2300      	movs	r3, #0
 8001b64:	e073      	b.n	8001c4e <bno_setup+0x136>
	_receive_packet();
 8001b66:	f7ff fd53 	bl	8001610 <_receive_packet>

	//Check communication with device
	shtpData[0] = BNO_SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <bno_setup+0x140>)
 8001b6c:	22f9      	movs	r2, #249	; 0xf9
 8001b6e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <bno_setup+0x140>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	if(!_send_packet(CHANNEL_CONTROL, 2)){
 8001b76:	2302      	movs	r3, #2
 8001b78:	2102      	movs	r1, #2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fdbc 	bl	80016f8 <_send_packet>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <bno_setup+0x7e>
		printf("Send command to the BNO085 failed");
 8001b8c:	4833      	ldr	r0, [pc, #204]	; (8001c5c <bno_setup+0x144>)
 8001b8e:	f005 fb7b 	bl	8007288 <iprintf>
		return false;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e05b      	b.n	8001c4e <bno_setup+0x136>
	}

	//Now we wait for response
	if(!_wait_for_int_blocking()) return false;
 8001b96:	f7ff fd32 	bl	80015fe <_wait_for_int_blocking>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <bno_setup+0x92>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e051      	b.n	8001c4e <bno_setup+0x136>
	if (_receive_packet() && shtpData[0] == BNO_SHTP_REPORT_PRODUCT_ID_RESPONSE){
 8001baa:	f7ff fd31 	bl	8001610 <_receive_packet>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d04b      	beq.n	8001c4c <bno_setup+0x134>
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <bno_setup+0x140>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2bf8      	cmp	r3, #248	; 0xf8
 8001bba:	d147      	bne.n	8001c4c <bno_setup+0x134>
		if (_debug){
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <bno_setup+0x148>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d040      	beq.n	8001c48 <bno_setup+0x130>
			printf("SW Version Major: 0x%04X", shtpData[2]);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <bno_setup+0x140>)
 8001bc8:	789b      	ldrb	r3, [r3, #2]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4825      	ldr	r0, [pc, #148]	; (8001c64 <bno_setup+0x14c>)
 8001bce:	f005 fb5b 	bl	8007288 <iprintf>
			printf(" SW Version Minor: 0x%04X \n", shtpData[3]);
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <bno_setup+0x140>)
 8001bd4:	78db      	ldrb	r3, [r3, #3]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4823      	ldr	r0, [pc, #140]	; (8001c68 <bno_setup+0x150>)
 8001bda:	f005 fb55 	bl	8007288 <iprintf>
			uint32_t SW_Part_Number = ((uint32_t)shtpData[7] << 24) | ((uint32_t)shtpData[6] << 16) | ((uint32_t)shtpData[5] << 8) | ((uint32_t)shtpData[4]);
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <bno_setup+0x140>)
 8001be0:	79db      	ldrb	r3, [r3, #7]
 8001be2:	061a      	lsls	r2, r3, #24
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <bno_setup+0x140>)
 8001be6:	799b      	ldrb	r3, [r3, #6]
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <bno_setup+0x140>)
 8001bee:	795b      	ldrb	r3, [r3, #5]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <bno_setup+0x140>)
 8001bf6:	7912      	ldrb	r2, [r2, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
			printf("SW Part Number: %ld \n",SW_Part_Number);
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	481b      	ldr	r0, [pc, #108]	; (8001c6c <bno_setup+0x154>)
 8001c00:	f005 fb42 	bl	8007288 <iprintf>
			uint32_t SW_Build_Number = ((uint32_t)shtpData[11] << 24) | ((uint32_t)shtpData[10] << 16) | ((uint32_t)shtpData[9] << 8) | ((uint32_t)shtpData[8]);
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <bno_setup+0x140>)
 8001c06:	7adb      	ldrb	r3, [r3, #11]
 8001c08:	061a      	lsls	r2, r3, #24
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <bno_setup+0x140>)
 8001c0c:	7a9b      	ldrb	r3, [r3, #10]
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	431a      	orrs	r2, r3
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <bno_setup+0x140>)
 8001c14:	7a5b      	ldrb	r3, [r3, #9]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <bno_setup+0x140>)
 8001c1c:	7a12      	ldrb	r2, [r2, #8]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60bb      	str	r3, [r7, #8]
			printf("SW Build Number: %ld \n", SW_Build_Number);
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <bno_setup+0x158>)
 8001c26:	f005 fb2f 	bl	8007288 <iprintf>
			uint16_t SW_Version_Patch = ((uint16_t)shtpData[13] << 8) | ((uint16_t)shtpData[12]);
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <bno_setup+0x140>)
 8001c2c:	7b5b      	ldrb	r3, [r3, #13]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <bno_setup+0x140>)
 8001c34:	7b1b      	ldrb	r3, [r3, #12]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	80fb      	strh	r3, [r7, #6]
			printf("SW Version Patch: %d \n",SW_Version_Patch);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4619      	mov	r1, r3
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <bno_setup+0x15c>)
 8001c44:	f005 fb20 	bl	8007288 <iprintf>
		}
		return (true);
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <bno_setup+0x136>
	}
	return (false); //Something went wrong
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000214 	.word	0x20000214
 8001c5c:	0800c324 	.word	0x0800c324
 8001c60:	20000004 	.word	0x20000004
 8001c64:	0800c348 	.word	0x0800c348
 8001c68:	0800c364 	.word	0x0800c364
 8001c6c:	0800c380 	.word	0x0800c380
 8001c70:	0800c398 	.word	0x0800c398
 8001c74:	0800c3b0 	.word	0x0800c3b0

08001c78 <bno_enable_rotation_vector>:

void bno_enable_rotation_vector(long millisBetweenReports){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	_set_feature_command(BNO_REPORTID_ROTATION_VECTOR, millisBetweenReports, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	2005      	movs	r0, #5
 8001c86:	f7ff fd7d 	bl	8001784 <_set_feature_command>
	HAL_Delay(100);
 8001c8a:	2064      	movs	r0, #100	; 0x64
 8001c8c:	f000 ff08 	bl	8002aa0 <HAL_Delay>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <bno_get_readings>:

uint16_t bno_get_readings(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

	if (!_sensor_awaiting())
 8001c9c:	f7ff fc7d 	bl	800159a <_sensor_awaiting>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <bno_get_readings+0x18>
		return (0); //Data is not available
 8001cac:	2300      	movs	r3, #0
 8001cae:	e025      	b.n	8001cfc <bno_get_readings+0x64>

	//printf("%d",shtpHeader[2]);
	if (_receive_packet() == true){
 8001cb0:	f7ff fcae 	bl	8001610 <_receive_packet>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01d      	beq.n	8001cf6 <bno_get_readings+0x5e>
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == BNO_SHTP_REPORT_BASE_TIMESTAMP){
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <bno_get_readings+0x68>)
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d106      	bne.n	8001cd2 <bno_get_readings+0x3a>
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <bno_get_readings+0x6c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2bfb      	cmp	r3, #251	; 0xfb
 8001cca:	d102      	bne.n	8001cd2 <bno_get_readings+0x3a>
			_parse_input_report(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001ccc:	f7ff fdf0 	bl	80018b0 <_parse_input_report>
 8001cd0:	e013      	b.n	8001cfa <bno_get_readings+0x62>
		} else if (shtpHeader[2] == CHANNEL_CONTROL){
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <bno_get_readings+0x68>)
 8001cd4:	789b      	ldrb	r3, [r3, #2]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <bno_get_readings+0x4a>
			_parse_command_report(); //This will update responses to commands, calibrationStatus, etc.
 8001cdc:	f7ff fefc 	bl	8001ad8 <_parse_command_report>
 8001ce0:	e00b      	b.n	8001cfa <bno_get_readings+0x62>
		} else if (shtpHeader[2] == CHANNEL_GYRO){
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <bno_get_readings+0x68>)
 8001ce4:	789b      	ldrb	r3, [r3, #2]
 8001ce6:	2205      	movs	r2, #5
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d102      	bne.n	8001cf2 <bno_get_readings+0x5a>
			_parse_input_report();
 8001cec:	f7ff fde0 	bl	80018b0 <_parse_input_report>
 8001cf0:	e003      	b.n	8001cfa <bno_get_readings+0x62>
		} else return 0; //data is irrelevant
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e002      	b.n	8001cfc <bno_get_readings+0x64>
	} else return 0; // data packet isn't ready
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <bno_get_readings+0x64>
	return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000210 	.word	0x20000210
 8001d04:	20000214 	.word	0x20000214

08001d08 <bno_get_yaw>:

float bno_get_yaw(void){
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
	 // get quaternion arguments
	float dqw = _quaternion_to_float(rawQuatReal, rotationVector_Q1);
 8001d0e:	4b69      	ldr	r3, [pc, #420]	; (8001eb4 <bno_get_yaw+0x1ac>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4a68      	ldr	r2, [pc, #416]	; (8001eb8 <bno_get_yaw+0x1b0>)
 8001d16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd8a 	bl	8001838 <_quaternion_to_float>
 8001d24:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float dqx = _quaternion_to_float(rawQuatI, rotationVector_Q1);
 8001d28:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <bno_get_yaw+0x1b4>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	4a62      	ldr	r2, [pc, #392]	; (8001eb8 <bno_get_yaw+0x1b0>)
 8001d30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fd7d 	bl	8001838 <_quaternion_to_float>
 8001d3e:	ed87 0a08 	vstr	s0, [r7, #32]
	float dqy = _quaternion_to_float(rawQuatJ, rotationVector_Q1);
 8001d42:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <bno_get_yaw+0x1b8>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4a5b      	ldr	r2, [pc, #364]	; (8001eb8 <bno_get_yaw+0x1b0>)
 8001d4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fd70 	bl	8001838 <_quaternion_to_float>
 8001d58:	ed87 0a07 	vstr	s0, [r7, #28]
	float dqz = _quaternion_to_float(rawQuatK, rotationVector_Q1);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <bno_get_yaw+0x1bc>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4a55      	ldr	r2, [pc, #340]	; (8001eb8 <bno_get_yaw+0x1b0>)
 8001d64:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fd63 	bl	8001838 <_quaternion_to_float>
 8001d72:	ed87 0a06 	vstr	s0, [r7, #24]

	//printf("%d %d %d %d \n", rawQuatReal,rawQuatI,rawQuatJ,rawQuatK);

	float norm = sqrt(dqw*dqw + dqx*dqx + dqy*dqy + dqz*dqz);
 8001d76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbf7 	bl	8000598 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b10 	vmov	d0, r2, r3
 8001db2:	f009 f823 	bl	800adfc <sqrt>
 8001db6:	ec53 2b10 	vmov	r2, r3, d0
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe ff3b 	bl	8000c38 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	617b      	str	r3, [r7, #20]
	dqw = dqw/norm;
 8001dc6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001dca:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	dqx = dqx/norm;
 8001dd6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001dda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de2:	edc7 7a08 	vstr	s15, [r7, #32]
	dqy = dqy/norm;
 8001de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001dea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df2:	edc7 7a07 	vstr	s15, [r7, #28]
	dqz = dqz/norm;
 8001df6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001dfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e02:	edc7 7a06 	vstr	s15, [r7, #24]

	float ysqr = dqy * dqy;
 8001e06:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e0e:	edc7 7a04 	vstr	s15, [r7, #16]

	// yaw (z-axis rotation)
	float t3 = +2.0 * (dqw * dqz + dqx * dqy);
 8001e12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e32:	edc7 7a03 	vstr	s15, [r7, #12]
	float t4 = +1.0 - 2.0 * (ysqr + dqz * dqz);
 8001e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	ee17 0a90 	vmov	r0, s15
 8001e4a:	f7fe fba5 	bl	8000598 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	f7fe fa43 	bl	80002dc <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	f04f 0000 	mov.w	r0, #0
 8001e5e:	491a      	ldr	r1, [pc, #104]	; (8001ec8 <bno_get_yaw+0x1c0>)
 8001e60:	f7fe fa3a 	bl	80002d8 <__aeabi_dsub>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fee4 	bl	8000c38 <__aeabi_d2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	60bb      	str	r3, [r7, #8]
	float yaw = atan2(t3, t4);
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7fe fb8f 	bl	8000598 <__aeabi_f2d>
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	460d      	mov	r5, r1
 8001e7e:	68b8      	ldr	r0, [r7, #8]
 8001e80:	f7fe fb8a 	bl	8000598 <__aeabi_f2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	ec43 2b11 	vmov	d1, r2, r3
 8001e8c:	ec45 4b10 	vmov	d0, r4, r5
 8001e90:	f008 ff42 	bl	800ad18 <atan2>
 8001e94:	ec53 2b10 	vmov	r2, r3, d0
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7fe fecc 	bl	8000c38 <__aeabi_d2f>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	607b      	str	r3, [r7, #4]

	return (yaw);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	ee07 3a90 	vmov	s15, r3
}
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	20000320 	.word	0x20000320
 8001eb8:	20000006 	.word	0x20000006
 8001ebc:	2000031a 	.word	0x2000031a
 8001ec0:	2000031c 	.word	0x2000031c
 8001ec4:	2000031e 	.word	0x2000031e
 8001ec8:	3ff00000 	.word	0x3ff00000

08001ecc <DWT_Init>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <DWT_Init+0x28>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <DWT_Init+0x28>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <DWT_Init+0x2c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <DWT_Init+0x2c>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000edf0 	.word	0xe000edf0
 8001ef8:	e0001000 	.word	0xe0001000

08001efc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f06:	1df9      	adds	r1, r7, #7
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <__io_putchar+0x24>)
 8001f10:	f003 fbfc 	bl	800570c <HAL_UART_Transmit>
	return ch;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000448 	.word	0x20000448

08001f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2a:	f000 fd48 	bl	80029be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2e:	f000 f84f 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f32:	f000 f9d3 	bl	80022dc <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8001f36:	f000 f899 	bl	800206c <MX_FDCAN2_Init>
  MX_USB_PCD_Init();
 8001f3a:	f000 f9a7 	bl	800228c <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8001f3e:	f000 f8db 	bl	80020f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001f42:	f000 f919 	bl	8002178 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f46:	f000 f955 	bl	80021f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8001f4a:	f7ff ffbf 	bl	8001ecc <DWT_Init>
  printf("=== HAL init done, proceeding ... ===\n");
 8001f4e:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <main+0x9c>)
 8001f50:	f005 fa08 	bl	8007364 <puts>

  //adnsEnableDebugReports();
  adnsInit();
 8001f54:	f7ff f9be 	bl	80012d4 <adnsInit>

  if(!bno_setup()) printf("=== Could NOT initialize the BNO085 ! ===\n");
 8001f58:	f7ff fdde 	bl	8001b18 <bno_setup>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <main+0x4a>
 8001f68:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <main+0xa0>)
 8001f6a:	f005 f9fb 	bl	8007364 <puts>
  bno_enable_rotation_vector(50);
 8001f6e:	2032      	movs	r0, #50	; 0x32
 8001f70:	f7ff fe82 	bl	8001c78 <bno_enable_rotation_vector>
  setup();
 8001f74:	f000 fa45 	bl	8002402 <setup>
  printf("=== User init done, proceeding ... ===\n");
 8001f78:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <main+0xa4>)
 8001f7a:	f005 f9f3 	bl	8007364 <puts>
  double x = 0, y = 0;
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001f96:	f000 fa3b 	bl	8002410 <loop>
	  if(bno_get_readings() != 0) printf("yaw %.4f \n",bno_get_yaw());
 8001f9a:	f7ff fe7d 	bl	8001c98 <bno_get_readings>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f8      	beq.n	8001f96 <main+0x72>
 8001fa4:	f7ff feb0 	bl	8001d08 <bno_get_yaw>
 8001fa8:	ee10 3a10 	vmov	r3, s0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe faf3 	bl	8000598 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <main+0xa8>)
 8001fb8:	f005 f966 	bl	8007288 <iprintf>
	  loop();
 8001fbc:	e7eb      	b.n	8001f96 <main+0x72>
 8001fbe:	bf00      	nop
 8001fc0:	0800c3c8 	.word	0x0800c3c8
 8001fc4:	0800c3f0 	.word	0x0800c3f0
 8001fc8:	0800c41c 	.word	0x0800c41c
 8001fcc:	0800c444 	.word	0x0800c444

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b094      	sub	sp, #80	; 0x50
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	2238      	movs	r2, #56	; 0x38
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 fac0 	bl	8007564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ff6:	f001 fbfd 	bl	80037f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001ffa:	2322      	movs	r3, #34	; 0x22
 8001ffc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002004:	2340      	movs	r3, #64	; 0x40
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002008:	2301      	movs	r3, #1
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200c:	2302      	movs	r3, #2
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002010:	2302      	movs	r3, #2
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002014:	2301      	movs	r3, #1
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002018:	230c      	movs	r3, #12
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201c:	2302      	movs	r3, #2
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002024:	2304      	movs	r3, #4
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4618      	mov	r0, r3
 800202e:	f001 fc95 	bl	800395c <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002038:	f000 f9de 	bl	80023f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002040:	2303      	movs	r3, #3
 8002042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f001 ff99 	bl	8003f8c <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002060:	f000 f9ca 	bl	80023f8 <Error_Handler>
  }
}
 8002064:	bf00      	nop
 8002066:	3750      	adds	r7, #80	; 0x50
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <MX_FDCAN2_Init+0x88>)
 8002074:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800207c:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 800208a:	2200      	movs	r2, #0
 800208c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 8002090:	2200      	movs	r2, #0
 8002092:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 8002096:	2200      	movs	r2, #0
 8002098:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 800209c:	2210      	movs	r2, #16
 800209e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020a8:	2202      	movs	r2, #2
 80020aa:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <MX_FDCAN2_Init+0x84>)
 80020de:	f000 fde5 	bl	8002cac <HAL_FDCAN_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80020e8:	f000 f986 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000334 	.word	0x20000334
 80020f4:	40006800 	.word	0x40006800

080020f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <MX_I2C2_Init+0x74>)
 80020fe:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <MX_I2C2_Init+0x78>)
 8002100:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_I2C2_Init+0x74>)
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <MX_I2C2_Init+0x7c>)
 8002106:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <MX_I2C2_Init+0x74>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <MX_I2C2_Init+0x74>)
 8002110:	2201      	movs	r2, #1
 8002112:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <MX_I2C2_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_I2C2_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_I2C2_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_I2C2_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_I2C2_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002132:	480e      	ldr	r0, [pc, #56]	; (800216c <MX_I2C2_Init+0x74>)
 8002134:	f001 f928 	bl	8003388 <HAL_I2C_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800213e:	f000 f95b 	bl	80023f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002142:	2100      	movs	r1, #0
 8002144:	4809      	ldr	r0, [pc, #36]	; (800216c <MX_I2C2_Init+0x74>)
 8002146:	f001 f9ae 	bl	80034a6 <HAL_I2CEx_ConfigAnalogFilter>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002150:	f000 f952 	bl	80023f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002154:	2100      	movs	r1, #0
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_I2C2_Init+0x74>)
 8002158:	f001 f9f0 	bl	800353c <HAL_I2CEx_ConfigDigitalFilter>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002162:	f000 f949 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000398 	.word	0x20000398
 8002170:	40005800 	.word	0x40005800
 8002174:	2010091a 	.word	0x2010091a

08002178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <MX_SPI1_Init+0x74>)
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <MX_SPI1_Init+0x78>)
 8002180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <MX_SPI1_Init+0x74>)
 8002184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <MX_SPI1_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_SPI1_Init+0x74>)
 8002192:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002196:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_SPI1_Init+0x74>)
 800219a:	2202      	movs	r2, #2
 800219c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_SPI1_Init+0x74>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_SPI1_Init+0x74>)
 80021a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_SPI1_Init+0x74>)
 80021ae:	2220      	movs	r2, #32
 80021b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_SPI1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_SPI1_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_SPI1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_SPI1_Init+0x74>)
 80021c6:	2207      	movs	r2, #7
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_SPI1_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_SPI1_Init+0x74>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_SPI1_Init+0x74>)
 80021d8:	f002 fb30 	bl	800483c <HAL_SPI_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021e2:	f000 f909 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200003e4 	.word	0x200003e4
 80021f0:	40013000 	.word	0x40013000

080021f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <MX_USART2_UART_Init+0x90>)
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <MX_USART2_UART_Init+0x94>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_USART2_UART_Init+0x90>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_USART2_UART_Init+0x90>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_USART2_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002238:	2200      	movs	r2, #0
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <MX_USART2_UART_Init+0x90>)
 800223e:	f003 fa15 	bl	800566c <HAL_UART_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002248:	f000 f8d6 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800224c:	2100      	movs	r1, #0
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002250:	f003 ffdc 	bl	800620c <HAL_UARTEx_SetTxFifoThreshold>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800225a:	f000 f8cd 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4808      	ldr	r0, [pc, #32]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002262:	f004 f811 	bl	8006288 <HAL_UARTEx_SetRxFifoThreshold>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800226c:	f000 f8c4 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_USART2_UART_Init+0x90>)
 8002272:	f003 ff92 	bl	800619a <HAL_UARTEx_DisableFifoMode>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800227c:	f000 f8bc 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000448 	.word	0x20000448
 8002288:	40004400 	.word	0x40004400

0800228c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <MX_USB_PCD_Init+0x4c>)
 8002294:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 8002298:	2208      	movs	r2, #8
 800229a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 800229e:	2202      	movs	r2, #2
 80022a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 80022a4:	2202      	movs	r2, #2
 80022a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_USB_PCD_Init+0x48>)
 80022c2:	f001 f987 	bl	80035d4 <HAL_PCD_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80022cc:	f000 f894 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200004d8 	.word	0x200004d8
 80022d8:	40005c00 	.word	0x40005c00

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <MX_GPIO_Init+0x114>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <MX_GPIO_Init+0x114>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <MX_GPIO_Init+0x114>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <MX_GPIO_Init+0x114>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <MX_GPIO_Init+0x114>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <MX_GPIO_Init+0x114>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_IMU_Pin|CS_IMU_Pin|CS_ADNS_Pin, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f240 4111 	movw	r1, #1041	; 0x411
 8002328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232c:	f001 f814 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2110      	movs	r1, #16
 8002334:	482f      	ldr	r0, [pc, #188]	; (80023f4 <MX_GPIO_Init+0x118>)
 8002336:	f001 f80f 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_IMU_Pin */
  GPIO_InitStruct.Pin = RST_IMU_Pin;
 800233a:	2301      	movs	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_IMU_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002354:	f000 fe66 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : AU_INT_Pin */
  GPIO_InitStruct.Pin = AU_INT_Pin;
 8002358:	2302      	movs	r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002362:	2302      	movs	r3, #2
 8002364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AU_INT_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 030c 	add.w	r3, r7, #12
 800236a:	4619      	mov	r1, r3
 800236c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002370:	f000 fe58 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_IMU_Pin CS_ADNS_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin|CS_ADNS_Pin;
 8002374:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f000 fe48 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ANDS_Pin */
  GPIO_InitStruct.Pin = INT_ANDS_Pin;
 8002394:	2301      	movs	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002398:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800239c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800239e:	2301      	movs	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ANDS_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4812      	ldr	r0, [pc, #72]	; (80023f4 <MX_GPIO_Init+0x118>)
 80023aa:	f000 fe3b 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80023ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f000 fe2d 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 80023ca:	2310      	movs	r3, #16
 80023cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 030c 	add.w	r3, r7, #12
 80023de:	4619      	mov	r1, r3
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_GPIO_Init+0x118>)
 80023e2:	f000 fe1f 	bl	8003024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e6:	bf00      	nop
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	48000400 	.word	0x48000400

080023f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023fc:	b672      	cpsid	i
}
 80023fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002400:	e7fe      	b.n	8002400 <Error_Handler+0x8>

08002402 <setup>:
void setup(void){
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <loop>:

void loop(void){
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_MspInit+0x44>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_MspInit+0x44>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6613      	str	r3, [r2, #96]	; 0x60
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_MspInit+0x44>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_MspInit+0x44>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <HAL_MspInit+0x44>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_MspInit+0x44>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002456:	f001 fa71 	bl	800393c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b09e      	sub	sp, #120	; 0x78
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2250      	movs	r2, #80	; 0x50
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f005 f86b 	bl	8007564 <memset>
  if(hfdcan->Instance==FDCAN2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <HAL_FDCAN_MspInit+0xa8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d137      	bne.n	8002508 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800249e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 ff8b 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80024b4:	f7ff ffa0 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_FDCAN_MspInit+0xac>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <HAL_FDCAN_MspInit+0xac>)
 80024be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c2:	6593      	str	r3, [r2, #88]	; 0x58
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_FDCAN_MspInit+0xac>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_FDCAN_MspInit+0xac>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <HAL_FDCAN_MspInit+0xac>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_FDCAN_MspInit+0xac>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80024e8:	2360      	movs	r3, #96	; 0x60
 80024ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80024f8:	2309      	movs	r3, #9
 80024fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002500:	4619      	mov	r1, r3
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_FDCAN_MspInit+0xb0>)
 8002504:	f000 fd8e 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002508:	bf00      	nop
 800250a:	3778      	adds	r7, #120	; 0x78
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40006800 	.word	0x40006800
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400

0800251c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b09e      	sub	sp, #120	; 0x78
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2250      	movs	r2, #80	; 0x50
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f005 f811 	bl	8007564 <memset>
  if(hi2c->Instance==I2C2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_I2C_MspInit+0xa8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d137      	bne.n	80025bc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4618      	mov	r0, r3
 800255a:	f001 ff33 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002564:	f7ff ff48 	bl	80023f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_I2C_MspInit+0xac>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_I2C_MspInit+0xac>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_I2C_MspInit+0xac>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002580:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002584:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002592:	2304      	movs	r3, #4
 8002594:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a0:	f000 fd40 	bl	8003024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_I2C_MspInit+0xac>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_I2C_MspInit+0xac>)
 80025aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ae:	6593      	str	r3, [r2, #88]	; 0x58
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_I2C_MspInit+0xac>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025bc:	bf00      	nop
 80025be:	3778      	adds	r7, #120	; 0x78
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40005800 	.word	0x40005800
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_SPI_MspInit+0x7c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d128      	bne.n	8002640 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_SPI_MspInit+0x80>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_SPI_MspInit+0x80>)
 80025f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_SPI_MspInit+0x80>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_SPI_MspInit+0x80>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_SPI_MspInit+0x80>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_SPI_MspInit+0x80>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800261e:	23e0      	movs	r3, #224	; 0xe0
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800262e:	2305      	movs	r3, #5
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263c:	f000 fcf2 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40013000 	.word	0x40013000
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b09e      	sub	sp, #120	; 0x78
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2250      	movs	r2, #80	; 0x50
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f004 ff77 	bl	8007564 <memset>
  if(huart->Instance==USART2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_UART_MspInit+0xa8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d136      	bne.n	80026ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002680:	2302      	movs	r3, #2
 8002682:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4618      	mov	r0, r3
 800268e:	f001 fe99 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002698:	f7ff feae 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <HAL_UART_MspInit+0xac>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4a16      	ldr	r2, [pc, #88]	; (80026fc <HAL_UART_MspInit+0xac>)
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_UART_MspInit+0xac>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_UART_MspInit+0xac>)
 80026b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b8:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_UART_MspInit+0xac>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_UART_MspInit+0xac>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026cc:	230c      	movs	r3, #12
 80026ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026dc:	2307      	movs	r3, #7
 80026de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026e4:	4619      	mov	r1, r3
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ea:	f000 fc9b 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026ee:	bf00      	nop
 80026f0:	3778      	adds	r7, #120	; 0x78
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40004400 	.word	0x40004400
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b098      	sub	sp, #96	; 0x60
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2250      	movs	r2, #80	; 0x50
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f004 ff27 	bl	8007564 <memset>
  if(hpcd->Instance==USB)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_PCD_MspInit+0x60>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d11a      	bne.n	8002756 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002724:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002726:	2300      	movs	r3, #0
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fe48 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800273a:	f7ff fe5d 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_PCD_MspInit+0x64>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_PCD_MspInit+0x64>)
 8002744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002748:	6593      	str	r3, [r2, #88]	; 0x58
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_PCD_MspInit+0x64>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3760      	adds	r7, #96	; 0x60
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40005c00 	.word	0x40005c00
 8002764:	40021000 	.word	0x40021000

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800276c:	e7fe      	b.n	800276c <NMI_Handler+0x4>

0800276e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <HardFault_Handler+0x4>

08002774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <MemManage_Handler+0x4>

0800277a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <BusFault_Handler+0x4>

08002780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <UsageFault_Handler+0x4>

08002786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b4:	f000 f956 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return 1;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_kill>:

int _kill(int pid, int sig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027d6:	f004 ff17 	bl	8007608 <__errno>
 80027da:	4603      	mov	r3, r0
 80027dc:	2216      	movs	r2, #22
 80027de:	601a      	str	r2, [r3, #0]
  return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_exit>:

void _exit (int status)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe7 	bl	80027cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80027fe:	e7fe      	b.n	80027fe <_exit+0x12>

08002800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00a      	b.n	8002828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002812:	f3af 8000 	nop.w
 8002816:	4601      	mov	r1, r0
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	b2ca      	uxtb	r2, r1
 8002820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf0      	blt.n	8002812 <_read+0x12>
  }

  return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fb51 	bl	8001efc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf1      	blt.n	800284c <_write+0x12>
  }
  return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_close>:

int _close(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	605a      	str	r2, [r3, #4]
  return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_isatty>:

int _isatty(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <_sbrk+0x5c>)
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <_sbrk+0x60>)
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_sbrk+0x64>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <_sbrk+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800290c:	f004 fe7c 	bl	8007608 <__errno>
 8002910:	4603      	mov	r3, r0
 8002912:	220c      	movs	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e009      	b.n	8002930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_sbrk+0x64>)
 800292c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2001c000 	.word	0x2001c000
 800293c:	00000400 	.word	0x00000400
 8002940:	200007cc 	.word	0x200007cc
 8002944:	20000920 	.word	0x20000920

08002948 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <SystemInit+0x20>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <SystemInit+0x20>)
 8002954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800296e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002972:	490e      	ldr	r1, [pc, #56]	; (80029ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <LoopForever+0xe>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002988:	4c0b      	ldr	r4, [pc, #44]	; (80029b8 <LoopForever+0x16>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002996:	f7ff ffd7 	bl	8002948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f004 fe3b 	bl	8007614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800299e:	f7ff fac1 	bl	8001f24 <main>

080029a2 <LoopForever>:

LoopForever:
    b LoopForever
 80029a2:	e7fe      	b.n	80029a2 <LoopForever>
  ldr   r0, =_estack
 80029a4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80029b0:	0800d568 	.word	0x0800d568
  ldr r2, =_sbss
 80029b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80029b8:	20000920 	.word	0x20000920

080029bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC1_2_IRQHandler>

080029be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f000 f93d 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ce:	200f      	movs	r0, #15
 80029d0:	f000 f80e 	bl	80029f0 <HAL_InitTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	e001      	b.n	80029e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029e0:	f7ff fd1e 	bl	8002420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029e4:	79fb      	ldrb	r3, [r7, #7]

}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_InitTick+0x68>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d022      	beq.n	8002a4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_InitTick+0x6c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_InitTick+0x68>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f93a 	bl	8002c92 <HAL_SYSTICK_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10f      	bne.n	8002a44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d809      	bhi.n	8002a3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a32:	f000 f914 	bl	8002c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_InitTick+0x70>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e007      	b.n	8002a4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e004      	b.n	8002a4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e001      	b.n	8002a4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000010 	.word	0x20000010
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_IncTick+0x1c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_IncTick+0x20>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <HAL_IncTick+0x1c>)
 8002a74:	6013      	str	r3, [r2, #0]
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	200007d0 	.word	0x200007d0
 8002a84:	20000010 	.word	0x20000010

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200007d0 	.word	0x200007d0

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d004      	beq.n	8002ac4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_Delay+0x40>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac4:	bf00      	nop
 8002ac6:	f7ff ffdf 	bl	8002a88 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d8f7      	bhi.n	8002ac6 <HAL_Delay+0x26>
  {
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000010 	.word	0x20000010

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f7ff ff8e 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff47 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff5e 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff90 	bl	8002b9c <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5f 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffb2 	bl	8002c04 <SysTick_Config>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e147      	b.n	8002f4e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fbc8 	bl	8002468 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7ff fece 	bl	8002a88 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cee:	e012      	b.n	8002d16 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cf0:	f7ff feca 	bl	8002a88 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b0a      	cmp	r3, #10
 8002cfc:	d90b      	bls.n	8002d16 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e11b      	b.n	8002f4e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d0e5      	beq.n	8002cf0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d34:	f7ff fea8 	bl	8002a88 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d3a:	e012      	b.n	8002d62 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d3c:	f7ff fea4 	bl	8002a88 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b0a      	cmp	r3, #10
 8002d48:	d90b      	bls.n	8002d62 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0f5      	b.n	8002f4e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0e5      	beq.n	8002d3c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0202 	orr.w	r2, r2, #2
 8002d7e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a74      	ldr	r2, [pc, #464]	; (8002f58 <HAL_FDCAN_Init+0x2ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d103      	bne.n	8002d92 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d8a:	4a74      	ldr	r2, [pc, #464]	; (8002f5c <HAL_FDCAN_Init+0x2b0>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7c1b      	ldrb	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d108      	bne.n	8002dac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da8:	619a      	str	r2, [r3, #24]
 8002daa:	e007      	b.n	8002dbc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7c5b      	ldrb	r3, [r3, #17]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d108      	bne.n	8002dd6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd2:	619a      	str	r2, [r3, #24]
 8002dd4:	e007      	b.n	8002de6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7c9b      	ldrb	r3, [r3, #18]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d108      	bne.n	8002e00 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dfc:	619a      	str	r2, [r3, #24]
 8002dfe:	e007      	b.n	8002e10 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e0e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002e34:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0210 	bic.w	r2, r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0204 	orr.w	r2, r2, #4
 8002e5c:	619a      	str	r2, [r3, #24]
 8002e5e:	e02c      	b.n	8002eba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d028      	beq.n	8002eba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d01c      	beq.n	8002eaa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0210 	orr.w	r2, r2, #16
 8002e8e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d110      	bne.n	8002eba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	619a      	str	r2, [r3, #24]
 8002ea8:	e007      	b.n	8002eba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ed2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ee2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ee4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eee:	d115      	bne.n	8002f1c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	3b01      	subs	r3, #1
 8002efc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002efe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	3b01      	subs	r3, #1
 8002f06:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f18:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f1a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f814 	bl	8002f60 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40006400 	.word	0x40006400
 8002f5c:	40006500 	.word	0x40006500

08002f60 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002f6a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d103      	bne.n	8002f7e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f7c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8c:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	061a      	lsls	r2, r3, #24
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e005      	b.n	8003000 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d3f3      	bcc.n	8002ff4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	4000a400 	.word	0x4000a400
 8003020:	40006800 	.word	0x40006800

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003032:	e15a      	b.n	80032ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 814c 	beq.w	80032e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d005      	beq.n	8003064 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003060:	2b02      	cmp	r3, #2
 8003062:	d130      	bne.n	80030c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800309a:	2201      	movs	r2, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 0201 	and.w	r2, r3, #1
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d017      	beq.n	8003102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d123      	bne.n	8003156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	6939      	ldr	r1, [r7, #16]
 8003152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0203 	and.w	r2, r3, #3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80a6 	beq.w	80032e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003198:	4b5b      	ldr	r3, [pc, #364]	; (8003308 <HAL_GPIO_Init+0x2e4>)
 800319a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319c:	4a5a      	ldr	r2, [pc, #360]	; (8003308 <HAL_GPIO_Init+0x2e4>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6613      	str	r3, [r2, #96]	; 0x60
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <HAL_GPIO_Init+0x2e4>)
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b0:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_GPIO_Init+0x2e8>)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	3302      	adds	r3, #2
 80031b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031da:	d01f      	beq.n	800321c <HAL_GPIO_Init+0x1f8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a4c      	ldr	r2, [pc, #304]	; (8003310 <HAL_GPIO_Init+0x2ec>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d019      	beq.n	8003218 <HAL_GPIO_Init+0x1f4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <HAL_GPIO_Init+0x2f0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <HAL_GPIO_Init+0x1f0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a4a      	ldr	r2, [pc, #296]	; (8003318 <HAL_GPIO_Init+0x2f4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00d      	beq.n	8003210 <HAL_GPIO_Init+0x1ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a49      	ldr	r2, [pc, #292]	; (800331c <HAL_GPIO_Init+0x2f8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <HAL_GPIO_Init+0x1e8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_GPIO_Init+0x2fc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_GPIO_Init+0x1e4>
 8003204:	2305      	movs	r3, #5
 8003206:	e00a      	b.n	800321e <HAL_GPIO_Init+0x1fa>
 8003208:	2306      	movs	r3, #6
 800320a:	e008      	b.n	800321e <HAL_GPIO_Init+0x1fa>
 800320c:	2304      	movs	r3, #4
 800320e:	e006      	b.n	800321e <HAL_GPIO_Init+0x1fa>
 8003210:	2303      	movs	r3, #3
 8003212:	e004      	b.n	800321e <HAL_GPIO_Init+0x1fa>
 8003214:	2302      	movs	r3, #2
 8003216:	e002      	b.n	800321e <HAL_GPIO_Init+0x1fa>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_GPIO_Init+0x1fa>
 800321c:	2300      	movs	r3, #0
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	f002 0203 	and.w	r2, r2, #3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4093      	lsls	r3, r2
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322e:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_GPIO_Init+0x2e8>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_GPIO_Init+0x300>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	43db      	mvns	r3, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4013      	ands	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003260:	4a30      	ldr	r2, [pc, #192]	; (8003324 <HAL_GPIO_Init+0x300>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_GPIO_Init+0x300>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800328a:	4a26      	ldr	r2, [pc, #152]	; (8003324 <HAL_GPIO_Init+0x300>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_GPIO_Init+0x300>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_GPIO_Init+0x300>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_GPIO_Init+0x300>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032de:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_GPIO_Init+0x300>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f ae9d 	bne.w	8003034 <HAL_GPIO_Init+0x10>
  }
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40021000 	.word	0x40021000
 800330c:	40010000 	.word	0x40010000
 8003310:	48000400 	.word	0x48000400
 8003314:	48000800 	.word	0x48000800
 8003318:	48000c00 	.word	0x48000c00
 800331c:	48001000 	.word	0x48001000
 8003320:	48001400 	.word	0x48001400
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e001      	b.n	800334a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
 8003364:	4613      	mov	r3, r2
 8003366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003374:	e002      	b.n	800337c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e081      	b.n	800349e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff f8b4 	bl	800251c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	e006      	b.n	8003410 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800340e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d104      	bne.n	8003422 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003420:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d138      	bne.n	800352e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e032      	b.n	8003530 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2224      	movs	r2, #36	; 0x24
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d139      	bne.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800355c:	2302      	movs	r3, #2
 800355e:	e033      	b.n	80035c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800358e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d6:	b08b      	sub	sp, #44	; 0x2c
 80035d8:	af06      	add	r7, sp, #24
 80035da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0d7      	b.n	8003796 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff f880 	bl	8002700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2203      	movs	r2, #3
 8003604:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f002 fec7 	bl	80063a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	e04c      	b.n	80036b2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	3301      	adds	r3, #1
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	b298      	uxth	r0, r3
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3336      	adds	r3, #54	; 0x36
 8003656:	4602      	mov	r2, r0
 8003658:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	3303      	adds	r3, #3
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	3338      	adds	r3, #56	; 0x38
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	333c      	adds	r3, #60	; 0x3c
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	3340      	adds	r3, #64	; 0x40
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	3301      	adds	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3ad      	bcc.n	8003618 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e044      	b.n	800374c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	3301      	adds	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3b5      	bcc.n	80036c2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	687e      	ldr	r6, [r7, #4]
 800375e:	466d      	mov	r5, sp
 8003760:	f106 0410 	add.w	r4, r6, #16
 8003764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	1d33      	adds	r3, r6, #4
 800376e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003770:	6838      	ldr	r0, [r7, #0]
 8003772:	f002 fe30 	bl	80063d6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f805 	bl	800379e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800379e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d141      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d131      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003816:	4a46      	ldr	r2, [pc, #280]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003828:	4a41      	ldr	r2, [pc, #260]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003830:	4b40      	ldr	r3, [pc, #256]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2232      	movs	r2, #50	; 0x32
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a3f      	ldr	r2, [pc, #252]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003846:	e002      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384e:	4b38      	ldr	r3, [pc, #224]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d102      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f2      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003862:	4b33      	ldr	r3, [pc, #204]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d158      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e057      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003874:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387a:	4a2d      	ldr	r2, [pc, #180]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003880:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003884:	e04d      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d141      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d131      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a2:	4a23      	ldr	r2, [pc, #140]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ac:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2232      	movs	r2, #50	; 0x32
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d2:	e002      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d102      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f2      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d112      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e011      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003910:	e007      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003920:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40007000 	.word	0x40007000
 8003934:	20000008 	.word	0x20000008
 8003938:	431bde83 	.word	0x431bde83

0800393c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394a:	6093      	str	r3, [r2, #8]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40007000 	.word	0x40007000

0800395c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e306      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d075      	beq.n	8003a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397a:	4b97      	ldr	r3, [pc, #604]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003984:	4b94      	ldr	r3, [pc, #592]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d102      	bne.n	800399a <HAL_RCC_OscConfig+0x3e>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_OscConfig+0x44>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05b      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d157      	bne.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e2e1      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x74>
 80039c2:	4b85      	ldr	r3, [pc, #532]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a84      	ldr	r2, [pc, #528]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x98>
 80039da:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b7c      	ldr	r3, [pc, #496]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7b      	ldr	r2, [pc, #492]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xb0>
 80039f4:	4b78      	ldr	r3, [pc, #480]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a77      	ldr	r2, [pc, #476]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b75      	ldr	r3, [pc, #468]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a74      	ldr	r2, [pc, #464]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7ff f838 	bl	8002a88 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7ff f834 	bl	8002a88 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e2a6      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xc0>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7ff f824 	bl	8002a88 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7ff f820 	bl	8002a88 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e292      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a56:	4b60      	ldr	r3, [pc, #384]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xe8>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d075      	beq.n	8003b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a72:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7c:	4b56      	ldr	r3, [pc, #344]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_OscConfig+0x136>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_OscConfig+0x13c>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d11f      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a98:	4b4f      	ldr	r3, [pc, #316]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x154>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e265      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	4946      	ldr	r1, [pc, #280]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe ff91 	bl	80029f0 <HAL_InitTick>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d043      	beq.n	8003b5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e251      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe ffcc 	bl	8002a88 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fe ffc8 	bl	8002a88 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e23a      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b06:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	492d      	ldr	r1, [pc, #180]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 8003b26:	e01a      	b.n	8003b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fe ffa8 	bl	8002a88 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fe ffa4 	bl	8002a88 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e216      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1e0>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d041      	beq.n	8003bee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01c      	beq.n	8003bac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b78:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fe ff81 	bl	8002a88 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fe ff7d 	bl	8002a88 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1ef      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ef      	beq.n	8003b8a <HAL_RCC_OscConfig+0x22e>
 8003baa:	e020      	b.n	8003bee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fe ff64 	bl	8002a88 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc2:	e00d      	b.n	8003be0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc4:	f7fe ff60 	bl	8002a88 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d906      	bls.n	8003be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1d2      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be0:	4b8c      	ldr	r3, [pc, #560]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ea      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80a6 	beq.w	8003d48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c00:	4b84      	ldr	r3, [pc, #528]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2b4>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x2b6>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	4a7e      	ldr	r2, [pc, #504]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6593      	str	r3, [r2, #88]	; 0x58
 8003c22:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c32:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe ff1d 	bl	8002a88 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fe ff19 	bl	8002a88 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e18b      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c64:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x4bc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_RCC_OscConfig+0x32e>
 8003c78:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c88:	e024      	b.n	8003cd4 <HAL_RCC_OscConfig+0x378>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d110      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x358>
 8003c92:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	4a5e      	ldr	r2, [pc, #376]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	4a5a      	ldr	r2, [pc, #360]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb2:	e00f      	b.n	8003cd4 <HAL_RCC_OscConfig+0x378>
 8003cb4:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d016      	beq.n	8003d0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fe fed4 	bl	8002a88 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fe fed0 	bl	8002a88 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e140      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfa:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ed      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x388>
 8003d08:	e015      	b.n	8003d36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fe febd 	bl	8002a88 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fe feb9 	bl	8002a88 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e129      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d28:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ed      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d03c      	beq.n	8003dce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d5c:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d62:	4a2c      	ldr	r2, [pc, #176]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fe fe8c 	bl	8002a88 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d74:	f7fe fe88 	bl	8002a88 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0fa      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d86:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ef      	beq.n	8003d74 <HAL_RCC_OscConfig+0x418>
 8003d94:	e01b      	b.n	8003dce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fe fe6f 	bl	8002a88 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dae:	f7fe fe6b 	bl	8002a88 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e0dd      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc0:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ef      	bne.n	8003dae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80d1 	beq.w	8003f7a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	f000 808b 	beq.w	8003efc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d15e      	bne.n	8003eac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fe45 	bl	8002a88 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	e00c      	b.n	8003e1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe fe41 	bl	8002a88 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d905      	bls.n	8003e1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0b3      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ec      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e28:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	4b56      	ldr	r3, [pc, #344]	; (8003f88 <HAL_RCC_OscConfig+0x62c>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6a11      	ldr	r1, [r2, #32]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e4a:	0852      	lsrs	r2, r2, #1
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0552      	lsls	r2, r2, #21
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0652      	lsls	r2, r2, #25
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e62:	06d2      	lsls	r2, r2, #27
 8003e64:	430a      	orrs	r2, r1
 8003e66:	4947      	ldr	r1, [pc, #284]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e6c:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a44      	ldr	r2, [pc, #272]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e78:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe fe00 	bl	8002a88 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe fdfc 	bl	8002a88 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e06e      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x530>
 8003eaa:	e066      	b.n	8003f7a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a34      	ldr	r2, [pc, #208]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003eca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fdd8 	bl	8002a88 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fdd4 	bl	8002a88 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e046      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x580>
 8003efa:	e03e      	b.n	8003f7a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e039      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_RCC_OscConfig+0x628>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d12c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	3b01      	subs	r3, #1
 8003f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d123      	bne.n	8003f76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11b      	bne.n	8003f76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d113      	bne.n	8003f76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	019f800c 	.word	0x019f800c

08003f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e11e      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b91      	ldr	r3, [pc, #580]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 020f 	bic.w	r2, r3, #15
 8003fba:	498c      	ldr	r1, [pc, #560]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b8a      	ldr	r3, [pc, #552]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e106      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d073      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d129      	bne.n	800403c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe8:	4b81      	ldr	r3, [pc, #516]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0f4      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ff8:	f000 f99e 	bl	8004338 <RCC_GetSysClockFreqFromPLLSource>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <HAL_RCC_ClockConfig+0x268>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d93f      	bls.n	8004086 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004006:	4b7a      	ldr	r3, [pc, #488]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800401a:	2b00      	cmp	r3, #0
 800401c:	d033      	beq.n	8004086 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004022:	2b00      	cmp	r3, #0
 8004024:	d12f      	bne.n	8004086 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004026:	4b72      	ldr	r3, [pc, #456]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402e:	4a70      	ldr	r2, [pc, #448]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e024      	b.n	8004086 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d107      	bne.n	8004054 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004044:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0c6      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004054:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0be      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004064:	f000 f8ce 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8004068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4a61      	ldr	r2, [pc, #388]	; (80041f4 <HAL_RCC_ClockConfig+0x268>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d909      	bls.n	8004086 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004072:	4b5f      	ldr	r3, [pc, #380]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407a:	4a5d      	ldr	r2, [pc, #372]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 800407c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004080:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004086:	4b5a      	ldr	r3, [pc, #360]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4957      	ldr	r1, [pc, #348]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fe fcf6 	bl	8002a88 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fe fcf2 	bl	8002a88 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e095      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 020c 	and.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1eb      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d023      	beq.n	800411c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a42      	ldr	r2, [pc, #264]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80040e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040f8:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4936      	ldr	r1, [pc, #216]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
 800411a:	e008      	b.n	800412e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d105      	bne.n	800412e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4a32      	ldr	r2, [pc, #200]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d21d      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413c:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 020f 	bic.w	r2, r3, #15
 8004144:	4929      	ldr	r1, [pc, #164]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800414c:	f7fe fc9c 	bl	8002a88 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fe fc98 	bl	8002a88 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e03b      	b.n	80041e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d1ed      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4917      	ldr	r1, [pc, #92]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a2:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490f      	ldr	r1, [pc, #60]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b6:	f000 f825 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <HAL_RCC_ClockConfig+0x264>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490c      	ldr	r1, [pc, #48]	; (80041f8 <HAL_RCC_ClockConfig+0x26c>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x270>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe fc08 	bl	80029f0 <HAL_InitTick>
 80041e0:	4603      	mov	r3, r0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40022000 	.word	0x40022000
 80041f0:	40021000 	.word	0x40021000
 80041f4:	04c4b400 	.word	0x04c4b400
 80041f8:	0800d050 	.word	0x0800d050
 80041fc:	20000008 	.word	0x20000008
 8004200:	2000000c 	.word	0x2000000c

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800420a:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b04      	cmp	r3, #4
 8004214:	d102      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004216:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e047      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b08      	cmp	r3, #8
 8004226:	d102      	bne.n	800422e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004228:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e03e      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d136      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	3301      	adds	r3, #1
 8004250:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004258:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004262:	68d2      	ldr	r2, [r2, #12]
 8004264:	0a12      	lsrs	r2, r2, #8
 8004266:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	617b      	str	r3, [r7, #20]
      break;
 8004270:	e00c      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	fbb2 f3f3 	udiv	r3, r2, r3
 800427a:	4a10      	ldr	r2, [pc, #64]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800427c:	68d2      	ldr	r2, [r2, #12]
 800427e:	0a12      	lsrs	r2, r2, #8
 8004280:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
      break;
 800428a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0e5b      	lsrs	r3, r3, #25
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	3301      	adds	r3, #1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e001      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042ac:	693b      	ldr	r3, [r7, #16]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	007a1200 	.word	0x007a1200

080042c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000008 	.word	0x20000008

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	0800d060 	.word	0x0800d060

0800430c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004310:	f7ff ffda 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0adb      	lsrs	r3, r3, #11
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	0800d060 	.word	0x0800d060

08004338 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800433e:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d10c      	bne.n	8004376 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800435c:	4a17      	ldr	r2, [pc, #92]	; (80043bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004366:	68d2      	ldr	r2, [r2, #12]
 8004368:	0a12      	lsrs	r2, r2, #8
 800436a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
    break;
 8004374:	e00c      	b.n	8004390 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004380:	68d2      	ldr	r2, [r2, #12]
 8004382:	0a12      	lsrs	r2, r2, #8
 8004384:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004388:	fb02 f303 	mul.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    break;
 800438e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	0e5b      	lsrs	r3, r3, #25
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	3301      	adds	r3, #1
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043aa:	687b      	ldr	r3, [r7, #4]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40021000 	.word	0x40021000
 80043bc:	007a1200 	.word	0x007a1200
 80043c0:	00f42400 	.word	0x00f42400

080043c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043cc:	2300      	movs	r3, #0
 80043ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043d0:	2300      	movs	r3, #0
 80043d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8098 	beq.w	8004512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e2:	2300      	movs	r3, #0
 80043e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e6:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6593      	str	r3, [r2, #88]	; 0x58
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440a:	2301      	movs	r3, #1
 800440c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800440e:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a39      	ldr	r2, [pc, #228]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800441a:	f7fe fb35 	bl	8002a88 <HAL_GetTick>
 800441e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004420:	e009      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fe fb31 	bl	8002a88 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d902      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	74fb      	strb	r3, [r7, #19]
        break;
 8004434:	e005      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ef      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d159      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004448:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01e      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	429a      	cmp	r2, r3
 8004462:	d019      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004480:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fe faf1 	bl	8002a88 <HAL_GetTick>
 80044a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a8:	e00b      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044aa:	f7fe faed 	bl	8002a88 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d902      	bls.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	74fb      	strb	r3, [r7, #19]
            break;
 80044c0:	e006      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ec      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044ec:	e008      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	74bb      	strb	r3, [r7, #18]
 80044f2:	e005      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004500:	7c7b      	ldrb	r3, [r7, #17]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d105      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4ba7      	ldr	r3, [pc, #668]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	4aa6      	ldr	r2, [pc, #664]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004510:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451e:	4ba1      	ldr	r3, [pc, #644]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f023 0203 	bic.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	499d      	ldr	r1, [pc, #628]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004540:	4b98      	ldr	r3, [pc, #608]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 020c 	bic.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4995      	ldr	r1, [pc, #596]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004562:	4b90      	ldr	r3, [pc, #576]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	498c      	ldr	r1, [pc, #560]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004584:	4b87      	ldr	r3, [pc, #540]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4984      	ldr	r1, [pc, #528]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a6:	4b7f      	ldr	r3, [pc, #508]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	497b      	ldr	r1, [pc, #492]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c8:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	4973      	ldr	r1, [pc, #460]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ea:	4b6e      	ldr	r3, [pc, #440]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	496a      	ldr	r1, [pc, #424]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460c:	4b65      	ldr	r3, [pc, #404]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4962      	ldr	r1, [pc, #392]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800462e:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	4959      	ldr	r1, [pc, #356]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004650:	4b54      	ldr	r3, [pc, #336]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	4951      	ldr	r1, [pc, #324]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004672:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4948      	ldr	r1, [pc, #288]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004690:	d105      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004692:	4b44      	ldr	r3, [pc, #272]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4a43      	ldr	r2, [pc, #268]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800469c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d015      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046aa:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	493a      	ldr	r1, [pc, #232]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d105      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ca:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d015      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	492c      	ldr	r1, [pc, #176]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004700:	d105      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a27      	ldr	r2, [pc, #156]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d015      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	491e      	ldr	r1, [pc, #120]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004738:	d105      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004744:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d015      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	4910      	ldr	r1, [pc, #64]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004770:	d105      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4a0b      	ldr	r2, [pc, #44]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	4902      	ldr	r1, [pc, #8]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	e001      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047a4:	40021000 	.word	0x40021000
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ae:	d105      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d015      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4918      	ldr	r1, [pc, #96]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e6:	d105      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a12      	ldr	r2, [pc, #72]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80047ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	490a      	ldr	r1, [pc, #40]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481e:	d105      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a04      	ldr	r2, [pc, #16]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800482c:	7cbb      	ldrb	r3, [r7, #18]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e09d      	b.n	800498a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d108      	bne.n	8004868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485e:	d009      	beq.n	8004874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	61da      	str	r2, [r3, #28]
 8004866:	e005      	b.n	8004874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fd fe9c 	bl	80025cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b4:	d902      	bls.n	80048bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e002      	b.n	80048c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ca:	d007      	beq.n	80048dc <HAL_SPI_Init+0xa0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048d4:	d002      	beq.n	80048dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	ea42 0103 	orr.w	r1, r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 0204 	and.w	r2, r3, #4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004958:	ea42 0103 	orr.w	r1, r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b088      	sub	sp, #32
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_SPI_Transmit+0x22>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e158      	b.n	8004c66 <HAL_SPI_Transmit+0x2d4>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049bc:	f7fe f864 	bl	8002a88 <HAL_GetTick>
 80049c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
 80049d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049d6:	e13d      	b.n	8004c54 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_Transmit+0x52>
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049e8:	e134      	b.n	8004c54 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2203      	movs	r2, #3
 80049ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a34:	d10f      	bne.n	8004a56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d007      	beq.n	8004a74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a7c:	d94b      	bls.n	8004b16 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0xfa>
 8004a86:	8afb      	ldrh	r3, [r7, #22]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d13e      	bne.n	8004b0a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	881a      	ldrh	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	1c9a      	adds	r2, r3, #2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ab0:	e02b      	b.n	8004b0a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d112      	bne.n	8004ae6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae4:	e011      	b.n	8004b0a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae6:	f7fd ffcf 	bl	8002a88 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d803      	bhi.n	8004afe <HAL_SPI_Transmit+0x16c>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d102      	bne.n	8004b04 <HAL_SPI_Transmit+0x172>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b08:	e0a4      	b.n	8004c54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ce      	bne.n	8004ab2 <HAL_SPI_Transmit+0x120>
 8004b14:	e07c      	b.n	8004c10 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SPI_Transmit+0x192>
 8004b1e:	8afb      	ldrh	r3, [r7, #22]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d170      	bne.n	8004c06 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d912      	bls.n	8004b54 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	881a      	ldrh	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	1c9a      	adds	r2, r3, #2
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b02      	subs	r3, #2
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b52:	e058      	b.n	8004c06 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b7a:	e044      	b.n	8004c06 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d12b      	bne.n	8004be2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d912      	bls.n	8004bba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	881a      	ldrh	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b02      	subs	r3, #2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb8:	e025      	b.n	8004c06 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be0:	e011      	b.n	8004c06 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be2:	f7fd ff51 	bl	8002a88 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d803      	bhi.n	8004bfa <HAL_SPI_Transmit+0x268>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d102      	bne.n	8004c00 <HAL_SPI_Transmit+0x26e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c04:	e026      	b.n	8004c54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1b5      	bne.n	8004b7c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fce3 	bl	80055e0 <SPI_EndRxTxTransaction>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e000      	b.n	8004c54 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c64:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b088      	sub	sp, #32
 8004c72:	af02      	add	r7, sp, #8
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c8a:	d112      	bne.n	8004cb2 <HAL_SPI_Receive+0x44>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10e      	bne.n	8004cb2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2204      	movs	r2, #4
 8004c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f910 	bl	8004ece <HAL_SPI_TransmitReceive>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	e109      	b.n	8004ec6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_SPI_Receive+0x52>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e102      	b.n	8004ec6 <HAL_SPI_Receive+0x258>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc8:	f7fd fede 	bl	8002a88 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cde:	e0e9      	b.n	8004eb4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_Receive+0x7e>
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cf0:	e0e0      	b.n	8004eb4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d3c:	d908      	bls.n	8004d50 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	e007      	b.n	8004d60 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d68:	d10f      	bne.n	8004d8a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d007      	beq.n	8004da8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db0:	d867      	bhi.n	8004e82 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004db2:	e030      	b.n	8004e16 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d117      	bne.n	8004df2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f103 020c 	add.w	r2, r3, #12
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	7812      	ldrb	r2, [r2, #0]
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004df0:	e011      	b.n	8004e16 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fd fe49 	bl	8002a88 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Receive+0x19c>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Receive+0x1a2>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e14:	e04e      	b.n	8004eb4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1c8      	bne.n	8004db4 <HAL_SPI_Receive+0x146>
 8004e22:	e034      	b.n	8004e8e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d115      	bne.n	8004e5e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e5c:	e011      	b.n	8004e82 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5e:	f7fd fe13 	bl	8002a88 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d803      	bhi.n	8004e76 <HAL_SPI_Receive+0x208>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d102      	bne.n	8004e7c <HAL_SPI_Receive+0x20e>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e80:	e018      	b.n	8004eb4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ca      	bne.n	8004e24 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fb4c 	bl	8005530 <SPI_EndRxTransaction>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
 8004eb0:	e000      	b.n	8004eb4 <HAL_SPI_Receive+0x246>
  }

error :
 8004eb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b08a      	sub	sp, #40	; 0x28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004edc:	2301      	movs	r3, #1
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x26>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e1fb      	b.n	80052ec <HAL_SPI_TransmitReceive+0x41e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004efc:	f7fd fdc4 	bl	8002a88 <HAL_GetTick>
 8004f00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f10:	887b      	ldrh	r3, [r7, #2]
 8004f12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f14:	887b      	ldrh	r3, [r7, #2]
 8004f16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f18:	7efb      	ldrb	r3, [r7, #27]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d00e      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x6e>
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f24:	d106      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x66>
 8004f2e:	7efb      	ldrb	r3, [r7, #27]
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d003      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f3a:	e1cd      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x80>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x80>
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f54:	e1c0      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d003      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2205      	movs	r2, #5
 8004f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	887a      	ldrh	r2, [r7, #2]
 8004f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fac:	d802      	bhi.n	8004fb4 <HAL_SPI_TransmitReceive+0xe6>
 8004fae:	8a3b      	ldrh	r3, [r7, #16]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d908      	bls.n	8004fc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	e007      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d007      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ffc:	d97c      	bls.n	80050f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_SPI_TransmitReceive+0x13e>
 8005006:	8a7b      	ldrh	r3, [r7, #18]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d169      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005030:	e056      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d11b      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1aa>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x1aa>
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b01      	cmp	r3, #1
 800504e:	d113      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	881a      	ldrh	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	1c9a      	adds	r2, r3, #2
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d11c      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x1f2>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d016      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	b292      	uxth	r2, r2
 800509e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	1c9a      	adds	r2, r3, #2
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050bc:	2301      	movs	r3, #1
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050c0:	f7fd fce2 	bl	8002a88 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d807      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0x212>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d003      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050de:	e0fb      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1a3      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x164>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d19d      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x164>
 80050f6:	e0df      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x23a>
 8005100:	8a7b      	ldrh	r3, [r7, #18]
 8005102:	2b01      	cmp	r3, #1
 8005104:	f040 80cb 	bne.w	800529e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d912      	bls.n	8005138 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	881a      	ldrh	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b02      	subs	r3, #2
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005136:	e0b2      	b.n	800529e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515e:	e09e      	b.n	800529e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d134      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x30a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02f      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x30a>
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2b01      	cmp	r3, #1
 800517c:	d12c      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d912      	bls.n	80051ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	1c9a      	adds	r2, r3, #2
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b02      	subs	r3, #2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ac:	e012      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d148      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x3aa>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d042      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d923      	bls.n	8005246 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	b292      	uxth	r2, r2
 800520a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b02      	subs	r3, #2
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d81f      	bhi.n	8005274 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	e016      	b.n	8005274 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f103 020c 	add.w	r2, r3, #12
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005274:	2301      	movs	r3, #1
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005278:	f7fd fc06 	bl	8002a88 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005284:	429a      	cmp	r2, r3
 8005286:	d803      	bhi.n	8005290 <HAL_SPI_TransmitReceive+0x3c2>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x3c8>
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800529c:	e01c      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af5b 	bne.w	8005160 <HAL_SPI_TransmitReceive+0x292>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f47f af54 	bne.w	8005160 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f98f 	bl	80055e0 <SPI_EndRxTxTransaction>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60
 80052d4:	e000      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80052d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3728      	adds	r7, #40	; 0x28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005304:	f7fd fbc0 	bl	8002a88 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4413      	add	r3, r2
 8005312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005314:	f7fd fbb8 	bl	8002a88 <HAL_GetTick>
 8005318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	015b      	lsls	r3, r3, #5
 8005320:	0d1b      	lsrs	r3, r3, #20
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	e054      	b.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d050      	beq.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005334:	f7fd fba8 	bl	8002a88 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	429a      	cmp	r2, r3
 8005342:	d902      	bls.n	800534a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d13d      	bne.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005362:	d111      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	d004      	beq.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d107      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005390:	d10f      	bne.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e017      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d19b      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000008 	.word	0x20000008

08005404 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005416:	f7fd fb37 	bl	8002a88 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	4413      	add	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005426:	f7fd fb2f 	bl	8002a88 <HAL_GetTick>
 800542a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005434:	4b3d      	ldr	r3, [pc, #244]	; (800552c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	00da      	lsls	r2, r3, #3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800544c:	e060      	b.n	8005510 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005454:	d107      	bne.n	8005466 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005464:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d050      	beq.n	8005510 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800546e:	f7fd fb0b 	bl	8002a88 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	429a      	cmp	r2, r3
 800547c:	d902      	bls.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x80>
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d13d      	bne.n	8005500 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005492:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549c:	d111      	bne.n	80054c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a6:	d004      	beq.n	80054b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d107      	bne.n	80054c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ca:	d10f      	bne.n	80054ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e010      	b.n	8005522 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	3b01      	subs	r3, #1
 800550e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d196      	bne.n	800544e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3728      	adds	r7, #40	; 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000008 	.word	0x20000008

08005530 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005544:	d111      	bne.n	800556a <SPI_EndRxTransaction+0x3a>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554e:	d004      	beq.n	800555a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d107      	bne.n	800556a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2200      	movs	r2, #0
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff febd 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e023      	b.n	80055d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005598:	d11d      	bne.n	80055d6 <SPI_EndRxTransaction+0xa6>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	d004      	beq.n	80055ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	d113      	bne.n	80055d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff ff22 	bl	8005404 <SPI_WaitFifoStateUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e000      	b.n	80055d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff ff03 	bl	8005404 <SPI_WaitFifoStateUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	f043 0220 	orr.w	r2, r3, #32
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e027      	b.n	8005664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fe68 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e014      	b.n	8005664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff fedc 	bl	8005404 <SPI_WaitFifoStateUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e000      	b.n	8005664 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e042      	b.n	8005704 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fc ffdd 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2224      	movs	r2, #36	; 0x24
 800569a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f8c2 	bl	8005838 <UART_SetConfig>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e022      	b.n	8005704 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fbb2 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fc39 	bl	8005f74 <UART_CheckIdleState>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005722:	2b20      	cmp	r3, #32
 8005724:	f040 8083 	bne.w	800582e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_UART_Transmit+0x28>
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e07b      	b.n	8005830 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_UART_Transmit+0x3a>
 8005742:	2302      	movs	r3, #2
 8005744:	e074      	b.n	8005830 <HAL_UART_Transmit+0x124>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2221      	movs	r2, #33	; 0x21
 800575a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575e:	f7fd f993 	bl	8002a88 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577c:	d108      	bne.n	8005790 <HAL_UART_Transmit+0x84>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e003      	b.n	8005798 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80057a0:	e02c      	b.n	80057fc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fc2c 	bl	800600a <UART_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e039      	b.n	8005830 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	3302      	adds	r3, #2
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e007      	b.n	80057ea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1cc      	bne.n	80057a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2200      	movs	r2, #0
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fbf9 	bl	800600a <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e006      	b.n	8005830 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e000      	b.n	8005830 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800582e:	2302      	movs	r3, #2
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800583c:	b08c      	sub	sp, #48	; 0x30
 800583e:	af00      	add	r7, sp, #0
 8005840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	431a      	orrs	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	431a      	orrs	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	4313      	orrs	r3, r2
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4baa      	ldr	r3, [pc, #680]	; (8005b10 <UART_SetConfig+0x2d8>)
 8005868:	4013      	ands	r3, r2
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005870:	430b      	orrs	r3, r1
 8005872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a9f      	ldr	r2, [pc, #636]	; (8005b14 <UART_SetConfig+0x2dc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a0:	4313      	orrs	r3, r2
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	f023 010f 	bic.w	r1, r3, #15
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a90      	ldr	r2, [pc, #576]	; (8005b18 <UART_SetConfig+0x2e0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d125      	bne.n	8005928 <UART_SetConfig+0xf0>
 80058dc:	4b8f      	ldr	r3, [pc, #572]	; (8005b1c <UART_SetConfig+0x2e4>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d81a      	bhi.n	8005920 <UART_SetConfig+0xe8>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0xb8>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005911 	.word	0x08005911
 80058f8:	08005909 	.word	0x08005909
 80058fc:	08005919 	.word	0x08005919
 8005900:	2301      	movs	r3, #1
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e116      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e112      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e10e      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e10a      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e106      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <UART_SetConfig+0x2e8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d138      	bne.n	80059a4 <UART_SetConfig+0x16c>
 8005932:	4b7a      	ldr	r3, [pc, #488]	; (8005b1c <UART_SetConfig+0x2e4>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d82d      	bhi.n	800599c <UART_SetConfig+0x164>
 8005940:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <UART_SetConfig+0x110>)
 8005942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005946:	bf00      	nop
 8005948:	0800597d 	.word	0x0800597d
 800594c:	0800599d 	.word	0x0800599d
 8005950:	0800599d 	.word	0x0800599d
 8005954:	0800599d 	.word	0x0800599d
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800599d 	.word	0x0800599d
 8005960:	0800599d 	.word	0x0800599d
 8005964:	0800599d 	.word	0x0800599d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800599d 	.word	0x0800599d
 8005970:	0800599d 	.word	0x0800599d
 8005974:	0800599d 	.word	0x0800599d
 8005978:	08005995 	.word	0x08005995
 800597c:	2300      	movs	r3, #0
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e0d8      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e0d4      	b.n	8005b36 <UART_SetConfig+0x2fe>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e0d0      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e0cc      	b.n	8005b36 <UART_SetConfig+0x2fe>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e0c8      	b.n	8005b36 <UART_SetConfig+0x2fe>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5e      	ldr	r2, [pc, #376]	; (8005b24 <UART_SetConfig+0x2ec>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d125      	bne.n	80059fa <UART_SetConfig+0x1c2>
 80059ae:	4b5b      	ldr	r3, [pc, #364]	; (8005b1c <UART_SetConfig+0x2e4>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b8:	2b30      	cmp	r3, #48	; 0x30
 80059ba:	d016      	beq.n	80059ea <UART_SetConfig+0x1b2>
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d818      	bhi.n	80059f2 <UART_SetConfig+0x1ba>
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d00a      	beq.n	80059da <UART_SetConfig+0x1a2>
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d814      	bhi.n	80059f2 <UART_SetConfig+0x1ba>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <UART_SetConfig+0x19a>
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d008      	beq.n	80059e2 <UART_SetConfig+0x1aa>
 80059d0:	e00f      	b.n	80059f2 <UART_SetConfig+0x1ba>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d8:	e0ad      	b.n	8005b36 <UART_SetConfig+0x2fe>
 80059da:	2302      	movs	r3, #2
 80059dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e0:	e0a9      	b.n	8005b36 <UART_SetConfig+0x2fe>
 80059e2:	2304      	movs	r3, #4
 80059e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e8:	e0a5      	b.n	8005b36 <UART_SetConfig+0x2fe>
 80059ea:	2308      	movs	r3, #8
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f0:	e0a1      	b.n	8005b36 <UART_SetConfig+0x2fe>
 80059f2:	2310      	movs	r3, #16
 80059f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f8:	e09d      	b.n	8005b36 <UART_SetConfig+0x2fe>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4a      	ldr	r2, [pc, #296]	; (8005b28 <UART_SetConfig+0x2f0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d125      	bne.n	8005a50 <UART_SetConfig+0x218>
 8005a04:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <UART_SetConfig+0x2e4>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d016      	beq.n	8005a40 <UART_SetConfig+0x208>
 8005a12:	2bc0      	cmp	r3, #192	; 0xc0
 8005a14:	d818      	bhi.n	8005a48 <UART_SetConfig+0x210>
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d00a      	beq.n	8005a30 <UART_SetConfig+0x1f8>
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d814      	bhi.n	8005a48 <UART_SetConfig+0x210>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <UART_SetConfig+0x1f0>
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x200>
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x210>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e082      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a36:	e07e      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e07a      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e076      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e072      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <UART_SetConfig+0x2f4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d12a      	bne.n	8005ab0 <UART_SetConfig+0x278>
 8005a5a:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <UART_SetConfig+0x2e4>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a68:	d01a      	beq.n	8005aa0 <UART_SetConfig+0x268>
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6e:	d81b      	bhi.n	8005aa8 <UART_SetConfig+0x270>
 8005a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a74:	d00c      	beq.n	8005a90 <UART_SetConfig+0x258>
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7a:	d815      	bhi.n	8005aa8 <UART_SetConfig+0x270>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <UART_SetConfig+0x250>
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a84:	d008      	beq.n	8005a98 <UART_SetConfig+0x260>
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x270>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e052      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e04e      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e04a      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e046      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aae:	e042      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <UART_SetConfig+0x2dc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d13a      	bne.n	8005b30 <UART_SetConfig+0x2f8>
 8005aba:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <UART_SetConfig+0x2e4>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac8:	d01a      	beq.n	8005b00 <UART_SetConfig+0x2c8>
 8005aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ace:	d81b      	bhi.n	8005b08 <UART_SetConfig+0x2d0>
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	d00c      	beq.n	8005af0 <UART_SetConfig+0x2b8>
 8005ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ada:	d815      	bhi.n	8005b08 <UART_SetConfig+0x2d0>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <UART_SetConfig+0x2b0>
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae4:	d008      	beq.n	8005af8 <UART_SetConfig+0x2c0>
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x2d0>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aee:	e022      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af6:	e01e      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afe:	e01a      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b06:	e016      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0e:	e012      	b.n	8005b36 <UART_SetConfig+0x2fe>
 8005b10:	cfff69f3 	.word	0xcfff69f3
 8005b14:	40008000 	.word	0x40008000
 8005b18:	40013800 	.word	0x40013800
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40004400 	.word	0x40004400
 8005b24:	40004800 	.word	0x40004800
 8005b28:	40004c00 	.word	0x40004c00
 8005b2c:	40005000 	.word	0x40005000
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4aae      	ldr	r2, [pc, #696]	; (8005df4 <UART_SetConfig+0x5bc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	f040 8097 	bne.w	8005c70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d823      	bhi.n	8005b92 <UART_SetConfig+0x35a>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x318>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b93 	.word	0x08005b93
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b93 	.word	0x08005b93
 8005b60:	08005b83 	.word	0x08005b83
 8005b64:	08005b93 	.word	0x08005b93
 8005b68:	08005b93 	.word	0x08005b93
 8005b6c:	08005b93 	.word	0x08005b93
 8005b70:	08005b8b 	.word	0x08005b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b74:	f7fe fbb4 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b7a:	e010      	b.n	8005b9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b7c:	4b9e      	ldr	r3, [pc, #632]	; (8005df8 <UART_SetConfig+0x5c0>)
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b80:	e00d      	b.n	8005b9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b82:	f7fe fb3f 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8005b86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b88:	e009      	b.n	8005b9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b90:	e005      	b.n	8005b9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8130 	beq.w	8005e06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	4a94      	ldr	r2, [pc, #592]	; (8005dfc <UART_SetConfig+0x5c4>)
 8005bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d305      	bcc.n	8005bd6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d903      	bls.n	8005bde <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bdc:	e113      	b.n	8005e06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	2200      	movs	r2, #0
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	60fa      	str	r2, [r7, #12]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	4a84      	ldr	r2, [pc, #528]	; (8005dfc <UART_SetConfig+0x5c4>)
 8005bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c00:	f7fb f86a 	bl	8000cd8 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	020b      	lsls	r3, r1, #8
 8005c16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c1a:	0202      	lsls	r2, r0, #8
 8005c1c:	6979      	ldr	r1, [r7, #20]
 8005c1e:	6849      	ldr	r1, [r1, #4]
 8005c20:	0849      	lsrs	r1, r1, #1
 8005c22:	2000      	movs	r0, #0
 8005c24:	460c      	mov	r4, r1
 8005c26:	4605      	mov	r5, r0
 8005c28:	eb12 0804 	adds.w	r8, r2, r4
 8005c2c:	eb43 0905 	adc.w	r9, r3, r5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	469a      	mov	sl, r3
 8005c38:	4693      	mov	fp, r2
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	465b      	mov	r3, fp
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fb f849 	bl	8000cd8 <__aeabi_uldivmod>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c54:	d308      	bcc.n	8005c68 <UART_SetConfig+0x430>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5c:	d204      	bcs.n	8005c68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a3a      	ldr	r2, [r7, #32]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	e0ce      	b.n	8005e06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c6e:	e0ca      	b.n	8005e06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c78:	d166      	bne.n	8005d48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d827      	bhi.n	8005cd2 <UART_SetConfig+0x49a>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x450>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cd3 	.word	0x08005cd3
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cd3 	.word	0x08005cd3
 8005ca0:	08005cd3 	.word	0x08005cd3
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005ccb 	.word	0x08005ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cac:	f7fe fb18 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cb2:	e014      	b.n	8005cde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb4:	f7fe fb2a 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 8005cb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cba:	e010      	b.n	8005cde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b4e      	ldr	r3, [pc, #312]	; (8005df8 <UART_SetConfig+0x5c0>)
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cc0:	e00d      	b.n	8005cde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7fe fa9f 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8005cc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cc8:	e009      	b.n	8005cde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cd0:	e005      	b.n	8005cde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8090 	beq.w	8005e06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	4a44      	ldr	r2, [pc, #272]	; (8005dfc <UART_SetConfig+0x5c4>)
 8005cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf8:	005a      	lsls	r2, r3, #1
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	441a      	add	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	d916      	bls.n	8005d40 <UART_SetConfig+0x508>
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d18:	d212      	bcs.n	8005d40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f023 030f 	bic.w	r3, r3, #15
 8005d22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	8bfb      	ldrh	r3, [r7, #30]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	8bfa      	ldrh	r2, [r7, #30]
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	e062      	b.n	8005e06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d46:	e05e      	b.n	8005e06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d828      	bhi.n	8005da2 <UART_SetConfig+0x56a>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x520>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	08005da3 	.word	0x08005da3
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005da3 	.word	0x08005da3
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005d9b 	.word	0x08005d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fe fab0 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d82:	e014      	b.n	8005dae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fe fac2 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 8005d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d8a:	e010      	b.n	8005dae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <UART_SetConfig+0x5c0>)
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d90:	e00d      	b.n	8005dae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe fa37 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d98:	e009      	b.n	8005dae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da0:	e005      	b.n	8005dae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dac:	bf00      	nop
    }

    if (pclk != 0U)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d028      	beq.n	8005e06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <UART_SetConfig+0x5c4>)
 8005dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	441a      	add	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d910      	bls.n	8005e00 <UART_SetConfig+0x5c8>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d20c      	bcs.n	8005e00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	e009      	b.n	8005e06 <UART_SetConfig+0x5ce>
 8005df2:	bf00      	nop
 8005df4:	40008000 	.word	0x40008000
 8005df8:	00f42400 	.word	0x00f42400
 8005dfc:	0800d068 	.word	0x0800d068
      }
      else
      {
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3730      	adds	r7, #48	; 0x30
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2e:	d10a      	bne.n	8005f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f84:	f7fc fd80 	bl	8002a88 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d10e      	bne.n	8005fb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f82f 	bl	800600a <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e025      	b.n	8006002 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d10e      	bne.n	8005fe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f819 	bl	800600a <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00f      	b.n	8006002 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b09c      	sub	sp, #112	; 0x70
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4613      	mov	r3, r2
 8006018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601a:	e0a9      	b.n	8006170 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	f000 80a5 	beq.w	8006170 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006026:	f7fc fd2f 	bl	8002a88 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006032:	429a      	cmp	r2, r3
 8006034:	d302      	bcc.n	800603c <UART_WaitOnFlagUntilTimeout+0x32>
 8006036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006038:	2b00      	cmp	r3, #0
 800603a:	d140      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800604a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006050:	667b      	str	r3, [r7, #100]	; 0x64
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800605c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e6      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	663b      	str	r3, [r7, #96]	; 0x60
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800608e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800609c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e069      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d051      	beq.n	8006170 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d149      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
 8006106:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800610a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	613b      	str	r3, [r7, #16]
   return(result);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006138:	623a      	str	r2, [r7, #32]
 800613a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	61bb      	str	r3, [r7, #24]
   return(result);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e010      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	429a      	cmp	r2, r3
 800618c:	f43f af46 	beq.w	800601c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3770      	adds	r7, #112	; 0x70
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e027      	b.n	8006200 <HAL_UARTEx_DisableFifoMode+0x66>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0201 	bic.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006220:	2302      	movs	r3, #2
 8006222:	e02d      	b.n	8006280 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f84f 	bl	8006304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800629c:	2302      	movs	r3, #2
 800629e:	e02d      	b.n	80062fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2224      	movs	r2, #36	; 0x24
 80062ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f811 	bl	8006304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006324:	e031      	b.n	800638a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006326:	2308      	movs	r3, #8
 8006328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800632a:	2308      	movs	r3, #8
 800632c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	0e5b      	lsrs	r3, r3, #25
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	0f5b      	lsrs	r3, r3, #29
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	7b3a      	ldrb	r2, [r7, #12]
 8006352:	4911      	ldr	r1, [pc, #68]	; (8006398 <UARTEx_SetNbDataToProcess+0x94>)
 8006354:	5c8a      	ldrb	r2, [r1, r2]
 8006356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800635a:	7b3a      	ldrb	r2, [r7, #12]
 800635c:	490f      	ldr	r1, [pc, #60]	; (800639c <UARTEx_SetNbDataToProcess+0x98>)
 800635e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006360:	fb93 f3f2 	sdiv	r3, r3, r2
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	7b7a      	ldrb	r2, [r7, #13]
 8006370:	4909      	ldr	r1, [pc, #36]	; (8006398 <UARTEx_SetNbDataToProcess+0x94>)
 8006372:	5c8a      	ldrb	r2, [r1, r2]
 8006374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006378:	7b7a      	ldrb	r2, [r7, #13]
 800637a:	4908      	ldr	r1, [pc, #32]	; (800639c <UARTEx_SetNbDataToProcess+0x98>)
 800637c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800637e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006382:	b29a      	uxth	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	0800d080 	.word	0x0800d080
 800639c:	0800d088 	.word	0x0800d088

080063a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80063ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	b29b      	uxth	r3, r3
 80063be:	4013      	ands	r3, r2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063d6:	b084      	sub	sp, #16
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	f107 0014 	add.w	r0, r7, #20
 80063e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	b004      	add	sp, #16
 8006416:	4770      	bx	lr

08006418 <__cvt>:
 8006418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	ec55 4b10 	vmov	r4, r5, d0
 8006420:	2d00      	cmp	r5, #0
 8006422:	460e      	mov	r6, r1
 8006424:	4619      	mov	r1, r3
 8006426:	462b      	mov	r3, r5
 8006428:	bfbb      	ittet	lt
 800642a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800642e:	461d      	movlt	r5, r3
 8006430:	2300      	movge	r3, #0
 8006432:	232d      	movlt	r3, #45	; 0x2d
 8006434:	700b      	strb	r3, [r1, #0]
 8006436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800643c:	4691      	mov	r9, r2
 800643e:	f023 0820 	bic.w	r8, r3, #32
 8006442:	bfbc      	itt	lt
 8006444:	4622      	movlt	r2, r4
 8006446:	4614      	movlt	r4, r2
 8006448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800644c:	d005      	beq.n	800645a <__cvt+0x42>
 800644e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006452:	d100      	bne.n	8006456 <__cvt+0x3e>
 8006454:	3601      	adds	r6, #1
 8006456:	2102      	movs	r1, #2
 8006458:	e000      	b.n	800645c <__cvt+0x44>
 800645a:	2103      	movs	r1, #3
 800645c:	ab03      	add	r3, sp, #12
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	ab02      	add	r3, sp, #8
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	ec45 4b10 	vmov	d0, r4, r5
 8006468:	4653      	mov	r3, sl
 800646a:	4632      	mov	r2, r6
 800646c:	f001 f988 	bl	8007780 <_dtoa_r>
 8006470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006474:	4607      	mov	r7, r0
 8006476:	d102      	bne.n	800647e <__cvt+0x66>
 8006478:	f019 0f01 	tst.w	r9, #1
 800647c:	d022      	beq.n	80064c4 <__cvt+0xac>
 800647e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006482:	eb07 0906 	add.w	r9, r7, r6
 8006486:	d110      	bne.n	80064aa <__cvt+0x92>
 8006488:	783b      	ldrb	r3, [r7, #0]
 800648a:	2b30      	cmp	r3, #48	; 0x30
 800648c:	d10a      	bne.n	80064a4 <__cvt+0x8c>
 800648e:	2200      	movs	r2, #0
 8006490:	2300      	movs	r3, #0
 8006492:	4620      	mov	r0, r4
 8006494:	4629      	mov	r1, r5
 8006496:	f7fa fb3f 	bl	8000b18 <__aeabi_dcmpeq>
 800649a:	b918      	cbnz	r0, 80064a4 <__cvt+0x8c>
 800649c:	f1c6 0601 	rsb	r6, r6, #1
 80064a0:	f8ca 6000 	str.w	r6, [sl]
 80064a4:	f8da 3000 	ldr.w	r3, [sl]
 80064a8:	4499      	add	r9, r3
 80064aa:	2200      	movs	r2, #0
 80064ac:	2300      	movs	r3, #0
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7fa fb31 	bl	8000b18 <__aeabi_dcmpeq>
 80064b6:	b108      	cbz	r0, 80064bc <__cvt+0xa4>
 80064b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80064bc:	2230      	movs	r2, #48	; 0x30
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	454b      	cmp	r3, r9
 80064c2:	d307      	bcc.n	80064d4 <__cvt+0xbc>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c8:	1bdb      	subs	r3, r3, r7
 80064ca:	4638      	mov	r0, r7
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	b004      	add	sp, #16
 80064d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d4:	1c59      	adds	r1, r3, #1
 80064d6:	9103      	str	r1, [sp, #12]
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e7f0      	b.n	80064be <__cvt+0xa6>

080064dc <__exponent>:
 80064dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064de:	4603      	mov	r3, r0
 80064e0:	2900      	cmp	r1, #0
 80064e2:	bfb8      	it	lt
 80064e4:	4249      	neglt	r1, r1
 80064e6:	f803 2b02 	strb.w	r2, [r3], #2
 80064ea:	bfb4      	ite	lt
 80064ec:	222d      	movlt	r2, #45	; 0x2d
 80064ee:	222b      	movge	r2, #43	; 0x2b
 80064f0:	2909      	cmp	r1, #9
 80064f2:	7042      	strb	r2, [r0, #1]
 80064f4:	dd2a      	ble.n	800654c <__exponent+0x70>
 80064f6:	f10d 0207 	add.w	r2, sp, #7
 80064fa:	4617      	mov	r7, r2
 80064fc:	260a      	movs	r6, #10
 80064fe:	4694      	mov	ip, r2
 8006500:	fb91 f5f6 	sdiv	r5, r1, r6
 8006504:	fb06 1415 	mls	r4, r6, r5, r1
 8006508:	3430      	adds	r4, #48	; 0x30
 800650a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800650e:	460c      	mov	r4, r1
 8006510:	2c63      	cmp	r4, #99	; 0x63
 8006512:	f102 32ff 	add.w	r2, r2, #4294967295
 8006516:	4629      	mov	r1, r5
 8006518:	dcf1      	bgt.n	80064fe <__exponent+0x22>
 800651a:	3130      	adds	r1, #48	; 0x30
 800651c:	f1ac 0402 	sub.w	r4, ip, #2
 8006520:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006524:	1c41      	adds	r1, r0, #1
 8006526:	4622      	mov	r2, r4
 8006528:	42ba      	cmp	r2, r7
 800652a:	d30a      	bcc.n	8006542 <__exponent+0x66>
 800652c:	f10d 0209 	add.w	r2, sp, #9
 8006530:	eba2 020c 	sub.w	r2, r2, ip
 8006534:	42bc      	cmp	r4, r7
 8006536:	bf88      	it	hi
 8006538:	2200      	movhi	r2, #0
 800653a:	4413      	add	r3, r2
 800653c:	1a18      	subs	r0, r3, r0
 800653e:	b003      	add	sp, #12
 8006540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006542:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006546:	f801 5f01 	strb.w	r5, [r1, #1]!
 800654a:	e7ed      	b.n	8006528 <__exponent+0x4c>
 800654c:	2330      	movs	r3, #48	; 0x30
 800654e:	3130      	adds	r1, #48	; 0x30
 8006550:	7083      	strb	r3, [r0, #2]
 8006552:	70c1      	strb	r1, [r0, #3]
 8006554:	1d03      	adds	r3, r0, #4
 8006556:	e7f1      	b.n	800653c <__exponent+0x60>

08006558 <_printf_float>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	ed2d 8b02 	vpush	{d8}
 8006560:	b08d      	sub	sp, #52	; 0x34
 8006562:	460c      	mov	r4, r1
 8006564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006568:	4616      	mov	r6, r2
 800656a:	461f      	mov	r7, r3
 800656c:	4605      	mov	r5, r0
 800656e:	f001 f801 	bl	8007574 <_localeconv_r>
 8006572:	f8d0 a000 	ldr.w	sl, [r0]
 8006576:	4650      	mov	r0, sl
 8006578:	f7f9 fea2 	bl	80002c0 <strlen>
 800657c:	2300      	movs	r3, #0
 800657e:	930a      	str	r3, [sp, #40]	; 0x28
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	9305      	str	r3, [sp, #20]
 8006584:	f8d8 3000 	ldr.w	r3, [r8]
 8006588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800658c:	3307      	adds	r3, #7
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	f103 0208 	add.w	r2, r3, #8
 8006596:	f8c8 2000 	str.w	r2, [r8]
 800659a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800659e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80065a8:	ee08 0a10 	vmov	s16, r0
 80065ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80065b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b4:	4b9e      	ldr	r3, [pc, #632]	; (8006830 <_printf_float+0x2d8>)
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	f7fa fadf 	bl	8000b7c <__aeabi_dcmpun>
 80065be:	bb88      	cbnz	r0, 8006624 <_printf_float+0xcc>
 80065c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c4:	4b9a      	ldr	r3, [pc, #616]	; (8006830 <_printf_float+0x2d8>)
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	f7fa fab9 	bl	8000b40 <__aeabi_dcmple>
 80065ce:	bb48      	cbnz	r0, 8006624 <_printf_float+0xcc>
 80065d0:	2200      	movs	r2, #0
 80065d2:	2300      	movs	r3, #0
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa faa8 	bl	8000b2c <__aeabi_dcmplt>
 80065dc:	b110      	cbz	r0, 80065e4 <_printf_float+0x8c>
 80065de:	232d      	movs	r3, #45	; 0x2d
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	4a93      	ldr	r2, [pc, #588]	; (8006834 <_printf_float+0x2dc>)
 80065e6:	4b94      	ldr	r3, [pc, #592]	; (8006838 <_printf_float+0x2e0>)
 80065e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065ec:	bf94      	ite	ls
 80065ee:	4690      	movls	r8, r2
 80065f0:	4698      	movhi	r8, r3
 80065f2:	2303      	movs	r3, #3
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	f023 0304 	bic.w	r3, r3, #4
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	f04f 0900 	mov.w	r9, #0
 8006602:	9700      	str	r7, [sp, #0]
 8006604:	4633      	mov	r3, r6
 8006606:	aa0b      	add	r2, sp, #44	; 0x2c
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f9da 	bl	80069c4 <_printf_common>
 8006610:	3001      	adds	r0, #1
 8006612:	f040 8090 	bne.w	8006736 <_printf_float+0x1de>
 8006616:	f04f 30ff 	mov.w	r0, #4294967295
 800661a:	b00d      	add	sp, #52	; 0x34
 800661c:	ecbd 8b02 	vpop	{d8}
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7fa faa6 	bl	8000b7c <__aeabi_dcmpun>
 8006630:	b140      	cbz	r0, 8006644 <_printf_float+0xec>
 8006632:	464b      	mov	r3, r9
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfbc      	itt	lt
 8006638:	232d      	movlt	r3, #45	; 0x2d
 800663a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800663e:	4a7f      	ldr	r2, [pc, #508]	; (800683c <_printf_float+0x2e4>)
 8006640:	4b7f      	ldr	r3, [pc, #508]	; (8006840 <_printf_float+0x2e8>)
 8006642:	e7d1      	b.n	80065e8 <_printf_float+0x90>
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800664a:	9206      	str	r2, [sp, #24]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	d13f      	bne.n	80066d0 <_printf_float+0x178>
 8006650:	2306      	movs	r3, #6
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	6861      	ldr	r1, [r4, #4]
 8006658:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800665c:	2300      	movs	r3, #0
 800665e:	9303      	str	r3, [sp, #12]
 8006660:	ab0a      	add	r3, sp, #40	; 0x28
 8006662:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006666:	ab09      	add	r3, sp, #36	; 0x24
 8006668:	ec49 8b10 	vmov	d0, r8, r9
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006674:	4628      	mov	r0, r5
 8006676:	f7ff fecf 	bl	8006418 <__cvt>
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800667e:	2b47      	cmp	r3, #71	; 0x47
 8006680:	4680      	mov	r8, r0
 8006682:	d108      	bne.n	8006696 <_printf_float+0x13e>
 8006684:	1cc8      	adds	r0, r1, #3
 8006686:	db02      	blt.n	800668e <_printf_float+0x136>
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	4299      	cmp	r1, r3
 800668c:	dd41      	ble.n	8006712 <_printf_float+0x1ba>
 800668e:	f1ab 0302 	sub.w	r3, fp, #2
 8006692:	fa5f fb83 	uxtb.w	fp, r3
 8006696:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800669a:	d820      	bhi.n	80066de <_printf_float+0x186>
 800669c:	3901      	subs	r1, #1
 800669e:	465a      	mov	r2, fp
 80066a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066a4:	9109      	str	r1, [sp, #36]	; 0x24
 80066a6:	f7ff ff19 	bl	80064dc <__exponent>
 80066aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ac:	1813      	adds	r3, r2, r0
 80066ae:	2a01      	cmp	r2, #1
 80066b0:	4681      	mov	r9, r0
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	dc02      	bgt.n	80066bc <_printf_float+0x164>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	07d2      	lsls	r2, r2, #31
 80066ba:	d501      	bpl.n	80066c0 <_printf_float+0x168>
 80066bc:	3301      	adds	r3, #1
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d09c      	beq.n	8006602 <_printf_float+0xaa>
 80066c8:	232d      	movs	r3, #45	; 0x2d
 80066ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ce:	e798      	b.n	8006602 <_printf_float+0xaa>
 80066d0:	9a06      	ldr	r2, [sp, #24]
 80066d2:	2a47      	cmp	r2, #71	; 0x47
 80066d4:	d1be      	bne.n	8006654 <_printf_float+0xfc>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1bc      	bne.n	8006654 <_printf_float+0xfc>
 80066da:	2301      	movs	r3, #1
 80066dc:	e7b9      	b.n	8006652 <_printf_float+0xfa>
 80066de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066e2:	d118      	bne.n	8006716 <_printf_float+0x1be>
 80066e4:	2900      	cmp	r1, #0
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	dd0b      	ble.n	8006702 <_printf_float+0x1aa>
 80066ea:	6121      	str	r1, [r4, #16]
 80066ec:	b913      	cbnz	r3, 80066f4 <_printf_float+0x19c>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	07d0      	lsls	r0, r2, #31
 80066f2:	d502      	bpl.n	80066fa <_printf_float+0x1a2>
 80066f4:	3301      	adds	r3, #1
 80066f6:	440b      	add	r3, r1
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80066fc:	f04f 0900 	mov.w	r9, #0
 8006700:	e7de      	b.n	80066c0 <_printf_float+0x168>
 8006702:	b913      	cbnz	r3, 800670a <_printf_float+0x1b2>
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	07d2      	lsls	r2, r2, #31
 8006708:	d501      	bpl.n	800670e <_printf_float+0x1b6>
 800670a:	3302      	adds	r3, #2
 800670c:	e7f4      	b.n	80066f8 <_printf_float+0x1a0>
 800670e:	2301      	movs	r3, #1
 8006710:	e7f2      	b.n	80066f8 <_printf_float+0x1a0>
 8006712:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006718:	4299      	cmp	r1, r3
 800671a:	db05      	blt.n	8006728 <_printf_float+0x1d0>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	6121      	str	r1, [r4, #16]
 8006720:	07d8      	lsls	r0, r3, #31
 8006722:	d5ea      	bpl.n	80066fa <_printf_float+0x1a2>
 8006724:	1c4b      	adds	r3, r1, #1
 8006726:	e7e7      	b.n	80066f8 <_printf_float+0x1a0>
 8006728:	2900      	cmp	r1, #0
 800672a:	bfd4      	ite	le
 800672c:	f1c1 0202 	rsble	r2, r1, #2
 8006730:	2201      	movgt	r2, #1
 8006732:	4413      	add	r3, r2
 8006734:	e7e0      	b.n	80066f8 <_printf_float+0x1a0>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	055a      	lsls	r2, r3, #21
 800673a:	d407      	bmi.n	800674c <_printf_float+0x1f4>
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	4642      	mov	r2, r8
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	d12c      	bne.n	80067a4 <_printf_float+0x24c>
 800674a:	e764      	b.n	8006616 <_printf_float+0xbe>
 800674c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006750:	f240 80e0 	bls.w	8006914 <_printf_float+0x3bc>
 8006754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006758:	2200      	movs	r2, #0
 800675a:	2300      	movs	r3, #0
 800675c:	f7fa f9dc 	bl	8000b18 <__aeabi_dcmpeq>
 8006760:	2800      	cmp	r0, #0
 8006762:	d034      	beq.n	80067ce <_printf_float+0x276>
 8006764:	4a37      	ldr	r2, [pc, #220]	; (8006844 <_printf_float+0x2ec>)
 8006766:	2301      	movs	r3, #1
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f af51 	beq.w	8006616 <_printf_float+0xbe>
 8006774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006778:	429a      	cmp	r2, r3
 800677a:	db02      	blt.n	8006782 <_printf_float+0x22a>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	07d8      	lsls	r0, r3, #31
 8006780:	d510      	bpl.n	80067a4 <_printf_float+0x24c>
 8006782:	ee18 3a10 	vmov	r3, s16
 8006786:	4652      	mov	r2, sl
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af41 	beq.w	8006616 <_printf_float+0xbe>
 8006794:	f04f 0800 	mov.w	r8, #0
 8006798:	f104 091a 	add.w	r9, r4, #26
 800679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679e:	3b01      	subs	r3, #1
 80067a0:	4543      	cmp	r3, r8
 80067a2:	dc09      	bgt.n	80067b8 <_printf_float+0x260>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	079b      	lsls	r3, r3, #30
 80067a8:	f100 8107 	bmi.w	80069ba <_printf_float+0x462>
 80067ac:	68e0      	ldr	r0, [r4, #12]
 80067ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067b0:	4298      	cmp	r0, r3
 80067b2:	bfb8      	it	lt
 80067b4:	4618      	movlt	r0, r3
 80067b6:	e730      	b.n	800661a <_printf_float+0xc2>
 80067b8:	2301      	movs	r3, #1
 80067ba:	464a      	mov	r2, r9
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af27 	beq.w	8006616 <_printf_float+0xbe>
 80067c8:	f108 0801 	add.w	r8, r8, #1
 80067cc:	e7e6      	b.n	800679c <_printf_float+0x244>
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	dc39      	bgt.n	8006848 <_printf_float+0x2f0>
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <_printf_float+0x2ec>)
 80067d6:	2301      	movs	r3, #1
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f af19 	beq.w	8006616 <_printf_float+0xbe>
 80067e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067e8:	4313      	orrs	r3, r2
 80067ea:	d102      	bne.n	80067f2 <_printf_float+0x29a>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	d5d8      	bpl.n	80067a4 <_printf_float+0x24c>
 80067f2:	ee18 3a10 	vmov	r3, s16
 80067f6:	4652      	mov	r2, sl
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af09 	beq.w	8006616 <_printf_float+0xbe>
 8006804:	f04f 0900 	mov.w	r9, #0
 8006808:	f104 0a1a 	add.w	sl, r4, #26
 800680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680e:	425b      	negs	r3, r3
 8006810:	454b      	cmp	r3, r9
 8006812:	dc01      	bgt.n	8006818 <_printf_float+0x2c0>
 8006814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006816:	e792      	b.n	800673e <_printf_float+0x1e6>
 8006818:	2301      	movs	r3, #1
 800681a:	4652      	mov	r2, sl
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f aef7 	beq.w	8006616 <_printf_float+0xbe>
 8006828:	f109 0901 	add.w	r9, r9, #1
 800682c:	e7ee      	b.n	800680c <_printf_float+0x2b4>
 800682e:	bf00      	nop
 8006830:	7fefffff 	.word	0x7fefffff
 8006834:	0800d090 	.word	0x0800d090
 8006838:	0800d094 	.word	0x0800d094
 800683c:	0800d098 	.word	0x0800d098
 8006840:	0800d09c 	.word	0x0800d09c
 8006844:	0800d0a0 	.word	0x0800d0a0
 8006848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800684a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800684c:	429a      	cmp	r2, r3
 800684e:	bfa8      	it	ge
 8006850:	461a      	movge	r2, r3
 8006852:	2a00      	cmp	r2, #0
 8006854:	4691      	mov	r9, r2
 8006856:	dc37      	bgt.n	80068c8 <_printf_float+0x370>
 8006858:	f04f 0b00 	mov.w	fp, #0
 800685c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006860:	f104 021a 	add.w	r2, r4, #26
 8006864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	eba3 0309 	sub.w	r3, r3, r9
 800686c:	455b      	cmp	r3, fp
 800686e:	dc33      	bgt.n	80068d8 <_printf_float+0x380>
 8006870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006874:	429a      	cmp	r2, r3
 8006876:	db3b      	blt.n	80068f0 <_printf_float+0x398>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d438      	bmi.n	80068f0 <_printf_float+0x398>
 800687e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006882:	eba2 0903 	sub.w	r9, r2, r3
 8006886:	9b05      	ldr	r3, [sp, #20]
 8006888:	1ad2      	subs	r2, r2, r3
 800688a:	4591      	cmp	r9, r2
 800688c:	bfa8      	it	ge
 800688e:	4691      	movge	r9, r2
 8006890:	f1b9 0f00 	cmp.w	r9, #0
 8006894:	dc35      	bgt.n	8006902 <_printf_float+0x3aa>
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800689e:	f104 0a1a 	add.w	sl, r4, #26
 80068a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	eba3 0309 	sub.w	r3, r3, r9
 80068ac:	4543      	cmp	r3, r8
 80068ae:	f77f af79 	ble.w	80067a4 <_printf_float+0x24c>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4652      	mov	r2, sl
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f aeaa 	beq.w	8006616 <_printf_float+0xbe>
 80068c2:	f108 0801 	add.w	r8, r8, #1
 80068c6:	e7ec      	b.n	80068a2 <_printf_float+0x34a>
 80068c8:	4613      	mov	r3, r2
 80068ca:	4631      	mov	r1, r6
 80068cc:	4642      	mov	r2, r8
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	d1c0      	bne.n	8006858 <_printf_float+0x300>
 80068d6:	e69e      	b.n	8006616 <_printf_float+0xbe>
 80068d8:	2301      	movs	r3, #1
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	9205      	str	r2, [sp, #20]
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f ae97 	beq.w	8006616 <_printf_float+0xbe>
 80068e8:	9a05      	ldr	r2, [sp, #20]
 80068ea:	f10b 0b01 	add.w	fp, fp, #1
 80068ee:	e7b9      	b.n	8006864 <_printf_float+0x30c>
 80068f0:	ee18 3a10 	vmov	r3, s16
 80068f4:	4652      	mov	r2, sl
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	d1be      	bne.n	800687e <_printf_float+0x326>
 8006900:	e689      	b.n	8006616 <_printf_float+0xbe>
 8006902:	9a05      	ldr	r2, [sp, #20]
 8006904:	464b      	mov	r3, r9
 8006906:	4442      	add	r2, r8
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	d1c1      	bne.n	8006896 <_printf_float+0x33e>
 8006912:	e680      	b.n	8006616 <_printf_float+0xbe>
 8006914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006916:	2a01      	cmp	r2, #1
 8006918:	dc01      	bgt.n	800691e <_printf_float+0x3c6>
 800691a:	07db      	lsls	r3, r3, #31
 800691c:	d53a      	bpl.n	8006994 <_printf_float+0x43c>
 800691e:	2301      	movs	r3, #1
 8006920:	4642      	mov	r2, r8
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f ae74 	beq.w	8006616 <_printf_float+0xbe>
 800692e:	ee18 3a10 	vmov	r3, s16
 8006932:	4652      	mov	r2, sl
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f ae6b 	beq.w	8006616 <_printf_float+0xbe>
 8006940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800694c:	f7fa f8e4 	bl	8000b18 <__aeabi_dcmpeq>
 8006950:	b9d8      	cbnz	r0, 800698a <_printf_float+0x432>
 8006952:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006956:	f108 0201 	add.w	r2, r8, #1
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d10e      	bne.n	8006982 <_printf_float+0x42a>
 8006964:	e657      	b.n	8006616 <_printf_float+0xbe>
 8006966:	2301      	movs	r3, #1
 8006968:	4652      	mov	r2, sl
 800696a:	4631      	mov	r1, r6
 800696c:	4628      	mov	r0, r5
 800696e:	47b8      	blx	r7
 8006970:	3001      	adds	r0, #1
 8006972:	f43f ae50 	beq.w	8006616 <_printf_float+0xbe>
 8006976:	f108 0801 	add.w	r8, r8, #1
 800697a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697c:	3b01      	subs	r3, #1
 800697e:	4543      	cmp	r3, r8
 8006980:	dcf1      	bgt.n	8006966 <_printf_float+0x40e>
 8006982:	464b      	mov	r3, r9
 8006984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006988:	e6da      	b.n	8006740 <_printf_float+0x1e8>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	f104 0a1a 	add.w	sl, r4, #26
 8006992:	e7f2      	b.n	800697a <_printf_float+0x422>
 8006994:	2301      	movs	r3, #1
 8006996:	4642      	mov	r2, r8
 8006998:	e7df      	b.n	800695a <_printf_float+0x402>
 800699a:	2301      	movs	r3, #1
 800699c:	464a      	mov	r2, r9
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f ae36 	beq.w	8006616 <_printf_float+0xbe>
 80069aa:	f108 0801 	add.w	r8, r8, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	4543      	cmp	r3, r8
 80069b6:	dcf0      	bgt.n	800699a <_printf_float+0x442>
 80069b8:	e6f8      	b.n	80067ac <_printf_float+0x254>
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	f104 0919 	add.w	r9, r4, #25
 80069c2:	e7f4      	b.n	80069ae <_printf_float+0x456>

080069c4 <_printf_common>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	4616      	mov	r6, r2
 80069ca:	4699      	mov	r9, r3
 80069cc:	688a      	ldr	r2, [r1, #8]
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	bfb8      	it	lt
 80069d8:	4613      	movlt	r3, r2
 80069da:	6033      	str	r3, [r6, #0]
 80069dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069e0:	4607      	mov	r7, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	b10a      	cbz	r2, 80069ea <_printf_common+0x26>
 80069e6:	3301      	adds	r3, #1
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	0699      	lsls	r1, r3, #26
 80069ee:	bf42      	ittt	mi
 80069f0:	6833      	ldrmi	r3, [r6, #0]
 80069f2:	3302      	addmi	r3, #2
 80069f4:	6033      	strmi	r3, [r6, #0]
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	f015 0506 	ands.w	r5, r5, #6
 80069fc:	d106      	bne.n	8006a0c <_printf_common+0x48>
 80069fe:	f104 0a19 	add.w	sl, r4, #25
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	6832      	ldr	r2, [r6, #0]
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dc26      	bgt.n	8006a5a <_printf_common+0x96>
 8006a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a10:	1e13      	subs	r3, r2, #0
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	0692      	lsls	r2, r2, #26
 8006a1a:	d42b      	bmi.n	8006a74 <_printf_common+0xb0>
 8006a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a20:	4649      	mov	r1, r9
 8006a22:	4638      	mov	r0, r7
 8006a24:	47c0      	blx	r8
 8006a26:	3001      	adds	r0, #1
 8006a28:	d01e      	beq.n	8006a68 <_printf_common+0xa4>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	6922      	ldr	r2, [r4, #16]
 8006a2e:	f003 0306 	and.w	r3, r3, #6
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	bf02      	ittt	eq
 8006a36:	68e5      	ldreq	r5, [r4, #12]
 8006a38:	6833      	ldreq	r3, [r6, #0]
 8006a3a:	1aed      	subeq	r5, r5, r3
 8006a3c:	68a3      	ldr	r3, [r4, #8]
 8006a3e:	bf0c      	ite	eq
 8006a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a44:	2500      	movne	r5, #0
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bfc4      	itt	gt
 8006a4a:	1a9b      	subgt	r3, r3, r2
 8006a4c:	18ed      	addgt	r5, r5, r3
 8006a4e:	2600      	movs	r6, #0
 8006a50:	341a      	adds	r4, #26
 8006a52:	42b5      	cmp	r5, r6
 8006a54:	d11a      	bne.n	8006a8c <_printf_common+0xc8>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e008      	b.n	8006a6c <_printf_common+0xa8>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4638      	mov	r0, r7
 8006a62:	47c0      	blx	r8
 8006a64:	3001      	adds	r0, #1
 8006a66:	d103      	bne.n	8006a70 <_printf_common+0xac>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a70:	3501      	adds	r5, #1
 8006a72:	e7c6      	b.n	8006a02 <_printf_common+0x3e>
 8006a74:	18e1      	adds	r1, r4, r3
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	2030      	movs	r0, #48	; 0x30
 8006a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a7e:	4422      	add	r2, r4
 8006a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a88:	3302      	adds	r3, #2
 8006a8a:	e7c7      	b.n	8006a1c <_printf_common+0x58>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d0e6      	beq.n	8006a68 <_printf_common+0xa4>
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	e7d9      	b.n	8006a52 <_printf_common+0x8e>
	...

08006aa0 <_printf_i>:
 8006aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	7e0f      	ldrb	r7, [r1, #24]
 8006aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006aa8:	2f78      	cmp	r7, #120	; 0x78
 8006aaa:	4691      	mov	r9, r2
 8006aac:	4680      	mov	r8, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	469a      	mov	sl, r3
 8006ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ab6:	d807      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ab8:	2f62      	cmp	r7, #98	; 0x62
 8006aba:	d80a      	bhi.n	8006ad2 <_printf_i+0x32>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	f000 80d4 	beq.w	8006c6a <_printf_i+0x1ca>
 8006ac2:	2f58      	cmp	r7, #88	; 0x58
 8006ac4:	f000 80c0 	beq.w	8006c48 <_printf_i+0x1a8>
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad0:	e03a      	b.n	8006b48 <_printf_i+0xa8>
 8006ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ad6:	2b15      	cmp	r3, #21
 8006ad8:	d8f6      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ada:	a101      	add	r1, pc, #4	; (adr r1, 8006ae0 <_printf_i+0x40>)
 8006adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006ac9 	.word	0x08006ac9
 8006aec:	08006ac9 	.word	0x08006ac9
 8006af0:	08006ac9 	.word	0x08006ac9
 8006af4:	08006ac9 	.word	0x08006ac9
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006ac9 	.word	0x08006ac9
 8006b00:	08006ac9 	.word	0x08006ac9
 8006b04:	08006ac9 	.word	0x08006ac9
 8006b08:	08006ac9 	.word	0x08006ac9
 8006b0c:	08006c51 	.word	0x08006c51
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006c0b 	.word	0x08006c0b
 8006b18:	08006ac9 	.word	0x08006ac9
 8006b1c:	08006ac9 	.word	0x08006ac9
 8006b20:	08006c73 	.word	0x08006c73
 8006b24:	08006ac9 	.word	0x08006ac9
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006ac9 	.word	0x08006ac9
 8006b30:	08006ac9 	.word	0x08006ac9
 8006b34:	08006c13 	.word	0x08006c13
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	602a      	str	r2, [r5, #0]
 8006b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e09f      	b.n	8006c8c <_printf_i+0x1ec>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	0607      	lsls	r7, r0, #24
 8006b52:	f103 0104 	add.w	r1, r3, #4
 8006b56:	6029      	str	r1, [r5, #0]
 8006b58:	d501      	bpl.n	8006b5e <_printf_i+0xbe>
 8006b5a:	681e      	ldr	r6, [r3, #0]
 8006b5c:	e003      	b.n	8006b66 <_printf_i+0xc6>
 8006b5e:	0646      	lsls	r6, r0, #25
 8006b60:	d5fb      	bpl.n	8006b5a <_printf_i+0xba>
 8006b62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	da03      	bge.n	8006b72 <_printf_i+0xd2>
 8006b6a:	232d      	movs	r3, #45	; 0x2d
 8006b6c:	4276      	negs	r6, r6
 8006b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b72:	485a      	ldr	r0, [pc, #360]	; (8006cdc <_printf_i+0x23c>)
 8006b74:	230a      	movs	r3, #10
 8006b76:	e012      	b.n	8006b9e <_printf_i+0xfe>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	1d19      	adds	r1, r3, #4
 8006b7e:	6029      	str	r1, [r5, #0]
 8006b80:	0605      	lsls	r5, r0, #24
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0xe8>
 8006b84:	681e      	ldr	r6, [r3, #0]
 8006b86:	e002      	b.n	8006b8e <_printf_i+0xee>
 8006b88:	0641      	lsls	r1, r0, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0xe4>
 8006b8c:	881e      	ldrh	r6, [r3, #0]
 8006b8e:	4853      	ldr	r0, [pc, #332]	; (8006cdc <_printf_i+0x23c>)
 8006b90:	2f6f      	cmp	r7, #111	; 0x6f
 8006b92:	bf0c      	ite	eq
 8006b94:	2308      	moveq	r3, #8
 8006b96:	230a      	movne	r3, #10
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b9e:	6865      	ldr	r5, [r4, #4]
 8006ba0:	60a5      	str	r5, [r4, #8]
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	bfa2      	ittt	ge
 8006ba6:	6821      	ldrge	r1, [r4, #0]
 8006ba8:	f021 0104 	bicge.w	r1, r1, #4
 8006bac:	6021      	strge	r1, [r4, #0]
 8006bae:	b90e      	cbnz	r6, 8006bb4 <_printf_i+0x114>
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	d04b      	beq.n	8006c4c <_printf_i+0x1ac>
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bba:	fb03 6711 	mls	r7, r3, r1, r6
 8006bbe:	5dc7      	ldrb	r7, [r0, r7]
 8006bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bc4:	4637      	mov	r7, r6
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	460e      	mov	r6, r1
 8006bca:	d9f4      	bls.n	8006bb6 <_printf_i+0x116>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d10b      	bne.n	8006be8 <_printf_i+0x148>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07de      	lsls	r6, r3, #31
 8006bd4:	d508      	bpl.n	8006be8 <_printf_i+0x148>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	bfde      	ittt	le
 8006bde:	2330      	movle	r3, #48	; 0x30
 8006be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006be4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006be8:	1b52      	subs	r2, r2, r5
 8006bea:	6122      	str	r2, [r4, #16]
 8006bec:	f8cd a000 	str.w	sl, [sp]
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f7ff fee4 	bl	80069c4 <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d14a      	bne.n	8006c96 <_printf_i+0x1f6>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b004      	add	sp, #16
 8006c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	4833      	ldr	r0, [pc, #204]	; (8006ce0 <_printf_i+0x240>)
 8006c14:	2778      	movs	r7, #120	; 0x78
 8006c16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	6829      	ldr	r1, [r5, #0]
 8006c1e:	061f      	lsls	r7, r3, #24
 8006c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c24:	d402      	bmi.n	8006c2c <_printf_i+0x18c>
 8006c26:	065f      	lsls	r7, r3, #25
 8006c28:	bf48      	it	mi
 8006c2a:	b2b6      	uxthmi	r6, r6
 8006c2c:	07df      	lsls	r7, r3, #31
 8006c2e:	bf48      	it	mi
 8006c30:	f043 0320 	orrmi.w	r3, r3, #32
 8006c34:	6029      	str	r1, [r5, #0]
 8006c36:	bf48      	it	mi
 8006c38:	6023      	strmi	r3, [r4, #0]
 8006c3a:	b91e      	cbnz	r6, 8006c44 <_printf_i+0x1a4>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	f023 0320 	bic.w	r3, r3, #32
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	2310      	movs	r3, #16
 8006c46:	e7a7      	b.n	8006b98 <_printf_i+0xf8>
 8006c48:	4824      	ldr	r0, [pc, #144]	; (8006cdc <_printf_i+0x23c>)
 8006c4a:	e7e4      	b.n	8006c16 <_printf_i+0x176>
 8006c4c:	4615      	mov	r5, r2
 8006c4e:	e7bd      	b.n	8006bcc <_printf_i+0x12c>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	6826      	ldr	r6, [r4, #0]
 8006c54:	6961      	ldr	r1, [r4, #20]
 8006c56:	1d18      	adds	r0, r3, #4
 8006c58:	6028      	str	r0, [r5, #0]
 8006c5a:	0635      	lsls	r5, r6, #24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0x1c4>
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0x1ca>
 8006c64:	0670      	lsls	r0, r6, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0x1c0>
 8006c68:	8019      	strh	r1, [r3, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	4615      	mov	r5, r2
 8006c70:	e7bc      	b.n	8006bec <_printf_i+0x14c>
 8006c72:	682b      	ldr	r3, [r5, #0]
 8006c74:	1d1a      	adds	r2, r3, #4
 8006c76:	602a      	str	r2, [r5, #0]
 8006c78:	681d      	ldr	r5, [r3, #0]
 8006c7a:	6862      	ldr	r2, [r4, #4]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f7f9 face 	bl	8000220 <memchr>
 8006c84:	b108      	cbz	r0, 8006c8a <_printf_i+0x1ea>
 8006c86:	1b40      	subs	r0, r0, r5
 8006c88:	6060      	str	r0, [r4, #4]
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c94:	e7aa      	b.n	8006bec <_printf_i+0x14c>
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	462a      	mov	r2, r5
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	47d0      	blx	sl
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d0ad      	beq.n	8006c00 <_printf_i+0x160>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	079b      	lsls	r3, r3, #30
 8006ca8:	d413      	bmi.n	8006cd2 <_printf_i+0x232>
 8006caa:	68e0      	ldr	r0, [r4, #12]
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	bfb8      	it	lt
 8006cb2:	4618      	movlt	r0, r3
 8006cb4:	e7a6      	b.n	8006c04 <_printf_i+0x164>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4632      	mov	r2, r6
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d09d      	beq.n	8006c00 <_printf_i+0x160>
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	9903      	ldr	r1, [sp, #12]
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dcf2      	bgt.n	8006cb6 <_printf_i+0x216>
 8006cd0:	e7eb      	b.n	8006caa <_printf_i+0x20a>
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	f104 0619 	add.w	r6, r4, #25
 8006cd8:	e7f5      	b.n	8006cc6 <_printf_i+0x226>
 8006cda:	bf00      	nop
 8006cdc:	0800d0a2 	.word	0x0800d0a2
 8006ce0:	0800d0b3 	.word	0x0800d0b3

08006ce4 <_scanf_float>:
 8006ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	4617      	mov	r7, r2
 8006cec:	9303      	str	r3, [sp, #12]
 8006cee:	688b      	ldr	r3, [r1, #8]
 8006cf0:	1e5a      	subs	r2, r3, #1
 8006cf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cf6:	bf83      	ittte	hi
 8006cf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cfc:	195b      	addhi	r3, r3, r5
 8006cfe:	9302      	strhi	r3, [sp, #8]
 8006d00:	2300      	movls	r3, #0
 8006d02:	bf86      	itte	hi
 8006d04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006d08:	608b      	strhi	r3, [r1, #8]
 8006d0a:	9302      	strls	r3, [sp, #8]
 8006d0c:	680b      	ldr	r3, [r1, #0]
 8006d0e:	468b      	mov	fp, r1
 8006d10:	2500      	movs	r5, #0
 8006d12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d16:	f84b 3b1c 	str.w	r3, [fp], #28
 8006d1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d1e:	4680      	mov	r8, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	465e      	mov	r6, fp
 8006d24:	46aa      	mov	sl, r5
 8006d26:	46a9      	mov	r9, r5
 8006d28:	9501      	str	r5, [sp, #4]
 8006d2a:	68a2      	ldr	r2, [r4, #8]
 8006d2c:	b152      	cbz	r2, 8006d44 <_scanf_float+0x60>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b4e      	cmp	r3, #78	; 0x4e
 8006d34:	d864      	bhi.n	8006e00 <_scanf_float+0x11c>
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d83c      	bhi.n	8006db4 <_scanf_float+0xd0>
 8006d3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006d3e:	b2c8      	uxtb	r0, r1
 8006d40:	280e      	cmp	r0, #14
 8006d42:	d93a      	bls.n	8006dba <_scanf_float+0xd6>
 8006d44:	f1b9 0f00 	cmp.w	r9, #0
 8006d48:	d003      	beq.n	8006d52 <_scanf_float+0x6e>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d56:	f1ba 0f01 	cmp.w	sl, #1
 8006d5a:	f200 8113 	bhi.w	8006f84 <_scanf_float+0x2a0>
 8006d5e:	455e      	cmp	r6, fp
 8006d60:	f200 8105 	bhi.w	8006f6e <_scanf_float+0x28a>
 8006d64:	2501      	movs	r5, #1
 8006d66:	4628      	mov	r0, r5
 8006d68:	b007      	add	sp, #28
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d72:	2a0d      	cmp	r2, #13
 8006d74:	d8e6      	bhi.n	8006d44 <_scanf_float+0x60>
 8006d76:	a101      	add	r1, pc, #4	; (adr r1, 8006d7c <_scanf_float+0x98>)
 8006d78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d7c:	08006ebb 	.word	0x08006ebb
 8006d80:	08006d45 	.word	0x08006d45
 8006d84:	08006d45 	.word	0x08006d45
 8006d88:	08006d45 	.word	0x08006d45
 8006d8c:	08006f1b 	.word	0x08006f1b
 8006d90:	08006ef3 	.word	0x08006ef3
 8006d94:	08006d45 	.word	0x08006d45
 8006d98:	08006d45 	.word	0x08006d45
 8006d9c:	08006ec9 	.word	0x08006ec9
 8006da0:	08006d45 	.word	0x08006d45
 8006da4:	08006d45 	.word	0x08006d45
 8006da8:	08006d45 	.word	0x08006d45
 8006dac:	08006d45 	.word	0x08006d45
 8006db0:	08006e81 	.word	0x08006e81
 8006db4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006db8:	e7db      	b.n	8006d72 <_scanf_float+0x8e>
 8006dba:	290e      	cmp	r1, #14
 8006dbc:	d8c2      	bhi.n	8006d44 <_scanf_float+0x60>
 8006dbe:	a001      	add	r0, pc, #4	; (adr r0, 8006dc4 <_scanf_float+0xe0>)
 8006dc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006dc4:	08006e73 	.word	0x08006e73
 8006dc8:	08006d45 	.word	0x08006d45
 8006dcc:	08006e73 	.word	0x08006e73
 8006dd0:	08006f07 	.word	0x08006f07
 8006dd4:	08006d45 	.word	0x08006d45
 8006dd8:	08006e21 	.word	0x08006e21
 8006ddc:	08006e5d 	.word	0x08006e5d
 8006de0:	08006e5d 	.word	0x08006e5d
 8006de4:	08006e5d 	.word	0x08006e5d
 8006de8:	08006e5d 	.word	0x08006e5d
 8006dec:	08006e5d 	.word	0x08006e5d
 8006df0:	08006e5d 	.word	0x08006e5d
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006e5d 	.word	0x08006e5d
 8006dfc:	08006e5d 	.word	0x08006e5d
 8006e00:	2b6e      	cmp	r3, #110	; 0x6e
 8006e02:	d809      	bhi.n	8006e18 <_scanf_float+0x134>
 8006e04:	2b60      	cmp	r3, #96	; 0x60
 8006e06:	d8b2      	bhi.n	8006d6e <_scanf_float+0x8a>
 8006e08:	2b54      	cmp	r3, #84	; 0x54
 8006e0a:	d077      	beq.n	8006efc <_scanf_float+0x218>
 8006e0c:	2b59      	cmp	r3, #89	; 0x59
 8006e0e:	d199      	bne.n	8006d44 <_scanf_float+0x60>
 8006e10:	2d07      	cmp	r5, #7
 8006e12:	d197      	bne.n	8006d44 <_scanf_float+0x60>
 8006e14:	2508      	movs	r5, #8
 8006e16:	e029      	b.n	8006e6c <_scanf_float+0x188>
 8006e18:	2b74      	cmp	r3, #116	; 0x74
 8006e1a:	d06f      	beq.n	8006efc <_scanf_float+0x218>
 8006e1c:	2b79      	cmp	r3, #121	; 0x79
 8006e1e:	e7f6      	b.n	8006e0e <_scanf_float+0x12a>
 8006e20:	6821      	ldr	r1, [r4, #0]
 8006e22:	05c8      	lsls	r0, r1, #23
 8006e24:	d51a      	bpl.n	8006e5c <_scanf_float+0x178>
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e2c:	6021      	str	r1, [r4, #0]
 8006e2e:	f109 0901 	add.w	r9, r9, #1
 8006e32:	b11b      	cbz	r3, 8006e3c <_scanf_float+0x158>
 8006e34:	3b01      	subs	r3, #1
 8006e36:	3201      	adds	r2, #1
 8006e38:	9302      	str	r3, [sp, #8]
 8006e3a:	60a2      	str	r2, [r4, #8]
 8006e3c:	68a3      	ldr	r3, [r4, #8]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	60a3      	str	r3, [r4, #8]
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	3301      	adds	r3, #1
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	607b      	str	r3, [r7, #4]
 8006e50:	f340 8084 	ble.w	8006f5c <_scanf_float+0x278>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	603b      	str	r3, [r7, #0]
 8006e5a:	e766      	b.n	8006d2a <_scanf_float+0x46>
 8006e5c:	eb1a 0f05 	cmn.w	sl, r5
 8006e60:	f47f af70 	bne.w	8006d44 <_scanf_float+0x60>
 8006e64:	6822      	ldr	r2, [r4, #0]
 8006e66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e70:	e7e4      	b.n	8006e3c <_scanf_float+0x158>
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	0610      	lsls	r0, r2, #24
 8006e76:	f57f af65 	bpl.w	8006d44 <_scanf_float+0x60>
 8006e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e7e:	e7f4      	b.n	8006e6a <_scanf_float+0x186>
 8006e80:	f1ba 0f00 	cmp.w	sl, #0
 8006e84:	d10e      	bne.n	8006ea4 <_scanf_float+0x1c0>
 8006e86:	f1b9 0f00 	cmp.w	r9, #0
 8006e8a:	d10e      	bne.n	8006eaa <_scanf_float+0x1c6>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e96:	d108      	bne.n	8006eaa <_scanf_float+0x1c6>
 8006e98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	f04f 0a01 	mov.w	sl, #1
 8006ea2:	e7e3      	b.n	8006e6c <_scanf_float+0x188>
 8006ea4:	f1ba 0f02 	cmp.w	sl, #2
 8006ea8:	d055      	beq.n	8006f56 <_scanf_float+0x272>
 8006eaa:	2d01      	cmp	r5, #1
 8006eac:	d002      	beq.n	8006eb4 <_scanf_float+0x1d0>
 8006eae:	2d04      	cmp	r5, #4
 8006eb0:	f47f af48 	bne.w	8006d44 <_scanf_float+0x60>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	b2ed      	uxtb	r5, r5
 8006eb8:	e7d8      	b.n	8006e6c <_scanf_float+0x188>
 8006eba:	f1ba 0f01 	cmp.w	sl, #1
 8006ebe:	f47f af41 	bne.w	8006d44 <_scanf_float+0x60>
 8006ec2:	f04f 0a02 	mov.w	sl, #2
 8006ec6:	e7d1      	b.n	8006e6c <_scanf_float+0x188>
 8006ec8:	b97d      	cbnz	r5, 8006eea <_scanf_float+0x206>
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	f47f af3c 	bne.w	8006d4a <_scanf_float+0x66>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ed8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006edc:	f47f af39 	bne.w	8006d52 <_scanf_float+0x6e>
 8006ee0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ee4:	6022      	str	r2, [r4, #0]
 8006ee6:	2501      	movs	r5, #1
 8006ee8:	e7c0      	b.n	8006e6c <_scanf_float+0x188>
 8006eea:	2d03      	cmp	r5, #3
 8006eec:	d0e2      	beq.n	8006eb4 <_scanf_float+0x1d0>
 8006eee:	2d05      	cmp	r5, #5
 8006ef0:	e7de      	b.n	8006eb0 <_scanf_float+0x1cc>
 8006ef2:	2d02      	cmp	r5, #2
 8006ef4:	f47f af26 	bne.w	8006d44 <_scanf_float+0x60>
 8006ef8:	2503      	movs	r5, #3
 8006efa:	e7b7      	b.n	8006e6c <_scanf_float+0x188>
 8006efc:	2d06      	cmp	r5, #6
 8006efe:	f47f af21 	bne.w	8006d44 <_scanf_float+0x60>
 8006f02:	2507      	movs	r5, #7
 8006f04:	e7b2      	b.n	8006e6c <_scanf_float+0x188>
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	0591      	lsls	r1, r2, #22
 8006f0a:	f57f af1b 	bpl.w	8006d44 <_scanf_float+0x60>
 8006f0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f18:	e7a8      	b.n	8006e6c <_scanf_float+0x188>
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006f20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006f24:	d006      	beq.n	8006f34 <_scanf_float+0x250>
 8006f26:	0550      	lsls	r0, r2, #21
 8006f28:	f57f af0c 	bpl.w	8006d44 <_scanf_float+0x60>
 8006f2c:	f1b9 0f00 	cmp.w	r9, #0
 8006f30:	f43f af0f 	beq.w	8006d52 <_scanf_float+0x6e>
 8006f34:	0591      	lsls	r1, r2, #22
 8006f36:	bf58      	it	pl
 8006f38:	9901      	ldrpl	r1, [sp, #4]
 8006f3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f3e:	bf58      	it	pl
 8006f40:	eba9 0101 	subpl.w	r1, r9, r1
 8006f44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f48:	bf58      	it	pl
 8006f4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	f04f 0900 	mov.w	r9, #0
 8006f54:	e78a      	b.n	8006e6c <_scanf_float+0x188>
 8006f56:	f04f 0a03 	mov.w	sl, #3
 8006f5a:	e787      	b.n	8006e6c <_scanf_float+0x188>
 8006f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f60:	4639      	mov	r1, r7
 8006f62:	4640      	mov	r0, r8
 8006f64:	4798      	blx	r3
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f43f aedf 	beq.w	8006d2a <_scanf_float+0x46>
 8006f6c:	e6ea      	b.n	8006d44 <_scanf_float+0x60>
 8006f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f76:	463a      	mov	r2, r7
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4798      	blx	r3
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	e6ec      	b.n	8006d5e <_scanf_float+0x7a>
 8006f84:	1e6b      	subs	r3, r5, #1
 8006f86:	2b06      	cmp	r3, #6
 8006f88:	d825      	bhi.n	8006fd6 <_scanf_float+0x2f2>
 8006f8a:	2d02      	cmp	r5, #2
 8006f8c:	d836      	bhi.n	8006ffc <_scanf_float+0x318>
 8006f8e:	455e      	cmp	r6, fp
 8006f90:	f67f aee8 	bls.w	8006d64 <_scanf_float+0x80>
 8006f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f9c:	463a      	mov	r2, r7
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4798      	blx	r3
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	e7f1      	b.n	8006f8e <_scanf_float+0x2aa>
 8006faa:	9802      	ldr	r0, [sp, #8]
 8006fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006fb4:	9002      	str	r0, [sp, #8]
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4798      	blx	r3
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fc6:	fa5f fa8a 	uxtb.w	sl, sl
 8006fca:	f1ba 0f02 	cmp.w	sl, #2
 8006fce:	d1ec      	bne.n	8006faa <_scanf_float+0x2c6>
 8006fd0:	3d03      	subs	r5, #3
 8006fd2:	b2ed      	uxtb	r5, r5
 8006fd4:	1b76      	subs	r6, r6, r5
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	05da      	lsls	r2, r3, #23
 8006fda:	d52f      	bpl.n	800703c <_scanf_float+0x358>
 8006fdc:	055b      	lsls	r3, r3, #21
 8006fde:	d510      	bpl.n	8007002 <_scanf_float+0x31e>
 8006fe0:	455e      	cmp	r6, fp
 8006fe2:	f67f aebf 	bls.w	8006d64 <_scanf_float+0x80>
 8006fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fee:	463a      	mov	r2, r7
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4798      	blx	r3
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	6123      	str	r3, [r4, #16]
 8006ffa:	e7f1      	b.n	8006fe0 <_scanf_float+0x2fc>
 8006ffc:	46aa      	mov	sl, r5
 8006ffe:	9602      	str	r6, [sp, #8]
 8007000:	e7df      	b.n	8006fc2 <_scanf_float+0x2de>
 8007002:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	2965      	cmp	r1, #101	; 0x65
 800700a:	f103 33ff 	add.w	r3, r3, #4294967295
 800700e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	d00c      	beq.n	8007030 <_scanf_float+0x34c>
 8007016:	2945      	cmp	r1, #69	; 0x45
 8007018:	d00a      	beq.n	8007030 <_scanf_float+0x34c>
 800701a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800701e:	463a      	mov	r2, r7
 8007020:	4640      	mov	r0, r8
 8007022:	4798      	blx	r3
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800702a:	3b01      	subs	r3, #1
 800702c:	1eb5      	subs	r5, r6, #2
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007034:	463a      	mov	r2, r7
 8007036:	4640      	mov	r0, r8
 8007038:	4798      	blx	r3
 800703a:	462e      	mov	r6, r5
 800703c:	6825      	ldr	r5, [r4, #0]
 800703e:	f015 0510 	ands.w	r5, r5, #16
 8007042:	d158      	bne.n	80070f6 <_scanf_float+0x412>
 8007044:	7035      	strb	r5, [r6, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800704c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007050:	d11c      	bne.n	800708c <_scanf_float+0x3a8>
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	454b      	cmp	r3, r9
 8007056:	eba3 0209 	sub.w	r2, r3, r9
 800705a:	d124      	bne.n	80070a6 <_scanf_float+0x3c2>
 800705c:	2200      	movs	r2, #0
 800705e:	4659      	mov	r1, fp
 8007060:	4640      	mov	r0, r8
 8007062:	f002 fd39 	bl	8009ad8 <_strtod_r>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	6821      	ldr	r1, [r4, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f011 0f02 	tst.w	r1, #2
 8007070:	ec57 6b10 	vmov	r6, r7, d0
 8007074:	f103 0204 	add.w	r2, r3, #4
 8007078:	d020      	beq.n	80070bc <_scanf_float+0x3d8>
 800707a:	9903      	ldr	r1, [sp, #12]
 800707c:	600a      	str	r2, [r1, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	e9c3 6700 	strd	r6, r7, [r3]
 8007084:	68e3      	ldr	r3, [r4, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60e3      	str	r3, [r4, #12]
 800708a:	e66c      	b.n	8006d66 <_scanf_float+0x82>
 800708c:	9b04      	ldr	r3, [sp, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0e4      	beq.n	800705c <_scanf_float+0x378>
 8007092:	9905      	ldr	r1, [sp, #20]
 8007094:	230a      	movs	r3, #10
 8007096:	462a      	mov	r2, r5
 8007098:	3101      	adds	r1, #1
 800709a:	4640      	mov	r0, r8
 800709c:	f002 fda4 	bl	8009be8 <_strtol_r>
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	9e05      	ldr	r6, [sp, #20]
 80070a4:	1ac2      	subs	r2, r0, r3
 80070a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80070aa:	429e      	cmp	r6, r3
 80070ac:	bf28      	it	cs
 80070ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80070b2:	4912      	ldr	r1, [pc, #72]	; (80070fc <_scanf_float+0x418>)
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 f95d 	bl	8007374 <siprintf>
 80070ba:	e7cf      	b.n	800705c <_scanf_float+0x378>
 80070bc:	f011 0f04 	tst.w	r1, #4
 80070c0:	9903      	ldr	r1, [sp, #12]
 80070c2:	600a      	str	r2, [r1, #0]
 80070c4:	d1db      	bne.n	800707e <_scanf_float+0x39a>
 80070c6:	f8d3 8000 	ldr.w	r8, [r3]
 80070ca:	ee10 2a10 	vmov	r2, s0
 80070ce:	ee10 0a10 	vmov	r0, s0
 80070d2:	463b      	mov	r3, r7
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 fd51 	bl	8000b7c <__aeabi_dcmpun>
 80070da:	b128      	cbz	r0, 80070e8 <_scanf_float+0x404>
 80070dc:	4808      	ldr	r0, [pc, #32]	; (8007100 <_scanf_float+0x41c>)
 80070de:	f000 fac1 	bl	8007664 <nanf>
 80070e2:	ed88 0a00 	vstr	s0, [r8]
 80070e6:	e7cd      	b.n	8007084 <_scanf_float+0x3a0>
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 fda4 	bl	8000c38 <__aeabi_d2f>
 80070f0:	f8c8 0000 	str.w	r0, [r8]
 80070f4:	e7c6      	b.n	8007084 <_scanf_float+0x3a0>
 80070f6:	2500      	movs	r5, #0
 80070f8:	e635      	b.n	8006d66 <_scanf_float+0x82>
 80070fa:	bf00      	nop
 80070fc:	0800d0c4 	.word	0x0800d0c4
 8007100:	0800d455 	.word	0x0800d455

08007104 <std>:
 8007104:	2300      	movs	r3, #0
 8007106:	b510      	push	{r4, lr}
 8007108:	4604      	mov	r4, r0
 800710a:	e9c0 3300 	strd	r3, r3, [r0]
 800710e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007112:	6083      	str	r3, [r0, #8]
 8007114:	8181      	strh	r1, [r0, #12]
 8007116:	6643      	str	r3, [r0, #100]	; 0x64
 8007118:	81c2      	strh	r2, [r0, #14]
 800711a:	6183      	str	r3, [r0, #24]
 800711c:	4619      	mov	r1, r3
 800711e:	2208      	movs	r2, #8
 8007120:	305c      	adds	r0, #92	; 0x5c
 8007122:	f000 fa1f 	bl	8007564 <memset>
 8007126:	4b0d      	ldr	r3, [pc, #52]	; (800715c <std+0x58>)
 8007128:	6263      	str	r3, [r4, #36]	; 0x24
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <std+0x5c>)
 800712c:	62a3      	str	r3, [r4, #40]	; 0x28
 800712e:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <std+0x60>)
 8007130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <std+0x64>)
 8007134:	6323      	str	r3, [r4, #48]	; 0x30
 8007136:	4b0d      	ldr	r3, [pc, #52]	; (800716c <std+0x68>)
 8007138:	6224      	str	r4, [r4, #32]
 800713a:	429c      	cmp	r4, r3
 800713c:	d006      	beq.n	800714c <std+0x48>
 800713e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007142:	4294      	cmp	r4, r2
 8007144:	d002      	beq.n	800714c <std+0x48>
 8007146:	33d0      	adds	r3, #208	; 0xd0
 8007148:	429c      	cmp	r4, r3
 800714a:	d105      	bne.n	8007158 <std+0x54>
 800714c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007154:	f000 ba82 	b.w	800765c <__retarget_lock_init_recursive>
 8007158:	bd10      	pop	{r4, pc}
 800715a:	bf00      	nop
 800715c:	080073b5 	.word	0x080073b5
 8007160:	080073d7 	.word	0x080073d7
 8007164:	0800740f 	.word	0x0800740f
 8007168:	08007433 	.word	0x08007433
 800716c:	200007d4 	.word	0x200007d4

08007170 <stdio_exit_handler>:
 8007170:	4a02      	ldr	r2, [pc, #8]	; (800717c <stdio_exit_handler+0xc>)
 8007172:	4903      	ldr	r1, [pc, #12]	; (8007180 <stdio_exit_handler+0x10>)
 8007174:	4803      	ldr	r0, [pc, #12]	; (8007184 <stdio_exit_handler+0x14>)
 8007176:	f000 b869 	b.w	800724c <_fwalk_sglue>
 800717a:	bf00      	nop
 800717c:	20000014 	.word	0x20000014
 8007180:	0800a231 	.word	0x0800a231
 8007184:	20000020 	.word	0x20000020

08007188 <cleanup_stdio>:
 8007188:	6841      	ldr	r1, [r0, #4]
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <cleanup_stdio+0x34>)
 800718c:	4299      	cmp	r1, r3
 800718e:	b510      	push	{r4, lr}
 8007190:	4604      	mov	r4, r0
 8007192:	d001      	beq.n	8007198 <cleanup_stdio+0x10>
 8007194:	f003 f84c 	bl	800a230 <_fflush_r>
 8007198:	68a1      	ldr	r1, [r4, #8]
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <cleanup_stdio+0x38>)
 800719c:	4299      	cmp	r1, r3
 800719e:	d002      	beq.n	80071a6 <cleanup_stdio+0x1e>
 80071a0:	4620      	mov	r0, r4
 80071a2:	f003 f845 	bl	800a230 <_fflush_r>
 80071a6:	68e1      	ldr	r1, [r4, #12]
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <cleanup_stdio+0x3c>)
 80071aa:	4299      	cmp	r1, r3
 80071ac:	d004      	beq.n	80071b8 <cleanup_stdio+0x30>
 80071ae:	4620      	mov	r0, r4
 80071b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b4:	f003 b83c 	b.w	800a230 <_fflush_r>
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	bf00      	nop
 80071bc:	200007d4 	.word	0x200007d4
 80071c0:	2000083c 	.word	0x2000083c
 80071c4:	200008a4 	.word	0x200008a4

080071c8 <global_stdio_init.part.0>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <global_stdio_init.part.0+0x30>)
 80071cc:	4c0b      	ldr	r4, [pc, #44]	; (80071fc <global_stdio_init.part.0+0x34>)
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <global_stdio_init.part.0+0x38>)
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	4620      	mov	r0, r4
 80071d4:	2200      	movs	r2, #0
 80071d6:	2104      	movs	r1, #4
 80071d8:	f7ff ff94 	bl	8007104 <std>
 80071dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071e0:	2201      	movs	r2, #1
 80071e2:	2109      	movs	r1, #9
 80071e4:	f7ff ff8e 	bl	8007104 <std>
 80071e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071ec:	2202      	movs	r2, #2
 80071ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f2:	2112      	movs	r1, #18
 80071f4:	f7ff bf86 	b.w	8007104 <std>
 80071f8:	2000090c 	.word	0x2000090c
 80071fc:	200007d4 	.word	0x200007d4
 8007200:	08007171 	.word	0x08007171

08007204 <__sfp_lock_acquire>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__sfp_lock_acquire+0x8>)
 8007206:	f000 ba2a 	b.w	800765e <__retarget_lock_acquire_recursive>
 800720a:	bf00      	nop
 800720c:	20000915 	.word	0x20000915

08007210 <__sfp_lock_release>:
 8007210:	4801      	ldr	r0, [pc, #4]	; (8007218 <__sfp_lock_release+0x8>)
 8007212:	f000 ba25 	b.w	8007660 <__retarget_lock_release_recursive>
 8007216:	bf00      	nop
 8007218:	20000915 	.word	0x20000915

0800721c <__sinit>:
 800721c:	b510      	push	{r4, lr}
 800721e:	4604      	mov	r4, r0
 8007220:	f7ff fff0 	bl	8007204 <__sfp_lock_acquire>
 8007224:	6a23      	ldr	r3, [r4, #32]
 8007226:	b11b      	cbz	r3, 8007230 <__sinit+0x14>
 8007228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722c:	f7ff bff0 	b.w	8007210 <__sfp_lock_release>
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <__sinit+0x28>)
 8007232:	6223      	str	r3, [r4, #32]
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <__sinit+0x2c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f5      	bne.n	8007228 <__sinit+0xc>
 800723c:	f7ff ffc4 	bl	80071c8 <global_stdio_init.part.0>
 8007240:	e7f2      	b.n	8007228 <__sinit+0xc>
 8007242:	bf00      	nop
 8007244:	08007189 	.word	0x08007189
 8007248:	2000090c 	.word	0x2000090c

0800724c <_fwalk_sglue>:
 800724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007250:	4607      	mov	r7, r0
 8007252:	4688      	mov	r8, r1
 8007254:	4614      	mov	r4, r2
 8007256:	2600      	movs	r6, #0
 8007258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800725c:	f1b9 0901 	subs.w	r9, r9, #1
 8007260:	d505      	bpl.n	800726e <_fwalk_sglue+0x22>
 8007262:	6824      	ldr	r4, [r4, #0]
 8007264:	2c00      	cmp	r4, #0
 8007266:	d1f7      	bne.n	8007258 <_fwalk_sglue+0xc>
 8007268:	4630      	mov	r0, r6
 800726a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d907      	bls.n	8007284 <_fwalk_sglue+0x38>
 8007274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007278:	3301      	adds	r3, #1
 800727a:	d003      	beq.n	8007284 <_fwalk_sglue+0x38>
 800727c:	4629      	mov	r1, r5
 800727e:	4638      	mov	r0, r7
 8007280:	47c0      	blx	r8
 8007282:	4306      	orrs	r6, r0
 8007284:	3568      	adds	r5, #104	; 0x68
 8007286:	e7e9      	b.n	800725c <_fwalk_sglue+0x10>

08007288 <iprintf>:
 8007288:	b40f      	push	{r0, r1, r2, r3}
 800728a:	b507      	push	{r0, r1, r2, lr}
 800728c:	4906      	ldr	r1, [pc, #24]	; (80072a8 <iprintf+0x20>)
 800728e:	ab04      	add	r3, sp, #16
 8007290:	6808      	ldr	r0, [r1, #0]
 8007292:	f853 2b04 	ldr.w	r2, [r3], #4
 8007296:	6881      	ldr	r1, [r0, #8]
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	f002 fe29 	bl	8009ef0 <_vfiprintf_r>
 800729e:	b003      	add	sp, #12
 80072a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a4:	b004      	add	sp, #16
 80072a6:	4770      	bx	lr
 80072a8:	2000006c 	.word	0x2000006c

080072ac <putchar>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <putchar+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	6882      	ldr	r2, [r0, #8]
 80072b4:	f003 b846 	b.w	800a344 <_putc_r>
 80072b8:	2000006c 	.word	0x2000006c

080072bc <_puts_r>:
 80072bc:	6a03      	ldr	r3, [r0, #32]
 80072be:	b570      	push	{r4, r5, r6, lr}
 80072c0:	6884      	ldr	r4, [r0, #8]
 80072c2:	4605      	mov	r5, r0
 80072c4:	460e      	mov	r6, r1
 80072c6:	b90b      	cbnz	r3, 80072cc <_puts_r+0x10>
 80072c8:	f7ff ffa8 	bl	800721c <__sinit>
 80072cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ce:	07db      	lsls	r3, r3, #31
 80072d0:	d405      	bmi.n	80072de <_puts_r+0x22>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	0598      	lsls	r0, r3, #22
 80072d6:	d402      	bmi.n	80072de <_puts_r+0x22>
 80072d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072da:	f000 f9c0 	bl	800765e <__retarget_lock_acquire_recursive>
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	0719      	lsls	r1, r3, #28
 80072e2:	d513      	bpl.n	800730c <_puts_r+0x50>
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	b18b      	cbz	r3, 800730c <_puts_r+0x50>
 80072e8:	3e01      	subs	r6, #1
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60a3      	str	r3, [r4, #8]
 80072f4:	b9e9      	cbnz	r1, 8007332 <_puts_r+0x76>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da2e      	bge.n	8007358 <_puts_r+0x9c>
 80072fa:	4622      	mov	r2, r4
 80072fc:	210a      	movs	r1, #10
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 f89b 	bl	800743a <__swbuf_r>
 8007304:	3001      	adds	r0, #1
 8007306:	d007      	beq.n	8007318 <_puts_r+0x5c>
 8007308:	250a      	movs	r5, #10
 800730a:	e007      	b.n	800731c <_puts_r+0x60>
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	f000 f8d0 	bl	80074b4 <__swsetup_r>
 8007314:	2800      	cmp	r0, #0
 8007316:	d0e7      	beq.n	80072e8 <_puts_r+0x2c>
 8007318:	f04f 35ff 	mov.w	r5, #4294967295
 800731c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800731e:	07da      	lsls	r2, r3, #31
 8007320:	d405      	bmi.n	800732e <_puts_r+0x72>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	d402      	bmi.n	800732e <_puts_r+0x72>
 8007328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800732a:	f000 f999 	bl	8007660 <__retarget_lock_release_recursive>
 800732e:	4628      	mov	r0, r5
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	2b00      	cmp	r3, #0
 8007334:	da04      	bge.n	8007340 <_puts_r+0x84>
 8007336:	69a2      	ldr	r2, [r4, #24]
 8007338:	429a      	cmp	r2, r3
 800733a:	dc06      	bgt.n	800734a <_puts_r+0x8e>
 800733c:	290a      	cmp	r1, #10
 800733e:	d004      	beq.n	800734a <_puts_r+0x8e>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	6022      	str	r2, [r4, #0]
 8007346:	7019      	strb	r1, [r3, #0]
 8007348:	e7cf      	b.n	80072ea <_puts_r+0x2e>
 800734a:	4622      	mov	r2, r4
 800734c:	4628      	mov	r0, r5
 800734e:	f000 f874 	bl	800743a <__swbuf_r>
 8007352:	3001      	adds	r0, #1
 8007354:	d1c9      	bne.n	80072ea <_puts_r+0x2e>
 8007356:	e7df      	b.n	8007318 <_puts_r+0x5c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	250a      	movs	r5, #10
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	701d      	strb	r5, [r3, #0]
 8007362:	e7db      	b.n	800731c <_puts_r+0x60>

08007364 <puts>:
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <puts+0xc>)
 8007366:	4601      	mov	r1, r0
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f7ff bfa7 	b.w	80072bc <_puts_r>
 800736e:	bf00      	nop
 8007370:	2000006c 	.word	0x2000006c

08007374 <siprintf>:
 8007374:	b40e      	push	{r1, r2, r3}
 8007376:	b500      	push	{lr}
 8007378:	b09c      	sub	sp, #112	; 0x70
 800737a:	ab1d      	add	r3, sp, #116	; 0x74
 800737c:	9002      	str	r0, [sp, #8]
 800737e:	9006      	str	r0, [sp, #24]
 8007380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007384:	4809      	ldr	r0, [pc, #36]	; (80073ac <siprintf+0x38>)
 8007386:	9107      	str	r1, [sp, #28]
 8007388:	9104      	str	r1, [sp, #16]
 800738a:	4909      	ldr	r1, [pc, #36]	; (80073b0 <siprintf+0x3c>)
 800738c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007390:	9105      	str	r1, [sp, #20]
 8007392:	6800      	ldr	r0, [r0, #0]
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	a902      	add	r1, sp, #8
 8007398:	f002 fc82 	bl	8009ca0 <_svfiprintf_r>
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	b01c      	add	sp, #112	; 0x70
 80073a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a8:	b003      	add	sp, #12
 80073aa:	4770      	bx	lr
 80073ac:	2000006c 	.word	0x2000006c
 80073b0:	ffff0208 	.word	0xffff0208

080073b4 <__sread>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	460c      	mov	r4, r1
 80073b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073bc:	f000 f900 	bl	80075c0 <_read_r>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	bfab      	itete	ge
 80073c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c6:	89a3      	ldrhlt	r3, [r4, #12]
 80073c8:	181b      	addge	r3, r3, r0
 80073ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ce:	bfac      	ite	ge
 80073d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073d2:	81a3      	strhlt	r3, [r4, #12]
 80073d4:	bd10      	pop	{r4, pc}

080073d6 <__swrite>:
 80073d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073da:	461f      	mov	r7, r3
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	05db      	lsls	r3, r3, #23
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4616      	mov	r6, r2
 80073e6:	d505      	bpl.n	80073f4 <__swrite+0x1e>
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	2302      	movs	r3, #2
 80073ee:	2200      	movs	r2, #0
 80073f0:	f000 f8d4 	bl	800759c <_lseek_r>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	4628      	mov	r0, r5
 8007406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	f000 b8eb 	b.w	80075e4 <_write_r>

0800740e <__sseek>:
 800740e:	b510      	push	{r4, lr}
 8007410:	460c      	mov	r4, r1
 8007412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007416:	f000 f8c1 	bl	800759c <_lseek_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	bf15      	itete	ne
 8007420:	6560      	strne	r0, [r4, #84]	; 0x54
 8007422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800742a:	81a3      	strheq	r3, [r4, #12]
 800742c:	bf18      	it	ne
 800742e:	81a3      	strhne	r3, [r4, #12]
 8007430:	bd10      	pop	{r4, pc}

08007432 <__sclose>:
 8007432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007436:	f000 b8a1 	b.w	800757c <_close_r>

0800743a <__swbuf_r>:
 800743a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743c:	460e      	mov	r6, r1
 800743e:	4614      	mov	r4, r2
 8007440:	4605      	mov	r5, r0
 8007442:	b118      	cbz	r0, 800744c <__swbuf_r+0x12>
 8007444:	6a03      	ldr	r3, [r0, #32]
 8007446:	b90b      	cbnz	r3, 800744c <__swbuf_r+0x12>
 8007448:	f7ff fee8 	bl	800721c <__sinit>
 800744c:	69a3      	ldr	r3, [r4, #24]
 800744e:	60a3      	str	r3, [r4, #8]
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	071a      	lsls	r2, r3, #28
 8007454:	d525      	bpl.n	80074a2 <__swbuf_r+0x68>
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	b31b      	cbz	r3, 80074a2 <__swbuf_r+0x68>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	6922      	ldr	r2, [r4, #16]
 800745e:	1a98      	subs	r0, r3, r2
 8007460:	6963      	ldr	r3, [r4, #20]
 8007462:	b2f6      	uxtb	r6, r6
 8007464:	4283      	cmp	r3, r0
 8007466:	4637      	mov	r7, r6
 8007468:	dc04      	bgt.n	8007474 <__swbuf_r+0x3a>
 800746a:	4621      	mov	r1, r4
 800746c:	4628      	mov	r0, r5
 800746e:	f002 fedf 	bl	800a230 <_fflush_r>
 8007472:	b9e0      	cbnz	r0, 80074ae <__swbuf_r+0x74>
 8007474:	68a3      	ldr	r3, [r4, #8]
 8007476:	3b01      	subs	r3, #1
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	701e      	strb	r6, [r3, #0]
 8007482:	6962      	ldr	r2, [r4, #20]
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	429a      	cmp	r2, r3
 8007488:	d004      	beq.n	8007494 <__swbuf_r+0x5a>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	07db      	lsls	r3, r3, #31
 800748e:	d506      	bpl.n	800749e <__swbuf_r+0x64>
 8007490:	2e0a      	cmp	r6, #10
 8007492:	d104      	bne.n	800749e <__swbuf_r+0x64>
 8007494:	4621      	mov	r1, r4
 8007496:	4628      	mov	r0, r5
 8007498:	f002 feca 	bl	800a230 <_fflush_r>
 800749c:	b938      	cbnz	r0, 80074ae <__swbuf_r+0x74>
 800749e:	4638      	mov	r0, r7
 80074a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a2:	4621      	mov	r1, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	f000 f805 	bl	80074b4 <__swsetup_r>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d0d5      	beq.n	800745a <__swbuf_r+0x20>
 80074ae:	f04f 37ff 	mov.w	r7, #4294967295
 80074b2:	e7f4      	b.n	800749e <__swbuf_r+0x64>

080074b4 <__swsetup_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <__swsetup_r+0xac>)
 80074b8:	4605      	mov	r5, r0
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	460c      	mov	r4, r1
 80074be:	b118      	cbz	r0, 80074c8 <__swsetup_r+0x14>
 80074c0:	6a03      	ldr	r3, [r0, #32]
 80074c2:	b90b      	cbnz	r3, 80074c8 <__swsetup_r+0x14>
 80074c4:	f7ff feaa 	bl	800721c <__sinit>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074ce:	0718      	lsls	r0, r3, #28
 80074d0:	d422      	bmi.n	8007518 <__swsetup_r+0x64>
 80074d2:	06d9      	lsls	r1, r3, #27
 80074d4:	d407      	bmi.n	80074e6 <__swsetup_r+0x32>
 80074d6:	2309      	movs	r3, #9
 80074d8:	602b      	str	r3, [r5, #0]
 80074da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074de:	81a3      	strh	r3, [r4, #12]
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	e034      	b.n	8007550 <__swsetup_r+0x9c>
 80074e6:	0758      	lsls	r0, r3, #29
 80074e8:	d512      	bpl.n	8007510 <__swsetup_r+0x5c>
 80074ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ec:	b141      	cbz	r1, 8007500 <__swsetup_r+0x4c>
 80074ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f2:	4299      	cmp	r1, r3
 80074f4:	d002      	beq.n	80074fc <__swsetup_r+0x48>
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 ff34 	bl	8008364 <_free_r>
 80074fc:	2300      	movs	r3, #0
 80074fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	2300      	movs	r3, #0
 800750a:	6063      	str	r3, [r4, #4]
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f043 0308 	orr.w	r3, r3, #8
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	b94b      	cbnz	r3, 8007530 <__swsetup_r+0x7c>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007526:	d003      	beq.n	8007530 <__swsetup_r+0x7c>
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	f002 fece 	bl	800a2cc <__smakebuf_r>
 8007530:	89a0      	ldrh	r0, [r4, #12]
 8007532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007536:	f010 0301 	ands.w	r3, r0, #1
 800753a:	d00a      	beq.n	8007552 <__swsetup_r+0x9e>
 800753c:	2300      	movs	r3, #0
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	6963      	ldr	r3, [r4, #20]
 8007542:	425b      	negs	r3, r3
 8007544:	61a3      	str	r3, [r4, #24]
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	b943      	cbnz	r3, 800755c <__swsetup_r+0xa8>
 800754a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800754e:	d1c4      	bne.n	80074da <__swsetup_r+0x26>
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	0781      	lsls	r1, r0, #30
 8007554:	bf58      	it	pl
 8007556:	6963      	ldrpl	r3, [r4, #20]
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	e7f4      	b.n	8007546 <__swsetup_r+0x92>
 800755c:	2000      	movs	r0, #0
 800755e:	e7f7      	b.n	8007550 <__swsetup_r+0x9c>
 8007560:	2000006c 	.word	0x2000006c

08007564 <memset>:
 8007564:	4402      	add	r2, r0
 8007566:	4603      	mov	r3, r0
 8007568:	4293      	cmp	r3, r2
 800756a:	d100      	bne.n	800756e <memset+0xa>
 800756c:	4770      	bx	lr
 800756e:	f803 1b01 	strb.w	r1, [r3], #1
 8007572:	e7f9      	b.n	8007568 <memset+0x4>

08007574 <_localeconv_r>:
 8007574:	4800      	ldr	r0, [pc, #0]	; (8007578 <_localeconv_r+0x4>)
 8007576:	4770      	bx	lr
 8007578:	20000160 	.word	0x20000160

0800757c <_close_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_close_r+0x1c>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7fb f973 	bl	8002872 <_close>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_close_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_close_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20000910 	.word	0x20000910

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	; (80075bc <_lseek_r+0x20>)
 80075a0:	4604      	mov	r4, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fb f988 	bl	80028c0 <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000910 	.word	0x20000910

080075c0 <_read_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <_read_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fb f916 	bl	8002800 <_read>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_read_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_read_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000910 	.word	0x20000910

080075e4 <_write_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	; (8007604 <_write_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7fb f921 	bl	800283a <_write>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_write_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_write_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000910 	.word	0x20000910

08007608 <__errno>:
 8007608:	4b01      	ldr	r3, [pc, #4]	; (8007610 <__errno+0x8>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	2000006c 	.word	0x2000006c

08007614 <__libc_init_array>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4d0d      	ldr	r5, [pc, #52]	; (800764c <__libc_init_array+0x38>)
 8007618:	4c0d      	ldr	r4, [pc, #52]	; (8007650 <__libc_init_array+0x3c>)
 800761a:	1b64      	subs	r4, r4, r5
 800761c:	10a4      	asrs	r4, r4, #2
 800761e:	2600      	movs	r6, #0
 8007620:	42a6      	cmp	r6, r4
 8007622:	d109      	bne.n	8007638 <__libc_init_array+0x24>
 8007624:	4d0b      	ldr	r5, [pc, #44]	; (8007654 <__libc_init_array+0x40>)
 8007626:	4c0c      	ldr	r4, [pc, #48]	; (8007658 <__libc_init_array+0x44>)
 8007628:	f004 fd48 	bl	800c0bc <_init>
 800762c:	1b64      	subs	r4, r4, r5
 800762e:	10a4      	asrs	r4, r4, #2
 8007630:	2600      	movs	r6, #0
 8007632:	42a6      	cmp	r6, r4
 8007634:	d105      	bne.n	8007642 <__libc_init_array+0x2e>
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	f855 3b04 	ldr.w	r3, [r5], #4
 800763c:	4798      	blx	r3
 800763e:	3601      	adds	r6, #1
 8007640:	e7ee      	b.n	8007620 <__libc_init_array+0xc>
 8007642:	f855 3b04 	ldr.w	r3, [r5], #4
 8007646:	4798      	blx	r3
 8007648:	3601      	adds	r6, #1
 800764a:	e7f2      	b.n	8007632 <__libc_init_array+0x1e>
 800764c:	0800d560 	.word	0x0800d560
 8007650:	0800d560 	.word	0x0800d560
 8007654:	0800d560 	.word	0x0800d560
 8007658:	0800d564 	.word	0x0800d564

0800765c <__retarget_lock_init_recursive>:
 800765c:	4770      	bx	lr

0800765e <__retarget_lock_acquire_recursive>:
 800765e:	4770      	bx	lr

08007660 <__retarget_lock_release_recursive>:
 8007660:	4770      	bx	lr
	...

08007664 <nanf>:
 8007664:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800766c <nanf+0x8>
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	7fc00000 	.word	0x7fc00000

08007670 <quorem>:
 8007670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	6903      	ldr	r3, [r0, #16]
 8007676:	690c      	ldr	r4, [r1, #16]
 8007678:	42a3      	cmp	r3, r4
 800767a:	4607      	mov	r7, r0
 800767c:	db7e      	blt.n	800777c <quorem+0x10c>
 800767e:	3c01      	subs	r4, #1
 8007680:	f101 0814 	add.w	r8, r1, #20
 8007684:	f100 0514 	add.w	r5, r0, #20
 8007688:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007696:	3301      	adds	r3, #1
 8007698:	429a      	cmp	r2, r3
 800769a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800769e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80076a6:	d331      	bcc.n	800770c <quorem+0x9c>
 80076a8:	f04f 0e00 	mov.w	lr, #0
 80076ac:	4640      	mov	r0, r8
 80076ae:	46ac      	mov	ip, r5
 80076b0:	46f2      	mov	sl, lr
 80076b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80076b6:	b293      	uxth	r3, r2
 80076b8:	fb06 e303 	mla	r3, r6, r3, lr
 80076bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076c0:	0c1a      	lsrs	r2, r3, #16
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ebaa 0303 	sub.w	r3, sl, r3
 80076c8:	f8dc a000 	ldr.w	sl, [ip]
 80076cc:	fa13 f38a 	uxtah	r3, r3, sl
 80076d0:	fb06 220e 	mla	r2, r6, lr, r2
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	9b00      	ldr	r3, [sp, #0]
 80076d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076dc:	b292      	uxth	r2, r2
 80076de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80076ea:	4581      	cmp	r9, r0
 80076ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f0:	f84c 3b04 	str.w	r3, [ip], #4
 80076f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076f8:	d2db      	bcs.n	80076b2 <quorem+0x42>
 80076fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80076fe:	b92b      	cbnz	r3, 800770c <quorem+0x9c>
 8007700:	9b01      	ldr	r3, [sp, #4]
 8007702:	3b04      	subs	r3, #4
 8007704:	429d      	cmp	r5, r3
 8007706:	461a      	mov	r2, r3
 8007708:	d32c      	bcc.n	8007764 <quorem+0xf4>
 800770a:	613c      	str	r4, [r7, #16]
 800770c:	4638      	mov	r0, r7
 800770e:	f001 f9ef 	bl	8008af0 <__mcmp>
 8007712:	2800      	cmp	r0, #0
 8007714:	db22      	blt.n	800775c <quorem+0xec>
 8007716:	3601      	adds	r6, #1
 8007718:	4629      	mov	r1, r5
 800771a:	2000      	movs	r0, #0
 800771c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007720:	f8d1 c000 	ldr.w	ip, [r1]
 8007724:	b293      	uxth	r3, r2
 8007726:	1ac3      	subs	r3, r0, r3
 8007728:	0c12      	lsrs	r2, r2, #16
 800772a:	fa13 f38c 	uxtah	r3, r3, ip
 800772e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007732:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007736:	b29b      	uxth	r3, r3
 8007738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800773c:	45c1      	cmp	r9, r8
 800773e:	f841 3b04 	str.w	r3, [r1], #4
 8007742:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007746:	d2e9      	bcs.n	800771c <quorem+0xac>
 8007748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800774c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007750:	b922      	cbnz	r2, 800775c <quorem+0xec>
 8007752:	3b04      	subs	r3, #4
 8007754:	429d      	cmp	r5, r3
 8007756:	461a      	mov	r2, r3
 8007758:	d30a      	bcc.n	8007770 <quorem+0x100>
 800775a:	613c      	str	r4, [r7, #16]
 800775c:	4630      	mov	r0, r6
 800775e:	b003      	add	sp, #12
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	3b04      	subs	r3, #4
 8007768:	2a00      	cmp	r2, #0
 800776a:	d1ce      	bne.n	800770a <quorem+0x9a>
 800776c:	3c01      	subs	r4, #1
 800776e:	e7c9      	b.n	8007704 <quorem+0x94>
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	3b04      	subs	r3, #4
 8007774:	2a00      	cmp	r2, #0
 8007776:	d1f0      	bne.n	800775a <quorem+0xea>
 8007778:	3c01      	subs	r4, #1
 800777a:	e7eb      	b.n	8007754 <quorem+0xe4>
 800777c:	2000      	movs	r0, #0
 800777e:	e7ee      	b.n	800775e <quorem+0xee>

08007780 <_dtoa_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	ed2d 8b04 	vpush	{d8-d9}
 8007788:	69c5      	ldr	r5, [r0, #28]
 800778a:	b093      	sub	sp, #76	; 0x4c
 800778c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007790:	ec57 6b10 	vmov	r6, r7, d0
 8007794:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007798:	9107      	str	r1, [sp, #28]
 800779a:	4604      	mov	r4, r0
 800779c:	920a      	str	r2, [sp, #40]	; 0x28
 800779e:	930d      	str	r3, [sp, #52]	; 0x34
 80077a0:	b975      	cbnz	r5, 80077c0 <_dtoa_r+0x40>
 80077a2:	2010      	movs	r0, #16
 80077a4:	f000 fe2a 	bl	80083fc <malloc>
 80077a8:	4602      	mov	r2, r0
 80077aa:	61e0      	str	r0, [r4, #28]
 80077ac:	b920      	cbnz	r0, 80077b8 <_dtoa_r+0x38>
 80077ae:	4bae      	ldr	r3, [pc, #696]	; (8007a68 <_dtoa_r+0x2e8>)
 80077b0:	21ef      	movs	r1, #239	; 0xef
 80077b2:	48ae      	ldr	r0, [pc, #696]	; (8007a6c <_dtoa_r+0x2ec>)
 80077b4:	f002 fe70 	bl	800a498 <__assert_func>
 80077b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077bc:	6005      	str	r5, [r0, #0]
 80077be:	60c5      	str	r5, [r0, #12]
 80077c0:	69e3      	ldr	r3, [r4, #28]
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	b151      	cbz	r1, 80077dc <_dtoa_r+0x5c>
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	604a      	str	r2, [r1, #4]
 80077ca:	2301      	movs	r3, #1
 80077cc:	4093      	lsls	r3, r2
 80077ce:	608b      	str	r3, [r1, #8]
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 ff07 	bl	80085e4 <_Bfree>
 80077d6:	69e3      	ldr	r3, [r4, #28]
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	1e3b      	subs	r3, r7, #0
 80077de:	bfbb      	ittet	lt
 80077e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	9303      	strlt	r3, [sp, #12]
 80077e6:	2300      	movge	r3, #0
 80077e8:	2201      	movlt	r2, #1
 80077ea:	bfac      	ite	ge
 80077ec:	f8c8 3000 	strge.w	r3, [r8]
 80077f0:	f8c8 2000 	strlt.w	r2, [r8]
 80077f4:	4b9e      	ldr	r3, [pc, #632]	; (8007a70 <_dtoa_r+0x2f0>)
 80077f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077fa:	ea33 0308 	bics.w	r3, r3, r8
 80077fe:	d11b      	bne.n	8007838 <_dtoa_r+0xb8>
 8007800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007802:	f242 730f 	movw	r3, #9999	; 0x270f
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800780c:	4333      	orrs	r3, r6
 800780e:	f000 8593 	beq.w	8008338 <_dtoa_r+0xbb8>
 8007812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007814:	b963      	cbnz	r3, 8007830 <_dtoa_r+0xb0>
 8007816:	4b97      	ldr	r3, [pc, #604]	; (8007a74 <_dtoa_r+0x2f4>)
 8007818:	e027      	b.n	800786a <_dtoa_r+0xea>
 800781a:	4b97      	ldr	r3, [pc, #604]	; (8007a78 <_dtoa_r+0x2f8>)
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	9800      	ldr	r0, [sp, #0]
 8007826:	b013      	add	sp, #76	; 0x4c
 8007828:	ecbd 8b04 	vpop	{d8-d9}
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	4b90      	ldr	r3, [pc, #576]	; (8007a74 <_dtoa_r+0x2f4>)
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	3303      	adds	r3, #3
 8007836:	e7f3      	b.n	8007820 <_dtoa_r+0xa0>
 8007838:	ed9d 7b02 	vldr	d7, [sp, #8]
 800783c:	2200      	movs	r2, #0
 800783e:	ec51 0b17 	vmov	r0, r1, d7
 8007842:	eeb0 8a47 	vmov.f32	s16, s14
 8007846:	eef0 8a67 	vmov.f32	s17, s15
 800784a:	2300      	movs	r3, #0
 800784c:	f7f9 f964 	bl	8000b18 <__aeabi_dcmpeq>
 8007850:	4681      	mov	r9, r0
 8007852:	b160      	cbz	r0, 800786e <_dtoa_r+0xee>
 8007854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007856:	2301      	movs	r3, #1
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8568 	beq.w	8008332 <_dtoa_r+0xbb2>
 8007862:	4b86      	ldr	r3, [pc, #536]	; (8007a7c <_dtoa_r+0x2fc>)
 8007864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	3b01      	subs	r3, #1
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	e7da      	b.n	8007824 <_dtoa_r+0xa4>
 800786e:	aa10      	add	r2, sp, #64	; 0x40
 8007870:	a911      	add	r1, sp, #68	; 0x44
 8007872:	4620      	mov	r0, r4
 8007874:	eeb0 0a48 	vmov.f32	s0, s16
 8007878:	eef0 0a68 	vmov.f32	s1, s17
 800787c:	f001 fa4e 	bl	8008d1c <__d2b>
 8007880:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007884:	4682      	mov	sl, r0
 8007886:	2d00      	cmp	r5, #0
 8007888:	d07f      	beq.n	800798a <_dtoa_r+0x20a>
 800788a:	ee18 3a90 	vmov	r3, s17
 800788e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007892:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007896:	ec51 0b18 	vmov	r0, r1, d8
 800789a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800789e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80078a6:	4619      	mov	r1, r3
 80078a8:	2200      	movs	r2, #0
 80078aa:	4b75      	ldr	r3, [pc, #468]	; (8007a80 <_dtoa_r+0x300>)
 80078ac:	f7f8 fd14 	bl	80002d8 <__aeabi_dsub>
 80078b0:	a367      	add	r3, pc, #412	; (adr r3, 8007a50 <_dtoa_r+0x2d0>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f8 fec7 	bl	8000648 <__aeabi_dmul>
 80078ba:	a367      	add	r3, pc, #412	; (adr r3, 8007a58 <_dtoa_r+0x2d8>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f7f8 fd0c 	bl	80002dc <__adddf3>
 80078c4:	4606      	mov	r6, r0
 80078c6:	4628      	mov	r0, r5
 80078c8:	460f      	mov	r7, r1
 80078ca:	f7f8 fe53 	bl	8000574 <__aeabi_i2d>
 80078ce:	a364      	add	r3, pc, #400	; (adr r3, 8007a60 <_dtoa_r+0x2e0>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 feb8 	bl	8000648 <__aeabi_dmul>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f8 fcfc 	bl	80002dc <__adddf3>
 80078e4:	4606      	mov	r6, r0
 80078e6:	460f      	mov	r7, r1
 80078e8:	f7f9 f95e 	bl	8000ba8 <__aeabi_d2iz>
 80078ec:	2200      	movs	r2, #0
 80078ee:	4683      	mov	fp, r0
 80078f0:	2300      	movs	r3, #0
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f9 f919 	bl	8000b2c <__aeabi_dcmplt>
 80078fa:	b148      	cbz	r0, 8007910 <_dtoa_r+0x190>
 80078fc:	4658      	mov	r0, fp
 80078fe:	f7f8 fe39 	bl	8000574 <__aeabi_i2d>
 8007902:	4632      	mov	r2, r6
 8007904:	463b      	mov	r3, r7
 8007906:	f7f9 f907 	bl	8000b18 <__aeabi_dcmpeq>
 800790a:	b908      	cbnz	r0, 8007910 <_dtoa_r+0x190>
 800790c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007910:	f1bb 0f16 	cmp.w	fp, #22
 8007914:	d857      	bhi.n	80079c6 <_dtoa_r+0x246>
 8007916:	4b5b      	ldr	r3, [pc, #364]	; (8007a84 <_dtoa_r+0x304>)
 8007918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	ec51 0b18 	vmov	r0, r1, d8
 8007924:	f7f9 f902 	bl	8000b2c <__aeabi_dcmplt>
 8007928:	2800      	cmp	r0, #0
 800792a:	d04e      	beq.n	80079ca <_dtoa_r+0x24a>
 800792c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007930:	2300      	movs	r3, #0
 8007932:	930c      	str	r3, [sp, #48]	; 0x30
 8007934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007936:	1b5b      	subs	r3, r3, r5
 8007938:	1e5a      	subs	r2, r3, #1
 800793a:	bf45      	ittet	mi
 800793c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007940:	9305      	strmi	r3, [sp, #20]
 8007942:	2300      	movpl	r3, #0
 8007944:	2300      	movmi	r3, #0
 8007946:	9206      	str	r2, [sp, #24]
 8007948:	bf54      	ite	pl
 800794a:	9305      	strpl	r3, [sp, #20]
 800794c:	9306      	strmi	r3, [sp, #24]
 800794e:	f1bb 0f00 	cmp.w	fp, #0
 8007952:	db3c      	blt.n	80079ce <_dtoa_r+0x24e>
 8007954:	9b06      	ldr	r3, [sp, #24]
 8007956:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800795a:	445b      	add	r3, fp
 800795c:	9306      	str	r3, [sp, #24]
 800795e:	2300      	movs	r3, #0
 8007960:	9308      	str	r3, [sp, #32]
 8007962:	9b07      	ldr	r3, [sp, #28]
 8007964:	2b09      	cmp	r3, #9
 8007966:	d868      	bhi.n	8007a3a <_dtoa_r+0x2ba>
 8007968:	2b05      	cmp	r3, #5
 800796a:	bfc4      	itt	gt
 800796c:	3b04      	subgt	r3, #4
 800796e:	9307      	strgt	r3, [sp, #28]
 8007970:	9b07      	ldr	r3, [sp, #28]
 8007972:	f1a3 0302 	sub.w	r3, r3, #2
 8007976:	bfcc      	ite	gt
 8007978:	2500      	movgt	r5, #0
 800797a:	2501      	movle	r5, #1
 800797c:	2b03      	cmp	r3, #3
 800797e:	f200 8085 	bhi.w	8007a8c <_dtoa_r+0x30c>
 8007982:	e8df f003 	tbb	[pc, r3]
 8007986:	3b2e      	.short	0x3b2e
 8007988:	5839      	.short	0x5839
 800798a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800798e:	441d      	add	r5, r3
 8007990:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007994:	2b20      	cmp	r3, #32
 8007996:	bfc1      	itttt	gt
 8007998:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800799c:	fa08 f803 	lslgt.w	r8, r8, r3
 80079a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80079a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80079a8:	bfd6      	itet	le
 80079aa:	f1c3 0320 	rsble	r3, r3, #32
 80079ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80079b2:	fa06 f003 	lslle.w	r0, r6, r3
 80079b6:	f7f8 fdcd 	bl	8000554 <__aeabi_ui2d>
 80079ba:	2201      	movs	r2, #1
 80079bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079c0:	3d01      	subs	r5, #1
 80079c2:	920e      	str	r2, [sp, #56]	; 0x38
 80079c4:	e76f      	b.n	80078a6 <_dtoa_r+0x126>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e7b3      	b.n	8007932 <_dtoa_r+0x1b2>
 80079ca:	900c      	str	r0, [sp, #48]	; 0x30
 80079cc:	e7b2      	b.n	8007934 <_dtoa_r+0x1b4>
 80079ce:	9b05      	ldr	r3, [sp, #20]
 80079d0:	eba3 030b 	sub.w	r3, r3, fp
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	f1cb 0300 	rsb	r3, fp, #0
 80079da:	9308      	str	r3, [sp, #32]
 80079dc:	2300      	movs	r3, #0
 80079de:	930b      	str	r3, [sp, #44]	; 0x2c
 80079e0:	e7bf      	b.n	8007962 <_dtoa_r+0x1e2>
 80079e2:	2300      	movs	r3, #0
 80079e4:	9309      	str	r3, [sp, #36]	; 0x24
 80079e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc52      	bgt.n	8007a92 <_dtoa_r+0x312>
 80079ec:	2301      	movs	r3, #1
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	461a      	mov	r2, r3
 80079f4:	920a      	str	r2, [sp, #40]	; 0x28
 80079f6:	e00b      	b.n	8007a10 <_dtoa_r+0x290>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7f3      	b.n	80079e4 <_dtoa_r+0x264>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a02:	445b      	add	r3, fp
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	3301      	adds	r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	bfb8      	it	lt
 8007a0e:	2301      	movlt	r3, #1
 8007a10:	69e0      	ldr	r0, [r4, #28]
 8007a12:	2100      	movs	r1, #0
 8007a14:	2204      	movs	r2, #4
 8007a16:	f102 0614 	add.w	r6, r2, #20
 8007a1a:	429e      	cmp	r6, r3
 8007a1c:	d93d      	bls.n	8007a9a <_dtoa_r+0x31a>
 8007a1e:	6041      	str	r1, [r0, #4]
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fd9f 	bl	8008564 <_Balloc>
 8007a26:	9000      	str	r0, [sp, #0]
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d139      	bne.n	8007aa0 <_dtoa_r+0x320>
 8007a2c:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <_dtoa_r+0x308>)
 8007a2e:	4602      	mov	r2, r0
 8007a30:	f240 11af 	movw	r1, #431	; 0x1af
 8007a34:	e6bd      	b.n	80077b2 <_dtoa_r+0x32>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e7e1      	b.n	80079fe <_dtoa_r+0x27e>
 8007a3a:	2501      	movs	r5, #1
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	9509      	str	r5, [sp, #36]	; 0x24
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2312      	movs	r3, #18
 8007a4e:	e7d1      	b.n	80079f4 <_dtoa_r+0x274>
 8007a50:	636f4361 	.word	0x636f4361
 8007a54:	3fd287a7 	.word	0x3fd287a7
 8007a58:	8b60c8b3 	.word	0x8b60c8b3
 8007a5c:	3fc68a28 	.word	0x3fc68a28
 8007a60:	509f79fb 	.word	0x509f79fb
 8007a64:	3fd34413 	.word	0x3fd34413
 8007a68:	0800d0d6 	.word	0x0800d0d6
 8007a6c:	0800d0ed 	.word	0x0800d0ed
 8007a70:	7ff00000 	.word	0x7ff00000
 8007a74:	0800d0d2 	.word	0x0800d0d2
 8007a78:	0800d0c9 	.word	0x0800d0c9
 8007a7c:	0800d0a1 	.word	0x0800d0a1
 8007a80:	3ff80000 	.word	0x3ff80000
 8007a84:	0800d1d8 	.word	0x0800d1d8
 8007a88:	0800d145 	.word	0x0800d145
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a90:	e7d7      	b.n	8007a42 <_dtoa_r+0x2c2>
 8007a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	9304      	str	r3, [sp, #16]
 8007a98:	e7ba      	b.n	8007a10 <_dtoa_r+0x290>
 8007a9a:	3101      	adds	r1, #1
 8007a9c:	0052      	lsls	r2, r2, #1
 8007a9e:	e7ba      	b.n	8007a16 <_dtoa_r+0x296>
 8007aa0:	69e3      	ldr	r3, [r4, #28]
 8007aa2:	9a00      	ldr	r2, [sp, #0]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	2b0e      	cmp	r3, #14
 8007aaa:	f200 80a8 	bhi.w	8007bfe <_dtoa_r+0x47e>
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	f000 80a5 	beq.w	8007bfe <_dtoa_r+0x47e>
 8007ab4:	f1bb 0f00 	cmp.w	fp, #0
 8007ab8:	dd38      	ble.n	8007b2c <_dtoa_r+0x3ac>
 8007aba:	4bc0      	ldr	r3, [pc, #768]	; (8007dbc <_dtoa_r+0x63c>)
 8007abc:	f00b 020f 	and.w	r2, fp, #15
 8007ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ac8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007acc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ad0:	d019      	beq.n	8007b06 <_dtoa_r+0x386>
 8007ad2:	4bbb      	ldr	r3, [pc, #748]	; (8007dc0 <_dtoa_r+0x640>)
 8007ad4:	ec51 0b18 	vmov	r0, r1, d8
 8007ad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007adc:	f7f8 fede 	bl	800089c <__aeabi_ddiv>
 8007ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae4:	f008 080f 	and.w	r8, r8, #15
 8007ae8:	2503      	movs	r5, #3
 8007aea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007dc0 <_dtoa_r+0x640>
 8007aee:	f1b8 0f00 	cmp.w	r8, #0
 8007af2:	d10a      	bne.n	8007b0a <_dtoa_r+0x38a>
 8007af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af8:	4632      	mov	r2, r6
 8007afa:	463b      	mov	r3, r7
 8007afc:	f7f8 fece 	bl	800089c <__aeabi_ddiv>
 8007b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b04:	e02b      	b.n	8007b5e <_dtoa_r+0x3de>
 8007b06:	2502      	movs	r5, #2
 8007b08:	e7ef      	b.n	8007aea <_dtoa_r+0x36a>
 8007b0a:	f018 0f01 	tst.w	r8, #1
 8007b0e:	d008      	beq.n	8007b22 <_dtoa_r+0x3a2>
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b18:	f7f8 fd96 	bl	8000648 <__aeabi_dmul>
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460f      	mov	r7, r1
 8007b22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b26:	f109 0908 	add.w	r9, r9, #8
 8007b2a:	e7e0      	b.n	8007aee <_dtoa_r+0x36e>
 8007b2c:	f000 809f 	beq.w	8007c6e <_dtoa_r+0x4ee>
 8007b30:	f1cb 0600 	rsb	r6, fp, #0
 8007b34:	4ba1      	ldr	r3, [pc, #644]	; (8007dbc <_dtoa_r+0x63c>)
 8007b36:	4fa2      	ldr	r7, [pc, #648]	; (8007dc0 <_dtoa_r+0x640>)
 8007b38:	f006 020f 	and.w	r2, r6, #15
 8007b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	ec51 0b18 	vmov	r0, r1, d8
 8007b48:	f7f8 fd7e 	bl	8000648 <__aeabi_dmul>
 8007b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b50:	1136      	asrs	r6, r6, #4
 8007b52:	2300      	movs	r3, #0
 8007b54:	2502      	movs	r5, #2
 8007b56:	2e00      	cmp	r6, #0
 8007b58:	d17e      	bne.n	8007c58 <_dtoa_r+0x4d8>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1d0      	bne.n	8007b00 <_dtoa_r+0x380>
 8007b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8084 	beq.w	8007c72 <_dtoa_r+0x4f2>
 8007b6a:	4b96      	ldr	r3, [pc, #600]	; (8007dc4 <_dtoa_r+0x644>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4640      	mov	r0, r8
 8007b70:	4649      	mov	r1, r9
 8007b72:	f7f8 ffdb 	bl	8000b2c <__aeabi_dcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d07b      	beq.n	8007c72 <_dtoa_r+0x4f2>
 8007b7a:	9b04      	ldr	r3, [sp, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d078      	beq.n	8007c72 <_dtoa_r+0x4f2>
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	dd39      	ble.n	8007bfa <_dtoa_r+0x47a>
 8007b86:	4b90      	ldr	r3, [pc, #576]	; (8007dc8 <_dtoa_r+0x648>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	f7f8 fd5b 	bl	8000648 <__aeabi_dmul>
 8007b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b96:	9e01      	ldr	r6, [sp, #4]
 8007b98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7f8 fce6 	bl	8000574 <__aeabi_i2d>
 8007ba8:	4642      	mov	r2, r8
 8007baa:	464b      	mov	r3, r9
 8007bac:	f7f8 fd4c 	bl	8000648 <__aeabi_dmul>
 8007bb0:	4b86      	ldr	r3, [pc, #536]	; (8007dcc <_dtoa_r+0x64c>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f7f8 fb92 	bl	80002dc <__adddf3>
 8007bb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc0:	9303      	str	r3, [sp, #12]
 8007bc2:	2e00      	cmp	r6, #0
 8007bc4:	d158      	bne.n	8007c78 <_dtoa_r+0x4f8>
 8007bc6:	4b82      	ldr	r3, [pc, #520]	; (8007dd0 <_dtoa_r+0x650>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb83 	bl	80002d8 <__aeabi_dsub>
 8007bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	4689      	mov	r9, r1
 8007bda:	f7f8 ffc5 	bl	8000b68 <__aeabi_dcmpgt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f040 8296 	bne.w	8008110 <_dtoa_r+0x990>
 8007be4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007be8:	4640      	mov	r0, r8
 8007bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 ff9c 	bl	8000b2c <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f040 8289 	bne.w	800810c <_dtoa_r+0x98c>
 8007bfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f2c0 814e 	blt.w	8007ea2 <_dtoa_r+0x722>
 8007c06:	f1bb 0f0e 	cmp.w	fp, #14
 8007c0a:	f300 814a 	bgt.w	8007ea2 <_dtoa_r+0x722>
 8007c0e:	4b6b      	ldr	r3, [pc, #428]	; (8007dbc <_dtoa_r+0x63c>)
 8007c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f280 80dc 	bge.w	8007dd8 <_dtoa_r+0x658>
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f300 80d8 	bgt.w	8007dd8 <_dtoa_r+0x658>
 8007c28:	f040 826f 	bne.w	800810a <_dtoa_r+0x98a>
 8007c2c:	4b68      	ldr	r3, [pc, #416]	; (8007dd0 <_dtoa_r+0x650>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4640      	mov	r0, r8
 8007c32:	4649      	mov	r1, r9
 8007c34:	f7f8 fd08 	bl	8000648 <__aeabi_dmul>
 8007c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c3c:	f7f8 ff8a 	bl	8000b54 <__aeabi_dcmpge>
 8007c40:	9e04      	ldr	r6, [sp, #16]
 8007c42:	4637      	mov	r7, r6
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f040 8245 	bne.w	80080d4 <_dtoa_r+0x954>
 8007c4a:	9d00      	ldr	r5, [sp, #0]
 8007c4c:	2331      	movs	r3, #49	; 0x31
 8007c4e:	f805 3b01 	strb.w	r3, [r5], #1
 8007c52:	f10b 0b01 	add.w	fp, fp, #1
 8007c56:	e241      	b.n	80080dc <_dtoa_r+0x95c>
 8007c58:	07f2      	lsls	r2, r6, #31
 8007c5a:	d505      	bpl.n	8007c68 <_dtoa_r+0x4e8>
 8007c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c60:	f7f8 fcf2 	bl	8000648 <__aeabi_dmul>
 8007c64:	3501      	adds	r5, #1
 8007c66:	2301      	movs	r3, #1
 8007c68:	1076      	asrs	r6, r6, #1
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	e773      	b.n	8007b56 <_dtoa_r+0x3d6>
 8007c6e:	2502      	movs	r5, #2
 8007c70:	e775      	b.n	8007b5e <_dtoa_r+0x3de>
 8007c72:	9e04      	ldr	r6, [sp, #16]
 8007c74:	465f      	mov	r7, fp
 8007c76:	e792      	b.n	8007b9e <_dtoa_r+0x41e>
 8007c78:	9900      	ldr	r1, [sp, #0]
 8007c7a:	4b50      	ldr	r3, [pc, #320]	; (8007dbc <_dtoa_r+0x63c>)
 8007c7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c80:	4431      	add	r1, r6
 8007c82:	9102      	str	r1, [sp, #8]
 8007c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c86:	eeb0 9a47 	vmov.f32	s18, s14
 8007c8a:	eef0 9a67 	vmov.f32	s19, s15
 8007c8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c96:	2900      	cmp	r1, #0
 8007c98:	d044      	beq.n	8007d24 <_dtoa_r+0x5a4>
 8007c9a:	494e      	ldr	r1, [pc, #312]	; (8007dd4 <_dtoa_r+0x654>)
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f7f8 fdfd 	bl	800089c <__aeabi_ddiv>
 8007ca2:	ec53 2b19 	vmov	r2, r3, d9
 8007ca6:	f7f8 fb17 	bl	80002d8 <__aeabi_dsub>
 8007caa:	9d00      	ldr	r5, [sp, #0]
 8007cac:	ec41 0b19 	vmov	d9, r0, r1
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f7f8 ff78 	bl	8000ba8 <__aeabi_d2iz>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	f7f8 fc5b 	bl	8000574 <__aeabi_i2d>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f8 fb07 	bl	80002d8 <__aeabi_dsub>
 8007cca:	3630      	adds	r6, #48	; 0x30
 8007ccc:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd0:	ec53 2b19 	vmov	r2, r3, d9
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	f7f8 ff28 	bl	8000b2c <__aeabi_dcmplt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d164      	bne.n	8007daa <_dtoa_r+0x62a>
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	4937      	ldr	r1, [pc, #220]	; (8007dc4 <_dtoa_r+0x644>)
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f7f8 faf6 	bl	80002d8 <__aeabi_dsub>
 8007cec:	ec53 2b19 	vmov	r2, r3, d9
 8007cf0:	f7f8 ff1c 	bl	8000b2c <__aeabi_dcmplt>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	f040 80b6 	bne.w	8007e66 <_dtoa_r+0x6e6>
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	429d      	cmp	r5, r3
 8007cfe:	f43f af7c 	beq.w	8007bfa <_dtoa_r+0x47a>
 8007d02:	4b31      	ldr	r3, [pc, #196]	; (8007dc8 <_dtoa_r+0x648>)
 8007d04:	ec51 0b19 	vmov	r0, r1, d9
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f7f8 fc9d 	bl	8000648 <__aeabi_dmul>
 8007d0e:	4b2e      	ldr	r3, [pc, #184]	; (8007dc8 <_dtoa_r+0x648>)
 8007d10:	ec41 0b19 	vmov	d9, r0, r1
 8007d14:	2200      	movs	r2, #0
 8007d16:	4640      	mov	r0, r8
 8007d18:	4649      	mov	r1, r9
 8007d1a:	f7f8 fc95 	bl	8000648 <__aeabi_dmul>
 8007d1e:	4680      	mov	r8, r0
 8007d20:	4689      	mov	r9, r1
 8007d22:	e7c5      	b.n	8007cb0 <_dtoa_r+0x530>
 8007d24:	ec51 0b17 	vmov	r0, r1, d7
 8007d28:	f7f8 fc8e 	bl	8000648 <__aeabi_dmul>
 8007d2c:	9b02      	ldr	r3, [sp, #8]
 8007d2e:	9d00      	ldr	r5, [sp, #0]
 8007d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d32:	ec41 0b19 	vmov	d9, r0, r1
 8007d36:	4649      	mov	r1, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	f7f8 ff35 	bl	8000ba8 <__aeabi_d2iz>
 8007d3e:	4606      	mov	r6, r0
 8007d40:	f7f8 fc18 	bl	8000574 <__aeabi_i2d>
 8007d44:	3630      	adds	r6, #48	; 0x30
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 fac3 	bl	80002d8 <__aeabi_dsub>
 8007d52:	f805 6b01 	strb.w	r6, [r5], #1
 8007d56:	9b02      	ldr	r3, [sp, #8]
 8007d58:	429d      	cmp	r5, r3
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	d124      	bne.n	8007dae <_dtoa_r+0x62e>
 8007d64:	4b1b      	ldr	r3, [pc, #108]	; (8007dd4 <_dtoa_r+0x654>)
 8007d66:	ec51 0b19 	vmov	r0, r1, d9
 8007d6a:	f7f8 fab7 	bl	80002dc <__adddf3>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f7f8 fef7 	bl	8000b68 <__aeabi_dcmpgt>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d173      	bne.n	8007e66 <_dtoa_r+0x6e6>
 8007d7e:	ec53 2b19 	vmov	r2, r3, d9
 8007d82:	4914      	ldr	r1, [pc, #80]	; (8007dd4 <_dtoa_r+0x654>)
 8007d84:	2000      	movs	r0, #0
 8007d86:	f7f8 faa7 	bl	80002d8 <__aeabi_dsub>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f7f8 fecb 	bl	8000b2c <__aeabi_dcmplt>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f43f af2f 	beq.w	8007bfa <_dtoa_r+0x47a>
 8007d9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d9e:	1e6b      	subs	r3, r5, #1
 8007da0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007da6:	2b30      	cmp	r3, #48	; 0x30
 8007da8:	d0f8      	beq.n	8007d9c <_dtoa_r+0x61c>
 8007daa:	46bb      	mov	fp, r7
 8007dac:	e04a      	b.n	8007e44 <_dtoa_r+0x6c4>
 8007dae:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <_dtoa_r+0x648>)
 8007db0:	f7f8 fc4a 	bl	8000648 <__aeabi_dmul>
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	e7bd      	b.n	8007d36 <_dtoa_r+0x5b6>
 8007dba:	bf00      	nop
 8007dbc:	0800d1d8 	.word	0x0800d1d8
 8007dc0:	0800d1b0 	.word	0x0800d1b0
 8007dc4:	3ff00000 	.word	0x3ff00000
 8007dc8:	40240000 	.word	0x40240000
 8007dcc:	401c0000 	.word	0x401c0000
 8007dd0:	40140000 	.word	0x40140000
 8007dd4:	3fe00000 	.word	0x3fe00000
 8007dd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ddc:	9d00      	ldr	r5, [sp, #0]
 8007dde:	4642      	mov	r2, r8
 8007de0:	464b      	mov	r3, r9
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	f7f8 fd59 	bl	800089c <__aeabi_ddiv>
 8007dea:	f7f8 fedd 	bl	8000ba8 <__aeabi_d2iz>
 8007dee:	9001      	str	r0, [sp, #4]
 8007df0:	f7f8 fbc0 	bl	8000574 <__aeabi_i2d>
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	f7f8 fc26 	bl	8000648 <__aeabi_dmul>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4630      	mov	r0, r6
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 fa68 	bl	80002d8 <__aeabi_dsub>
 8007e08:	9e01      	ldr	r6, [sp, #4]
 8007e0a:	9f04      	ldr	r7, [sp, #16]
 8007e0c:	3630      	adds	r6, #48	; 0x30
 8007e0e:	f805 6b01 	strb.w	r6, [r5], #1
 8007e12:	9e00      	ldr	r6, [sp, #0]
 8007e14:	1bae      	subs	r6, r5, r6
 8007e16:	42b7      	cmp	r7, r6
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	d134      	bne.n	8007e88 <_dtoa_r+0x708>
 8007e1e:	f7f8 fa5d 	bl	80002dc <__adddf3>
 8007e22:	4642      	mov	r2, r8
 8007e24:	464b      	mov	r3, r9
 8007e26:	4606      	mov	r6, r0
 8007e28:	460f      	mov	r7, r1
 8007e2a:	f7f8 fe9d 	bl	8000b68 <__aeabi_dcmpgt>
 8007e2e:	b9c8      	cbnz	r0, 8007e64 <_dtoa_r+0x6e4>
 8007e30:	4642      	mov	r2, r8
 8007e32:	464b      	mov	r3, r9
 8007e34:	4630      	mov	r0, r6
 8007e36:	4639      	mov	r1, r7
 8007e38:	f7f8 fe6e 	bl	8000b18 <__aeabi_dcmpeq>
 8007e3c:	b110      	cbz	r0, 8007e44 <_dtoa_r+0x6c4>
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	07db      	lsls	r3, r3, #31
 8007e42:	d40f      	bmi.n	8007e64 <_dtoa_r+0x6e4>
 8007e44:	4651      	mov	r1, sl
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fbcc 	bl	80085e4 <_Bfree>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e50:	702b      	strb	r3, [r5, #0]
 8007e52:	f10b 0301 	add.w	r3, fp, #1
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f43f ace2 	beq.w	8007824 <_dtoa_r+0xa4>
 8007e60:	601d      	str	r5, [r3, #0]
 8007e62:	e4df      	b.n	8007824 <_dtoa_r+0xa4>
 8007e64:	465f      	mov	r7, fp
 8007e66:	462b      	mov	r3, r5
 8007e68:	461d      	mov	r5, r3
 8007e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e6e:	2a39      	cmp	r2, #57	; 0x39
 8007e70:	d106      	bne.n	8007e80 <_dtoa_r+0x700>
 8007e72:	9a00      	ldr	r2, [sp, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d1f7      	bne.n	8007e68 <_dtoa_r+0x6e8>
 8007e78:	9900      	ldr	r1, [sp, #0]
 8007e7a:	2230      	movs	r2, #48	; 0x30
 8007e7c:	3701      	adds	r7, #1
 8007e7e:	700a      	strb	r2, [r1, #0]
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	3201      	adds	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e790      	b.n	8007daa <_dtoa_r+0x62a>
 8007e88:	4ba3      	ldr	r3, [pc, #652]	; (8008118 <_dtoa_r+0x998>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f7f8 fbdc 	bl	8000648 <__aeabi_dmul>
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	4606      	mov	r6, r0
 8007e96:	460f      	mov	r7, r1
 8007e98:	f7f8 fe3e 	bl	8000b18 <__aeabi_dcmpeq>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d09e      	beq.n	8007dde <_dtoa_r+0x65e>
 8007ea0:	e7d0      	b.n	8007e44 <_dtoa_r+0x6c4>
 8007ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	f000 80ca 	beq.w	800803e <_dtoa_r+0x8be>
 8007eaa:	9a07      	ldr	r2, [sp, #28]
 8007eac:	2a01      	cmp	r2, #1
 8007eae:	f300 80ad 	bgt.w	800800c <_dtoa_r+0x88c>
 8007eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	f000 80a5 	beq.w	8008004 <_dtoa_r+0x884>
 8007eba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ebe:	9e08      	ldr	r6, [sp, #32]
 8007ec0:	9d05      	ldr	r5, [sp, #20]
 8007ec2:	9a05      	ldr	r2, [sp, #20]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	9205      	str	r2, [sp, #20]
 8007ec8:	9a06      	ldr	r2, [sp, #24]
 8007eca:	2101      	movs	r1, #1
 8007ecc:	441a      	add	r2, r3
 8007ece:	4620      	mov	r0, r4
 8007ed0:	9206      	str	r2, [sp, #24]
 8007ed2:	f000 fc87 	bl	80087e4 <__i2b>
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	b165      	cbz	r5, 8007ef4 <_dtoa_r+0x774>
 8007eda:	9b06      	ldr	r3, [sp, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dd09      	ble.n	8007ef4 <_dtoa_r+0x774>
 8007ee0:	42ab      	cmp	r3, r5
 8007ee2:	9a05      	ldr	r2, [sp, #20]
 8007ee4:	bfa8      	it	ge
 8007ee6:	462b      	movge	r3, r5
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	9205      	str	r2, [sp, #20]
 8007eec:	9a06      	ldr	r2, [sp, #24]
 8007eee:	1aed      	subs	r5, r5, r3
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	9b08      	ldr	r3, [sp, #32]
 8007ef6:	b1f3      	cbz	r3, 8007f36 <_dtoa_r+0x7b6>
 8007ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80a3 	beq.w	8008046 <_dtoa_r+0x8c6>
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	dd10      	ble.n	8007f26 <_dtoa_r+0x7a6>
 8007f04:	4639      	mov	r1, r7
 8007f06:	4632      	mov	r2, r6
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fd2b 	bl	8008964 <__pow5mult>
 8007f0e:	4652      	mov	r2, sl
 8007f10:	4601      	mov	r1, r0
 8007f12:	4607      	mov	r7, r0
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fc7b 	bl	8008810 <__multiply>
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	4680      	mov	r8, r0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fb60 	bl	80085e4 <_Bfree>
 8007f24:	46c2      	mov	sl, r8
 8007f26:	9b08      	ldr	r3, [sp, #32]
 8007f28:	1b9a      	subs	r2, r3, r6
 8007f2a:	d004      	beq.n	8007f36 <_dtoa_r+0x7b6>
 8007f2c:	4651      	mov	r1, sl
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fd18 	bl	8008964 <__pow5mult>
 8007f34:	4682      	mov	sl, r0
 8007f36:	2101      	movs	r1, #1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 fc53 	bl	80087e4 <__i2b>
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	4606      	mov	r6, r0
 8007f44:	f340 8081 	ble.w	800804a <_dtoa_r+0x8ca>
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fd09 	bl	8008964 <__pow5mult>
 8007f52:	9b07      	ldr	r3, [sp, #28]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	4606      	mov	r6, r0
 8007f58:	dd7a      	ble.n	8008050 <_dtoa_r+0x8d0>
 8007f5a:	f04f 0800 	mov.w	r8, #0
 8007f5e:	6933      	ldr	r3, [r6, #16]
 8007f60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f64:	6918      	ldr	r0, [r3, #16]
 8007f66:	f000 fbef 	bl	8008748 <__hi0bits>
 8007f6a:	f1c0 0020 	rsb	r0, r0, #32
 8007f6e:	9b06      	ldr	r3, [sp, #24]
 8007f70:	4418      	add	r0, r3
 8007f72:	f010 001f 	ands.w	r0, r0, #31
 8007f76:	f000 8094 	beq.w	80080a2 <_dtoa_r+0x922>
 8007f7a:	f1c0 0320 	rsb	r3, r0, #32
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	f340 8085 	ble.w	800808e <_dtoa_r+0x90e>
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	f1c0 001c 	rsb	r0, r0, #28
 8007f8a:	4403      	add	r3, r0
 8007f8c:	9305      	str	r3, [sp, #20]
 8007f8e:	9b06      	ldr	r3, [sp, #24]
 8007f90:	4403      	add	r3, r0
 8007f92:	4405      	add	r5, r0
 8007f94:	9306      	str	r3, [sp, #24]
 8007f96:	9b05      	ldr	r3, [sp, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dd05      	ble.n	8007fa8 <_dtoa_r+0x828>
 8007f9c:	4651      	mov	r1, sl
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fd39 	bl	8008a18 <__lshift>
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dd05      	ble.n	8007fba <_dtoa_r+0x83a>
 8007fae:	4631      	mov	r1, r6
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fd30 	bl	8008a18 <__lshift>
 8007fb8:	4606      	mov	r6, r0
 8007fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d072      	beq.n	80080a6 <_dtoa_r+0x926>
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f000 fd94 	bl	8008af0 <__mcmp>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	da6c      	bge.n	80080a6 <_dtoa_r+0x926>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4651      	mov	r1, sl
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fb28 	bl	8008628 <__multadd>
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fde:	4682      	mov	sl, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 81b0 	beq.w	8008346 <_dtoa_r+0xbc6>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4639      	mov	r1, r7
 8007fea:	220a      	movs	r2, #10
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fb1b 	bl	8008628 <__multadd>
 8007ff2:	9b01      	ldr	r3, [sp, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	f300 8096 	bgt.w	8008128 <_dtoa_r+0x9a8>
 8007ffc:	9b07      	ldr	r3, [sp, #28]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	dc59      	bgt.n	80080b6 <_dtoa_r+0x936>
 8008002:	e091      	b.n	8008128 <_dtoa_r+0x9a8>
 8008004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800800a:	e758      	b.n	8007ebe <_dtoa_r+0x73e>
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	1e5e      	subs	r6, r3, #1
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	42b3      	cmp	r3, r6
 8008014:	bfbf      	itttt	lt
 8008016:	9b08      	ldrlt	r3, [sp, #32]
 8008018:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800801a:	9608      	strlt	r6, [sp, #32]
 800801c:	1af3      	sublt	r3, r6, r3
 800801e:	bfb4      	ite	lt
 8008020:	18d2      	addlt	r2, r2, r3
 8008022:	1b9e      	subge	r6, r3, r6
 8008024:	9b04      	ldr	r3, [sp, #16]
 8008026:	bfbc      	itt	lt
 8008028:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800802a:	2600      	movlt	r6, #0
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfb7      	itett	lt
 8008030:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008034:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008038:	1a9d      	sublt	r5, r3, r2
 800803a:	2300      	movlt	r3, #0
 800803c:	e741      	b.n	8007ec2 <_dtoa_r+0x742>
 800803e:	9e08      	ldr	r6, [sp, #32]
 8008040:	9d05      	ldr	r5, [sp, #20]
 8008042:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008044:	e748      	b.n	8007ed8 <_dtoa_r+0x758>
 8008046:	9a08      	ldr	r2, [sp, #32]
 8008048:	e770      	b.n	8007f2c <_dtoa_r+0x7ac>
 800804a:	9b07      	ldr	r3, [sp, #28]
 800804c:	2b01      	cmp	r3, #1
 800804e:	dc19      	bgt.n	8008084 <_dtoa_r+0x904>
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	b9bb      	cbnz	r3, 8008084 <_dtoa_r+0x904>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800805a:	b99b      	cbnz	r3, 8008084 <_dtoa_r+0x904>
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008062:	0d1b      	lsrs	r3, r3, #20
 8008064:	051b      	lsls	r3, r3, #20
 8008066:	b183      	cbz	r3, 800808a <_dtoa_r+0x90a>
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	3301      	adds	r3, #1
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	3301      	adds	r3, #1
 8008072:	9306      	str	r3, [sp, #24]
 8008074:	f04f 0801 	mov.w	r8, #1
 8008078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	f47f af6f 	bne.w	8007f5e <_dtoa_r+0x7de>
 8008080:	2001      	movs	r0, #1
 8008082:	e774      	b.n	8007f6e <_dtoa_r+0x7ee>
 8008084:	f04f 0800 	mov.w	r8, #0
 8008088:	e7f6      	b.n	8008078 <_dtoa_r+0x8f8>
 800808a:	4698      	mov	r8, r3
 800808c:	e7f4      	b.n	8008078 <_dtoa_r+0x8f8>
 800808e:	d082      	beq.n	8007f96 <_dtoa_r+0x816>
 8008090:	9a05      	ldr	r2, [sp, #20]
 8008092:	331c      	adds	r3, #28
 8008094:	441a      	add	r2, r3
 8008096:	9205      	str	r2, [sp, #20]
 8008098:	9a06      	ldr	r2, [sp, #24]
 800809a:	441a      	add	r2, r3
 800809c:	441d      	add	r5, r3
 800809e:	9206      	str	r2, [sp, #24]
 80080a0:	e779      	b.n	8007f96 <_dtoa_r+0x816>
 80080a2:	4603      	mov	r3, r0
 80080a4:	e7f4      	b.n	8008090 <_dtoa_r+0x910>
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dc37      	bgt.n	800811c <_dtoa_r+0x99c>
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	dd34      	ble.n	800811c <_dtoa_r+0x99c>
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	b963      	cbnz	r3, 80080d4 <_dtoa_r+0x954>
 80080ba:	4631      	mov	r1, r6
 80080bc:	2205      	movs	r2, #5
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fab2 	bl	8008628 <__multadd>
 80080c4:	4601      	mov	r1, r0
 80080c6:	4606      	mov	r6, r0
 80080c8:	4650      	mov	r0, sl
 80080ca:	f000 fd11 	bl	8008af0 <__mcmp>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f73f adbb 	bgt.w	8007c4a <_dtoa_r+0x4ca>
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	9d00      	ldr	r5, [sp, #0]
 80080d8:	ea6f 0b03 	mvn.w	fp, r3
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	4631      	mov	r1, r6
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fa7e 	bl	80085e4 <_Bfree>
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	f43f aeab 	beq.w	8007e44 <_dtoa_r+0x6c4>
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	d005      	beq.n	8008100 <_dtoa_r+0x980>
 80080f4:	45b8      	cmp	r8, r7
 80080f6:	d003      	beq.n	8008100 <_dtoa_r+0x980>
 80080f8:	4641      	mov	r1, r8
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 fa72 	bl	80085e4 <_Bfree>
 8008100:	4639      	mov	r1, r7
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fa6e 	bl	80085e4 <_Bfree>
 8008108:	e69c      	b.n	8007e44 <_dtoa_r+0x6c4>
 800810a:	2600      	movs	r6, #0
 800810c:	4637      	mov	r7, r6
 800810e:	e7e1      	b.n	80080d4 <_dtoa_r+0x954>
 8008110:	46bb      	mov	fp, r7
 8008112:	4637      	mov	r7, r6
 8008114:	e599      	b.n	8007c4a <_dtoa_r+0x4ca>
 8008116:	bf00      	nop
 8008118:	40240000 	.word	0x40240000
 800811c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 80c8 	beq.w	80082b4 <_dtoa_r+0xb34>
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	2d00      	cmp	r5, #0
 800812a:	dd05      	ble.n	8008138 <_dtoa_r+0x9b8>
 800812c:	4639      	mov	r1, r7
 800812e:	462a      	mov	r2, r5
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fc71 	bl	8008a18 <__lshift>
 8008136:	4607      	mov	r7, r0
 8008138:	f1b8 0f00 	cmp.w	r8, #0
 800813c:	d05b      	beq.n	80081f6 <_dtoa_r+0xa76>
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4620      	mov	r0, r4
 8008142:	f000 fa0f 	bl	8008564 <_Balloc>
 8008146:	4605      	mov	r5, r0
 8008148:	b928      	cbnz	r0, 8008156 <_dtoa_r+0x9d6>
 800814a:	4b83      	ldr	r3, [pc, #524]	; (8008358 <_dtoa_r+0xbd8>)
 800814c:	4602      	mov	r2, r0
 800814e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008152:	f7ff bb2e 	b.w	80077b2 <_dtoa_r+0x32>
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	3202      	adds	r2, #2
 800815a:	0092      	lsls	r2, r2, #2
 800815c:	f107 010c 	add.w	r1, r7, #12
 8008160:	300c      	adds	r0, #12
 8008162:	f002 f981 	bl	800a468 <memcpy>
 8008166:	2201      	movs	r2, #1
 8008168:	4629      	mov	r1, r5
 800816a:	4620      	mov	r0, r4
 800816c:	f000 fc54 	bl	8008a18 <__lshift>
 8008170:	9b00      	ldr	r3, [sp, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800817a:	4413      	add	r3, r2
 800817c:	9308      	str	r3, [sp, #32]
 800817e:	9b02      	ldr	r3, [sp, #8]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	46b8      	mov	r8, r7
 8008186:	9306      	str	r3, [sp, #24]
 8008188:	4607      	mov	r7, r0
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	4631      	mov	r1, r6
 800818e:	3b01      	subs	r3, #1
 8008190:	4650      	mov	r0, sl
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	f7ff fa6c 	bl	8007670 <quorem>
 8008198:	4641      	mov	r1, r8
 800819a:	9002      	str	r0, [sp, #8]
 800819c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081a0:	4650      	mov	r0, sl
 80081a2:	f000 fca5 	bl	8008af0 <__mcmp>
 80081a6:	463a      	mov	r2, r7
 80081a8:	9005      	str	r0, [sp, #20]
 80081aa:	4631      	mov	r1, r6
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fcbb 	bl	8008b28 <__mdiff>
 80081b2:	68c2      	ldr	r2, [r0, #12]
 80081b4:	4605      	mov	r5, r0
 80081b6:	bb02      	cbnz	r2, 80081fa <_dtoa_r+0xa7a>
 80081b8:	4601      	mov	r1, r0
 80081ba:	4650      	mov	r0, sl
 80081bc:	f000 fc98 	bl	8008af0 <__mcmp>
 80081c0:	4602      	mov	r2, r0
 80081c2:	4629      	mov	r1, r5
 80081c4:	4620      	mov	r0, r4
 80081c6:	9209      	str	r2, [sp, #36]	; 0x24
 80081c8:	f000 fa0c 	bl	80085e4 <_Bfree>
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d0:	9d04      	ldr	r5, [sp, #16]
 80081d2:	ea43 0102 	orr.w	r1, r3, r2
 80081d6:	9b06      	ldr	r3, [sp, #24]
 80081d8:	4319      	orrs	r1, r3
 80081da:	d110      	bne.n	80081fe <_dtoa_r+0xa7e>
 80081dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081e0:	d029      	beq.n	8008236 <_dtoa_r+0xab6>
 80081e2:	9b05      	ldr	r3, [sp, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd02      	ble.n	80081ee <_dtoa_r+0xa6e>
 80081e8:	9b02      	ldr	r3, [sp, #8]
 80081ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	f883 9000 	strb.w	r9, [r3]
 80081f4:	e774      	b.n	80080e0 <_dtoa_r+0x960>
 80081f6:	4638      	mov	r0, r7
 80081f8:	e7ba      	b.n	8008170 <_dtoa_r+0x9f0>
 80081fa:	2201      	movs	r2, #1
 80081fc:	e7e1      	b.n	80081c2 <_dtoa_r+0xa42>
 80081fe:	9b05      	ldr	r3, [sp, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	db04      	blt.n	800820e <_dtoa_r+0xa8e>
 8008204:	9907      	ldr	r1, [sp, #28]
 8008206:	430b      	orrs	r3, r1
 8008208:	9906      	ldr	r1, [sp, #24]
 800820a:	430b      	orrs	r3, r1
 800820c:	d120      	bne.n	8008250 <_dtoa_r+0xad0>
 800820e:	2a00      	cmp	r2, #0
 8008210:	dded      	ble.n	80081ee <_dtoa_r+0xa6e>
 8008212:	4651      	mov	r1, sl
 8008214:	2201      	movs	r2, #1
 8008216:	4620      	mov	r0, r4
 8008218:	f000 fbfe 	bl	8008a18 <__lshift>
 800821c:	4631      	mov	r1, r6
 800821e:	4682      	mov	sl, r0
 8008220:	f000 fc66 	bl	8008af0 <__mcmp>
 8008224:	2800      	cmp	r0, #0
 8008226:	dc03      	bgt.n	8008230 <_dtoa_r+0xab0>
 8008228:	d1e1      	bne.n	80081ee <_dtoa_r+0xa6e>
 800822a:	f019 0f01 	tst.w	r9, #1
 800822e:	d0de      	beq.n	80081ee <_dtoa_r+0xa6e>
 8008230:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008234:	d1d8      	bne.n	80081e8 <_dtoa_r+0xa68>
 8008236:	9a01      	ldr	r2, [sp, #4]
 8008238:	2339      	movs	r3, #57	; 0x39
 800823a:	7013      	strb	r3, [r2, #0]
 800823c:	462b      	mov	r3, r5
 800823e:	461d      	mov	r5, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008246:	2a39      	cmp	r2, #57	; 0x39
 8008248:	d06c      	beq.n	8008324 <_dtoa_r+0xba4>
 800824a:	3201      	adds	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e747      	b.n	80080e0 <_dtoa_r+0x960>
 8008250:	2a00      	cmp	r2, #0
 8008252:	dd07      	ble.n	8008264 <_dtoa_r+0xae4>
 8008254:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008258:	d0ed      	beq.n	8008236 <_dtoa_r+0xab6>
 800825a:	9a01      	ldr	r2, [sp, #4]
 800825c:	f109 0301 	add.w	r3, r9, #1
 8008260:	7013      	strb	r3, [r2, #0]
 8008262:	e73d      	b.n	80080e0 <_dtoa_r+0x960>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	9a08      	ldr	r2, [sp, #32]
 8008268:	f803 9c01 	strb.w	r9, [r3, #-1]
 800826c:	4293      	cmp	r3, r2
 800826e:	d043      	beq.n	80082f8 <_dtoa_r+0xb78>
 8008270:	4651      	mov	r1, sl
 8008272:	2300      	movs	r3, #0
 8008274:	220a      	movs	r2, #10
 8008276:	4620      	mov	r0, r4
 8008278:	f000 f9d6 	bl	8008628 <__multadd>
 800827c:	45b8      	cmp	r8, r7
 800827e:	4682      	mov	sl, r0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	f04f 020a 	mov.w	r2, #10
 8008288:	4641      	mov	r1, r8
 800828a:	4620      	mov	r0, r4
 800828c:	d107      	bne.n	800829e <_dtoa_r+0xb1e>
 800828e:	f000 f9cb 	bl	8008628 <__multadd>
 8008292:	4680      	mov	r8, r0
 8008294:	4607      	mov	r7, r0
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	3301      	adds	r3, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	e775      	b.n	800818a <_dtoa_r+0xa0a>
 800829e:	f000 f9c3 	bl	8008628 <__multadd>
 80082a2:	4639      	mov	r1, r7
 80082a4:	4680      	mov	r8, r0
 80082a6:	2300      	movs	r3, #0
 80082a8:	220a      	movs	r2, #10
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f9bc 	bl	8008628 <__multadd>
 80082b0:	4607      	mov	r7, r0
 80082b2:	e7f0      	b.n	8008296 <_dtoa_r+0xb16>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	9d00      	ldr	r5, [sp, #0]
 80082ba:	4631      	mov	r1, r6
 80082bc:	4650      	mov	r0, sl
 80082be:	f7ff f9d7 	bl	8007670 <quorem>
 80082c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082c6:	9b00      	ldr	r3, [sp, #0]
 80082c8:	f805 9b01 	strb.w	r9, [r5], #1
 80082cc:	1aea      	subs	r2, r5, r3
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	dd07      	ble.n	80082e4 <_dtoa_r+0xb64>
 80082d4:	4651      	mov	r1, sl
 80082d6:	2300      	movs	r3, #0
 80082d8:	220a      	movs	r2, #10
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f9a4 	bl	8008628 <__multadd>
 80082e0:	4682      	mov	sl, r0
 80082e2:	e7ea      	b.n	80082ba <_dtoa_r+0xb3a>
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfc8      	it	gt
 80082ea:	461d      	movgt	r5, r3
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	bfd8      	it	le
 80082f0:	2501      	movle	r5, #1
 80082f2:	441d      	add	r5, r3
 80082f4:	f04f 0800 	mov.w	r8, #0
 80082f8:	4651      	mov	r1, sl
 80082fa:	2201      	movs	r2, #1
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb8b 	bl	8008a18 <__lshift>
 8008302:	4631      	mov	r1, r6
 8008304:	4682      	mov	sl, r0
 8008306:	f000 fbf3 	bl	8008af0 <__mcmp>
 800830a:	2800      	cmp	r0, #0
 800830c:	dc96      	bgt.n	800823c <_dtoa_r+0xabc>
 800830e:	d102      	bne.n	8008316 <_dtoa_r+0xb96>
 8008310:	f019 0f01 	tst.w	r9, #1
 8008314:	d192      	bne.n	800823c <_dtoa_r+0xabc>
 8008316:	462b      	mov	r3, r5
 8008318:	461d      	mov	r5, r3
 800831a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800831e:	2a30      	cmp	r2, #48	; 0x30
 8008320:	d0fa      	beq.n	8008318 <_dtoa_r+0xb98>
 8008322:	e6dd      	b.n	80080e0 <_dtoa_r+0x960>
 8008324:	9a00      	ldr	r2, [sp, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d189      	bne.n	800823e <_dtoa_r+0xabe>
 800832a:	f10b 0b01 	add.w	fp, fp, #1
 800832e:	2331      	movs	r3, #49	; 0x31
 8008330:	e796      	b.n	8008260 <_dtoa_r+0xae0>
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <_dtoa_r+0xbdc>)
 8008334:	f7ff ba99 	b.w	800786a <_dtoa_r+0xea>
 8008338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833a:	2b00      	cmp	r3, #0
 800833c:	f47f aa6d 	bne.w	800781a <_dtoa_r+0x9a>
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <_dtoa_r+0xbe0>)
 8008342:	f7ff ba92 	b.w	800786a <_dtoa_r+0xea>
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dcb5      	bgt.n	80082b8 <_dtoa_r+0xb38>
 800834c:	9b07      	ldr	r3, [sp, #28]
 800834e:	2b02      	cmp	r3, #2
 8008350:	f73f aeb1 	bgt.w	80080b6 <_dtoa_r+0x936>
 8008354:	e7b0      	b.n	80082b8 <_dtoa_r+0xb38>
 8008356:	bf00      	nop
 8008358:	0800d145 	.word	0x0800d145
 800835c:	0800d0a0 	.word	0x0800d0a0
 8008360:	0800d0c9 	.word	0x0800d0c9

08008364 <_free_r>:
 8008364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008366:	2900      	cmp	r1, #0
 8008368:	d044      	beq.n	80083f4 <_free_r+0x90>
 800836a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836e:	9001      	str	r0, [sp, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f1a1 0404 	sub.w	r4, r1, #4
 8008376:	bfb8      	it	lt
 8008378:	18e4      	addlt	r4, r4, r3
 800837a:	f000 f8e7 	bl	800854c <__malloc_lock>
 800837e:	4a1e      	ldr	r2, [pc, #120]	; (80083f8 <_free_r+0x94>)
 8008380:	9801      	ldr	r0, [sp, #4]
 8008382:	6813      	ldr	r3, [r2, #0]
 8008384:	b933      	cbnz	r3, 8008394 <_free_r+0x30>
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	6014      	str	r4, [r2, #0]
 800838a:	b003      	add	sp, #12
 800838c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008390:	f000 b8e2 	b.w	8008558 <__malloc_unlock>
 8008394:	42a3      	cmp	r3, r4
 8008396:	d908      	bls.n	80083aa <_free_r+0x46>
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	1961      	adds	r1, r4, r5
 800839c:	428b      	cmp	r3, r1
 800839e:	bf01      	itttt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	1949      	addeq	r1, r1, r5
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	e7ed      	b.n	8008386 <_free_r+0x22>
 80083aa:	461a      	mov	r2, r3
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b10b      	cbz	r3, 80083b4 <_free_r+0x50>
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x46>
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	1855      	adds	r5, r2, r1
 80083b8:	42a5      	cmp	r5, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x70>
 80083bc:	6824      	ldr	r4, [r4, #0]
 80083be:	4421      	add	r1, r4
 80083c0:	1854      	adds	r4, r2, r1
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	d1e0      	bne.n	800838a <_free_r+0x26>
 80083c8:	681c      	ldr	r4, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	6053      	str	r3, [r2, #4]
 80083ce:	440c      	add	r4, r1
 80083d0:	6014      	str	r4, [r2, #0]
 80083d2:	e7da      	b.n	800838a <_free_r+0x26>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x78>
 80083d6:	230c      	movs	r3, #12
 80083d8:	6003      	str	r3, [r0, #0]
 80083da:	e7d6      	b.n	800838a <_free_r+0x26>
 80083dc:	6825      	ldr	r5, [r4, #0]
 80083de:	1961      	adds	r1, r4, r5
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf04      	itt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	bf04      	itt	eq
 80083ec:	1949      	addeq	r1, r1, r5
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	6054      	str	r4, [r2, #4]
 80083f2:	e7ca      	b.n	800838a <_free_r+0x26>
 80083f4:	b003      	add	sp, #12
 80083f6:	bd30      	pop	{r4, r5, pc}
 80083f8:	20000918 	.word	0x20000918

080083fc <malloc>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <malloc+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b823 	b.w	800844c <_malloc_r>
 8008406:	bf00      	nop
 8008408:	2000006c 	.word	0x2000006c

0800840c <sbrk_aligned>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4e0e      	ldr	r6, [pc, #56]	; (8008448 <sbrk_aligned+0x3c>)
 8008410:	460c      	mov	r4, r1
 8008412:	6831      	ldr	r1, [r6, #0]
 8008414:	4605      	mov	r5, r0
 8008416:	b911      	cbnz	r1, 800841e <sbrk_aligned+0x12>
 8008418:	f002 f816 	bl	800a448 <_sbrk_r>
 800841c:	6030      	str	r0, [r6, #0]
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f002 f811 	bl	800a448 <_sbrk_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d00a      	beq.n	8008440 <sbrk_aligned+0x34>
 800842a:	1cc4      	adds	r4, r0, #3
 800842c:	f024 0403 	bic.w	r4, r4, #3
 8008430:	42a0      	cmp	r0, r4
 8008432:	d007      	beq.n	8008444 <sbrk_aligned+0x38>
 8008434:	1a21      	subs	r1, r4, r0
 8008436:	4628      	mov	r0, r5
 8008438:	f002 f806 	bl	800a448 <_sbrk_r>
 800843c:	3001      	adds	r0, #1
 800843e:	d101      	bne.n	8008444 <sbrk_aligned+0x38>
 8008440:	f04f 34ff 	mov.w	r4, #4294967295
 8008444:	4620      	mov	r0, r4
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	2000091c 	.word	0x2000091c

0800844c <_malloc_r>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	1ccd      	adds	r5, r1, #3
 8008452:	f025 0503 	bic.w	r5, r5, #3
 8008456:	3508      	adds	r5, #8
 8008458:	2d0c      	cmp	r5, #12
 800845a:	bf38      	it	cc
 800845c:	250c      	movcc	r5, #12
 800845e:	2d00      	cmp	r5, #0
 8008460:	4607      	mov	r7, r0
 8008462:	db01      	blt.n	8008468 <_malloc_r+0x1c>
 8008464:	42a9      	cmp	r1, r5
 8008466:	d905      	bls.n	8008474 <_malloc_r+0x28>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	2600      	movs	r6, #0
 800846e:	4630      	mov	r0, r6
 8008470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008548 <_malloc_r+0xfc>
 8008478:	f000 f868 	bl	800854c <__malloc_lock>
 800847c:	f8d8 3000 	ldr.w	r3, [r8]
 8008480:	461c      	mov	r4, r3
 8008482:	bb5c      	cbnz	r4, 80084dc <_malloc_r+0x90>
 8008484:	4629      	mov	r1, r5
 8008486:	4638      	mov	r0, r7
 8008488:	f7ff ffc0 	bl	800840c <sbrk_aligned>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	4604      	mov	r4, r0
 8008490:	d155      	bne.n	800853e <_malloc_r+0xf2>
 8008492:	f8d8 4000 	ldr.w	r4, [r8]
 8008496:	4626      	mov	r6, r4
 8008498:	2e00      	cmp	r6, #0
 800849a:	d145      	bne.n	8008528 <_malloc_r+0xdc>
 800849c:	2c00      	cmp	r4, #0
 800849e:	d048      	beq.n	8008532 <_malloc_r+0xe6>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	4631      	mov	r1, r6
 80084a4:	4638      	mov	r0, r7
 80084a6:	eb04 0903 	add.w	r9, r4, r3
 80084aa:	f001 ffcd 	bl	800a448 <_sbrk_r>
 80084ae:	4581      	cmp	r9, r0
 80084b0:	d13f      	bne.n	8008532 <_malloc_r+0xe6>
 80084b2:	6821      	ldr	r1, [r4, #0]
 80084b4:	1a6d      	subs	r5, r5, r1
 80084b6:	4629      	mov	r1, r5
 80084b8:	4638      	mov	r0, r7
 80084ba:	f7ff ffa7 	bl	800840c <sbrk_aligned>
 80084be:	3001      	adds	r0, #1
 80084c0:	d037      	beq.n	8008532 <_malloc_r+0xe6>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	442b      	add	r3, r5
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	f8d8 3000 	ldr.w	r3, [r8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d038      	beq.n	8008542 <_malloc_r+0xf6>
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	42a2      	cmp	r2, r4
 80084d4:	d12b      	bne.n	800852e <_malloc_r+0xe2>
 80084d6:	2200      	movs	r2, #0
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	e00f      	b.n	80084fc <_malloc_r+0xb0>
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	1b52      	subs	r2, r2, r5
 80084e0:	d41f      	bmi.n	8008522 <_malloc_r+0xd6>
 80084e2:	2a0b      	cmp	r2, #11
 80084e4:	d917      	bls.n	8008516 <_malloc_r+0xca>
 80084e6:	1961      	adds	r1, r4, r5
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	6025      	str	r5, [r4, #0]
 80084ec:	bf18      	it	ne
 80084ee:	6059      	strne	r1, [r3, #4]
 80084f0:	6863      	ldr	r3, [r4, #4]
 80084f2:	bf08      	it	eq
 80084f4:	f8c8 1000 	streq.w	r1, [r8]
 80084f8:	5162      	str	r2, [r4, r5]
 80084fa:	604b      	str	r3, [r1, #4]
 80084fc:	4638      	mov	r0, r7
 80084fe:	f104 060b 	add.w	r6, r4, #11
 8008502:	f000 f829 	bl	8008558 <__malloc_unlock>
 8008506:	f026 0607 	bic.w	r6, r6, #7
 800850a:	1d23      	adds	r3, r4, #4
 800850c:	1af2      	subs	r2, r6, r3
 800850e:	d0ae      	beq.n	800846e <_malloc_r+0x22>
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	50a3      	str	r3, [r4, r2]
 8008514:	e7ab      	b.n	800846e <_malloc_r+0x22>
 8008516:	42a3      	cmp	r3, r4
 8008518:	6862      	ldr	r2, [r4, #4]
 800851a:	d1dd      	bne.n	80084d8 <_malloc_r+0x8c>
 800851c:	f8c8 2000 	str.w	r2, [r8]
 8008520:	e7ec      	b.n	80084fc <_malloc_r+0xb0>
 8008522:	4623      	mov	r3, r4
 8008524:	6864      	ldr	r4, [r4, #4]
 8008526:	e7ac      	b.n	8008482 <_malloc_r+0x36>
 8008528:	4634      	mov	r4, r6
 800852a:	6876      	ldr	r6, [r6, #4]
 800852c:	e7b4      	b.n	8008498 <_malloc_r+0x4c>
 800852e:	4613      	mov	r3, r2
 8008530:	e7cc      	b.n	80084cc <_malloc_r+0x80>
 8008532:	230c      	movs	r3, #12
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4638      	mov	r0, r7
 8008538:	f000 f80e 	bl	8008558 <__malloc_unlock>
 800853c:	e797      	b.n	800846e <_malloc_r+0x22>
 800853e:	6025      	str	r5, [r4, #0]
 8008540:	e7dc      	b.n	80084fc <_malloc_r+0xb0>
 8008542:	605b      	str	r3, [r3, #4]
 8008544:	deff      	udf	#255	; 0xff
 8008546:	bf00      	nop
 8008548:	20000918 	.word	0x20000918

0800854c <__malloc_lock>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__malloc_lock+0x8>)
 800854e:	f7ff b886 	b.w	800765e <__retarget_lock_acquire_recursive>
 8008552:	bf00      	nop
 8008554:	20000914 	.word	0x20000914

08008558 <__malloc_unlock>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__malloc_unlock+0x8>)
 800855a:	f7ff b881 	b.w	8007660 <__retarget_lock_release_recursive>
 800855e:	bf00      	nop
 8008560:	20000914 	.word	0x20000914

08008564 <_Balloc>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	69c6      	ldr	r6, [r0, #28]
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	b976      	cbnz	r6, 800858c <_Balloc+0x28>
 800856e:	2010      	movs	r0, #16
 8008570:	f7ff ff44 	bl	80083fc <malloc>
 8008574:	4602      	mov	r2, r0
 8008576:	61e0      	str	r0, [r4, #28]
 8008578:	b920      	cbnz	r0, 8008584 <_Balloc+0x20>
 800857a:	4b18      	ldr	r3, [pc, #96]	; (80085dc <_Balloc+0x78>)
 800857c:	4818      	ldr	r0, [pc, #96]	; (80085e0 <_Balloc+0x7c>)
 800857e:	216b      	movs	r1, #107	; 0x6b
 8008580:	f001 ff8a 	bl	800a498 <__assert_func>
 8008584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008588:	6006      	str	r6, [r0, #0]
 800858a:	60c6      	str	r6, [r0, #12]
 800858c:	69e6      	ldr	r6, [r4, #28]
 800858e:	68f3      	ldr	r3, [r6, #12]
 8008590:	b183      	cbz	r3, 80085b4 <_Balloc+0x50>
 8008592:	69e3      	ldr	r3, [r4, #28]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800859a:	b9b8      	cbnz	r0, 80085cc <_Balloc+0x68>
 800859c:	2101      	movs	r1, #1
 800859e:	fa01 f605 	lsl.w	r6, r1, r5
 80085a2:	1d72      	adds	r2, r6, #5
 80085a4:	0092      	lsls	r2, r2, #2
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 ff94 	bl	800a4d4 <_calloc_r>
 80085ac:	b160      	cbz	r0, 80085c8 <_Balloc+0x64>
 80085ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085b2:	e00e      	b.n	80085d2 <_Balloc+0x6e>
 80085b4:	2221      	movs	r2, #33	; 0x21
 80085b6:	2104      	movs	r1, #4
 80085b8:	4620      	mov	r0, r4
 80085ba:	f001 ff8b 	bl	800a4d4 <_calloc_r>
 80085be:	69e3      	ldr	r3, [r4, #28]
 80085c0:	60f0      	str	r0, [r6, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e4      	bne.n	8008592 <_Balloc+0x2e>
 80085c8:	2000      	movs	r0, #0
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	6802      	ldr	r2, [r0, #0]
 80085ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085d2:	2300      	movs	r3, #0
 80085d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d8:	e7f7      	b.n	80085ca <_Balloc+0x66>
 80085da:	bf00      	nop
 80085dc:	0800d0d6 	.word	0x0800d0d6
 80085e0:	0800d156 	.word	0x0800d156

080085e4 <_Bfree>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	69c6      	ldr	r6, [r0, #28]
 80085e8:	4605      	mov	r5, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b976      	cbnz	r6, 800860c <_Bfree+0x28>
 80085ee:	2010      	movs	r0, #16
 80085f0:	f7ff ff04 	bl	80083fc <malloc>
 80085f4:	4602      	mov	r2, r0
 80085f6:	61e8      	str	r0, [r5, #28]
 80085f8:	b920      	cbnz	r0, 8008604 <_Bfree+0x20>
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <_Bfree+0x3c>)
 80085fc:	4809      	ldr	r0, [pc, #36]	; (8008624 <_Bfree+0x40>)
 80085fe:	218f      	movs	r1, #143	; 0x8f
 8008600:	f001 ff4a 	bl	800a498 <__assert_func>
 8008604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008608:	6006      	str	r6, [r0, #0]
 800860a:	60c6      	str	r6, [r0, #12]
 800860c:	b13c      	cbz	r4, 800861e <_Bfree+0x3a>
 800860e:	69eb      	ldr	r3, [r5, #28]
 8008610:	6862      	ldr	r2, [r4, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008618:	6021      	str	r1, [r4, #0]
 800861a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	0800d0d6 	.word	0x0800d0d6
 8008624:	0800d156 	.word	0x0800d156

08008628 <__multadd>:
 8008628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	690d      	ldr	r5, [r1, #16]
 800862e:	4607      	mov	r7, r0
 8008630:	460c      	mov	r4, r1
 8008632:	461e      	mov	r6, r3
 8008634:	f101 0c14 	add.w	ip, r1, #20
 8008638:	2000      	movs	r0, #0
 800863a:	f8dc 3000 	ldr.w	r3, [ip]
 800863e:	b299      	uxth	r1, r3
 8008640:	fb02 6101 	mla	r1, r2, r1, r6
 8008644:	0c1e      	lsrs	r6, r3, #16
 8008646:	0c0b      	lsrs	r3, r1, #16
 8008648:	fb02 3306 	mla	r3, r2, r6, r3
 800864c:	b289      	uxth	r1, r1
 800864e:	3001      	adds	r0, #1
 8008650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008654:	4285      	cmp	r5, r0
 8008656:	f84c 1b04 	str.w	r1, [ip], #4
 800865a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800865e:	dcec      	bgt.n	800863a <__multadd+0x12>
 8008660:	b30e      	cbz	r6, 80086a6 <__multadd+0x7e>
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	42ab      	cmp	r3, r5
 8008666:	dc19      	bgt.n	800869c <__multadd+0x74>
 8008668:	6861      	ldr	r1, [r4, #4]
 800866a:	4638      	mov	r0, r7
 800866c:	3101      	adds	r1, #1
 800866e:	f7ff ff79 	bl	8008564 <_Balloc>
 8008672:	4680      	mov	r8, r0
 8008674:	b928      	cbnz	r0, 8008682 <__multadd+0x5a>
 8008676:	4602      	mov	r2, r0
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <__multadd+0x84>)
 800867a:	480d      	ldr	r0, [pc, #52]	; (80086b0 <__multadd+0x88>)
 800867c:	21ba      	movs	r1, #186	; 0xba
 800867e:	f001 ff0b 	bl	800a498 <__assert_func>
 8008682:	6922      	ldr	r2, [r4, #16]
 8008684:	3202      	adds	r2, #2
 8008686:	f104 010c 	add.w	r1, r4, #12
 800868a:	0092      	lsls	r2, r2, #2
 800868c:	300c      	adds	r0, #12
 800868e:	f001 feeb 	bl	800a468 <memcpy>
 8008692:	4621      	mov	r1, r4
 8008694:	4638      	mov	r0, r7
 8008696:	f7ff ffa5 	bl	80085e4 <_Bfree>
 800869a:	4644      	mov	r4, r8
 800869c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086a0:	3501      	adds	r5, #1
 80086a2:	615e      	str	r6, [r3, #20]
 80086a4:	6125      	str	r5, [r4, #16]
 80086a6:	4620      	mov	r0, r4
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	0800d145 	.word	0x0800d145
 80086b0:	0800d156 	.word	0x0800d156

080086b4 <__s2b>:
 80086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	460c      	mov	r4, r1
 80086ba:	4615      	mov	r5, r2
 80086bc:	461f      	mov	r7, r3
 80086be:	2209      	movs	r2, #9
 80086c0:	3308      	adds	r3, #8
 80086c2:	4606      	mov	r6, r0
 80086c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086c8:	2100      	movs	r1, #0
 80086ca:	2201      	movs	r2, #1
 80086cc:	429a      	cmp	r2, r3
 80086ce:	db09      	blt.n	80086e4 <__s2b+0x30>
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7ff ff47 	bl	8008564 <_Balloc>
 80086d6:	b940      	cbnz	r0, 80086ea <__s2b+0x36>
 80086d8:	4602      	mov	r2, r0
 80086da:	4b19      	ldr	r3, [pc, #100]	; (8008740 <__s2b+0x8c>)
 80086dc:	4819      	ldr	r0, [pc, #100]	; (8008744 <__s2b+0x90>)
 80086de:	21d3      	movs	r1, #211	; 0xd3
 80086e0:	f001 feda 	bl	800a498 <__assert_func>
 80086e4:	0052      	lsls	r2, r2, #1
 80086e6:	3101      	adds	r1, #1
 80086e8:	e7f0      	b.n	80086cc <__s2b+0x18>
 80086ea:	9b08      	ldr	r3, [sp, #32]
 80086ec:	6143      	str	r3, [r0, #20]
 80086ee:	2d09      	cmp	r5, #9
 80086f0:	f04f 0301 	mov.w	r3, #1
 80086f4:	6103      	str	r3, [r0, #16]
 80086f6:	dd16      	ble.n	8008726 <__s2b+0x72>
 80086f8:	f104 0909 	add.w	r9, r4, #9
 80086fc:	46c8      	mov	r8, r9
 80086fe:	442c      	add	r4, r5
 8008700:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008704:	4601      	mov	r1, r0
 8008706:	3b30      	subs	r3, #48	; 0x30
 8008708:	220a      	movs	r2, #10
 800870a:	4630      	mov	r0, r6
 800870c:	f7ff ff8c 	bl	8008628 <__multadd>
 8008710:	45a0      	cmp	r8, r4
 8008712:	d1f5      	bne.n	8008700 <__s2b+0x4c>
 8008714:	f1a5 0408 	sub.w	r4, r5, #8
 8008718:	444c      	add	r4, r9
 800871a:	1b2d      	subs	r5, r5, r4
 800871c:	1963      	adds	r3, r4, r5
 800871e:	42bb      	cmp	r3, r7
 8008720:	db04      	blt.n	800872c <__s2b+0x78>
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	340a      	adds	r4, #10
 8008728:	2509      	movs	r5, #9
 800872a:	e7f6      	b.n	800871a <__s2b+0x66>
 800872c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008730:	4601      	mov	r1, r0
 8008732:	3b30      	subs	r3, #48	; 0x30
 8008734:	220a      	movs	r2, #10
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff ff76 	bl	8008628 <__multadd>
 800873c:	e7ee      	b.n	800871c <__s2b+0x68>
 800873e:	bf00      	nop
 8008740:	0800d145 	.word	0x0800d145
 8008744:	0800d156 	.word	0x0800d156

08008748 <__hi0bits>:
 8008748:	0c03      	lsrs	r3, r0, #16
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	b9d3      	cbnz	r3, 8008784 <__hi0bits+0x3c>
 800874e:	0400      	lsls	r0, r0, #16
 8008750:	2310      	movs	r3, #16
 8008752:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008756:	bf04      	itt	eq
 8008758:	0200      	lsleq	r0, r0, #8
 800875a:	3308      	addeq	r3, #8
 800875c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008760:	bf04      	itt	eq
 8008762:	0100      	lsleq	r0, r0, #4
 8008764:	3304      	addeq	r3, #4
 8008766:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800876a:	bf04      	itt	eq
 800876c:	0080      	lsleq	r0, r0, #2
 800876e:	3302      	addeq	r3, #2
 8008770:	2800      	cmp	r0, #0
 8008772:	db05      	blt.n	8008780 <__hi0bits+0x38>
 8008774:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008778:	f103 0301 	add.w	r3, r3, #1
 800877c:	bf08      	it	eq
 800877e:	2320      	moveq	r3, #32
 8008780:	4618      	mov	r0, r3
 8008782:	4770      	bx	lr
 8008784:	2300      	movs	r3, #0
 8008786:	e7e4      	b.n	8008752 <__hi0bits+0xa>

08008788 <__lo0bits>:
 8008788:	6803      	ldr	r3, [r0, #0]
 800878a:	f013 0207 	ands.w	r2, r3, #7
 800878e:	d00c      	beq.n	80087aa <__lo0bits+0x22>
 8008790:	07d9      	lsls	r1, r3, #31
 8008792:	d422      	bmi.n	80087da <__lo0bits+0x52>
 8008794:	079a      	lsls	r2, r3, #30
 8008796:	bf49      	itett	mi
 8008798:	085b      	lsrmi	r3, r3, #1
 800879a:	089b      	lsrpl	r3, r3, #2
 800879c:	6003      	strmi	r3, [r0, #0]
 800879e:	2201      	movmi	r2, #1
 80087a0:	bf5c      	itt	pl
 80087a2:	6003      	strpl	r3, [r0, #0]
 80087a4:	2202      	movpl	r2, #2
 80087a6:	4610      	mov	r0, r2
 80087a8:	4770      	bx	lr
 80087aa:	b299      	uxth	r1, r3
 80087ac:	b909      	cbnz	r1, 80087b2 <__lo0bits+0x2a>
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	2210      	movs	r2, #16
 80087b2:	b2d9      	uxtb	r1, r3
 80087b4:	b909      	cbnz	r1, 80087ba <__lo0bits+0x32>
 80087b6:	3208      	adds	r2, #8
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	0719      	lsls	r1, r3, #28
 80087bc:	bf04      	itt	eq
 80087be:	091b      	lsreq	r3, r3, #4
 80087c0:	3204      	addeq	r2, #4
 80087c2:	0799      	lsls	r1, r3, #30
 80087c4:	bf04      	itt	eq
 80087c6:	089b      	lsreq	r3, r3, #2
 80087c8:	3202      	addeq	r2, #2
 80087ca:	07d9      	lsls	r1, r3, #31
 80087cc:	d403      	bmi.n	80087d6 <__lo0bits+0x4e>
 80087ce:	085b      	lsrs	r3, r3, #1
 80087d0:	f102 0201 	add.w	r2, r2, #1
 80087d4:	d003      	beq.n	80087de <__lo0bits+0x56>
 80087d6:	6003      	str	r3, [r0, #0]
 80087d8:	e7e5      	b.n	80087a6 <__lo0bits+0x1e>
 80087da:	2200      	movs	r2, #0
 80087dc:	e7e3      	b.n	80087a6 <__lo0bits+0x1e>
 80087de:	2220      	movs	r2, #32
 80087e0:	e7e1      	b.n	80087a6 <__lo0bits+0x1e>
	...

080087e4 <__i2b>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	460c      	mov	r4, r1
 80087e8:	2101      	movs	r1, #1
 80087ea:	f7ff febb 	bl	8008564 <_Balloc>
 80087ee:	4602      	mov	r2, r0
 80087f0:	b928      	cbnz	r0, 80087fe <__i2b+0x1a>
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <__i2b+0x24>)
 80087f4:	4805      	ldr	r0, [pc, #20]	; (800880c <__i2b+0x28>)
 80087f6:	f240 1145 	movw	r1, #325	; 0x145
 80087fa:	f001 fe4d 	bl	800a498 <__assert_func>
 80087fe:	2301      	movs	r3, #1
 8008800:	6144      	str	r4, [r0, #20]
 8008802:	6103      	str	r3, [r0, #16]
 8008804:	bd10      	pop	{r4, pc}
 8008806:	bf00      	nop
 8008808:	0800d145 	.word	0x0800d145
 800880c:	0800d156 	.word	0x0800d156

08008810 <__multiply>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4691      	mov	r9, r2
 8008816:	690a      	ldr	r2, [r1, #16]
 8008818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800881c:	429a      	cmp	r2, r3
 800881e:	bfb8      	it	lt
 8008820:	460b      	movlt	r3, r1
 8008822:	460c      	mov	r4, r1
 8008824:	bfbc      	itt	lt
 8008826:	464c      	movlt	r4, r9
 8008828:	4699      	movlt	r9, r3
 800882a:	6927      	ldr	r7, [r4, #16]
 800882c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008830:	68a3      	ldr	r3, [r4, #8]
 8008832:	6861      	ldr	r1, [r4, #4]
 8008834:	eb07 060a 	add.w	r6, r7, sl
 8008838:	42b3      	cmp	r3, r6
 800883a:	b085      	sub	sp, #20
 800883c:	bfb8      	it	lt
 800883e:	3101      	addlt	r1, #1
 8008840:	f7ff fe90 	bl	8008564 <_Balloc>
 8008844:	b930      	cbnz	r0, 8008854 <__multiply+0x44>
 8008846:	4602      	mov	r2, r0
 8008848:	4b44      	ldr	r3, [pc, #272]	; (800895c <__multiply+0x14c>)
 800884a:	4845      	ldr	r0, [pc, #276]	; (8008960 <__multiply+0x150>)
 800884c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008850:	f001 fe22 	bl	800a498 <__assert_func>
 8008854:	f100 0514 	add.w	r5, r0, #20
 8008858:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800885c:	462b      	mov	r3, r5
 800885e:	2200      	movs	r2, #0
 8008860:	4543      	cmp	r3, r8
 8008862:	d321      	bcc.n	80088a8 <__multiply+0x98>
 8008864:	f104 0314 	add.w	r3, r4, #20
 8008868:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800886c:	f109 0314 	add.w	r3, r9, #20
 8008870:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008874:	9202      	str	r2, [sp, #8]
 8008876:	1b3a      	subs	r2, r7, r4
 8008878:	3a15      	subs	r2, #21
 800887a:	f022 0203 	bic.w	r2, r2, #3
 800887e:	3204      	adds	r2, #4
 8008880:	f104 0115 	add.w	r1, r4, #21
 8008884:	428f      	cmp	r7, r1
 8008886:	bf38      	it	cc
 8008888:	2204      	movcc	r2, #4
 800888a:	9201      	str	r2, [sp, #4]
 800888c:	9a02      	ldr	r2, [sp, #8]
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	429a      	cmp	r2, r3
 8008892:	d80c      	bhi.n	80088ae <__multiply+0x9e>
 8008894:	2e00      	cmp	r6, #0
 8008896:	dd03      	ble.n	80088a0 <__multiply+0x90>
 8008898:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800889c:	2b00      	cmp	r3, #0
 800889e:	d05b      	beq.n	8008958 <__multiply+0x148>
 80088a0:	6106      	str	r6, [r0, #16]
 80088a2:	b005      	add	sp, #20
 80088a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a8:	f843 2b04 	str.w	r2, [r3], #4
 80088ac:	e7d8      	b.n	8008860 <__multiply+0x50>
 80088ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80088b2:	f1ba 0f00 	cmp.w	sl, #0
 80088b6:	d024      	beq.n	8008902 <__multiply+0xf2>
 80088b8:	f104 0e14 	add.w	lr, r4, #20
 80088bc:	46a9      	mov	r9, r5
 80088be:	f04f 0c00 	mov.w	ip, #0
 80088c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088c6:	f8d9 1000 	ldr.w	r1, [r9]
 80088ca:	fa1f fb82 	uxth.w	fp, r2
 80088ce:	b289      	uxth	r1, r1
 80088d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80088d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088d8:	f8d9 2000 	ldr.w	r2, [r9]
 80088dc:	4461      	add	r1, ip
 80088de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80088e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088ea:	b289      	uxth	r1, r1
 80088ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088f0:	4577      	cmp	r7, lr
 80088f2:	f849 1b04 	str.w	r1, [r9], #4
 80088f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088fa:	d8e2      	bhi.n	80088c2 <__multiply+0xb2>
 80088fc:	9a01      	ldr	r2, [sp, #4]
 80088fe:	f845 c002 	str.w	ip, [r5, r2]
 8008902:	9a03      	ldr	r2, [sp, #12]
 8008904:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008908:	3304      	adds	r3, #4
 800890a:	f1b9 0f00 	cmp.w	r9, #0
 800890e:	d021      	beq.n	8008954 <__multiply+0x144>
 8008910:	6829      	ldr	r1, [r5, #0]
 8008912:	f104 0c14 	add.w	ip, r4, #20
 8008916:	46ae      	mov	lr, r5
 8008918:	f04f 0a00 	mov.w	sl, #0
 800891c:	f8bc b000 	ldrh.w	fp, [ip]
 8008920:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008924:	fb09 220b 	mla	r2, r9, fp, r2
 8008928:	4452      	add	r2, sl
 800892a:	b289      	uxth	r1, r1
 800892c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008930:	f84e 1b04 	str.w	r1, [lr], #4
 8008934:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008938:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800893c:	f8be 1000 	ldrh.w	r1, [lr]
 8008940:	fb09 110a 	mla	r1, r9, sl, r1
 8008944:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008948:	4567      	cmp	r7, ip
 800894a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800894e:	d8e5      	bhi.n	800891c <__multiply+0x10c>
 8008950:	9a01      	ldr	r2, [sp, #4]
 8008952:	50a9      	str	r1, [r5, r2]
 8008954:	3504      	adds	r5, #4
 8008956:	e799      	b.n	800888c <__multiply+0x7c>
 8008958:	3e01      	subs	r6, #1
 800895a:	e79b      	b.n	8008894 <__multiply+0x84>
 800895c:	0800d145 	.word	0x0800d145
 8008960:	0800d156 	.word	0x0800d156

08008964 <__pow5mult>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	4615      	mov	r5, r2
 800896a:	f012 0203 	ands.w	r2, r2, #3
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	d007      	beq.n	8008984 <__pow5mult+0x20>
 8008974:	4c25      	ldr	r4, [pc, #148]	; (8008a0c <__pow5mult+0xa8>)
 8008976:	3a01      	subs	r2, #1
 8008978:	2300      	movs	r3, #0
 800897a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800897e:	f7ff fe53 	bl	8008628 <__multadd>
 8008982:	4607      	mov	r7, r0
 8008984:	10ad      	asrs	r5, r5, #2
 8008986:	d03d      	beq.n	8008a04 <__pow5mult+0xa0>
 8008988:	69f4      	ldr	r4, [r6, #28]
 800898a:	b97c      	cbnz	r4, 80089ac <__pow5mult+0x48>
 800898c:	2010      	movs	r0, #16
 800898e:	f7ff fd35 	bl	80083fc <malloc>
 8008992:	4602      	mov	r2, r0
 8008994:	61f0      	str	r0, [r6, #28]
 8008996:	b928      	cbnz	r0, 80089a4 <__pow5mult+0x40>
 8008998:	4b1d      	ldr	r3, [pc, #116]	; (8008a10 <__pow5mult+0xac>)
 800899a:	481e      	ldr	r0, [pc, #120]	; (8008a14 <__pow5mult+0xb0>)
 800899c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80089a0:	f001 fd7a 	bl	800a498 <__assert_func>
 80089a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a8:	6004      	str	r4, [r0, #0]
 80089aa:	60c4      	str	r4, [r0, #12]
 80089ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80089b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b4:	b94c      	cbnz	r4, 80089ca <__pow5mult+0x66>
 80089b6:	f240 2171 	movw	r1, #625	; 0x271
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff ff12 	bl	80087e4 <__i2b>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089c6:	4604      	mov	r4, r0
 80089c8:	6003      	str	r3, [r0, #0]
 80089ca:	f04f 0900 	mov.w	r9, #0
 80089ce:	07eb      	lsls	r3, r5, #31
 80089d0:	d50a      	bpl.n	80089e8 <__pow5mult+0x84>
 80089d2:	4639      	mov	r1, r7
 80089d4:	4622      	mov	r2, r4
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ff1a 	bl	8008810 <__multiply>
 80089dc:	4639      	mov	r1, r7
 80089de:	4680      	mov	r8, r0
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff fdff 	bl	80085e4 <_Bfree>
 80089e6:	4647      	mov	r7, r8
 80089e8:	106d      	asrs	r5, r5, #1
 80089ea:	d00b      	beq.n	8008a04 <__pow5mult+0xa0>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	b938      	cbnz	r0, 8008a00 <__pow5mult+0x9c>
 80089f0:	4622      	mov	r2, r4
 80089f2:	4621      	mov	r1, r4
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff ff0b 	bl	8008810 <__multiply>
 80089fa:	6020      	str	r0, [r4, #0]
 80089fc:	f8c0 9000 	str.w	r9, [r0]
 8008a00:	4604      	mov	r4, r0
 8008a02:	e7e4      	b.n	80089ce <__pow5mult+0x6a>
 8008a04:	4638      	mov	r0, r7
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	bf00      	nop
 8008a0c:	0800d2a0 	.word	0x0800d2a0
 8008a10:	0800d0d6 	.word	0x0800d0d6
 8008a14:	0800d156 	.word	0x0800d156

08008a18 <__lshift>:
 8008a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	6849      	ldr	r1, [r1, #4]
 8008a20:	6923      	ldr	r3, [r4, #16]
 8008a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	4607      	mov	r7, r0
 8008a2a:	4691      	mov	r9, r2
 8008a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a30:	f108 0601 	add.w	r6, r8, #1
 8008a34:	42b3      	cmp	r3, r6
 8008a36:	db0b      	blt.n	8008a50 <__lshift+0x38>
 8008a38:	4638      	mov	r0, r7
 8008a3a:	f7ff fd93 	bl	8008564 <_Balloc>
 8008a3e:	4605      	mov	r5, r0
 8008a40:	b948      	cbnz	r0, 8008a56 <__lshift+0x3e>
 8008a42:	4602      	mov	r2, r0
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <__lshift+0xd0>)
 8008a46:	4829      	ldr	r0, [pc, #164]	; (8008aec <__lshift+0xd4>)
 8008a48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a4c:	f001 fd24 	bl	800a498 <__assert_func>
 8008a50:	3101      	adds	r1, #1
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	e7ee      	b.n	8008a34 <__lshift+0x1c>
 8008a56:	2300      	movs	r3, #0
 8008a58:	f100 0114 	add.w	r1, r0, #20
 8008a5c:	f100 0210 	add.w	r2, r0, #16
 8008a60:	4618      	mov	r0, r3
 8008a62:	4553      	cmp	r3, sl
 8008a64:	db33      	blt.n	8008ace <__lshift+0xb6>
 8008a66:	6920      	ldr	r0, [r4, #16]
 8008a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a6c:	f104 0314 	add.w	r3, r4, #20
 8008a70:	f019 091f 	ands.w	r9, r9, #31
 8008a74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a7c:	d02b      	beq.n	8008ad6 <__lshift+0xbe>
 8008a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a82:	468a      	mov	sl, r1
 8008a84:	2200      	movs	r2, #0
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	fa00 f009 	lsl.w	r0, r0, r9
 8008a8c:	4310      	orrs	r0, r2
 8008a8e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a96:	459c      	cmp	ip, r3
 8008a98:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a9c:	d8f3      	bhi.n	8008a86 <__lshift+0x6e>
 8008a9e:	ebac 0304 	sub.w	r3, ip, r4
 8008aa2:	3b15      	subs	r3, #21
 8008aa4:	f023 0303 	bic.w	r3, r3, #3
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	f104 0015 	add.w	r0, r4, #21
 8008aae:	4584      	cmp	ip, r0
 8008ab0:	bf38      	it	cc
 8008ab2:	2304      	movcc	r3, #4
 8008ab4:	50ca      	str	r2, [r1, r3]
 8008ab6:	b10a      	cbz	r2, 8008abc <__lshift+0xa4>
 8008ab8:	f108 0602 	add.w	r6, r8, #2
 8008abc:	3e01      	subs	r6, #1
 8008abe:	4638      	mov	r0, r7
 8008ac0:	612e      	str	r6, [r5, #16]
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	f7ff fd8e 	bl	80085e4 <_Bfree>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	e7c5      	b.n	8008a62 <__lshift+0x4a>
 8008ad6:	3904      	subs	r1, #4
 8008ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008adc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ae0:	459c      	cmp	ip, r3
 8008ae2:	d8f9      	bhi.n	8008ad8 <__lshift+0xc0>
 8008ae4:	e7ea      	b.n	8008abc <__lshift+0xa4>
 8008ae6:	bf00      	nop
 8008ae8:	0800d145 	.word	0x0800d145
 8008aec:	0800d156 	.word	0x0800d156

08008af0 <__mcmp>:
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	6902      	ldr	r2, [r0, #16]
 8008af4:	690c      	ldr	r4, [r1, #16]
 8008af6:	1b12      	subs	r2, r2, r4
 8008af8:	d10e      	bne.n	8008b18 <__mcmp+0x28>
 8008afa:	f100 0314 	add.w	r3, r0, #20
 8008afe:	3114      	adds	r1, #20
 8008b00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b10:	42a5      	cmp	r5, r4
 8008b12:	d003      	beq.n	8008b1c <__mcmp+0x2c>
 8008b14:	d305      	bcc.n	8008b22 <__mcmp+0x32>
 8008b16:	2201      	movs	r2, #1
 8008b18:	4610      	mov	r0, r2
 8008b1a:	bd30      	pop	{r4, r5, pc}
 8008b1c:	4283      	cmp	r3, r0
 8008b1e:	d3f3      	bcc.n	8008b08 <__mcmp+0x18>
 8008b20:	e7fa      	b.n	8008b18 <__mcmp+0x28>
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	e7f7      	b.n	8008b18 <__mcmp+0x28>

08008b28 <__mdiff>:
 8008b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	4606      	mov	r6, r0
 8008b30:	4611      	mov	r1, r2
 8008b32:	4620      	mov	r0, r4
 8008b34:	4690      	mov	r8, r2
 8008b36:	f7ff ffdb 	bl	8008af0 <__mcmp>
 8008b3a:	1e05      	subs	r5, r0, #0
 8008b3c:	d110      	bne.n	8008b60 <__mdiff+0x38>
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4630      	mov	r0, r6
 8008b42:	f7ff fd0f 	bl	8008564 <_Balloc>
 8008b46:	b930      	cbnz	r0, 8008b56 <__mdiff+0x2e>
 8008b48:	4b3a      	ldr	r3, [pc, #232]	; (8008c34 <__mdiff+0x10c>)
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	f240 2137 	movw	r1, #567	; 0x237
 8008b50:	4839      	ldr	r0, [pc, #228]	; (8008c38 <__mdiff+0x110>)
 8008b52:	f001 fca1 	bl	800a498 <__assert_func>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b60:	bfa4      	itt	ge
 8008b62:	4643      	movge	r3, r8
 8008b64:	46a0      	movge	r8, r4
 8008b66:	4630      	mov	r0, r6
 8008b68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b6c:	bfa6      	itte	ge
 8008b6e:	461c      	movge	r4, r3
 8008b70:	2500      	movge	r5, #0
 8008b72:	2501      	movlt	r5, #1
 8008b74:	f7ff fcf6 	bl	8008564 <_Balloc>
 8008b78:	b920      	cbnz	r0, 8008b84 <__mdiff+0x5c>
 8008b7a:	4b2e      	ldr	r3, [pc, #184]	; (8008c34 <__mdiff+0x10c>)
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	f240 2145 	movw	r1, #581	; 0x245
 8008b82:	e7e5      	b.n	8008b50 <__mdiff+0x28>
 8008b84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b88:	6926      	ldr	r6, [r4, #16]
 8008b8a:	60c5      	str	r5, [r0, #12]
 8008b8c:	f104 0914 	add.w	r9, r4, #20
 8008b90:	f108 0514 	add.w	r5, r8, #20
 8008b94:	f100 0e14 	add.w	lr, r0, #20
 8008b98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ba0:	f108 0210 	add.w	r2, r8, #16
 8008ba4:	46f2      	mov	sl, lr
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bb0:	fa11 f88b 	uxtah	r8, r1, fp
 8008bb4:	b299      	uxth	r1, r3
 8008bb6:	0c1b      	lsrs	r3, r3, #16
 8008bb8:	eba8 0801 	sub.w	r8, r8, r1
 8008bbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bc4:	fa1f f888 	uxth.w	r8, r8
 8008bc8:	1419      	asrs	r1, r3, #16
 8008bca:	454e      	cmp	r6, r9
 8008bcc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bd0:	f84a 3b04 	str.w	r3, [sl], #4
 8008bd4:	d8e8      	bhi.n	8008ba8 <__mdiff+0x80>
 8008bd6:	1b33      	subs	r3, r6, r4
 8008bd8:	3b15      	subs	r3, #21
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	3304      	adds	r3, #4
 8008be0:	3415      	adds	r4, #21
 8008be2:	42a6      	cmp	r6, r4
 8008be4:	bf38      	it	cc
 8008be6:	2304      	movcc	r3, #4
 8008be8:	441d      	add	r5, r3
 8008bea:	4473      	add	r3, lr
 8008bec:	469e      	mov	lr, r3
 8008bee:	462e      	mov	r6, r5
 8008bf0:	4566      	cmp	r6, ip
 8008bf2:	d30e      	bcc.n	8008c12 <__mdiff+0xea>
 8008bf4:	f10c 0203 	add.w	r2, ip, #3
 8008bf8:	1b52      	subs	r2, r2, r5
 8008bfa:	f022 0203 	bic.w	r2, r2, #3
 8008bfe:	3d03      	subs	r5, #3
 8008c00:	45ac      	cmp	ip, r5
 8008c02:	bf38      	it	cc
 8008c04:	2200      	movcc	r2, #0
 8008c06:	4413      	add	r3, r2
 8008c08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c0c:	b17a      	cbz	r2, 8008c2e <__mdiff+0x106>
 8008c0e:	6107      	str	r7, [r0, #16]
 8008c10:	e7a4      	b.n	8008b5c <__mdiff+0x34>
 8008c12:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c16:	fa11 f288 	uxtah	r2, r1, r8
 8008c1a:	1414      	asrs	r4, r2, #16
 8008c1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c20:	b292      	uxth	r2, r2
 8008c22:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c26:	f84e 2b04 	str.w	r2, [lr], #4
 8008c2a:	1421      	asrs	r1, r4, #16
 8008c2c:	e7e0      	b.n	8008bf0 <__mdiff+0xc8>
 8008c2e:	3f01      	subs	r7, #1
 8008c30:	e7ea      	b.n	8008c08 <__mdiff+0xe0>
 8008c32:	bf00      	nop
 8008c34:	0800d145 	.word	0x0800d145
 8008c38:	0800d156 	.word	0x0800d156

08008c3c <__ulp>:
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	ed8d 0b00 	vstr	d0, [sp]
 8008c42:	9a01      	ldr	r2, [sp, #4]
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <__ulp+0x48>)
 8008c46:	4013      	ands	r3, r2
 8008c48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dc08      	bgt.n	8008c62 <__ulp+0x26>
 8008c50:	425b      	negs	r3, r3
 8008c52:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008c56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c5a:	da04      	bge.n	8008c66 <__ulp+0x2a>
 8008c5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c60:	4113      	asrs	r3, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	e008      	b.n	8008c78 <__ulp+0x3c>
 8008c66:	f1a2 0314 	sub.w	r3, r2, #20
 8008c6a:	2b1e      	cmp	r3, #30
 8008c6c:	bfda      	itte	le
 8008c6e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008c72:	40da      	lsrle	r2, r3
 8008c74:	2201      	movgt	r2, #1
 8008c76:	2300      	movs	r3, #0
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	ec41 0b10 	vmov	d0, r0, r1
 8008c80:	b002      	add	sp, #8
 8008c82:	4770      	bx	lr
 8008c84:	7ff00000 	.word	0x7ff00000

08008c88 <__b2d>:
 8008c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8c:	6906      	ldr	r6, [r0, #16]
 8008c8e:	f100 0814 	add.w	r8, r0, #20
 8008c92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c96:	1f37      	subs	r7, r6, #4
 8008c98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7ff fd53 	bl	8008748 <__hi0bits>
 8008ca2:	f1c0 0320 	rsb	r3, r0, #32
 8008ca6:	280a      	cmp	r0, #10
 8008ca8:	600b      	str	r3, [r1, #0]
 8008caa:	491b      	ldr	r1, [pc, #108]	; (8008d18 <__b2d+0x90>)
 8008cac:	dc15      	bgt.n	8008cda <__b2d+0x52>
 8008cae:	f1c0 0c0b 	rsb	ip, r0, #11
 8008cb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8008cb6:	45b8      	cmp	r8, r7
 8008cb8:	ea43 0501 	orr.w	r5, r3, r1
 8008cbc:	bf34      	ite	cc
 8008cbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cc2:	2300      	movcs	r3, #0
 8008cc4:	3015      	adds	r0, #21
 8008cc6:	fa02 f000 	lsl.w	r0, r2, r0
 8008cca:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cce:	4303      	orrs	r3, r0
 8008cd0:	461c      	mov	r4, r3
 8008cd2:	ec45 4b10 	vmov	d0, r4, r5
 8008cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cda:	45b8      	cmp	r8, r7
 8008cdc:	bf3a      	itte	cc
 8008cde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ce2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ce6:	2300      	movcs	r3, #0
 8008ce8:	380b      	subs	r0, #11
 8008cea:	d012      	beq.n	8008d12 <__b2d+0x8a>
 8008cec:	f1c0 0120 	rsb	r1, r0, #32
 8008cf0:	fa23 f401 	lsr.w	r4, r3, r1
 8008cf4:	4082      	lsls	r2, r0
 8008cf6:	4322      	orrs	r2, r4
 8008cf8:	4547      	cmp	r7, r8
 8008cfa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008cfe:	bf8c      	ite	hi
 8008d00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008d04:	2200      	movls	r2, #0
 8008d06:	4083      	lsls	r3, r0
 8008d08:	40ca      	lsrs	r2, r1
 8008d0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	e7de      	b.n	8008cd0 <__b2d+0x48>
 8008d12:	ea42 0501 	orr.w	r5, r2, r1
 8008d16:	e7db      	b.n	8008cd0 <__b2d+0x48>
 8008d18:	3ff00000 	.word	0x3ff00000

08008d1c <__d2b>:
 8008d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	460f      	mov	r7, r1
 8008d22:	2101      	movs	r1, #1
 8008d24:	ec59 8b10 	vmov	r8, r9, d0
 8008d28:	4616      	mov	r6, r2
 8008d2a:	f7ff fc1b 	bl	8008564 <_Balloc>
 8008d2e:	4604      	mov	r4, r0
 8008d30:	b930      	cbnz	r0, 8008d40 <__d2b+0x24>
 8008d32:	4602      	mov	r2, r0
 8008d34:	4b24      	ldr	r3, [pc, #144]	; (8008dc8 <__d2b+0xac>)
 8008d36:	4825      	ldr	r0, [pc, #148]	; (8008dcc <__d2b+0xb0>)
 8008d38:	f240 310f 	movw	r1, #783	; 0x30f
 8008d3c:	f001 fbac 	bl	800a498 <__assert_func>
 8008d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d48:	bb2d      	cbnz	r5, 8008d96 <__d2b+0x7a>
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d50:	d026      	beq.n	8008da0 <__d2b+0x84>
 8008d52:	4668      	mov	r0, sp
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	f7ff fd17 	bl	8008788 <__lo0bits>
 8008d5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d5e:	b1e8      	cbz	r0, 8008d9c <__d2b+0x80>
 8008d60:	f1c0 0320 	rsb	r3, r0, #32
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	40c2      	lsrs	r2, r0
 8008d6c:	6163      	str	r3, [r4, #20]
 8008d6e:	9201      	str	r2, [sp, #4]
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	61a3      	str	r3, [r4, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	bf14      	ite	ne
 8008d78:	2202      	movne	r2, #2
 8008d7a:	2201      	moveq	r2, #1
 8008d7c:	6122      	str	r2, [r4, #16]
 8008d7e:	b1bd      	cbz	r5, 8008db0 <__d2b+0x94>
 8008d80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d84:	4405      	add	r5, r0
 8008d86:	603d      	str	r5, [r7, #0]
 8008d88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d8c:	6030      	str	r0, [r6, #0]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	b003      	add	sp, #12
 8008d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d9a:	e7d6      	b.n	8008d4a <__d2b+0x2e>
 8008d9c:	6161      	str	r1, [r4, #20]
 8008d9e:	e7e7      	b.n	8008d70 <__d2b+0x54>
 8008da0:	a801      	add	r0, sp, #4
 8008da2:	f7ff fcf1 	bl	8008788 <__lo0bits>
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	6163      	str	r3, [r4, #20]
 8008daa:	3020      	adds	r0, #32
 8008dac:	2201      	movs	r2, #1
 8008dae:	e7e5      	b.n	8008d7c <__d2b+0x60>
 8008db0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008db4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008db8:	6038      	str	r0, [r7, #0]
 8008dba:	6918      	ldr	r0, [r3, #16]
 8008dbc:	f7ff fcc4 	bl	8008748 <__hi0bits>
 8008dc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dc4:	e7e2      	b.n	8008d8c <__d2b+0x70>
 8008dc6:	bf00      	nop
 8008dc8:	0800d145 	.word	0x0800d145
 8008dcc:	0800d156 	.word	0x0800d156

08008dd0 <__ratio>:
 8008dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4688      	mov	r8, r1
 8008dd6:	4669      	mov	r1, sp
 8008dd8:	4681      	mov	r9, r0
 8008dda:	f7ff ff55 	bl	8008c88 <__b2d>
 8008dde:	a901      	add	r1, sp, #4
 8008de0:	4640      	mov	r0, r8
 8008de2:	ec55 4b10 	vmov	r4, r5, d0
 8008de6:	f7ff ff4f 	bl	8008c88 <__b2d>
 8008dea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008df2:	eba3 0c02 	sub.w	ip, r3, r2
 8008df6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e00:	ec51 0b10 	vmov	r0, r1, d0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfd6      	itet	le
 8008e08:	460a      	movle	r2, r1
 8008e0a:	462a      	movgt	r2, r5
 8008e0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e10:	468b      	mov	fp, r1
 8008e12:	462f      	mov	r7, r5
 8008e14:	bfd4      	ite	le
 8008e16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e1e:	4620      	mov	r0, r4
 8008e20:	ee10 2a10 	vmov	r2, s0
 8008e24:	465b      	mov	r3, fp
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fd38 	bl	800089c <__aeabi_ddiv>
 8008e2c:	ec41 0b10 	vmov	d0, r0, r1
 8008e30:	b003      	add	sp, #12
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e36 <__copybits>:
 8008e36:	3901      	subs	r1, #1
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	1149      	asrs	r1, r1, #5
 8008e3c:	6914      	ldr	r4, [r2, #16]
 8008e3e:	3101      	adds	r1, #1
 8008e40:	f102 0314 	add.w	r3, r2, #20
 8008e44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e4c:	1f05      	subs	r5, r0, #4
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	d30c      	bcc.n	8008e6c <__copybits+0x36>
 8008e52:	1aa3      	subs	r3, r4, r2
 8008e54:	3b11      	subs	r3, #17
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	3211      	adds	r2, #17
 8008e5c:	42a2      	cmp	r2, r4
 8008e5e:	bf88      	it	hi
 8008e60:	2300      	movhi	r3, #0
 8008e62:	4418      	add	r0, r3
 8008e64:	2300      	movs	r3, #0
 8008e66:	4288      	cmp	r0, r1
 8008e68:	d305      	bcc.n	8008e76 <__copybits+0x40>
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
 8008e6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e70:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e74:	e7eb      	b.n	8008e4e <__copybits+0x18>
 8008e76:	f840 3b04 	str.w	r3, [r0], #4
 8008e7a:	e7f4      	b.n	8008e66 <__copybits+0x30>

08008e7c <__any_on>:
 8008e7c:	f100 0214 	add.w	r2, r0, #20
 8008e80:	6900      	ldr	r0, [r0, #16]
 8008e82:	114b      	asrs	r3, r1, #5
 8008e84:	4298      	cmp	r0, r3
 8008e86:	b510      	push	{r4, lr}
 8008e88:	db11      	blt.n	8008eae <__any_on+0x32>
 8008e8a:	dd0a      	ble.n	8008ea2 <__any_on+0x26>
 8008e8c:	f011 011f 	ands.w	r1, r1, #31
 8008e90:	d007      	beq.n	8008ea2 <__any_on+0x26>
 8008e92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e96:	fa24 f001 	lsr.w	r0, r4, r1
 8008e9a:	fa00 f101 	lsl.w	r1, r0, r1
 8008e9e:	428c      	cmp	r4, r1
 8008ea0:	d10b      	bne.n	8008eba <__any_on+0x3e>
 8008ea2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d803      	bhi.n	8008eb2 <__any_on+0x36>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	4603      	mov	r3, r0
 8008eb0:	e7f7      	b.n	8008ea2 <__any_on+0x26>
 8008eb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d0f5      	beq.n	8008ea6 <__any_on+0x2a>
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7f6      	b.n	8008eac <__any_on+0x30>

08008ebe <sulp>:
 8008ebe:	b570      	push	{r4, r5, r6, lr}
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	ec45 4b10 	vmov	d0, r4, r5
 8008ec8:	4616      	mov	r6, r2
 8008eca:	f7ff feb7 	bl	8008c3c <__ulp>
 8008ece:	ec51 0b10 	vmov	r0, r1, d0
 8008ed2:	b17e      	cbz	r6, 8008ef4 <sulp+0x36>
 8008ed4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ed8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dd09      	ble.n	8008ef4 <sulp+0x36>
 8008ee0:	051b      	lsls	r3, r3, #20
 8008ee2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ee6:	2400      	movs	r4, #0
 8008ee8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f7f7 fbaa 	bl	8000648 <__aeabi_dmul>
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ef8 <_strtod_l>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	ed2d 8b02 	vpush	{d8}
 8008f00:	b09b      	sub	sp, #108	; 0x6c
 8008f02:	4604      	mov	r4, r0
 8008f04:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f06:	2200      	movs	r2, #0
 8008f08:	9216      	str	r2, [sp, #88]	; 0x58
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	f04f 0800 	mov.w	r8, #0
 8008f10:	f04f 0900 	mov.w	r9, #0
 8008f14:	460a      	mov	r2, r1
 8008f16:	9215      	str	r2, [sp, #84]	; 0x54
 8008f18:	7811      	ldrb	r1, [r2, #0]
 8008f1a:	292b      	cmp	r1, #43	; 0x2b
 8008f1c:	d04c      	beq.n	8008fb8 <_strtod_l+0xc0>
 8008f1e:	d83a      	bhi.n	8008f96 <_strtod_l+0x9e>
 8008f20:	290d      	cmp	r1, #13
 8008f22:	d834      	bhi.n	8008f8e <_strtod_l+0x96>
 8008f24:	2908      	cmp	r1, #8
 8008f26:	d834      	bhi.n	8008f92 <_strtod_l+0x9a>
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d03d      	beq.n	8008fa8 <_strtod_l+0xb0>
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	920a      	str	r2, [sp, #40]	; 0x28
 8008f30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008f32:	7832      	ldrb	r2, [r6, #0]
 8008f34:	2a30      	cmp	r2, #48	; 0x30
 8008f36:	f040 80b4 	bne.w	80090a2 <_strtod_l+0x1aa>
 8008f3a:	7872      	ldrb	r2, [r6, #1]
 8008f3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008f40:	2a58      	cmp	r2, #88	; 0x58
 8008f42:	d170      	bne.n	8009026 <_strtod_l+0x12e>
 8008f44:	9302      	str	r3, [sp, #8]
 8008f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	ab16      	add	r3, sp, #88	; 0x58
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4a8e      	ldr	r2, [pc, #568]	; (8009188 <_strtod_l+0x290>)
 8008f50:	ab17      	add	r3, sp, #92	; 0x5c
 8008f52:	a915      	add	r1, sp, #84	; 0x54
 8008f54:	4620      	mov	r0, r4
 8008f56:	f001 fb3b 	bl	800a5d0 <__gethex>
 8008f5a:	f010 070f 	ands.w	r7, r0, #15
 8008f5e:	4605      	mov	r5, r0
 8008f60:	d005      	beq.n	8008f6e <_strtod_l+0x76>
 8008f62:	2f06      	cmp	r7, #6
 8008f64:	d12a      	bne.n	8008fbc <_strtod_l+0xc4>
 8008f66:	3601      	adds	r6, #1
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9615      	str	r6, [sp, #84]	; 0x54
 8008f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f040 857f 	bne.w	8009a74 <_strtod_l+0xb7c>
 8008f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f78:	b1db      	cbz	r3, 8008fb2 <_strtod_l+0xba>
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f80:	ec43 2b10 	vmov	d0, r2, r3
 8008f84:	b01b      	add	sp, #108	; 0x6c
 8008f86:	ecbd 8b02 	vpop	{d8}
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	2920      	cmp	r1, #32
 8008f90:	d1cc      	bne.n	8008f2c <_strtod_l+0x34>
 8008f92:	3201      	adds	r2, #1
 8008f94:	e7bf      	b.n	8008f16 <_strtod_l+0x1e>
 8008f96:	292d      	cmp	r1, #45	; 0x2d
 8008f98:	d1c8      	bne.n	8008f2c <_strtod_l+0x34>
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	910a      	str	r1, [sp, #40]	; 0x28
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	9115      	str	r1, [sp, #84]	; 0x54
 8008fa2:	7852      	ldrb	r2, [r2, #1]
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	d1c3      	bne.n	8008f30 <_strtod_l+0x38>
 8008fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008faa:	9515      	str	r5, [sp, #84]	; 0x54
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 855f 	bne.w	8009a70 <_strtod_l+0xb78>
 8008fb2:	4642      	mov	r2, r8
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	e7e3      	b.n	8008f80 <_strtod_l+0x88>
 8008fb8:	2100      	movs	r1, #0
 8008fba:	e7ef      	b.n	8008f9c <_strtod_l+0xa4>
 8008fbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fbe:	b13a      	cbz	r2, 8008fd0 <_strtod_l+0xd8>
 8008fc0:	2135      	movs	r1, #53	; 0x35
 8008fc2:	a818      	add	r0, sp, #96	; 0x60
 8008fc4:	f7ff ff37 	bl	8008e36 <__copybits>
 8008fc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff fb0a 	bl	80085e4 <_Bfree>
 8008fd0:	3f01      	subs	r7, #1
 8008fd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fd4:	2f04      	cmp	r7, #4
 8008fd6:	d806      	bhi.n	8008fe6 <_strtod_l+0xee>
 8008fd8:	e8df f007 	tbb	[pc, r7]
 8008fdc:	201d0314 	.word	0x201d0314
 8008fe0:	14          	.byte	0x14
 8008fe1:	00          	.byte	0x00
 8008fe2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008fe6:	05e9      	lsls	r1, r5, #23
 8008fe8:	bf48      	it	mi
 8008fea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008fee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ff2:	0d1b      	lsrs	r3, r3, #20
 8008ff4:	051b      	lsls	r3, r3, #20
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1b9      	bne.n	8008f6e <_strtod_l+0x76>
 8008ffa:	f7fe fb05 	bl	8007608 <__errno>
 8008ffe:	2322      	movs	r3, #34	; 0x22
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	e7b4      	b.n	8008f6e <_strtod_l+0x76>
 8009004:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009008:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800900c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009010:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009014:	e7e7      	b.n	8008fe6 <_strtod_l+0xee>
 8009016:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009190 <_strtod_l+0x298>
 800901a:	e7e4      	b.n	8008fe6 <_strtod_l+0xee>
 800901c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009020:	f04f 38ff 	mov.w	r8, #4294967295
 8009024:	e7df      	b.n	8008fe6 <_strtod_l+0xee>
 8009026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	9215      	str	r2, [sp, #84]	; 0x54
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	2b30      	cmp	r3, #48	; 0x30
 8009030:	d0f9      	beq.n	8009026 <_strtod_l+0x12e>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d09b      	beq.n	8008f6e <_strtod_l+0x76>
 8009036:	2301      	movs	r3, #1
 8009038:	f04f 0a00 	mov.w	sl, #0
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009040:	930b      	str	r3, [sp, #44]	; 0x2c
 8009042:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009046:	46d3      	mov	fp, sl
 8009048:	220a      	movs	r2, #10
 800904a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800904c:	7806      	ldrb	r6, [r0, #0]
 800904e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009052:	b2d9      	uxtb	r1, r3
 8009054:	2909      	cmp	r1, #9
 8009056:	d926      	bls.n	80090a6 <_strtod_l+0x1ae>
 8009058:	494c      	ldr	r1, [pc, #304]	; (800918c <_strtod_l+0x294>)
 800905a:	2201      	movs	r2, #1
 800905c:	f001 f9c0 	bl	800a3e0 <strncmp>
 8009060:	2800      	cmp	r0, #0
 8009062:	d030      	beq.n	80090c6 <_strtod_l+0x1ce>
 8009064:	2000      	movs	r0, #0
 8009066:	4632      	mov	r2, r6
 8009068:	9005      	str	r0, [sp, #20]
 800906a:	465e      	mov	r6, fp
 800906c:	4603      	mov	r3, r0
 800906e:	2a65      	cmp	r2, #101	; 0x65
 8009070:	d001      	beq.n	8009076 <_strtod_l+0x17e>
 8009072:	2a45      	cmp	r2, #69	; 0x45
 8009074:	d113      	bne.n	800909e <_strtod_l+0x1a6>
 8009076:	b91e      	cbnz	r6, 8009080 <_strtod_l+0x188>
 8009078:	9a04      	ldr	r2, [sp, #16]
 800907a:	4302      	orrs	r2, r0
 800907c:	d094      	beq.n	8008fa8 <_strtod_l+0xb0>
 800907e:	2600      	movs	r6, #0
 8009080:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009082:	1c6a      	adds	r2, r5, #1
 8009084:	9215      	str	r2, [sp, #84]	; 0x54
 8009086:	786a      	ldrb	r2, [r5, #1]
 8009088:	2a2b      	cmp	r2, #43	; 0x2b
 800908a:	d074      	beq.n	8009176 <_strtod_l+0x27e>
 800908c:	2a2d      	cmp	r2, #45	; 0x2d
 800908e:	d078      	beq.n	8009182 <_strtod_l+0x28a>
 8009090:	f04f 0c00 	mov.w	ip, #0
 8009094:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009098:	2909      	cmp	r1, #9
 800909a:	d97f      	bls.n	800919c <_strtod_l+0x2a4>
 800909c:	9515      	str	r5, [sp, #84]	; 0x54
 800909e:	2700      	movs	r7, #0
 80090a0:	e09e      	b.n	80091e0 <_strtod_l+0x2e8>
 80090a2:	2300      	movs	r3, #0
 80090a4:	e7c8      	b.n	8009038 <_strtod_l+0x140>
 80090a6:	f1bb 0f08 	cmp.w	fp, #8
 80090aa:	bfd8      	it	le
 80090ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80090ae:	f100 0001 	add.w	r0, r0, #1
 80090b2:	bfda      	itte	le
 80090b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80090b8:	9309      	strle	r3, [sp, #36]	; 0x24
 80090ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80090be:	f10b 0b01 	add.w	fp, fp, #1
 80090c2:	9015      	str	r0, [sp, #84]	; 0x54
 80090c4:	e7c1      	b.n	800904a <_strtod_l+0x152>
 80090c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	9215      	str	r2, [sp, #84]	; 0x54
 80090cc:	785a      	ldrb	r2, [r3, #1]
 80090ce:	f1bb 0f00 	cmp.w	fp, #0
 80090d2:	d037      	beq.n	8009144 <_strtod_l+0x24c>
 80090d4:	9005      	str	r0, [sp, #20]
 80090d6:	465e      	mov	r6, fp
 80090d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d912      	bls.n	8009106 <_strtod_l+0x20e>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e7c4      	b.n	800906e <_strtod_l+0x176>
 80090e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	9215      	str	r2, [sp, #84]	; 0x54
 80090ea:	785a      	ldrb	r2, [r3, #1]
 80090ec:	3001      	adds	r0, #1
 80090ee:	2a30      	cmp	r2, #48	; 0x30
 80090f0:	d0f8      	beq.n	80090e4 <_strtod_l+0x1ec>
 80090f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80090f6:	2b08      	cmp	r3, #8
 80090f8:	f200 84c1 	bhi.w	8009a7e <_strtod_l+0xb86>
 80090fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090fe:	9005      	str	r0, [sp, #20]
 8009100:	2000      	movs	r0, #0
 8009102:	930b      	str	r3, [sp, #44]	; 0x2c
 8009104:	4606      	mov	r6, r0
 8009106:	3a30      	subs	r2, #48	; 0x30
 8009108:	f100 0301 	add.w	r3, r0, #1
 800910c:	d014      	beq.n	8009138 <_strtod_l+0x240>
 800910e:	9905      	ldr	r1, [sp, #20]
 8009110:	4419      	add	r1, r3
 8009112:	9105      	str	r1, [sp, #20]
 8009114:	4633      	mov	r3, r6
 8009116:	eb00 0c06 	add.w	ip, r0, r6
 800911a:	210a      	movs	r1, #10
 800911c:	4563      	cmp	r3, ip
 800911e:	d113      	bne.n	8009148 <_strtod_l+0x250>
 8009120:	1833      	adds	r3, r6, r0
 8009122:	2b08      	cmp	r3, #8
 8009124:	f106 0601 	add.w	r6, r6, #1
 8009128:	4406      	add	r6, r0
 800912a:	dc1a      	bgt.n	8009162 <_strtod_l+0x26a>
 800912c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800912e:	230a      	movs	r3, #10
 8009130:	fb03 2301 	mla	r3, r3, r1, r2
 8009134:	9309      	str	r3, [sp, #36]	; 0x24
 8009136:	2300      	movs	r3, #0
 8009138:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800913a:	1c51      	adds	r1, r2, #1
 800913c:	9115      	str	r1, [sp, #84]	; 0x54
 800913e:	7852      	ldrb	r2, [r2, #1]
 8009140:	4618      	mov	r0, r3
 8009142:	e7c9      	b.n	80090d8 <_strtod_l+0x1e0>
 8009144:	4658      	mov	r0, fp
 8009146:	e7d2      	b.n	80090ee <_strtod_l+0x1f6>
 8009148:	2b08      	cmp	r3, #8
 800914a:	f103 0301 	add.w	r3, r3, #1
 800914e:	dc03      	bgt.n	8009158 <_strtod_l+0x260>
 8009150:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009152:	434f      	muls	r7, r1
 8009154:	9709      	str	r7, [sp, #36]	; 0x24
 8009156:	e7e1      	b.n	800911c <_strtod_l+0x224>
 8009158:	2b10      	cmp	r3, #16
 800915a:	bfd8      	it	le
 800915c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009160:	e7dc      	b.n	800911c <_strtod_l+0x224>
 8009162:	2e10      	cmp	r6, #16
 8009164:	bfdc      	itt	le
 8009166:	230a      	movle	r3, #10
 8009168:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800916c:	e7e3      	b.n	8009136 <_strtod_l+0x23e>
 800916e:	2300      	movs	r3, #0
 8009170:	9305      	str	r3, [sp, #20]
 8009172:	2301      	movs	r3, #1
 8009174:	e780      	b.n	8009078 <_strtod_l+0x180>
 8009176:	f04f 0c00 	mov.w	ip, #0
 800917a:	1caa      	adds	r2, r5, #2
 800917c:	9215      	str	r2, [sp, #84]	; 0x54
 800917e:	78aa      	ldrb	r2, [r5, #2]
 8009180:	e788      	b.n	8009094 <_strtod_l+0x19c>
 8009182:	f04f 0c01 	mov.w	ip, #1
 8009186:	e7f8      	b.n	800917a <_strtod_l+0x282>
 8009188:	0800d2b0 	.word	0x0800d2b0
 800918c:	0800d2ac 	.word	0x0800d2ac
 8009190:	7ff00000 	.word	0x7ff00000
 8009194:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009196:	1c51      	adds	r1, r2, #1
 8009198:	9115      	str	r1, [sp, #84]	; 0x54
 800919a:	7852      	ldrb	r2, [r2, #1]
 800919c:	2a30      	cmp	r2, #48	; 0x30
 800919e:	d0f9      	beq.n	8009194 <_strtod_l+0x29c>
 80091a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80091a4:	2908      	cmp	r1, #8
 80091a6:	f63f af7a 	bhi.w	800909e <_strtod_l+0x1a6>
 80091aa:	3a30      	subs	r2, #48	; 0x30
 80091ac:	9208      	str	r2, [sp, #32]
 80091ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091b0:	920c      	str	r2, [sp, #48]	; 0x30
 80091b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091b4:	1c57      	adds	r7, r2, #1
 80091b6:	9715      	str	r7, [sp, #84]	; 0x54
 80091b8:	7852      	ldrb	r2, [r2, #1]
 80091ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80091be:	f1be 0f09 	cmp.w	lr, #9
 80091c2:	d938      	bls.n	8009236 <_strtod_l+0x33e>
 80091c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091c6:	1a7f      	subs	r7, r7, r1
 80091c8:	2f08      	cmp	r7, #8
 80091ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80091ce:	dc03      	bgt.n	80091d8 <_strtod_l+0x2e0>
 80091d0:	9908      	ldr	r1, [sp, #32]
 80091d2:	428f      	cmp	r7, r1
 80091d4:	bfa8      	it	ge
 80091d6:	460f      	movge	r7, r1
 80091d8:	f1bc 0f00 	cmp.w	ip, #0
 80091dc:	d000      	beq.n	80091e0 <_strtod_l+0x2e8>
 80091de:	427f      	negs	r7, r7
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	d14f      	bne.n	8009284 <_strtod_l+0x38c>
 80091e4:	9904      	ldr	r1, [sp, #16]
 80091e6:	4301      	orrs	r1, r0
 80091e8:	f47f aec1 	bne.w	8008f6e <_strtod_l+0x76>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f47f aedb 	bne.w	8008fa8 <_strtod_l+0xb0>
 80091f2:	2a69      	cmp	r2, #105	; 0x69
 80091f4:	d029      	beq.n	800924a <_strtod_l+0x352>
 80091f6:	dc26      	bgt.n	8009246 <_strtod_l+0x34e>
 80091f8:	2a49      	cmp	r2, #73	; 0x49
 80091fa:	d026      	beq.n	800924a <_strtod_l+0x352>
 80091fc:	2a4e      	cmp	r2, #78	; 0x4e
 80091fe:	f47f aed3 	bne.w	8008fa8 <_strtod_l+0xb0>
 8009202:	499b      	ldr	r1, [pc, #620]	; (8009470 <_strtod_l+0x578>)
 8009204:	a815      	add	r0, sp, #84	; 0x54
 8009206:	f001 fc23 	bl	800aa50 <__match>
 800920a:	2800      	cmp	r0, #0
 800920c:	f43f aecc 	beq.w	8008fa8 <_strtod_l+0xb0>
 8009210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b28      	cmp	r3, #40	; 0x28
 8009216:	d12f      	bne.n	8009278 <_strtod_l+0x380>
 8009218:	4996      	ldr	r1, [pc, #600]	; (8009474 <_strtod_l+0x57c>)
 800921a:	aa18      	add	r2, sp, #96	; 0x60
 800921c:	a815      	add	r0, sp, #84	; 0x54
 800921e:	f001 fc2b 	bl	800aa78 <__hexnan>
 8009222:	2805      	cmp	r0, #5
 8009224:	d128      	bne.n	8009278 <_strtod_l+0x380>
 8009226:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009228:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800922c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009230:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009234:	e69b      	b.n	8008f6e <_strtod_l+0x76>
 8009236:	9f08      	ldr	r7, [sp, #32]
 8009238:	210a      	movs	r1, #10
 800923a:	fb01 2107 	mla	r1, r1, r7, r2
 800923e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009242:	9208      	str	r2, [sp, #32]
 8009244:	e7b5      	b.n	80091b2 <_strtod_l+0x2ba>
 8009246:	2a6e      	cmp	r2, #110	; 0x6e
 8009248:	e7d9      	b.n	80091fe <_strtod_l+0x306>
 800924a:	498b      	ldr	r1, [pc, #556]	; (8009478 <_strtod_l+0x580>)
 800924c:	a815      	add	r0, sp, #84	; 0x54
 800924e:	f001 fbff 	bl	800aa50 <__match>
 8009252:	2800      	cmp	r0, #0
 8009254:	f43f aea8 	beq.w	8008fa8 <_strtod_l+0xb0>
 8009258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925a:	4988      	ldr	r1, [pc, #544]	; (800947c <_strtod_l+0x584>)
 800925c:	3b01      	subs	r3, #1
 800925e:	a815      	add	r0, sp, #84	; 0x54
 8009260:	9315      	str	r3, [sp, #84]	; 0x54
 8009262:	f001 fbf5 	bl	800aa50 <__match>
 8009266:	b910      	cbnz	r0, 800926e <_strtod_l+0x376>
 8009268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800926a:	3301      	adds	r3, #1
 800926c:	9315      	str	r3, [sp, #84]	; 0x54
 800926e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800948c <_strtod_l+0x594>
 8009272:	f04f 0800 	mov.w	r8, #0
 8009276:	e67a      	b.n	8008f6e <_strtod_l+0x76>
 8009278:	4881      	ldr	r0, [pc, #516]	; (8009480 <_strtod_l+0x588>)
 800927a:	f001 f905 	bl	800a488 <nan>
 800927e:	ec59 8b10 	vmov	r8, r9, d0
 8009282:	e674      	b.n	8008f6e <_strtod_l+0x76>
 8009284:	9b05      	ldr	r3, [sp, #20]
 8009286:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009288:	1afb      	subs	r3, r7, r3
 800928a:	f1bb 0f00 	cmp.w	fp, #0
 800928e:	bf08      	it	eq
 8009290:	46b3      	moveq	fp, r6
 8009292:	2e10      	cmp	r6, #16
 8009294:	9308      	str	r3, [sp, #32]
 8009296:	4635      	mov	r5, r6
 8009298:	bfa8      	it	ge
 800929a:	2510      	movge	r5, #16
 800929c:	f7f7 f95a 	bl	8000554 <__aeabi_ui2d>
 80092a0:	2e09      	cmp	r6, #9
 80092a2:	4680      	mov	r8, r0
 80092a4:	4689      	mov	r9, r1
 80092a6:	dd13      	ble.n	80092d0 <_strtod_l+0x3d8>
 80092a8:	4b76      	ldr	r3, [pc, #472]	; (8009484 <_strtod_l+0x58c>)
 80092aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80092ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092b2:	f7f7 f9c9 	bl	8000648 <__aeabi_dmul>
 80092b6:	4680      	mov	r8, r0
 80092b8:	4650      	mov	r0, sl
 80092ba:	4689      	mov	r9, r1
 80092bc:	f7f7 f94a 	bl	8000554 <__aeabi_ui2d>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4640      	mov	r0, r8
 80092c6:	4649      	mov	r1, r9
 80092c8:	f7f7 f808 	bl	80002dc <__adddf3>
 80092cc:	4680      	mov	r8, r0
 80092ce:	4689      	mov	r9, r1
 80092d0:	2e0f      	cmp	r6, #15
 80092d2:	dc38      	bgt.n	8009346 <_strtod_l+0x44e>
 80092d4:	9b08      	ldr	r3, [sp, #32]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f43f ae49 	beq.w	8008f6e <_strtod_l+0x76>
 80092dc:	dd24      	ble.n	8009328 <_strtod_l+0x430>
 80092de:	2b16      	cmp	r3, #22
 80092e0:	dc0b      	bgt.n	80092fa <_strtod_l+0x402>
 80092e2:	4968      	ldr	r1, [pc, #416]	; (8009484 <_strtod_l+0x58c>)
 80092e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	f7f7 f9aa 	bl	8000648 <__aeabi_dmul>
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	e639      	b.n	8008f6e <_strtod_l+0x76>
 80092fa:	9a08      	ldr	r2, [sp, #32]
 80092fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009300:	4293      	cmp	r3, r2
 8009302:	db20      	blt.n	8009346 <_strtod_l+0x44e>
 8009304:	4c5f      	ldr	r4, [pc, #380]	; (8009484 <_strtod_l+0x58c>)
 8009306:	f1c6 060f 	rsb	r6, r6, #15
 800930a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800930e:	4642      	mov	r2, r8
 8009310:	464b      	mov	r3, r9
 8009312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009316:	f7f7 f997 	bl	8000648 <__aeabi_dmul>
 800931a:	9b08      	ldr	r3, [sp, #32]
 800931c:	1b9e      	subs	r6, r3, r6
 800931e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009322:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009326:	e7e3      	b.n	80092f0 <_strtod_l+0x3f8>
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	3316      	adds	r3, #22
 800932c:	db0b      	blt.n	8009346 <_strtod_l+0x44e>
 800932e:	9b05      	ldr	r3, [sp, #20]
 8009330:	1bdf      	subs	r7, r3, r7
 8009332:	4b54      	ldr	r3, [pc, #336]	; (8009484 <_strtod_l+0x58c>)
 8009334:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933c:	4640      	mov	r0, r8
 800933e:	4649      	mov	r1, r9
 8009340:	f7f7 faac 	bl	800089c <__aeabi_ddiv>
 8009344:	e7d6      	b.n	80092f4 <_strtod_l+0x3fc>
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	1b75      	subs	r5, r6, r5
 800934a:	441d      	add	r5, r3
 800934c:	2d00      	cmp	r5, #0
 800934e:	dd70      	ble.n	8009432 <_strtod_l+0x53a>
 8009350:	f015 030f 	ands.w	r3, r5, #15
 8009354:	d00a      	beq.n	800936c <_strtod_l+0x474>
 8009356:	494b      	ldr	r1, [pc, #300]	; (8009484 <_strtod_l+0x58c>)
 8009358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009364:	f7f7 f970 	bl	8000648 <__aeabi_dmul>
 8009368:	4680      	mov	r8, r0
 800936a:	4689      	mov	r9, r1
 800936c:	f035 050f 	bics.w	r5, r5, #15
 8009370:	d04d      	beq.n	800940e <_strtod_l+0x516>
 8009372:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009376:	dd22      	ble.n	80093be <_strtod_l+0x4c6>
 8009378:	2500      	movs	r5, #0
 800937a:	46ab      	mov	fp, r5
 800937c:	9509      	str	r5, [sp, #36]	; 0x24
 800937e:	9505      	str	r5, [sp, #20]
 8009380:	2322      	movs	r3, #34	; 0x22
 8009382:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800948c <_strtod_l+0x594>
 8009386:	6023      	str	r3, [r4, #0]
 8009388:	f04f 0800 	mov.w	r8, #0
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	f43f aded 	beq.w	8008f6e <_strtod_l+0x76>
 8009394:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff f924 	bl	80085e4 <_Bfree>
 800939c:	9905      	ldr	r1, [sp, #20]
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff f920 	bl	80085e4 <_Bfree>
 80093a4:	4659      	mov	r1, fp
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7ff f91c 	bl	80085e4 <_Bfree>
 80093ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff f918 	bl	80085e4 <_Bfree>
 80093b4:	4629      	mov	r1, r5
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff f914 	bl	80085e4 <_Bfree>
 80093bc:	e5d7      	b.n	8008f6e <_strtod_l+0x76>
 80093be:	4b32      	ldr	r3, [pc, #200]	; (8009488 <_strtod_l+0x590>)
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	2300      	movs	r3, #0
 80093c4:	112d      	asrs	r5, r5, #4
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	469a      	mov	sl, r3
 80093cc:	2d01      	cmp	r5, #1
 80093ce:	dc21      	bgt.n	8009414 <_strtod_l+0x51c>
 80093d0:	b10b      	cbz	r3, 80093d6 <_strtod_l+0x4de>
 80093d2:	4680      	mov	r8, r0
 80093d4:	4689      	mov	r9, r1
 80093d6:	492c      	ldr	r1, [pc, #176]	; (8009488 <_strtod_l+0x590>)
 80093d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80093dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e8:	f7f7 f92e 	bl	8000648 <__aeabi_dmul>
 80093ec:	4b27      	ldr	r3, [pc, #156]	; (800948c <_strtod_l+0x594>)
 80093ee:	460a      	mov	r2, r1
 80093f0:	400b      	ands	r3, r1
 80093f2:	4927      	ldr	r1, [pc, #156]	; (8009490 <_strtod_l+0x598>)
 80093f4:	428b      	cmp	r3, r1
 80093f6:	4680      	mov	r8, r0
 80093f8:	d8be      	bhi.n	8009378 <_strtod_l+0x480>
 80093fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80093fe:	428b      	cmp	r3, r1
 8009400:	bf86      	itte	hi
 8009402:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009494 <_strtod_l+0x59c>
 8009406:	f04f 38ff 	movhi.w	r8, #4294967295
 800940a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800940e:	2300      	movs	r3, #0
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	e07b      	b.n	800950c <_strtod_l+0x614>
 8009414:	07ea      	lsls	r2, r5, #31
 8009416:	d505      	bpl.n	8009424 <_strtod_l+0x52c>
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f913 	bl	8000648 <__aeabi_dmul>
 8009422:	2301      	movs	r3, #1
 8009424:	9a04      	ldr	r2, [sp, #16]
 8009426:	3208      	adds	r2, #8
 8009428:	f10a 0a01 	add.w	sl, sl, #1
 800942c:	106d      	asrs	r5, r5, #1
 800942e:	9204      	str	r2, [sp, #16]
 8009430:	e7cc      	b.n	80093cc <_strtod_l+0x4d4>
 8009432:	d0ec      	beq.n	800940e <_strtod_l+0x516>
 8009434:	426d      	negs	r5, r5
 8009436:	f015 020f 	ands.w	r2, r5, #15
 800943a:	d00a      	beq.n	8009452 <_strtod_l+0x55a>
 800943c:	4b11      	ldr	r3, [pc, #68]	; (8009484 <_strtod_l+0x58c>)
 800943e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f7 fa27 	bl	800089c <__aeabi_ddiv>
 800944e:	4680      	mov	r8, r0
 8009450:	4689      	mov	r9, r1
 8009452:	112d      	asrs	r5, r5, #4
 8009454:	d0db      	beq.n	800940e <_strtod_l+0x516>
 8009456:	2d1f      	cmp	r5, #31
 8009458:	dd1e      	ble.n	8009498 <_strtod_l+0x5a0>
 800945a:	2500      	movs	r5, #0
 800945c:	46ab      	mov	fp, r5
 800945e:	9509      	str	r5, [sp, #36]	; 0x24
 8009460:	9505      	str	r5, [sp, #20]
 8009462:	2322      	movs	r3, #34	; 0x22
 8009464:	f04f 0800 	mov.w	r8, #0
 8009468:	f04f 0900 	mov.w	r9, #0
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	e78d      	b.n	800938c <_strtod_l+0x494>
 8009470:	0800d09d 	.word	0x0800d09d
 8009474:	0800d2c4 	.word	0x0800d2c4
 8009478:	0800d095 	.word	0x0800d095
 800947c:	0800d0cc 	.word	0x0800d0cc
 8009480:	0800d455 	.word	0x0800d455
 8009484:	0800d1d8 	.word	0x0800d1d8
 8009488:	0800d1b0 	.word	0x0800d1b0
 800948c:	7ff00000 	.word	0x7ff00000
 8009490:	7ca00000 	.word	0x7ca00000
 8009494:	7fefffff 	.word	0x7fefffff
 8009498:	f015 0310 	ands.w	r3, r5, #16
 800949c:	bf18      	it	ne
 800949e:	236a      	movne	r3, #106	; 0x6a
 80094a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009844 <_strtod_l+0x94c>
 80094a4:	9304      	str	r3, [sp, #16]
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	2300      	movs	r3, #0
 80094ac:	07ea      	lsls	r2, r5, #31
 80094ae:	d504      	bpl.n	80094ba <_strtod_l+0x5c2>
 80094b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80094b4:	f7f7 f8c8 	bl	8000648 <__aeabi_dmul>
 80094b8:	2301      	movs	r3, #1
 80094ba:	106d      	asrs	r5, r5, #1
 80094bc:	f10a 0a08 	add.w	sl, sl, #8
 80094c0:	d1f4      	bne.n	80094ac <_strtod_l+0x5b4>
 80094c2:	b10b      	cbz	r3, 80094c8 <_strtod_l+0x5d0>
 80094c4:	4680      	mov	r8, r0
 80094c6:	4689      	mov	r9, r1
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	b1bb      	cbz	r3, 80094fc <_strtod_l+0x604>
 80094cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80094d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	4649      	mov	r1, r9
 80094d8:	dd10      	ble.n	80094fc <_strtod_l+0x604>
 80094da:	2b1f      	cmp	r3, #31
 80094dc:	f340 811e 	ble.w	800971c <_strtod_l+0x824>
 80094e0:	2b34      	cmp	r3, #52	; 0x34
 80094e2:	bfde      	ittt	le
 80094e4:	f04f 33ff 	movle.w	r3, #4294967295
 80094e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80094ec:	4093      	lslle	r3, r2
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	bfcc      	ite	gt
 80094f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80094f8:	ea03 0901 	andle.w	r9, r3, r1
 80094fc:	2200      	movs	r2, #0
 80094fe:	2300      	movs	r3, #0
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	f7f7 fb08 	bl	8000b18 <__aeabi_dcmpeq>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1a6      	bne.n	800945a <_strtod_l+0x562>
 800950c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009512:	4633      	mov	r3, r6
 8009514:	465a      	mov	r2, fp
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff f8cc 	bl	80086b4 <__s2b>
 800951c:	9009      	str	r0, [sp, #36]	; 0x24
 800951e:	2800      	cmp	r0, #0
 8009520:	f43f af2a 	beq.w	8009378 <_strtod_l+0x480>
 8009524:	9a08      	ldr	r2, [sp, #32]
 8009526:	9b05      	ldr	r3, [sp, #20]
 8009528:	2a00      	cmp	r2, #0
 800952a:	eba3 0307 	sub.w	r3, r3, r7
 800952e:	bfa8      	it	ge
 8009530:	2300      	movge	r3, #0
 8009532:	930c      	str	r3, [sp, #48]	; 0x30
 8009534:	2500      	movs	r5, #0
 8009536:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800953a:	9312      	str	r3, [sp, #72]	; 0x48
 800953c:	46ab      	mov	fp, r5
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	4620      	mov	r0, r4
 8009542:	6859      	ldr	r1, [r3, #4]
 8009544:	f7ff f80e 	bl	8008564 <_Balloc>
 8009548:	9005      	str	r0, [sp, #20]
 800954a:	2800      	cmp	r0, #0
 800954c:	f43f af18 	beq.w	8009380 <_strtod_l+0x488>
 8009550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009552:	691a      	ldr	r2, [r3, #16]
 8009554:	3202      	adds	r2, #2
 8009556:	f103 010c 	add.w	r1, r3, #12
 800955a:	0092      	lsls	r2, r2, #2
 800955c:	300c      	adds	r0, #12
 800955e:	f000 ff83 	bl	800a468 <memcpy>
 8009562:	ec49 8b10 	vmov	d0, r8, r9
 8009566:	aa18      	add	r2, sp, #96	; 0x60
 8009568:	a917      	add	r1, sp, #92	; 0x5c
 800956a:	4620      	mov	r0, r4
 800956c:	f7ff fbd6 	bl	8008d1c <__d2b>
 8009570:	ec49 8b18 	vmov	d8, r8, r9
 8009574:	9016      	str	r0, [sp, #88]	; 0x58
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f af02 	beq.w	8009380 <_strtod_l+0x488>
 800957c:	2101      	movs	r1, #1
 800957e:	4620      	mov	r0, r4
 8009580:	f7ff f930 	bl	80087e4 <__i2b>
 8009584:	4683      	mov	fp, r0
 8009586:	2800      	cmp	r0, #0
 8009588:	f43f aefa 	beq.w	8009380 <_strtod_l+0x488>
 800958c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800958e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009590:	2e00      	cmp	r6, #0
 8009592:	bfab      	itete	ge
 8009594:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009596:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009598:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800959a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800959e:	bfac      	ite	ge
 80095a0:	eb06 0a03 	addge.w	sl, r6, r3
 80095a4:	1b9f      	sublt	r7, r3, r6
 80095a6:	9b04      	ldr	r3, [sp, #16]
 80095a8:	1af6      	subs	r6, r6, r3
 80095aa:	4416      	add	r6, r2
 80095ac:	4ba0      	ldr	r3, [pc, #640]	; (8009830 <_strtod_l+0x938>)
 80095ae:	3e01      	subs	r6, #1
 80095b0:	429e      	cmp	r6, r3
 80095b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80095b6:	f280 80c4 	bge.w	8009742 <_strtod_l+0x84a>
 80095ba:	1b9b      	subs	r3, r3, r6
 80095bc:	2b1f      	cmp	r3, #31
 80095be:	eba2 0203 	sub.w	r2, r2, r3
 80095c2:	f04f 0101 	mov.w	r1, #1
 80095c6:	f300 80b0 	bgt.w	800972a <_strtod_l+0x832>
 80095ca:	fa01 f303 	lsl.w	r3, r1, r3
 80095ce:	930e      	str	r3, [sp, #56]	; 0x38
 80095d0:	2300      	movs	r3, #0
 80095d2:	930d      	str	r3, [sp, #52]	; 0x34
 80095d4:	eb0a 0602 	add.w	r6, sl, r2
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	45b2      	cmp	sl, r6
 80095dc:	4417      	add	r7, r2
 80095de:	441f      	add	r7, r3
 80095e0:	4653      	mov	r3, sl
 80095e2:	bfa8      	it	ge
 80095e4:	4633      	movge	r3, r6
 80095e6:	42bb      	cmp	r3, r7
 80095e8:	bfa8      	it	ge
 80095ea:	463b      	movge	r3, r7
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bfc2      	ittt	gt
 80095f0:	1af6      	subgt	r6, r6, r3
 80095f2:	1aff      	subgt	r7, r7, r3
 80095f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80095f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	dd17      	ble.n	800962e <_strtod_l+0x736>
 80095fe:	4659      	mov	r1, fp
 8009600:	461a      	mov	r2, r3
 8009602:	4620      	mov	r0, r4
 8009604:	f7ff f9ae 	bl	8008964 <__pow5mult>
 8009608:	4683      	mov	fp, r0
 800960a:	2800      	cmp	r0, #0
 800960c:	f43f aeb8 	beq.w	8009380 <_strtod_l+0x488>
 8009610:	4601      	mov	r1, r0
 8009612:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff f8fb 	bl	8008810 <__multiply>
 800961a:	900b      	str	r0, [sp, #44]	; 0x2c
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f aeaf 	beq.w	8009380 <_strtod_l+0x488>
 8009622:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009624:	4620      	mov	r0, r4
 8009626:	f7fe ffdd 	bl	80085e4 <_Bfree>
 800962a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800962c:	9316      	str	r3, [sp, #88]	; 0x58
 800962e:	2e00      	cmp	r6, #0
 8009630:	f300 808c 	bgt.w	800974c <_strtod_l+0x854>
 8009634:	9b08      	ldr	r3, [sp, #32]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd08      	ble.n	800964c <_strtod_l+0x754>
 800963a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800963c:	9905      	ldr	r1, [sp, #20]
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff f990 	bl	8008964 <__pow5mult>
 8009644:	9005      	str	r0, [sp, #20]
 8009646:	2800      	cmp	r0, #0
 8009648:	f43f ae9a 	beq.w	8009380 <_strtod_l+0x488>
 800964c:	2f00      	cmp	r7, #0
 800964e:	dd08      	ble.n	8009662 <_strtod_l+0x76a>
 8009650:	9905      	ldr	r1, [sp, #20]
 8009652:	463a      	mov	r2, r7
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff f9df 	bl	8008a18 <__lshift>
 800965a:	9005      	str	r0, [sp, #20]
 800965c:	2800      	cmp	r0, #0
 800965e:	f43f ae8f 	beq.w	8009380 <_strtod_l+0x488>
 8009662:	f1ba 0f00 	cmp.w	sl, #0
 8009666:	dd08      	ble.n	800967a <_strtod_l+0x782>
 8009668:	4659      	mov	r1, fp
 800966a:	4652      	mov	r2, sl
 800966c:	4620      	mov	r0, r4
 800966e:	f7ff f9d3 	bl	8008a18 <__lshift>
 8009672:	4683      	mov	fp, r0
 8009674:	2800      	cmp	r0, #0
 8009676:	f43f ae83 	beq.w	8009380 <_strtod_l+0x488>
 800967a:	9a05      	ldr	r2, [sp, #20]
 800967c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff fa52 	bl	8008b28 <__mdiff>
 8009684:	4605      	mov	r5, r0
 8009686:	2800      	cmp	r0, #0
 8009688:	f43f ae7a 	beq.w	8009380 <_strtod_l+0x488>
 800968c:	68c3      	ldr	r3, [r0, #12]
 800968e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009690:	2300      	movs	r3, #0
 8009692:	60c3      	str	r3, [r0, #12]
 8009694:	4659      	mov	r1, fp
 8009696:	f7ff fa2b 	bl	8008af0 <__mcmp>
 800969a:	2800      	cmp	r0, #0
 800969c:	da60      	bge.n	8009760 <_strtod_l+0x868>
 800969e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a0:	ea53 0308 	orrs.w	r3, r3, r8
 80096a4:	f040 8084 	bne.w	80097b0 <_strtod_l+0x8b8>
 80096a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d17f      	bne.n	80097b0 <_strtod_l+0x8b8>
 80096b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096b4:	0d1b      	lsrs	r3, r3, #20
 80096b6:	051b      	lsls	r3, r3, #20
 80096b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80096bc:	d978      	bls.n	80097b0 <_strtod_l+0x8b8>
 80096be:	696b      	ldr	r3, [r5, #20]
 80096c0:	b913      	cbnz	r3, 80096c8 <_strtod_l+0x7d0>
 80096c2:	692b      	ldr	r3, [r5, #16]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	dd73      	ble.n	80097b0 <_strtod_l+0x8b8>
 80096c8:	4629      	mov	r1, r5
 80096ca:	2201      	movs	r2, #1
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7ff f9a3 	bl	8008a18 <__lshift>
 80096d2:	4659      	mov	r1, fp
 80096d4:	4605      	mov	r5, r0
 80096d6:	f7ff fa0b 	bl	8008af0 <__mcmp>
 80096da:	2800      	cmp	r0, #0
 80096dc:	dd68      	ble.n	80097b0 <_strtod_l+0x8b8>
 80096de:	9904      	ldr	r1, [sp, #16]
 80096e0:	4a54      	ldr	r2, [pc, #336]	; (8009834 <_strtod_l+0x93c>)
 80096e2:	464b      	mov	r3, r9
 80096e4:	2900      	cmp	r1, #0
 80096e6:	f000 8084 	beq.w	80097f2 <_strtod_l+0x8fa>
 80096ea:	ea02 0109 	and.w	r1, r2, r9
 80096ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096f2:	dc7e      	bgt.n	80097f2 <_strtod_l+0x8fa>
 80096f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096f8:	f77f aeb3 	ble.w	8009462 <_strtod_l+0x56a>
 80096fc:	4b4e      	ldr	r3, [pc, #312]	; (8009838 <_strtod_l+0x940>)
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	2200      	movs	r2, #0
 8009704:	f7f6 ffa0 	bl	8000648 <__aeabi_dmul>
 8009708:	4b4a      	ldr	r3, [pc, #296]	; (8009834 <_strtod_l+0x93c>)
 800970a:	400b      	ands	r3, r1
 800970c:	4680      	mov	r8, r0
 800970e:	4689      	mov	r9, r1
 8009710:	2b00      	cmp	r3, #0
 8009712:	f47f ae3f 	bne.w	8009394 <_strtod_l+0x49c>
 8009716:	2322      	movs	r3, #34	; 0x22
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	e63b      	b.n	8009394 <_strtod_l+0x49c>
 800971c:	f04f 32ff 	mov.w	r2, #4294967295
 8009720:	fa02 f303 	lsl.w	r3, r2, r3
 8009724:	ea03 0808 	and.w	r8, r3, r8
 8009728:	e6e8      	b.n	80094fc <_strtod_l+0x604>
 800972a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800972e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009732:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009736:	36e2      	adds	r6, #226	; 0xe2
 8009738:	fa01 f306 	lsl.w	r3, r1, r6
 800973c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009740:	e748      	b.n	80095d4 <_strtod_l+0x6dc>
 8009742:	2100      	movs	r1, #0
 8009744:	2301      	movs	r3, #1
 8009746:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800974a:	e743      	b.n	80095d4 <_strtod_l+0x6dc>
 800974c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800974e:	4632      	mov	r2, r6
 8009750:	4620      	mov	r0, r4
 8009752:	f7ff f961 	bl	8008a18 <__lshift>
 8009756:	9016      	str	r0, [sp, #88]	; 0x58
 8009758:	2800      	cmp	r0, #0
 800975a:	f47f af6b 	bne.w	8009634 <_strtod_l+0x73c>
 800975e:	e60f      	b.n	8009380 <_strtod_l+0x488>
 8009760:	46ca      	mov	sl, r9
 8009762:	d171      	bne.n	8009848 <_strtod_l+0x950>
 8009764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009766:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800976a:	b352      	cbz	r2, 80097c2 <_strtod_l+0x8ca>
 800976c:	4a33      	ldr	r2, [pc, #204]	; (800983c <_strtod_l+0x944>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d12a      	bne.n	80097c8 <_strtod_l+0x8d0>
 8009772:	9b04      	ldr	r3, [sp, #16]
 8009774:	4641      	mov	r1, r8
 8009776:	b1fb      	cbz	r3, 80097b8 <_strtod_l+0x8c0>
 8009778:	4b2e      	ldr	r3, [pc, #184]	; (8009834 <_strtod_l+0x93c>)
 800977a:	ea09 0303 	and.w	r3, r9, r3
 800977e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009782:	f04f 32ff 	mov.w	r2, #4294967295
 8009786:	d81a      	bhi.n	80097be <_strtod_l+0x8c6>
 8009788:	0d1b      	lsrs	r3, r3, #20
 800978a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	4299      	cmp	r1, r3
 8009794:	d118      	bne.n	80097c8 <_strtod_l+0x8d0>
 8009796:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <_strtod_l+0x948>)
 8009798:	459a      	cmp	sl, r3
 800979a:	d102      	bne.n	80097a2 <_strtod_l+0x8aa>
 800979c:	3101      	adds	r1, #1
 800979e:	f43f adef 	beq.w	8009380 <_strtod_l+0x488>
 80097a2:	4b24      	ldr	r3, [pc, #144]	; (8009834 <_strtod_l+0x93c>)
 80097a4:	ea0a 0303 	and.w	r3, sl, r3
 80097a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80097ac:	f04f 0800 	mov.w	r8, #0
 80097b0:	9b04      	ldr	r3, [sp, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1a2      	bne.n	80096fc <_strtod_l+0x804>
 80097b6:	e5ed      	b.n	8009394 <_strtod_l+0x49c>
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
 80097bc:	e7e9      	b.n	8009792 <_strtod_l+0x89a>
 80097be:	4613      	mov	r3, r2
 80097c0:	e7e7      	b.n	8009792 <_strtod_l+0x89a>
 80097c2:	ea53 0308 	orrs.w	r3, r3, r8
 80097c6:	d08a      	beq.n	80096de <_strtod_l+0x7e6>
 80097c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ca:	b1e3      	cbz	r3, 8009806 <_strtod_l+0x90e>
 80097cc:	ea13 0f0a 	tst.w	r3, sl
 80097d0:	d0ee      	beq.n	80097b0 <_strtod_l+0x8b8>
 80097d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d4:	9a04      	ldr	r2, [sp, #16]
 80097d6:	4640      	mov	r0, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	b1c3      	cbz	r3, 800980e <_strtod_l+0x916>
 80097dc:	f7ff fb6f 	bl	8008ebe <sulp>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	ec51 0b18 	vmov	r0, r1, d8
 80097e8:	f7f6 fd78 	bl	80002dc <__adddf3>
 80097ec:	4680      	mov	r8, r0
 80097ee:	4689      	mov	r9, r1
 80097f0:	e7de      	b.n	80097b0 <_strtod_l+0x8b8>
 80097f2:	4013      	ands	r3, r2
 80097f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80097fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009800:	f04f 38ff 	mov.w	r8, #4294967295
 8009804:	e7d4      	b.n	80097b0 <_strtod_l+0x8b8>
 8009806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009808:	ea13 0f08 	tst.w	r3, r8
 800980c:	e7e0      	b.n	80097d0 <_strtod_l+0x8d8>
 800980e:	f7ff fb56 	bl	8008ebe <sulp>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	ec51 0b18 	vmov	r0, r1, d8
 800981a:	f7f6 fd5d 	bl	80002d8 <__aeabi_dsub>
 800981e:	2200      	movs	r2, #0
 8009820:	2300      	movs	r3, #0
 8009822:	4680      	mov	r8, r0
 8009824:	4689      	mov	r9, r1
 8009826:	f7f7 f977 	bl	8000b18 <__aeabi_dcmpeq>
 800982a:	2800      	cmp	r0, #0
 800982c:	d0c0      	beq.n	80097b0 <_strtod_l+0x8b8>
 800982e:	e618      	b.n	8009462 <_strtod_l+0x56a>
 8009830:	fffffc02 	.word	0xfffffc02
 8009834:	7ff00000 	.word	0x7ff00000
 8009838:	39500000 	.word	0x39500000
 800983c:	000fffff 	.word	0x000fffff
 8009840:	7fefffff 	.word	0x7fefffff
 8009844:	0800d2d8 	.word	0x0800d2d8
 8009848:	4659      	mov	r1, fp
 800984a:	4628      	mov	r0, r5
 800984c:	f7ff fac0 	bl	8008dd0 <__ratio>
 8009850:	ec57 6b10 	vmov	r6, r7, d0
 8009854:	ee10 0a10 	vmov	r0, s0
 8009858:	2200      	movs	r2, #0
 800985a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800985e:	4639      	mov	r1, r7
 8009860:	f7f7 f96e 	bl	8000b40 <__aeabi_dcmple>
 8009864:	2800      	cmp	r0, #0
 8009866:	d071      	beq.n	800994c <_strtod_l+0xa54>
 8009868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d17c      	bne.n	8009968 <_strtod_l+0xa70>
 800986e:	f1b8 0f00 	cmp.w	r8, #0
 8009872:	d15a      	bne.n	800992a <_strtod_l+0xa32>
 8009874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009878:	2b00      	cmp	r3, #0
 800987a:	d15d      	bne.n	8009938 <_strtod_l+0xa40>
 800987c:	4b90      	ldr	r3, [pc, #576]	; (8009ac0 <_strtod_l+0xbc8>)
 800987e:	2200      	movs	r2, #0
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f7 f952 	bl	8000b2c <__aeabi_dcmplt>
 8009888:	2800      	cmp	r0, #0
 800988a:	d15c      	bne.n	8009946 <_strtod_l+0xa4e>
 800988c:	4630      	mov	r0, r6
 800988e:	4639      	mov	r1, r7
 8009890:	4b8c      	ldr	r3, [pc, #560]	; (8009ac4 <_strtod_l+0xbcc>)
 8009892:	2200      	movs	r2, #0
 8009894:	f7f6 fed8 	bl	8000648 <__aeabi_dmul>
 8009898:	4606      	mov	r6, r0
 800989a:	460f      	mov	r7, r1
 800989c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80098a0:	9606      	str	r6, [sp, #24]
 80098a2:	9307      	str	r3, [sp, #28]
 80098a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80098ac:	4b86      	ldr	r3, [pc, #536]	; (8009ac8 <_strtod_l+0xbd0>)
 80098ae:	ea0a 0303 	and.w	r3, sl, r3
 80098b2:	930d      	str	r3, [sp, #52]	; 0x34
 80098b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098b6:	4b85      	ldr	r3, [pc, #532]	; (8009acc <_strtod_l+0xbd4>)
 80098b8:	429a      	cmp	r2, r3
 80098ba:	f040 8090 	bne.w	80099de <_strtod_l+0xae6>
 80098be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80098c2:	ec49 8b10 	vmov	d0, r8, r9
 80098c6:	f7ff f9b9 	bl	8008c3c <__ulp>
 80098ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098ce:	ec51 0b10 	vmov	r0, r1, d0
 80098d2:	f7f6 feb9 	bl	8000648 <__aeabi_dmul>
 80098d6:	4642      	mov	r2, r8
 80098d8:	464b      	mov	r3, r9
 80098da:	f7f6 fcff 	bl	80002dc <__adddf3>
 80098de:	460b      	mov	r3, r1
 80098e0:	4979      	ldr	r1, [pc, #484]	; (8009ac8 <_strtod_l+0xbd0>)
 80098e2:	4a7b      	ldr	r2, [pc, #492]	; (8009ad0 <_strtod_l+0xbd8>)
 80098e4:	4019      	ands	r1, r3
 80098e6:	4291      	cmp	r1, r2
 80098e8:	4680      	mov	r8, r0
 80098ea:	d944      	bls.n	8009976 <_strtod_l+0xa7e>
 80098ec:	ee18 2a90 	vmov	r2, s17
 80098f0:	4b78      	ldr	r3, [pc, #480]	; (8009ad4 <_strtod_l+0xbdc>)
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d104      	bne.n	8009900 <_strtod_l+0xa08>
 80098f6:	ee18 3a10 	vmov	r3, s16
 80098fa:	3301      	adds	r3, #1
 80098fc:	f43f ad40 	beq.w	8009380 <_strtod_l+0x488>
 8009900:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009ad4 <_strtod_l+0xbdc>
 8009904:	f04f 38ff 	mov.w	r8, #4294967295
 8009908:	9916      	ldr	r1, [sp, #88]	; 0x58
 800990a:	4620      	mov	r0, r4
 800990c:	f7fe fe6a 	bl	80085e4 <_Bfree>
 8009910:	9905      	ldr	r1, [sp, #20]
 8009912:	4620      	mov	r0, r4
 8009914:	f7fe fe66 	bl	80085e4 <_Bfree>
 8009918:	4659      	mov	r1, fp
 800991a:	4620      	mov	r0, r4
 800991c:	f7fe fe62 	bl	80085e4 <_Bfree>
 8009920:	4629      	mov	r1, r5
 8009922:	4620      	mov	r0, r4
 8009924:	f7fe fe5e 	bl	80085e4 <_Bfree>
 8009928:	e609      	b.n	800953e <_strtod_l+0x646>
 800992a:	f1b8 0f01 	cmp.w	r8, #1
 800992e:	d103      	bne.n	8009938 <_strtod_l+0xa40>
 8009930:	f1b9 0f00 	cmp.w	r9, #0
 8009934:	f43f ad95 	beq.w	8009462 <_strtod_l+0x56a>
 8009938:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009a90 <_strtod_l+0xb98>
 800993c:	4f60      	ldr	r7, [pc, #384]	; (8009ac0 <_strtod_l+0xbc8>)
 800993e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009942:	2600      	movs	r6, #0
 8009944:	e7ae      	b.n	80098a4 <_strtod_l+0x9ac>
 8009946:	4f5f      	ldr	r7, [pc, #380]	; (8009ac4 <_strtod_l+0xbcc>)
 8009948:	2600      	movs	r6, #0
 800994a:	e7a7      	b.n	800989c <_strtod_l+0x9a4>
 800994c:	4b5d      	ldr	r3, [pc, #372]	; (8009ac4 <_strtod_l+0xbcc>)
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	2200      	movs	r2, #0
 8009954:	f7f6 fe78 	bl	8000648 <__aeabi_dmul>
 8009958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800995a:	4606      	mov	r6, r0
 800995c:	460f      	mov	r7, r1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d09c      	beq.n	800989c <_strtod_l+0x9a4>
 8009962:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009966:	e79d      	b.n	80098a4 <_strtod_l+0x9ac>
 8009968:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009a98 <_strtod_l+0xba0>
 800996c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009970:	ec57 6b17 	vmov	r6, r7, d7
 8009974:	e796      	b.n	80098a4 <_strtod_l+0x9ac>
 8009976:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800997a:	9b04      	ldr	r3, [sp, #16]
 800997c:	46ca      	mov	sl, r9
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1c2      	bne.n	8009908 <_strtod_l+0xa10>
 8009982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009988:	0d1b      	lsrs	r3, r3, #20
 800998a:	051b      	lsls	r3, r3, #20
 800998c:	429a      	cmp	r2, r3
 800998e:	d1bb      	bne.n	8009908 <_strtod_l+0xa10>
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f7 f9b8 	bl	8000d08 <__aeabi_d2lz>
 8009998:	f7f6 fe28 	bl	80005ec <__aeabi_l2d>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f6 fc98 	bl	80002d8 <__aeabi_dsub>
 80099a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ae:	ea43 0308 	orr.w	r3, r3, r8
 80099b2:	4313      	orrs	r3, r2
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	d054      	beq.n	8009a64 <_strtod_l+0xb6c>
 80099ba:	a339      	add	r3, pc, #228	; (adr r3, 8009aa0 <_strtod_l+0xba8>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f7f7 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f47f ace5 	bne.w	8009394 <_strtod_l+0x49c>
 80099ca:	a337      	add	r3, pc, #220	; (adr r3, 8009aa8 <_strtod_l+0xbb0>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	4630      	mov	r0, r6
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f7 f8c8 	bl	8000b68 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d095      	beq.n	8009908 <_strtod_l+0xa10>
 80099dc:	e4da      	b.n	8009394 <_strtod_l+0x49c>
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	b333      	cbz	r3, 8009a30 <_strtod_l+0xb38>
 80099e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099e8:	d822      	bhi.n	8009a30 <_strtod_l+0xb38>
 80099ea:	a331      	add	r3, pc, #196	; (adr r3, 8009ab0 <_strtod_l+0xbb8>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f7 f8a4 	bl	8000b40 <__aeabi_dcmple>
 80099f8:	b1a0      	cbz	r0, 8009a24 <_strtod_l+0xb2c>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7f7 f8fb 	bl	8000bf8 <__aeabi_d2uiz>
 8009a02:	2801      	cmp	r0, #1
 8009a04:	bf38      	it	cc
 8009a06:	2001      	movcc	r0, #1
 8009a08:	f7f6 fda4 	bl	8000554 <__aeabi_ui2d>
 8009a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460f      	mov	r7, r1
 8009a12:	bb23      	cbnz	r3, 8009a5e <_strtod_l+0xb66>
 8009a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a18:	9010      	str	r0, [sp, #64]	; 0x40
 8009a1a:	9311      	str	r3, [sp, #68]	; 0x44
 8009a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a34:	eeb0 0a48 	vmov.f32	s0, s16
 8009a38:	eef0 0a68 	vmov.f32	s1, s17
 8009a3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009a40:	f7ff f8fc 	bl	8008c3c <__ulp>
 8009a44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009a48:	ec53 2b10 	vmov	r2, r3, d0
 8009a4c:	f7f6 fdfc 	bl	8000648 <__aeabi_dmul>
 8009a50:	ec53 2b18 	vmov	r2, r3, d8
 8009a54:	f7f6 fc42 	bl	80002dc <__adddf3>
 8009a58:	4680      	mov	r8, r0
 8009a5a:	4689      	mov	r9, r1
 8009a5c:	e78d      	b.n	800997a <_strtod_l+0xa82>
 8009a5e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009a62:	e7db      	b.n	8009a1c <_strtod_l+0xb24>
 8009a64:	a314      	add	r3, pc, #80	; (adr r3, 8009ab8 <_strtod_l+0xbc0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f7 f85f 	bl	8000b2c <__aeabi_dcmplt>
 8009a6e:	e7b3      	b.n	80099d8 <_strtod_l+0xae0>
 8009a70:	2300      	movs	r3, #0
 8009a72:	930a      	str	r3, [sp, #40]	; 0x28
 8009a74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	f7ff ba7c 	b.w	8008f76 <_strtod_l+0x7e>
 8009a7e:	2a65      	cmp	r2, #101	; 0x65
 8009a80:	f43f ab75 	beq.w	800916e <_strtod_l+0x276>
 8009a84:	2a45      	cmp	r2, #69	; 0x45
 8009a86:	f43f ab72 	beq.w	800916e <_strtod_l+0x276>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f7ff bbaa 	b.w	80091e4 <_strtod_l+0x2ec>
 8009a90:	00000000 	.word	0x00000000
 8009a94:	bff00000 	.word	0xbff00000
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	3ff00000 	.word	0x3ff00000
 8009aa0:	94a03595 	.word	0x94a03595
 8009aa4:	3fdfffff 	.word	0x3fdfffff
 8009aa8:	35afe535 	.word	0x35afe535
 8009aac:	3fe00000 	.word	0x3fe00000
 8009ab0:	ffc00000 	.word	0xffc00000
 8009ab4:	41dfffff 	.word	0x41dfffff
 8009ab8:	94a03595 	.word	0x94a03595
 8009abc:	3fcfffff 	.word	0x3fcfffff
 8009ac0:	3ff00000 	.word	0x3ff00000
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	7ff00000 	.word	0x7ff00000
 8009acc:	7fe00000 	.word	0x7fe00000
 8009ad0:	7c9fffff 	.word	0x7c9fffff
 8009ad4:	7fefffff 	.word	0x7fefffff

08009ad8 <_strtod_r>:
 8009ad8:	4b01      	ldr	r3, [pc, #4]	; (8009ae0 <_strtod_r+0x8>)
 8009ada:	f7ff ba0d 	b.w	8008ef8 <_strtod_l>
 8009ade:	bf00      	nop
 8009ae0:	20000070 	.word	0x20000070

08009ae4 <_strtol_l.constprop.0>:
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aea:	d001      	beq.n	8009af0 <_strtol_l.constprop.0+0xc>
 8009aec:	2b24      	cmp	r3, #36	; 0x24
 8009aee:	d906      	bls.n	8009afe <_strtol_l.constprop.0+0x1a>
 8009af0:	f7fd fd8a 	bl	8007608 <__errno>
 8009af4:	2316      	movs	r3, #22
 8009af6:	6003      	str	r3, [r0, #0]
 8009af8:	2000      	movs	r0, #0
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009be4 <_strtol_l.constprop.0+0x100>
 8009b02:	460d      	mov	r5, r1
 8009b04:	462e      	mov	r6, r5
 8009b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b0a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009b0e:	f017 0708 	ands.w	r7, r7, #8
 8009b12:	d1f7      	bne.n	8009b04 <_strtol_l.constprop.0+0x20>
 8009b14:	2c2d      	cmp	r4, #45	; 0x2d
 8009b16:	d132      	bne.n	8009b7e <_strtol_l.constprop.0+0x9a>
 8009b18:	782c      	ldrb	r4, [r5, #0]
 8009b1a:	2701      	movs	r7, #1
 8009b1c:	1cb5      	adds	r5, r6, #2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d05b      	beq.n	8009bda <_strtol_l.constprop.0+0xf6>
 8009b22:	2b10      	cmp	r3, #16
 8009b24:	d109      	bne.n	8009b3a <_strtol_l.constprop.0+0x56>
 8009b26:	2c30      	cmp	r4, #48	; 0x30
 8009b28:	d107      	bne.n	8009b3a <_strtol_l.constprop.0+0x56>
 8009b2a:	782c      	ldrb	r4, [r5, #0]
 8009b2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009b30:	2c58      	cmp	r4, #88	; 0x58
 8009b32:	d14d      	bne.n	8009bd0 <_strtol_l.constprop.0+0xec>
 8009b34:	786c      	ldrb	r4, [r5, #1]
 8009b36:	2310      	movs	r3, #16
 8009b38:	3502      	adds	r5, #2
 8009b3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009b3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b42:	f04f 0e00 	mov.w	lr, #0
 8009b46:	fbb8 f9f3 	udiv	r9, r8, r3
 8009b4a:	4676      	mov	r6, lr
 8009b4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009b50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009b54:	f1bc 0f09 	cmp.w	ip, #9
 8009b58:	d816      	bhi.n	8009b88 <_strtol_l.constprop.0+0xa4>
 8009b5a:	4664      	mov	r4, ip
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	dd24      	ble.n	8009baa <_strtol_l.constprop.0+0xc6>
 8009b60:	f1be 3fff 	cmp.w	lr, #4294967295
 8009b64:	d008      	beq.n	8009b78 <_strtol_l.constprop.0+0x94>
 8009b66:	45b1      	cmp	r9, r6
 8009b68:	d31c      	bcc.n	8009ba4 <_strtol_l.constprop.0+0xc0>
 8009b6a:	d101      	bne.n	8009b70 <_strtol_l.constprop.0+0x8c>
 8009b6c:	45a2      	cmp	sl, r4
 8009b6e:	db19      	blt.n	8009ba4 <_strtol_l.constprop.0+0xc0>
 8009b70:	fb06 4603 	mla	r6, r6, r3, r4
 8009b74:	f04f 0e01 	mov.w	lr, #1
 8009b78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b7c:	e7e8      	b.n	8009b50 <_strtol_l.constprop.0+0x6c>
 8009b7e:	2c2b      	cmp	r4, #43	; 0x2b
 8009b80:	bf04      	itt	eq
 8009b82:	782c      	ldrbeq	r4, [r5, #0]
 8009b84:	1cb5      	addeq	r5, r6, #2
 8009b86:	e7ca      	b.n	8009b1e <_strtol_l.constprop.0+0x3a>
 8009b88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009b8c:	f1bc 0f19 	cmp.w	ip, #25
 8009b90:	d801      	bhi.n	8009b96 <_strtol_l.constprop.0+0xb2>
 8009b92:	3c37      	subs	r4, #55	; 0x37
 8009b94:	e7e2      	b.n	8009b5c <_strtol_l.constprop.0+0x78>
 8009b96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b9a:	f1bc 0f19 	cmp.w	ip, #25
 8009b9e:	d804      	bhi.n	8009baa <_strtol_l.constprop.0+0xc6>
 8009ba0:	3c57      	subs	r4, #87	; 0x57
 8009ba2:	e7db      	b.n	8009b5c <_strtol_l.constprop.0+0x78>
 8009ba4:	f04f 3eff 	mov.w	lr, #4294967295
 8009ba8:	e7e6      	b.n	8009b78 <_strtol_l.constprop.0+0x94>
 8009baa:	f1be 3fff 	cmp.w	lr, #4294967295
 8009bae:	d105      	bne.n	8009bbc <_strtol_l.constprop.0+0xd8>
 8009bb0:	2322      	movs	r3, #34	; 0x22
 8009bb2:	6003      	str	r3, [r0, #0]
 8009bb4:	4646      	mov	r6, r8
 8009bb6:	b942      	cbnz	r2, 8009bca <_strtol_l.constprop.0+0xe6>
 8009bb8:	4630      	mov	r0, r6
 8009bba:	e79e      	b.n	8009afa <_strtol_l.constprop.0+0x16>
 8009bbc:	b107      	cbz	r7, 8009bc0 <_strtol_l.constprop.0+0xdc>
 8009bbe:	4276      	negs	r6, r6
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	d0f9      	beq.n	8009bb8 <_strtol_l.constprop.0+0xd4>
 8009bc4:	f1be 0f00 	cmp.w	lr, #0
 8009bc8:	d000      	beq.n	8009bcc <_strtol_l.constprop.0+0xe8>
 8009bca:	1e69      	subs	r1, r5, #1
 8009bcc:	6011      	str	r1, [r2, #0]
 8009bce:	e7f3      	b.n	8009bb8 <_strtol_l.constprop.0+0xd4>
 8009bd0:	2430      	movs	r4, #48	; 0x30
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1b1      	bne.n	8009b3a <_strtol_l.constprop.0+0x56>
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	e7af      	b.n	8009b3a <_strtol_l.constprop.0+0x56>
 8009bda:	2c30      	cmp	r4, #48	; 0x30
 8009bdc:	d0a5      	beq.n	8009b2a <_strtol_l.constprop.0+0x46>
 8009bde:	230a      	movs	r3, #10
 8009be0:	e7ab      	b.n	8009b3a <_strtol_l.constprop.0+0x56>
 8009be2:	bf00      	nop
 8009be4:	0800d301 	.word	0x0800d301

08009be8 <_strtol_r>:
 8009be8:	f7ff bf7c 	b.w	8009ae4 <_strtol_l.constprop.0>

08009bec <__ssputs_r>:
 8009bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	688e      	ldr	r6, [r1, #8]
 8009bf2:	461f      	mov	r7, r3
 8009bf4:	42be      	cmp	r6, r7
 8009bf6:	680b      	ldr	r3, [r1, #0]
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	4690      	mov	r8, r2
 8009bfe:	d82c      	bhi.n	8009c5a <__ssputs_r+0x6e>
 8009c00:	898a      	ldrh	r2, [r1, #12]
 8009c02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c06:	d026      	beq.n	8009c56 <__ssputs_r+0x6a>
 8009c08:	6965      	ldr	r5, [r4, #20]
 8009c0a:	6909      	ldr	r1, [r1, #16]
 8009c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c10:	eba3 0901 	sub.w	r9, r3, r1
 8009c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c18:	1c7b      	adds	r3, r7, #1
 8009c1a:	444b      	add	r3, r9
 8009c1c:	106d      	asrs	r5, r5, #1
 8009c1e:	429d      	cmp	r5, r3
 8009c20:	bf38      	it	cc
 8009c22:	461d      	movcc	r5, r3
 8009c24:	0553      	lsls	r3, r2, #21
 8009c26:	d527      	bpl.n	8009c78 <__ssputs_r+0x8c>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7fe fc0f 	bl	800844c <_malloc_r>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	b360      	cbz	r0, 8009c8c <__ssputs_r+0xa0>
 8009c32:	6921      	ldr	r1, [r4, #16]
 8009c34:	464a      	mov	r2, r9
 8009c36:	f000 fc17 	bl	800a468 <memcpy>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	6126      	str	r6, [r4, #16]
 8009c48:	6165      	str	r5, [r4, #20]
 8009c4a:	444e      	add	r6, r9
 8009c4c:	eba5 0509 	sub.w	r5, r5, r9
 8009c50:	6026      	str	r6, [r4, #0]
 8009c52:	60a5      	str	r5, [r4, #8]
 8009c54:	463e      	mov	r6, r7
 8009c56:	42be      	cmp	r6, r7
 8009c58:	d900      	bls.n	8009c5c <__ssputs_r+0x70>
 8009c5a:	463e      	mov	r6, r7
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	4632      	mov	r2, r6
 8009c60:	4641      	mov	r1, r8
 8009c62:	f000 fba3 	bl	800a3ac <memmove>
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	60a3      	str	r3, [r4, #8]
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	4433      	add	r3, r6
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2000      	movs	r0, #0
 8009c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c78:	462a      	mov	r2, r5
 8009c7a:	f000 ffaa 	bl	800abd2 <_realloc_r>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d1e0      	bne.n	8009c46 <__ssputs_r+0x5a>
 8009c84:	6921      	ldr	r1, [r4, #16]
 8009c86:	4650      	mov	r0, sl
 8009c88:	f7fe fb6c 	bl	8008364 <_free_r>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	f8ca 3000 	str.w	r3, [sl]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	e7e9      	b.n	8009c74 <__ssputs_r+0x88>

08009ca0 <_svfiprintf_r>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	4698      	mov	r8, r3
 8009ca6:	898b      	ldrh	r3, [r1, #12]
 8009ca8:	061b      	lsls	r3, r3, #24
 8009caa:	b09d      	sub	sp, #116	; 0x74
 8009cac:	4607      	mov	r7, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	d50e      	bpl.n	8009cd2 <_svfiprintf_r+0x32>
 8009cb4:	690b      	ldr	r3, [r1, #16]
 8009cb6:	b963      	cbnz	r3, 8009cd2 <_svfiprintf_r+0x32>
 8009cb8:	2140      	movs	r1, #64	; 0x40
 8009cba:	f7fe fbc7 	bl	800844c <_malloc_r>
 8009cbe:	6028      	str	r0, [r5, #0]
 8009cc0:	6128      	str	r0, [r5, #16]
 8009cc2:	b920      	cbnz	r0, 8009cce <_svfiprintf_r+0x2e>
 8009cc4:	230c      	movs	r3, #12
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e0d0      	b.n	8009e70 <_svfiprintf_r+0x1d0>
 8009cce:	2340      	movs	r3, #64	; 0x40
 8009cd0:	616b      	str	r3, [r5, #20]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd6:	2320      	movs	r3, #32
 8009cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce0:	2330      	movs	r3, #48	; 0x30
 8009ce2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e88 <_svfiprintf_r+0x1e8>
 8009ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cea:	f04f 0901 	mov.w	r9, #1
 8009cee:	4623      	mov	r3, r4
 8009cf0:	469a      	mov	sl, r3
 8009cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf6:	b10a      	cbz	r2, 8009cfc <_svfiprintf_r+0x5c>
 8009cf8:	2a25      	cmp	r2, #37	; 0x25
 8009cfa:	d1f9      	bne.n	8009cf0 <_svfiprintf_r+0x50>
 8009cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8009d00:	d00b      	beq.n	8009d1a <_svfiprintf_r+0x7a>
 8009d02:	465b      	mov	r3, fp
 8009d04:	4622      	mov	r2, r4
 8009d06:	4629      	mov	r1, r5
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f7ff ff6f 	bl	8009bec <__ssputs_r>
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f000 80a9 	beq.w	8009e66 <_svfiprintf_r+0x1c6>
 8009d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d16:	445a      	add	r2, fp
 8009d18:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 80a1 	beq.w	8009e66 <_svfiprintf_r+0x1c6>
 8009d24:	2300      	movs	r3, #0
 8009d26:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d2e:	f10a 0a01 	add.w	sl, sl, #1
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	9307      	str	r3, [sp, #28]
 8009d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3c:	4654      	mov	r4, sl
 8009d3e:	2205      	movs	r2, #5
 8009d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d44:	4850      	ldr	r0, [pc, #320]	; (8009e88 <_svfiprintf_r+0x1e8>)
 8009d46:	f7f6 fa6b 	bl	8000220 <memchr>
 8009d4a:	9a04      	ldr	r2, [sp, #16]
 8009d4c:	b9d8      	cbnz	r0, 8009d86 <_svfiprintf_r+0xe6>
 8009d4e:	06d0      	lsls	r0, r2, #27
 8009d50:	bf44      	itt	mi
 8009d52:	2320      	movmi	r3, #32
 8009d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d58:	0711      	lsls	r1, r2, #28
 8009d5a:	bf44      	itt	mi
 8009d5c:	232b      	movmi	r3, #43	; 0x2b
 8009d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d62:	f89a 3000 	ldrb.w	r3, [sl]
 8009d66:	2b2a      	cmp	r3, #42	; 0x2a
 8009d68:	d015      	beq.n	8009d96 <_svfiprintf_r+0xf6>
 8009d6a:	9a07      	ldr	r2, [sp, #28]
 8009d6c:	4654      	mov	r4, sl
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f04f 0c0a 	mov.w	ip, #10
 8009d74:	4621      	mov	r1, r4
 8009d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7a:	3b30      	subs	r3, #48	; 0x30
 8009d7c:	2b09      	cmp	r3, #9
 8009d7e:	d94d      	bls.n	8009e1c <_svfiprintf_r+0x17c>
 8009d80:	b1b0      	cbz	r0, 8009db0 <_svfiprintf_r+0x110>
 8009d82:	9207      	str	r2, [sp, #28]
 8009d84:	e014      	b.n	8009db0 <_svfiprintf_r+0x110>
 8009d86:	eba0 0308 	sub.w	r3, r0, r8
 8009d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	46a2      	mov	sl, r4
 8009d94:	e7d2      	b.n	8009d3c <_svfiprintf_r+0x9c>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	1d19      	adds	r1, r3, #4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	9103      	str	r1, [sp, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bfbb      	ittet	lt
 8009da2:	425b      	neglt	r3, r3
 8009da4:	f042 0202 	orrlt.w	r2, r2, #2
 8009da8:	9307      	strge	r3, [sp, #28]
 8009daa:	9307      	strlt	r3, [sp, #28]
 8009dac:	bfb8      	it	lt
 8009dae:	9204      	strlt	r2, [sp, #16]
 8009db0:	7823      	ldrb	r3, [r4, #0]
 8009db2:	2b2e      	cmp	r3, #46	; 0x2e
 8009db4:	d10c      	bne.n	8009dd0 <_svfiprintf_r+0x130>
 8009db6:	7863      	ldrb	r3, [r4, #1]
 8009db8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dba:	d134      	bne.n	8009e26 <_svfiprintf_r+0x186>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1d1a      	adds	r2, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	9203      	str	r2, [sp, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfb8      	it	lt
 8009dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dcc:	3402      	adds	r4, #2
 8009dce:	9305      	str	r3, [sp, #20]
 8009dd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e98 <_svfiprintf_r+0x1f8>
 8009dd4:	7821      	ldrb	r1, [r4, #0]
 8009dd6:	2203      	movs	r2, #3
 8009dd8:	4650      	mov	r0, sl
 8009dda:	f7f6 fa21 	bl	8000220 <memchr>
 8009dde:	b138      	cbz	r0, 8009df0 <_svfiprintf_r+0x150>
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	eba0 000a 	sub.w	r0, r0, sl
 8009de6:	2240      	movs	r2, #64	; 0x40
 8009de8:	4082      	lsls	r2, r0
 8009dea:	4313      	orrs	r3, r2
 8009dec:	3401      	adds	r4, #1
 8009dee:	9304      	str	r3, [sp, #16]
 8009df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df4:	4825      	ldr	r0, [pc, #148]	; (8009e8c <_svfiprintf_r+0x1ec>)
 8009df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfa:	2206      	movs	r2, #6
 8009dfc:	f7f6 fa10 	bl	8000220 <memchr>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d038      	beq.n	8009e76 <_svfiprintf_r+0x1d6>
 8009e04:	4b22      	ldr	r3, [pc, #136]	; (8009e90 <_svfiprintf_r+0x1f0>)
 8009e06:	bb1b      	cbnz	r3, 8009e50 <_svfiprintf_r+0x1b0>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	3307      	adds	r3, #7
 8009e0c:	f023 0307 	bic.w	r3, r3, #7
 8009e10:	3308      	adds	r3, #8
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e16:	4433      	add	r3, r6
 8009e18:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1a:	e768      	b.n	8009cee <_svfiprintf_r+0x4e>
 8009e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e20:	460c      	mov	r4, r1
 8009e22:	2001      	movs	r0, #1
 8009e24:	e7a6      	b.n	8009d74 <_svfiprintf_r+0xd4>
 8009e26:	2300      	movs	r3, #0
 8009e28:	3401      	adds	r4, #1
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f04f 0c0a 	mov.w	ip, #10
 8009e32:	4620      	mov	r0, r4
 8009e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e38:	3a30      	subs	r2, #48	; 0x30
 8009e3a:	2a09      	cmp	r2, #9
 8009e3c:	d903      	bls.n	8009e46 <_svfiprintf_r+0x1a6>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0c6      	beq.n	8009dd0 <_svfiprintf_r+0x130>
 8009e42:	9105      	str	r1, [sp, #20]
 8009e44:	e7c4      	b.n	8009dd0 <_svfiprintf_r+0x130>
 8009e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e7f0      	b.n	8009e32 <_svfiprintf_r+0x192>
 8009e50:	ab03      	add	r3, sp, #12
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	462a      	mov	r2, r5
 8009e56:	4b0f      	ldr	r3, [pc, #60]	; (8009e94 <_svfiprintf_r+0x1f4>)
 8009e58:	a904      	add	r1, sp, #16
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	f7fc fb7c 	bl	8006558 <_printf_float>
 8009e60:	1c42      	adds	r2, r0, #1
 8009e62:	4606      	mov	r6, r0
 8009e64:	d1d6      	bne.n	8009e14 <_svfiprintf_r+0x174>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	065b      	lsls	r3, r3, #25
 8009e6a:	f53f af2d 	bmi.w	8009cc8 <_svfiprintf_r+0x28>
 8009e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e70:	b01d      	add	sp, #116	; 0x74
 8009e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e76:	ab03      	add	r3, sp, #12
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	462a      	mov	r2, r5
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <_svfiprintf_r+0x1f4>)
 8009e7e:	a904      	add	r1, sp, #16
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7fc fe0d 	bl	8006aa0 <_printf_i>
 8009e86:	e7eb      	b.n	8009e60 <_svfiprintf_r+0x1c0>
 8009e88:	0800d401 	.word	0x0800d401
 8009e8c:	0800d40b 	.word	0x0800d40b
 8009e90:	08006559 	.word	0x08006559
 8009e94:	08009bed 	.word	0x08009bed
 8009e98:	0800d407 	.word	0x0800d407

08009e9c <__sfputc_r>:
 8009e9c:	6893      	ldr	r3, [r2, #8]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	b410      	push	{r4}
 8009ea4:	6093      	str	r3, [r2, #8]
 8009ea6:	da08      	bge.n	8009eba <__sfputc_r+0x1e>
 8009ea8:	6994      	ldr	r4, [r2, #24]
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	db01      	blt.n	8009eb2 <__sfputc_r+0x16>
 8009eae:	290a      	cmp	r1, #10
 8009eb0:	d103      	bne.n	8009eba <__sfputc_r+0x1e>
 8009eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb6:	f7fd bac0 	b.w	800743a <__swbuf_r>
 8009eba:	6813      	ldr	r3, [r2, #0]
 8009ebc:	1c58      	adds	r0, r3, #1
 8009ebe:	6010      	str	r0, [r2, #0]
 8009ec0:	7019      	strb	r1, [r3, #0]
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <__sfputs_r>:
 8009eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ecc:	4606      	mov	r6, r0
 8009ece:	460f      	mov	r7, r1
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	18d5      	adds	r5, r2, r3
 8009ed4:	42ac      	cmp	r4, r5
 8009ed6:	d101      	bne.n	8009edc <__sfputs_r+0x12>
 8009ed8:	2000      	movs	r0, #0
 8009eda:	e007      	b.n	8009eec <__sfputs_r+0x22>
 8009edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee0:	463a      	mov	r2, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ffda 	bl	8009e9c <__sfputc_r>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d1f3      	bne.n	8009ed4 <__sfputs_r+0xa>
 8009eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef0 <_vfiprintf_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	b09d      	sub	sp, #116	; 0x74
 8009ef8:	4614      	mov	r4, r2
 8009efa:	4698      	mov	r8, r3
 8009efc:	4606      	mov	r6, r0
 8009efe:	b118      	cbz	r0, 8009f08 <_vfiprintf_r+0x18>
 8009f00:	6a03      	ldr	r3, [r0, #32]
 8009f02:	b90b      	cbnz	r3, 8009f08 <_vfiprintf_r+0x18>
 8009f04:	f7fd f98a 	bl	800721c <__sinit>
 8009f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0a:	07d9      	lsls	r1, r3, #31
 8009f0c:	d405      	bmi.n	8009f1a <_vfiprintf_r+0x2a>
 8009f0e:	89ab      	ldrh	r3, [r5, #12]
 8009f10:	059a      	lsls	r2, r3, #22
 8009f12:	d402      	bmi.n	8009f1a <_vfiprintf_r+0x2a>
 8009f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f16:	f7fd fba2 	bl	800765e <__retarget_lock_acquire_recursive>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	071b      	lsls	r3, r3, #28
 8009f1e:	d501      	bpl.n	8009f24 <_vfiprintf_r+0x34>
 8009f20:	692b      	ldr	r3, [r5, #16]
 8009f22:	b99b      	cbnz	r3, 8009f4c <_vfiprintf_r+0x5c>
 8009f24:	4629      	mov	r1, r5
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7fd fac4 	bl	80074b4 <__swsetup_r>
 8009f2c:	b170      	cbz	r0, 8009f4c <_vfiprintf_r+0x5c>
 8009f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f30:	07dc      	lsls	r4, r3, #31
 8009f32:	d504      	bpl.n	8009f3e <_vfiprintf_r+0x4e>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b01d      	add	sp, #116	; 0x74
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	0598      	lsls	r0, r3, #22
 8009f42:	d4f7      	bmi.n	8009f34 <_vfiprintf_r+0x44>
 8009f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f46:	f7fd fb8b 	bl	8007660 <__retarget_lock_release_recursive>
 8009f4a:	e7f3      	b.n	8009f34 <_vfiprintf_r+0x44>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f50:	2320      	movs	r3, #32
 8009f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f5a:	2330      	movs	r3, #48	; 0x30
 8009f5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a110 <_vfiprintf_r+0x220>
 8009f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f64:	f04f 0901 	mov.w	r9, #1
 8009f68:	4623      	mov	r3, r4
 8009f6a:	469a      	mov	sl, r3
 8009f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f70:	b10a      	cbz	r2, 8009f76 <_vfiprintf_r+0x86>
 8009f72:	2a25      	cmp	r2, #37	; 0x25
 8009f74:	d1f9      	bne.n	8009f6a <_vfiprintf_r+0x7a>
 8009f76:	ebba 0b04 	subs.w	fp, sl, r4
 8009f7a:	d00b      	beq.n	8009f94 <_vfiprintf_r+0xa4>
 8009f7c:	465b      	mov	r3, fp
 8009f7e:	4622      	mov	r2, r4
 8009f80:	4629      	mov	r1, r5
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ffa1 	bl	8009eca <__sfputs_r>
 8009f88:	3001      	adds	r0, #1
 8009f8a:	f000 80a9 	beq.w	800a0e0 <_vfiprintf_r+0x1f0>
 8009f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f90:	445a      	add	r2, fp
 8009f92:	9209      	str	r2, [sp, #36]	; 0x24
 8009f94:	f89a 3000 	ldrb.w	r3, [sl]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 80a1 	beq.w	800a0e0 <_vfiprintf_r+0x1f0>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa8:	f10a 0a01 	add.w	sl, sl, #1
 8009fac:	9304      	str	r3, [sp, #16]
 8009fae:	9307      	str	r3, [sp, #28]
 8009fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb6:	4654      	mov	r4, sl
 8009fb8:	2205      	movs	r2, #5
 8009fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbe:	4854      	ldr	r0, [pc, #336]	; (800a110 <_vfiprintf_r+0x220>)
 8009fc0:	f7f6 f92e 	bl	8000220 <memchr>
 8009fc4:	9a04      	ldr	r2, [sp, #16]
 8009fc6:	b9d8      	cbnz	r0, 800a000 <_vfiprintf_r+0x110>
 8009fc8:	06d1      	lsls	r1, r2, #27
 8009fca:	bf44      	itt	mi
 8009fcc:	2320      	movmi	r3, #32
 8009fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd2:	0713      	lsls	r3, r2, #28
 8009fd4:	bf44      	itt	mi
 8009fd6:	232b      	movmi	r3, #43	; 0x2b
 8009fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe2:	d015      	beq.n	800a010 <_vfiprintf_r+0x120>
 8009fe4:	9a07      	ldr	r2, [sp, #28]
 8009fe6:	4654      	mov	r4, sl
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f04f 0c0a 	mov.w	ip, #10
 8009fee:	4621      	mov	r1, r4
 8009ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ff4:	3b30      	subs	r3, #48	; 0x30
 8009ff6:	2b09      	cmp	r3, #9
 8009ff8:	d94d      	bls.n	800a096 <_vfiprintf_r+0x1a6>
 8009ffa:	b1b0      	cbz	r0, 800a02a <_vfiprintf_r+0x13a>
 8009ffc:	9207      	str	r2, [sp, #28]
 8009ffe:	e014      	b.n	800a02a <_vfiprintf_r+0x13a>
 800a000:	eba0 0308 	sub.w	r3, r0, r8
 800a004:	fa09 f303 	lsl.w	r3, r9, r3
 800a008:	4313      	orrs	r3, r2
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	46a2      	mov	sl, r4
 800a00e:	e7d2      	b.n	8009fb6 <_vfiprintf_r+0xc6>
 800a010:	9b03      	ldr	r3, [sp, #12]
 800a012:	1d19      	adds	r1, r3, #4
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	9103      	str	r1, [sp, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	bfbb      	ittet	lt
 800a01c:	425b      	neglt	r3, r3
 800a01e:	f042 0202 	orrlt.w	r2, r2, #2
 800a022:	9307      	strge	r3, [sp, #28]
 800a024:	9307      	strlt	r3, [sp, #28]
 800a026:	bfb8      	it	lt
 800a028:	9204      	strlt	r2, [sp, #16]
 800a02a:	7823      	ldrb	r3, [r4, #0]
 800a02c:	2b2e      	cmp	r3, #46	; 0x2e
 800a02e:	d10c      	bne.n	800a04a <_vfiprintf_r+0x15a>
 800a030:	7863      	ldrb	r3, [r4, #1]
 800a032:	2b2a      	cmp	r3, #42	; 0x2a
 800a034:	d134      	bne.n	800a0a0 <_vfiprintf_r+0x1b0>
 800a036:	9b03      	ldr	r3, [sp, #12]
 800a038:	1d1a      	adds	r2, r3, #4
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	9203      	str	r2, [sp, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfb8      	it	lt
 800a042:	f04f 33ff 	movlt.w	r3, #4294967295
 800a046:	3402      	adds	r4, #2
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a120 <_vfiprintf_r+0x230>
 800a04e:	7821      	ldrb	r1, [r4, #0]
 800a050:	2203      	movs	r2, #3
 800a052:	4650      	mov	r0, sl
 800a054:	f7f6 f8e4 	bl	8000220 <memchr>
 800a058:	b138      	cbz	r0, 800a06a <_vfiprintf_r+0x17a>
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	eba0 000a 	sub.w	r0, r0, sl
 800a060:	2240      	movs	r2, #64	; 0x40
 800a062:	4082      	lsls	r2, r0
 800a064:	4313      	orrs	r3, r2
 800a066:	3401      	adds	r4, #1
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06e:	4829      	ldr	r0, [pc, #164]	; (800a114 <_vfiprintf_r+0x224>)
 800a070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a074:	2206      	movs	r2, #6
 800a076:	f7f6 f8d3 	bl	8000220 <memchr>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d03f      	beq.n	800a0fe <_vfiprintf_r+0x20e>
 800a07e:	4b26      	ldr	r3, [pc, #152]	; (800a118 <_vfiprintf_r+0x228>)
 800a080:	bb1b      	cbnz	r3, 800a0ca <_vfiprintf_r+0x1da>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	3307      	adds	r3, #7
 800a086:	f023 0307 	bic.w	r3, r3, #7
 800a08a:	3308      	adds	r3, #8
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a090:	443b      	add	r3, r7
 800a092:	9309      	str	r3, [sp, #36]	; 0x24
 800a094:	e768      	b.n	8009f68 <_vfiprintf_r+0x78>
 800a096:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09a:	460c      	mov	r4, r1
 800a09c:	2001      	movs	r0, #1
 800a09e:	e7a6      	b.n	8009fee <_vfiprintf_r+0xfe>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	3401      	adds	r4, #1
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f04f 0c0a 	mov.w	ip, #10
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b2:	3a30      	subs	r2, #48	; 0x30
 800a0b4:	2a09      	cmp	r2, #9
 800a0b6:	d903      	bls.n	800a0c0 <_vfiprintf_r+0x1d0>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0c6      	beq.n	800a04a <_vfiprintf_r+0x15a>
 800a0bc:	9105      	str	r1, [sp, #20]
 800a0be:	e7c4      	b.n	800a04a <_vfiprintf_r+0x15a>
 800a0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e7f0      	b.n	800a0ac <_vfiprintf_r+0x1bc>
 800a0ca:	ab03      	add	r3, sp, #12
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	462a      	mov	r2, r5
 800a0d0:	4b12      	ldr	r3, [pc, #72]	; (800a11c <_vfiprintf_r+0x22c>)
 800a0d2:	a904      	add	r1, sp, #16
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7fc fa3f 	bl	8006558 <_printf_float>
 800a0da:	4607      	mov	r7, r0
 800a0dc:	1c78      	adds	r0, r7, #1
 800a0de:	d1d6      	bne.n	800a08e <_vfiprintf_r+0x19e>
 800a0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e2:	07d9      	lsls	r1, r3, #31
 800a0e4:	d405      	bmi.n	800a0f2 <_vfiprintf_r+0x202>
 800a0e6:	89ab      	ldrh	r3, [r5, #12]
 800a0e8:	059a      	lsls	r2, r3, #22
 800a0ea:	d402      	bmi.n	800a0f2 <_vfiprintf_r+0x202>
 800a0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ee:	f7fd fab7 	bl	8007660 <__retarget_lock_release_recursive>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	065b      	lsls	r3, r3, #25
 800a0f6:	f53f af1d 	bmi.w	8009f34 <_vfiprintf_r+0x44>
 800a0fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0fc:	e71c      	b.n	8009f38 <_vfiprintf_r+0x48>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <_vfiprintf_r+0x22c>)
 800a106:	a904      	add	r1, sp, #16
 800a108:	4630      	mov	r0, r6
 800a10a:	f7fc fcc9 	bl	8006aa0 <_printf_i>
 800a10e:	e7e4      	b.n	800a0da <_vfiprintf_r+0x1ea>
 800a110:	0800d401 	.word	0x0800d401
 800a114:	0800d40b 	.word	0x0800d40b
 800a118:	08006559 	.word	0x08006559
 800a11c:	08009ecb 	.word	0x08009ecb
 800a120:	0800d407 	.word	0x0800d407

0800a124 <__sflush_r>:
 800a124:	898a      	ldrh	r2, [r1, #12]
 800a126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12a:	4605      	mov	r5, r0
 800a12c:	0710      	lsls	r0, r2, #28
 800a12e:	460c      	mov	r4, r1
 800a130:	d458      	bmi.n	800a1e4 <__sflush_r+0xc0>
 800a132:	684b      	ldr	r3, [r1, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	dc05      	bgt.n	800a144 <__sflush_r+0x20>
 800a138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dc02      	bgt.n	800a144 <__sflush_r+0x20>
 800a13e:	2000      	movs	r0, #0
 800a140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a146:	2e00      	cmp	r6, #0
 800a148:	d0f9      	beq.n	800a13e <__sflush_r+0x1a>
 800a14a:	2300      	movs	r3, #0
 800a14c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a150:	682f      	ldr	r7, [r5, #0]
 800a152:	6a21      	ldr	r1, [r4, #32]
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	d032      	beq.n	800a1be <__sflush_r+0x9a>
 800a158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	075a      	lsls	r2, r3, #29
 800a15e:	d505      	bpl.n	800a16c <__sflush_r+0x48>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	1ac0      	subs	r0, r0, r3
 800a164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a166:	b10b      	cbz	r3, 800a16c <__sflush_r+0x48>
 800a168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a16a:	1ac0      	subs	r0, r0, r3
 800a16c:	2300      	movs	r3, #0
 800a16e:	4602      	mov	r2, r0
 800a170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a172:	6a21      	ldr	r1, [r4, #32]
 800a174:	4628      	mov	r0, r5
 800a176:	47b0      	blx	r6
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	d106      	bne.n	800a18c <__sflush_r+0x68>
 800a17e:	6829      	ldr	r1, [r5, #0]
 800a180:	291d      	cmp	r1, #29
 800a182:	d82b      	bhi.n	800a1dc <__sflush_r+0xb8>
 800a184:	4a29      	ldr	r2, [pc, #164]	; (800a22c <__sflush_r+0x108>)
 800a186:	410a      	asrs	r2, r1
 800a188:	07d6      	lsls	r6, r2, #31
 800a18a:	d427      	bmi.n	800a1dc <__sflush_r+0xb8>
 800a18c:	2200      	movs	r2, #0
 800a18e:	6062      	str	r2, [r4, #4]
 800a190:	04d9      	lsls	r1, r3, #19
 800a192:	6922      	ldr	r2, [r4, #16]
 800a194:	6022      	str	r2, [r4, #0]
 800a196:	d504      	bpl.n	800a1a2 <__sflush_r+0x7e>
 800a198:	1c42      	adds	r2, r0, #1
 800a19a:	d101      	bne.n	800a1a0 <__sflush_r+0x7c>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b903      	cbnz	r3, 800a1a2 <__sflush_r+0x7e>
 800a1a0:	6560      	str	r0, [r4, #84]	; 0x54
 800a1a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a4:	602f      	str	r7, [r5, #0]
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	d0c9      	beq.n	800a13e <__sflush_r+0x1a>
 800a1aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1ae:	4299      	cmp	r1, r3
 800a1b0:	d002      	beq.n	800a1b8 <__sflush_r+0x94>
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7fe f8d6 	bl	8008364 <_free_r>
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a1bc:	e7c0      	b.n	800a140 <__sflush_r+0x1c>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b0      	blx	r6
 800a1c4:	1c41      	adds	r1, r0, #1
 800a1c6:	d1c8      	bne.n	800a15a <__sflush_r+0x36>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0c5      	beq.n	800a15a <__sflush_r+0x36>
 800a1ce:	2b1d      	cmp	r3, #29
 800a1d0:	d001      	beq.n	800a1d6 <__sflush_r+0xb2>
 800a1d2:	2b16      	cmp	r3, #22
 800a1d4:	d101      	bne.n	800a1da <__sflush_r+0xb6>
 800a1d6:	602f      	str	r7, [r5, #0]
 800a1d8:	e7b1      	b.n	800a13e <__sflush_r+0x1a>
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	e7ad      	b.n	800a140 <__sflush_r+0x1c>
 800a1e4:	690f      	ldr	r7, [r1, #16]
 800a1e6:	2f00      	cmp	r7, #0
 800a1e8:	d0a9      	beq.n	800a13e <__sflush_r+0x1a>
 800a1ea:	0793      	lsls	r3, r2, #30
 800a1ec:	680e      	ldr	r6, [r1, #0]
 800a1ee:	bf08      	it	eq
 800a1f0:	694b      	ldreq	r3, [r1, #20]
 800a1f2:	600f      	str	r7, [r1, #0]
 800a1f4:	bf18      	it	ne
 800a1f6:	2300      	movne	r3, #0
 800a1f8:	eba6 0807 	sub.w	r8, r6, r7
 800a1fc:	608b      	str	r3, [r1, #8]
 800a1fe:	f1b8 0f00 	cmp.w	r8, #0
 800a202:	dd9c      	ble.n	800a13e <__sflush_r+0x1a>
 800a204:	6a21      	ldr	r1, [r4, #32]
 800a206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a208:	4643      	mov	r3, r8
 800a20a:	463a      	mov	r2, r7
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b0      	blx	r6
 800a210:	2800      	cmp	r0, #0
 800a212:	dc06      	bgt.n	800a222 <__sflush_r+0xfe>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e78e      	b.n	800a140 <__sflush_r+0x1c>
 800a222:	4407      	add	r7, r0
 800a224:	eba8 0800 	sub.w	r8, r8, r0
 800a228:	e7e9      	b.n	800a1fe <__sflush_r+0xda>
 800a22a:	bf00      	nop
 800a22c:	dfbffffe 	.word	0xdfbffffe

0800a230 <_fflush_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	690b      	ldr	r3, [r1, #16]
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b913      	cbnz	r3, 800a240 <_fflush_r+0x10>
 800a23a:	2500      	movs	r5, #0
 800a23c:	4628      	mov	r0, r5
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	b118      	cbz	r0, 800a24a <_fflush_r+0x1a>
 800a242:	6a03      	ldr	r3, [r0, #32]
 800a244:	b90b      	cbnz	r3, 800a24a <_fflush_r+0x1a>
 800a246:	f7fc ffe9 	bl	800721c <__sinit>
 800a24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f3      	beq.n	800a23a <_fflush_r+0xa>
 800a252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a254:	07d0      	lsls	r0, r2, #31
 800a256:	d404      	bmi.n	800a262 <_fflush_r+0x32>
 800a258:	0599      	lsls	r1, r3, #22
 800a25a:	d402      	bmi.n	800a262 <_fflush_r+0x32>
 800a25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a25e:	f7fd f9fe 	bl	800765e <__retarget_lock_acquire_recursive>
 800a262:	4628      	mov	r0, r5
 800a264:	4621      	mov	r1, r4
 800a266:	f7ff ff5d 	bl	800a124 <__sflush_r>
 800a26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a26c:	07da      	lsls	r2, r3, #31
 800a26e:	4605      	mov	r5, r0
 800a270:	d4e4      	bmi.n	800a23c <_fflush_r+0xc>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	059b      	lsls	r3, r3, #22
 800a276:	d4e1      	bmi.n	800a23c <_fflush_r+0xc>
 800a278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27a:	f7fd f9f1 	bl	8007660 <__retarget_lock_release_recursive>
 800a27e:	e7dd      	b.n	800a23c <_fflush_r+0xc>

0800a280 <__swhatbuf_r>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	460c      	mov	r4, r1
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	2900      	cmp	r1, #0
 800a28a:	b096      	sub	sp, #88	; 0x58
 800a28c:	4615      	mov	r5, r2
 800a28e:	461e      	mov	r6, r3
 800a290:	da0d      	bge.n	800a2ae <__swhatbuf_r+0x2e>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a298:	f04f 0100 	mov.w	r1, #0
 800a29c:	bf0c      	ite	eq
 800a29e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a2a2:	2340      	movne	r3, #64	; 0x40
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	6031      	str	r1, [r6, #0]
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	b016      	add	sp, #88	; 0x58
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	466a      	mov	r2, sp
 800a2b0:	f000 f8a8 	bl	800a404 <_fstat_r>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	dbec      	blt.n	800a292 <__swhatbuf_r+0x12>
 800a2b8:	9901      	ldr	r1, [sp, #4]
 800a2ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a2be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a2c2:	4259      	negs	r1, r3
 800a2c4:	4159      	adcs	r1, r3
 800a2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ca:	e7eb      	b.n	800a2a4 <__swhatbuf_r+0x24>

0800a2cc <__smakebuf_r>:
 800a2cc:	898b      	ldrh	r3, [r1, #12]
 800a2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2d0:	079d      	lsls	r5, r3, #30
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	d507      	bpl.n	800a2e8 <__smakebuf_r+0x1c>
 800a2d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	6163      	str	r3, [r4, #20]
 800a2e4:	b002      	add	sp, #8
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	ab01      	add	r3, sp, #4
 800a2ea:	466a      	mov	r2, sp
 800a2ec:	f7ff ffc8 	bl	800a280 <__swhatbuf_r>
 800a2f0:	9900      	ldr	r1, [sp, #0]
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7fe f8a9 	bl	800844c <_malloc_r>
 800a2fa:	b948      	cbnz	r0, 800a310 <__smakebuf_r+0x44>
 800a2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a300:	059a      	lsls	r2, r3, #22
 800a302:	d4ef      	bmi.n	800a2e4 <__smakebuf_r+0x18>
 800a304:	f023 0303 	bic.w	r3, r3, #3
 800a308:	f043 0302 	orr.w	r3, r3, #2
 800a30c:	81a3      	strh	r3, [r4, #12]
 800a30e:	e7e3      	b.n	800a2d8 <__smakebuf_r+0xc>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a318:	81a3      	strh	r3, [r4, #12]
 800a31a:	9b00      	ldr	r3, [sp, #0]
 800a31c:	6163      	str	r3, [r4, #20]
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	6120      	str	r0, [r4, #16]
 800a322:	b15b      	cbz	r3, 800a33c <__smakebuf_r+0x70>
 800a324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a328:	4630      	mov	r0, r6
 800a32a:	f000 f87d 	bl	800a428 <_isatty_r>
 800a32e:	b128      	cbz	r0, 800a33c <__smakebuf_r+0x70>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f023 0303 	bic.w	r3, r3, #3
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	431d      	orrs	r5, r3
 800a340:	81a5      	strh	r5, [r4, #12]
 800a342:	e7cf      	b.n	800a2e4 <__smakebuf_r+0x18>

0800a344 <_putc_r>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	460d      	mov	r5, r1
 800a348:	4614      	mov	r4, r2
 800a34a:	4606      	mov	r6, r0
 800a34c:	b118      	cbz	r0, 800a356 <_putc_r+0x12>
 800a34e:	6a03      	ldr	r3, [r0, #32]
 800a350:	b90b      	cbnz	r3, 800a356 <_putc_r+0x12>
 800a352:	f7fc ff63 	bl	800721c <__sinit>
 800a356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a358:	07d8      	lsls	r0, r3, #31
 800a35a:	d405      	bmi.n	800a368 <_putc_r+0x24>
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	0599      	lsls	r1, r3, #22
 800a360:	d402      	bmi.n	800a368 <_putc_r+0x24>
 800a362:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a364:	f7fd f97b 	bl	800765e <__retarget_lock_acquire_recursive>
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	60a3      	str	r3, [r4, #8]
 800a370:	da05      	bge.n	800a37e <_putc_r+0x3a>
 800a372:	69a2      	ldr	r2, [r4, #24]
 800a374:	4293      	cmp	r3, r2
 800a376:	db12      	blt.n	800a39e <_putc_r+0x5a>
 800a378:	b2eb      	uxtb	r3, r5
 800a37a:	2b0a      	cmp	r3, #10
 800a37c:	d00f      	beq.n	800a39e <_putc_r+0x5a>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	6022      	str	r2, [r4, #0]
 800a384:	701d      	strb	r5, [r3, #0]
 800a386:	b2ed      	uxtb	r5, r5
 800a388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a38a:	07da      	lsls	r2, r3, #31
 800a38c:	d405      	bmi.n	800a39a <_putc_r+0x56>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d402      	bmi.n	800a39a <_putc_r+0x56>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	f7fd f963 	bl	8007660 <__retarget_lock_release_recursive>
 800a39a:	4628      	mov	r0, r5
 800a39c:	bd70      	pop	{r4, r5, r6, pc}
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7fd f849 	bl	800743a <__swbuf_r>
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	e7ed      	b.n	800a388 <_putc_r+0x44>

0800a3ac <memmove>:
 800a3ac:	4288      	cmp	r0, r1
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	eb01 0402 	add.w	r4, r1, r2
 800a3b4:	d902      	bls.n	800a3bc <memmove+0x10>
 800a3b6:	4284      	cmp	r4, r0
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	d807      	bhi.n	800a3cc <memmove+0x20>
 800a3bc:	1e43      	subs	r3, r0, #1
 800a3be:	42a1      	cmp	r1, r4
 800a3c0:	d008      	beq.n	800a3d4 <memmove+0x28>
 800a3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ca:	e7f8      	b.n	800a3be <memmove+0x12>
 800a3cc:	4402      	add	r2, r0
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	428a      	cmp	r2, r1
 800a3d2:	d100      	bne.n	800a3d6 <memmove+0x2a>
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3de:	e7f7      	b.n	800a3d0 <memmove+0x24>

0800a3e0 <strncmp>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	b16a      	cbz	r2, 800a400 <strncmp+0x20>
 800a3e4:	3901      	subs	r1, #1
 800a3e6:	1884      	adds	r4, r0, r2
 800a3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d103      	bne.n	800a3fc <strncmp+0x1c>
 800a3f4:	42a0      	cmp	r0, r4
 800a3f6:	d001      	beq.n	800a3fc <strncmp+0x1c>
 800a3f8:	2a00      	cmp	r2, #0
 800a3fa:	d1f5      	bne.n	800a3e8 <strncmp+0x8>
 800a3fc:	1ad0      	subs	r0, r2, r3
 800a3fe:	bd10      	pop	{r4, pc}
 800a400:	4610      	mov	r0, r2
 800a402:	e7fc      	b.n	800a3fe <strncmp+0x1e>

0800a404 <_fstat_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d07      	ldr	r5, [pc, #28]	; (800a424 <_fstat_r+0x20>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	4611      	mov	r1, r2
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	f7f8 fa3a 	bl	800288a <_fstat>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	d102      	bne.n	800a420 <_fstat_r+0x1c>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	b103      	cbz	r3, 800a420 <_fstat_r+0x1c>
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	bd38      	pop	{r3, r4, r5, pc}
 800a422:	bf00      	nop
 800a424:	20000910 	.word	0x20000910

0800a428 <_isatty_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d06      	ldr	r5, [pc, #24]	; (800a444 <_isatty_r+0x1c>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f8 fa39 	bl	80028aa <_isatty>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_isatty_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_isatty_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000910 	.word	0x20000910

0800a448 <_sbrk_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d06      	ldr	r5, [pc, #24]	; (800a464 <_sbrk_r+0x1c>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f8 fa42 	bl	80028dc <_sbrk>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_sbrk_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_sbrk_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	20000910 	.word	0x20000910

0800a468 <memcpy>:
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a470:	d100      	bne.n	800a474 <memcpy+0xc>
 800a472:	4770      	bx	lr
 800a474:	b510      	push	{r4, lr}
 800a476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a47e:	4291      	cmp	r1, r2
 800a480:	d1f9      	bne.n	800a476 <memcpy+0xe>
 800a482:	bd10      	pop	{r4, pc}
 800a484:	0000      	movs	r0, r0
	...

0800a488 <nan>:
 800a488:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a490 <nan+0x8>
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	00000000 	.word	0x00000000
 800a494:	7ff80000 	.word	0x7ff80000

0800a498 <__assert_func>:
 800a498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a49a:	4614      	mov	r4, r2
 800a49c:	461a      	mov	r2, r3
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <__assert_func+0x2c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	68d8      	ldr	r0, [r3, #12]
 800a4a6:	b14c      	cbz	r4, 800a4bc <__assert_func+0x24>
 800a4a8:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <__assert_func+0x30>)
 800a4aa:	9100      	str	r1, [sp, #0]
 800a4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4b0:	4906      	ldr	r1, [pc, #24]	; (800a4cc <__assert_func+0x34>)
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	f000 fbca 	bl	800ac4c <fiprintf>
 800a4b8:	f000 fbda 	bl	800ac70 <abort>
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <__assert_func+0x38>)
 800a4be:	461c      	mov	r4, r3
 800a4c0:	e7f3      	b.n	800a4aa <__assert_func+0x12>
 800a4c2:	bf00      	nop
 800a4c4:	2000006c 	.word	0x2000006c
 800a4c8:	0800d41a 	.word	0x0800d41a
 800a4cc:	0800d427 	.word	0x0800d427
 800a4d0:	0800d455 	.word	0x0800d455

0800a4d4 <_calloc_r>:
 800a4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d6:	fba1 2402 	umull	r2, r4, r1, r2
 800a4da:	b94c      	cbnz	r4, 800a4f0 <_calloc_r+0x1c>
 800a4dc:	4611      	mov	r1, r2
 800a4de:	9201      	str	r2, [sp, #4]
 800a4e0:	f7fd ffb4 	bl	800844c <_malloc_r>
 800a4e4:	9a01      	ldr	r2, [sp, #4]
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	b930      	cbnz	r0, 800a4f8 <_calloc_r+0x24>
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	b003      	add	sp, #12
 800a4ee:	bd30      	pop	{r4, r5, pc}
 800a4f0:	220c      	movs	r2, #12
 800a4f2:	6002      	str	r2, [r0, #0]
 800a4f4:	2500      	movs	r5, #0
 800a4f6:	e7f8      	b.n	800a4ea <_calloc_r+0x16>
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f7fd f833 	bl	8007564 <memset>
 800a4fe:	e7f4      	b.n	800a4ea <_calloc_r+0x16>

0800a500 <rshift>:
 800a500:	6903      	ldr	r3, [r0, #16]
 800a502:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a50a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a50e:	f100 0414 	add.w	r4, r0, #20
 800a512:	dd45      	ble.n	800a5a0 <rshift+0xa0>
 800a514:	f011 011f 	ands.w	r1, r1, #31
 800a518:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a51c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a520:	d10c      	bne.n	800a53c <rshift+0x3c>
 800a522:	f100 0710 	add.w	r7, r0, #16
 800a526:	4629      	mov	r1, r5
 800a528:	42b1      	cmp	r1, r6
 800a52a:	d334      	bcc.n	800a596 <rshift+0x96>
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	1eea      	subs	r2, r5, #3
 800a532:	4296      	cmp	r6, r2
 800a534:	bf38      	it	cc
 800a536:	2300      	movcc	r3, #0
 800a538:	4423      	add	r3, r4
 800a53a:	e015      	b.n	800a568 <rshift+0x68>
 800a53c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a540:	f1c1 0820 	rsb	r8, r1, #32
 800a544:	40cf      	lsrs	r7, r1
 800a546:	f105 0e04 	add.w	lr, r5, #4
 800a54a:	46a1      	mov	r9, r4
 800a54c:	4576      	cmp	r6, lr
 800a54e:	46f4      	mov	ip, lr
 800a550:	d815      	bhi.n	800a57e <rshift+0x7e>
 800a552:	1a9a      	subs	r2, r3, r2
 800a554:	0092      	lsls	r2, r2, #2
 800a556:	3a04      	subs	r2, #4
 800a558:	3501      	adds	r5, #1
 800a55a:	42ae      	cmp	r6, r5
 800a55c:	bf38      	it	cc
 800a55e:	2200      	movcc	r2, #0
 800a560:	18a3      	adds	r3, r4, r2
 800a562:	50a7      	str	r7, [r4, r2]
 800a564:	b107      	cbz	r7, 800a568 <rshift+0x68>
 800a566:	3304      	adds	r3, #4
 800a568:	1b1a      	subs	r2, r3, r4
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a570:	bf08      	it	eq
 800a572:	2300      	moveq	r3, #0
 800a574:	6102      	str	r2, [r0, #16]
 800a576:	bf08      	it	eq
 800a578:	6143      	streq	r3, [r0, #20]
 800a57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57e:	f8dc c000 	ldr.w	ip, [ip]
 800a582:	fa0c fc08 	lsl.w	ip, ip, r8
 800a586:	ea4c 0707 	orr.w	r7, ip, r7
 800a58a:	f849 7b04 	str.w	r7, [r9], #4
 800a58e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a592:	40cf      	lsrs	r7, r1
 800a594:	e7da      	b.n	800a54c <rshift+0x4c>
 800a596:	f851 cb04 	ldr.w	ip, [r1], #4
 800a59a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a59e:	e7c3      	b.n	800a528 <rshift+0x28>
 800a5a0:	4623      	mov	r3, r4
 800a5a2:	e7e1      	b.n	800a568 <rshift+0x68>

0800a5a4 <__hexdig_fun>:
 800a5a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5a8:	2b09      	cmp	r3, #9
 800a5aa:	d802      	bhi.n	800a5b2 <__hexdig_fun+0xe>
 800a5ac:	3820      	subs	r0, #32
 800a5ae:	b2c0      	uxtb	r0, r0
 800a5b0:	4770      	bx	lr
 800a5b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d801      	bhi.n	800a5be <__hexdig_fun+0x1a>
 800a5ba:	3847      	subs	r0, #71	; 0x47
 800a5bc:	e7f7      	b.n	800a5ae <__hexdig_fun+0xa>
 800a5be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	d801      	bhi.n	800a5ca <__hexdig_fun+0x26>
 800a5c6:	3827      	subs	r0, #39	; 0x27
 800a5c8:	e7f1      	b.n	800a5ae <__hexdig_fun+0xa>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <__gethex>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	4617      	mov	r7, r2
 800a5d6:	680a      	ldr	r2, [r1, #0]
 800a5d8:	b085      	sub	sp, #20
 800a5da:	f102 0b02 	add.w	fp, r2, #2
 800a5de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5e6:	4681      	mov	r9, r0
 800a5e8:	468a      	mov	sl, r1
 800a5ea:	9302      	str	r3, [sp, #8]
 800a5ec:	32fe      	adds	r2, #254	; 0xfe
 800a5ee:	eb02 030b 	add.w	r3, r2, fp
 800a5f2:	46d8      	mov	r8, fp
 800a5f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	2830      	cmp	r0, #48	; 0x30
 800a5fc:	d0f7      	beq.n	800a5ee <__gethex+0x1e>
 800a5fe:	f7ff ffd1 	bl	800a5a4 <__hexdig_fun>
 800a602:	4604      	mov	r4, r0
 800a604:	2800      	cmp	r0, #0
 800a606:	d138      	bne.n	800a67a <__gethex+0xaa>
 800a608:	49a7      	ldr	r1, [pc, #668]	; (800a8a8 <__gethex+0x2d8>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	4640      	mov	r0, r8
 800a60e:	f7ff fee7 	bl	800a3e0 <strncmp>
 800a612:	4606      	mov	r6, r0
 800a614:	2800      	cmp	r0, #0
 800a616:	d169      	bne.n	800a6ec <__gethex+0x11c>
 800a618:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a61c:	465d      	mov	r5, fp
 800a61e:	f7ff ffc1 	bl	800a5a4 <__hexdig_fun>
 800a622:	2800      	cmp	r0, #0
 800a624:	d064      	beq.n	800a6f0 <__gethex+0x120>
 800a626:	465a      	mov	r2, fp
 800a628:	7810      	ldrb	r0, [r2, #0]
 800a62a:	2830      	cmp	r0, #48	; 0x30
 800a62c:	4690      	mov	r8, r2
 800a62e:	f102 0201 	add.w	r2, r2, #1
 800a632:	d0f9      	beq.n	800a628 <__gethex+0x58>
 800a634:	f7ff ffb6 	bl	800a5a4 <__hexdig_fun>
 800a638:	2301      	movs	r3, #1
 800a63a:	fab0 f480 	clz	r4, r0
 800a63e:	0964      	lsrs	r4, r4, #5
 800a640:	465e      	mov	r6, fp
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	4642      	mov	r2, r8
 800a646:	4615      	mov	r5, r2
 800a648:	3201      	adds	r2, #1
 800a64a:	7828      	ldrb	r0, [r5, #0]
 800a64c:	f7ff ffaa 	bl	800a5a4 <__hexdig_fun>
 800a650:	2800      	cmp	r0, #0
 800a652:	d1f8      	bne.n	800a646 <__gethex+0x76>
 800a654:	4994      	ldr	r1, [pc, #592]	; (800a8a8 <__gethex+0x2d8>)
 800a656:	2201      	movs	r2, #1
 800a658:	4628      	mov	r0, r5
 800a65a:	f7ff fec1 	bl	800a3e0 <strncmp>
 800a65e:	b978      	cbnz	r0, 800a680 <__gethex+0xb0>
 800a660:	b946      	cbnz	r6, 800a674 <__gethex+0xa4>
 800a662:	1c6e      	adds	r6, r5, #1
 800a664:	4632      	mov	r2, r6
 800a666:	4615      	mov	r5, r2
 800a668:	3201      	adds	r2, #1
 800a66a:	7828      	ldrb	r0, [r5, #0]
 800a66c:	f7ff ff9a 	bl	800a5a4 <__hexdig_fun>
 800a670:	2800      	cmp	r0, #0
 800a672:	d1f8      	bne.n	800a666 <__gethex+0x96>
 800a674:	1b73      	subs	r3, r6, r5
 800a676:	009e      	lsls	r6, r3, #2
 800a678:	e004      	b.n	800a684 <__gethex+0xb4>
 800a67a:	2400      	movs	r4, #0
 800a67c:	4626      	mov	r6, r4
 800a67e:	e7e1      	b.n	800a644 <__gethex+0x74>
 800a680:	2e00      	cmp	r6, #0
 800a682:	d1f7      	bne.n	800a674 <__gethex+0xa4>
 800a684:	782b      	ldrb	r3, [r5, #0]
 800a686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a68a:	2b50      	cmp	r3, #80	; 0x50
 800a68c:	d13d      	bne.n	800a70a <__gethex+0x13a>
 800a68e:	786b      	ldrb	r3, [r5, #1]
 800a690:	2b2b      	cmp	r3, #43	; 0x2b
 800a692:	d02f      	beq.n	800a6f4 <__gethex+0x124>
 800a694:	2b2d      	cmp	r3, #45	; 0x2d
 800a696:	d031      	beq.n	800a6fc <__gethex+0x12c>
 800a698:	1c69      	adds	r1, r5, #1
 800a69a:	f04f 0b00 	mov.w	fp, #0
 800a69e:	7808      	ldrb	r0, [r1, #0]
 800a6a0:	f7ff ff80 	bl	800a5a4 <__hexdig_fun>
 800a6a4:	1e42      	subs	r2, r0, #1
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	2a18      	cmp	r2, #24
 800a6aa:	d82e      	bhi.n	800a70a <__gethex+0x13a>
 800a6ac:	f1a0 0210 	sub.w	r2, r0, #16
 800a6b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6b4:	f7ff ff76 	bl	800a5a4 <__hexdig_fun>
 800a6b8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6bc:	fa5f fc8c 	uxtb.w	ip, ip
 800a6c0:	f1bc 0f18 	cmp.w	ip, #24
 800a6c4:	d91d      	bls.n	800a702 <__gethex+0x132>
 800a6c6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ca:	d000      	beq.n	800a6ce <__gethex+0xfe>
 800a6cc:	4252      	negs	r2, r2
 800a6ce:	4416      	add	r6, r2
 800a6d0:	f8ca 1000 	str.w	r1, [sl]
 800a6d4:	b1dc      	cbz	r4, 800a70e <__gethex+0x13e>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	bf14      	ite	ne
 800a6dc:	f04f 0800 	movne.w	r8, #0
 800a6e0:	f04f 0806 	moveq.w	r8, #6
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	b005      	add	sp, #20
 800a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ec:	4645      	mov	r5, r8
 800a6ee:	4626      	mov	r6, r4
 800a6f0:	2401      	movs	r4, #1
 800a6f2:	e7c7      	b.n	800a684 <__gethex+0xb4>
 800a6f4:	f04f 0b00 	mov.w	fp, #0
 800a6f8:	1ca9      	adds	r1, r5, #2
 800a6fa:	e7d0      	b.n	800a69e <__gethex+0xce>
 800a6fc:	f04f 0b01 	mov.w	fp, #1
 800a700:	e7fa      	b.n	800a6f8 <__gethex+0x128>
 800a702:	230a      	movs	r3, #10
 800a704:	fb03 0002 	mla	r0, r3, r2, r0
 800a708:	e7d0      	b.n	800a6ac <__gethex+0xdc>
 800a70a:	4629      	mov	r1, r5
 800a70c:	e7e0      	b.n	800a6d0 <__gethex+0x100>
 800a70e:	eba5 0308 	sub.w	r3, r5, r8
 800a712:	3b01      	subs	r3, #1
 800a714:	4621      	mov	r1, r4
 800a716:	2b07      	cmp	r3, #7
 800a718:	dc0a      	bgt.n	800a730 <__gethex+0x160>
 800a71a:	4648      	mov	r0, r9
 800a71c:	f7fd ff22 	bl	8008564 <_Balloc>
 800a720:	4604      	mov	r4, r0
 800a722:	b940      	cbnz	r0, 800a736 <__gethex+0x166>
 800a724:	4b61      	ldr	r3, [pc, #388]	; (800a8ac <__gethex+0x2dc>)
 800a726:	4602      	mov	r2, r0
 800a728:	21e4      	movs	r1, #228	; 0xe4
 800a72a:	4861      	ldr	r0, [pc, #388]	; (800a8b0 <__gethex+0x2e0>)
 800a72c:	f7ff feb4 	bl	800a498 <__assert_func>
 800a730:	3101      	adds	r1, #1
 800a732:	105b      	asrs	r3, r3, #1
 800a734:	e7ef      	b.n	800a716 <__gethex+0x146>
 800a736:	f100 0a14 	add.w	sl, r0, #20
 800a73a:	2300      	movs	r3, #0
 800a73c:	495a      	ldr	r1, [pc, #360]	; (800a8a8 <__gethex+0x2d8>)
 800a73e:	f8cd a004 	str.w	sl, [sp, #4]
 800a742:	469b      	mov	fp, r3
 800a744:	45a8      	cmp	r8, r5
 800a746:	d342      	bcc.n	800a7ce <__gethex+0x1fe>
 800a748:	9801      	ldr	r0, [sp, #4]
 800a74a:	f840 bb04 	str.w	fp, [r0], #4
 800a74e:	eba0 000a 	sub.w	r0, r0, sl
 800a752:	1080      	asrs	r0, r0, #2
 800a754:	6120      	str	r0, [r4, #16]
 800a756:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a75a:	4658      	mov	r0, fp
 800a75c:	f7fd fff4 	bl	8008748 <__hi0bits>
 800a760:	683d      	ldr	r5, [r7, #0]
 800a762:	eba8 0000 	sub.w	r0, r8, r0
 800a766:	42a8      	cmp	r0, r5
 800a768:	dd59      	ble.n	800a81e <__gethex+0x24e>
 800a76a:	eba0 0805 	sub.w	r8, r0, r5
 800a76e:	4641      	mov	r1, r8
 800a770:	4620      	mov	r0, r4
 800a772:	f7fe fb83 	bl	8008e7c <__any_on>
 800a776:	4683      	mov	fp, r0
 800a778:	b1b8      	cbz	r0, 800a7aa <__gethex+0x1da>
 800a77a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a77e:	1159      	asrs	r1, r3, #5
 800a780:	f003 021f 	and.w	r2, r3, #31
 800a784:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a788:	f04f 0b01 	mov.w	fp, #1
 800a78c:	fa0b f202 	lsl.w	r2, fp, r2
 800a790:	420a      	tst	r2, r1
 800a792:	d00a      	beq.n	800a7aa <__gethex+0x1da>
 800a794:	455b      	cmp	r3, fp
 800a796:	dd06      	ble.n	800a7a6 <__gethex+0x1d6>
 800a798:	f1a8 0102 	sub.w	r1, r8, #2
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7fe fb6d 	bl	8008e7c <__any_on>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d138      	bne.n	800a818 <__gethex+0x248>
 800a7a6:	f04f 0b02 	mov.w	fp, #2
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f7ff fea7 	bl	800a500 <rshift>
 800a7b2:	4446      	add	r6, r8
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	42b3      	cmp	r3, r6
 800a7b8:	da41      	bge.n	800a83e <__gethex+0x26e>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4648      	mov	r0, r9
 800a7be:	f7fd ff11 	bl	80085e4 <_Bfree>
 800a7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a7cc:	e78a      	b.n	800a6e4 <__gethex+0x114>
 800a7ce:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a7d2:	2a2e      	cmp	r2, #46	; 0x2e
 800a7d4:	d014      	beq.n	800a800 <__gethex+0x230>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d106      	bne.n	800a7e8 <__gethex+0x218>
 800a7da:	9b01      	ldr	r3, [sp, #4]
 800a7dc:	f843 bb04 	str.w	fp, [r3], #4
 800a7e0:	f04f 0b00 	mov.w	fp, #0
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	465b      	mov	r3, fp
 800a7e8:	7828      	ldrb	r0, [r5, #0]
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	f7ff feda 	bl	800a5a4 <__hexdig_fun>
 800a7f0:	9b03      	ldr	r3, [sp, #12]
 800a7f2:	f000 000f 	and.w	r0, r0, #15
 800a7f6:	4098      	lsls	r0, r3
 800a7f8:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	e7a1      	b.n	800a744 <__gethex+0x174>
 800a800:	45a8      	cmp	r8, r5
 800a802:	d8e8      	bhi.n	800a7d6 <__gethex+0x206>
 800a804:	2201      	movs	r2, #1
 800a806:	4628      	mov	r0, r5
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	f7ff fde9 	bl	800a3e0 <strncmp>
 800a80e:	4926      	ldr	r1, [pc, #152]	; (800a8a8 <__gethex+0x2d8>)
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	2800      	cmp	r0, #0
 800a814:	d1df      	bne.n	800a7d6 <__gethex+0x206>
 800a816:	e795      	b.n	800a744 <__gethex+0x174>
 800a818:	f04f 0b03 	mov.w	fp, #3
 800a81c:	e7c5      	b.n	800a7aa <__gethex+0x1da>
 800a81e:	da0b      	bge.n	800a838 <__gethex+0x268>
 800a820:	eba5 0800 	sub.w	r8, r5, r0
 800a824:	4621      	mov	r1, r4
 800a826:	4642      	mov	r2, r8
 800a828:	4648      	mov	r0, r9
 800a82a:	f7fe f8f5 	bl	8008a18 <__lshift>
 800a82e:	eba6 0608 	sub.w	r6, r6, r8
 800a832:	4604      	mov	r4, r0
 800a834:	f100 0a14 	add.w	sl, r0, #20
 800a838:	f04f 0b00 	mov.w	fp, #0
 800a83c:	e7ba      	b.n	800a7b4 <__gethex+0x1e4>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	42b3      	cmp	r3, r6
 800a842:	dd73      	ble.n	800a92c <__gethex+0x35c>
 800a844:	1b9e      	subs	r6, r3, r6
 800a846:	42b5      	cmp	r5, r6
 800a848:	dc34      	bgt.n	800a8b4 <__gethex+0x2e4>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d023      	beq.n	800a898 <__gethex+0x2c8>
 800a850:	2b03      	cmp	r3, #3
 800a852:	d025      	beq.n	800a8a0 <__gethex+0x2d0>
 800a854:	2b01      	cmp	r3, #1
 800a856:	d115      	bne.n	800a884 <__gethex+0x2b4>
 800a858:	42b5      	cmp	r5, r6
 800a85a:	d113      	bne.n	800a884 <__gethex+0x2b4>
 800a85c:	2d01      	cmp	r5, #1
 800a85e:	d10b      	bne.n	800a878 <__gethex+0x2a8>
 800a860:	9a02      	ldr	r2, [sp, #8]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	2301      	movs	r3, #1
 800a868:	6123      	str	r3, [r4, #16]
 800a86a:	f8ca 3000 	str.w	r3, [sl]
 800a86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a870:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a874:	601c      	str	r4, [r3, #0]
 800a876:	e735      	b.n	800a6e4 <__gethex+0x114>
 800a878:	1e69      	subs	r1, r5, #1
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7fe fafe 	bl	8008e7c <__any_on>
 800a880:	2800      	cmp	r0, #0
 800a882:	d1ed      	bne.n	800a860 <__gethex+0x290>
 800a884:	4621      	mov	r1, r4
 800a886:	4648      	mov	r0, r9
 800a888:	f7fd feac 	bl	80085e4 <_Bfree>
 800a88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a88e:	2300      	movs	r3, #0
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a896:	e725      	b.n	800a6e4 <__gethex+0x114>
 800a898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f2      	bne.n	800a884 <__gethex+0x2b4>
 800a89e:	e7df      	b.n	800a860 <__gethex+0x290>
 800a8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1dc      	bne.n	800a860 <__gethex+0x290>
 800a8a6:	e7ed      	b.n	800a884 <__gethex+0x2b4>
 800a8a8:	0800d2ac 	.word	0x0800d2ac
 800a8ac:	0800d145 	.word	0x0800d145
 800a8b0:	0800d456 	.word	0x0800d456
 800a8b4:	f106 38ff 	add.w	r8, r6, #4294967295
 800a8b8:	f1bb 0f00 	cmp.w	fp, #0
 800a8bc:	d133      	bne.n	800a926 <__gethex+0x356>
 800a8be:	f1b8 0f00 	cmp.w	r8, #0
 800a8c2:	d004      	beq.n	800a8ce <__gethex+0x2fe>
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7fe fad8 	bl	8008e7c <__any_on>
 800a8cc:	4683      	mov	fp, r0
 800a8ce:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8d8:	f008 081f 	and.w	r8, r8, #31
 800a8dc:	fa03 f308 	lsl.w	r3, r3, r8
 800a8e0:	4213      	tst	r3, r2
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	bf18      	it	ne
 800a8e8:	f04b 0b02 	orrne.w	fp, fp, #2
 800a8ec:	1bad      	subs	r5, r5, r6
 800a8ee:	f7ff fe07 	bl	800a500 <rshift>
 800a8f2:	687e      	ldr	r6, [r7, #4]
 800a8f4:	f04f 0802 	mov.w	r8, #2
 800a8f8:	f1bb 0f00 	cmp.w	fp, #0
 800a8fc:	d04a      	beq.n	800a994 <__gethex+0x3c4>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b02      	cmp	r3, #2
 800a902:	d016      	beq.n	800a932 <__gethex+0x362>
 800a904:	2b03      	cmp	r3, #3
 800a906:	d018      	beq.n	800a93a <__gethex+0x36a>
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d109      	bne.n	800a920 <__gethex+0x350>
 800a90c:	f01b 0f02 	tst.w	fp, #2
 800a910:	d006      	beq.n	800a920 <__gethex+0x350>
 800a912:	f8da 3000 	ldr.w	r3, [sl]
 800a916:	ea4b 0b03 	orr.w	fp, fp, r3
 800a91a:	f01b 0f01 	tst.w	fp, #1
 800a91e:	d10f      	bne.n	800a940 <__gethex+0x370>
 800a920:	f048 0810 	orr.w	r8, r8, #16
 800a924:	e036      	b.n	800a994 <__gethex+0x3c4>
 800a926:	f04f 0b01 	mov.w	fp, #1
 800a92a:	e7d0      	b.n	800a8ce <__gethex+0x2fe>
 800a92c:	f04f 0801 	mov.w	r8, #1
 800a930:	e7e2      	b.n	800a8f8 <__gethex+0x328>
 800a932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a934:	f1c3 0301 	rsb	r3, r3, #1
 800a938:	930f      	str	r3, [sp, #60]	; 0x3c
 800a93a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0ef      	beq.n	800a920 <__gethex+0x350>
 800a940:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a944:	f104 0214 	add.w	r2, r4, #20
 800a948:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a952:	2300      	movs	r3, #0
 800a954:	4694      	mov	ip, r2
 800a956:	f852 1b04 	ldr.w	r1, [r2], #4
 800a95a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a95e:	d01e      	beq.n	800a99e <__gethex+0x3ce>
 800a960:	3101      	adds	r1, #1
 800a962:	f8cc 1000 	str.w	r1, [ip]
 800a966:	f1b8 0f02 	cmp.w	r8, #2
 800a96a:	f104 0214 	add.w	r2, r4, #20
 800a96e:	d13d      	bne.n	800a9ec <__gethex+0x41c>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3b01      	subs	r3, #1
 800a974:	42ab      	cmp	r3, r5
 800a976:	d10b      	bne.n	800a990 <__gethex+0x3c0>
 800a978:	1169      	asrs	r1, r5, #5
 800a97a:	2301      	movs	r3, #1
 800a97c:	f005 051f 	and.w	r5, r5, #31
 800a980:	fa03 f505 	lsl.w	r5, r3, r5
 800a984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a988:	421d      	tst	r5, r3
 800a98a:	bf18      	it	ne
 800a98c:	f04f 0801 	movne.w	r8, #1
 800a990:	f048 0820 	orr.w	r8, r8, #32
 800a994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a996:	601c      	str	r4, [r3, #0]
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	601e      	str	r6, [r3, #0]
 800a99c:	e6a2      	b.n	800a6e4 <__gethex+0x114>
 800a99e:	4290      	cmp	r0, r2
 800a9a0:	f842 3c04 	str.w	r3, [r2, #-4]
 800a9a4:	d8d6      	bhi.n	800a954 <__gethex+0x384>
 800a9a6:	68a2      	ldr	r2, [r4, #8]
 800a9a8:	4593      	cmp	fp, r2
 800a9aa:	db17      	blt.n	800a9dc <__gethex+0x40c>
 800a9ac:	6861      	ldr	r1, [r4, #4]
 800a9ae:	4648      	mov	r0, r9
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	f7fd fdd7 	bl	8008564 <_Balloc>
 800a9b6:	4682      	mov	sl, r0
 800a9b8:	b918      	cbnz	r0, 800a9c2 <__gethex+0x3f2>
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <__gethex+0x458>)
 800a9bc:	4602      	mov	r2, r0
 800a9be:	2184      	movs	r1, #132	; 0x84
 800a9c0:	e6b3      	b.n	800a72a <__gethex+0x15a>
 800a9c2:	6922      	ldr	r2, [r4, #16]
 800a9c4:	3202      	adds	r2, #2
 800a9c6:	f104 010c 	add.w	r1, r4, #12
 800a9ca:	0092      	lsls	r2, r2, #2
 800a9cc:	300c      	adds	r0, #12
 800a9ce:	f7ff fd4b 	bl	800a468 <memcpy>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	4648      	mov	r0, r9
 800a9d6:	f7fd fe05 	bl	80085e4 <_Bfree>
 800a9da:	4654      	mov	r4, sl
 800a9dc:	6922      	ldr	r2, [r4, #16]
 800a9de:	1c51      	adds	r1, r2, #1
 800a9e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9e4:	6121      	str	r1, [r4, #16]
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	6151      	str	r1, [r2, #20]
 800a9ea:	e7bc      	b.n	800a966 <__gethex+0x396>
 800a9ec:	6921      	ldr	r1, [r4, #16]
 800a9ee:	4559      	cmp	r1, fp
 800a9f0:	dd0b      	ble.n	800aa0a <__gethex+0x43a>
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f7ff fd83 	bl	800a500 <rshift>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	42b3      	cmp	r3, r6
 800aa00:	f6ff aedb 	blt.w	800a7ba <__gethex+0x1ea>
 800aa04:	f04f 0801 	mov.w	r8, #1
 800aa08:	e7c2      	b.n	800a990 <__gethex+0x3c0>
 800aa0a:	f015 051f 	ands.w	r5, r5, #31
 800aa0e:	d0f9      	beq.n	800aa04 <__gethex+0x434>
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	441a      	add	r2, r3
 800aa14:	f1c5 0520 	rsb	r5, r5, #32
 800aa18:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aa1c:	f7fd fe94 	bl	8008748 <__hi0bits>
 800aa20:	42a8      	cmp	r0, r5
 800aa22:	dbe6      	blt.n	800a9f2 <__gethex+0x422>
 800aa24:	e7ee      	b.n	800aa04 <__gethex+0x434>
 800aa26:	bf00      	nop
 800aa28:	0800d145 	.word	0x0800d145

0800aa2c <L_shift>:
 800aa2c:	f1c2 0208 	rsb	r2, r2, #8
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	b570      	push	{r4, r5, r6, lr}
 800aa34:	f1c2 0620 	rsb	r6, r2, #32
 800aa38:	6843      	ldr	r3, [r0, #4]
 800aa3a:	6804      	ldr	r4, [r0, #0]
 800aa3c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa40:	432c      	orrs	r4, r5
 800aa42:	40d3      	lsrs	r3, r2
 800aa44:	6004      	str	r4, [r0, #0]
 800aa46:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa4a:	4288      	cmp	r0, r1
 800aa4c:	d3f4      	bcc.n	800aa38 <L_shift+0xc>
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}

0800aa50 <__match>:
 800aa50:	b530      	push	{r4, r5, lr}
 800aa52:	6803      	ldr	r3, [r0, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa5a:	b914      	cbnz	r4, 800aa62 <__match+0x12>
 800aa5c:	6003      	str	r3, [r0, #0]
 800aa5e:	2001      	movs	r0, #1
 800aa60:	bd30      	pop	{r4, r5, pc}
 800aa62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa6a:	2d19      	cmp	r5, #25
 800aa6c:	bf98      	it	ls
 800aa6e:	3220      	addls	r2, #32
 800aa70:	42a2      	cmp	r2, r4
 800aa72:	d0f0      	beq.n	800aa56 <__match+0x6>
 800aa74:	2000      	movs	r0, #0
 800aa76:	e7f3      	b.n	800aa60 <__match+0x10>

0800aa78 <__hexnan>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	680b      	ldr	r3, [r1, #0]
 800aa7e:	6801      	ldr	r1, [r0, #0]
 800aa80:	115e      	asrs	r6, r3, #5
 800aa82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa86:	f013 031f 	ands.w	r3, r3, #31
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	bf18      	it	ne
 800aa8e:	3604      	addne	r6, #4
 800aa90:	2500      	movs	r5, #0
 800aa92:	1f37      	subs	r7, r6, #4
 800aa94:	4682      	mov	sl, r0
 800aa96:	4690      	mov	r8, r2
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa9e:	46b9      	mov	r9, r7
 800aaa0:	463c      	mov	r4, r7
 800aaa2:	9502      	str	r5, [sp, #8]
 800aaa4:	46ab      	mov	fp, r5
 800aaa6:	784a      	ldrb	r2, [r1, #1]
 800aaa8:	1c4b      	adds	r3, r1, #1
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	b342      	cbz	r2, 800ab00 <__hexnan+0x88>
 800aaae:	4610      	mov	r0, r2
 800aab0:	9105      	str	r1, [sp, #20]
 800aab2:	9204      	str	r2, [sp, #16]
 800aab4:	f7ff fd76 	bl	800a5a4 <__hexdig_fun>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d14f      	bne.n	800ab5c <__hexnan+0xe4>
 800aabc:	9a04      	ldr	r2, [sp, #16]
 800aabe:	9905      	ldr	r1, [sp, #20]
 800aac0:	2a20      	cmp	r2, #32
 800aac2:	d818      	bhi.n	800aaf6 <__hexnan+0x7e>
 800aac4:	9b02      	ldr	r3, [sp, #8]
 800aac6:	459b      	cmp	fp, r3
 800aac8:	dd13      	ble.n	800aaf2 <__hexnan+0x7a>
 800aaca:	454c      	cmp	r4, r9
 800aacc:	d206      	bcs.n	800aadc <__hexnan+0x64>
 800aace:	2d07      	cmp	r5, #7
 800aad0:	dc04      	bgt.n	800aadc <__hexnan+0x64>
 800aad2:	462a      	mov	r2, r5
 800aad4:	4649      	mov	r1, r9
 800aad6:	4620      	mov	r0, r4
 800aad8:	f7ff ffa8 	bl	800aa2c <L_shift>
 800aadc:	4544      	cmp	r4, r8
 800aade:	d950      	bls.n	800ab82 <__hexnan+0x10a>
 800aae0:	2300      	movs	r3, #0
 800aae2:	f1a4 0904 	sub.w	r9, r4, #4
 800aae6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaea:	f8cd b008 	str.w	fp, [sp, #8]
 800aaee:	464c      	mov	r4, r9
 800aaf0:	461d      	mov	r5, r3
 800aaf2:	9903      	ldr	r1, [sp, #12]
 800aaf4:	e7d7      	b.n	800aaa6 <__hexnan+0x2e>
 800aaf6:	2a29      	cmp	r2, #41	; 0x29
 800aaf8:	d155      	bne.n	800aba6 <__hexnan+0x12e>
 800aafa:	3102      	adds	r1, #2
 800aafc:	f8ca 1000 	str.w	r1, [sl]
 800ab00:	f1bb 0f00 	cmp.w	fp, #0
 800ab04:	d04f      	beq.n	800aba6 <__hexnan+0x12e>
 800ab06:	454c      	cmp	r4, r9
 800ab08:	d206      	bcs.n	800ab18 <__hexnan+0xa0>
 800ab0a:	2d07      	cmp	r5, #7
 800ab0c:	dc04      	bgt.n	800ab18 <__hexnan+0xa0>
 800ab0e:	462a      	mov	r2, r5
 800ab10:	4649      	mov	r1, r9
 800ab12:	4620      	mov	r0, r4
 800ab14:	f7ff ff8a 	bl	800aa2c <L_shift>
 800ab18:	4544      	cmp	r4, r8
 800ab1a:	d934      	bls.n	800ab86 <__hexnan+0x10e>
 800ab1c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab20:	4623      	mov	r3, r4
 800ab22:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab26:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab2a:	429f      	cmp	r7, r3
 800ab2c:	d2f9      	bcs.n	800ab22 <__hexnan+0xaa>
 800ab2e:	1b3b      	subs	r3, r7, r4
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	3304      	adds	r3, #4
 800ab36:	3e03      	subs	r6, #3
 800ab38:	3401      	adds	r4, #1
 800ab3a:	42a6      	cmp	r6, r4
 800ab3c:	bf38      	it	cc
 800ab3e:	2304      	movcc	r3, #4
 800ab40:	4443      	add	r3, r8
 800ab42:	2200      	movs	r2, #0
 800ab44:	f843 2b04 	str.w	r2, [r3], #4
 800ab48:	429f      	cmp	r7, r3
 800ab4a:	d2fb      	bcs.n	800ab44 <__hexnan+0xcc>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	b91b      	cbnz	r3, 800ab58 <__hexnan+0xe0>
 800ab50:	4547      	cmp	r7, r8
 800ab52:	d126      	bne.n	800aba2 <__hexnan+0x12a>
 800ab54:	2301      	movs	r3, #1
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	2005      	movs	r0, #5
 800ab5a:	e025      	b.n	800aba8 <__hexnan+0x130>
 800ab5c:	3501      	adds	r5, #1
 800ab5e:	2d08      	cmp	r5, #8
 800ab60:	f10b 0b01 	add.w	fp, fp, #1
 800ab64:	dd06      	ble.n	800ab74 <__hexnan+0xfc>
 800ab66:	4544      	cmp	r4, r8
 800ab68:	d9c3      	bls.n	800aaf2 <__hexnan+0x7a>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab70:	2501      	movs	r5, #1
 800ab72:	3c04      	subs	r4, #4
 800ab74:	6822      	ldr	r2, [r4, #0]
 800ab76:	f000 000f 	and.w	r0, r0, #15
 800ab7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab7e:	6020      	str	r0, [r4, #0]
 800ab80:	e7b7      	b.n	800aaf2 <__hexnan+0x7a>
 800ab82:	2508      	movs	r5, #8
 800ab84:	e7b5      	b.n	800aaf2 <__hexnan+0x7a>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0df      	beq.n	800ab4c <__hexnan+0xd4>
 800ab8c:	f1c3 0320 	rsb	r3, r3, #32
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	40da      	lsrs	r2, r3
 800ab96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	f846 3c04 	str.w	r3, [r6, #-4]
 800aba0:	e7d4      	b.n	800ab4c <__hexnan+0xd4>
 800aba2:	3f04      	subs	r7, #4
 800aba4:	e7d2      	b.n	800ab4c <__hexnan+0xd4>
 800aba6:	2004      	movs	r0, #4
 800aba8:	b007      	add	sp, #28
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abae <__ascii_mbtowc>:
 800abae:	b082      	sub	sp, #8
 800abb0:	b901      	cbnz	r1, 800abb4 <__ascii_mbtowc+0x6>
 800abb2:	a901      	add	r1, sp, #4
 800abb4:	b142      	cbz	r2, 800abc8 <__ascii_mbtowc+0x1a>
 800abb6:	b14b      	cbz	r3, 800abcc <__ascii_mbtowc+0x1e>
 800abb8:	7813      	ldrb	r3, [r2, #0]
 800abba:	600b      	str	r3, [r1, #0]
 800abbc:	7812      	ldrb	r2, [r2, #0]
 800abbe:	1e10      	subs	r0, r2, #0
 800abc0:	bf18      	it	ne
 800abc2:	2001      	movne	r0, #1
 800abc4:	b002      	add	sp, #8
 800abc6:	4770      	bx	lr
 800abc8:	4610      	mov	r0, r2
 800abca:	e7fb      	b.n	800abc4 <__ascii_mbtowc+0x16>
 800abcc:	f06f 0001 	mvn.w	r0, #1
 800abd0:	e7f8      	b.n	800abc4 <__ascii_mbtowc+0x16>

0800abd2 <_realloc_r>:
 800abd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	4680      	mov	r8, r0
 800abd8:	4614      	mov	r4, r2
 800abda:	460e      	mov	r6, r1
 800abdc:	b921      	cbnz	r1, 800abe8 <_realloc_r+0x16>
 800abde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	4611      	mov	r1, r2
 800abe4:	f7fd bc32 	b.w	800844c <_malloc_r>
 800abe8:	b92a      	cbnz	r2, 800abf6 <_realloc_r+0x24>
 800abea:	f7fd fbbb 	bl	8008364 <_free_r>
 800abee:	4625      	mov	r5, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf6:	f000 f842 	bl	800ac7e <_malloc_usable_size_r>
 800abfa:	4284      	cmp	r4, r0
 800abfc:	4607      	mov	r7, r0
 800abfe:	d802      	bhi.n	800ac06 <_realloc_r+0x34>
 800ac00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac04:	d812      	bhi.n	800ac2c <_realloc_r+0x5a>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f7fd fc1f 	bl	800844c <_malloc_r>
 800ac0e:	4605      	mov	r5, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d0ed      	beq.n	800abf0 <_realloc_r+0x1e>
 800ac14:	42bc      	cmp	r4, r7
 800ac16:	4622      	mov	r2, r4
 800ac18:	4631      	mov	r1, r6
 800ac1a:	bf28      	it	cs
 800ac1c:	463a      	movcs	r2, r7
 800ac1e:	f7ff fc23 	bl	800a468 <memcpy>
 800ac22:	4631      	mov	r1, r6
 800ac24:	4640      	mov	r0, r8
 800ac26:	f7fd fb9d 	bl	8008364 <_free_r>
 800ac2a:	e7e1      	b.n	800abf0 <_realloc_r+0x1e>
 800ac2c:	4635      	mov	r5, r6
 800ac2e:	e7df      	b.n	800abf0 <_realloc_r+0x1e>

0800ac30 <__ascii_wctomb>:
 800ac30:	b149      	cbz	r1, 800ac46 <__ascii_wctomb+0x16>
 800ac32:	2aff      	cmp	r2, #255	; 0xff
 800ac34:	bf85      	ittet	hi
 800ac36:	238a      	movhi	r3, #138	; 0x8a
 800ac38:	6003      	strhi	r3, [r0, #0]
 800ac3a:	700a      	strbls	r2, [r1, #0]
 800ac3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac40:	bf98      	it	ls
 800ac42:	2001      	movls	r0, #1
 800ac44:	4770      	bx	lr
 800ac46:	4608      	mov	r0, r1
 800ac48:	4770      	bx	lr
	...

0800ac4c <fiprintf>:
 800ac4c:	b40e      	push	{r1, r2, r3}
 800ac4e:	b503      	push	{r0, r1, lr}
 800ac50:	4601      	mov	r1, r0
 800ac52:	ab03      	add	r3, sp, #12
 800ac54:	4805      	ldr	r0, [pc, #20]	; (800ac6c <fiprintf+0x20>)
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	f7ff f947 	bl	8009ef0 <_vfiprintf_r>
 800ac62:	b002      	add	sp, #8
 800ac64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac68:	b003      	add	sp, #12
 800ac6a:	4770      	bx	lr
 800ac6c:	2000006c 	.word	0x2000006c

0800ac70 <abort>:
 800ac70:	b508      	push	{r3, lr}
 800ac72:	2006      	movs	r0, #6
 800ac74:	f000 f834 	bl	800ace0 <raise>
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f7f7 fdb7 	bl	80027ec <_exit>

0800ac7e <_malloc_usable_size_r>:
 800ac7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac82:	1f18      	subs	r0, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfbc      	itt	lt
 800ac88:	580b      	ldrlt	r3, [r1, r0]
 800ac8a:	18c0      	addlt	r0, r0, r3
 800ac8c:	4770      	bx	lr

0800ac8e <_raise_r>:
 800ac8e:	291f      	cmp	r1, #31
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	d904      	bls.n	800aca2 <_raise_r+0x14>
 800ac98:	2316      	movs	r3, #22
 800ac9a:	6003      	str	r3, [r0, #0]
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	bd38      	pop	{r3, r4, r5, pc}
 800aca2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aca4:	b112      	cbz	r2, 800acac <_raise_r+0x1e>
 800aca6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acaa:	b94b      	cbnz	r3, 800acc0 <_raise_r+0x32>
 800acac:	4620      	mov	r0, r4
 800acae:	f000 f831 	bl	800ad14 <_getpid_r>
 800acb2:	462a      	mov	r2, r5
 800acb4:	4601      	mov	r1, r0
 800acb6:	4620      	mov	r0, r4
 800acb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acbc:	f000 b818 	b.w	800acf0 <_kill_r>
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d00a      	beq.n	800acda <_raise_r+0x4c>
 800acc4:	1c59      	adds	r1, r3, #1
 800acc6:	d103      	bne.n	800acd0 <_raise_r+0x42>
 800acc8:	2316      	movs	r3, #22
 800acca:	6003      	str	r3, [r0, #0]
 800accc:	2001      	movs	r0, #1
 800acce:	e7e7      	b.n	800aca0 <_raise_r+0x12>
 800acd0:	2400      	movs	r4, #0
 800acd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acd6:	4628      	mov	r0, r5
 800acd8:	4798      	blx	r3
 800acda:	2000      	movs	r0, #0
 800acdc:	e7e0      	b.n	800aca0 <_raise_r+0x12>
	...

0800ace0 <raise>:
 800ace0:	4b02      	ldr	r3, [pc, #8]	; (800acec <raise+0xc>)
 800ace2:	4601      	mov	r1, r0
 800ace4:	6818      	ldr	r0, [r3, #0]
 800ace6:	f7ff bfd2 	b.w	800ac8e <_raise_r>
 800acea:	bf00      	nop
 800acec:	2000006c 	.word	0x2000006c

0800acf0 <_kill_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	; (800ad10 <_kill_r+0x20>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	4611      	mov	r1, r2
 800acfc:	602b      	str	r3, [r5, #0]
 800acfe:	f7f7 fd65 	bl	80027cc <_kill>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	d102      	bne.n	800ad0c <_kill_r+0x1c>
 800ad06:	682b      	ldr	r3, [r5, #0]
 800ad08:	b103      	cbz	r3, 800ad0c <_kill_r+0x1c>
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	bd38      	pop	{r3, r4, r5, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000910 	.word	0x20000910

0800ad14 <_getpid_r>:
 800ad14:	f7f7 bd52 	b.w	80027bc <_getpid>

0800ad18 <atan2>:
 800ad18:	f000 b982 	b.w	800b020 <__ieee754_atan2>

0800ad1c <pow>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	ed2d 8b02 	vpush	{d8}
 800ad22:	eeb0 8a40 	vmov.f32	s16, s0
 800ad26:	eef0 8a60 	vmov.f32	s17, s1
 800ad2a:	ec55 4b11 	vmov	r4, r5, d1
 800ad2e:	f000 fa3f 	bl	800b1b0 <__ieee754_pow>
 800ad32:	4622      	mov	r2, r4
 800ad34:	462b      	mov	r3, r5
 800ad36:	4620      	mov	r0, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	ec57 6b10 	vmov	r6, r7, d0
 800ad3e:	f7f5 ff1d 	bl	8000b7c <__aeabi_dcmpun>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d13b      	bne.n	800adbe <pow+0xa2>
 800ad46:	ec51 0b18 	vmov	r0, r1, d8
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f7f5 fee3 	bl	8000b18 <__aeabi_dcmpeq>
 800ad52:	b1b8      	cbz	r0, 800ad84 <pow+0x68>
 800ad54:	2200      	movs	r2, #0
 800ad56:	2300      	movs	r3, #0
 800ad58:	4620      	mov	r0, r4
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	f7f5 fedc 	bl	8000b18 <__aeabi_dcmpeq>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d146      	bne.n	800adf2 <pow+0xd6>
 800ad64:	ec45 4b10 	vmov	d0, r4, r5
 800ad68:	f000 f874 	bl	800ae54 <finite>
 800ad6c:	b338      	cbz	r0, 800adbe <pow+0xa2>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2300      	movs	r3, #0
 800ad72:	4620      	mov	r0, r4
 800ad74:	4629      	mov	r1, r5
 800ad76:	f7f5 fed9 	bl	8000b2c <__aeabi_dcmplt>
 800ad7a:	b300      	cbz	r0, 800adbe <pow+0xa2>
 800ad7c:	f7fc fc44 	bl	8007608 <__errno>
 800ad80:	2322      	movs	r3, #34	; 0x22
 800ad82:	e01b      	b.n	800adbc <pow+0xa0>
 800ad84:	ec47 6b10 	vmov	d0, r6, r7
 800ad88:	f000 f864 	bl	800ae54 <finite>
 800ad8c:	b9e0      	cbnz	r0, 800adc8 <pow+0xac>
 800ad8e:	eeb0 0a48 	vmov.f32	s0, s16
 800ad92:	eef0 0a68 	vmov.f32	s1, s17
 800ad96:	f000 f85d 	bl	800ae54 <finite>
 800ad9a:	b1a8      	cbz	r0, 800adc8 <pow+0xac>
 800ad9c:	ec45 4b10 	vmov	d0, r4, r5
 800ada0:	f000 f858 	bl	800ae54 <finite>
 800ada4:	b180      	cbz	r0, 800adc8 <pow+0xac>
 800ada6:	4632      	mov	r2, r6
 800ada8:	463b      	mov	r3, r7
 800adaa:	4630      	mov	r0, r6
 800adac:	4639      	mov	r1, r7
 800adae:	f7f5 fee5 	bl	8000b7c <__aeabi_dcmpun>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0e2      	beq.n	800ad7c <pow+0x60>
 800adb6:	f7fc fc27 	bl	8007608 <__errno>
 800adba:	2321      	movs	r3, #33	; 0x21
 800adbc:	6003      	str	r3, [r0, #0]
 800adbe:	ecbd 8b02 	vpop	{d8}
 800adc2:	ec47 6b10 	vmov	d0, r6, r7
 800adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc8:	2200      	movs	r2, #0
 800adca:	2300      	movs	r3, #0
 800adcc:	4630      	mov	r0, r6
 800adce:	4639      	mov	r1, r7
 800add0:	f7f5 fea2 	bl	8000b18 <__aeabi_dcmpeq>
 800add4:	2800      	cmp	r0, #0
 800add6:	d0f2      	beq.n	800adbe <pow+0xa2>
 800add8:	eeb0 0a48 	vmov.f32	s0, s16
 800addc:	eef0 0a68 	vmov.f32	s1, s17
 800ade0:	f000 f838 	bl	800ae54 <finite>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d0ea      	beq.n	800adbe <pow+0xa2>
 800ade8:	ec45 4b10 	vmov	d0, r4, r5
 800adec:	f000 f832 	bl	800ae54 <finite>
 800adf0:	e7c3      	b.n	800ad7a <pow+0x5e>
 800adf2:	4f01      	ldr	r7, [pc, #4]	; (800adf8 <pow+0xdc>)
 800adf4:	2600      	movs	r6, #0
 800adf6:	e7e2      	b.n	800adbe <pow+0xa2>
 800adf8:	3ff00000 	.word	0x3ff00000

0800adfc <sqrt>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	ed2d 8b02 	vpush	{d8}
 800ae02:	ec55 4b10 	vmov	r4, r5, d0
 800ae06:	f000 f831 	bl	800ae6c <__ieee754_sqrt>
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	eeb0 8a40 	vmov.f32	s16, s0
 800ae16:	eef0 8a60 	vmov.f32	s17, s1
 800ae1a:	f7f5 feaf 	bl	8000b7c <__aeabi_dcmpun>
 800ae1e:	b990      	cbnz	r0, 800ae46 <sqrt+0x4a>
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	4620      	mov	r0, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7f5 fe80 	bl	8000b2c <__aeabi_dcmplt>
 800ae2c:	b158      	cbz	r0, 800ae46 <sqrt+0x4a>
 800ae2e:	f7fc fbeb 	bl	8007608 <__errno>
 800ae32:	2321      	movs	r3, #33	; 0x21
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	2200      	movs	r2, #0
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f7f5 fd2d 	bl	800089c <__aeabi_ddiv>
 800ae42:	ec41 0b18 	vmov	d8, r0, r1
 800ae46:	eeb0 0a48 	vmov.f32	s0, s16
 800ae4a:	eef0 0a68 	vmov.f32	s1, s17
 800ae4e:	ecbd 8b02 	vpop	{d8}
 800ae52:	bd38      	pop	{r3, r4, r5, pc}

0800ae54 <finite>:
 800ae54:	b082      	sub	sp, #8
 800ae56:	ed8d 0b00 	vstr	d0, [sp]
 800ae5a:	9801      	ldr	r0, [sp, #4]
 800ae5c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ae60:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae64:	0fc0      	lsrs	r0, r0, #31
 800ae66:	b002      	add	sp, #8
 800ae68:	4770      	bx	lr
	...

0800ae6c <__ieee754_sqrt>:
 800ae6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	ec55 4b10 	vmov	r4, r5, d0
 800ae74:	4e67      	ldr	r6, [pc, #412]	; (800b014 <__ieee754_sqrt+0x1a8>)
 800ae76:	43ae      	bics	r6, r5
 800ae78:	ee10 0a10 	vmov	r0, s0
 800ae7c:	ee10 2a10 	vmov	r2, s0
 800ae80:	4629      	mov	r1, r5
 800ae82:	462b      	mov	r3, r5
 800ae84:	d10d      	bne.n	800aea2 <__ieee754_sqrt+0x36>
 800ae86:	f7f5 fbdf 	bl	8000648 <__aeabi_dmul>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4620      	mov	r0, r4
 800ae90:	4629      	mov	r1, r5
 800ae92:	f7f5 fa23 	bl	80002dc <__adddf3>
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	ec45 4b10 	vmov	d0, r4, r5
 800ae9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea2:	2d00      	cmp	r5, #0
 800aea4:	dc0b      	bgt.n	800aebe <__ieee754_sqrt+0x52>
 800aea6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aeaa:	4326      	orrs	r6, r4
 800aeac:	d0f5      	beq.n	800ae9a <__ieee754_sqrt+0x2e>
 800aeae:	b135      	cbz	r5, 800aebe <__ieee754_sqrt+0x52>
 800aeb0:	f7f5 fa12 	bl	80002d8 <__aeabi_dsub>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	f7f5 fcf0 	bl	800089c <__aeabi_ddiv>
 800aebc:	e7eb      	b.n	800ae96 <__ieee754_sqrt+0x2a>
 800aebe:	1509      	asrs	r1, r1, #20
 800aec0:	f000 808d 	beq.w	800afde <__ieee754_sqrt+0x172>
 800aec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aec8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800aecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aed0:	07c9      	lsls	r1, r1, #31
 800aed2:	bf5c      	itt	pl
 800aed4:	005b      	lslpl	r3, r3, #1
 800aed6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800aeda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aede:	bf58      	it	pl
 800aee0:	0052      	lslpl	r2, r2, #1
 800aee2:	2500      	movs	r5, #0
 800aee4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800aee8:	1076      	asrs	r6, r6, #1
 800aeea:	0052      	lsls	r2, r2, #1
 800aeec:	f04f 0e16 	mov.w	lr, #22
 800aef0:	46ac      	mov	ip, r5
 800aef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aef6:	eb0c 0001 	add.w	r0, ip, r1
 800aefa:	4298      	cmp	r0, r3
 800aefc:	bfde      	ittt	le
 800aefe:	1a1b      	suble	r3, r3, r0
 800af00:	eb00 0c01 	addle.w	ip, r0, r1
 800af04:	186d      	addle	r5, r5, r1
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	f1be 0e01 	subs.w	lr, lr, #1
 800af0c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800af10:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af14:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800af18:	d1ed      	bne.n	800aef6 <__ieee754_sqrt+0x8a>
 800af1a:	4674      	mov	r4, lr
 800af1c:	2720      	movs	r7, #32
 800af1e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800af22:	4563      	cmp	r3, ip
 800af24:	eb01 000e 	add.w	r0, r1, lr
 800af28:	dc02      	bgt.n	800af30 <__ieee754_sqrt+0xc4>
 800af2a:	d113      	bne.n	800af54 <__ieee754_sqrt+0xe8>
 800af2c:	4290      	cmp	r0, r2
 800af2e:	d811      	bhi.n	800af54 <__ieee754_sqrt+0xe8>
 800af30:	2800      	cmp	r0, #0
 800af32:	eb00 0e01 	add.w	lr, r0, r1
 800af36:	da57      	bge.n	800afe8 <__ieee754_sqrt+0x17c>
 800af38:	f1be 0f00 	cmp.w	lr, #0
 800af3c:	db54      	blt.n	800afe8 <__ieee754_sqrt+0x17c>
 800af3e:	f10c 0801 	add.w	r8, ip, #1
 800af42:	eba3 030c 	sub.w	r3, r3, ip
 800af46:	4290      	cmp	r0, r2
 800af48:	bf88      	it	hi
 800af4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800af4e:	1a12      	subs	r2, r2, r0
 800af50:	440c      	add	r4, r1
 800af52:	46c4      	mov	ip, r8
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	3f01      	subs	r7, #1
 800af58:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800af5c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af60:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800af64:	d1dd      	bne.n	800af22 <__ieee754_sqrt+0xb6>
 800af66:	4313      	orrs	r3, r2
 800af68:	d01b      	beq.n	800afa2 <__ieee754_sqrt+0x136>
 800af6a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b018 <__ieee754_sqrt+0x1ac>
 800af6e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b01c <__ieee754_sqrt+0x1b0>
 800af72:	e9da 0100 	ldrd	r0, r1, [sl]
 800af76:	e9db 2300 	ldrd	r2, r3, [fp]
 800af7a:	f7f5 f9ad 	bl	80002d8 <__aeabi_dsub>
 800af7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4640      	mov	r0, r8
 800af88:	4649      	mov	r1, r9
 800af8a:	f7f5 fdd9 	bl	8000b40 <__aeabi_dcmple>
 800af8e:	b140      	cbz	r0, 800afa2 <__ieee754_sqrt+0x136>
 800af90:	f1b4 3fff 	cmp.w	r4, #4294967295
 800af94:	e9da 0100 	ldrd	r0, r1, [sl]
 800af98:	e9db 2300 	ldrd	r2, r3, [fp]
 800af9c:	d126      	bne.n	800afec <__ieee754_sqrt+0x180>
 800af9e:	3501      	adds	r5, #1
 800afa0:	463c      	mov	r4, r7
 800afa2:	106a      	asrs	r2, r5, #1
 800afa4:	0863      	lsrs	r3, r4, #1
 800afa6:	07e9      	lsls	r1, r5, #31
 800afa8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800afac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800afb0:	bf48      	it	mi
 800afb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800afb6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800afba:	461c      	mov	r4, r3
 800afbc:	e76d      	b.n	800ae9a <__ieee754_sqrt+0x2e>
 800afbe:	0ad3      	lsrs	r3, r2, #11
 800afc0:	3815      	subs	r0, #21
 800afc2:	0552      	lsls	r2, r2, #21
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0fa      	beq.n	800afbe <__ieee754_sqrt+0x152>
 800afc8:	02dc      	lsls	r4, r3, #11
 800afca:	d50a      	bpl.n	800afe2 <__ieee754_sqrt+0x176>
 800afcc:	f1c1 0420 	rsb	r4, r1, #32
 800afd0:	fa22 f404 	lsr.w	r4, r2, r4
 800afd4:	1e4d      	subs	r5, r1, #1
 800afd6:	408a      	lsls	r2, r1
 800afd8:	4323      	orrs	r3, r4
 800afda:	1b41      	subs	r1, r0, r5
 800afdc:	e772      	b.n	800aec4 <__ieee754_sqrt+0x58>
 800afde:	4608      	mov	r0, r1
 800afe0:	e7f0      	b.n	800afc4 <__ieee754_sqrt+0x158>
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	3101      	adds	r1, #1
 800afe6:	e7ef      	b.n	800afc8 <__ieee754_sqrt+0x15c>
 800afe8:	46e0      	mov	r8, ip
 800afea:	e7aa      	b.n	800af42 <__ieee754_sqrt+0xd6>
 800afec:	f7f5 f976 	bl	80002dc <__adddf3>
 800aff0:	e9da 8900 	ldrd	r8, r9, [sl]
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4640      	mov	r0, r8
 800affa:	4649      	mov	r1, r9
 800affc:	f7f5 fd96 	bl	8000b2c <__aeabi_dcmplt>
 800b000:	b120      	cbz	r0, 800b00c <__ieee754_sqrt+0x1a0>
 800b002:	1ca0      	adds	r0, r4, #2
 800b004:	bf08      	it	eq
 800b006:	3501      	addeq	r5, #1
 800b008:	3402      	adds	r4, #2
 800b00a:	e7ca      	b.n	800afa2 <__ieee754_sqrt+0x136>
 800b00c:	3401      	adds	r4, #1
 800b00e:	f024 0401 	bic.w	r4, r4, #1
 800b012:	e7c6      	b.n	800afa2 <__ieee754_sqrt+0x136>
 800b014:	7ff00000 	.word	0x7ff00000
 800b018:	200001e0 	.word	0x200001e0
 800b01c:	200001e8 	.word	0x200001e8

0800b020 <__ieee754_atan2>:
 800b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b024:	ec57 6b11 	vmov	r6, r7, d1
 800b028:	4273      	negs	r3, r6
 800b02a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b1a8 <__ieee754_atan2+0x188>
 800b02e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b032:	4333      	orrs	r3, r6
 800b034:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b038:	4543      	cmp	r3, r8
 800b03a:	ec51 0b10 	vmov	r0, r1, d0
 800b03e:	ee11 5a10 	vmov	r5, s2
 800b042:	d80a      	bhi.n	800b05a <__ieee754_atan2+0x3a>
 800b044:	4244      	negs	r4, r0
 800b046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b04a:	4304      	orrs	r4, r0
 800b04c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b050:	4544      	cmp	r4, r8
 800b052:	ee10 9a10 	vmov	r9, s0
 800b056:	468e      	mov	lr, r1
 800b058:	d907      	bls.n	800b06a <__ieee754_atan2+0x4a>
 800b05a:	4632      	mov	r2, r6
 800b05c:	463b      	mov	r3, r7
 800b05e:	f7f5 f93d 	bl	80002dc <__adddf3>
 800b062:	ec41 0b10 	vmov	d0, r0, r1
 800b066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b06e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b072:	4334      	orrs	r4, r6
 800b074:	d103      	bne.n	800b07e <__ieee754_atan2+0x5e>
 800b076:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07a:	f000 bdc5 	b.w	800bc08 <atan>
 800b07e:	17bc      	asrs	r4, r7, #30
 800b080:	f004 0402 	and.w	r4, r4, #2
 800b084:	ea53 0909 	orrs.w	r9, r3, r9
 800b088:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b08c:	d107      	bne.n	800b09e <__ieee754_atan2+0x7e>
 800b08e:	2c02      	cmp	r4, #2
 800b090:	d05f      	beq.n	800b152 <__ieee754_atan2+0x132>
 800b092:	2c03      	cmp	r4, #3
 800b094:	d1e5      	bne.n	800b062 <__ieee754_atan2+0x42>
 800b096:	a140      	add	r1, pc, #256	; (adr r1, 800b198 <__ieee754_atan2+0x178>)
 800b098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09c:	e7e1      	b.n	800b062 <__ieee754_atan2+0x42>
 800b09e:	4315      	orrs	r5, r2
 800b0a0:	d106      	bne.n	800b0b0 <__ieee754_atan2+0x90>
 800b0a2:	f1be 0f00 	cmp.w	lr, #0
 800b0a6:	da5f      	bge.n	800b168 <__ieee754_atan2+0x148>
 800b0a8:	a13d      	add	r1, pc, #244	; (adr r1, 800b1a0 <__ieee754_atan2+0x180>)
 800b0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ae:	e7d8      	b.n	800b062 <__ieee754_atan2+0x42>
 800b0b0:	4542      	cmp	r2, r8
 800b0b2:	d10f      	bne.n	800b0d4 <__ieee754_atan2+0xb4>
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0ba:	d107      	bne.n	800b0cc <__ieee754_atan2+0xac>
 800b0bc:	2c02      	cmp	r4, #2
 800b0be:	d84c      	bhi.n	800b15a <__ieee754_atan2+0x13a>
 800b0c0:	4b33      	ldr	r3, [pc, #204]	; (800b190 <__ieee754_atan2+0x170>)
 800b0c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0ca:	e7ca      	b.n	800b062 <__ieee754_atan2+0x42>
 800b0cc:	2c02      	cmp	r4, #2
 800b0ce:	d848      	bhi.n	800b162 <__ieee754_atan2+0x142>
 800b0d0:	4b30      	ldr	r3, [pc, #192]	; (800b194 <__ieee754_atan2+0x174>)
 800b0d2:	e7f6      	b.n	800b0c2 <__ieee754_atan2+0xa2>
 800b0d4:	4543      	cmp	r3, r8
 800b0d6:	d0e4      	beq.n	800b0a2 <__ieee754_atan2+0x82>
 800b0d8:	1a9b      	subs	r3, r3, r2
 800b0da:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b0de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0e2:	da1e      	bge.n	800b122 <__ieee754_atan2+0x102>
 800b0e4:	2f00      	cmp	r7, #0
 800b0e6:	da01      	bge.n	800b0ec <__ieee754_atan2+0xcc>
 800b0e8:	323c      	adds	r2, #60	; 0x3c
 800b0ea:	db1e      	blt.n	800b12a <__ieee754_atan2+0x10a>
 800b0ec:	4632      	mov	r2, r6
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	f7f5 fbd4 	bl	800089c <__aeabi_ddiv>
 800b0f4:	ec41 0b10 	vmov	d0, r0, r1
 800b0f8:	f000 ff26 	bl	800bf48 <fabs>
 800b0fc:	f000 fd84 	bl	800bc08 <atan>
 800b100:	ec51 0b10 	vmov	r0, r1, d0
 800b104:	2c01      	cmp	r4, #1
 800b106:	d013      	beq.n	800b130 <__ieee754_atan2+0x110>
 800b108:	2c02      	cmp	r4, #2
 800b10a:	d015      	beq.n	800b138 <__ieee754_atan2+0x118>
 800b10c:	2c00      	cmp	r4, #0
 800b10e:	d0a8      	beq.n	800b062 <__ieee754_atan2+0x42>
 800b110:	a317      	add	r3, pc, #92	; (adr r3, 800b170 <__ieee754_atan2+0x150>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 f8df 	bl	80002d8 <__aeabi_dsub>
 800b11a:	a317      	add	r3, pc, #92	; (adr r3, 800b178 <__ieee754_atan2+0x158>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	e014      	b.n	800b14c <__ieee754_atan2+0x12c>
 800b122:	a117      	add	r1, pc, #92	; (adr r1, 800b180 <__ieee754_atan2+0x160>)
 800b124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b128:	e7ec      	b.n	800b104 <__ieee754_atan2+0xe4>
 800b12a:	2000      	movs	r0, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	e7e9      	b.n	800b104 <__ieee754_atan2+0xe4>
 800b130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b134:	4619      	mov	r1, r3
 800b136:	e794      	b.n	800b062 <__ieee754_atan2+0x42>
 800b138:	a30d      	add	r3, pc, #52	; (adr r3, 800b170 <__ieee754_atan2+0x150>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 f8cb 	bl	80002d8 <__aeabi_dsub>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	a10c      	add	r1, pc, #48	; (adr r1, 800b178 <__ieee754_atan2+0x158>)
 800b148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b14c:	f7f5 f8c4 	bl	80002d8 <__aeabi_dsub>
 800b150:	e787      	b.n	800b062 <__ieee754_atan2+0x42>
 800b152:	a109      	add	r1, pc, #36	; (adr r1, 800b178 <__ieee754_atan2+0x158>)
 800b154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b158:	e783      	b.n	800b062 <__ieee754_atan2+0x42>
 800b15a:	a10b      	add	r1, pc, #44	; (adr r1, 800b188 <__ieee754_atan2+0x168>)
 800b15c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b160:	e77f      	b.n	800b062 <__ieee754_atan2+0x42>
 800b162:	2000      	movs	r0, #0
 800b164:	2100      	movs	r1, #0
 800b166:	e77c      	b.n	800b062 <__ieee754_atan2+0x42>
 800b168:	a105      	add	r1, pc, #20	; (adr r1, 800b180 <__ieee754_atan2+0x160>)
 800b16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b16e:	e778      	b.n	800b062 <__ieee754_atan2+0x42>
 800b170:	33145c07 	.word	0x33145c07
 800b174:	3ca1a626 	.word	0x3ca1a626
 800b178:	54442d18 	.word	0x54442d18
 800b17c:	400921fb 	.word	0x400921fb
 800b180:	54442d18 	.word	0x54442d18
 800b184:	3ff921fb 	.word	0x3ff921fb
 800b188:	54442d18 	.word	0x54442d18
 800b18c:	3fe921fb 	.word	0x3fe921fb
 800b190:	0800d4b8 	.word	0x0800d4b8
 800b194:	0800d4d0 	.word	0x0800d4d0
 800b198:	54442d18 	.word	0x54442d18
 800b19c:	c00921fb 	.word	0xc00921fb
 800b1a0:	54442d18 	.word	0x54442d18
 800b1a4:	bff921fb 	.word	0xbff921fb
 800b1a8:	7ff00000 	.word	0x7ff00000
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <__ieee754_pow>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	ed2d 8b06 	vpush	{d8-d10}
 800b1b8:	b089      	sub	sp, #36	; 0x24
 800b1ba:	ed8d 1b00 	vstr	d1, [sp]
 800b1be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b1c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b1c6:	ea58 0102 	orrs.w	r1, r8, r2
 800b1ca:	ec57 6b10 	vmov	r6, r7, d0
 800b1ce:	d115      	bne.n	800b1fc <__ieee754_pow+0x4c>
 800b1d0:	19b3      	adds	r3, r6, r6
 800b1d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b1d6:	4152      	adcs	r2, r2
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	4b89      	ldr	r3, [pc, #548]	; (800b400 <__ieee754_pow+0x250>)
 800b1dc:	4193      	sbcs	r3, r2
 800b1de:	f080 84d1 	bcs.w	800bb84 <__ieee754_pow+0x9d4>
 800b1e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	f7f5 f877 	bl	80002dc <__adddf3>
 800b1ee:	ec41 0b10 	vmov	d0, r0, r1
 800b1f2:	b009      	add	sp, #36	; 0x24
 800b1f4:	ecbd 8b06 	vpop	{d8-d10}
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fc:	4b81      	ldr	r3, [pc, #516]	; (800b404 <__ieee754_pow+0x254>)
 800b1fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b202:	429c      	cmp	r4, r3
 800b204:	ee10 aa10 	vmov	sl, s0
 800b208:	463d      	mov	r5, r7
 800b20a:	dc06      	bgt.n	800b21a <__ieee754_pow+0x6a>
 800b20c:	d101      	bne.n	800b212 <__ieee754_pow+0x62>
 800b20e:	2e00      	cmp	r6, #0
 800b210:	d1e7      	bne.n	800b1e2 <__ieee754_pow+0x32>
 800b212:	4598      	cmp	r8, r3
 800b214:	dc01      	bgt.n	800b21a <__ieee754_pow+0x6a>
 800b216:	d10f      	bne.n	800b238 <__ieee754_pow+0x88>
 800b218:	b172      	cbz	r2, 800b238 <__ieee754_pow+0x88>
 800b21a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b21e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b222:	ea55 050a 	orrs.w	r5, r5, sl
 800b226:	d1dc      	bne.n	800b1e2 <__ieee754_pow+0x32>
 800b228:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b22c:	18db      	adds	r3, r3, r3
 800b22e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b232:	4152      	adcs	r2, r2
 800b234:	429d      	cmp	r5, r3
 800b236:	e7d0      	b.n	800b1da <__ieee754_pow+0x2a>
 800b238:	2d00      	cmp	r5, #0
 800b23a:	da3b      	bge.n	800b2b4 <__ieee754_pow+0x104>
 800b23c:	4b72      	ldr	r3, [pc, #456]	; (800b408 <__ieee754_pow+0x258>)
 800b23e:	4598      	cmp	r8, r3
 800b240:	dc51      	bgt.n	800b2e6 <__ieee754_pow+0x136>
 800b242:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b246:	4598      	cmp	r8, r3
 800b248:	f340 84ab 	ble.w	800bba2 <__ieee754_pow+0x9f2>
 800b24c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b250:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b254:	2b14      	cmp	r3, #20
 800b256:	dd0f      	ble.n	800b278 <__ieee754_pow+0xc8>
 800b258:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b25c:	fa22 f103 	lsr.w	r1, r2, r3
 800b260:	fa01 f303 	lsl.w	r3, r1, r3
 800b264:	4293      	cmp	r3, r2
 800b266:	f040 849c 	bne.w	800bba2 <__ieee754_pow+0x9f2>
 800b26a:	f001 0101 	and.w	r1, r1, #1
 800b26e:	f1c1 0302 	rsb	r3, r1, #2
 800b272:	9304      	str	r3, [sp, #16]
 800b274:	b182      	cbz	r2, 800b298 <__ieee754_pow+0xe8>
 800b276:	e05f      	b.n	800b338 <__ieee754_pow+0x188>
 800b278:	2a00      	cmp	r2, #0
 800b27a:	d15b      	bne.n	800b334 <__ieee754_pow+0x184>
 800b27c:	f1c3 0314 	rsb	r3, r3, #20
 800b280:	fa48 f103 	asr.w	r1, r8, r3
 800b284:	fa01 f303 	lsl.w	r3, r1, r3
 800b288:	4543      	cmp	r3, r8
 800b28a:	f040 8487 	bne.w	800bb9c <__ieee754_pow+0x9ec>
 800b28e:	f001 0101 	and.w	r1, r1, #1
 800b292:	f1c1 0302 	rsb	r3, r1, #2
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	4b5c      	ldr	r3, [pc, #368]	; (800b40c <__ieee754_pow+0x25c>)
 800b29a:	4598      	cmp	r8, r3
 800b29c:	d132      	bne.n	800b304 <__ieee754_pow+0x154>
 800b29e:	f1b9 0f00 	cmp.w	r9, #0
 800b2a2:	f280 8477 	bge.w	800bb94 <__ieee754_pow+0x9e4>
 800b2a6:	4959      	ldr	r1, [pc, #356]	; (800b40c <__ieee754_pow+0x25c>)
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f7f5 faf5 	bl	800089c <__aeabi_ddiv>
 800b2b2:	e79c      	b.n	800b1ee <__ieee754_pow+0x3e>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d13d      	bne.n	800b338 <__ieee754_pow+0x188>
 800b2bc:	4b51      	ldr	r3, [pc, #324]	; (800b404 <__ieee754_pow+0x254>)
 800b2be:	4598      	cmp	r8, r3
 800b2c0:	d1ea      	bne.n	800b298 <__ieee754_pow+0xe8>
 800b2c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b2c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b2ce:	f000 8459 	beq.w	800bb84 <__ieee754_pow+0x9d4>
 800b2d2:	4b4f      	ldr	r3, [pc, #316]	; (800b410 <__ieee754_pow+0x260>)
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	dd08      	ble.n	800b2ea <__ieee754_pow+0x13a>
 800b2d8:	f1b9 0f00 	cmp.w	r9, #0
 800b2dc:	f2c0 8456 	blt.w	800bb8c <__ieee754_pow+0x9dc>
 800b2e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2e4:	e783      	b.n	800b1ee <__ieee754_pow+0x3e>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e7e5      	b.n	800b2b6 <__ieee754_pow+0x106>
 800b2ea:	f1b9 0f00 	cmp.w	r9, #0
 800b2ee:	f04f 0000 	mov.w	r0, #0
 800b2f2:	f04f 0100 	mov.w	r1, #0
 800b2f6:	f6bf af7a 	bge.w	800b1ee <__ieee754_pow+0x3e>
 800b2fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b302:	e774      	b.n	800b1ee <__ieee754_pow+0x3e>
 800b304:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b308:	d106      	bne.n	800b318 <__ieee754_pow+0x168>
 800b30a:	4632      	mov	r2, r6
 800b30c:	463b      	mov	r3, r7
 800b30e:	4630      	mov	r0, r6
 800b310:	4639      	mov	r1, r7
 800b312:	f7f5 f999 	bl	8000648 <__aeabi_dmul>
 800b316:	e76a      	b.n	800b1ee <__ieee754_pow+0x3e>
 800b318:	4b3e      	ldr	r3, [pc, #248]	; (800b414 <__ieee754_pow+0x264>)
 800b31a:	4599      	cmp	r9, r3
 800b31c:	d10c      	bne.n	800b338 <__ieee754_pow+0x188>
 800b31e:	2d00      	cmp	r5, #0
 800b320:	db0a      	blt.n	800b338 <__ieee754_pow+0x188>
 800b322:	ec47 6b10 	vmov	d0, r6, r7
 800b326:	b009      	add	sp, #36	; 0x24
 800b328:	ecbd 8b06 	vpop	{d8-d10}
 800b32c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b330:	f7ff bd9c 	b.w	800ae6c <__ieee754_sqrt>
 800b334:	2300      	movs	r3, #0
 800b336:	9304      	str	r3, [sp, #16]
 800b338:	ec47 6b10 	vmov	d0, r6, r7
 800b33c:	f000 fe04 	bl	800bf48 <fabs>
 800b340:	ec51 0b10 	vmov	r0, r1, d0
 800b344:	f1ba 0f00 	cmp.w	sl, #0
 800b348:	d129      	bne.n	800b39e <__ieee754_pow+0x1ee>
 800b34a:	b124      	cbz	r4, 800b356 <__ieee754_pow+0x1a6>
 800b34c:	4b2f      	ldr	r3, [pc, #188]	; (800b40c <__ieee754_pow+0x25c>)
 800b34e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b352:	429a      	cmp	r2, r3
 800b354:	d123      	bne.n	800b39e <__ieee754_pow+0x1ee>
 800b356:	f1b9 0f00 	cmp.w	r9, #0
 800b35a:	da05      	bge.n	800b368 <__ieee754_pow+0x1b8>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	2000      	movs	r0, #0
 800b362:	492a      	ldr	r1, [pc, #168]	; (800b40c <__ieee754_pow+0x25c>)
 800b364:	f7f5 fa9a 	bl	800089c <__aeabi_ddiv>
 800b368:	2d00      	cmp	r5, #0
 800b36a:	f6bf af40 	bge.w	800b1ee <__ieee754_pow+0x3e>
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b374:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b378:	431c      	orrs	r4, r3
 800b37a:	d108      	bne.n	800b38e <__ieee754_pow+0x1de>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4610      	mov	r0, r2
 800b382:	4619      	mov	r1, r3
 800b384:	f7f4 ffa8 	bl	80002d8 <__aeabi_dsub>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	e78f      	b.n	800b2ae <__ieee754_pow+0xfe>
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	2b01      	cmp	r3, #1
 800b392:	f47f af2c 	bne.w	800b1ee <__ieee754_pow+0x3e>
 800b396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b39a:	4619      	mov	r1, r3
 800b39c:	e727      	b.n	800b1ee <__ieee754_pow+0x3e>
 800b39e:	0feb      	lsrs	r3, r5, #31
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	9306      	str	r3, [sp, #24]
 800b3a4:	9a06      	ldr	r2, [sp, #24]
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	d102      	bne.n	800b3b2 <__ieee754_pow+0x202>
 800b3ac:	4632      	mov	r2, r6
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	e7e6      	b.n	800b380 <__ieee754_pow+0x1d0>
 800b3b2:	4b19      	ldr	r3, [pc, #100]	; (800b418 <__ieee754_pow+0x268>)
 800b3b4:	4598      	cmp	r8, r3
 800b3b6:	f340 80fb 	ble.w	800b5b0 <__ieee754_pow+0x400>
 800b3ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b3be:	4598      	cmp	r8, r3
 800b3c0:	4b13      	ldr	r3, [pc, #76]	; (800b410 <__ieee754_pow+0x260>)
 800b3c2:	dd0c      	ble.n	800b3de <__ieee754_pow+0x22e>
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	dc0f      	bgt.n	800b3e8 <__ieee754_pow+0x238>
 800b3c8:	f1b9 0f00 	cmp.w	r9, #0
 800b3cc:	da0f      	bge.n	800b3ee <__ieee754_pow+0x23e>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	b009      	add	sp, #36	; 0x24
 800b3d2:	ecbd 8b06 	vpop	{d8-d10}
 800b3d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3da:	f000 be66 	b.w	800c0aa <__math_oflow>
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	dbf2      	blt.n	800b3c8 <__ieee754_pow+0x218>
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <__ieee754_pow+0x25c>)
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	dd19      	ble.n	800b41c <__ieee754_pow+0x26c>
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	dcef      	bgt.n	800b3ce <__ieee754_pow+0x21e>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	b009      	add	sp, #36	; 0x24
 800b3f2:	ecbd 8b06 	vpop	{d8-d10}
 800b3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	f000 be4d 	b.w	800c098 <__math_uflow>
 800b3fe:	bf00      	nop
 800b400:	fff00000 	.word	0xfff00000
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	433fffff 	.word	0x433fffff
 800b40c:	3ff00000 	.word	0x3ff00000
 800b410:	3fefffff 	.word	0x3fefffff
 800b414:	3fe00000 	.word	0x3fe00000
 800b418:	41e00000 	.word	0x41e00000
 800b41c:	4b60      	ldr	r3, [pc, #384]	; (800b5a0 <__ieee754_pow+0x3f0>)
 800b41e:	2200      	movs	r2, #0
 800b420:	f7f4 ff5a 	bl	80002d8 <__aeabi_dsub>
 800b424:	a354      	add	r3, pc, #336	; (adr r3, 800b578 <__ieee754_pow+0x3c8>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	4604      	mov	r4, r0
 800b42c:	460d      	mov	r5, r1
 800b42e:	f7f5 f90b 	bl	8000648 <__aeabi_dmul>
 800b432:	a353      	add	r3, pc, #332	; (adr r3, 800b580 <__ieee754_pow+0x3d0>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	4606      	mov	r6, r0
 800b43a:	460f      	mov	r7, r1
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f5 f902 	bl	8000648 <__aeabi_dmul>
 800b444:	4b57      	ldr	r3, [pc, #348]	; (800b5a4 <__ieee754_pow+0x3f4>)
 800b446:	4682      	mov	sl, r0
 800b448:	468b      	mov	fp, r1
 800b44a:	2200      	movs	r2, #0
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 f8fa 	bl	8000648 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	a14b      	add	r1, pc, #300	; (adr r1, 800b588 <__ieee754_pow+0x3d8>)
 800b45a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b45e:	f7f4 ff3b 	bl	80002d8 <__aeabi_dsub>
 800b462:	4622      	mov	r2, r4
 800b464:	462b      	mov	r3, r5
 800b466:	f7f5 f8ef 	bl	8000648 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	2000      	movs	r0, #0
 800b470:	494d      	ldr	r1, [pc, #308]	; (800b5a8 <__ieee754_pow+0x3f8>)
 800b472:	f7f4 ff31 	bl	80002d8 <__aeabi_dsub>
 800b476:	4622      	mov	r2, r4
 800b478:	4680      	mov	r8, r0
 800b47a:	4689      	mov	r9, r1
 800b47c:	462b      	mov	r3, r5
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 f8e1 	bl	8000648 <__aeabi_dmul>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4640      	mov	r0, r8
 800b48c:	4649      	mov	r1, r9
 800b48e:	f7f5 f8db 	bl	8000648 <__aeabi_dmul>
 800b492:	a33f      	add	r3, pc, #252	; (adr r3, 800b590 <__ieee754_pow+0x3e0>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f5 f8d6 	bl	8000648 <__aeabi_dmul>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	f7f4 ff18 	bl	80002d8 <__aeabi_dsub>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4689      	mov	r9, r1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f4 ff12 	bl	80002dc <__adddf3>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	4632      	mov	r2, r6
 800b4bc:	463b      	mov	r3, r7
 800b4be:	4604      	mov	r4, r0
 800b4c0:	460d      	mov	r5, r1
 800b4c2:	f7f4 ff09 	bl	80002d8 <__aeabi_dsub>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f4 ff03 	bl	80002d8 <__aeabi_dsub>
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	9a06      	ldr	r2, [sp, #24]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	4682      	mov	sl, r0
 800b4dc:	468b      	mov	fp, r1
 800b4de:	f040 81e7 	bne.w	800b8b0 <__ieee754_pow+0x700>
 800b4e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b598 <__ieee754_pow+0x3e8>
 800b4e6:	eeb0 8a47 	vmov.f32	s16, s14
 800b4ea:	eef0 8a67 	vmov.f32	s17, s15
 800b4ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4f2:	2600      	movs	r6, #0
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	463b      	mov	r3, r7
 800b4f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4fc:	f7f4 feec 	bl	80002d8 <__aeabi_dsub>
 800b500:	4622      	mov	r2, r4
 800b502:	462b      	mov	r3, r5
 800b504:	f7f5 f8a0 	bl	8000648 <__aeabi_dmul>
 800b508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b50c:	4680      	mov	r8, r0
 800b50e:	4689      	mov	r9, r1
 800b510:	4650      	mov	r0, sl
 800b512:	4659      	mov	r1, fp
 800b514:	f7f5 f898 	bl	8000648 <__aeabi_dmul>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4640      	mov	r0, r8
 800b51e:	4649      	mov	r1, r9
 800b520:	f7f4 fedc 	bl	80002dc <__adddf3>
 800b524:	4632      	mov	r2, r6
 800b526:	463b      	mov	r3, r7
 800b528:	4680      	mov	r8, r0
 800b52a:	4689      	mov	r9, r1
 800b52c:	4620      	mov	r0, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	f7f5 f88a 	bl	8000648 <__aeabi_dmul>
 800b534:	460b      	mov	r3, r1
 800b536:	4604      	mov	r4, r0
 800b538:	460d      	mov	r5, r1
 800b53a:	4602      	mov	r2, r0
 800b53c:	4649      	mov	r1, r9
 800b53e:	4640      	mov	r0, r8
 800b540:	f7f4 fecc 	bl	80002dc <__adddf3>
 800b544:	4b19      	ldr	r3, [pc, #100]	; (800b5ac <__ieee754_pow+0x3fc>)
 800b546:	4299      	cmp	r1, r3
 800b548:	ec45 4b19 	vmov	d9, r4, r5
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	468b      	mov	fp, r1
 800b552:	f340 82f0 	ble.w	800bb36 <__ieee754_pow+0x986>
 800b556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b55a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b55e:	4303      	orrs	r3, r0
 800b560:	f000 81e4 	beq.w	800b92c <__ieee754_pow+0x77c>
 800b564:	ec51 0b18 	vmov	r0, r1, d8
 800b568:	2200      	movs	r2, #0
 800b56a:	2300      	movs	r3, #0
 800b56c:	f7f5 fade 	bl	8000b2c <__aeabi_dcmplt>
 800b570:	3800      	subs	r0, #0
 800b572:	bf18      	it	ne
 800b574:	2001      	movne	r0, #1
 800b576:	e72b      	b.n	800b3d0 <__ieee754_pow+0x220>
 800b578:	60000000 	.word	0x60000000
 800b57c:	3ff71547 	.word	0x3ff71547
 800b580:	f85ddf44 	.word	0xf85ddf44
 800b584:	3e54ae0b 	.word	0x3e54ae0b
 800b588:	55555555 	.word	0x55555555
 800b58c:	3fd55555 	.word	0x3fd55555
 800b590:	652b82fe 	.word	0x652b82fe
 800b594:	3ff71547 	.word	0x3ff71547
 800b598:	00000000 	.word	0x00000000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	3ff00000 	.word	0x3ff00000
 800b5a4:	3fd00000 	.word	0x3fd00000
 800b5a8:	3fe00000 	.word	0x3fe00000
 800b5ac:	408fffff 	.word	0x408fffff
 800b5b0:	4bd5      	ldr	r3, [pc, #852]	; (800b908 <__ieee754_pow+0x758>)
 800b5b2:	402b      	ands	r3, r5
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	b92b      	cbnz	r3, 800b5c4 <__ieee754_pow+0x414>
 800b5b8:	4bd4      	ldr	r3, [pc, #848]	; (800b90c <__ieee754_pow+0x75c>)
 800b5ba:	f7f5 f845 	bl	8000648 <__aeabi_dmul>
 800b5be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	1523      	asrs	r3, r4, #20
 800b5c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5ca:	4413      	add	r3, r2
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4bd0      	ldr	r3, [pc, #832]	; (800b910 <__ieee754_pow+0x760>)
 800b5d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5de:	dd08      	ble.n	800b5f2 <__ieee754_pow+0x442>
 800b5e0:	4bcc      	ldr	r3, [pc, #816]	; (800b914 <__ieee754_pow+0x764>)
 800b5e2:	429c      	cmp	r4, r3
 800b5e4:	f340 8162 	ble.w	800b8ac <__ieee754_pow+0x6fc>
 800b5e8:	9b05      	ldr	r3, [sp, #20]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	9305      	str	r3, [sp, #20]
 800b5ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5f2:	2400      	movs	r4, #0
 800b5f4:	00e3      	lsls	r3, r4, #3
 800b5f6:	9307      	str	r3, [sp, #28]
 800b5f8:	4bc7      	ldr	r3, [pc, #796]	; (800b918 <__ieee754_pow+0x768>)
 800b5fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5fe:	ed93 7b00 	vldr	d7, [r3]
 800b602:	4629      	mov	r1, r5
 800b604:	ec53 2b17 	vmov	r2, r3, d7
 800b608:	eeb0 9a47 	vmov.f32	s18, s14
 800b60c:	eef0 9a67 	vmov.f32	s19, s15
 800b610:	4682      	mov	sl, r0
 800b612:	f7f4 fe61 	bl	80002d8 <__aeabi_dsub>
 800b616:	4652      	mov	r2, sl
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	462b      	mov	r3, r5
 800b61e:	ec51 0b19 	vmov	r0, r1, d9
 800b622:	f7f4 fe5b 	bl	80002dc <__adddf3>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	2000      	movs	r0, #0
 800b62c:	49bb      	ldr	r1, [pc, #748]	; (800b91c <__ieee754_pow+0x76c>)
 800b62e:	f7f5 f935 	bl	800089c <__aeabi_ddiv>
 800b632:	ec41 0b1a 	vmov	d10, r0, r1
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4630      	mov	r0, r6
 800b63c:	4639      	mov	r1, r7
 800b63e:	f7f5 f803 	bl	8000648 <__aeabi_dmul>
 800b642:	2300      	movs	r3, #0
 800b644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b648:	9302      	str	r3, [sp, #8]
 800b64a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b64e:	46ab      	mov	fp, r5
 800b650:	106d      	asrs	r5, r5, #1
 800b652:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b656:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b65a:	ec41 0b18 	vmov	d8, r0, r1
 800b65e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b662:	2200      	movs	r2, #0
 800b664:	4640      	mov	r0, r8
 800b666:	4649      	mov	r1, r9
 800b668:	4614      	mov	r4, r2
 800b66a:	461d      	mov	r5, r3
 800b66c:	f7f4 ffec 	bl	8000648 <__aeabi_dmul>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4630      	mov	r0, r6
 800b676:	4639      	mov	r1, r7
 800b678:	f7f4 fe2e 	bl	80002d8 <__aeabi_dsub>
 800b67c:	ec53 2b19 	vmov	r2, r3, d9
 800b680:	4606      	mov	r6, r0
 800b682:	460f      	mov	r7, r1
 800b684:	4620      	mov	r0, r4
 800b686:	4629      	mov	r1, r5
 800b688:	f7f4 fe26 	bl	80002d8 <__aeabi_dsub>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4650      	mov	r0, sl
 800b692:	4659      	mov	r1, fp
 800b694:	f7f4 fe20 	bl	80002d8 <__aeabi_dsub>
 800b698:	4642      	mov	r2, r8
 800b69a:	464b      	mov	r3, r9
 800b69c:	f7f4 ffd4 	bl	8000648 <__aeabi_dmul>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	f7f4 fe16 	bl	80002d8 <__aeabi_dsub>
 800b6ac:	ec53 2b1a 	vmov	r2, r3, d10
 800b6b0:	f7f4 ffca 	bl	8000648 <__aeabi_dmul>
 800b6b4:	ec53 2b18 	vmov	r2, r3, d8
 800b6b8:	ec41 0b19 	vmov	d9, r0, r1
 800b6bc:	ec51 0b18 	vmov	r0, r1, d8
 800b6c0:	f7f4 ffc2 	bl	8000648 <__aeabi_dmul>
 800b6c4:	a37c      	add	r3, pc, #496	; (adr r3, 800b8b8 <__ieee754_pow+0x708>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	f7f4 ffbb 	bl	8000648 <__aeabi_dmul>
 800b6d2:	a37b      	add	r3, pc, #492	; (adr r3, 800b8c0 <__ieee754_pow+0x710>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7f4 fe00 	bl	80002dc <__adddf3>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	462b      	mov	r3, r5
 800b6e0:	f7f4 ffb2 	bl	8000648 <__aeabi_dmul>
 800b6e4:	a378      	add	r3, pc, #480	; (adr r3, 800b8c8 <__ieee754_pow+0x718>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f7f4 fdf7 	bl	80002dc <__adddf3>
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	462b      	mov	r3, r5
 800b6f2:	f7f4 ffa9 	bl	8000648 <__aeabi_dmul>
 800b6f6:	a376      	add	r3, pc, #472	; (adr r3, 800b8d0 <__ieee754_pow+0x720>)
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f7f4 fdee 	bl	80002dc <__adddf3>
 800b700:	4622      	mov	r2, r4
 800b702:	462b      	mov	r3, r5
 800b704:	f7f4 ffa0 	bl	8000648 <__aeabi_dmul>
 800b708:	a373      	add	r3, pc, #460	; (adr r3, 800b8d8 <__ieee754_pow+0x728>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fde5 	bl	80002dc <__adddf3>
 800b712:	4622      	mov	r2, r4
 800b714:	462b      	mov	r3, r5
 800b716:	f7f4 ff97 	bl	8000648 <__aeabi_dmul>
 800b71a:	a371      	add	r3, pc, #452	; (adr r3, 800b8e0 <__ieee754_pow+0x730>)
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f7f4 fddc 	bl	80002dc <__adddf3>
 800b724:	4622      	mov	r2, r4
 800b726:	4606      	mov	r6, r0
 800b728:	460f      	mov	r7, r1
 800b72a:	462b      	mov	r3, r5
 800b72c:	4620      	mov	r0, r4
 800b72e:	4629      	mov	r1, r5
 800b730:	f7f4 ff8a 	bl	8000648 <__aeabi_dmul>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4630      	mov	r0, r6
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f4 ff84 	bl	8000648 <__aeabi_dmul>
 800b740:	4642      	mov	r2, r8
 800b742:	4604      	mov	r4, r0
 800b744:	460d      	mov	r5, r1
 800b746:	464b      	mov	r3, r9
 800b748:	ec51 0b18 	vmov	r0, r1, d8
 800b74c:	f7f4 fdc6 	bl	80002dc <__adddf3>
 800b750:	ec53 2b19 	vmov	r2, r3, d9
 800b754:	f7f4 ff78 	bl	8000648 <__aeabi_dmul>
 800b758:	4622      	mov	r2, r4
 800b75a:	462b      	mov	r3, r5
 800b75c:	f7f4 fdbe 	bl	80002dc <__adddf3>
 800b760:	4642      	mov	r2, r8
 800b762:	4682      	mov	sl, r0
 800b764:	468b      	mov	fp, r1
 800b766:	464b      	mov	r3, r9
 800b768:	4640      	mov	r0, r8
 800b76a:	4649      	mov	r1, r9
 800b76c:	f7f4 ff6c 	bl	8000648 <__aeabi_dmul>
 800b770:	4b6b      	ldr	r3, [pc, #428]	; (800b920 <__ieee754_pow+0x770>)
 800b772:	2200      	movs	r2, #0
 800b774:	4606      	mov	r6, r0
 800b776:	460f      	mov	r7, r1
 800b778:	f7f4 fdb0 	bl	80002dc <__adddf3>
 800b77c:	4652      	mov	r2, sl
 800b77e:	465b      	mov	r3, fp
 800b780:	f7f4 fdac 	bl	80002dc <__adddf3>
 800b784:	2000      	movs	r0, #0
 800b786:	4604      	mov	r4, r0
 800b788:	460d      	mov	r5, r1
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4640      	mov	r0, r8
 800b790:	4649      	mov	r1, r9
 800b792:	f7f4 ff59 	bl	8000648 <__aeabi_dmul>
 800b796:	4b62      	ldr	r3, [pc, #392]	; (800b920 <__ieee754_pow+0x770>)
 800b798:	4680      	mov	r8, r0
 800b79a:	4689      	mov	r9, r1
 800b79c:	2200      	movs	r2, #0
 800b79e:	4620      	mov	r0, r4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7f4 fd99 	bl	80002d8 <__aeabi_dsub>
 800b7a6:	4632      	mov	r2, r6
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	f7f4 fd95 	bl	80002d8 <__aeabi_dsub>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	4659      	mov	r1, fp
 800b7b6:	f7f4 fd8f 	bl	80002d8 <__aeabi_dsub>
 800b7ba:	ec53 2b18 	vmov	r2, r3, d8
 800b7be:	f7f4 ff43 	bl	8000648 <__aeabi_dmul>
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	460f      	mov	r7, r1
 800b7c8:	462b      	mov	r3, r5
 800b7ca:	ec51 0b19 	vmov	r0, r1, d9
 800b7ce:	f7f4 ff3b 	bl	8000648 <__aeabi_dmul>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4639      	mov	r1, r7
 800b7da:	f7f4 fd7f 	bl	80002dc <__adddf3>
 800b7de:	4606      	mov	r6, r0
 800b7e0:	460f      	mov	r7, r1
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7f4 fd77 	bl	80002dc <__adddf3>
 800b7ee:	a33e      	add	r3, pc, #248	; (adr r3, 800b8e8 <__ieee754_pow+0x738>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	f7f4 ff25 	bl	8000648 <__aeabi_dmul>
 800b7fe:	4642      	mov	r2, r8
 800b800:	ec41 0b18 	vmov	d8, r0, r1
 800b804:	464b      	mov	r3, r9
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 fd65 	bl	80002d8 <__aeabi_dsub>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4630      	mov	r0, r6
 800b814:	4639      	mov	r1, r7
 800b816:	f7f4 fd5f 	bl	80002d8 <__aeabi_dsub>
 800b81a:	a335      	add	r3, pc, #212	; (adr r3, 800b8f0 <__ieee754_pow+0x740>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f7f4 ff12 	bl	8000648 <__aeabi_dmul>
 800b824:	a334      	add	r3, pc, #208	; (adr r3, 800b8f8 <__ieee754_pow+0x748>)
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	4606      	mov	r6, r0
 800b82c:	460f      	mov	r7, r1
 800b82e:	4620      	mov	r0, r4
 800b830:	4629      	mov	r1, r5
 800b832:	f7f4 ff09 	bl	8000648 <__aeabi_dmul>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	4630      	mov	r0, r6
 800b83c:	4639      	mov	r1, r7
 800b83e:	f7f4 fd4d 	bl	80002dc <__adddf3>
 800b842:	9a07      	ldr	r2, [sp, #28]
 800b844:	4b37      	ldr	r3, [pc, #220]	; (800b924 <__ieee754_pow+0x774>)
 800b846:	4413      	add	r3, r2
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fd46 	bl	80002dc <__adddf3>
 800b850:	4682      	mov	sl, r0
 800b852:	9805      	ldr	r0, [sp, #20]
 800b854:	468b      	mov	fp, r1
 800b856:	f7f4 fe8d 	bl	8000574 <__aeabi_i2d>
 800b85a:	9a07      	ldr	r2, [sp, #28]
 800b85c:	4b32      	ldr	r3, [pc, #200]	; (800b928 <__ieee754_pow+0x778>)
 800b85e:	4413      	add	r3, r2
 800b860:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b864:	4606      	mov	r6, r0
 800b866:	460f      	mov	r7, r1
 800b868:	4652      	mov	r2, sl
 800b86a:	465b      	mov	r3, fp
 800b86c:	ec51 0b18 	vmov	r0, r1, d8
 800b870:	f7f4 fd34 	bl	80002dc <__adddf3>
 800b874:	4642      	mov	r2, r8
 800b876:	464b      	mov	r3, r9
 800b878:	f7f4 fd30 	bl	80002dc <__adddf3>
 800b87c:	4632      	mov	r2, r6
 800b87e:	463b      	mov	r3, r7
 800b880:	f7f4 fd2c 	bl	80002dc <__adddf3>
 800b884:	2000      	movs	r0, #0
 800b886:	4632      	mov	r2, r6
 800b888:	463b      	mov	r3, r7
 800b88a:	4604      	mov	r4, r0
 800b88c:	460d      	mov	r5, r1
 800b88e:	f7f4 fd23 	bl	80002d8 <__aeabi_dsub>
 800b892:	4642      	mov	r2, r8
 800b894:	464b      	mov	r3, r9
 800b896:	f7f4 fd1f 	bl	80002d8 <__aeabi_dsub>
 800b89a:	ec53 2b18 	vmov	r2, r3, d8
 800b89e:	f7f4 fd1b 	bl	80002d8 <__aeabi_dsub>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	4659      	mov	r1, fp
 800b8aa:	e610      	b.n	800b4ce <__ieee754_pow+0x31e>
 800b8ac:	2401      	movs	r4, #1
 800b8ae:	e6a1      	b.n	800b5f4 <__ieee754_pow+0x444>
 800b8b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b900 <__ieee754_pow+0x750>
 800b8b4:	e617      	b.n	800b4e6 <__ieee754_pow+0x336>
 800b8b6:	bf00      	nop
 800b8b8:	4a454eef 	.word	0x4a454eef
 800b8bc:	3fca7e28 	.word	0x3fca7e28
 800b8c0:	93c9db65 	.word	0x93c9db65
 800b8c4:	3fcd864a 	.word	0x3fcd864a
 800b8c8:	a91d4101 	.word	0xa91d4101
 800b8cc:	3fd17460 	.word	0x3fd17460
 800b8d0:	518f264d 	.word	0x518f264d
 800b8d4:	3fd55555 	.word	0x3fd55555
 800b8d8:	db6fabff 	.word	0xdb6fabff
 800b8dc:	3fdb6db6 	.word	0x3fdb6db6
 800b8e0:	33333303 	.word	0x33333303
 800b8e4:	3fe33333 	.word	0x3fe33333
 800b8e8:	e0000000 	.word	0xe0000000
 800b8ec:	3feec709 	.word	0x3feec709
 800b8f0:	dc3a03fd 	.word	0xdc3a03fd
 800b8f4:	3feec709 	.word	0x3feec709
 800b8f8:	145b01f5 	.word	0x145b01f5
 800b8fc:	be3e2fe0 	.word	0xbe3e2fe0
 800b900:	00000000 	.word	0x00000000
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	7ff00000 	.word	0x7ff00000
 800b90c:	43400000 	.word	0x43400000
 800b910:	0003988e 	.word	0x0003988e
 800b914:	000bb679 	.word	0x000bb679
 800b918:	0800d4e8 	.word	0x0800d4e8
 800b91c:	3ff00000 	.word	0x3ff00000
 800b920:	40080000 	.word	0x40080000
 800b924:	0800d508 	.word	0x0800d508
 800b928:	0800d4f8 	.word	0x0800d4f8
 800b92c:	a3b3      	add	r3, pc, #716	; (adr r3, 800bbfc <__ieee754_pow+0xa4c>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	4640      	mov	r0, r8
 800b934:	4649      	mov	r1, r9
 800b936:	f7f4 fcd1 	bl	80002dc <__adddf3>
 800b93a:	4622      	mov	r2, r4
 800b93c:	ec41 0b1a 	vmov	d10, r0, r1
 800b940:	462b      	mov	r3, r5
 800b942:	4630      	mov	r0, r6
 800b944:	4639      	mov	r1, r7
 800b946:	f7f4 fcc7 	bl	80002d8 <__aeabi_dsub>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	ec51 0b1a 	vmov	r0, r1, d10
 800b952:	f7f5 f909 	bl	8000b68 <__aeabi_dcmpgt>
 800b956:	2800      	cmp	r0, #0
 800b958:	f47f ae04 	bne.w	800b564 <__ieee754_pow+0x3b4>
 800b95c:	4aa2      	ldr	r2, [pc, #648]	; (800bbe8 <__ieee754_pow+0xa38>)
 800b95e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b962:	4293      	cmp	r3, r2
 800b964:	f340 8107 	ble.w	800bb76 <__ieee754_pow+0x9c6>
 800b968:	151b      	asrs	r3, r3, #20
 800b96a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b96e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b972:	fa4a fa03 	asr.w	sl, sl, r3
 800b976:	44da      	add	sl, fp
 800b978:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b97c:	489b      	ldr	r0, [pc, #620]	; (800bbec <__ieee754_pow+0xa3c>)
 800b97e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b982:	4108      	asrs	r0, r1
 800b984:	ea00 030a 	and.w	r3, r0, sl
 800b988:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b98c:	f1c1 0114 	rsb	r1, r1, #20
 800b990:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b994:	fa4a fa01 	asr.w	sl, sl, r1
 800b998:	f1bb 0f00 	cmp.w	fp, #0
 800b99c:	f04f 0200 	mov.w	r2, #0
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	bfb8      	it	lt
 800b9a6:	f1ca 0a00 	rsblt	sl, sl, #0
 800b9aa:	f7f4 fc95 	bl	80002d8 <__aeabi_dsub>
 800b9ae:	ec41 0b19 	vmov	d9, r0, r1
 800b9b2:	4642      	mov	r2, r8
 800b9b4:	464b      	mov	r3, r9
 800b9b6:	ec51 0b19 	vmov	r0, r1, d9
 800b9ba:	f7f4 fc8f 	bl	80002dc <__adddf3>
 800b9be:	a37a      	add	r3, pc, #488	; (adr r3, 800bba8 <__ieee754_pow+0x9f8>)
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	f7f4 fe3d 	bl	8000648 <__aeabi_dmul>
 800b9ce:	ec53 2b19 	vmov	r2, r3, d9
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7f4 fc7d 	bl	80002d8 <__aeabi_dsub>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc77 	bl	80002d8 <__aeabi_dsub>
 800b9ea:	a371      	add	r3, pc, #452	; (adr r3, 800bbb0 <__ieee754_pow+0xa00>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 fe2a 	bl	8000648 <__aeabi_dmul>
 800b9f4:	a370      	add	r3, pc, #448	; (adr r3, 800bbb8 <__ieee754_pow+0xa08>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4680      	mov	r8, r0
 800b9fc:	4689      	mov	r9, r1
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7f4 fe21 	bl	8000648 <__aeabi_dmul>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	f7f4 fc65 	bl	80002dc <__adddf3>
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fc5d 	bl	80002dc <__adddf3>
 800ba22:	4632      	mov	r2, r6
 800ba24:	463b      	mov	r3, r7
 800ba26:	4680      	mov	r8, r0
 800ba28:	4689      	mov	r9, r1
 800ba2a:	f7f4 fc55 	bl	80002d8 <__aeabi_dsub>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4620      	mov	r0, r4
 800ba34:	4629      	mov	r1, r5
 800ba36:	f7f4 fc4f 	bl	80002d8 <__aeabi_dsub>
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	460f      	mov	r7, r1
 800ba40:	464b      	mov	r3, r9
 800ba42:	4640      	mov	r0, r8
 800ba44:	4649      	mov	r1, r9
 800ba46:	f7f4 fdff 	bl	8000648 <__aeabi_dmul>
 800ba4a:	a35d      	add	r3, pc, #372	; (adr r3, 800bbc0 <__ieee754_pow+0xa10>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	4604      	mov	r4, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	f7f4 fdf8 	bl	8000648 <__aeabi_dmul>
 800ba58:	a35b      	add	r3, pc, #364	; (adr r3, 800bbc8 <__ieee754_pow+0xa18>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fc3b 	bl	80002d8 <__aeabi_dsub>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	f7f4 fdef 	bl	8000648 <__aeabi_dmul>
 800ba6a:	a359      	add	r3, pc, #356	; (adr r3, 800bbd0 <__ieee754_pow+0xa20>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fc34 	bl	80002dc <__adddf3>
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	f7f4 fde6 	bl	8000648 <__aeabi_dmul>
 800ba7c:	a356      	add	r3, pc, #344	; (adr r3, 800bbd8 <__ieee754_pow+0xa28>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fc29 	bl	80002d8 <__aeabi_dsub>
 800ba86:	4622      	mov	r2, r4
 800ba88:	462b      	mov	r3, r5
 800ba8a:	f7f4 fddd 	bl	8000648 <__aeabi_dmul>
 800ba8e:	a354      	add	r3, pc, #336	; (adr r3, 800bbe0 <__ieee754_pow+0xa30>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f7f4 fc22 	bl	80002dc <__adddf3>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	f7f4 fdd4 	bl	8000648 <__aeabi_dmul>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	4640      	mov	r0, r8
 800baa6:	4649      	mov	r1, r9
 800baa8:	f7f4 fc16 	bl	80002d8 <__aeabi_dsub>
 800baac:	4604      	mov	r4, r0
 800baae:	460d      	mov	r5, r1
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4640      	mov	r0, r8
 800bab6:	4649      	mov	r1, r9
 800bab8:	f7f4 fdc6 	bl	8000648 <__aeabi_dmul>
 800babc:	2200      	movs	r2, #0
 800babe:	ec41 0b19 	vmov	d9, r0, r1
 800bac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fc05 	bl	80002d8 <__aeabi_dsub>
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	ec51 0b19 	vmov	r0, r1, d9
 800bad6:	f7f4 fee1 	bl	800089c <__aeabi_ddiv>
 800bada:	4632      	mov	r2, r6
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	463b      	mov	r3, r7
 800bae2:	4640      	mov	r0, r8
 800bae4:	4649      	mov	r1, r9
 800bae6:	f7f4 fdaf 	bl	8000648 <__aeabi_dmul>
 800baea:	4632      	mov	r2, r6
 800baec:	463b      	mov	r3, r7
 800baee:	f7f4 fbf5 	bl	80002dc <__adddf3>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 fbed 	bl	80002d8 <__aeabi_dsub>
 800bafe:	4642      	mov	r2, r8
 800bb00:	464b      	mov	r3, r9
 800bb02:	f7f4 fbe9 	bl	80002d8 <__aeabi_dsub>
 800bb06:	460b      	mov	r3, r1
 800bb08:	4602      	mov	r2, r0
 800bb0a:	4939      	ldr	r1, [pc, #228]	; (800bbf0 <__ieee754_pow+0xa40>)
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	f7f4 fbe3 	bl	80002d8 <__aeabi_dsub>
 800bb12:	ec41 0b10 	vmov	d0, r0, r1
 800bb16:	ee10 3a90 	vmov	r3, s1
 800bb1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb22:	da2b      	bge.n	800bb7c <__ieee754_pow+0x9cc>
 800bb24:	4650      	mov	r0, sl
 800bb26:	f000 fa1b 	bl	800bf60 <scalbn>
 800bb2a:	ec51 0b10 	vmov	r0, r1, d0
 800bb2e:	ec53 2b18 	vmov	r2, r3, d8
 800bb32:	f7ff bbee 	b.w	800b312 <__ieee754_pow+0x162>
 800bb36:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <__ieee754_pow+0xa44>)
 800bb38:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb3c:	429e      	cmp	r6, r3
 800bb3e:	f77f af0d 	ble.w	800b95c <__ieee754_pow+0x7ac>
 800bb42:	4b2d      	ldr	r3, [pc, #180]	; (800bbf8 <__ieee754_pow+0xa48>)
 800bb44:	440b      	add	r3, r1
 800bb46:	4303      	orrs	r3, r0
 800bb48:	d009      	beq.n	800bb5e <__ieee754_pow+0x9ae>
 800bb4a:	ec51 0b18 	vmov	r0, r1, d8
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2300      	movs	r3, #0
 800bb52:	f7f4 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 800bb56:	3800      	subs	r0, #0
 800bb58:	bf18      	it	ne
 800bb5a:	2001      	movne	r0, #1
 800bb5c:	e448      	b.n	800b3f0 <__ieee754_pow+0x240>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	462b      	mov	r3, r5
 800bb62:	f7f4 fbb9 	bl	80002d8 <__aeabi_dsub>
 800bb66:	4642      	mov	r2, r8
 800bb68:	464b      	mov	r3, r9
 800bb6a:	f7f4 fff3 	bl	8000b54 <__aeabi_dcmpge>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f43f aef4 	beq.w	800b95c <__ieee754_pow+0x7ac>
 800bb74:	e7e9      	b.n	800bb4a <__ieee754_pow+0x99a>
 800bb76:	f04f 0a00 	mov.w	sl, #0
 800bb7a:	e71a      	b.n	800b9b2 <__ieee754_pow+0x802>
 800bb7c:	ec51 0b10 	vmov	r0, r1, d0
 800bb80:	4619      	mov	r1, r3
 800bb82:	e7d4      	b.n	800bb2e <__ieee754_pow+0x97e>
 800bb84:	491a      	ldr	r1, [pc, #104]	; (800bbf0 <__ieee754_pow+0xa40>)
 800bb86:	2000      	movs	r0, #0
 800bb88:	f7ff bb31 	b.w	800b1ee <__ieee754_pow+0x3e>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	f7ff bb2d 	b.w	800b1ee <__ieee754_pow+0x3e>
 800bb94:	4630      	mov	r0, r6
 800bb96:	4639      	mov	r1, r7
 800bb98:	f7ff bb29 	b.w	800b1ee <__ieee754_pow+0x3e>
 800bb9c:	9204      	str	r2, [sp, #16]
 800bb9e:	f7ff bb7b 	b.w	800b298 <__ieee754_pow+0xe8>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f7ff bb65 	b.w	800b272 <__ieee754_pow+0xc2>
 800bba8:	00000000 	.word	0x00000000
 800bbac:	3fe62e43 	.word	0x3fe62e43
 800bbb0:	fefa39ef 	.word	0xfefa39ef
 800bbb4:	3fe62e42 	.word	0x3fe62e42
 800bbb8:	0ca86c39 	.word	0x0ca86c39
 800bbbc:	be205c61 	.word	0xbe205c61
 800bbc0:	72bea4d0 	.word	0x72bea4d0
 800bbc4:	3e663769 	.word	0x3e663769
 800bbc8:	c5d26bf1 	.word	0xc5d26bf1
 800bbcc:	3ebbbd41 	.word	0x3ebbbd41
 800bbd0:	af25de2c 	.word	0xaf25de2c
 800bbd4:	3f11566a 	.word	0x3f11566a
 800bbd8:	16bebd93 	.word	0x16bebd93
 800bbdc:	3f66c16c 	.word	0x3f66c16c
 800bbe0:	5555553e 	.word	0x5555553e
 800bbe4:	3fc55555 	.word	0x3fc55555
 800bbe8:	3fe00000 	.word	0x3fe00000
 800bbec:	fff00000 	.word	0xfff00000
 800bbf0:	3ff00000 	.word	0x3ff00000
 800bbf4:	4090cbff 	.word	0x4090cbff
 800bbf8:	3f6f3400 	.word	0x3f6f3400
 800bbfc:	652b82fe 	.word	0x652b82fe
 800bc00:	3c971547 	.word	0x3c971547
 800bc04:	00000000 	.word	0x00000000

0800bc08 <atan>:
 800bc08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ec55 4b10 	vmov	r4, r5, d0
 800bc10:	4bc3      	ldr	r3, [pc, #780]	; (800bf20 <atan+0x318>)
 800bc12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc16:	429e      	cmp	r6, r3
 800bc18:	46ab      	mov	fp, r5
 800bc1a:	dd18      	ble.n	800bc4e <atan+0x46>
 800bc1c:	4bc1      	ldr	r3, [pc, #772]	; (800bf24 <atan+0x31c>)
 800bc1e:	429e      	cmp	r6, r3
 800bc20:	dc01      	bgt.n	800bc26 <atan+0x1e>
 800bc22:	d109      	bne.n	800bc38 <atan+0x30>
 800bc24:	b144      	cbz	r4, 800bc38 <atan+0x30>
 800bc26:	4622      	mov	r2, r4
 800bc28:	462b      	mov	r3, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 fb55 	bl	80002dc <__adddf3>
 800bc32:	4604      	mov	r4, r0
 800bc34:	460d      	mov	r5, r1
 800bc36:	e006      	b.n	800bc46 <atan+0x3e>
 800bc38:	f1bb 0f00 	cmp.w	fp, #0
 800bc3c:	f300 8131 	bgt.w	800bea2 <atan+0x29a>
 800bc40:	a59b      	add	r5, pc, #620	; (adr r5, 800beb0 <atan+0x2a8>)
 800bc42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc46:	ec45 4b10 	vmov	d0, r4, r5
 800bc4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	4bb6      	ldr	r3, [pc, #728]	; (800bf28 <atan+0x320>)
 800bc50:	429e      	cmp	r6, r3
 800bc52:	dc14      	bgt.n	800bc7e <atan+0x76>
 800bc54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	dc0d      	bgt.n	800bc78 <atan+0x70>
 800bc5c:	a396      	add	r3, pc, #600	; (adr r3, 800beb8 <atan+0x2b0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	ee10 0a10 	vmov	r0, s0
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 fb38 	bl	80002dc <__adddf3>
 800bc6c:	4baf      	ldr	r3, [pc, #700]	; (800bf2c <atan+0x324>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7f4 ff7a 	bl	8000b68 <__aeabi_dcmpgt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d1e6      	bne.n	800bc46 <atan+0x3e>
 800bc78:	f04f 3aff 	mov.w	sl, #4294967295
 800bc7c:	e02b      	b.n	800bcd6 <atan+0xce>
 800bc7e:	f000 f963 	bl	800bf48 <fabs>
 800bc82:	4bab      	ldr	r3, [pc, #684]	; (800bf30 <atan+0x328>)
 800bc84:	429e      	cmp	r6, r3
 800bc86:	ec55 4b10 	vmov	r4, r5, d0
 800bc8a:	f300 80bf 	bgt.w	800be0c <atan+0x204>
 800bc8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc92:	429e      	cmp	r6, r3
 800bc94:	f300 80a0 	bgt.w	800bdd8 <atan+0x1d0>
 800bc98:	ee10 2a10 	vmov	r2, s0
 800bc9c:	ee10 0a10 	vmov	r0, s0
 800bca0:	462b      	mov	r3, r5
 800bca2:	4629      	mov	r1, r5
 800bca4:	f7f4 fb1a 	bl	80002dc <__adddf3>
 800bca8:	4ba0      	ldr	r3, [pc, #640]	; (800bf2c <atan+0x324>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 fb14 	bl	80002d8 <__aeabi_dsub>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 fb0d 	bl	80002dc <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 fde7 	bl	800089c <__aeabi_ddiv>
 800bcce:	f04f 0a00 	mov.w	sl, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	462b      	mov	r3, r5
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	f7f4 fcb3 	bl	8000648 <__aeabi_dmul>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	f7f4 fcad 	bl	8000648 <__aeabi_dmul>
 800bcee:	a374      	add	r3, pc, #464	; (adr r3, 800bec0 <atan+0x2b8>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	460f      	mov	r7, r1
 800bcf8:	f7f4 fca6 	bl	8000648 <__aeabi_dmul>
 800bcfc:	a372      	add	r3, pc, #456	; (adr r3, 800bec8 <atan+0x2c0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 faeb 	bl	80002dc <__adddf3>
 800bd06:	4632      	mov	r2, r6
 800bd08:	463b      	mov	r3, r7
 800bd0a:	f7f4 fc9d 	bl	8000648 <__aeabi_dmul>
 800bd0e:	a370      	add	r3, pc, #448	; (adr r3, 800bed0 <atan+0x2c8>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 fae2 	bl	80002dc <__adddf3>
 800bd18:	4632      	mov	r2, r6
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	f7f4 fc94 	bl	8000648 <__aeabi_dmul>
 800bd20:	a36d      	add	r3, pc, #436	; (adr r3, 800bed8 <atan+0x2d0>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fad9 	bl	80002dc <__adddf3>
 800bd2a:	4632      	mov	r2, r6
 800bd2c:	463b      	mov	r3, r7
 800bd2e:	f7f4 fc8b 	bl	8000648 <__aeabi_dmul>
 800bd32:	a36b      	add	r3, pc, #428	; (adr r3, 800bee0 <atan+0x2d8>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fad0 	bl	80002dc <__adddf3>
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	463b      	mov	r3, r7
 800bd40:	f7f4 fc82 	bl	8000648 <__aeabi_dmul>
 800bd44:	a368      	add	r3, pc, #416	; (adr r3, 800bee8 <atan+0x2e0>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 fac7 	bl	80002dc <__adddf3>
 800bd4e:	4642      	mov	r2, r8
 800bd50:	464b      	mov	r3, r9
 800bd52:	f7f4 fc79 	bl	8000648 <__aeabi_dmul>
 800bd56:	a366      	add	r3, pc, #408	; (adr r3, 800bef0 <atan+0x2e8>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fc70 	bl	8000648 <__aeabi_dmul>
 800bd68:	a363      	add	r3, pc, #396	; (adr r3, 800bef8 <atan+0x2f0>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fab3 	bl	80002d8 <__aeabi_dsub>
 800bd72:	4632      	mov	r2, r6
 800bd74:	463b      	mov	r3, r7
 800bd76:	f7f4 fc67 	bl	8000648 <__aeabi_dmul>
 800bd7a:	a361      	add	r3, pc, #388	; (adr r3, 800bf00 <atan+0x2f8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 faaa 	bl	80002d8 <__aeabi_dsub>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fc5e 	bl	8000648 <__aeabi_dmul>
 800bd8c:	a35e      	add	r3, pc, #376	; (adr r3, 800bf08 <atan+0x300>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 faa1 	bl	80002d8 <__aeabi_dsub>
 800bd96:	4632      	mov	r2, r6
 800bd98:	463b      	mov	r3, r7
 800bd9a:	f7f4 fc55 	bl	8000648 <__aeabi_dmul>
 800bd9e:	a35c      	add	r3, pc, #368	; (adr r3, 800bf10 <atan+0x308>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa98 	bl	80002d8 <__aeabi_dsub>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fc4c 	bl	8000648 <__aeabi_dmul>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	f7f4 fa90 	bl	80002dc <__adddf3>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fc42 	bl	8000648 <__aeabi_dmul>
 800bdc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	d14b      	bne.n	800be66 <atan+0x25e>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa81 	bl	80002d8 <__aeabi_dsub>
 800bdd6:	e72c      	b.n	800bc32 <atan+0x2a>
 800bdd8:	ee10 0a10 	vmov	r0, s0
 800bddc:	4b53      	ldr	r3, [pc, #332]	; (800bf2c <atan+0x324>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fa79 	bl	80002d8 <__aeabi_dsub>
 800bde6:	4b51      	ldr	r3, [pc, #324]	; (800bf2c <atan+0x324>)
 800bde8:	4606      	mov	r6, r0
 800bdea:	460f      	mov	r7, r1
 800bdec:	2200      	movs	r2, #0
 800bdee:	4620      	mov	r0, r4
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	f7f4 fa73 	bl	80002dc <__adddf3>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	f7f4 fd4d 	bl	800089c <__aeabi_ddiv>
 800be02:	f04f 0a01 	mov.w	sl, #1
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	e764      	b.n	800bcd6 <atan+0xce>
 800be0c:	4b49      	ldr	r3, [pc, #292]	; (800bf34 <atan+0x32c>)
 800be0e:	429e      	cmp	r6, r3
 800be10:	da1d      	bge.n	800be4e <atan+0x246>
 800be12:	ee10 0a10 	vmov	r0, s0
 800be16:	4b48      	ldr	r3, [pc, #288]	; (800bf38 <atan+0x330>)
 800be18:	2200      	movs	r2, #0
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 fa5c 	bl	80002d8 <__aeabi_dsub>
 800be20:	4b45      	ldr	r3, [pc, #276]	; (800bf38 <atan+0x330>)
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	2200      	movs	r2, #0
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fc0c 	bl	8000648 <__aeabi_dmul>
 800be30:	4b3e      	ldr	r3, [pc, #248]	; (800bf2c <atan+0x324>)
 800be32:	2200      	movs	r2, #0
 800be34:	f7f4 fa52 	bl	80002dc <__adddf3>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4630      	mov	r0, r6
 800be3e:	4639      	mov	r1, r7
 800be40:	f7f4 fd2c 	bl	800089c <__aeabi_ddiv>
 800be44:	f04f 0a02 	mov.w	sl, #2
 800be48:	4604      	mov	r4, r0
 800be4a:	460d      	mov	r5, r1
 800be4c:	e743      	b.n	800bcd6 <atan+0xce>
 800be4e:	462b      	mov	r3, r5
 800be50:	ee10 2a10 	vmov	r2, s0
 800be54:	4939      	ldr	r1, [pc, #228]	; (800bf3c <atan+0x334>)
 800be56:	2000      	movs	r0, #0
 800be58:	f7f4 fd20 	bl	800089c <__aeabi_ddiv>
 800be5c:	f04f 0a03 	mov.w	sl, #3
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	e737      	b.n	800bcd6 <atan+0xce>
 800be66:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <atan+0x338>)
 800be68:	4e36      	ldr	r6, [pc, #216]	; (800bf44 <atan+0x33c>)
 800be6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 fa31 	bl	80002d8 <__aeabi_dsub>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	f7f4 fa2d 	bl	80002d8 <__aeabi_dsub>
 800be7e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be8a:	f7f4 fa25 	bl	80002d8 <__aeabi_dsub>
 800be8e:	f1bb 0f00 	cmp.w	fp, #0
 800be92:	4604      	mov	r4, r0
 800be94:	460d      	mov	r5, r1
 800be96:	f6bf aed6 	bge.w	800bc46 <atan+0x3e>
 800be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be9e:	461d      	mov	r5, r3
 800bea0:	e6d1      	b.n	800bc46 <atan+0x3e>
 800bea2:	a51d      	add	r5, pc, #116	; (adr r5, 800bf18 <atan+0x310>)
 800bea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bea8:	e6cd      	b.n	800bc46 <atan+0x3e>
 800beaa:	bf00      	nop
 800beac:	f3af 8000 	nop.w
 800beb0:	54442d18 	.word	0x54442d18
 800beb4:	bff921fb 	.word	0xbff921fb
 800beb8:	8800759c 	.word	0x8800759c
 800bebc:	7e37e43c 	.word	0x7e37e43c
 800bec0:	e322da11 	.word	0xe322da11
 800bec4:	3f90ad3a 	.word	0x3f90ad3a
 800bec8:	24760deb 	.word	0x24760deb
 800becc:	3fa97b4b 	.word	0x3fa97b4b
 800bed0:	a0d03d51 	.word	0xa0d03d51
 800bed4:	3fb10d66 	.word	0x3fb10d66
 800bed8:	c54c206e 	.word	0xc54c206e
 800bedc:	3fb745cd 	.word	0x3fb745cd
 800bee0:	920083ff 	.word	0x920083ff
 800bee4:	3fc24924 	.word	0x3fc24924
 800bee8:	5555550d 	.word	0x5555550d
 800beec:	3fd55555 	.word	0x3fd55555
 800bef0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bef4:	bfa2b444 	.word	0xbfa2b444
 800bef8:	52defd9a 	.word	0x52defd9a
 800befc:	3fadde2d 	.word	0x3fadde2d
 800bf00:	af749a6d 	.word	0xaf749a6d
 800bf04:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf08:	fe231671 	.word	0xfe231671
 800bf0c:	3fbc71c6 	.word	0x3fbc71c6
 800bf10:	9998ebc4 	.word	0x9998ebc4
 800bf14:	3fc99999 	.word	0x3fc99999
 800bf18:	54442d18 	.word	0x54442d18
 800bf1c:	3ff921fb 	.word	0x3ff921fb
 800bf20:	440fffff 	.word	0x440fffff
 800bf24:	7ff00000 	.word	0x7ff00000
 800bf28:	3fdbffff 	.word	0x3fdbffff
 800bf2c:	3ff00000 	.word	0x3ff00000
 800bf30:	3ff2ffff 	.word	0x3ff2ffff
 800bf34:	40038000 	.word	0x40038000
 800bf38:	3ff80000 	.word	0x3ff80000
 800bf3c:	bff00000 	.word	0xbff00000
 800bf40:	0800d538 	.word	0x0800d538
 800bf44:	0800d518 	.word	0x0800d518

0800bf48 <fabs>:
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	ee10 2a10 	vmov	r2, s0
 800bf50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf54:	ec43 2b10 	vmov	d0, r2, r3
 800bf58:	4770      	bx	lr
 800bf5a:	0000      	movs	r0, r0
 800bf5c:	0000      	movs	r0, r0
	...

0800bf60 <scalbn>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	ec55 4b10 	vmov	r4, r5, d0
 800bf66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	b999      	cbnz	r1, 800bf98 <scalbn+0x38>
 800bf70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf74:	4323      	orrs	r3, r4
 800bf76:	d03f      	beq.n	800bff8 <scalbn+0x98>
 800bf78:	4b35      	ldr	r3, [pc, #212]	; (800c050 <scalbn+0xf0>)
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	ee10 0a10 	vmov	r0, s0
 800bf80:	2200      	movs	r2, #0
 800bf82:	f7f4 fb61 	bl	8000648 <__aeabi_dmul>
 800bf86:	4b33      	ldr	r3, [pc, #204]	; (800c054 <scalbn+0xf4>)
 800bf88:	429e      	cmp	r6, r3
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	460d      	mov	r5, r1
 800bf8e:	da10      	bge.n	800bfb2 <scalbn+0x52>
 800bf90:	a327      	add	r3, pc, #156	; (adr r3, 800c030 <scalbn+0xd0>)
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	e01f      	b.n	800bfd8 <scalbn+0x78>
 800bf98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bf9c:	4291      	cmp	r1, r2
 800bf9e:	d10c      	bne.n	800bfba <scalbn+0x5a>
 800bfa0:	ee10 2a10 	vmov	r2, s0
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 f998 	bl	80002dc <__adddf3>
 800bfac:	4604      	mov	r4, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	e022      	b.n	800bff8 <scalbn+0x98>
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bfb8:	3936      	subs	r1, #54	; 0x36
 800bfba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bfbe:	4296      	cmp	r6, r2
 800bfc0:	dd0d      	ble.n	800bfde <scalbn+0x7e>
 800bfc2:	2d00      	cmp	r5, #0
 800bfc4:	a11c      	add	r1, pc, #112	; (adr r1, 800c038 <scalbn+0xd8>)
 800bfc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfca:	da02      	bge.n	800bfd2 <scalbn+0x72>
 800bfcc:	a11c      	add	r1, pc, #112	; (adr r1, 800c040 <scalbn+0xe0>)
 800bfce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfd2:	a319      	add	r3, pc, #100	; (adr r3, 800c038 <scalbn+0xd8>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 fb36 	bl	8000648 <__aeabi_dmul>
 800bfdc:	e7e6      	b.n	800bfac <scalbn+0x4c>
 800bfde:	1872      	adds	r2, r6, r1
 800bfe0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bfe4:	428a      	cmp	r2, r1
 800bfe6:	dcec      	bgt.n	800bfc2 <scalbn+0x62>
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	dd08      	ble.n	800bffe <scalbn+0x9e>
 800bfec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bff0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bff4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bff8:	ec45 4b10 	vmov	d0, r4, r5
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
 800bffe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c002:	da08      	bge.n	800c016 <scalbn+0xb6>
 800c004:	2d00      	cmp	r5, #0
 800c006:	a10a      	add	r1, pc, #40	; (adr r1, 800c030 <scalbn+0xd0>)
 800c008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c00c:	dac0      	bge.n	800bf90 <scalbn+0x30>
 800c00e:	a10e      	add	r1, pc, #56	; (adr r1, 800c048 <scalbn+0xe8>)
 800c010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c014:	e7bc      	b.n	800bf90 <scalbn+0x30>
 800c016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c01a:	3236      	adds	r2, #54	; 0x36
 800c01c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c020:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c024:	4620      	mov	r0, r4
 800c026:	4b0c      	ldr	r3, [pc, #48]	; (800c058 <scalbn+0xf8>)
 800c028:	2200      	movs	r2, #0
 800c02a:	e7d5      	b.n	800bfd8 <scalbn+0x78>
 800c02c:	f3af 8000 	nop.w
 800c030:	c2f8f359 	.word	0xc2f8f359
 800c034:	01a56e1f 	.word	0x01a56e1f
 800c038:	8800759c 	.word	0x8800759c
 800c03c:	7e37e43c 	.word	0x7e37e43c
 800c040:	8800759c 	.word	0x8800759c
 800c044:	fe37e43c 	.word	0xfe37e43c
 800c048:	c2f8f359 	.word	0xc2f8f359
 800c04c:	81a56e1f 	.word	0x81a56e1f
 800c050:	43500000 	.word	0x43500000
 800c054:	ffff3cb0 	.word	0xffff3cb0
 800c058:	3c900000 	.word	0x3c900000

0800c05c <with_errno>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	4604      	mov	r4, r0
 800c060:	460d      	mov	r5, r1
 800c062:	4616      	mov	r6, r2
 800c064:	f7fb fad0 	bl	8007608 <__errno>
 800c068:	4629      	mov	r1, r5
 800c06a:	6006      	str	r6, [r0, #0]
 800c06c:	4620      	mov	r0, r4
 800c06e:	bd70      	pop	{r4, r5, r6, pc}

0800c070 <xflow>:
 800c070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c072:	4614      	mov	r4, r2
 800c074:	461d      	mov	r5, r3
 800c076:	b108      	cbz	r0, 800c07c <xflow+0xc>
 800c078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c07c:	e9cd 2300 	strd	r2, r3, [sp]
 800c080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 fade 	bl	8000648 <__aeabi_dmul>
 800c08c:	2222      	movs	r2, #34	; 0x22
 800c08e:	b003      	add	sp, #12
 800c090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c094:	f7ff bfe2 	b.w	800c05c <with_errno>

0800c098 <__math_uflow>:
 800c098:	b508      	push	{r3, lr}
 800c09a:	2200      	movs	r2, #0
 800c09c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0a0:	f7ff ffe6 	bl	800c070 <xflow>
 800c0a4:	ec41 0b10 	vmov	d0, r0, r1
 800c0a8:	bd08      	pop	{r3, pc}

0800c0aa <__math_oflow>:
 800c0aa:	b508      	push	{r3, lr}
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c0b2:	f7ff ffdd 	bl	800c070 <xflow>
 800c0b6:	ec41 0b10 	vmov	d0, r0, r1
 800c0ba:	bd08      	pop	{r3, pc}

0800c0bc <_init>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	bf00      	nop
 800c0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c2:	bc08      	pop	{r3}
 800c0c4:	469e      	mov	lr, r3
 800c0c6:	4770      	bx	lr

0800c0c8 <_fini>:
 800c0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ca:	bf00      	nop
 800c0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ce:	bc08      	pop	{r3}
 800c0d0:	469e      	mov	lr, r3
 800c0d2:	4770      	bx	lr
